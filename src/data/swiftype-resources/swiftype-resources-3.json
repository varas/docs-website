{
  "/docs/agents/net-agent/azure-troubleshooting/azure-web-apps-unable-open-log-file": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.76236,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on <em>Azure</em> Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on <em>Azure</em> Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic <em>Azure</em> Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No data reporting with Microsoft Application Insights",
        "Problem",
        "Solution"
      ],
      "title": "No data reporting with Microsoft Application Insights",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "1b022bab6a2b6e99972745182dcd4340be20bc3f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-troubleshooting/no-data-reporting-microsoft-application-insights/",
      "published_at": "2021-06-09T01:39:23Z",
      "updated_at": "2021-04-15T22:32:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem The .NET agent has been installed and the required App Settings are set, but no data appears, and no New Relic logs are created in D:\\Home\\Logfiles\\NewRelic\\. In addition, when you use the Azure Kudu console's Process Explorer to inspect your application's Environment Variables, it shows the COR_PROFILER_PATH_64 and COR_PROFILER_PATH_32 are set and pointing to the following: D:\\Program Files (x86)\\SiteExtensions\\InstrumentationEngine\\1.0.19\\Instrumentation64\\MicrosoftInstrumentationEngine_x64.dll Copy Solution The .NET Common Language Runtime (CLR) only allows one profiler. If Microsoft's Application Insights profiler is installed on the system, the New Relic profiler will not instrument any applications, and no data will appear. For more information, see the Microsoft Azure Web Apps documentation. To resolve this issue, remove or disable Application Insights from your application. To remove the Application Insights Site Extension: Remove all settings related to Application Insights from Application > Settings > Application Settings and Save. This may include the following keys: Any key that begins with APPINSIGHTS_ Any key that begins with APPLICATIONINSIGHTS_ Any key that begins with XDT_MicrosoftApplicationInsights_ DiagnosticServices_EXTENSION_VERSION InstrumentationEngine_EXTENSION_VERSION Remove the extension from Application > Tools > Extensions. Right-click the extension and Delete. Remove the Tile Add-On from your Application Panel (if present). Restart your application. To disable Application Insights through the Azure Portal: Go to the Application Insights panel under the Settings. This may restart your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.08238,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Problem The .<em>NET</em> <em>agent</em> has been installed and the required App Settings are set, but no data appears, and no New Relic logs are created in D:\\Home\\Logfiles\\NewRelic\\. In addition, when you use the <em>Azure</em> Kudu console&#x27;s Process Explorer to inspect your application&#x27;s Environment Variables, it shows"
      },
      "id": "6043d56328ccbcd70e2c609a"
    },
    {
      "sections": [
        "Azure Web Apps: Profiler .dll locks during deployment",
        "Problem",
        "Solution",
        "Stop the file from releasing",
        "Use the New Relic Site Extension"
      ],
      "title": "Azure Web Apps: Profiler .dll locks during deployment",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "d7453c93ccf14de7be798dc0571d18118d82a4fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-troubleshooting/azure-web-apps-profiler-dll-locks-during-deployment/",
      "published_at": "2021-06-09T01:37:25Z",
      "updated_at": "2021-03-13T05:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem When deploying a new version of New Relic's .NET agent (NewRelic.Profiler.dll) for your Microsoft Azure Web App, an error message prevents you from continuing until you stop or restart the process. Solution Normally the process stops, then the assets are overwritten by the assets that New Relic packs in the site root (located at D:\\Home\\site\\wwwroot\\newrelic) during a deployment. To resolve the problem, try either of these solutions. Stop the file from releasing This solution is available for your Azure Web App if you are attempting to deploy a new .NET agent version over an existing version: Stop your web app to release the .dll file. Allow the update to proceed. Once the deploy is complete, restart the instance. Use the New Relic Site Extension You can install New Relic's .NET agent into your Azure Web App by using the New Relic Site Extension. (You should only need to install the extension once.) Navigate to https : //yoursite.scm.azurewebsites.net/ and select Site Extensions. From the Gallery, select the add icon, then select New Relic. Follow the instructions to manually add the configuration keys to your web app, and use the option that best fits your needs. To update the Site Extension: From the Azure Portal, select WebApps > (select your site) > All Settings > Extensions > New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.985085,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Azure</em> Web Apps: Profiler .dll locks during deployment",
        "sections": "<em>Azure</em> Web Apps: Profiler .dll locks during deployment",
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Problem When deploying a new version of New Relic&#x27;s .<em>NET</em> <em>agent</em> (NewRelic.Profiler.dll) for your Microsoft <em>Azure</em> Web App, an error message prevents you from continuing until you stop or restart the process. Solution Normally the process stops, then the assets are overwritten by the assets that New"
      },
      "id": "6043b9c8196a678a1e960f5a"
    }
  ],
  "/docs/agents/net-agent/azure-troubleshooting/azure-web-apps-using-always-no-data-appears": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.76236,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on <em>Azure</em> Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on <em>Azure</em> Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic <em>Azure</em> Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No data reporting with Microsoft Application Insights",
        "Problem",
        "Solution"
      ],
      "title": "No data reporting with Microsoft Application Insights",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "1b022bab6a2b6e99972745182dcd4340be20bc3f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-troubleshooting/no-data-reporting-microsoft-application-insights/",
      "published_at": "2021-06-09T01:39:23Z",
      "updated_at": "2021-04-15T22:32:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem The .NET agent has been installed and the required App Settings are set, but no data appears, and no New Relic logs are created in D:\\Home\\Logfiles\\NewRelic\\. In addition, when you use the Azure Kudu console's Process Explorer to inspect your application's Environment Variables, it shows the COR_PROFILER_PATH_64 and COR_PROFILER_PATH_32 are set and pointing to the following: D:\\Program Files (x86)\\SiteExtensions\\InstrumentationEngine\\1.0.19\\Instrumentation64\\MicrosoftInstrumentationEngine_x64.dll Copy Solution The .NET Common Language Runtime (CLR) only allows one profiler. If Microsoft's Application Insights profiler is installed on the system, the New Relic profiler will not instrument any applications, and no data will appear. For more information, see the Microsoft Azure Web Apps documentation. To resolve this issue, remove or disable Application Insights from your application. To remove the Application Insights Site Extension: Remove all settings related to Application Insights from Application > Settings > Application Settings and Save. This may include the following keys: Any key that begins with APPINSIGHTS_ Any key that begins with APPLICATIONINSIGHTS_ Any key that begins with XDT_MicrosoftApplicationInsights_ DiagnosticServices_EXTENSION_VERSION InstrumentationEngine_EXTENSION_VERSION Remove the extension from Application > Tools > Extensions. Right-click the extension and Delete. Remove the Tile Add-On from your Application Panel (if present). Restart your application. To disable Application Insights through the Azure Portal: Go to the Application Insights panel under the Settings. This may restart your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.08238,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Problem The .<em>NET</em> <em>agent</em> has been installed and the required App Settings are set, but no data appears, and no New Relic logs are created in D:\\Home\\Logfiles\\NewRelic\\. In addition, when you use the <em>Azure</em> Kudu console&#x27;s Process Explorer to inspect your application&#x27;s Environment Variables, it shows"
      },
      "id": "6043d56328ccbcd70e2c609a"
    },
    {
      "sections": [
        "Azure Web Apps: Profiler .dll locks during deployment",
        "Problem",
        "Solution",
        "Stop the file from releasing",
        "Use the New Relic Site Extension"
      ],
      "title": "Azure Web Apps: Profiler .dll locks during deployment",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "d7453c93ccf14de7be798dc0571d18118d82a4fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-troubleshooting/azure-web-apps-profiler-dll-locks-during-deployment/",
      "published_at": "2021-06-09T01:37:25Z",
      "updated_at": "2021-03-13T05:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem When deploying a new version of New Relic's .NET agent (NewRelic.Profiler.dll) for your Microsoft Azure Web App, an error message prevents you from continuing until you stop or restart the process. Solution Normally the process stops, then the assets are overwritten by the assets that New Relic packs in the site root (located at D:\\Home\\site\\wwwroot\\newrelic) during a deployment. To resolve the problem, try either of these solutions. Stop the file from releasing This solution is available for your Azure Web App if you are attempting to deploy a new .NET agent version over an existing version: Stop your web app to release the .dll file. Allow the update to proceed. Once the deploy is complete, restart the instance. Use the New Relic Site Extension You can install New Relic's .NET agent into your Azure Web App by using the New Relic Site Extension. (You should only need to install the extension once.) Navigate to https : //yoursite.scm.azurewebsites.net/ and select Site Extensions. From the Gallery, select the add icon, then select New Relic. Follow the instructions to manually add the configuration keys to your web app, and use the option that best fits your needs. To update the Site Extension: From the Azure Portal, select WebApps > (select your site) > All Settings > Extensions > New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.985085,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Azure</em> Web Apps: Profiler .dll locks during deployment",
        "sections": "<em>Azure</em> Web Apps: Profiler .dll locks during deployment",
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Problem When deploying a new version of New Relic&#x27;s .<em>NET</em> <em>agent</em> (NewRelic.Profiler.dll) for your Microsoft <em>Azure</em> Web App, an error message prevents you from continuing until you stop or restart the process. Solution Normally the process stops, then the assets are overwritten by the assets that New"
      },
      "id": "6043b9c8196a678a1e960f5a"
    }
  ],
  "/docs/agents/net-agent/azure-troubleshooting/no-data-reporting-microsoft-application-insights": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.76225,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on <em>Azure</em> Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on <em>Azure</em> Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic <em>Azure</em> Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "Azure Web Apps: Profiler .dll locks during deployment",
        "Problem",
        "Solution",
        "Stop the file from releasing",
        "Use the New Relic Site Extension"
      ],
      "title": "Azure Web Apps: Profiler .dll locks during deployment",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "d7453c93ccf14de7be798dc0571d18118d82a4fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-troubleshooting/azure-web-apps-profiler-dll-locks-during-deployment/",
      "published_at": "2021-06-09T01:37:25Z",
      "updated_at": "2021-03-13T05:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem When deploying a new version of New Relic's .NET agent (NewRelic.Profiler.dll) for your Microsoft Azure Web App, an error message prevents you from continuing until you stop or restart the process. Solution Normally the process stops, then the assets are overwritten by the assets that New Relic packs in the site root (located at D:\\Home\\site\\wwwroot\\newrelic) during a deployment. To resolve the problem, try either of these solutions. Stop the file from releasing This solution is available for your Azure Web App if you are attempting to deploy a new .NET agent version over an existing version: Stop your web app to release the .dll file. Allow the update to proceed. Once the deploy is complete, restart the instance. Use the New Relic Site Extension You can install New Relic's .NET agent into your Azure Web App by using the New Relic Site Extension. (You should only need to install the extension once.) Navigate to https : //yoursite.scm.azurewebsites.net/ and select Site Extensions. From the Gallery, select the add icon, then select New Relic. Follow the instructions to manually add the configuration keys to your web app, and use the option that best fits your needs. To update the Site Extension: From the Azure Portal, select WebApps > (select your site) > All Settings > Extensions > New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.98508,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Azure</em> Web Apps: Profiler .dll locks during deployment",
        "sections": "<em>Azure</em> Web Apps: Profiler .dll locks during deployment",
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Problem When deploying a new version of New Relic&#x27;s .<em>NET</em> <em>agent</em> (NewRelic.Profiler.dll) for your Microsoft <em>Azure</em> Web App, an error message prevents you from continuing until you stop or restart the process. Solution Normally the process stops, then the assets are overwritten by the assets that New"
      },
      "id": "6043b9c8196a678a1e960f5a"
    },
    {
      "sections": [
        "Azure Cloud Services: No data appears",
        "Problem",
        "Solution"
      ],
      "title": "Azure Cloud Services: No data appears",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "02ccb0a4315ac400995631f6b1967b5581548183",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-troubleshooting/azure-cloud-services-no-data-appears/",
      "published_at": "2021-06-09T01:37:24Z",
      "updated_at": "2021-03-13T02:47:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem You installed New Relic's .NET agent through Microsoft Azure Cloud Services, and then you installed the NuGet package. After generating some traffic and waiting a few minutes for data to start being collected for your app, data still does not appear in the APM user interface. Solution In order for the .NET agent to start up and attach to your app, at least one metric must be collected. If you have an external call or database call that New Relic instruments, then your app will report data to your APM Summary page. In addition, information about external calls will appear on your app's Service maps. Without custom instrumentation, Worker roles only report database calls and external calls. (Instrumenting a Worker Role is similar to instrumenting a custom application.) To view other details, you must gather custom metrics using New Relic's .NET API and view them in a custom dashboard.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.971214,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Azure</em> Cloud Services: No data appears",
        "sections": "<em>Azure</em> Cloud Services: No data appears",
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Problem You installed New Relic&#x27;s .<em>NET</em> <em>agent</em> through Microsoft <em>Azure</em> Cloud Services, and then you installed the NuGet package. After generating some traffic and waiting a few minutes for data to start being collected for your app, data still does not appear in the APM user interface. Solution"
      },
      "id": "6043b66c28ccbc6f972d759d"
    }
  ],
  "/docs/agents/net-agent/configuration/name-your-net-application": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.0716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional <em>configuration</em> if they run for less than one minute. Disable Application Insights Both New Relic&#x27;s .<em>NET</em> <em>agent</em> and Microsoft Application Insights rely on the CLR Profiler"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        ".NET agent configuration",
        "Configuration overview",
        "Important",
        "Configuration methods and precedence levels",
        "Required environment variables",
        "Caution",
        ".NET Framework environment variables",
        ".NET Core environment variables",
        "Profiler conflict explanation",
        "Optional environment variables",
        "Setup options, newrelic.config",
        "Configuration element",
        "agentEnabled",
        "maxStackTraceLines",
        "timingPrecision",
        "Service element",
        "licenseKey (required)",
        "sendEnvironmentInfo",
        "syncStartup",
        "sendDataOnExit",
        "sendDataOnExitThreshold",
        "completeTransactionsOnThread",
        "requestTimeout",
        "autoStart",
        "ssl (DEPRECATED)",
        "Obscuring key element",
        "Proxy element",
        "host",
        "port",
        "uriPath",
        "domain",
        "user",
        "password",
        "passwordObfuscated",
        "Log element",
        "level",
        "auditLog",
        "console",
        "directory",
        "fileName",
        "Application element (required)",
        "name",
        "disableSamplers",
        "Data transmission element",
        "putForDataSend",
        "Host name",
        "Set using config file",
        "Set using environment variable",
        "Cloud platform utilization",
        "detectAws",
        "detectAzure",
        "detectGcp",
        "detectPcf",
        "detectDocker",
        "detectKubernetes",
        "Instrumentation options",
        "Instrumentation element",
        "Applications element (instrumentation)",
        "Attributes element",
        "enabled",
        "include",
        "exclude",
        "Feature options",
        "App pools",
        "defaultBehavior",
        "applicationPool",
        "Cross application traces",
        "Error collection",
        "Tip",
        "captureEvents",
        "maxEventSamplesStored",
        "ignoreClasses",
        "ignoreMessages",
        "ignoreErrors (DEPRECATED)",
        "ignoreStatusCodes",
        "expectedClasses",
        "expectedMessages",
        "expectedStatusCodes",
        "attributes",
        "High security mode",
        "Strip exception messages",
        "Transaction events",
        "maximumSamplesStored",
        "Custom events",
        "Custom parameters",
        "Labels (tags)",
        "Browser instrumentation",
        "autoInstrument",
        "requestPathsExcluded",
        "Slow queries",
        "Transaction traces",
        "transactionThreshold",
        "recordSql",
        "explainEnabled",
        "explainThreshold",
        "maxSegments",
        "maxExplainPlans",
        "Datastore tracer",
        "instanceReporting",
        "databaseNameReporting",
        "queryParameters",
        "Distributed tracing",
        "excludeNewrelicHeader",
        "Disable span events via config file",
        "Disable span events via environment variable",
        "Infinite Tracing",
        "trace_observer",
        "Span events",
        "Settings in app.config or web.config",
        "Enable and disable the agent",
        "Application name",
        "License key",
        "Change newrelic.config location",
        "Settings in appsettings.json"
      ],
      "title": ".NET agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Configuration"
      ],
      "external_id": "b89fa7fc399f2729bfee8f5106e777798a73177a",
      "image": "https://docs.newrelic.com/static/cffd7eb2d22c8e338531c38f35208c7c/c1b63/net-agent-config-settings-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/configuration/net-agent-configuration/",
      "published_at": "2021-06-09T07:45:48Z",
      "updated_at": "2021-05-15T16:33:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains the configuration options for the APM .NET agent. Configuration overview APM agent configuration options allow you to control some aspects of how the agent behaves. Some of these config options are part of the basic install process (like setting your license key and app name), but most are more advanced settings, such as: setting a log level, setting up proxy host access, excluding certain attributes, and enabling distributed tracing. The .NET agent gets its configuration from the newrelic.config file, which is generated as part of the install process. By default, only a global newrelic.config file is created, but you can also create app-local newrelic.config files for finer control over a multi-app system. Other ways to set config options include: using environment variables, or setting server-side configuration from the UI. For more on the various config options and what overrides what, see Config settings precedence. Support for both .NET Framework and .NET Core use the same configuration options and have the same APM features, unless otherwise stated. If you make changes to the config file and want to validate that it's in the right format, you can check it against the XSD file (for example, at C:\\ProgramData\\New Relic\\.NET Agent\\newrelic.xsd for Windows) with any XSD validator. Important For IIS: after you change your newrelic.config or app.config file, perform an IISRESET from an administrative command prompt. Log level adjustments do not require a reset. Configuration methods and precedence levels Upon installation, the .NET agent's configuration file (newrelic.config) applies to all monitored applications, but you can configure the agent in other ways. Here's a diagram showing how different configuration options take precedence over one another: This diagram explains the order of precedence for different ways you might configure the .NET agent. Here are details about the configuration methods shown in the diagram, and their precedence levels: .NET configuration Details and precedence web.config or app.config or appsettings.json Configuration settings set in these files take highest precedence. However, if the agent is disabled in the local or global newrelic.config, the NewRelic.AgentEnabled settings in these files will be ignored. Environment variables Second-highest precedence. For more about these, see .NET environment variables. Server-side configuration Third-highest precedence. A limited number of server-side configuration settings are available; the other settings will come from other configuration sources. App-local newrelic.config Fourth-highest precedence. You can create app-local newrelic.config files to configure individual apps on a multi-app system. These local configuration files override settings in the global newrelic.config file. The agent looks for app-local config files in the following directories, in this order: A directory specified in your web.config or app.config file with the NewRelic.ConfigFile property The web app's root directory (with the app.config or web.config) The directory containing your app's executable file Note that the app-local config file must be complete and validate against the XSD file (for example, at C:\\ProgramData\\New Relic\\.NET Agent\\newrelic.xsd for Windows). Default (global) newrelic.config Default source and the lowest precedence. Will configure all applications on a host in the absence of other config files. The global config file is located in the New Relic agent home directory: %PROGRAMDATA%\\New Relic\\.NET Agent Required environment variables New Relic's .NET agent relies on environment variables to tell the .NET Common Language Runtime (CLR) to attach New Relic to your processes. Some .NET agent install procedures (like the MSI installer) will automatically set these variables for you; some procedures will require you to manually set them. Caution Security recommendation: You should consider what users can set system environment variables. You should also secure the accounts under which your applications execute to prevent user environment variables overriding system environment variables .NET Framework environment variables For .NET Framework, the following variables are required: COR_ENABLE_PROFILING=1 COR_PROFILER={71DA0A04-7777-4EC6-9643-7D28B46A8A41} NEWRELIC_INSTALL_PATH=path\\to\\agent\\directory Copy The .NET agent installer will add these to IIS or as system-wide environment variables. .NET Core environment variables For .NET Core, the following variables are required: Linux: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_NEWRELIC_HOME=path/to/agent/directory CORECLR_PROFILER_PATH=\"${CORECLR_NEWRELIC_HOME}/libNewRelicProfiler.so\" Copy Windows: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} NEWRELIC_INSTALL_PATH=path\\to\\agent\\directory CORECLR_NEWRELIC_HOME=path\\to\\agent\\directory Copy The .NET agent installer will add these to IIS or as system-wide environment variables. If your system has previously used monitoring services (non-New Relic), you may have a \"profiler conflict\" when trying to install and use the New Relic agent. More details: Profiler conflict explanation New Relic’s .NET agents rely on environment variables to tell the .NET Common Language Runtime (CLR) to load New Relic into your processes. The install-related environment variables are Microsoft variables, not New Relic variables. They can be used by other .NET profilers, and only one profiler can be attached to a process at a time. For this reason, if you have used previous application monitoring products, you may have profiler conflicts. For specific install instructions, see the .NET agent install documentation. Optional environment variables Some configuration options in New Relic's .NET agent can be set via environment variables as an alternative to setting them in a config file. Below is a list of environment variables recognized by the .NET agent with example values. NEW_RELIC_LICENSE_KEY=XXXXXXXX NEW_RELIC_LOG=MyApp.log NEW_RELIC_APP_NAME=Descriptive Name MAX_TRANSACTION_SAMPLES_STORED=500 MAX_EVENT_SAMPLES_STORED=500 NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_SPAN_EVENTS_ENABLED=false NEW_RELIC_LABELS=foo:bar;zip:zap NEW_RELIC_CONFIG_OBSCURING_KEY=XXXXXXXX NEW_RELIC_DISABLE_SAMPLERS=true NEWRELIC_PROFILER_LOG_DIRECTORY=path\\to\\agent\\directory (not configurable via config file) Copy Setup options, newrelic.config Use these options to setup and configure your agent via the newrelic.config file. The New Relic .NET agent supports the following categories of setup options: Configuration element Service element Obscuring key element Proxy element Log element Application element (configuration) Data transmission element Host name Configuration element The root element of the configuration document is a configuration element. <configuration xmlns=\"urn:newrelic-config\" agentEnabled=\"true\" maxStackTraceLines=\"50\" timingPrecision=\"low\"> Copy The configuration element supports the following attributes: agentEnabled Type Boolean Default true Enable or disable the New Relic agent. maxStackTraceLines Type Integer Default 80 The maximum number of stack frames to trace in any stack dump. timingPrecision Type String Default low Controls the precision of the timers. High precision will provide better data, but at a lower execution speed. Possible values are high and low. Service element The first child of the configuration element is a service element. The service element configures the agent's connection to the New Relic service. <service licenseKey=\"YOUR_LICENSE_KEY\" sendEnvironmentInfo=\"true\" syncStartup=\"false\" sendDataOnExit=\"false\" sendDataOnExitThreshold=\"60000\" autoStart=\"true\"/> Copy The service element supports the following attributes: licenseKey (required) Type String Default (none) Your New Relic license key. New Relic uses the license key to match your app's data to the correct account in the UI. Set the license key via environment variable. Alternatively, set the NEW_RELIC_LICENSE_KEY environment variable in the application's environment. NEW_RELIC_LICENSE_KEY=XXXXXXXX Copy sendEnvironmentInfo Type Boolean Default true Instructs the agent to record execution environment information. Environment information includes operating system, agent version, and which assemblies are available. syncStartup Type Boolean Default false Block application startup until the agent connects to New Relic. If set to true, the first transaction may take substantially longer to complete, because it is blocked until the connection to New Relic is finished. sendDataOnExit Type Boolean Default false Block application shutdown until the agent sends all data from the latest harvest cycle. sendDataOnExitThreshold Type Integer Default 60000 Unit Milliseconds The minimum amount of time the process must run before the agent blocks it from shutting down. This setting only applies when sendDataOnExit is true. completeTransactionsOnThread Type Boolean Default false If false, the agent uses a pool thread to complete the transaction processing. If true, the agent will complete transaction processing on the request thread. requestTimeout Type Integer Default 2000 (sendDataOnExit enabled) 120000 (sendDataOnExit disabled) Unit Milliseconds The agent's request timeout when communicating with New Relic. autoStart Type Boolean Default True Automatically start the .NET agent when the first instrumented method is hit. ssl (DEPRECATED) Type Boolean Default true The option to disable SSL is valid only for .NET agent versions 7.x and earlier. .NET agent version 8.x and higher communicate only via SSL. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. Obscuring key element The obscuringKey element is an optional child of the service element. The .NET Agent uses this value to deobfuscate supported configuration values. For example, when an obfuscated proxy password is supplied, it will be deobfuscated using this key. <service licenseKey=\"YOUR_LICENSE_KEY\"> <obscuringKey>OBSCURING_KEY</obscuringKey> </service> Copy The obscuring key may also be configured by setting the NEW_RELIC_CONFIG_OBSCURING_KEY environment variable. Caution Security recommendation: The placement of the obscuring Key in the same configuration file as an obfuscated value may pose a security risk. Consider placing the obscuring key in an environment variable and limiting access to environment variables within your environment. Proxy element The proxy element is an optional child of the service element. The proxy element is used when the agent communicates to the New Relic back-end service via a proxy. <service licenseKey=\"YOUR_LICENSE_KEY\"> <proxy host=\"hostname\" port=\"PROXY_PORT\" uriPath=\"path/to/something.aspx\" domain=\"mydomain.com\" user=\"PROXY_USERNAME\" password=\"PROXY_PASSWORD\" passwordObfuscated=\"OBFUSCATED_PROXY_PASSWORD\"/> </service> Copy The proxy element supports the following attributes: host Type String Default (none) Defines the proxy host. port Type Integer Default 8080 Defines the proxy port. uriPath Type String Default (none) Optionally define a proxy URI path. domain Type String Default (none) Optionally define a domain to use when authenticating with the proxy server. user Type String Default (none) Optionally define a user name for authentication. password Type String Default (none) Optionally define a password for authentication. passwordObfuscated Type String Default (none) For additional security, the .NET Agent supports the use of an obfuscated proxy password with the passwordObfuscated attribute. The obfuscated proxy password is generated using the following New Relic CLI command: newrelic agent config obfuscate --key OBSCURING_KEY --value \"CLEAR_TEXT_PROXY_PASSWORD\" Copy Important When using an obfuscated proxy password, the obscuring key must also be configured. Log element The log element is a child of the configuration element. The log element configures New Relic's logging . The agent generates its own log file to keep its logging information separate from your application's logs. <log level=\"info\" auditLog=\"false\" console=\"false\" directory=\"PATH\\TO\\LOG\\DIRECTORY\" fileName=\"FILENAME.log\" /> Copy The log element supports the following attributes: level Type String Default info Defines the level of detail recorded in the log file. Possible values, in increasing order of detail, are: off error warn info debug finest all Important Increasing the log level will increase New Relic's performance impact. auditLog Type Boolean Default false Records all data sent to and received from New Relic in both an auditlog log file and the standard log file. console Type Boolean Default false Send log messages to the console, in addition to the log file. directory Type String Default C:\\ProgramData\\New Relic\\.NET Agent\\Logs The directory to hold log files generated by the agent. If this is omitted, then a directory named logs in the New Relic agent install area will be used by default. fileName Type String Default (none) Defines a name for the log file. If you do not define a fileName, the name is derived from the name of the monitored process. Alternatively, set the NEW_RELIC_LOG environment variable in the application's environment. NEW_RELIC_LOG=MyApp.log Copy Application element (required) The application element is a child of the configuration element. This required element defines your application name, and disables or enables sampling. name Type String Default My Application The name of your .NET application is a child of the application element. New Relic will aggregate your data according to this name. For example, if you have two running applications named AppA and AppB, you will see two applications in the New Relic interface: AppA and AppB. You can also assign up to three names to your app. The first name is the primary name. For example: <application> <name>MY APPLICATION PRIMARY</name> <name>SECOND APP NAME</name> <name>THIRD APP NAME</name> </application> Copy Alternatively, set the NEW_RELIC_APP_NAME environment variable in the application's environment. NEW_RELIC_APP_NAME=Descriptive Name Copy disableSamplers Type Boolean Default false Samplers collect information about memory and CPU consumption. Set this to true to disable sampling. Alternatively, set the NEW_RELIC_DISABLE_SAMPLERS environment variable in the application's environment. NEW_RELIC_DISABLE_SAMPLERS=true Copy Data transmission element The dataTransmission element is a child of the configuration element. This element affects how data is sent to New Relic and can be used if you have specific data transmission requirements. <dataTransmission putForDataSend=\"false\" compressedContentEncoding=\"deflate\"/> Copy The dataTransmission element supports the following attributes: putForDataSend Type Boolean Default false Defines the HTTP method used when sending data to New Relic. Set this to true to enable using the PUT method when sending data. The POST method is used by default. Host name If the default host name label in the APM UI is not useful, you can decorate that name in the New Relic UI with a display name. After the application process is restarted and the .NET agent is reporting again, the display name will appear in the Servers drop-down list. This host name setting does not affect the list of hosts on your application's Summary page. To set a display name, choose one of the following options. The environment variable takes precedence over the config file value. Then restart your application to see your changes in the New Relic UI. Set using config file Set the displayName attribute in the processHost element in newrelic.config. The processHost element is a child of the configuration element. <configuration . . . > <processHost displayName=\"CUSTOM_NAME\" /> </configuration> Copy Set using environment variable Set the NEW_RELIC_PROCESS_HOST_DISPLAY_NAME environment variable: NEW_RELIC_PROCESS_HOST_DISPLAY_NAME = \"CUSTOM_NAME\" Copy Cloud platform utilization Configures the utilization configuration element to control how the agent collects utilization information and sends it to the New Relic service to determine pricing. The agent can collect information from Amazon Web Services (AWS) EC2 instances, Docker containers, Azure, Google Cloud Platform, Pivotal Cloud Foundry, and Kubernetes. detectAws Type Boolean Default true Determines whether the agent polls AWS metadata API. detectAzure Type Boolean Default true Determines whether the agent polls Azure metadata API. detectGcp Type Boolean Default true Determines whether the agent polls GCP metadata API. detectPcf Type Boolean Default true Determines whether the agent polls PCF information from environment variables. detectDocker Type Boolean Default true Determines whether the agent reads Docker information from the file system. detectKubernetes Type Boolean Default true Determines whether the agent polls Kubernetes information from environment variables. Instrumentation options Use these options to configure which elements of your application and environment to instrument. New Relic for .NET supports the following categories of instrumentation options: Instrumentation element Applications element (instrumentation) Attributes element Instrumentation element The instrumentation element is a child of the configuration element. By default, the .NET agent instruments IIS asp worker processes and Azure web and worker roles. To instrument other processes, see Instrumenting custom applications. Applications element (instrumentation) The applications element is a child of the instrumentation element. The applications element specifies which non-web apps to instrument. It contains a name attribute. Important This is not the same as the application (configuration) element, which is a child of the configuration element. <instrumentation> <applications> <application name=\"MyService1.exe\" /> <application name=\"MyService2.exe\" /> <application name=\"MyService3.exe\" /> </applications> </instrumentation> Copy Attributes element An attribute is a key/value pair that determines the properties of an event or transaction. Each attribute is sent to APM transaction traces, APM error traces, Transaction events, TransactionError events, or PageView events. The primary attributes element enables or disables attribute collection for the .NET agent, and defines specific attributes to collect or exclude. You can also configure attribute settings based on their destination: Error collection, transaction traces, Browser instrumentation, and transaction events. In this example, the agent excludes all attributes whose key begins with myApiKey (myApiKey.bar, myApiKey.value), but collects the custom attribute myApiKey.foo. <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> Copy You can view the .NET APM attributes on the .NET agent attributes page. You can also define custom attributes with the agent API call AddCustomParameter. enabled Type Boolean Default true Enable or disable attribute collection. When set to false in the primary attribute element, this setting overrides all attribute settings for individual destinations. include Type String Default (none) If attributes are enabled, the agent will collect all attribute keys specified in this list. To specify multiple attribute keys, specify each individually. You can also use a * wildcard character at the end of a key to match multiple attributes (for example, myApiKey.*). For more information, see Attribute rules. exclude Type String Default (none) If attributes are enabled, the agent will not collect attribute keys specified in this list. To specify multiple attribute keys, specify each individually. You can also use a * wildcard character at the end of a key to match multiple attributes (for example, myApiKey.*). For more information, see Attribute rules. Feature options Use these options to enable, disable, and configure New Relic features. New Relic for .NET allows you to configure the following features: App pools Cross application traces Error collection High security mode Strip exception messages Transaction events Custom events Custom parameters Tags/labels Browser instrumentation Slow Queries Transaction traces Datastore tracer Distributed tracing Span events App pools Important This is only applicable to a system's global config file. The applicationPools element is a child of the configuration element. The applicationPools element specifies for the profiler exactly which application pools to instrument and uses the same name as the IIS application pool name. This configuration element is useful when you may need to instrument only a small subset of your app pools. For example, a given server might have several hundred application pools, but only a few of those pools need to be instrumented by the .NET agent. Here is an example of disabling instrumentation for specific application pools: <applicationPools> <applicationPool name=\"Foo\" instrument=\"false\"/> <applicationPool name=\"Bar\" instrument=\"false\"/> </applicationPools> Copy Here is an example of disabling instrumentation for all application pools currently executing on the server and enabling instrumentation for specific application pools: <applicationPools> <defaultBehavior instrument=\"false\"/> <applicationPool name=\"Foo\" instrument=\"true\"/> <applicationPool name=\"Bar\" instrument=\"true\"/> </applicationPools> Copy The applicationPools element supports the following elements: defaultBehavior Type Boolean Default false Defines how the .NET agent will behave on a \"global\" level for application pools served via IIS. The .NET agent instruments all application pools by default. When true, application pools listed under applicationPool with an instrument attribute set to false will not be instrumented. Essentially, when set to false, the application pool list acts as an allow list. When set to true, the application pool list acts as a deny list. applicationPool Defines instrumentation behavior for a specific application pool. The name attribute is the name of an application pool. Enable or disable profiling in the instrument attribute. Define this application in the name attribute. Cross application traces The crossApplicationTracer element is a child of the configuration element. crossApplicationTracer links transaction traces across applications. When linked in a service-oriented architecture, all instrumented applications that communicate with each other via HTTP will now \"link\" transaction traces with the applications that they call and the applications they are called by. Cross application tracing makes it easier to understand the performance relationship between services and applications. <crossApplicationTracer enabled=\"true\"/> Copy The crossApplicationTracer element supports the following attribute: enabled Type Boolean Default true Enable or disable cross application tracing Error collection The errorCollector element is a child of the configuration element. errorCollector configures error collection, which captures information about uncaught exceptions and sends them to New Relic. <errorCollector enabled=\"true\" captureEvents=\"true\" maxEventSamplesStored=\"100\"> <ignoreClasses> <errorClass>System.IO.FileNotFoundException</errorClass> <errorClass>System.Threading.ThreadAbortException</errorClass> </ignoreClasses> <ignoreMessages> <errorClass name=\"System.Exception\"> <message>Ignore message</message> <message>Ignore too</message> </errorClass> </ignoreMessages> <ignoreStatusCodes> <code>401</code> <code>404</code> </ignoreStatusCodes> <expectedClasses> <errorClass>System.ArgumentNullException</errorClass> <errorClass>System.ArgumentOutOfRangeException</errorClass> </expectedClasses> <expectedMessages> <errorClass name=\"System.Exception\"> <message>Expected message</message> <message>Expected too</message> </errorClass> </expectedMessages> <expectedStatusCodes>403,500-505</expectedStatusCodes> <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> </errorCollector> Copy Tip For an overview of error configuration in APM, see Manage errors in APM. The errorCollector element supports the following elements and attributes: enabled Type Boolean Default true Enable or disable the error collector. captureEvents Type Boolean Default true Enable or disable the capturing of error events. maxEventSamplesStored Type Integer Default 100 Reservoir limit for error events. ignoreClasses A list of fully qualified class names to be ignored. The maximum number of error class and message combinations that SHOULD be reported is 50. If more than 50 are listed, then only the first 50 SHOULD be used ignoreMessages An optional map of fully qualified class names to list of strings matching a substring of the message of an error. The maximum number of error class and message combinations that SHOULD be reported is 50. If more than 50 are listed, then only the first 50 SHOULD be used ignoreErrors (DEPRECATED) Type String Default (none) Lists specific exceptions to not report to New Relic. The full name of the exception should be used, such as System.IO.FileNotFoundException. ignoreStatusCodes Type String Default (none) Lists specific HTTP error codes to not report to New Relic. You can use standard integral HTTP error codes, such as just 401, or you may use Microsoft full status codes with decimal points, such as 401.4 or 403.18. The status codes should be equal to or greater than 400. expectedClasses A list of fully qualified class names to be marked as expected. The maximum number of error class and message combinations that SHOULD be reported is 50. If more than 50 are listed, then only the first 50 SHOULD be used expectedMessages An optional map of fully qualified class names to list of strings matching a substring of the message of an error. The maximum number of error class and message combinations that SHOULD be reported is 50. If more than 50 are listed, then only the first 50 SHOULD be used expectedStatusCodes A comma separated list of status codes. The list may include integer ranges, using a single dash (-) and will be inclusive of both the starting and ending integer in the range. attributes Use this sub-element to customize your agent attribute settings for error traces. This sub-element uses the same settings as the primary attributes element: enabled, include, and exclude. High security mode The highSecurity element is a child of the configuration element. To enable high security mode, set this property to true and enable high security property in the New Relic user interface. Enabling high security means SSL is turned on, request parameters and custom parameters are not collected, strip exception messages is enabled, and queries cannot be sent to New Relic in their raw form. enabled Type Boolean Default false Enable or disable high security mode. Example: <highSecurity enabled=\"true\"/> Copy Strip exception messages The stripExceptionMessages element is a child of the configuration element. To enable strip exception messages, set this property to true. By default, this is set to false, which means that the agent sends messages from all exceptions to the New Relic collector. If you enable high security mode, this is automatically changed to true, and the agent strips the messages from exceptions. enabled Type Boolean Default false Enable or disable strip exception messages. Example: <stripExceptionMessages enabled=\"true\"/> Copy Transaction events The transactionEvents element is a child of the configuration element. Use transactionEvents to configure transaction events. <transactionEvents enabled=\"true\" maximumSamplesStored=\"10000\"> <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> </transactionEvents> Copy The transactionEvents element supports the following attributes: enabled Type Boolean Default true Enable or disable the event recorder. maximumSamplesStored Type Integer Default 10000 The maximum number of samples to store in memory at once. Alternatively, set the MAX_TRANSACTION_SAMPLES_STORED environment variable in the application's environment. MAX_TRANSACTION_SAMPLES_STORED=500 Copy attributes Use this sub-element to customize your agent attribute settings for transaction events. This sub-element uses the same settings as the primary attributes element: enabled, include, and exclude. Tip These attribute settings are specific to transaction events. Attribute settings can be applied globally to all event types to with this configuration setting. Caution When distributed tracing and/or Infinite Tracing are enabled, information from transaction events is applied to the root Span Event of the transaction. Consider applying any attribute settings for transaction events to span events and/or apply them as Global Attribute settings. Custom events The customEvents element is a child of the configuration element. Use customEvents to configure custom events. <customEvents enabled=\"true\" maximumSamplesStored=\"10000\"/> Copy The CustomEvents element supports the following attributes: enabled Type Boolean Default true Enable or disable the event recorder. maximumSamplesStored Type Integer Default 10000 The maximum number of samples to store in memory at once. Alternatively, set the MAX_EVENT_SAMPLES_STORED environment variable in the application's environment. MAX_EVENT_SAMPLES_STORED=500 Copy Custom parameters The customParameters element is a child of the configuration element. Use customParameters to configure custom parameters. <customParameters enabled=\"true\" /> Copy The CustomParameters element supports the following attributes: enabled Type Boolean Default true Enable or disable the capture of custom parameters. Labels (tags) The labels element is a child of the configuration element. This sets tag names and values. The list is a semicolon delimited list of colon-separated name and value pairs. You can also use with the NEW_RELIC_LABELS environment variable. Example: <labels>foo:bar;zip:zap</labels> Copy Browser instrumentation The browserMonitoring element is a child of the configuration element. browserMonitoring configures Browser monitoring in your .NET application. Browser gives you insight your end users' performance experience. This is accomplished by measuring the time it takes for your users' browsers to download and render your webpages by injecting a small amount of JavaScript code into the header and footer of each page. // If you use both the Exclude and Attribute elements // the Exclude element must be listed first. <browserMonitoring autoInstrument=\"true\"> <requestPathsExcluded> <path regex=\"url-regex-1\"/> <path regex=\"url-regex-2\"/> ... <path regex=\"url-regex-n\"/> </requestPathsExcluded> <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> </browserMonitoring> Copy The browserMonitoring element supports the following attributes: autoInstrument Type Boolean Default true By default the agent automatically injects the Browser agent JavaScript. To turn off automatic injection, set this attribute to false. attributes Use this sub-element to customize your agent attribute settings for Browser. This sub-element uses the same settings as the primary attributes element: enabled, include, and exclude. requestPathsExcluded Use this sub-element to prevent the Browser agent from being injected in specific pages. The element is used as follows: <requestPathsExcluded> <path regex=\"url-regex-1\"/> <path regex=\"url-regex-2\"/> ... <path regex=\"url-regex-n\"/> </requestPathsExcluded> Copy The agent will not inject the Browser agent into pages whose URL matches one of the specified regular expressions. The regular expression should follow Microsoft guidelines for the Regex class. It is a reference to the virtual directory of the path in your application and not the full URL of the path you wish to exclude. For example, to exclude the pages in https://www.mywebsite.com/mywebpages/ you would simply insert /mywebpages/ as the path regex value. The requestPathsExcluded element should be used in cases where it is impossible or undesirable to use the DisableBrowserMonitoring() call. To minimize a possible performance impact try to use as few regular expressions as possible and keep them as simple as possible. Slow queries The slowSql element is a child of the configuration element. slowSql configures capturing information about slow query executions, and captures and obfuscates explain plans for these queries. <slowSql enabled=\"true\"/> Copy The slowSql element supports the following attribute: enabled Type Boolean Default true Enable or disable slow query tracing. Transaction traces The transactionTracer element is a child of the configuration element. transactionTracer configures transaction traces. Included in the trace is the exact call sequence of the transactions, including any query statements issued. <transactionTracer enabled=\"true\" transactionThreshold=\"apdex_f\" recordSql=\"obfuscated\" explainEnabled=\"true\" explainThreshold=\"500\" maxSegments=\"3000\" maxExplainPlans=\"20\"> <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> </transactionTracer> Copy The transactionTracer element supports the following attributes: enabled Type Boolean Default true Enable or disable transaction traces. transactionThreshold Type String Default apdex_f Defines the threshold for transaction traces. If a transaction takes longer than the threshold, it is eligible for being traced. See transaction trace basics for more about the rules governing traces. The default value is apdex_f, which sets the threshold to four times the application's apdex_t value. For more information about apdex_t, see Apdex. You can also set the threshold to be a specific time value in milliseconds. recordSql Type String Default obfuscated Select a query tracing policy. Options are off, which records nothing; obfuscated, which records an obfuscated version of the query; or raw, which records the query exactly as it is issued to the database. Caution Recording raw queries may capture sensitive information. explainEnabled Type Boolean Default false When true, the agent captures EXPLAIN statements for slow queries. explainThreshold Type Integer Default 500 Unit Milliseconds The agent collects slow query data for queries that exceed this threshold, along with any available explain plans, as part of transaction traces. maxSegments Type Integer Default 3000 The maximum number of segments to collect in a transaction trace. maxExplainPlans Type Integer Default 20 The maximum number of explain plans to collect during a harvest cycle. attributes Use this sub-element to customize your agent attribute settings for transaction traces. This sub-element uses the same settings as the primary attributes element: enabled, include, and exclude. Datastore tracer The datastoreTracer element is a child of the configuration element. <datastoreTracer> <instanceReporting enabled=\"true\" /> <databaseNameReporting enabled=\"true\" /> <queryParameters enabled=\"false\" /> </datastoreTracer> Copy The datastoreTracer element supports the following sub-elements: instanceReporting Use this sub-element to enable collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on slow query traces and transaction traces. The default value of attribute enabled is true. databaseNameReporting Use this sub-element to enable collection of the database name on slow query traces and transaction traces for some database drivers. The default value of attribute enabled is true. queryParameters Use this sub-element to enable collection of the SQL query parameters on slow query traces. The default value of attribute enabled is false. Caution Recording query parameters may capture sensitive information. The transactionTracer.recordSql configuration option must be set to raw or this option is ignored. Distributed tracing The distributedTracing element is a child of the configuration element. <distributedTracing enabled=\"false\" excludeNewrelicHeader=\"false\"/> Copy Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Enabling distributed tracing disables cross application tracing, and has other effects on APM features. Before enabling, read the planning guide. Important Requires .NET agent version 8.6.45.0 or higher. The distributedTracing element supports the following attributes: To enable or disable, see Enable distributed tracing. enabled Type Boolean Default false Alternatively, enable distributed tracing via the NEW_RELIC_DISTRIBUTED_TRACING_ENABLED environment variable in the application's environment. NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy excludeNewrelicHeader Type Boolean Default false By default, supported versions of the agent utilize both the newrelic header and W3C Trace Context headers for distributed tracing. The newrelic distributed tracing header allows interoperability with older agents that don't support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over newrelic headers for distributed tracing. If you do not want to utilize the newrelic header, setting this to true will result in the agent excluding the newrelic header and only using W3C Trace Context headers for distributed tracing. Distributed tracing reports span events. Span event reporting is enabled by default, but distributed tracing must be enabled for spans to be reported. To disable span events, choose one of the following options: Disable span events via config file Set the <spanEvents> element to false to disable via the newrelic.config file. This element is a child of the <configuration> element. <configuration . . . > <spanEvents enabled=\"false\" /> </configuration> Copy Disable span events via environment variable Set the NEW_RELIC_SPAN_EVENTS_ENABLED environment variable in the application's environment. NEW_RELIC_SPAN_EVENTS_ENABLED=false Copy Infinite Tracing Infinite Tracing extends the distributed tracing service by employing a trace observer that is external to the agent. It observes 100% of your application traces across various services and provides actionable data so you can solve issues faster. Important Infinite Tracing requires .NET Agent version 8.30 or higher. To turn on Infinite Tracing, enable distributed tracing and add the additional settings below <configuration . . . > <distributedTracing enabled=\"true\" /> <infiniteTracing> <trace_observer host=\"YOUR_TRACE_OBSERVER_HOST\" /> </infiniteTracing> </configuration> Copy The infiniteTracing element supports the following elements: trace_observer The trace_observer element identifies an observer host that is independent from the agent. For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint. The trace observer may be configured using the NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST environment variable as well. Important When configuring the trace observer, you should not supply the protocol as part of the host. For example, use myhost.infinitetracing.com instead of https://myhost.infinitetracing.com. Span events The spanEvents element is a child of the configuration element. Use spanEvents to configure span events. <spanEvents enabled=\"true\"> <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> </spanEvents> Copy The spanEvents element supports the following attributes: enabled Type Boolean Default true Enable or disable the event recorder. attributes Use this sub-element to customize your agent attribute settings for span events. This sub-element uses the same settings as the primary attributes element: enabled, include, and exclude. Tip These attribute settings are specific to span events. Attribute settings may be applied globally to all event types to with this configuration setting. Settings in app.config or web.config For ASP.NET and .NET Framework console apps you can also configure the following settings in your app's app.config or web.config, within the outermost element, <configuration>: Enable and disable the agent <appSettings> <add key = \"NewRelic.AgentEnabled\" value=\"false\" /> </appSettings> Copy Important If the agent is disabled in the local or global newrelic.config, the NewRelic.AgentEnabled settings in these files will be ignored. Application name For more information, see Name your .NET application. <appSettings> <add key = \"NewRelic.AppName\" value =\"Descriptive Name\" /> </appSettings> Copy License key <appSettings> <add key = \"NewRelic.LicenseKey\" value =\"XXXXXXXX\" /> </appSettings> Copy Change newrelic.config location Designates an alternative location for the config file outside of the local root of the app or global config location. The location entered must be an absolute path. <appSettings> <add key = \"NewRelic.ConfigFile\" value=\"C:\\Path-to-alternate-config-dir\\newrelic.config\" /> </appSettings> Copy Settings in appsettings.json For .NET Core apps, you can configure the following settings in appsettings.json if the following is true: The appsettings.json file must be located in the current working directory of the application. The application must have the following dependencies: Microsoft.Extensions.Configuration Microsoft.Extensions.Configuration.Json Microsoft.Extensions.Configuration.EnvironmentVariables Enable and disable the agent { \"NewRelic.AgentEnabled\":\"false\" } Copy Important If the agent is disabled in the local or global newrelic.config, the NewRelic.AgentEnabled setting in this file will be ignored. Application name For more information, see Name your .NET application. { \"NewRelic.AppName\": \"Descriptive Name\" } Copy License key { \"NewRelic.LicenseKey\": \"XXXXXXXX\" } Copy Change newrelic.config location Designates an alternative location for the config file outside of the local root of the app or global config location. The location entered must be an absolute path. { \"NewRelic.ConfigFile\": \"C:\\\\Path-to-alternate-config-dir\\\\newrelic.config\" } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.81299,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> <em>configuration</em>",
        "sections": ".<em>NET</em> <em>agent</em> <em>configuration</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This document contains the <em>configuration</em> options for the APM .<em>NET</em> <em>agent</em>. <em>Configuration</em> overview APM <em>agent</em> <em>configuration</em> options allow you to control some aspects of how the <em>agent</em> behaves. Some of these config options are part of the basic install process (like setting your license key and app name"
      },
      "id": "60446c3b196a679d6a960f7a"
    },
    {
      "sections": [
        "Java agent configuration: Config file",
        "Configuration file structure",
        "Tip",
        "Configuration settings precedence",
        "Configuring the Java extensions directory",
        "Create an extensions directory",
        "Specify an existing extensions directory",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (REQUIRED)",
        "agent_enabled",
        "apdex_t (DEPRECATED)",
        "appserver_port",
        "Important",
        "audit_mode",
        "ca_bundle_path",
        "use_private_ssl",
        "enable_auto_app_naming",
        "enable_auto_transaction_naming",
        "Caution",
        "enable_custom_tracing",
        "extensions.dir",
        "high_security",
        "insert_api_key",
        "labels",
        "max_stack_trace_lines",
        "proxy_host",
        "proxy_password",
        "proxy_port",
        "proxy_user",
        "proxy_scheme",
        "reactor-netty.errors.enabled",
        "send_data_on_exit",
        "send_data_on_exit_threshold",
        "send_environment_info",
        "send_jvm_props",
        "ssl (DEPRECATED)",
        "sync_startup",
        "scala_futures_as_segments",
        "Logging configuration",
        "log_daily",
        "log_file_count",
        "log_file_name",
        "log_file_path",
        "log_level",
        "log_limit_in_kbytes",
        "JMX",
        "enabled",
        "linkingMetadataMBean",
        "Attributes",
        "include",
        "exclude",
        "Transaction tracer",
        "explain_enabled",
        "explain_threshold",
        "insert_sql_max_length",
        "log_sql",
        "record_sql",
        "stack_based_naming (Play 2.x+ only)",
        "stack_trace_threshold",
        "top_n",
        "transaction_threshold",
        "slow_query_whitelist (DEPRECATED)",
        "collect_slow_queries_from",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "token_limit",
        "segment_limit",
        "Transaction segments",
        "Browser monitoring",
        "auto_instrument",
        "disabled_auto_pages",
        "External tracer",
        "exclude_request_uri",
        "Cross application tracer",
        "Error collector",
        "ignore_classes",
        "ignore_messages",
        "ignore_status_codes",
        "ignoreErrorPriority",
        "expected_classes",
        "expected_messages",
        "expected_status_codes",
        "ignore_errors (DEPRECATED)",
        "Strip exceptions",
        "whitelist (DEPRECATED)",
        "allowed_classes",
        "Thread profiler",
        "Transaction events",
        "max_samples_stored",
        "custom_request_headers",
        "Custom events",
        "Hostname configuration",
        "display_name",
        "ipv_preference",
        "Custom instrumentation",
        "trace_annotation_class_name",
        "com.newrelic.instrumentation.servlet-user",
        "System properties",
        "newrelic.config.process_host.display_name",
        "newrelic.config.file",
        "newrelic.debug",
        "newrelic.environment",
        "newrelic.home",
        "newrelic.logfile",
        "Environment variables",
        "NEW_RELIC_APP_NAME (REQUIRED)",
        "NEW_RELIC_DISTRIBUTED_TRACING_ENABLED",
        "NEW_RELIC_PROCESS_HOST_DISPLAY_NAME",
        "NEW_RELIC_LICENSE_KEY (REQUIRED)",
        "NEW_RELIC_LOG",
        "Cloud platform utilization",
        "detect_aws",
        "detect_docker",
        "Async instrumentation",
        "token_timeout",
        "segment_timeout",
        "Circuit breaker",
        "memory_threshold",
        "gc_cpu_threshold",
        "Message tracer",
        "segment_parameters.enabled",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Infinite Tracing",
        "trace_observer.host",
        "Span events",
        "Jar collector",
        "skip_temp_jars",
        "jars_per_second"
      ],
      "title": "Java agent configuration: Config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "1d61f848fa192438225eae269421b8d384915c8b",
      "image": "https://docs.newrelic.com/static/60ca967eab99ca225186310913ae2de6/8c557/java-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file/",
      "published_at": "2021-06-09T07:43:58Z",
      "updated_at": "2021-06-09T07:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent reads its configuration from the newrelic.yml file. By default the agent looks for this file in the directory that contains newrelic.jar. You can override the config file's location by setting the newrelic.config.file system property to a fully qualified file name. Configuration file structure The newrelic.yml file is split into stanzas corresponding to different environments: Test Development Staging Production (default) New Relic applies settings in the common stanza to each of these environments. You can select other environments as the default by setting the newrelic.environment system property to the environment name. Tip A newrelic.yml template is available. If you edit newrelic.yml, be careful to conform to the YAML format. Use a YAML validator to ensure the syntax is accurate before using the file with New Relic's Java agent, and follow these rules: Java agent newrelic.yml Requirements Format YML files are case sensitive. Indentations All indentations must be in increments of two characters. Other indentations will result in an Unable to parse configuration file error upon agent startup. Use the same level of indentation for data in the same stanza of the file. Indent any sub-stanzas by an additional two spaces. Changes to file You must restart your JVM host process for changes to take effect. Exception: Property changes to log_level and audit_mode do not require a restart. Property changes under circuit breaker don't require a restart. Configuration settings precedence To override any setting in the config file, use a system property override. In certain environments, environment variables can also be used to override both the config file and the system properties. The environment variables primarily exist to support Heroku. When used, server-side configuration overrides all other configuration settings. With the Java agent, server-side configuration overrides all other settings. Environment variables override Java system properties. Java properties override user configuration settings in your newrelic.yml file. User settings override the newrelic.yml default settings. Configuring the Java extensions directory The Java agent reads the configuration files on process startup. To identify the directory where the files are located, either create a new or specify an existing extensions directory: Create an extensions directory To create the extensions directory: Navigate to the directory where newrelic.jar and newrelic.yml are located. Create a directory named extensions. In newrelic.yml, check that the property extensions.dir is not set. Specify an existing extensions directory To use an existing Java extensions directory: In your newrelic.yml file, locate the common section. Use the property extensions.dir to specify the location of the file. General configuration settings Set these options in the common stanza. To override any of these options, use a newrelic.config prefixed system property. license_key (REQUIRED) Type String Default (none) This setting is required. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. app_name (REQUIRED) Type String Default (none) This setting is required. Defines the application name used to report data to New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon. For example, to report data to My Application and My Application 2 use this: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. agent_enabled Type Boolean Default true Flag to enable the agent. Use this setting to force the agent to run or not run. apdex_t (DEPRECATED) Type Float Default 1.0 The apdex_t threshold in seconds for the application's Apdex score. For Java agent versions 1.2.008 or higher, the apdex_t value is set in the UI and the value in newrelic.yml is ignored. appserver_port Type Integer Default (none) Number to differentiate JVMs for the same app on the same machine. New Relic uses host/port for uniqueness, so you can distinguish the JVMs by putting a switch like this into the startup arguments for each JVM: -Dnewrelic.config.appserver_port=8081 Copy Once you have used appserver_port to name the JVMs and restart them, you should be able to see them individually in the dropdown and in the profiling interface. Important This is only a change for New Relic; it doesn't actually affect the port on which the host communicates in any way. audit_mode Type Boolean Default false Enables plain text logging of all data sent to New Relic to the agent logfile. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. ca_bundle_path Type String Value Format /path/to/ca/cert/bundle.pem Specifies a path to a custom SSL certificate bundle that will be used by the agent to establish a secure connection to New Relic. If your custom SSL certificate bundle doesn't include certificates that are sufficient to connect to New Relic then you'll need to merge the required certs into your custom certificate bundle. use_private_ssl Type Boolean Default false The following SSL certificates are bundled into the agent jar: META-INF/certs/eu-newrelic-com.pem META-INF/certs/eu01-nr-data-net.pem META-INF/certs/newrelic-com.pem Copy By default (use_private_ssl: false) the agent will use the SSL certificates bundled into the JDK to establish a secure connection to New Relic or the custom SSL certificates bundle specified by ca_bundle_path. If you want to use the SSL certificates bundled with the agent, set use_private_ssl: true. Note: use_private_ssl will be ignored if ca_bundle_path is set. enable_auto_app_naming Type Boolean Default false Enables the reporting of data separately for each web app. Set to true to enable support for auto app naming. The name of each web app is detected automatically and the agent reports data separately for each one. This provides a finer-grained performance breakdown for web apps in New Relic. For more information, see Automatic application naming. For more methods of naming your application, see Name your Java application. enable_auto_transaction_naming Type Boolean Default true Enables component-based transaction naming. Set to true to enable component-based transaction naming. Set to false to use the URI of a web request as the name of the transaction. For more information, see Naming web transactions. Caution Unless you implement API calls to name your transactions, disabling auto-transaction naming is very likely to cause Metric grouping issues. enable_custom_tracing Type Boolean Default true Enables all instrumentation using an @Trace annotation. Disabling this causes @Trace annotations to be ignored. extensions.dir Type String Default (none) Defines the location of the optional extensions directory. If this property is not set, the agent will look for a subdirectory named extensions in the same directory as newrelic.jar and newrelic.yml. high_security Type Boolean Default false In order for high security to be enabled, this property must be set to true and the high security property in the New Relic user interface must be enabled. Enabling high security means SSL is turned on, request and message queue parameters are not collected, and queries cannot be sent to New Relic in their raw form. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. insert_api_key Type String Default (none) A valid Insert API Key for your account. This is only required for Real-time Java profiling using JFR metrics. labels Type String Default \"\" Attach tags to this app. Note that this option now enables tags, which replaced the label feature. You can still query your historical labels. max_stack_trace_lines Type Integer Default 30 Limits the number of lines the agent collects from each stack trace. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. proxy_host Type String Default (none) The proxy host through which to connect to the New Relic collector. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_password Type String Default (none) The password for proxy authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. Important The Java agent supports Basic (clear text) authentication. proxy_port Type String Default 8080 The proxy host port number. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_user Type String Default (none) The username for proxy authentication, such as Basic (clear text) authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. proxy_scheme Type String Default (none) The proxy scheme used. Setting proxy_scheme: \"https\" will allow the agent to connect through proxies using the HTTPS scheme. reactor-netty.errors.enabled Type Boolean Default true Whether errors are reported for reactor netty. If set to false, errors will be ignored. Important Only available in Java agent 6.3.0 and above. send_data_on_exit Type Boolean Default false Enable delayed JVM shutdown to give the agent a chance to send latest metric data to New Relic before JVM shutdown. send_data_on_exit_threshold Type Integer Default 60 The number of seconds after which the agent will use the send_data_on_exit setting. send_environment_info Type Boolean Default true Enable reporting of JVM settings to New Relic. send_jvm_props Type Boolean Default true When set to true, JVM properties will be sent to New Relic. ssl (DEPRECATED) Type Boolean Default true Requires connections to the New Relic collector to go over SSL. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. This work is done asynchronously to the threads that process your application code, so response times will not be directly affected by this change. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. sync_startup Type Boolean Default false Enable the agent to connect the New Relic collector immediately upon app startup. scala_futures_as_segments Important This applies to Java agent version 3.44.0 or higher. Type Boolean Default false For more concise transaction trace details, the agent does not report Scala Futures as transaction segments, and those Futures do not contribute to the transaction’s total time. Enabling scala_futures_as_segments increases your overhead. If you want Scala Futures to report as transaction segments so you can view them in a transaction trace, you can enable it: scala_futures_as_segments: enabled: true Copy Logging configuration These are part of the general configuration variables. They are broken out here because they are frequently tweaked for debugging. Some of the logging configuration variables are dynamic and do not need a host restart for them to take effect. For instance, if log files are growing too quickly, log_level can be set to a less verbose setting to reduce the reporting rate. Here is the order of precedence for configuration variables affecting log rotation. If log_daily is true, other log rotation settings are ignored. If log_file_count is 1 or 0, the size limit is ignored. Finally, the agent applies log_limit_in_kbytes. Depending on the growth rate, it is possible for the log file size to exceed the configured value by a small amount. log_daily Type Boolean Default false Set to true to roll the logs daily. Overrides the other configuration variables that affect log rotation. log_file_count Type Integer Default 1 The maximum number of log files to keep when using log rotation. log_file_name Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. log_file_path Type String Default logs subdirectory where newrelic.jar is located The log file path. Tip If log_file_path is specified, the directory must already exist. If the default value is used, the agent will attempt to create the directory. log_level Type String Default info The log verbosity level. The agent uses its own log file to keep its logging separate from that of your application. Valid options, in order of verboseness, are: off severe warning info fine finer finest This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. log_limit_in_kbytes Type Integer Default 0 The log file size in kilobytes at which log files are rotated. Set to 0 for no limit. JMX To set these options, use the jmx stanza. To override them, use a newrelic.config.jmx prefixed system property. The Java agent uses JMX to collect JVM data as well as to communicate with the JFR (Java Flight Recorder) daemon for Real-time Java profiling. enabled Type Boolean Default true This setting can be used to turn on or off all JMX functionality. linkingMetadataMBean Type Boolean Default false This setting can be enabled to allow the Java agent to expose linking metadata to the JFR daemon. Doing so allows the JFR daemon to obtain the entity GUID generated by the Java agent and link JFR data with the same APM application that is being monitored by the agent instead of as a separate entity. Important This applies to Java agent version 6.1.0 or higher. Attributes To set these options, use the attributes stanza. To override them, use a newrelic.config.attributes prefixed system property. Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. There is also an attribute stanza under each destination. For more information, see Java agent attributes, Enabling and disabling attributes and Attribute examples. enabled Type Boolean Default true This setting can be used to turn on or off all attributes. Important For security reasons, capturing custom attributes using the Custom Instrumentation Editor is set to false by default. include Type List of Strings Default (none) If attributes are enabled, attribute keys found in this list will be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. Transaction tracer These options are set in the transaction_tracer stanza and can be overridden by using a newrelic.config.transaction_tracer prefixed system property. Transaction tracing captures deep information about slow transactions and sends this to the New Relic service. The transaction includes the exact call sequence of the transactions, including any query statements issued. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true The transaction tracer is enabled by default. Set this to false to turn it off. explain_enabled Type Boolean Default true Determines whether the agent will capture the EXPLAIN plan for slow queries. Only supported for MySQL and PostgreSQL. explain_threshold Type Float Default 0.5 Threshold in seconds for query execution time below which the slow query and the EXPLAIN plan (if supported) will not be captured. Relevant to slow queries only when record_sql is set to raw or obfuscated. Relevant to EXPLAIN plans only when explain_enabled is set to true. insert_sql_max_length Type Integer Default 2000 The character limit for the SQL query string. If you have many slow SQL queries with large chunks of information, this could negatively affect performance or how quickly you see your data in New Relic. Increase the value gradually until you find the right balance of information and performance. log_sql Type Boolean Default false Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode. record_sql Type String Default obfuscated When the transaction tracer is on, query statements can optionally be recorded. The recorder has three modes: off: Send no queries. raw: Send the query statement in its original form. obfuscated: Strips out numeric and string literals. stack_based_naming (Play 2.x+ only) Type Boolean Default False Defaulted to true until Java agent version 3.12.1, when it was changed to false. This option is for Play 2.x+ only. Play/Scala instrumentation can use Thread.getStackTrace() to improve tracer naming, but at the cost of increased overhead. stack_trace_threshold Type Integer Default 0.5 Defines a threshold (in seconds) for collecting stack traces from an SQL call. When SQL statements exceed this threshold, the agent will capture the current stack trace. This is useful for pinpointing where long SQL calls originate from. top_n Type Integer Default 20 Use this setting to control the variety of your transaction traces. top_n is an integer that represents the number of unique, slow transactions that traces will be created for. If you want transaction traces to more accurately reflect the actual slowest transactions in your app, make this value lower. If you want to sample a more diverse array of transactions, make the value higher. A value of 0 would mean that only the slowest transaction is always traced. This is considered not to be optimal, though, because you may have one or two transactions that are always the slowest, and repeatedly seeing those same transaction traces will probably not give you much value. If the same transaction is often the slowest, the top_n setting allows the Java agent (over time) to sample the slowest n transactions. This gives you greater variety and more insight into your application. transaction_threshold Type String (float) Default apdex_f The time threshold used to determine when a transaction is eligible to be traced. When the transaction's response time exceeds this threshold, a transaction trace will be recorded and sent to New Relic. The default is apdex_f (default), which sets the threshold to be the \"Frustrated\" Apdex level (four times the apdex_t value). You can also set a specific time threshold by entering a float value that represents a number of seconds. slow_query_whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use collect_slow_queries_from. By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy collect_slow_queries_from Type String Default (none) By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this property (transaction_tracer.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to New Relic in transaction traces. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction traces. For more information, see the agent attribute rules. token_limit Type Integer Default 3000 Limits the number of Tokens that can be created per Transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. segment_limit Type Integer Default 3000 Limits the number of segments that can be created per transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. Transaction segments These options are set in the transaction_segments stanza and can be overridden by using a newrelic.config.transaction_segments prefixed system property. Transaction segments represent discrete pieces of work (generally method calls) and are displayed within transaction traces. Important Transaction segment attribute filtering requires Java agent version 4.10.0 or higher. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction segments. If attributes.enabled at the root level is false, no attributes will be sent to transaction segments regardless on how this property (transaction_segments.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction segments, all attribute keys found in this list will be sent to New Relic in transaction segments. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction segments. For more information, see the agent attribute rules. Browser monitoring These options are set in the browser_monitoring stanza and can be overridden by using a newrelic.config.browser_monitoring prefixed system property. Browser monitoring gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. auto_instrument Type Boolean Default true By default the agent automatically inserts API calls in compiled JSPs to inject the monitoring JavaScript into web pages. Set this attribute to false to turn off this behavior. disabled_auto_pages Type Comma-separated list of strings Default (none) When auto_instrument is true, by default all pages are instrumented. List all pages that you want the auto instrumentation to skip here. You can still use manual instrumentation on these pages. For example: browser_monitoring: disabled_auto_pages: /WEB-INF/jsp/testpage_1.jsp, /WEB-INF/jsp/testpage_2.jsp Copy attributes.enabled Type Boolean Default false This setting can be used to turn on or off all attributes for browser monitoring. This is the data you can query. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how this property under browser_monitoring is set. attributes.include Type List of Strings Default (none) If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent to New Relic in page views. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in page views. For more information, see the agent attribute rules. External tracer The external tracing options are set in the external_tracer stanza and can be overridden by using a newrelic.config.external_tracer prefixed system property. exclude_request_uri Type Boolean Default false This setting can be used to control the collection of outgoing request URIs for errors and transaction traces. Set this to true to disable collecting this information. Cross application tracer The cross application tracing options are set in the cross_application_tracer stanza and can be overridden by using a newrelic.config.cross_application_tracer prefixed system property. Cross application tracing adds request and response headers to external calls using the Apache HttpClient libraries. This provides better performance data when calling applications monitored by other New Relic Agents. enabled Type Boolean Default true Cross application tracing is enabled by default. Set this to false to turn it off. Error collector These options are set in the error_collector stanza and unless noted otherwise can be overridden by using a newrelic.config.error_collector prefixed system property. The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. Tip For how to configure errors for the Java agent, including how to configure errors via the UI, see Java agent error configuration. enabled Type Boolean Default true Enable error collection. ignore_classes Type Stanza containing a list of fully qualified class_name strings Default (none) Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy ignore_messages Type Stanza containing a fully qualified class_name and a list of messages per error class Default (none) Specify exception class names the agent should ignore. Ignored messages will not affect error rate or Apdex score, or be reported to APM. Contains yaml pairs consisting of: A fully qualified exception class name that should not be reported to APM AND A list of exception messages to match against (at least one is required) If the exception class name matches an error but the message does not, then that error will not be ignored. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_messages: com.example.MyException: - \"Some error message to ignore\" - \"Some other error message to ignore\" com.example.DifferentException: - \"Some different error message to ignore\" Copy ignore_status_codes Type Comma-separated list of strings and ranges Default 404 A comma-separated list comprised of individual and dashed ranges of HTTP status codes that should not be treated as errors. If this property is commented out in the newrelic.yml configuration file, then the 404 status code will automatically be ignored. When using server-side configuration, the status code 404 must be specified in order for it to be ignored. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_status_codes: 404,507-511 Copy ignoreErrorPriority Type Boolean Default false With default ignoreErrorPriority as false, the agent reports the last error noticed if noticeError() is called multiple times in a transaction. If set to true, the agent reports the first error noticed if noticeError() is called multiple times in a transaction. For example: error_collector: ignoreErrorPriority: true Copy expected_classes Type Stanza containing a List of fully qualified class_name strings Default (none) Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy expected_messages Type Stanza containing a fully qualified class_name and a List of messages per error class Default (none) Contains yaml pairs consisting of a fully qualified exception class name that should be marked as expected and thus prevented from affecting error rate or Apdex score and a List of exception messages to match against, the latter of which at least one is required. If the exception class name matches an error but the message does not, then that error will not be marked as expected and therefore will affect error rate and Apdex score. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_messages: com.example.MyException: - \"Some expected error message\" - \"Some other expected error message\" com.example.DifferentException: - \"Some different expected error message\"​ Copy expected_status_codes Type Comma-separated list of strings and ranges Default (none) A comma-separated list comprised of individual and dashed ranges of HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_status_codes: 415,500-506 Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless of how this property is set under error_collector. attributes.include Type List of strings Default (none) If attributes are enabled for traced errors, all attribute keys found in this list will be sent to New Relic in traced errors. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) Attribute keys found in this list will not be sent to New Relic in traced errors. For more information, see the agent attribute rules. ignoreErrorPriority Type Boolean Default true When multiple errors are noticed in a transaction, only the last error will be reported by default. Setting this property to false will instead report only the first error that is noticed. For more information, see the noticeError API. For example: error_collector: ignoreErrorPriority: false Copy ignore_errors (DEPRECATED) Type Comma-separated list of Strings Default (none) All specified exception class names specified will not be treated as errors. Deprecated as of Java agent 3.40.0 and replaced by ignore_classes. For example: error_collector: ignore_errors: some.other.MyException Copy Strip exceptions These options are set in the strip_exception_messages stanza and unless noted otherwise can be overridden by using a newrelic.config.strip_exception_messages​prefixed system property. This configuration can be enabled to control whether Java exception messages are reported to New Relic. enabled Type Boolean Default false By default, this is set to false, which means that the agent sends messages from all exceptions to the New Relic collector. If you set this to true, the agent strips the messages from exceptions in order to prevent it from inadvertently capturing sensitive information. If you enable high security mode, this is automatically set to true. If you set enabled to true but you want the agent to capture messages from specific exceptions, add the exceptions to your allow list. whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use allowed_classes. If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to the whitelist, separated by a comma. allowed_classes Type String Default (none) If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to allowed_classes, separated by a comma. Thread profiler These options are set in the thread_profiler stanza and can be overridden by using a newrelic.config.thread_profiler prefixed system property. Thread profiler measures wall clock time, CPU time, and method call counts in your application's threads as they run. enabled Type Boolean Default true Enable the thread profiler. Transaction events These options are set in the transaction_events stanza and can be overridden by using a newrelic.config.transaction_events prefixed system property. Transaction events provide the data for displaying histograms and percentiles in the UI. Important Previously this stanza was called analytics_events. If your configuration file still uses analytics_events, update your agent to use transaction_events. enabled Type Boolean Default true Enable the transaction events service. max_samples_stored Type Integer Default 2000 Max 10000 The maximum number of sampled transaction events reported every 60 seconds. custom_request_headers Type List of maps Default None Important Unlike other settings, custom_request_headers have to be paired together and must be set in the newrelic.yml file. They can't be overwritten by Java virtual machine arguments (system property) or environment variables. A list of maps with the paired keys header_name and the optional header_alias. Choose one or more custom HTTP request headers to add as transaction attributes. You can list multiple header configurations: transaction_events: custom_request_headers: - header_name: \"X-Custom-Header-1\" - header_name: \"X-Custom-Header-2\" header_alias: \"CustomHeader2alias\" Copy In the first map set, X-Custom-Header-1 is captured and reported by the agent as the header name for a corresponding value from the request object. The header_name will also be the name of the attribute sent to New Relic. In the second map set, the request header is X-Custom-Header-2, but the CustomHeader2alias is the name sent to New Relic. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless of how this property is set under transaction_events. attributes.include Type List of Strings Default (none) If attributes are enabled for transaction events, all attribute keys found in this list will be sent to New Relic in transaction events. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction events. For more information, see the agent attribute rules. Custom events Custom events are set in the custom_insights_events stanza and can be overridden by using a newrelic.config.custom_insights_events prefixed system property. APM lets you record custom event data via the New Relic language agent APIs, which you can then query. Important For Java agent versions prior to 4.1.0, the following YAML configuration is recognized: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy For agent versions 4.1.0 and above, the YAML configuration uses the nested stanza formatting: custom_insights_events: enabled: false max_samples_stored: 5000 Copy enabled Type Boolean Default true This enables the custom event service. max_samples_stored Type Integer Default/Max 10000 The maximum number of sampled custom events reported every 60 seconds. Hostname configuration These options are set in the process_host stanza and can be overridden by using a newrelic.config.process_host prefixed system property. These properties are used for configuring the hostname displayed in the UI: display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. ipv_preference Type String Default 4 If the hostname cannot be determined, then the IP address of the host will be used. This property determines whether the IPv4 or IPv6 address should be used. The default is IPv4. Custom instrumentation These options set in the class_transformer stanza and can be overridden by using a newrelic.config.class_transformer prefixed system property. trace_annotation_class_name Type String Default (none) String containing the full class name of the annotation class the agent uses to determine which user-specified methods to instrument. For more information about custom annotations, see Java custom metric collection. com.newrelic.instrumentation.servlet-user Type Boolean Default false Enable this option to capture the userPrincipal name. This name is included as a transaction trace attribute, and can be queried. System properties You can override any setting in the newrelic.yml file by setting a system property. The system property corresponding to a given setting in the config file is the setting name prefixed by newrelic.config. For example, the system property for the log_level setting is newrelic.config.log_level. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the system property for the enabled setting in the transaction_tracer stanza is newrelic.config.transaction_tracer.enabled. In addition to overriding configuration settings, the following system properties are recognized by the agent: newrelic.config.process_host.display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. Requires Java agent 3.17 or higher. newrelic.config.file Type String Default (none) String containing a fully qualified path to the newrelic configuration file. If empty, the agent assumes newrelic.yml is in the same directory as newrelic.jar. newrelic.debug Type Boolean Default (none) Enable debug logging. newrelic.environment Type String Default (none) String containing the environment configuration for the agent to use. newrelic.home Type String Default (none) String containing the home directory of agent. This defaults to the same directory as the agent jarfile. newrelic.logfile Type String Default newrelic_agent.log String containing the name of the agent log file. Environment variables Environment variables take the highest precedence and override the system properties and yml config settings. To set environment variables, use the export VARNAME=value command. To permanently set environment variables, add the export line to a file such as ~/.bashrc or ~/.bash_profile. You can override any setting from a system property or in the newrelic.yml by setting an environment variable. The environment variable corresponding to a given setting in the config file is the setting name prefixed by NEW_RELIC with all dots (.) and dashes (-) replaced by underscores (_). For example, the environment variable for the log_level setting is NEW_RELIC_LOG_LEVEL. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the environment variable for the enabled setting in the transaction_tracer stanza is NEW_RELIC_TRANSACTION_TRACER_ENABLED. Important Agent configuration via environment variables requires Java agent version 4.10.0 or higher. For agent versions older than 4.10.0 the following environment variables are available: NEW_RELIC_APP_NAME (REQUIRED) Type String Default (none) This setting is required. Contains the application name under which to report data to New Relic. Set the name of your application as you want it to appear in New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon ;. For example, to report data to My Application and My Application 2: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Type String Default false Enables distributed tracing. Case sensitive: use true or false. For more information, see the distributed tracing section. NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. NEW_RELIC_LICENSE_KEY (REQUIRED) Type String Default (none) This setting is required. Contains your New Relic account license. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. NEW_RELIC_LOG Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. Cloud platform utilization These options are set in the utilization stanza and can be overridden by using a newrelic.config.utilization prefixed system property. The agent collects utilization information and sends it to the New Relic service. The agent can collect information from Amazon Web Services (AWS) EC2 instances and Docker containers. detect_aws Type Boolean Default true Determines whether the agent polls AWS metadata API. detect_docker Type Boolean Default true Determines whether the agent reads Docker information from the file system. Async instrumentation These options are set directly in the common stanza and can be overridden by using a prefixed system property. token_timeout Type Integer Default (seconds) 180 The number of seconds after which the agent will automatically expire an async token that has not been explicitly expired with token.expire(). For usage instructions, see Tokens: Connect async threads. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to unexpired tokens. segment_timeout Type Integer Default (seconds) 600 The number of seconds after which the agent will automatically end a segment that has not been explicitly ended with segment.end() or segment.ignore(). For usage instructions, see Segments: Time arbitrary async activity. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to un-ended segments. Circuit breaker These settings customize the behavior of the Java circuit breaker. These settings are not included in newrelic.yml by default. You do not need to restart your JVM after changing them. If you want to customize the circuit breaker, add the stanza under the common stanza: common: &default_settings​ ​ OTHER_CONFIG_SETTINGS circuitbreaker: enabled: true memory_threshold: 20 gc_cpu_threshold: 10 Copy enabled Type Boolean Default true If your application is behaving as expected, you may want to disable the circuit breaker. memory_threshold Type Integer (0 to 100) Default 20 Customize the precentage of free heap memory below which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. gc_cpu_threshold Type Integer (0 to 100) Default 10 Customize the precentage of garbage collection CPU time above which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. Message tracer These options are set in the message_tracer stanza and can be overridden by using a newrelic.config.message_tracer prefixed system property. segment_parameters.enabled Type Boolean Default true Adds message properties to tracer attributes. Set this to false to turn it off. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has other effects on APM features. Before enabling, read the transition guide. Requires Java agent version 4.3.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. In the config file, it can be set in the distributed_tracing stanza. It can be overridden using a newrelic.config.distributed_tracing prefixed system property. enabled Type Boolean Default false Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: enabled: true Copy To enable this using a system property, you would use: -Dnewrelic.config.distributed_tracing.enabled=true Copy exclude_newrelic_header Type Boolean Default false By default, supported versions of the agent utilize both the newrelic header and W3C Trace Context headers for distributed tracing. The newrelic distributed tracing header allows interoperability with older agents that don't support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over newrelic headers for distributed tracing. If you do not want to utilize the newrelic header, setting this to true will result in the agent excluding the newrelic header and only using W3C Trace Context headers for distributed tracing. For example, to exclude newrelic headers in the config file, you would use: distributed_tracing: exclude_newrelic_header: true Copy To exclude newrelic headers using a system property, you would use: -Dnewrelic.config.distributed_tracing.exclude_newrelic_header=true Copy Infinite Tracing Important Requirements: Java Agent 5.12.1 or higher. Infinite Tracing does not work if enable_auto_app_naming is enabled. To turn on Infinite Tracing, enable distributed tracing and add the additional setting below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default None For help getting a valid Infinite Tracing trace observer host entry, see find or create a Trace Observer. You can configure this via YAML: infinite_tracing: trace_observer: host: YOUR_TRACE_OBSERVER_HOST Copy You can also use the system property newrelic.config.infinite_tracing.trace_observer.host or the environment variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST. Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza and can be overridden by using a newrelic.config.span_events prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable span event reporting. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this property (span_events.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for span events, all attribute keys found in this list will be sent to New Relic in span_events. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) All attribute keys found in this list will not be sent to New Relic in span events. For more information, see the agent attribute rules. Important Span event attribute filtering requires Java agent version 4.10.0 or higher. Jar collector The Java agent collects and information about jars and their versions on the application classpath. Jar collection configuration is set in the jar_collector stanza and can be overridden by using a newrelic.config.jar_collector prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable jar collection and reporting. skip_temp_jars Type Boolean Default true Used to enable/disable collection of temporary jars. Temporary jars are those residing in the directory specified by the system property java.io.tmpdir. jars_per_second Type Integer Default 10 The maximum number of jars to process per second. Must be positive.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.18013,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Java <em>agent</em> <em>configuration</em>: Config file",
        "sections": "Java <em>agent</em> <em>configuration</em>: Config file",
        "tags": "<em>Agents</em>",
        "body": "The New Relic Java <em>agent</em> reads its <em>configuration</em> from the newrelic.yml file. By default the <em>agent</em> looks for this file in the directory that contains newrelic.jar. You can override the config file&#x27;s location by setting the newrelic.config.file system property to a fully qualified file name"
      },
      "id": "603eb739e7b9d2a2432a07e0"
    }
  ],
  "/docs/agents/net-agent/configuration/net-agent-configuration": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.07147,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional <em>configuration</em> if they run for less than one minute. Disable Application Insights Both New Relic&#x27;s .<em>NET</em> <em>agent</em> and Microsoft Application Insights rely on the CLR Profiler"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "Java agent configuration: Config file",
        "Configuration file structure",
        "Tip",
        "Configuration settings precedence",
        "Configuring the Java extensions directory",
        "Create an extensions directory",
        "Specify an existing extensions directory",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (REQUIRED)",
        "agent_enabled",
        "apdex_t (DEPRECATED)",
        "appserver_port",
        "Important",
        "audit_mode",
        "ca_bundle_path",
        "use_private_ssl",
        "enable_auto_app_naming",
        "enable_auto_transaction_naming",
        "Caution",
        "enable_custom_tracing",
        "extensions.dir",
        "high_security",
        "insert_api_key",
        "labels",
        "max_stack_trace_lines",
        "proxy_host",
        "proxy_password",
        "proxy_port",
        "proxy_user",
        "proxy_scheme",
        "reactor-netty.errors.enabled",
        "send_data_on_exit",
        "send_data_on_exit_threshold",
        "send_environment_info",
        "send_jvm_props",
        "ssl (DEPRECATED)",
        "sync_startup",
        "scala_futures_as_segments",
        "Logging configuration",
        "log_daily",
        "log_file_count",
        "log_file_name",
        "log_file_path",
        "log_level",
        "log_limit_in_kbytes",
        "JMX",
        "enabled",
        "linkingMetadataMBean",
        "Attributes",
        "include",
        "exclude",
        "Transaction tracer",
        "explain_enabled",
        "explain_threshold",
        "insert_sql_max_length",
        "log_sql",
        "record_sql",
        "stack_based_naming (Play 2.x+ only)",
        "stack_trace_threshold",
        "top_n",
        "transaction_threshold",
        "slow_query_whitelist (DEPRECATED)",
        "collect_slow_queries_from",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "token_limit",
        "segment_limit",
        "Transaction segments",
        "Browser monitoring",
        "auto_instrument",
        "disabled_auto_pages",
        "External tracer",
        "exclude_request_uri",
        "Cross application tracer",
        "Error collector",
        "ignore_classes",
        "ignore_messages",
        "ignore_status_codes",
        "ignoreErrorPriority",
        "expected_classes",
        "expected_messages",
        "expected_status_codes",
        "ignore_errors (DEPRECATED)",
        "Strip exceptions",
        "whitelist (DEPRECATED)",
        "allowed_classes",
        "Thread profiler",
        "Transaction events",
        "max_samples_stored",
        "custom_request_headers",
        "Custom events",
        "Hostname configuration",
        "display_name",
        "ipv_preference",
        "Custom instrumentation",
        "trace_annotation_class_name",
        "com.newrelic.instrumentation.servlet-user",
        "System properties",
        "newrelic.config.process_host.display_name",
        "newrelic.config.file",
        "newrelic.debug",
        "newrelic.environment",
        "newrelic.home",
        "newrelic.logfile",
        "Environment variables",
        "NEW_RELIC_APP_NAME (REQUIRED)",
        "NEW_RELIC_DISTRIBUTED_TRACING_ENABLED",
        "NEW_RELIC_PROCESS_HOST_DISPLAY_NAME",
        "NEW_RELIC_LICENSE_KEY (REQUIRED)",
        "NEW_RELIC_LOG",
        "Cloud platform utilization",
        "detect_aws",
        "detect_docker",
        "Async instrumentation",
        "token_timeout",
        "segment_timeout",
        "Circuit breaker",
        "memory_threshold",
        "gc_cpu_threshold",
        "Message tracer",
        "segment_parameters.enabled",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Infinite Tracing",
        "trace_observer.host",
        "Span events",
        "Jar collector",
        "skip_temp_jars",
        "jars_per_second"
      ],
      "title": "Java agent configuration: Config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "1d61f848fa192438225eae269421b8d384915c8b",
      "image": "https://docs.newrelic.com/static/60ca967eab99ca225186310913ae2de6/8c557/java-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file/",
      "published_at": "2021-06-09T07:43:58Z",
      "updated_at": "2021-06-09T07:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent reads its configuration from the newrelic.yml file. By default the agent looks for this file in the directory that contains newrelic.jar. You can override the config file's location by setting the newrelic.config.file system property to a fully qualified file name. Configuration file structure The newrelic.yml file is split into stanzas corresponding to different environments: Test Development Staging Production (default) New Relic applies settings in the common stanza to each of these environments. You can select other environments as the default by setting the newrelic.environment system property to the environment name. Tip A newrelic.yml template is available. If you edit newrelic.yml, be careful to conform to the YAML format. Use a YAML validator to ensure the syntax is accurate before using the file with New Relic's Java agent, and follow these rules: Java agent newrelic.yml Requirements Format YML files are case sensitive. Indentations All indentations must be in increments of two characters. Other indentations will result in an Unable to parse configuration file error upon agent startup. Use the same level of indentation for data in the same stanza of the file. Indent any sub-stanzas by an additional two spaces. Changes to file You must restart your JVM host process for changes to take effect. Exception: Property changes to log_level and audit_mode do not require a restart. Property changes under circuit breaker don't require a restart. Configuration settings precedence To override any setting in the config file, use a system property override. In certain environments, environment variables can also be used to override both the config file and the system properties. The environment variables primarily exist to support Heroku. When used, server-side configuration overrides all other configuration settings. With the Java agent, server-side configuration overrides all other settings. Environment variables override Java system properties. Java properties override user configuration settings in your newrelic.yml file. User settings override the newrelic.yml default settings. Configuring the Java extensions directory The Java agent reads the configuration files on process startup. To identify the directory where the files are located, either create a new or specify an existing extensions directory: Create an extensions directory To create the extensions directory: Navigate to the directory where newrelic.jar and newrelic.yml are located. Create a directory named extensions. In newrelic.yml, check that the property extensions.dir is not set. Specify an existing extensions directory To use an existing Java extensions directory: In your newrelic.yml file, locate the common section. Use the property extensions.dir to specify the location of the file. General configuration settings Set these options in the common stanza. To override any of these options, use a newrelic.config prefixed system property. license_key (REQUIRED) Type String Default (none) This setting is required. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. app_name (REQUIRED) Type String Default (none) This setting is required. Defines the application name used to report data to New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon. For example, to report data to My Application and My Application 2 use this: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. agent_enabled Type Boolean Default true Flag to enable the agent. Use this setting to force the agent to run or not run. apdex_t (DEPRECATED) Type Float Default 1.0 The apdex_t threshold in seconds for the application's Apdex score. For Java agent versions 1.2.008 or higher, the apdex_t value is set in the UI and the value in newrelic.yml is ignored. appserver_port Type Integer Default (none) Number to differentiate JVMs for the same app on the same machine. New Relic uses host/port for uniqueness, so you can distinguish the JVMs by putting a switch like this into the startup arguments for each JVM: -Dnewrelic.config.appserver_port=8081 Copy Once you have used appserver_port to name the JVMs and restart them, you should be able to see them individually in the dropdown and in the profiling interface. Important This is only a change for New Relic; it doesn't actually affect the port on which the host communicates in any way. audit_mode Type Boolean Default false Enables plain text logging of all data sent to New Relic to the agent logfile. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. ca_bundle_path Type String Value Format /path/to/ca/cert/bundle.pem Specifies a path to a custom SSL certificate bundle that will be used by the agent to establish a secure connection to New Relic. If your custom SSL certificate bundle doesn't include certificates that are sufficient to connect to New Relic then you'll need to merge the required certs into your custom certificate bundle. use_private_ssl Type Boolean Default false The following SSL certificates are bundled into the agent jar: META-INF/certs/eu-newrelic-com.pem META-INF/certs/eu01-nr-data-net.pem META-INF/certs/newrelic-com.pem Copy By default (use_private_ssl: false) the agent will use the SSL certificates bundled into the JDK to establish a secure connection to New Relic or the custom SSL certificates bundle specified by ca_bundle_path. If you want to use the SSL certificates bundled with the agent, set use_private_ssl: true. Note: use_private_ssl will be ignored if ca_bundle_path is set. enable_auto_app_naming Type Boolean Default false Enables the reporting of data separately for each web app. Set to true to enable support for auto app naming. The name of each web app is detected automatically and the agent reports data separately for each one. This provides a finer-grained performance breakdown for web apps in New Relic. For more information, see Automatic application naming. For more methods of naming your application, see Name your Java application. enable_auto_transaction_naming Type Boolean Default true Enables component-based transaction naming. Set to true to enable component-based transaction naming. Set to false to use the URI of a web request as the name of the transaction. For more information, see Naming web transactions. Caution Unless you implement API calls to name your transactions, disabling auto-transaction naming is very likely to cause Metric grouping issues. enable_custom_tracing Type Boolean Default true Enables all instrumentation using an @Trace annotation. Disabling this causes @Trace annotations to be ignored. extensions.dir Type String Default (none) Defines the location of the optional extensions directory. If this property is not set, the agent will look for a subdirectory named extensions in the same directory as newrelic.jar and newrelic.yml. high_security Type Boolean Default false In order for high security to be enabled, this property must be set to true and the high security property in the New Relic user interface must be enabled. Enabling high security means SSL is turned on, request and message queue parameters are not collected, and queries cannot be sent to New Relic in their raw form. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. insert_api_key Type String Default (none) A valid Insert API Key for your account. This is only required for Real-time Java profiling using JFR metrics. labels Type String Default \"\" Attach tags to this app. Note that this option now enables tags, which replaced the label feature. You can still query your historical labels. max_stack_trace_lines Type Integer Default 30 Limits the number of lines the agent collects from each stack trace. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. proxy_host Type String Default (none) The proxy host through which to connect to the New Relic collector. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_password Type String Default (none) The password for proxy authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. Important The Java agent supports Basic (clear text) authentication. proxy_port Type String Default 8080 The proxy host port number. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_user Type String Default (none) The username for proxy authentication, such as Basic (clear text) authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. proxy_scheme Type String Default (none) The proxy scheme used. Setting proxy_scheme: \"https\" will allow the agent to connect through proxies using the HTTPS scheme. reactor-netty.errors.enabled Type Boolean Default true Whether errors are reported for reactor netty. If set to false, errors will be ignored. Important Only available in Java agent 6.3.0 and above. send_data_on_exit Type Boolean Default false Enable delayed JVM shutdown to give the agent a chance to send latest metric data to New Relic before JVM shutdown. send_data_on_exit_threshold Type Integer Default 60 The number of seconds after which the agent will use the send_data_on_exit setting. send_environment_info Type Boolean Default true Enable reporting of JVM settings to New Relic. send_jvm_props Type Boolean Default true When set to true, JVM properties will be sent to New Relic. ssl (DEPRECATED) Type Boolean Default true Requires connections to the New Relic collector to go over SSL. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. This work is done asynchronously to the threads that process your application code, so response times will not be directly affected by this change. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. sync_startup Type Boolean Default false Enable the agent to connect the New Relic collector immediately upon app startup. scala_futures_as_segments Important This applies to Java agent version 3.44.0 or higher. Type Boolean Default false For more concise transaction trace details, the agent does not report Scala Futures as transaction segments, and those Futures do not contribute to the transaction’s total time. Enabling scala_futures_as_segments increases your overhead. If you want Scala Futures to report as transaction segments so you can view them in a transaction trace, you can enable it: scala_futures_as_segments: enabled: true Copy Logging configuration These are part of the general configuration variables. They are broken out here because they are frequently tweaked for debugging. Some of the logging configuration variables are dynamic and do not need a host restart for them to take effect. For instance, if log files are growing too quickly, log_level can be set to a less verbose setting to reduce the reporting rate. Here is the order of precedence for configuration variables affecting log rotation. If log_daily is true, other log rotation settings are ignored. If log_file_count is 1 or 0, the size limit is ignored. Finally, the agent applies log_limit_in_kbytes. Depending on the growth rate, it is possible for the log file size to exceed the configured value by a small amount. log_daily Type Boolean Default false Set to true to roll the logs daily. Overrides the other configuration variables that affect log rotation. log_file_count Type Integer Default 1 The maximum number of log files to keep when using log rotation. log_file_name Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. log_file_path Type String Default logs subdirectory where newrelic.jar is located The log file path. Tip If log_file_path is specified, the directory must already exist. If the default value is used, the agent will attempt to create the directory. log_level Type String Default info The log verbosity level. The agent uses its own log file to keep its logging separate from that of your application. Valid options, in order of verboseness, are: off severe warning info fine finer finest This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. log_limit_in_kbytes Type Integer Default 0 The log file size in kilobytes at which log files are rotated. Set to 0 for no limit. JMX To set these options, use the jmx stanza. To override them, use a newrelic.config.jmx prefixed system property. The Java agent uses JMX to collect JVM data as well as to communicate with the JFR (Java Flight Recorder) daemon for Real-time Java profiling. enabled Type Boolean Default true This setting can be used to turn on or off all JMX functionality. linkingMetadataMBean Type Boolean Default false This setting can be enabled to allow the Java agent to expose linking metadata to the JFR daemon. Doing so allows the JFR daemon to obtain the entity GUID generated by the Java agent and link JFR data with the same APM application that is being monitored by the agent instead of as a separate entity. Important This applies to Java agent version 6.1.0 or higher. Attributes To set these options, use the attributes stanza. To override them, use a newrelic.config.attributes prefixed system property. Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. There is also an attribute stanza under each destination. For more information, see Java agent attributes, Enabling and disabling attributes and Attribute examples. enabled Type Boolean Default true This setting can be used to turn on or off all attributes. Important For security reasons, capturing custom attributes using the Custom Instrumentation Editor is set to false by default. include Type List of Strings Default (none) If attributes are enabled, attribute keys found in this list will be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. Transaction tracer These options are set in the transaction_tracer stanza and can be overridden by using a newrelic.config.transaction_tracer prefixed system property. Transaction tracing captures deep information about slow transactions and sends this to the New Relic service. The transaction includes the exact call sequence of the transactions, including any query statements issued. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true The transaction tracer is enabled by default. Set this to false to turn it off. explain_enabled Type Boolean Default true Determines whether the agent will capture the EXPLAIN plan for slow queries. Only supported for MySQL and PostgreSQL. explain_threshold Type Float Default 0.5 Threshold in seconds for query execution time below which the slow query and the EXPLAIN plan (if supported) will not be captured. Relevant to slow queries only when record_sql is set to raw or obfuscated. Relevant to EXPLAIN plans only when explain_enabled is set to true. insert_sql_max_length Type Integer Default 2000 The character limit for the SQL query string. If you have many slow SQL queries with large chunks of information, this could negatively affect performance or how quickly you see your data in New Relic. Increase the value gradually until you find the right balance of information and performance. log_sql Type Boolean Default false Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode. record_sql Type String Default obfuscated When the transaction tracer is on, query statements can optionally be recorded. The recorder has three modes: off: Send no queries. raw: Send the query statement in its original form. obfuscated: Strips out numeric and string literals. stack_based_naming (Play 2.x+ only) Type Boolean Default False Defaulted to true until Java agent version 3.12.1, when it was changed to false. This option is for Play 2.x+ only. Play/Scala instrumentation can use Thread.getStackTrace() to improve tracer naming, but at the cost of increased overhead. stack_trace_threshold Type Integer Default 0.5 Defines a threshold (in seconds) for collecting stack traces from an SQL call. When SQL statements exceed this threshold, the agent will capture the current stack trace. This is useful for pinpointing where long SQL calls originate from. top_n Type Integer Default 20 Use this setting to control the variety of your transaction traces. top_n is an integer that represents the number of unique, slow transactions that traces will be created for. If you want transaction traces to more accurately reflect the actual slowest transactions in your app, make this value lower. If you want to sample a more diverse array of transactions, make the value higher. A value of 0 would mean that only the slowest transaction is always traced. This is considered not to be optimal, though, because you may have one or two transactions that are always the slowest, and repeatedly seeing those same transaction traces will probably not give you much value. If the same transaction is often the slowest, the top_n setting allows the Java agent (over time) to sample the slowest n transactions. This gives you greater variety and more insight into your application. transaction_threshold Type String (float) Default apdex_f The time threshold used to determine when a transaction is eligible to be traced. When the transaction's response time exceeds this threshold, a transaction trace will be recorded and sent to New Relic. The default is apdex_f (default), which sets the threshold to be the \"Frustrated\" Apdex level (four times the apdex_t value). You can also set a specific time threshold by entering a float value that represents a number of seconds. slow_query_whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use collect_slow_queries_from. By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy collect_slow_queries_from Type String Default (none) By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this property (transaction_tracer.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to New Relic in transaction traces. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction traces. For more information, see the agent attribute rules. token_limit Type Integer Default 3000 Limits the number of Tokens that can be created per Transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. segment_limit Type Integer Default 3000 Limits the number of segments that can be created per transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. Transaction segments These options are set in the transaction_segments stanza and can be overridden by using a newrelic.config.transaction_segments prefixed system property. Transaction segments represent discrete pieces of work (generally method calls) and are displayed within transaction traces. Important Transaction segment attribute filtering requires Java agent version 4.10.0 or higher. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction segments. If attributes.enabled at the root level is false, no attributes will be sent to transaction segments regardless on how this property (transaction_segments.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction segments, all attribute keys found in this list will be sent to New Relic in transaction segments. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction segments. For more information, see the agent attribute rules. Browser monitoring These options are set in the browser_monitoring stanza and can be overridden by using a newrelic.config.browser_monitoring prefixed system property. Browser monitoring gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. auto_instrument Type Boolean Default true By default the agent automatically inserts API calls in compiled JSPs to inject the monitoring JavaScript into web pages. Set this attribute to false to turn off this behavior. disabled_auto_pages Type Comma-separated list of strings Default (none) When auto_instrument is true, by default all pages are instrumented. List all pages that you want the auto instrumentation to skip here. You can still use manual instrumentation on these pages. For example: browser_monitoring: disabled_auto_pages: /WEB-INF/jsp/testpage_1.jsp, /WEB-INF/jsp/testpage_2.jsp Copy attributes.enabled Type Boolean Default false This setting can be used to turn on or off all attributes for browser monitoring. This is the data you can query. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how this property under browser_monitoring is set. attributes.include Type List of Strings Default (none) If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent to New Relic in page views. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in page views. For more information, see the agent attribute rules. External tracer The external tracing options are set in the external_tracer stanza and can be overridden by using a newrelic.config.external_tracer prefixed system property. exclude_request_uri Type Boolean Default false This setting can be used to control the collection of outgoing request URIs for errors and transaction traces. Set this to true to disable collecting this information. Cross application tracer The cross application tracing options are set in the cross_application_tracer stanza and can be overridden by using a newrelic.config.cross_application_tracer prefixed system property. Cross application tracing adds request and response headers to external calls using the Apache HttpClient libraries. This provides better performance data when calling applications monitored by other New Relic Agents. enabled Type Boolean Default true Cross application tracing is enabled by default. Set this to false to turn it off. Error collector These options are set in the error_collector stanza and unless noted otherwise can be overridden by using a newrelic.config.error_collector prefixed system property. The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. Tip For how to configure errors for the Java agent, including how to configure errors via the UI, see Java agent error configuration. enabled Type Boolean Default true Enable error collection. ignore_classes Type Stanza containing a list of fully qualified class_name strings Default (none) Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy ignore_messages Type Stanza containing a fully qualified class_name and a list of messages per error class Default (none) Specify exception class names the agent should ignore. Ignored messages will not affect error rate or Apdex score, or be reported to APM. Contains yaml pairs consisting of: A fully qualified exception class name that should not be reported to APM AND A list of exception messages to match against (at least one is required) If the exception class name matches an error but the message does not, then that error will not be ignored. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_messages: com.example.MyException: - \"Some error message to ignore\" - \"Some other error message to ignore\" com.example.DifferentException: - \"Some different error message to ignore\" Copy ignore_status_codes Type Comma-separated list of strings and ranges Default 404 A comma-separated list comprised of individual and dashed ranges of HTTP status codes that should not be treated as errors. If this property is commented out in the newrelic.yml configuration file, then the 404 status code will automatically be ignored. When using server-side configuration, the status code 404 must be specified in order for it to be ignored. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_status_codes: 404,507-511 Copy ignoreErrorPriority Type Boolean Default false With default ignoreErrorPriority as false, the agent reports the last error noticed if noticeError() is called multiple times in a transaction. If set to true, the agent reports the first error noticed if noticeError() is called multiple times in a transaction. For example: error_collector: ignoreErrorPriority: true Copy expected_classes Type Stanza containing a List of fully qualified class_name strings Default (none) Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy expected_messages Type Stanza containing a fully qualified class_name and a List of messages per error class Default (none) Contains yaml pairs consisting of a fully qualified exception class name that should be marked as expected and thus prevented from affecting error rate or Apdex score and a List of exception messages to match against, the latter of which at least one is required. If the exception class name matches an error but the message does not, then that error will not be marked as expected and therefore will affect error rate and Apdex score. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_messages: com.example.MyException: - \"Some expected error message\" - \"Some other expected error message\" com.example.DifferentException: - \"Some different expected error message\"​ Copy expected_status_codes Type Comma-separated list of strings and ranges Default (none) A comma-separated list comprised of individual and dashed ranges of HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_status_codes: 415,500-506 Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless of how this property is set under error_collector. attributes.include Type List of strings Default (none) If attributes are enabled for traced errors, all attribute keys found in this list will be sent to New Relic in traced errors. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) Attribute keys found in this list will not be sent to New Relic in traced errors. For more information, see the agent attribute rules. ignoreErrorPriority Type Boolean Default true When multiple errors are noticed in a transaction, only the last error will be reported by default. Setting this property to false will instead report only the first error that is noticed. For more information, see the noticeError API. For example: error_collector: ignoreErrorPriority: false Copy ignore_errors (DEPRECATED) Type Comma-separated list of Strings Default (none) All specified exception class names specified will not be treated as errors. Deprecated as of Java agent 3.40.0 and replaced by ignore_classes. For example: error_collector: ignore_errors: some.other.MyException Copy Strip exceptions These options are set in the strip_exception_messages stanza and unless noted otherwise can be overridden by using a newrelic.config.strip_exception_messages​prefixed system property. This configuration can be enabled to control whether Java exception messages are reported to New Relic. enabled Type Boolean Default false By default, this is set to false, which means that the agent sends messages from all exceptions to the New Relic collector. If you set this to true, the agent strips the messages from exceptions in order to prevent it from inadvertently capturing sensitive information. If you enable high security mode, this is automatically set to true. If you set enabled to true but you want the agent to capture messages from specific exceptions, add the exceptions to your allow list. whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use allowed_classes. If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to the whitelist, separated by a comma. allowed_classes Type String Default (none) If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to allowed_classes, separated by a comma. Thread profiler These options are set in the thread_profiler stanza and can be overridden by using a newrelic.config.thread_profiler prefixed system property. Thread profiler measures wall clock time, CPU time, and method call counts in your application's threads as they run. enabled Type Boolean Default true Enable the thread profiler. Transaction events These options are set in the transaction_events stanza and can be overridden by using a newrelic.config.transaction_events prefixed system property. Transaction events provide the data for displaying histograms and percentiles in the UI. Important Previously this stanza was called analytics_events. If your configuration file still uses analytics_events, update your agent to use transaction_events. enabled Type Boolean Default true Enable the transaction events service. max_samples_stored Type Integer Default 2000 Max 10000 The maximum number of sampled transaction events reported every 60 seconds. custom_request_headers Type List of maps Default None Important Unlike other settings, custom_request_headers have to be paired together and must be set in the newrelic.yml file. They can't be overwritten by Java virtual machine arguments (system property) or environment variables. A list of maps with the paired keys header_name and the optional header_alias. Choose one or more custom HTTP request headers to add as transaction attributes. You can list multiple header configurations: transaction_events: custom_request_headers: - header_name: \"X-Custom-Header-1\" - header_name: \"X-Custom-Header-2\" header_alias: \"CustomHeader2alias\" Copy In the first map set, X-Custom-Header-1 is captured and reported by the agent as the header name for a corresponding value from the request object. The header_name will also be the name of the attribute sent to New Relic. In the second map set, the request header is X-Custom-Header-2, but the CustomHeader2alias is the name sent to New Relic. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless of how this property is set under transaction_events. attributes.include Type List of Strings Default (none) If attributes are enabled for transaction events, all attribute keys found in this list will be sent to New Relic in transaction events. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction events. For more information, see the agent attribute rules. Custom events Custom events are set in the custom_insights_events stanza and can be overridden by using a newrelic.config.custom_insights_events prefixed system property. APM lets you record custom event data via the New Relic language agent APIs, which you can then query. Important For Java agent versions prior to 4.1.0, the following YAML configuration is recognized: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy For agent versions 4.1.0 and above, the YAML configuration uses the nested stanza formatting: custom_insights_events: enabled: false max_samples_stored: 5000 Copy enabled Type Boolean Default true This enables the custom event service. max_samples_stored Type Integer Default/Max 10000 The maximum number of sampled custom events reported every 60 seconds. Hostname configuration These options are set in the process_host stanza and can be overridden by using a newrelic.config.process_host prefixed system property. These properties are used for configuring the hostname displayed in the UI: display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. ipv_preference Type String Default 4 If the hostname cannot be determined, then the IP address of the host will be used. This property determines whether the IPv4 or IPv6 address should be used. The default is IPv4. Custom instrumentation These options set in the class_transformer stanza and can be overridden by using a newrelic.config.class_transformer prefixed system property. trace_annotation_class_name Type String Default (none) String containing the full class name of the annotation class the agent uses to determine which user-specified methods to instrument. For more information about custom annotations, see Java custom metric collection. com.newrelic.instrumentation.servlet-user Type Boolean Default false Enable this option to capture the userPrincipal name. This name is included as a transaction trace attribute, and can be queried. System properties You can override any setting in the newrelic.yml file by setting a system property. The system property corresponding to a given setting in the config file is the setting name prefixed by newrelic.config. For example, the system property for the log_level setting is newrelic.config.log_level. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the system property for the enabled setting in the transaction_tracer stanza is newrelic.config.transaction_tracer.enabled. In addition to overriding configuration settings, the following system properties are recognized by the agent: newrelic.config.process_host.display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. Requires Java agent 3.17 or higher. newrelic.config.file Type String Default (none) String containing a fully qualified path to the newrelic configuration file. If empty, the agent assumes newrelic.yml is in the same directory as newrelic.jar. newrelic.debug Type Boolean Default (none) Enable debug logging. newrelic.environment Type String Default (none) String containing the environment configuration for the agent to use. newrelic.home Type String Default (none) String containing the home directory of agent. This defaults to the same directory as the agent jarfile. newrelic.logfile Type String Default newrelic_agent.log String containing the name of the agent log file. Environment variables Environment variables take the highest precedence and override the system properties and yml config settings. To set environment variables, use the export VARNAME=value command. To permanently set environment variables, add the export line to a file such as ~/.bashrc or ~/.bash_profile. You can override any setting from a system property or in the newrelic.yml by setting an environment variable. The environment variable corresponding to a given setting in the config file is the setting name prefixed by NEW_RELIC with all dots (.) and dashes (-) replaced by underscores (_). For example, the environment variable for the log_level setting is NEW_RELIC_LOG_LEVEL. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the environment variable for the enabled setting in the transaction_tracer stanza is NEW_RELIC_TRANSACTION_TRACER_ENABLED. Important Agent configuration via environment variables requires Java agent version 4.10.0 or higher. For agent versions older than 4.10.0 the following environment variables are available: NEW_RELIC_APP_NAME (REQUIRED) Type String Default (none) This setting is required. Contains the application name under which to report data to New Relic. Set the name of your application as you want it to appear in New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon ;. For example, to report data to My Application and My Application 2: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Type String Default false Enables distributed tracing. Case sensitive: use true or false. For more information, see the distributed tracing section. NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. NEW_RELIC_LICENSE_KEY (REQUIRED) Type String Default (none) This setting is required. Contains your New Relic account license. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. NEW_RELIC_LOG Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. Cloud platform utilization These options are set in the utilization stanza and can be overridden by using a newrelic.config.utilization prefixed system property. The agent collects utilization information and sends it to the New Relic service. The agent can collect information from Amazon Web Services (AWS) EC2 instances and Docker containers. detect_aws Type Boolean Default true Determines whether the agent polls AWS metadata API. detect_docker Type Boolean Default true Determines whether the agent reads Docker information from the file system. Async instrumentation These options are set directly in the common stanza and can be overridden by using a prefixed system property. token_timeout Type Integer Default (seconds) 180 The number of seconds after which the agent will automatically expire an async token that has not been explicitly expired with token.expire(). For usage instructions, see Tokens: Connect async threads. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to unexpired tokens. segment_timeout Type Integer Default (seconds) 600 The number of seconds after which the agent will automatically end a segment that has not been explicitly ended with segment.end() or segment.ignore(). For usage instructions, see Segments: Time arbitrary async activity. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to un-ended segments. Circuit breaker These settings customize the behavior of the Java circuit breaker. These settings are not included in newrelic.yml by default. You do not need to restart your JVM after changing them. If you want to customize the circuit breaker, add the stanza under the common stanza: common: &default_settings​ ​ OTHER_CONFIG_SETTINGS circuitbreaker: enabled: true memory_threshold: 20 gc_cpu_threshold: 10 Copy enabled Type Boolean Default true If your application is behaving as expected, you may want to disable the circuit breaker. memory_threshold Type Integer (0 to 100) Default 20 Customize the precentage of free heap memory below which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. gc_cpu_threshold Type Integer (0 to 100) Default 10 Customize the precentage of garbage collection CPU time above which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. Message tracer These options are set in the message_tracer stanza and can be overridden by using a newrelic.config.message_tracer prefixed system property. segment_parameters.enabled Type Boolean Default true Adds message properties to tracer attributes. Set this to false to turn it off. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has other effects on APM features. Before enabling, read the transition guide. Requires Java agent version 4.3.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. In the config file, it can be set in the distributed_tracing stanza. It can be overridden using a newrelic.config.distributed_tracing prefixed system property. enabled Type Boolean Default false Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: enabled: true Copy To enable this using a system property, you would use: -Dnewrelic.config.distributed_tracing.enabled=true Copy exclude_newrelic_header Type Boolean Default false By default, supported versions of the agent utilize both the newrelic header and W3C Trace Context headers for distributed tracing. The newrelic distributed tracing header allows interoperability with older agents that don't support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over newrelic headers for distributed tracing. If you do not want to utilize the newrelic header, setting this to true will result in the agent excluding the newrelic header and only using W3C Trace Context headers for distributed tracing. For example, to exclude newrelic headers in the config file, you would use: distributed_tracing: exclude_newrelic_header: true Copy To exclude newrelic headers using a system property, you would use: -Dnewrelic.config.distributed_tracing.exclude_newrelic_header=true Copy Infinite Tracing Important Requirements: Java Agent 5.12.1 or higher. Infinite Tracing does not work if enable_auto_app_naming is enabled. To turn on Infinite Tracing, enable distributed tracing and add the additional setting below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default None For help getting a valid Infinite Tracing trace observer host entry, see find or create a Trace Observer. You can configure this via YAML: infinite_tracing: trace_observer: host: YOUR_TRACE_OBSERVER_HOST Copy You can also use the system property newrelic.config.infinite_tracing.trace_observer.host or the environment variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST. Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza and can be overridden by using a newrelic.config.span_events prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable span event reporting. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this property (span_events.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for span events, all attribute keys found in this list will be sent to New Relic in span_events. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) All attribute keys found in this list will not be sent to New Relic in span events. For more information, see the agent attribute rules. Important Span event attribute filtering requires Java agent version 4.10.0 or higher. Jar collector The Java agent collects and information about jars and their versions on the application classpath. Jar collection configuration is set in the jar_collector stanza and can be overridden by using a newrelic.config.jar_collector prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable jar collection and reporting. skip_temp_jars Type Boolean Default true Used to enable/disable collection of temporary jars. Temporary jars are those residing in the directory specified by the system property java.io.tmpdir. jars_per_second Type Integer Default 10 The maximum number of jars to process per second. Must be positive.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.18004,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Java <em>agent</em> <em>configuration</em>: Config file",
        "sections": "Java <em>agent</em> <em>configuration</em>: Config file",
        "tags": "<em>Agents</em>",
        "body": "The New Relic Java <em>agent</em> reads its <em>configuration</em> from the newrelic.yml file. By default the <em>agent</em> looks for this file in the directory that contains newrelic.jar. You can override the config file&#x27;s location by setting the newrelic.config.file system property to a fully qualified file name"
      },
      "id": "603eb739e7b9d2a2432a07e0"
    },
    {
      "sections": [
        "Networks",
        "TLS encryption",
        "APM agents",
        "Agent downloads",
        "Infrastructure agents",
        "Browser domains",
        "Mobile domains",
        "Synthetic monitor public locations",
        "Synthetic monitor private locations",
        "Alerts webhooks, api.newrelic.com, and ticketing integrations"
      ],
      "title": "Networks",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Install and configure"
      ],
      "external_id": "0e18eb9ad491741d3401d79bebfa33f829bb258c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/cross-product-functions/install-configure/networks/",
      "published_at": "2021-06-09T07:30:34Z",
      "updated_at": "2021-06-09T07:30:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This list is current. Last updated 31 May 2021. This is a list of the networks, IP addresses, domains, ports, and endpoints used by New Relic collectors (for example, https://collector.newrelic.com) to communicate with a New Relic agent. TLS is required for all domains. TLS encryption To ensure data security for our customers and to be in compliance with FedRAMP and other standards for data encryption, Transport Layer Security (TLS) is required for all domains. Our preferred protocol for all domains is TLS 1.2. For more information, see New Relic's Explorers Hub post about TLS 1.2. In addition, TLS 1.2 is required for most domains, except: APM agent connections Browser agent connections Event API For future updates to required and supported protocol versions, follow the Security Notifications tag in New Relic's Explorers Hub. APM agents To enhance network performance and data security, New Relic uses a CDN and DDoS prevention service with a large IP range. New Relic agents require your firewall to allow outgoing connections to the following networks and ports. TLS is required for all domains. Use the IP connections for account data in the US or European Union region as appropriate: IP connections APM data Networks US region accounts: 162.247.240.0/22 EU region accounts: 185.221.84.0/22 Ports US region accounts: Default: TCP 443 (recommended) TCP 80 EU region accounts: Default: TCP 443 (recommended) TCP 80 Endpoints US region accounts: collector*.newrelic.com EU region accounts: collector*.eu01.nr-data.net:443 (recommended) Recommendation: Use port 443, a secured channel for encrypted HTTPS traffic. Some New Relic agents also offer port 80, an unsecured channel open to all HTTP traffic. While some agents can be configured to use both port 80 and port 443, we recommend that you choose the port 443 (default). If you have an existing configuration that uses port 80, you can update it to use port 443, the default New Relic connection. Agent downloads TLS is required for all domains. Service for download.newrelic.com is provided through Fastly and is subject to change without warning. For the most current list of public IP addresses for New Relic agent downloads, see api.fastly.com/public-ip-list. Infrastructure agents In order to report data to New Relic, our infrastructure monitoring needs outbound access to these domains, networks, and ports. TLS is required for all domains. Use the IP connections for account data in the US or European Union region as appropriate: IP connections Infrastructure data Domains infra-api.newrelic.com identity-api.newrelic.com infrastructure-command-api.newrelic.com log-api.newrelic.com log-api.eu.newrelic.com metric-api.newrelic.com Networks For US region accounts: 162.247.240.0/22 For EU region accounts: 185.221.84.0/22 Port 443 Domains + Port For US region accounts: infra-api.newrelic.com:443 identity-api.newrelic.com:443 infrastructure-command-api.newrelic.com:443 log-api.newrelic.com:443 metric-api.newrelic.com:443 For EU region accounts: infra-api.eu.newrelic.com:443 identity-api.eu.newrelic.com:443 infrastructure-command-api.eu.newrelic.com:443 log-api.eu.newrelic.com:443 metric-api.eu.newrelic.com:443 Proxy If your system needs a proxy to connect to this domain, use the Infrastructure proxy setting. Browser domains In addition to the IP addresses for APM agents, applications monitored by our browser agents use outgoing connections to the following domains. TLS is required for all domains. Use the IP connections for account data in the US or European Union region as appropriate: For US region accounts: bam.nr-data.net js-agent.newrelic.com For EU region accounts: eu01.nr-data.net bam.eu01.nr-data.net For more information about CDN access for the js-agent.newrelic.com file to the domain bam.nr-data.net or to one of the New Relic beacons, see Security for browser monitoring. Mobile domains In addition to the IP addresses for APM agents, applications monitored by our mobile agents use outgoing connections to the following domains. TLS is required for all domains. Use the IP connections for account data in the US or European Union region as appropriate: For US region accounts: mobile-collector.newrelic.com mobile-crash.newrelic.com mobile-symbol-upload.newrelic.com For EU region accounts: mobile-collector.eu01.nr-data.net mobile-crash.eu01.nr-data.net mobile-symbol-upload.eu01.nr-data.net Synthetic monitor public locations To configure your firewall to allow synthetic monitors to access your monitored URL, use Synthetic public minion IPs. TLS is required for all domains. Synthetic monitor private locations Synthetic private minions report to a specific endpoint based on region. Configure your firewall to allow the private minion to access the endpoint or the static IP addresses associated with the endpoint. These IP addresses may change in the future. TLS is required for all domains. Use the IP connections for account data in the US or European Union region as appropriate: IP connections Synthetics private location data Endpoint For US region accounts: https://synthetics-horde.nr-data.net/ For EU region accounts: https://synthetics-horde.eu01.nr-data.net/ IP addresses For US region accounts: 13.248.153.51 76.223.21.185 For EU region accounts: 185.221.86.57 185.221.86.25 Alerts webhooks, api.newrelic.com, and ticketing integrations Endpoints that use api.newrelic.com (such as our GraphQL API for NerdGraph) and our New Relic-generated webhooks for alert policies use an IP address from designated network blocks for the US or European Union region. TLS is required for all addresses in these blocks. Network blocks for US region accounts: 162.247.240.0/22 Network blocks for EU region accounts: 158.177.65.64/29 159.122.103.184/29 161.156.125.32/28 These network blocks also apply to third-party ticketing integrations.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.74692,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Networks</em>",
        "sections": "APM <em>agents</em>",
        "tags": "Install and <em>configure</em>",
        "body": ". In addition, TLS 1.2 is required for most domains, except: APM <em>agent</em> connections Browser <em>agent</em> connections Event API For future updates to required and supported protocol versions, follow the Security Notifications tag in New Relic&#x27;s Explorers Hub. APM <em>agents</em> To enhance network performance and data security"
      },
      "id": "603eb81364441f64a24e88b6"
    }
  ],
  "/docs/agents/net-agent/custom-instrumentation/add-detail-transactions-xml-net": [
    {
      "sections": [
        "Custom instrumentation via attributes (.NET)",
        "Requirements and recommendations",
        "Transactions called within transactions",
        "Example: Calling Transaction in an already-started transaction",
        "Create a new non-web transaction",
        "Create a new web transaction",
        "Add detail to existing transactions with Trace",
        "Properties for [Transaction]",
        "Web",
        "Read forum posts about instrumentation",
        "Use other API functions"
      ],
      "title": "Custom instrumentation via attributes (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "68ae52e48b04bfe2279bcd038778cc5eebf53d1d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/custom-instrumentation/custom-instrumentation-attributes-net/",
      "published_at": "2021-06-08T20:32:16Z",
      "updated_at": "2021-05-15T18:25:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent provides several options for custom instrumentation. Custom instrumentation allows you to instrument parts of your app that are not instrumented automatically. This document describes how to instrument your app by decorating the methods in your app code with attributes. Use the Transaction attribute to create a custom transaction. You can also mark the custom transaction as a web transaction with the attribute's Web property. Use the Trace attribute to add custom instrumentation to methods that are invoked within a preexisting transaction. Requirements and recommendations Requirements include: .NET agent version 6.16.178.0 or higher. You must be willing to modify your source code. If you cannot or do not want to modify your source code, use custom instrumentation via XML. Your project must have a reference to NewRelic.Api.Agent.dll (for example, installing the package and placing using NewRelic.Api.Agent; in your code). This package is in the NuGet gallery. The Transaction and Trace attributes must be applied to concrete implementations of methods. They cannot be applied on interfaces or super class method definitions. Transactions called within transactions Methods decorated with the [Transaction] attribute will only create a new transaction when one does not already exist. When a method decorated with [Transaction] is called from within a previously started transaction, it will be treated as the [Trace] attribute instead, and will provide more information about the existing transaction. Example: Calling Transaction in an already-started transaction During the execution of this console application, OuterMethod will be called first and create a new transaction. The InnerMethod is called from within the transaction started by OuterMethod, so it will not create a new transaction. Instead, information about the execution of InnerMethod will be tracked as if the [Trace] attribute had been applied. static void Main(string[] args) { OuterMethod(); } [Transaction] public void OuterMethod() { InnerMethod(); } [Transaction] public void InnerMethod() { } Copy Create a new non-web transaction To start a non-web transaction (also known as a background request) with the Transaction attribute: [Transaction] public void Run() { // your background task } Copy For details about why to use either web or non-web, see Classify as web or non-web. Create a new web transaction To tell the agent to mark a non-web task as a web browser transaction, use either of these options: Set the Web property of the Transaction attribute to true. Set the transaction's URI with SetTransactionUri(). [Transaction(Web = true)] public void Run() { var uri = new Uri(\"http://www.mydomain.com/path\"); NewRelic.Api.Agent.NewRelic.SetTransactionUri(uri); // your web task } Copy When used inside a previously started transaction, this will be treated as a [Trace] attribute. For details about why to use either web or non-web, see Classify as web or non-web. Add detail to existing transactions with Trace If your transaction traces show large blocks of un-instrumented time and you want to include additional methods within the trace, you can use the Trace attribute: [Trace] protected void MethodWithinTransaction() { // your app code } Copy Properties for [ Transaction] The Transaction attribute supports the following properties: Web Type: Boolean Default: false If true, the agent starts a web transaction when it reaches this Transaction attribute. If a transaction is in progress, then that transaction will continue. If false (default), the agent starts a non-web transaction when it reaches this Transaction attribute. For example: [Transaction(Web = true)] Copy Read forum posts about instrumentation For more specific recommendations, check out these posts in our Explorers Hub community: Troubleshoot attribute-based custom instrumentation issues Build custom instrumentation tracer factories from .NET agent log files Use other API functions For more about the .NET agent API and its functionality, see New Relic's .NET agent API guide. For custom instrumentation without modifying your source code, see Create transactions via XML and Add detail to transactions via XML.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.20732,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>instrumentation</em> via attributes (.<em>NET</em>)",
        "sections": "<em>Custom</em> <em>instrumentation</em> via attributes (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> provides several options for <em>custom</em> <em>instrumentation</em>. <em>Custom</em> <em>instrumentation</em> allows you to <em>instrument</em> parts of your app that are not instrumented automatically. This document describes how to <em>instrument</em> your app by decorating the methods in your app code with attributes. Use"
      },
      "id": "6043cd9528ccbcfe1e2c60aa"
    },
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.00328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " application config file In addition, WebJobs may need <em>custom</em> <em>instrumentation</em> for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic&#x27;s .<em>NET</em> <em>agent</em> and Microsoft Application Insights rely on the CLR Profiler"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "Create transactions via XML (.NET)",
        "Create transactions using XML",
        "For the .NET Framework or Core agent on Windows",
        "Important",
        "For the .NET Core agent on Linux",
        "For Azure App Services",
        "Tip",
        "View transactions in the UI",
        "Example: Instrument three methods",
        "Example custom instrumentation file",
        "Example methods to be instrumented",
        "Example: Instrument a console app",
        "Example app"
      ],
      "title": "Create transactions via XML (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "f07408752c0fde42bd31c77b3c83260d68304437",
      "image": "https://docs.newrelic.com/static/0ed431b536aef47896991b59af94f453/c1b63/custom_transactions.png",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/custom-instrumentation/create-transactions-xml-net/",
      "published_at": "2021-06-08T20:31:11Z",
      "updated_at": "2021-03-11T08:11:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic instruments supported frameworks automatically. However, you may also have other frameworks for which some transactions are not being created automatically or additional methods that you would like to instrument. You can add custom instrumentation to these methods by creating transactions. Transactions created via XML are classified as non-web in the New Relic UI. This document describes how to create transactions with an XML file. You can also: Add details to existing transactions using XML Create transactions and add detail to existing transactions with the .NET agent API. If you have a non-IIS application, XML instrumentation requires enabling the Instrument all option during the .NET agent installation. Create transactions using XML Custom transactions (transactions not instrumented automatically) are defined in a custom instrumentation XML file. You define a method that triggers the creation of a transaction. You can also instrument additional methods called by the trigger method. Some important rules to know before you create a custom transaction: Database and external calls do not require custom instrumentation because they're automatically instrumented. Ensure your XML file is in the correct path. To define its instrumentation set, the .NET agent reads every XML file in the Extensions directory. If a method you attempt to instrument is already part of an existing transaction, it will be added as a segment to that transaction. No new transaction will be created. This will occur even if the parent method is instrumented using custom instrumentation. Avoid instrumenting things like Main() as this method won't end until the application ends and data may not be sent to New Relic. To create a custom instrumentation file: Create a new .xml file in the Extensions directory within your .NET Agent directory. The location of this directory depends on your OS: For the .NET Framework or Core agent on Windows C:\\ ProgramData \\New Relic\\.NET Agent\\Extensions Copy Important Use the ProgramData directory, not the Program Files directory. For the .NET Core agent on Linux PATH_TO_AGENT_DIRECTORY/Extensions Copy PATH_TO_AGENT_DIRECTORY will be the default /usr/local/newrelic-netcore20-agent or the directory chosen at installation. For Azure App Services .NET Framework agent: D:\\home\\site\\wwwroot\\newrelic\\extensions Copy .NET Core agent: D:\\home\\site\\wwwroot\\newrelic_core\\extensions Copy Copy this template into the file you created. This template defines two separate class and methods as transactions but more can be added: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Name\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName\"> <exactMethodMatcher methodName=\"MethodName\" /> </match> </tracerFactory> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Name2\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName2\"> <exactMethodMatcher methodName=\"MethodName2\" /> </match> </tracerFactory> </instrumentation> </extension> Copy In the file you created, customize the attribute values Name, AssemblyName, NameSpace.ClassName, and MethodName. Customize these values for both the trigger method and for any methods called by the trigger method. Tip These values are case sensitive. Name: Defines the transaction name. The metricName attribute is optional. If omitted, the transaction name will be NameSpace.ClassName/MethodName. The transaction category will be \"Custom\". The resulting full metric name will be \"OtherTransaction/Custom/Name . If you wish to change the transaction category from \"Custom\", use the SetTransactionName api call. The New Relic UI groups transactions under categories in the transaction type field. AssemblyName: The assembly that contains the trigger method. NameSpace.ClassName: The fully-qualified class name that contains the trigger method. MethodName: The exact name of the trigger method. Adding additional methods must include the \"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" attribute to be defined as a transaction. Tags without this attribute will add detail to existing transactions only. Optional: To check if the XML file is formatted correctly, you can check it against the XSD (located at C:\\ProgramData\\New Relic\\.NET Agent\\Extensions\\extension.xsd) using any XSD validator. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. View transactions in the UI The custom transaction starts when the method specified by methodName is invoked in the assembly specified by assemblyName. The transaction ends when the method returns or throws an exception. You can view these metrics in the Transactions page and in transaction traces. To view the transaction: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > Type > (select a type). The type is defined by Category/Name. one.newrelic.com > APM > (select an app) > Monitoring > Transactions > Type > (selected type): Use the Type menu to view your custom transactions. Example: Instrument three methods This example presents a simple implementation of creating transactions. Example custom instrumentation file This custom instrumentation file defines the three methods to instrument. Only two are defined as transactions. <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Bars\"> <match assemblyName=\"Foo\" className=\"Foo.Bar\"> <exactMethodMatcher methodName=\"Bar1\" /> <exactMethodMatcher methodName=\"Bar2\" /> </match> </tracerFactory> <!-- Instrument 0 or more methods called by the trigger method. These methods appear in the transaction breakdown table and in transaction traces. --> <tracerFactory> <match assemblyName=\"Foo\" className=\"Foo.Bar\"> <exactMethodMatcher methodName=\"Bar3\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Example methods to be instrumented This code contains the three methods, with comments explaining when each one will be instrumented by the agent: var bar = new Bar(); bar.Bar1(); // Creates a transaction named Bars in the Custom category. bar.Bar2(); // Creates a transaction named Bars in the Custom category. bar.Bar3(); // Won't create a new transaction. See `If Bar3 is called directly`, below. namespace Foo { public class Bar { // The agent creates a transaction that includes an external service request in its transaction traces. public void Bar1() { new WebClient().DownloadString(\"http://www.google.com/\"); } // Creates a transaction containing one segment. public void Bar2() { // The Bar3 segment will contain your SQL query inside of it and possibly an execution plan. Bar3(); } // If Bar3 is called directly, the agent will not create a transaction. // However, if Bar3 is called from Bar1 or Bar2, Bar3 will appear as a segment containing its SQL query. private void Bar3() { using (var connection = new SqlConnection(ConnectionStrings[\"MsSqlConnection\"].ConnectionString)) { connection.Open(); using (var command = new SqlCommand(\"SELECT * FROM table\", connection)) using (var reader = command.ExecuteReader()) { reader.Read(); } } } } } Copy Example: Instrument a console app This simple console app demonstrates creating transactions. After running the application a few times, you see the transactions you created in the Transactions page (at one.newrelic.com > APM > (select an app) > Transactions > Type). The Dummy segment will be visible in the transactions breakdown table and in any transaction traces. Example custom instrumentation file This custom instrumentation file defines two methods to instrument: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"CustomTransaction\"> <match assemblyName=\"ConsoleApplication1\" className=\"ConsoleApplication1.CustomTransaction\"> <exactMethodMatcher methodName=\"StartTransaction\" /> </match> </tracerFactory> <!-- Instrument 0 or more methods called by the trigger method. These methods appear in the transaction breakdown table and in transaction traces. --> <tracerFactory> <match assemblyName=\"ConsoleApplication1\" className=\"ConsoleApplication1.CustomTransaction\"> <exactMethodMatcher methodName=\"Dummy\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Example app This code contains the two methods specified by the custom instrumentation file: using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace ConsoleApplication1 { class Program { static void Main(string[] args) { Console.WriteLine(\"Custom Transactions\"); var t = new CustomTransaction(); while (true) t.StartTransaction(); } } class CustomTransaction { public void StartTransaction() { Console.WriteLine(\"StartTransaction\"); Dummy(); } void Dummy() { System.Threading.Thread.Sleep(5000); } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.74274,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create transactions via XML (.<em>NET</em>)",
        "sections": "For the .<em>NET</em> Framework or Core <em>agent</em> on Windows",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " have a non-IIS application, XML <em>instrumentation</em> requires enabling the <em>Instrument</em> all option during the .<em>NET</em> <em>agent</em> installation. Create transactions using XML <em>Custom</em> transactions (transactions not instrumented automatically) are defined in a <em>custom</em> <em>instrumentation</em> XML file. You define a method"
      },
      "id": "6043d1cc28ccbc6f972dc89b"
    }
  ],
  "/docs/agents/net-agent/custom-instrumentation/create-transactions-xml-net": [
    {
      "sections": [
        "Custom instrumentation via attributes (.NET)",
        "Requirements and recommendations",
        "Transactions called within transactions",
        "Example: Calling Transaction in an already-started transaction",
        "Create a new non-web transaction",
        "Create a new web transaction",
        "Add detail to existing transactions with Trace",
        "Properties for [Transaction]",
        "Web",
        "Read forum posts about instrumentation",
        "Use other API functions"
      ],
      "title": "Custom instrumentation via attributes (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "68ae52e48b04bfe2279bcd038778cc5eebf53d1d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/custom-instrumentation/custom-instrumentation-attributes-net/",
      "published_at": "2021-06-08T20:32:16Z",
      "updated_at": "2021-05-15T18:25:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent provides several options for custom instrumentation. Custom instrumentation allows you to instrument parts of your app that are not instrumented automatically. This document describes how to instrument your app by decorating the methods in your app code with attributes. Use the Transaction attribute to create a custom transaction. You can also mark the custom transaction as a web transaction with the attribute's Web property. Use the Trace attribute to add custom instrumentation to methods that are invoked within a preexisting transaction. Requirements and recommendations Requirements include: .NET agent version 6.16.178.0 or higher. You must be willing to modify your source code. If you cannot or do not want to modify your source code, use custom instrumentation via XML. Your project must have a reference to NewRelic.Api.Agent.dll (for example, installing the package and placing using NewRelic.Api.Agent; in your code). This package is in the NuGet gallery. The Transaction and Trace attributes must be applied to concrete implementations of methods. They cannot be applied on interfaces or super class method definitions. Transactions called within transactions Methods decorated with the [Transaction] attribute will only create a new transaction when one does not already exist. When a method decorated with [Transaction] is called from within a previously started transaction, it will be treated as the [Trace] attribute instead, and will provide more information about the existing transaction. Example: Calling Transaction in an already-started transaction During the execution of this console application, OuterMethod will be called first and create a new transaction. The InnerMethod is called from within the transaction started by OuterMethod, so it will not create a new transaction. Instead, information about the execution of InnerMethod will be tracked as if the [Trace] attribute had been applied. static void Main(string[] args) { OuterMethod(); } [Transaction] public void OuterMethod() { InnerMethod(); } [Transaction] public void InnerMethod() { } Copy Create a new non-web transaction To start a non-web transaction (also known as a background request) with the Transaction attribute: [Transaction] public void Run() { // your background task } Copy For details about why to use either web or non-web, see Classify as web or non-web. Create a new web transaction To tell the agent to mark a non-web task as a web browser transaction, use either of these options: Set the Web property of the Transaction attribute to true. Set the transaction's URI with SetTransactionUri(). [Transaction(Web = true)] public void Run() { var uri = new Uri(\"http://www.mydomain.com/path\"); NewRelic.Api.Agent.NewRelic.SetTransactionUri(uri); // your web task } Copy When used inside a previously started transaction, this will be treated as a [Trace] attribute. For details about why to use either web or non-web, see Classify as web or non-web. Add detail to existing transactions with Trace If your transaction traces show large blocks of un-instrumented time and you want to include additional methods within the trace, you can use the Trace attribute: [Trace] protected void MethodWithinTransaction() { // your app code } Copy Properties for [ Transaction] The Transaction attribute supports the following properties: Web Type: Boolean Default: false If true, the agent starts a web transaction when it reaches this Transaction attribute. If a transaction is in progress, then that transaction will continue. If false (default), the agent starts a non-web transaction when it reaches this Transaction attribute. For example: [Transaction(Web = true)] Copy Read forum posts about instrumentation For more specific recommendations, check out these posts in our Explorers Hub community: Troubleshoot attribute-based custom instrumentation issues Build custom instrumentation tracer factories from .NET agent log files Use other API functions For more about the .NET agent API and its functionality, see New Relic's .NET agent API guide. For custom instrumentation without modifying your source code, see Create transactions via XML and Add detail to transactions via XML.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.2073,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>instrumentation</em> via attributes (.<em>NET</em>)",
        "sections": "<em>Custom</em> <em>instrumentation</em> via attributes (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> provides several options for <em>custom</em> <em>instrumentation</em>. <em>Custom</em> <em>instrumentation</em> allows you to <em>instrument</em> parts of your app that are not instrumented automatically. This document describes how to <em>instrument</em> your app by decorating the methods in your app code with attributes. Use"
      },
      "id": "6043cd9528ccbcfe1e2c60aa"
    },
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.00316,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " application config file In addition, WebJobs may need <em>custom</em> <em>instrumentation</em> for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic&#x27;s .<em>NET</em> <em>agent</em> and Microsoft Application Insights rely on the CLR Profiler"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "Add detail to transactions via XML (.NET)",
        "Add detail with custom instrumentation",
        "Important",
        "Tip",
        "Ignore a transaction",
        "Track async work in a separate transaction",
        "Example method definitions",
        "Example method invocations",
        "Example MyInstrumentation.xml",
        "Example custom instrumentation file",
        "Example methods to be instrumented",
        "Name metrics",
        "Name transactions",
        "XSD validation",
        "Troubleshooting"
      ],
      "title": "Add detail to transactions via XML (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "0182a8eb2bf7b87e62ac2f86963af72b568e5c18",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/custom-instrumentation/add-detail-transactions-xml-net/",
      "published_at": "2021-06-08T20:31:11Z",
      "updated_at": "2021-03-11T08:11:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web browser transactions and non-web transactions (background tasks). Normally the .NET agent produces complete information automatically, without any need for you to modify your application code. However, if New Relic does not support your framework, you may need to add custom instrumentation. New Relic uses method tracers to implement custom instrumentation. A method tracer is a software probe that you can put on a method of any class. The .NET agent loads the instrumentation directives that define which methods should be traced from all XML files in the extensions directory. This document describes instrumenting work when the agent is already collecting transactions, but you want to add more detail to those transactions. To instrument work when the agent isn't creating transactions automatically, see Create transactions via XML. You can also add detail and create transactions by decorating your code with attributes. Add detail with custom instrumentation Extension files define a number of tracer factories in an instrumentation element. Each tracer factory contains match elements that define the assembly, fully qualified class name, and method name to match. To define a new custom instrumentation XML file: Create a new .xml file in the extensions directory used by the .NET agent to read every XML file and define its instrumentation set. For the .NET Framework agent, use the following location: C:\\ ProgramData \\New Relic\\.NET Agent\\Extensions Copy Important Do not put the .xml file in the C:\\Program Files\\New Relic\\.NET agent\\Extensions directory. The file must be in the ProgramData file location for custom instrumentation to work. Do not modify the distributed xml files. These files are overwritten whenever the agent is upgraded. Copy this template into the file you created use the sample as an example. This instruments two methods but you can add methods to your instrumentation file. Tip The values AssemblyName, NameSpace.ClassName, and MethodName are case sensitive. <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- These methods appear in the transactions breakdown table and in transaction traces --> <tracerFactory metricName=\"Category/Name\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName\"> <exactMethodMatcher methodName=\"MethodName\" /> </match> </tracerFactory> <tracerFactory metricName=\"Category/Name2\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName2\"> <exactMethodMatcher methodName=\"MethodName2\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Validate the .xml instrumentation file against extension.xsd. Non-IIS apps (such as a console app or background process): You must also create transactions via XML to contain the methods you instrument. Custom methods instrumented outside of a transaction will not be reported to New Relic. Important If your .NET agent version is 7.0 or higher, this is the end of the procedure. If your .NET agent version is lower than 7.0, continue to the next steps. If your app is IIS-hosted, restart IIS. For non-IIS applications, restart your application's host process or the application itself. Ignore a transaction You can stop a transaction from being reported by using a custom instrumentation file. Whenever an ignored method is called, the .NET agent ignores the entire parent transaction. This is the same as calling IgnoreTransaction(). To ignore a transaction: Add custom instrumentation. Add a tracerFactory whose name is NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory: <tracerFactory name=\" NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory \"> <match assemblyName=\"System.Web.Extensions\" className=\"System.Web.Handlers.ScriptResourceHandler\"> <exactMethodMatcher methodName=\"Throw404\" /> </match> </tracerFactory> Copy Track async work in a separate transaction In some cases, asynchronous work can be tracked as a separate transaction by applying the AsyncForceNewTransactionWrapper instrumentation: <tracerFactory name=\" AsyncForceNewTransactionWrapper \"> <match assemblyName=\"AssemblyName\" className=\"Namespace.ClassName\"> <exactMethodMatcher methodName=\"MethodName\" /> </match> </tracerFactory> Copy Async usage considerations Comments Instrumented method The instrumented method must be invoked using Task.Run, Task.Factory.StartNew, or new Thread(). It cannot be invoked using the await keyword. Return type The instrumented method is not required to be async. However, if it is async, it must have a return type of Task or Task<T>. It cannot have a void return type. Attribute instrumentation The instrumented method cannot have attribute instrumentation applied to it. It cannot be decorated with the [Transaction] or [Trace] attributes. Example method definitions The following methods can be instrumented using the AsyncForceNewTransactionWrapper custom instrumentation: private void SyncMethod() { } private async Task AsyncMethod_Task() { } private async Task<string> AsyncMethod_TypedTask() { return \"ok\"; } Copy The following methods cannot be instrumented using the AsyncForceNewTransactionWrapper custom instrumentation: private async void AsyncMethod_Void() { } [Transaction] private void TransactionAttributedMethod() { } [Trace] private void TracedAttributedMethod() { } Copy Example method invocations The following method calls can be used with AsyncForceNewTransactionWrapper instrumentation: Task.Run(SyncMethod); Task.Factory.StartNew(AsyncMethod_Task); var newThread = new Thread(new ThreadStart(SyncMethod)); newThread.Start(); Copy The following method calls cannot be used with AsyncForceNewTransactionWrapper instrumentation: SyncMethod(); //This is not an asynchronous call await AsyncMethod_Task(); //Not started with Task.Run, Task.Factor.StartNew, or new Thread() AsyncMethod_Void(); //Async Void is not supported Copy Example MyInstrumentation.xml This example instruments two methods and ignores another method: Instrument: CustomInstrumentDemo.Controllers.FirstController.FirstExample() Instrument: CustomInstrumentDemo.Controllers.SecondController.SecondExample() Ignore: CustomInstrumentDemo.Controllers.SecondController.ThirdExample() Instrument: CustomInstrumentDemo.Controllers.SecondController.FourthExample(int id, string name) To implement this custom instrumentation scheme, use the following example file and instrumented methods: Example custom instrumentation file The following is an example custom instrumentation file named MyInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- instrument CustomInstrumentDemo.Controllers.FirstController.FirstExample and creates metric named Custom/Foo1 --> <tracerFactory metricName=\"Custom/Foo1\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.FirstController\"> <exactMethodMatcher methodName=\"FirstExample\" /> </match> </tracerFactory> <!-- instrument CustomInstrumentDemo.Controllers.SecondController.SecondExample --> <tracerFactory> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"SecondExample\" /> </match> </tracerFactory> <!-- ignore CustomInstrumentDemo.Controllers.SecondController.ThirdExample --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"ThirdExample\" /> </match> </tracerFactory> <!-- instrument CustomInstrumentDemo.Controllers.SecondController.FourthExample and creates metric named Custom/{value}, where {value} is the value of the first string parameter of the instrumented method (in this case, the first string parameter is \"name\"). --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.CustomSegmentTracerFactory\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"FourthExample\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Example methods to be instrumented This code contains the three methods specified by the example custom instrumentation file: using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.Mvc; using System.Threading; namespace CustomInstrumentDemo.Controllers { public class FirstController : Controller { public ActionResult Foo1() { ViewBag.Message = \"Your Sample Page\"; FirstExample(); return View(); } public void FirstExample() { int firstVar = 1; for (int i = 0; i <= 500; i++) { firstVar *= 5; Thread.Sleep(50); } } } public class SecondController : Controller { public ActionResult Foo2() { ViewBag.Message = \"This view will include detailed information on the SecondExample method\"; SecondExample(); return view; } public ActionResult Foo3() { ViewBag.Message = \"This view will be ignored because of the inclusion of the ThirdExample method\"; ThirdExample(); } public void SecondExample() { int secondVar = 2; using (var connection = new SqlConnection(ConnectionStrings[\"MsSqlConnection\"].ConnectionString)) { connection.Open(); using (var command = new SqlCommand(\"SELECT * FROM table\", connection)) using (var reader = command.ExecuteReader()) { reader.Read(); } } } public void ThirdExample() { try { var ImNotABool = \"43\"; bool.Parse(ImNotABool); } catch (Exception ex) { NewRelic.Api.Agent.NewRelic.NoticeError(ex); } } public void FourthExample(int id, string name) { Console.WriteLine(\"The ID passed in was \" + id + \" and the name passed in was \" + name); } } } Copy Name metrics Metrics created from tracers will be named using the class name and method name of the matched method. You can override this name with the metricName attribute. Begin metricName with Custom/ (for example, metricName=\"Custom/OrderSubmissions\"). <!-- instruments MyCompany.Order.Submit() and creates a metric named Custom/OrderSubmissions --> <tracerFactory metricName=\"Custom/OrderSubmissions\"> <match assemblyName=\"MyCompany\" className=\"MyCompany.Order\"> <exactMethodMatcher methodName=\"Submit\" /> </match </tracerFactory> Copy Name transactions The agent names transactions using the tracer in the transaction with the highest naming priority. Web transactions may be named using the HTTP handler, ASP name, MVC controller name, or web service name, depending on the tracers invoked in the transaction's execution. Background transactions with no tracer that explicitly names the transaction are rolled up into a single transaction name. Use the transactionNamingPriority attribute to tell the agent to give a tracer transaction naming priority. Valid values are 1 to 7, where 7 takes precedence over 1 to 6. Also, the metricName attribute must begin with Custom/ (for example, metricName=\"Custom/instance\"). <!-- instructs the agent to create a metric for MyControllerBase.Execute and to name the transaction using this tracer's metric name --> <tracerFactory metricName=\"Custom/instance\" transactionNamingPriority=\"7\"> <match assemblyName=\"MyCompany\" className=\"MyCompany.MyControllerBase\"> <exactMethodMatcher methodName=\"Execute\" /> </match> </tracerFactory> Copy XSD validation The XML instrumentation file can be checked against the XSD file (located at C:\\ProgramData\\New Relic\\.NET Agent\\Extensions\\extension.xsd) with any XSD validator. Troubleshooting The .NET agent will write a log message to NewRelic.Profiler.####.log (where #### is the PID of the instrumented process) as it rewrites methods. This helps to verify that custom instrumentation is being read and that the proper methods are being instrumented. Tip Avoid using the name attribute of the tracerFactory element in custom instrumentation. For more information, review the extension.xsd schema file in the agent directory.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.74274,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add detail to transactions via XML (.<em>NET</em>)",
        "sections": "Add detail with <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", you may need to add <em>custom</em> <em>instrumentation</em>. New Relic uses method tracers to implement <em>custom</em> <em>instrumentation</em>. A method tracer is a software probe that you can put on a method of any class. The .<em>NET</em> <em>agent</em> loads the <em>instrumentation</em> directives that define which methods should be traced from all XML"
      },
      "id": "6043f7d5196a6707e3960f33"
    }
  ],
  "/docs/agents/net-agent/custom-instrumentation/custom-instrumentation-attributes-net": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.00316,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " application config file In addition, WebJobs may need <em>custom</em> <em>instrumentation</em> for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic&#x27;s .<em>NET</em> <em>agent</em> and Microsoft Application Insights rely on the CLR Profiler"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "Add detail to transactions via XML (.NET)",
        "Add detail with custom instrumentation",
        "Important",
        "Tip",
        "Ignore a transaction",
        "Track async work in a separate transaction",
        "Example method definitions",
        "Example method invocations",
        "Example MyInstrumentation.xml",
        "Example custom instrumentation file",
        "Example methods to be instrumented",
        "Name metrics",
        "Name transactions",
        "XSD validation",
        "Troubleshooting"
      ],
      "title": "Add detail to transactions via XML (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "0182a8eb2bf7b87e62ac2f86963af72b568e5c18",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/custom-instrumentation/add-detail-transactions-xml-net/",
      "published_at": "2021-06-08T20:31:11Z",
      "updated_at": "2021-03-11T08:11:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web browser transactions and non-web transactions (background tasks). Normally the .NET agent produces complete information automatically, without any need for you to modify your application code. However, if New Relic does not support your framework, you may need to add custom instrumentation. New Relic uses method tracers to implement custom instrumentation. A method tracer is a software probe that you can put on a method of any class. The .NET agent loads the instrumentation directives that define which methods should be traced from all XML files in the extensions directory. This document describes instrumenting work when the agent is already collecting transactions, but you want to add more detail to those transactions. To instrument work when the agent isn't creating transactions automatically, see Create transactions via XML. You can also add detail and create transactions by decorating your code with attributes. Add detail with custom instrumentation Extension files define a number of tracer factories in an instrumentation element. Each tracer factory contains match elements that define the assembly, fully qualified class name, and method name to match. To define a new custom instrumentation XML file: Create a new .xml file in the extensions directory used by the .NET agent to read every XML file and define its instrumentation set. For the .NET Framework agent, use the following location: C:\\ ProgramData \\New Relic\\.NET Agent\\Extensions Copy Important Do not put the .xml file in the C:\\Program Files\\New Relic\\.NET agent\\Extensions directory. The file must be in the ProgramData file location for custom instrumentation to work. Do not modify the distributed xml files. These files are overwritten whenever the agent is upgraded. Copy this template into the file you created use the sample as an example. This instruments two methods but you can add methods to your instrumentation file. Tip The values AssemblyName, NameSpace.ClassName, and MethodName are case sensitive. <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- These methods appear in the transactions breakdown table and in transaction traces --> <tracerFactory metricName=\"Category/Name\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName\"> <exactMethodMatcher methodName=\"MethodName\" /> </match> </tracerFactory> <tracerFactory metricName=\"Category/Name2\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName2\"> <exactMethodMatcher methodName=\"MethodName2\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Validate the .xml instrumentation file against extension.xsd. Non-IIS apps (such as a console app or background process): You must also create transactions via XML to contain the methods you instrument. Custom methods instrumented outside of a transaction will not be reported to New Relic. Important If your .NET agent version is 7.0 or higher, this is the end of the procedure. If your .NET agent version is lower than 7.0, continue to the next steps. If your app is IIS-hosted, restart IIS. For non-IIS applications, restart your application's host process or the application itself. Ignore a transaction You can stop a transaction from being reported by using a custom instrumentation file. Whenever an ignored method is called, the .NET agent ignores the entire parent transaction. This is the same as calling IgnoreTransaction(). To ignore a transaction: Add custom instrumentation. Add a tracerFactory whose name is NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory: <tracerFactory name=\" NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory \"> <match assemblyName=\"System.Web.Extensions\" className=\"System.Web.Handlers.ScriptResourceHandler\"> <exactMethodMatcher methodName=\"Throw404\" /> </match> </tracerFactory> Copy Track async work in a separate transaction In some cases, asynchronous work can be tracked as a separate transaction by applying the AsyncForceNewTransactionWrapper instrumentation: <tracerFactory name=\" AsyncForceNewTransactionWrapper \"> <match assemblyName=\"AssemblyName\" className=\"Namespace.ClassName\"> <exactMethodMatcher methodName=\"MethodName\" /> </match> </tracerFactory> Copy Async usage considerations Comments Instrumented method The instrumented method must be invoked using Task.Run, Task.Factory.StartNew, or new Thread(). It cannot be invoked using the await keyword. Return type The instrumented method is not required to be async. However, if it is async, it must have a return type of Task or Task<T>. It cannot have a void return type. Attribute instrumentation The instrumented method cannot have attribute instrumentation applied to it. It cannot be decorated with the [Transaction] or [Trace] attributes. Example method definitions The following methods can be instrumented using the AsyncForceNewTransactionWrapper custom instrumentation: private void SyncMethod() { } private async Task AsyncMethod_Task() { } private async Task<string> AsyncMethod_TypedTask() { return \"ok\"; } Copy The following methods cannot be instrumented using the AsyncForceNewTransactionWrapper custom instrumentation: private async void AsyncMethod_Void() { } [Transaction] private void TransactionAttributedMethod() { } [Trace] private void TracedAttributedMethod() { } Copy Example method invocations The following method calls can be used with AsyncForceNewTransactionWrapper instrumentation: Task.Run(SyncMethod); Task.Factory.StartNew(AsyncMethod_Task); var newThread = new Thread(new ThreadStart(SyncMethod)); newThread.Start(); Copy The following method calls cannot be used with AsyncForceNewTransactionWrapper instrumentation: SyncMethod(); //This is not an asynchronous call await AsyncMethod_Task(); //Not started with Task.Run, Task.Factor.StartNew, or new Thread() AsyncMethod_Void(); //Async Void is not supported Copy Example MyInstrumentation.xml This example instruments two methods and ignores another method: Instrument: CustomInstrumentDemo.Controllers.FirstController.FirstExample() Instrument: CustomInstrumentDemo.Controllers.SecondController.SecondExample() Ignore: CustomInstrumentDemo.Controllers.SecondController.ThirdExample() Instrument: CustomInstrumentDemo.Controllers.SecondController.FourthExample(int id, string name) To implement this custom instrumentation scheme, use the following example file and instrumented methods: Example custom instrumentation file The following is an example custom instrumentation file named MyInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- instrument CustomInstrumentDemo.Controllers.FirstController.FirstExample and creates metric named Custom/Foo1 --> <tracerFactory metricName=\"Custom/Foo1\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.FirstController\"> <exactMethodMatcher methodName=\"FirstExample\" /> </match> </tracerFactory> <!-- instrument CustomInstrumentDemo.Controllers.SecondController.SecondExample --> <tracerFactory> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"SecondExample\" /> </match> </tracerFactory> <!-- ignore CustomInstrumentDemo.Controllers.SecondController.ThirdExample --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"ThirdExample\" /> </match> </tracerFactory> <!-- instrument CustomInstrumentDemo.Controllers.SecondController.FourthExample and creates metric named Custom/{value}, where {value} is the value of the first string parameter of the instrumented method (in this case, the first string parameter is \"name\"). --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.CustomSegmentTracerFactory\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"FourthExample\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Example methods to be instrumented This code contains the three methods specified by the example custom instrumentation file: using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.Mvc; using System.Threading; namespace CustomInstrumentDemo.Controllers { public class FirstController : Controller { public ActionResult Foo1() { ViewBag.Message = \"Your Sample Page\"; FirstExample(); return View(); } public void FirstExample() { int firstVar = 1; for (int i = 0; i <= 500; i++) { firstVar *= 5; Thread.Sleep(50); } } } public class SecondController : Controller { public ActionResult Foo2() { ViewBag.Message = \"This view will include detailed information on the SecondExample method\"; SecondExample(); return view; } public ActionResult Foo3() { ViewBag.Message = \"This view will be ignored because of the inclusion of the ThirdExample method\"; ThirdExample(); } public void SecondExample() { int secondVar = 2; using (var connection = new SqlConnection(ConnectionStrings[\"MsSqlConnection\"].ConnectionString)) { connection.Open(); using (var command = new SqlCommand(\"SELECT * FROM table\", connection)) using (var reader = command.ExecuteReader()) { reader.Read(); } } } public void ThirdExample() { try { var ImNotABool = \"43\"; bool.Parse(ImNotABool); } catch (Exception ex) { NewRelic.Api.Agent.NewRelic.NoticeError(ex); } } public void FourthExample(int id, string name) { Console.WriteLine(\"The ID passed in was \" + id + \" and the name passed in was \" + name); } } } Copy Name metrics Metrics created from tracers will be named using the class name and method name of the matched method. You can override this name with the metricName attribute. Begin metricName with Custom/ (for example, metricName=\"Custom/OrderSubmissions\"). <!-- instruments MyCompany.Order.Submit() and creates a metric named Custom/OrderSubmissions --> <tracerFactory metricName=\"Custom/OrderSubmissions\"> <match assemblyName=\"MyCompany\" className=\"MyCompany.Order\"> <exactMethodMatcher methodName=\"Submit\" /> </match </tracerFactory> Copy Name transactions The agent names transactions using the tracer in the transaction with the highest naming priority. Web transactions may be named using the HTTP handler, ASP name, MVC controller name, or web service name, depending on the tracers invoked in the transaction's execution. Background transactions with no tracer that explicitly names the transaction are rolled up into a single transaction name. Use the transactionNamingPriority attribute to tell the agent to give a tracer transaction naming priority. Valid values are 1 to 7, where 7 takes precedence over 1 to 6. Also, the metricName attribute must begin with Custom/ (for example, metricName=\"Custom/instance\"). <!-- instructs the agent to create a metric for MyControllerBase.Execute and to name the transaction using this tracer's metric name --> <tracerFactory metricName=\"Custom/instance\" transactionNamingPriority=\"7\"> <match assemblyName=\"MyCompany\" className=\"MyCompany.MyControllerBase\"> <exactMethodMatcher methodName=\"Execute\" /> </match> </tracerFactory> Copy XSD validation The XML instrumentation file can be checked against the XSD file (located at C:\\ProgramData\\New Relic\\.NET Agent\\Extensions\\extension.xsd) with any XSD validator. Troubleshooting The .NET agent will write a log message to NewRelic.Profiler.####.log (where #### is the PID of the instrumented process) as it rewrites methods. This helps to verify that custom instrumentation is being read and that the proper methods are being instrumented. Tip Avoid using the name attribute of the tracerFactory element in custom instrumentation. For more information, review the extension.xsd schema file in the agent directory.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.74274,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add detail to transactions via XML (.<em>NET</em>)",
        "sections": "Add detail with <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", you may need to add <em>custom</em> <em>instrumentation</em>. New Relic uses method tracers to implement <em>custom</em> <em>instrumentation</em>. A method tracer is a software probe that you can put on a method of any class. The .<em>NET</em> <em>agent</em> loads the <em>instrumentation</em> directives that define which methods should be traced from all XML"
      },
      "id": "6043f7d5196a6707e3960f33"
    },
    {
      "sections": [
        "Create transactions via XML (.NET)",
        "Create transactions using XML",
        "For the .NET Framework or Core agent on Windows",
        "Important",
        "For the .NET Core agent on Linux",
        "For Azure App Services",
        "Tip",
        "View transactions in the UI",
        "Example: Instrument three methods",
        "Example custom instrumentation file",
        "Example methods to be instrumented",
        "Example: Instrument a console app",
        "Example app"
      ],
      "title": "Create transactions via XML (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "f07408752c0fde42bd31c77b3c83260d68304437",
      "image": "https://docs.newrelic.com/static/0ed431b536aef47896991b59af94f453/c1b63/custom_transactions.png",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/custom-instrumentation/create-transactions-xml-net/",
      "published_at": "2021-06-08T20:31:11Z",
      "updated_at": "2021-03-11T08:11:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic instruments supported frameworks automatically. However, you may also have other frameworks for which some transactions are not being created automatically or additional methods that you would like to instrument. You can add custom instrumentation to these methods by creating transactions. Transactions created via XML are classified as non-web in the New Relic UI. This document describes how to create transactions with an XML file. You can also: Add details to existing transactions using XML Create transactions and add detail to existing transactions with the .NET agent API. If you have a non-IIS application, XML instrumentation requires enabling the Instrument all option during the .NET agent installation. Create transactions using XML Custom transactions (transactions not instrumented automatically) are defined in a custom instrumentation XML file. You define a method that triggers the creation of a transaction. You can also instrument additional methods called by the trigger method. Some important rules to know before you create a custom transaction: Database and external calls do not require custom instrumentation because they're automatically instrumented. Ensure your XML file is in the correct path. To define its instrumentation set, the .NET agent reads every XML file in the Extensions directory. If a method you attempt to instrument is already part of an existing transaction, it will be added as a segment to that transaction. No new transaction will be created. This will occur even if the parent method is instrumented using custom instrumentation. Avoid instrumenting things like Main() as this method won't end until the application ends and data may not be sent to New Relic. To create a custom instrumentation file: Create a new .xml file in the Extensions directory within your .NET Agent directory. The location of this directory depends on your OS: For the .NET Framework or Core agent on Windows C:\\ ProgramData \\New Relic\\.NET Agent\\Extensions Copy Important Use the ProgramData directory, not the Program Files directory. For the .NET Core agent on Linux PATH_TO_AGENT_DIRECTORY/Extensions Copy PATH_TO_AGENT_DIRECTORY will be the default /usr/local/newrelic-netcore20-agent or the directory chosen at installation. For Azure App Services .NET Framework agent: D:\\home\\site\\wwwroot\\newrelic\\extensions Copy .NET Core agent: D:\\home\\site\\wwwroot\\newrelic_core\\extensions Copy Copy this template into the file you created. This template defines two separate class and methods as transactions but more can be added: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Name\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName\"> <exactMethodMatcher methodName=\"MethodName\" /> </match> </tracerFactory> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Name2\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName2\"> <exactMethodMatcher methodName=\"MethodName2\" /> </match> </tracerFactory> </instrumentation> </extension> Copy In the file you created, customize the attribute values Name, AssemblyName, NameSpace.ClassName, and MethodName. Customize these values for both the trigger method and for any methods called by the trigger method. Tip These values are case sensitive. Name: Defines the transaction name. The metricName attribute is optional. If omitted, the transaction name will be NameSpace.ClassName/MethodName. The transaction category will be \"Custom\". The resulting full metric name will be \"OtherTransaction/Custom/Name . If you wish to change the transaction category from \"Custom\", use the SetTransactionName api call. The New Relic UI groups transactions under categories in the transaction type field. AssemblyName: The assembly that contains the trigger method. NameSpace.ClassName: The fully-qualified class name that contains the trigger method. MethodName: The exact name of the trigger method. Adding additional methods must include the \"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" attribute to be defined as a transaction. Tags without this attribute will add detail to existing transactions only. Optional: To check if the XML file is formatted correctly, you can check it against the XSD (located at C:\\ProgramData\\New Relic\\.NET Agent\\Extensions\\extension.xsd) using any XSD validator. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. View transactions in the UI The custom transaction starts when the method specified by methodName is invoked in the assembly specified by assemblyName. The transaction ends when the method returns or throws an exception. You can view these metrics in the Transactions page and in transaction traces. To view the transaction: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > Type > (select a type). The type is defined by Category/Name. one.newrelic.com > APM > (select an app) > Monitoring > Transactions > Type > (selected type): Use the Type menu to view your custom transactions. Example: Instrument three methods This example presents a simple implementation of creating transactions. Example custom instrumentation file This custom instrumentation file defines the three methods to instrument. Only two are defined as transactions. <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Bars\"> <match assemblyName=\"Foo\" className=\"Foo.Bar\"> <exactMethodMatcher methodName=\"Bar1\" /> <exactMethodMatcher methodName=\"Bar2\" /> </match> </tracerFactory> <!-- Instrument 0 or more methods called by the trigger method. These methods appear in the transaction breakdown table and in transaction traces. --> <tracerFactory> <match assemblyName=\"Foo\" className=\"Foo.Bar\"> <exactMethodMatcher methodName=\"Bar3\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Example methods to be instrumented This code contains the three methods, with comments explaining when each one will be instrumented by the agent: var bar = new Bar(); bar.Bar1(); // Creates a transaction named Bars in the Custom category. bar.Bar2(); // Creates a transaction named Bars in the Custom category. bar.Bar3(); // Won't create a new transaction. See `If Bar3 is called directly`, below. namespace Foo { public class Bar { // The agent creates a transaction that includes an external service request in its transaction traces. public void Bar1() { new WebClient().DownloadString(\"http://www.google.com/\"); } // Creates a transaction containing one segment. public void Bar2() { // The Bar3 segment will contain your SQL query inside of it and possibly an execution plan. Bar3(); } // If Bar3 is called directly, the agent will not create a transaction. // However, if Bar3 is called from Bar1 or Bar2, Bar3 will appear as a segment containing its SQL query. private void Bar3() { using (var connection = new SqlConnection(ConnectionStrings[\"MsSqlConnection\"].ConnectionString)) { connection.Open(); using (var command = new SqlCommand(\"SELECT * FROM table\", connection)) using (var reader = command.ExecuteReader()) { reader.Read(); } } } } } Copy Example: Instrument a console app This simple console app demonstrates creating transactions. After running the application a few times, you see the transactions you created in the Transactions page (at one.newrelic.com > APM > (select an app) > Transactions > Type). The Dummy segment will be visible in the transactions breakdown table and in any transaction traces. Example custom instrumentation file This custom instrumentation file defines two methods to instrument: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- Define the method which triggers the creation of a transaction. --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"CustomTransaction\"> <match assemblyName=\"ConsoleApplication1\" className=\"ConsoleApplication1.CustomTransaction\"> <exactMethodMatcher methodName=\"StartTransaction\" /> </match> </tracerFactory> <!-- Instrument 0 or more methods called by the trigger method. These methods appear in the transaction breakdown table and in transaction traces. --> <tracerFactory> <match assemblyName=\"ConsoleApplication1\" className=\"ConsoleApplication1.CustomTransaction\"> <exactMethodMatcher methodName=\"Dummy\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Example app This code contains the two methods specified by the custom instrumentation file: using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace ConsoleApplication1 { class Program { static void Main(string[] args) { Console.WriteLine(\"Custom Transactions\"); var t = new CustomTransaction(); while (true) t.StartTransaction(); } } class CustomTransaction { public void StartTransaction() { Console.WriteLine(\"StartTransaction\"); Dummy(); } void Dummy() { System.Threading.Thread.Sleep(5000); } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.74273,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create transactions via XML (.<em>NET</em>)",
        "sections": "For the .<em>NET</em> Framework or Core <em>agent</em> on Windows",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " have a non-IIS application, XML <em>instrumentation</em> requires enabling the <em>Instrument</em> all option during the .<em>NET</em> <em>agent</em> installation. Create transactions using XML <em>Custom</em> transactions (transactions not instrumented automatically) are defined in a <em>custom</em> <em>instrumentation</em> XML file. You define a method"
      },
      "id": "6043d1cc28ccbc6f972dc89b"
    }
  ],
  "/docs/agents/net-agent/custom-instrumentation/introduction-net-custom-instrumentation": [
    {
      "sections": [
        "Custom instrumentation via attributes (.NET)",
        "Requirements and recommendations",
        "Transactions called within transactions",
        "Example: Calling Transaction in an already-started transaction",
        "Create a new non-web transaction",
        "Create a new web transaction",
        "Add detail to existing transactions with Trace",
        "Properties for [Transaction]",
        "Web",
        "Read forum posts about instrumentation",
        "Use other API functions"
      ],
      "title": "Custom instrumentation via attributes (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "68ae52e48b04bfe2279bcd038778cc5eebf53d1d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/custom-instrumentation/custom-instrumentation-attributes-net/",
      "published_at": "2021-06-08T20:32:16Z",
      "updated_at": "2021-05-15T18:25:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent provides several options for custom instrumentation. Custom instrumentation allows you to instrument parts of your app that are not instrumented automatically. This document describes how to instrument your app by decorating the methods in your app code with attributes. Use the Transaction attribute to create a custom transaction. You can also mark the custom transaction as a web transaction with the attribute's Web property. Use the Trace attribute to add custom instrumentation to methods that are invoked within a preexisting transaction. Requirements and recommendations Requirements include: .NET agent version 6.16.178.0 or higher. You must be willing to modify your source code. If you cannot or do not want to modify your source code, use custom instrumentation via XML. Your project must have a reference to NewRelic.Api.Agent.dll (for example, installing the package and placing using NewRelic.Api.Agent; in your code). This package is in the NuGet gallery. The Transaction and Trace attributes must be applied to concrete implementations of methods. They cannot be applied on interfaces or super class method definitions. Transactions called within transactions Methods decorated with the [Transaction] attribute will only create a new transaction when one does not already exist. When a method decorated with [Transaction] is called from within a previously started transaction, it will be treated as the [Trace] attribute instead, and will provide more information about the existing transaction. Example: Calling Transaction in an already-started transaction During the execution of this console application, OuterMethod will be called first and create a new transaction. The InnerMethod is called from within the transaction started by OuterMethod, so it will not create a new transaction. Instead, information about the execution of InnerMethod will be tracked as if the [Trace] attribute had been applied. static void Main(string[] args) { OuterMethod(); } [Transaction] public void OuterMethod() { InnerMethod(); } [Transaction] public void InnerMethod() { } Copy Create a new non-web transaction To start a non-web transaction (also known as a background request) with the Transaction attribute: [Transaction] public void Run() { // your background task } Copy For details about why to use either web or non-web, see Classify as web or non-web. Create a new web transaction To tell the agent to mark a non-web task as a web browser transaction, use either of these options: Set the Web property of the Transaction attribute to true. Set the transaction's URI with SetTransactionUri(). [Transaction(Web = true)] public void Run() { var uri = new Uri(\"http://www.mydomain.com/path\"); NewRelic.Api.Agent.NewRelic.SetTransactionUri(uri); // your web task } Copy When used inside a previously started transaction, this will be treated as a [Trace] attribute. For details about why to use either web or non-web, see Classify as web or non-web. Add detail to existing transactions with Trace If your transaction traces show large blocks of un-instrumented time and you want to include additional methods within the trace, you can use the Trace attribute: [Trace] protected void MethodWithinTransaction() { // your app code } Copy Properties for [ Transaction] The Transaction attribute supports the following properties: Web Type: Boolean Default: false If true, the agent starts a web transaction when it reaches this Transaction attribute. If a transaction is in progress, then that transaction will continue. If false (default), the agent starts a non-web transaction when it reaches this Transaction attribute. For example: [Transaction(Web = true)] Copy Read forum posts about instrumentation For more specific recommendations, check out these posts in our Explorers Hub community: Troubleshoot attribute-based custom instrumentation issues Build custom instrumentation tracer factories from .NET agent log files Use other API functions For more about the .NET agent API and its functionality, see New Relic's .NET agent API guide. For custom instrumentation without modifying your source code, see Create transactions via XML and Add detail to transactions via XML.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.2073,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>instrumentation</em> via attributes (.<em>NET</em>)",
        "sections": "<em>Custom</em> <em>instrumentation</em> via attributes (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> provides several options for <em>custom</em> <em>instrumentation</em>. <em>Custom</em> <em>instrumentation</em> allows you to <em>instrument</em> parts of your app that are not instrumented automatically. This document describes how to <em>instrument</em> your app by decorating the methods in your app code with attributes. Use"
      },
      "id": "6043cd9528ccbcfe1e2c60aa"
    },
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.00316,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " application config file In addition, WebJobs may need <em>custom</em> <em>instrumentation</em> for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic&#x27;s .<em>NET</em> <em>agent</em> and Microsoft Application Insights rely on the CLR Profiler"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "Add detail to transactions via XML (.NET)",
        "Add detail with custom instrumentation",
        "Important",
        "Tip",
        "Ignore a transaction",
        "Track async work in a separate transaction",
        "Example method definitions",
        "Example method invocations",
        "Example MyInstrumentation.xml",
        "Example custom instrumentation file",
        "Example methods to be instrumented",
        "Name metrics",
        "Name transactions",
        "XSD validation",
        "Troubleshooting"
      ],
      "title": "Add detail to transactions via XML (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "0182a8eb2bf7b87e62ac2f86963af72b568e5c18",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/custom-instrumentation/add-detail-transactions-xml-net/",
      "published_at": "2021-06-08T20:31:11Z",
      "updated_at": "2021-03-11T08:11:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web browser transactions and non-web transactions (background tasks). Normally the .NET agent produces complete information automatically, without any need for you to modify your application code. However, if New Relic does not support your framework, you may need to add custom instrumentation. New Relic uses method tracers to implement custom instrumentation. A method tracer is a software probe that you can put on a method of any class. The .NET agent loads the instrumentation directives that define which methods should be traced from all XML files in the extensions directory. This document describes instrumenting work when the agent is already collecting transactions, but you want to add more detail to those transactions. To instrument work when the agent isn't creating transactions automatically, see Create transactions via XML. You can also add detail and create transactions by decorating your code with attributes. Add detail with custom instrumentation Extension files define a number of tracer factories in an instrumentation element. Each tracer factory contains match elements that define the assembly, fully qualified class name, and method name to match. To define a new custom instrumentation XML file: Create a new .xml file in the extensions directory used by the .NET agent to read every XML file and define its instrumentation set. For the .NET Framework agent, use the following location: C:\\ ProgramData \\New Relic\\.NET Agent\\Extensions Copy Important Do not put the .xml file in the C:\\Program Files\\New Relic\\.NET agent\\Extensions directory. The file must be in the ProgramData file location for custom instrumentation to work. Do not modify the distributed xml files. These files are overwritten whenever the agent is upgraded. Copy this template into the file you created use the sample as an example. This instruments two methods but you can add methods to your instrumentation file. Tip The values AssemblyName, NameSpace.ClassName, and MethodName are case sensitive. <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- These methods appear in the transactions breakdown table and in transaction traces --> <tracerFactory metricName=\"Category/Name\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName\"> <exactMethodMatcher methodName=\"MethodName\" /> </match> </tracerFactory> <tracerFactory metricName=\"Category/Name2\"> <match assemblyName=\"AssemblyName\" className=\"NameSpace.ClassName2\"> <exactMethodMatcher methodName=\"MethodName2\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Validate the .xml instrumentation file against extension.xsd. Non-IIS apps (such as a console app or background process): You must also create transactions via XML to contain the methods you instrument. Custom methods instrumented outside of a transaction will not be reported to New Relic. Important If your .NET agent version is 7.0 or higher, this is the end of the procedure. If your .NET agent version is lower than 7.0, continue to the next steps. If your app is IIS-hosted, restart IIS. For non-IIS applications, restart your application's host process or the application itself. Ignore a transaction You can stop a transaction from being reported by using a custom instrumentation file. Whenever an ignored method is called, the .NET agent ignores the entire parent transaction. This is the same as calling IgnoreTransaction(). To ignore a transaction: Add custom instrumentation. Add a tracerFactory whose name is NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory: <tracerFactory name=\" NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory \"> <match assemblyName=\"System.Web.Extensions\" className=\"System.Web.Handlers.ScriptResourceHandler\"> <exactMethodMatcher methodName=\"Throw404\" /> </match> </tracerFactory> Copy Track async work in a separate transaction In some cases, asynchronous work can be tracked as a separate transaction by applying the AsyncForceNewTransactionWrapper instrumentation: <tracerFactory name=\" AsyncForceNewTransactionWrapper \"> <match assemblyName=\"AssemblyName\" className=\"Namespace.ClassName\"> <exactMethodMatcher methodName=\"MethodName\" /> </match> </tracerFactory> Copy Async usage considerations Comments Instrumented method The instrumented method must be invoked using Task.Run, Task.Factory.StartNew, or new Thread(). It cannot be invoked using the await keyword. Return type The instrumented method is not required to be async. However, if it is async, it must have a return type of Task or Task<T>. It cannot have a void return type. Attribute instrumentation The instrumented method cannot have attribute instrumentation applied to it. It cannot be decorated with the [Transaction] or [Trace] attributes. Example method definitions The following methods can be instrumented using the AsyncForceNewTransactionWrapper custom instrumentation: private void SyncMethod() { } private async Task AsyncMethod_Task() { } private async Task<string> AsyncMethod_TypedTask() { return \"ok\"; } Copy The following methods cannot be instrumented using the AsyncForceNewTransactionWrapper custom instrumentation: private async void AsyncMethod_Void() { } [Transaction] private void TransactionAttributedMethod() { } [Trace] private void TracedAttributedMethod() { } Copy Example method invocations The following method calls can be used with AsyncForceNewTransactionWrapper instrumentation: Task.Run(SyncMethod); Task.Factory.StartNew(AsyncMethod_Task); var newThread = new Thread(new ThreadStart(SyncMethod)); newThread.Start(); Copy The following method calls cannot be used with AsyncForceNewTransactionWrapper instrumentation: SyncMethod(); //This is not an asynchronous call await AsyncMethod_Task(); //Not started with Task.Run, Task.Factor.StartNew, or new Thread() AsyncMethod_Void(); //Async Void is not supported Copy Example MyInstrumentation.xml This example instruments two methods and ignores another method: Instrument: CustomInstrumentDemo.Controllers.FirstController.FirstExample() Instrument: CustomInstrumentDemo.Controllers.SecondController.SecondExample() Ignore: CustomInstrumentDemo.Controllers.SecondController.ThirdExample() Instrument: CustomInstrumentDemo.Controllers.SecondController.FourthExample(int id, string name) To implement this custom instrumentation scheme, use the following example file and instrumented methods: Example custom instrumentation file The following is an example custom instrumentation file named MyInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <!-- instrument CustomInstrumentDemo.Controllers.FirstController.FirstExample and creates metric named Custom/Foo1 --> <tracerFactory metricName=\"Custom/Foo1\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.FirstController\"> <exactMethodMatcher methodName=\"FirstExample\" /> </match> </tracerFactory> <!-- instrument CustomInstrumentDemo.Controllers.SecondController.SecondExample --> <tracerFactory> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"SecondExample\" /> </match> </tracerFactory> <!-- ignore CustomInstrumentDemo.Controllers.SecondController.ThirdExample --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.IgnoreTransactionTracerFactory\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"ThirdExample\" /> </match> </tracerFactory> <!-- instrument CustomInstrumentDemo.Controllers.SecondController.FourthExample and creates metric named Custom/{value}, where {value} is the value of the first string parameter of the instrumented method (in this case, the first string parameter is \"name\"). --> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.CustomSegmentTracerFactory\"> <match assemblyName=\"CustomInstrumentDemo\" className=\"CustomInstrumentDemo.Controllers.SecondController\"> <exactMethodMatcher methodName=\"FourthExample\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Example methods to be instrumented This code contains the three methods specified by the example custom instrumentation file: using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.Mvc; using System.Threading; namespace CustomInstrumentDemo.Controllers { public class FirstController : Controller { public ActionResult Foo1() { ViewBag.Message = \"Your Sample Page\"; FirstExample(); return View(); } public void FirstExample() { int firstVar = 1; for (int i = 0; i <= 500; i++) { firstVar *= 5; Thread.Sleep(50); } } } public class SecondController : Controller { public ActionResult Foo2() { ViewBag.Message = \"This view will include detailed information on the SecondExample method\"; SecondExample(); return view; } public ActionResult Foo3() { ViewBag.Message = \"This view will be ignored because of the inclusion of the ThirdExample method\"; ThirdExample(); } public void SecondExample() { int secondVar = 2; using (var connection = new SqlConnection(ConnectionStrings[\"MsSqlConnection\"].ConnectionString)) { connection.Open(); using (var command = new SqlCommand(\"SELECT * FROM table\", connection)) using (var reader = command.ExecuteReader()) { reader.Read(); } } } public void ThirdExample() { try { var ImNotABool = \"43\"; bool.Parse(ImNotABool); } catch (Exception ex) { NewRelic.Api.Agent.NewRelic.NoticeError(ex); } } public void FourthExample(int id, string name) { Console.WriteLine(\"The ID passed in was \" + id + \" and the name passed in was \" + name); } } } Copy Name metrics Metrics created from tracers will be named using the class name and method name of the matched method. You can override this name with the metricName attribute. Begin metricName with Custom/ (for example, metricName=\"Custom/OrderSubmissions\"). <!-- instruments MyCompany.Order.Submit() and creates a metric named Custom/OrderSubmissions --> <tracerFactory metricName=\"Custom/OrderSubmissions\"> <match assemblyName=\"MyCompany\" className=\"MyCompany.Order\"> <exactMethodMatcher methodName=\"Submit\" /> </match </tracerFactory> Copy Name transactions The agent names transactions using the tracer in the transaction with the highest naming priority. Web transactions may be named using the HTTP handler, ASP name, MVC controller name, or web service name, depending on the tracers invoked in the transaction's execution. Background transactions with no tracer that explicitly names the transaction are rolled up into a single transaction name. Use the transactionNamingPriority attribute to tell the agent to give a tracer transaction naming priority. Valid values are 1 to 7, where 7 takes precedence over 1 to 6. Also, the metricName attribute must begin with Custom/ (for example, metricName=\"Custom/instance\"). <!-- instructs the agent to create a metric for MyControllerBase.Execute and to name the transaction using this tracer's metric name --> <tracerFactory metricName=\"Custom/instance\" transactionNamingPriority=\"7\"> <match assemblyName=\"MyCompany\" className=\"MyCompany.MyControllerBase\"> <exactMethodMatcher methodName=\"Execute\" /> </match> </tracerFactory> Copy XSD validation The XML instrumentation file can be checked against the XSD file (located at C:\\ProgramData\\New Relic\\.NET Agent\\Extensions\\extension.xsd) with any XSD validator. Troubleshooting The .NET agent will write a log message to NewRelic.Profiler.####.log (where #### is the PID of the instrumented process) as it rewrites methods. This helps to verify that custom instrumentation is being read and that the proper methods are being instrumented. Tip Avoid using the name attribute of the tracerFactory element in custom instrumentation. For more information, review the extension.xsd schema file in the agent directory.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.74274,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add detail to transactions via XML (.<em>NET</em>)",
        "sections": "Add detail with <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", you may need to add <em>custom</em> <em>instrumentation</em>. New Relic uses method tracers to implement <em>custom</em> <em>instrumentation</em>. A method tracer is a software probe that you can put on a method of any class. The .<em>NET</em> <em>agent</em> loads the <em>instrumentation</em> directives that define which methods should be traced from all XML"
      },
      "id": "6043f7d5196a6707e3960f33"
    }
  ],
  "/docs/agents/net-agent/getting-started/apm-agent-security-net": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.51437,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ". Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the <em>agent</em> on a Linux App Service Resource, installing via nuget is the best option: Install using Nu<em>Get</em> (.<em>NET</em> Framework"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Framework",
        "Requirements",
        ".NET Framework version",
        "App/web servers",
        "CLRs",
        "Operating system",
        "Use of other monitoring software",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Code Access Security",
        "Network requirements",
        "Application lifespan",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "Messaging",
        "CMS",
        "External call libraries",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Framework",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "9fada40fe709392d7080cc1b5bc873039501d455",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-framework/",
      "published_at": "2021-06-08T20:34:38Z",
      "updated_at": "2021-04-21T18:18:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our .NET agent supports both .NET Framework and .NET Core. Here we describe the compatibility and support for .NET Framework applications. For .NET Core, see Compatibility and requirements for .NET Core. The agent includes built-in instrumentation for some of the most popular parts of the .NET Framework ecosystem, including frameworks, databases, and message queuing systems. After you download and install the agent, it runs within the monitored process. The agent does not create a separate process or service. For frameworks and libraries that are not automatically instrumented, you can extend the agent with .NET custom instrumentation. Requirements Before you install New Relic's .NET agent, make sure your system meets these requirements: .NET Framework version .NET Framework 4.5 or higher .NET Framework 4.5 or higher requires the New Relic .NET agent version 7.0 or higher. .NET Framework 4.0 or lower To instrument applications running on .NET Framework version 4.0 and lower, you must run a version of the New Relic .NET agent earlier than 7.0. For more information and download procedures, see Technical support for .NET frameworks 4.0 or earlier. Here are additional details about .NET Framework versions 4.0 and lower: .NET Framework version Notes .NET Framework 2.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.5 Fully supported by .NET agent versions below 7.0. .NET Framework 4.0 Fully supported by .NET agent versions below 7.0. If you use .NET Framework 1.1 for any app on your target system, you must disable instrumentation of that app with applicationPool set to instrument=\"false\". The .NET agent can cause crashes in .NET 1.1 apps. App/web servers You must use one of these app/web servers: IIS Self-hosted OWIN Self-hosted WCF Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 The agent automatically creates transactions for apps hosted in IIS. If you self-host with WCF and OWIN version 3 or higher, the agent also automatically creates transactions. For other self-hosted services, you will need to create transactions via custom instrumentation. CLRs The agent requires CLR version 4.0. Legacy applications running on CLR 2.0 can be instrumented with agent versions earlier than 7.0. Operating system The agent requires one of these operating systems: Windows Server 2008 Windows Server 2008 R2 Windows Server 2012 Windows Server 2012 R2 Windows Server 2016 Windows Server 2019 Windows 10 Windows Azure (OS Family 1, 2, and 3) Windows containers running on Windows 2016 (NanoServer based images are not supported) Use of other monitoring software The .NET Common Language Runtime (CLR) only allows one profiler to access the profiling API of a process at any given time. Running our .NET agent alongside other monitoring software will result in a profiler conflict. For more information, see Errors while using other APM software. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both a 32-bit and 64-bit version. On 64-bit systems, the 64-bit agent can instrument both 32-bit and 64-bit applications. Permissions Installation requires elevated privileges (Administrator). For example, you can: Be logged in as an administrator user. Be a member of the Administrators group. On newer operating systems, provide elevation credentials when prompted. The monitored process must have read/write access to the directory in which the agent is installed. The agent runs as a part of the monitored process and relies on those permissions to function. Recommendation: Restrict permissions for the newrelic.config file and give read/write access only to the owner of the monitored process. Review permissions for the logs created by the agent to minimize the number of users with access and their privileges. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Code Access Security The use of Code Access Security is compatible with the .NET agent only when Full Trust is provided. The agent is not compatible with more restrictive trust levels. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Application lifespan The .NET agent uploads data at the end of each harvest cycle (once per minute). If your .NET app doesn't run that long, you can set the service element's sendDataOnExit attribute to true in the newrelic.config file. Automatic instrumentation If your application is hosted in ASP.NET or another fully supported framework, the .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. The .NET agent does not directly monitor datastore processes. Also, by default the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collection of the SQL query parameters can be enabled in the agent configuration. App frameworks The agent automatically instruments some application frameworks; we refer to these frameworks as fully supported. Compatibility status .NET app frameworks Fully supported These frameworks are fully supported: ASP.NET MVC 2 ASP.NET MVC 3 ASP.NET MVC 4 ASP.NET MVC 5 ASP.NET Web API v2 ASP.NET Core MVC 2.0 ASP.NET Core 2.1 ASP.NET Core 2.2 ASP.NET Web Forms Castle MonoRail v2 (not the same as Mono) OWIN-hosted web API applications on .NET framework using: Microsoft.Owin.Host.HttpListener v2.x Microsoft.Owin.Host.HttpListener v3.x Microsoft.Owin.Host.HttpListener v4.x SOAP-based web services WCF Hosting Models IIS Hosted (with and without ASP Compatibility) Self Hosted Binding Types (both client and service) WCF Instrumentation has been tested for the following common binding types. Varying levels of support are available for distributed tracing (DT) and cross application tracing (CAT): Binding Distributed Tracing (DT) Support Cross Application Tracing (CAT) Support BasicHTTP supported supported WebHTTP supported supported WSHTTP supported supported NetTCP supported supported NetNamedPipe not supported * not supported * NetMSMQ not supported * not supported * * Distributed tracing may be manually implemented using these Distributed Tracing API methods. Invocation Methods (both client and service) Synchronous Asynchronous Processing Model (APM) Begin/End Task Asynchronous Processing (TAP) Event-based Asynchronous Processing (EAP) Client support only. Not fully supported These frameworks are not fully supported: ASP.NET Web API v1: See the troubleshooting information about using ASP.NET Web API v1 with New Relic's .NET agent 5.0 or higher for apps targeting .NET Framework 4.0. (This does not affect .NET Framework 4.5 or higher.) Mono: New Relic does not support Mono, an open-source .NET framework that runs on Linux. This is because there is no Profiler API to inject into the .NET agent as a profiler into Mono-based .NET applications. The Profiler API is a Component Object Model (COM)-based interface and is not supported on Linux. Not supported Classic ASP is not supported, because the agent can only instrument .NET Framework-based apps. Sharepoint is not supported. Datastores Collecting instance details for supported datastores requires .NET agent version 6.5.29.0 or higher and is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. In order to automatically instrument the performance of .NET Framework application calls to these datastores, make sure you have the .NET agent version 8.14 or higher: Datastore Instance details Other notes Couchbase SDK version 2.x.x (2.4.0 or higher is not supported). With Couchbase, the following are not instrumented by default in favor of their multi-document counterparts: Get(string key) GetDocument(string key) Remove(string key) Remove(string key, ulong cas) Upsert<T>(string key, T value) IBM DB2 Microsoft SQL Server MongoDB We support both the modern and legacy MongoDB drivers. Legacy - mongocsharpdriver Driver versions 1.10.0 or earlier: Instance details are not available in these driver versions. Modern - MongoDB.Driver Driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x Driver version 2.7.x: The .NET agent will support pre-existing API methods, but not new methods introduced in 2.7.x. MySQL Use MySql.Data version 6.10.4. or the MySQL Connector Oracle PostgreSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. ServiceStack.Redis StackExchange.Redis Messaging The agent automatically instruments these message systems: MSMQ: Puts and takes on messages NServiceBus 5.0 (6.0 or higher not supported): Puts and takes on messages and cross application tracing RabbitMQ 3.5 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. CMS The agent automatically instruments the EPiServer content management system. External call libraries The agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestSharp The agent instruments these RestSharp methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync Execute ExecuteAsGet ExecuteAsPost DownloadData HttpWebRequest The agent instruments these HttpWebRequest methods: GetResponse Connect the agent to other New Relic products In addition to APM, the agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring For ASP.NET applications, the .NET agent automatically injects the Browser JavaScript agent when you enable auto-instrumentation. After enabling Browser injection, you can view Browser data in the APM Summary page and quickly switch between the APM and Browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the .NET agent. Automatic Browser injection is not supported for ASP.NET core applications. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.215515,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ". Sharepoint is not supported. Datastores Collecting instance details for supported datastores requires .<em>NET</em> <em>agent</em> version 6.5.29.0 or higher and is enabled by default. To request instance-level information from datastores not currently listed, <em>get</em> support at support.newrelic.com. In order to automatically"
      },
      "id": "603ea02e196a671b92a83ddc"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Tip",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "91ad78eaee13a6c99f82fb4cc4b5f3e4ed0524a1",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-06-08T20:33:27Z",
      "updated_at": "2021-04-12T06:26:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with Browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the Browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the Browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.73486,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " creates a customized CLI command for your environment that downloads and installs the .<em>NET</em> <em>agent</em> for Windows IIS applications. Ready to <em>get</em> <em>started</em>? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install"
      },
      "id": "6043d1f9196a6758e7960f44"
    }
  ],
  "/docs/agents/net-agent/getting-started/introduction-new-relic-net": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.51437,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ". Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the <em>agent</em> on a Linux App Service Resource, installing via nuget is the best option: Install using Nu<em>Get</em> (.<em>NET</em> Framework"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Framework",
        "Requirements",
        ".NET Framework version",
        "App/web servers",
        "CLRs",
        "Operating system",
        "Use of other monitoring software",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Code Access Security",
        "Network requirements",
        "Application lifespan",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "Messaging",
        "CMS",
        "External call libraries",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Framework",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "9fada40fe709392d7080cc1b5bc873039501d455",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-framework/",
      "published_at": "2021-06-08T20:34:38Z",
      "updated_at": "2021-04-21T18:18:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our .NET agent supports both .NET Framework and .NET Core. Here we describe the compatibility and support for .NET Framework applications. For .NET Core, see Compatibility and requirements for .NET Core. The agent includes built-in instrumentation for some of the most popular parts of the .NET Framework ecosystem, including frameworks, databases, and message queuing systems. After you download and install the agent, it runs within the monitored process. The agent does not create a separate process or service. For frameworks and libraries that are not automatically instrumented, you can extend the agent with .NET custom instrumentation. Requirements Before you install New Relic's .NET agent, make sure your system meets these requirements: .NET Framework version .NET Framework 4.5 or higher .NET Framework 4.5 or higher requires the New Relic .NET agent version 7.0 or higher. .NET Framework 4.0 or lower To instrument applications running on .NET Framework version 4.0 and lower, you must run a version of the New Relic .NET agent earlier than 7.0. For more information and download procedures, see Technical support for .NET frameworks 4.0 or earlier. Here are additional details about .NET Framework versions 4.0 and lower: .NET Framework version Notes .NET Framework 2.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.5 Fully supported by .NET agent versions below 7.0. .NET Framework 4.0 Fully supported by .NET agent versions below 7.0. If you use .NET Framework 1.1 for any app on your target system, you must disable instrumentation of that app with applicationPool set to instrument=\"false\". The .NET agent can cause crashes in .NET 1.1 apps. App/web servers You must use one of these app/web servers: IIS Self-hosted OWIN Self-hosted WCF Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 The agent automatically creates transactions for apps hosted in IIS. If you self-host with WCF and OWIN version 3 or higher, the agent also automatically creates transactions. For other self-hosted services, you will need to create transactions via custom instrumentation. CLRs The agent requires CLR version 4.0. Legacy applications running on CLR 2.0 can be instrumented with agent versions earlier than 7.0. Operating system The agent requires one of these operating systems: Windows Server 2008 Windows Server 2008 R2 Windows Server 2012 Windows Server 2012 R2 Windows Server 2016 Windows Server 2019 Windows 10 Windows Azure (OS Family 1, 2, and 3) Windows containers running on Windows 2016 (NanoServer based images are not supported) Use of other monitoring software The .NET Common Language Runtime (CLR) only allows one profiler to access the profiling API of a process at any given time. Running our .NET agent alongside other monitoring software will result in a profiler conflict. For more information, see Errors while using other APM software. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both a 32-bit and 64-bit version. On 64-bit systems, the 64-bit agent can instrument both 32-bit and 64-bit applications. Permissions Installation requires elevated privileges (Administrator). For example, you can: Be logged in as an administrator user. Be a member of the Administrators group. On newer operating systems, provide elevation credentials when prompted. The monitored process must have read/write access to the directory in which the agent is installed. The agent runs as a part of the monitored process and relies on those permissions to function. Recommendation: Restrict permissions for the newrelic.config file and give read/write access only to the owner of the monitored process. Review permissions for the logs created by the agent to minimize the number of users with access and their privileges. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Code Access Security The use of Code Access Security is compatible with the .NET agent only when Full Trust is provided. The agent is not compatible with more restrictive trust levels. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Application lifespan The .NET agent uploads data at the end of each harvest cycle (once per minute). If your .NET app doesn't run that long, you can set the service element's sendDataOnExit attribute to true in the newrelic.config file. Automatic instrumentation If your application is hosted in ASP.NET or another fully supported framework, the .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. The .NET agent does not directly monitor datastore processes. Also, by default the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collection of the SQL query parameters can be enabled in the agent configuration. App frameworks The agent automatically instruments some application frameworks; we refer to these frameworks as fully supported. Compatibility status .NET app frameworks Fully supported These frameworks are fully supported: ASP.NET MVC 2 ASP.NET MVC 3 ASP.NET MVC 4 ASP.NET MVC 5 ASP.NET Web API v2 ASP.NET Core MVC 2.0 ASP.NET Core 2.1 ASP.NET Core 2.2 ASP.NET Web Forms Castle MonoRail v2 (not the same as Mono) OWIN-hosted web API applications on .NET framework using: Microsoft.Owin.Host.HttpListener v2.x Microsoft.Owin.Host.HttpListener v3.x Microsoft.Owin.Host.HttpListener v4.x SOAP-based web services WCF Hosting Models IIS Hosted (with and without ASP Compatibility) Self Hosted Binding Types (both client and service) WCF Instrumentation has been tested for the following common binding types. Varying levels of support are available for distributed tracing (DT) and cross application tracing (CAT): Binding Distributed Tracing (DT) Support Cross Application Tracing (CAT) Support BasicHTTP supported supported WebHTTP supported supported WSHTTP supported supported NetTCP supported supported NetNamedPipe not supported * not supported * NetMSMQ not supported * not supported * * Distributed tracing may be manually implemented using these Distributed Tracing API methods. Invocation Methods (both client and service) Synchronous Asynchronous Processing Model (APM) Begin/End Task Asynchronous Processing (TAP) Event-based Asynchronous Processing (EAP) Client support only. Not fully supported These frameworks are not fully supported: ASP.NET Web API v1: See the troubleshooting information about using ASP.NET Web API v1 with New Relic's .NET agent 5.0 or higher for apps targeting .NET Framework 4.0. (This does not affect .NET Framework 4.5 or higher.) Mono: New Relic does not support Mono, an open-source .NET framework that runs on Linux. This is because there is no Profiler API to inject into the .NET agent as a profiler into Mono-based .NET applications. The Profiler API is a Component Object Model (COM)-based interface and is not supported on Linux. Not supported Classic ASP is not supported, because the agent can only instrument .NET Framework-based apps. Sharepoint is not supported. Datastores Collecting instance details for supported datastores requires .NET agent version 6.5.29.0 or higher and is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. In order to automatically instrument the performance of .NET Framework application calls to these datastores, make sure you have the .NET agent version 8.14 or higher: Datastore Instance details Other notes Couchbase SDK version 2.x.x (2.4.0 or higher is not supported). With Couchbase, the following are not instrumented by default in favor of their multi-document counterparts: Get(string key) GetDocument(string key) Remove(string key) Remove(string key, ulong cas) Upsert<T>(string key, T value) IBM DB2 Microsoft SQL Server MongoDB We support both the modern and legacy MongoDB drivers. Legacy - mongocsharpdriver Driver versions 1.10.0 or earlier: Instance details are not available in these driver versions. Modern - MongoDB.Driver Driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x Driver version 2.7.x: The .NET agent will support pre-existing API methods, but not new methods introduced in 2.7.x. MySQL Use MySql.Data version 6.10.4. or the MySQL Connector Oracle PostgreSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. ServiceStack.Redis StackExchange.Redis Messaging The agent automatically instruments these message systems: MSMQ: Puts and takes on messages NServiceBus 5.0 (6.0 or higher not supported): Puts and takes on messages and cross application tracing RabbitMQ 3.5 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. CMS The agent automatically instruments the EPiServer content management system. External call libraries The agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestSharp The agent instruments these RestSharp methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync Execute ExecuteAsGet ExecuteAsPost DownloadData HttpWebRequest The agent instruments these HttpWebRequest methods: GetResponse Connect the agent to other New Relic products In addition to APM, the agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring For ASP.NET applications, the .NET agent automatically injects the Browser JavaScript agent when you enable auto-instrumentation. After enabling Browser injection, you can view Browser data in the APM Summary page and quickly switch between the APM and Browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the .NET agent. Automatic Browser injection is not supported for ASP.NET core applications. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.215515,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ". Sharepoint is not supported. Datastores Collecting instance details for supported datastores requires .<em>NET</em> <em>agent</em> version 6.5.29.0 or higher and is enabled by default. To request instance-level information from datastores not currently listed, <em>get</em> support at support.newrelic.com. In order to automatically"
      },
      "id": "603ea02e196a671b92a83ddc"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Core",
        "Requirements",
        "Microsoft .NET Core version",
        "Target framework version",
        "Important",
        "App/web servers",
        "Operating system",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Network requirements",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "External call libraries",
        "Messaging",
        "Unavailable features",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Core",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "ce9a62a0c6a2d98442118333f39152c38bf9fdda",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core/",
      "published_at": "2021-06-08T20:33:27Z",
      "updated_at": "2021-03-17T20:20:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent supports both .NET Framework and .NET Core. This document describes compatibility and support for .NET Core applications. See Compatibility and requirements for .NET Framework for .NET Framework applications. New Relic's .NET agent includes built-in instrumentation for some of the most popular parts of the .NET Core ecosystem, including frameworks, databases, and message queuing systems. After installation, the agent runs within the monitored process; there is not a separate process or service created by the agent. For frameworks and libraries that are not automatically instrumented out of the box, you can extend the agent with .NET custom instrumentation. Requirements Before you install the New Relic .NET agent on Windows or Linux, make sure your system meets these requirements: Microsoft .NET Core version The .NET agent supports .NET Core versions 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0. Table of minimum agent versions required per .NET Core version .NET Core Version Minimum Required .NET Agent Version .NET Core 2.0 > = 8.19.353.0 .NET Core 2.1 > = 8.19.353.0 .NET Core 2.2 > = 8.19.353.0 .NET Core 3.0 > = 8.21.34.0 .NET Core 3.1 > = 8.21.34.0 .NET 5.0 > = 8.35.0 The agent is not compatible with .NET Core versions 1.0 or 1.1. For .NET Core 2.1 or higher applications with tiered compilation enabled, the agent will disable tiered compilation. .NET Core 2.1 support requires .NET Core runtime 2.1.3 and .NET Core SDK 2.1.401 or higher due to a bug in the .NET Core profiling API. Target framework version The .NET agent only supports applications targeting .NET Core 2.0, 2.1, 2.2, 3.0, 3.1, and NET 5.0. You can find the target framework in your .csproj file: Supported: <TargetFramework>netcoreapp2.0</TargetFramework> Copy <TargetFramework>netcoreapp2.1</TargetFramework> Copy <TargetFramework>netcoreapp2.2</TargetFramework> Copy <TargetFramework>netcoreapp3.0</TargetFramework> Copy <TargetFramework>netcoreapp3.1</TargetFramework> Copy <TargetFramework>net5.0</TargetFramework> Copy Unsupported: <TargetFramework>net452</TargetFramework> Copy Important If you want to monitor an ASP.NET Core application targeting .NET Framework, ensure your install of the .NET agent has .NET Framework support enabled. App/web servers Ensure you use one of these app/web servers: Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 Kestrel with Nginx reverse proxy Kestrel with Apache reverse proxy Operating system The agent has been verified to work with the following operating systems: Operating system Supported versions Windows (32- and 64-bit Intel compatible architectures) Server 2008 R2 SP1 Server 2012 Server 2012 R2 Server 2016 Server 2019 Windows containers running on Server 2016 (NanoServer based images are not supported) Linux (64-bit Intel compatible only) All x64 Linux distributions supported by the .NET Core 2.0+/.NET 5 runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation for the version of the runtime you are using. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both 32-bit (x86) and 64-bit (x64) versions on Windows as well as 64-bit (x64) on Linux. Permissions Installing and running the .NET agent requires these permissions: Component Necessary permissions Install the agent The process or user that installs the agent must have sufficient permissions to set environment variables and write access to the directory where the agent is installed. Run the agent The monitored process must have read/write access to the directory in which you installed the agent. The agent runs as a part of the monitored process and relies on those permissions to function. For applications using IIS via reverse proxy, the group IIS_IUSRS is often used. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Automatic instrumentation If your application is hosted in ASP.NET Core, the agent automatically creates and instruments transactions. The .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. App frameworks The .NET agent automatically instruments these application frameworks: ASP.NET Core MVC 2.0, 2.1, 2.2, 3.0, 3.1, and 5.0 (includes Web API) Datastores The .NET agent automatically instruments the performance of .NET application calls to these datastores: Datastore Instance details Notes Microsoft SQL Server Use System.Data.SqlClient version 4.3.1 or Microsoft.Data.SqlClient. PostgresSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. MongoDB Use driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x. Driver version 2.7.x: The .NET agent will support pre-existing API methods, but not new methods introduced in 2.7.x. MySQL Use MySql.Data version 6.10.4. or the MySQL Connector StackExchange.Redis The .NET agent does not directly monitor datastore processes. Also, the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collecting instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. External call libraries The .NET agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync Messaging The agent automatically instruments these message systems: RabbitMQ 5.1.0 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. Unavailable features The following features are not available for the .NET agent: Memory usage on Linux due to an ongoing .NET Core issue (try using .NET performance metrics to get this information) Automatic Browser monitoring script injection (API or manual instrumentation is required) The .NET agent does not support trim self-contained deployments and executables, because the compiler can potentially trim assemblies that the agent depends on. Infinite Tracing is not supported on Alpine Linux due to a GRPC compatibility issue. See this agent issue for more information. Connect the agent to other New Relic products In addition to APM, the .NET agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Browser monitoring JavaScript agent will not be injected by the .NET agent for ASP.NET core applications. However, you can inject the Browser agent by using the .NET agent API or the Browser agent's copy/paste method. After enabling Browser injection, you can view Browser data in the APM Summary page and quickly switch between the APM and Browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the .NET agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.7883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " at support.newrelic.com. External call libraries The .<em>NET</em> <em>agent</em> automatically instruments these external call libraries : Libraries Supported methods HttpClient The <em>agent</em> instruments these HttpClient methods: SendAsync <em>Get</em>Async PostAsync PutAsync DeleteAsync <em>Get</em>StringAsync <em>Get</em>StreamAsync <em>Get</em>ByteArrayAsync Messaging"
      },
      "id": "603e8e7e196a675c41a83d9f"
    }
  ],
  "/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.51428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ". Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the <em>agent</em> on a Linux App Service Resource, installing via nuget is the best option: Install using Nu<em>Get</em> (.<em>NET</em> Framework"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Framework",
        "Requirements",
        ".NET Framework version",
        "App/web servers",
        "CLRs",
        "Operating system",
        "Use of other monitoring software",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Code Access Security",
        "Network requirements",
        "Application lifespan",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "Messaging",
        "CMS",
        "External call libraries",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Framework",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "9fada40fe709392d7080cc1b5bc873039501d455",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-framework/",
      "published_at": "2021-06-08T20:34:38Z",
      "updated_at": "2021-04-21T18:18:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our .NET agent supports both .NET Framework and .NET Core. Here we describe the compatibility and support for .NET Framework applications. For .NET Core, see Compatibility and requirements for .NET Core. The agent includes built-in instrumentation for some of the most popular parts of the .NET Framework ecosystem, including frameworks, databases, and message queuing systems. After you download and install the agent, it runs within the monitored process. The agent does not create a separate process or service. For frameworks and libraries that are not automatically instrumented, you can extend the agent with .NET custom instrumentation. Requirements Before you install New Relic's .NET agent, make sure your system meets these requirements: .NET Framework version .NET Framework 4.5 or higher .NET Framework 4.5 or higher requires the New Relic .NET agent version 7.0 or higher. .NET Framework 4.0 or lower To instrument applications running on .NET Framework version 4.0 and lower, you must run a version of the New Relic .NET agent earlier than 7.0. For more information and download procedures, see Technical support for .NET frameworks 4.0 or earlier. Here are additional details about .NET Framework versions 4.0 and lower: .NET Framework version Notes .NET Framework 2.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.5 Fully supported by .NET agent versions below 7.0. .NET Framework 4.0 Fully supported by .NET agent versions below 7.0. If you use .NET Framework 1.1 for any app on your target system, you must disable instrumentation of that app with applicationPool set to instrument=\"false\". The .NET agent can cause crashes in .NET 1.1 apps. App/web servers You must use one of these app/web servers: IIS Self-hosted OWIN Self-hosted WCF Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 The agent automatically creates transactions for apps hosted in IIS. If you self-host with WCF and OWIN version 3 or higher, the agent also automatically creates transactions. For other self-hosted services, you will need to create transactions via custom instrumentation. CLRs The agent requires CLR version 4.0. Legacy applications running on CLR 2.0 can be instrumented with agent versions earlier than 7.0. Operating system The agent requires one of these operating systems: Windows Server 2008 Windows Server 2008 R2 Windows Server 2012 Windows Server 2012 R2 Windows Server 2016 Windows Server 2019 Windows 10 Windows Azure (OS Family 1, 2, and 3) Windows containers running on Windows 2016 (NanoServer based images are not supported) Use of other monitoring software The .NET Common Language Runtime (CLR) only allows one profiler to access the profiling API of a process at any given time. Running our .NET agent alongside other monitoring software will result in a profiler conflict. For more information, see Errors while using other APM software. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both a 32-bit and 64-bit version. On 64-bit systems, the 64-bit agent can instrument both 32-bit and 64-bit applications. Permissions Installation requires elevated privileges (Administrator). For example, you can: Be logged in as an administrator user. Be a member of the Administrators group. On newer operating systems, provide elevation credentials when prompted. The monitored process must have read/write access to the directory in which the agent is installed. The agent runs as a part of the monitored process and relies on those permissions to function. Recommendation: Restrict permissions for the newrelic.config file and give read/write access only to the owner of the monitored process. Review permissions for the logs created by the agent to minimize the number of users with access and their privileges. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Code Access Security The use of Code Access Security is compatible with the .NET agent only when Full Trust is provided. The agent is not compatible with more restrictive trust levels. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Application lifespan The .NET agent uploads data at the end of each harvest cycle (once per minute). If your .NET app doesn't run that long, you can set the service element's sendDataOnExit attribute to true in the newrelic.config file. Automatic instrumentation If your application is hosted in ASP.NET or another fully supported framework, the .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. The .NET agent does not directly monitor datastore processes. Also, by default the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collection of the SQL query parameters can be enabled in the agent configuration. App frameworks The agent automatically instruments some application frameworks; we refer to these frameworks as fully supported. Compatibility status .NET app frameworks Fully supported These frameworks are fully supported: ASP.NET MVC 2 ASP.NET MVC 3 ASP.NET MVC 4 ASP.NET MVC 5 ASP.NET Web API v2 ASP.NET Core MVC 2.0 ASP.NET Core 2.1 ASP.NET Core 2.2 ASP.NET Web Forms Castle MonoRail v2 (not the same as Mono) OWIN-hosted web API applications on .NET framework using: Microsoft.Owin.Host.HttpListener v2.x Microsoft.Owin.Host.HttpListener v3.x Microsoft.Owin.Host.HttpListener v4.x SOAP-based web services WCF Hosting Models IIS Hosted (with and without ASP Compatibility) Self Hosted Binding Types (both client and service) WCF Instrumentation has been tested for the following common binding types. Varying levels of support are available for distributed tracing (DT) and cross application tracing (CAT): Binding Distributed Tracing (DT) Support Cross Application Tracing (CAT) Support BasicHTTP supported supported WebHTTP supported supported WSHTTP supported supported NetTCP supported supported NetNamedPipe not supported * not supported * NetMSMQ not supported * not supported * * Distributed tracing may be manually implemented using these Distributed Tracing API methods. Invocation Methods (both client and service) Synchronous Asynchronous Processing Model (APM) Begin/End Task Asynchronous Processing (TAP) Event-based Asynchronous Processing (EAP) Client support only. Not fully supported These frameworks are not fully supported: ASP.NET Web API v1: See the troubleshooting information about using ASP.NET Web API v1 with New Relic's .NET agent 5.0 or higher for apps targeting .NET Framework 4.0. (This does not affect .NET Framework 4.5 or higher.) Mono: New Relic does not support Mono, an open-source .NET framework that runs on Linux. This is because there is no Profiler API to inject into the .NET agent as a profiler into Mono-based .NET applications. The Profiler API is a Component Object Model (COM)-based interface and is not supported on Linux. Not supported Classic ASP is not supported, because the agent can only instrument .NET Framework-based apps. Sharepoint is not supported. Datastores Collecting instance details for supported datastores requires .NET agent version 6.5.29.0 or higher and is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. In order to automatically instrument the performance of .NET Framework application calls to these datastores, make sure you have the .NET agent version 8.14 or higher: Datastore Instance details Other notes Couchbase SDK version 2.x.x (2.4.0 or higher is not supported). With Couchbase, the following are not instrumented by default in favor of their multi-document counterparts: Get(string key) GetDocument(string key) Remove(string key) Remove(string key, ulong cas) Upsert<T>(string key, T value) IBM DB2 Microsoft SQL Server MongoDB We support both the modern and legacy MongoDB drivers. Legacy - mongocsharpdriver Driver versions 1.10.0 or earlier: Instance details are not available in these driver versions. Modern - MongoDB.Driver Driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x Driver version 2.7.x: The .NET agent will support pre-existing API methods, but not new methods introduced in 2.7.x. MySQL Use MySql.Data version 6.10.4. or the MySQL Connector Oracle PostgreSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. ServiceStack.Redis StackExchange.Redis Messaging The agent automatically instruments these message systems: MSMQ: Puts and takes on messages NServiceBus 5.0 (6.0 or higher not supported): Puts and takes on messages and cross application tracing RabbitMQ 3.5 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. CMS The agent automatically instruments the EPiServer content management system. External call libraries The agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestSharp The agent instruments these RestSharp methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync Execute ExecuteAsGet ExecuteAsPost DownloadData HttpWebRequest The agent instruments these HttpWebRequest methods: GetResponse Connect the agent to other New Relic products In addition to APM, the agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring For ASP.NET applications, the .NET agent automatically injects the Browser JavaScript agent when you enable auto-instrumentation. After enabling Browser injection, you can view Browser data in the APM Summary page and quickly switch between the APM and Browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the .NET agent. Automatic Browser injection is not supported for ASP.NET core applications. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.215515,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ". Sharepoint is not supported. Datastores Collecting instance details for supported datastores requires .<em>NET</em> <em>agent</em> version 6.5.29.0 or higher and is enabled by default. To request instance-level information from datastores not currently listed, <em>get</em> support at support.newrelic.com. In order to automatically"
      },
      "id": "603ea02e196a671b92a83ddc"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Tip",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "91ad78eaee13a6c99f82fb4cc4b5f3e4ed0524a1",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-06-08T20:33:27Z",
      "updated_at": "2021-04-12T06:26:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with Browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the Browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the Browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.73486,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " creates a customized CLI command for your environment that downloads and installs the .<em>NET</em> <em>agent</em> for Windows IIS applications. Ready to <em>get</em> <em>started</em>? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install"
      },
      "id": "6043d1f9196a6758e7960f44"
    }
  ],
  "/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-framework": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.51428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ". Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the <em>agent</em> on a Linux App Service Resource, installing via nuget is the best option: Install using Nu<em>Get</em> (.<em>NET</em> Framework"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Tip",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "91ad78eaee13a6c99f82fb4cc4b5f3e4ed0524a1",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-06-08T20:33:27Z",
      "updated_at": "2021-04-12T06:26:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with Browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the Browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the Browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.73486,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " creates a customized CLI command for your environment that downloads and installs the .<em>NET</em> <em>agent</em> for Windows IIS applications. Ready to <em>get</em> <em>started</em>? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install"
      },
      "id": "6043d1f9196a6758e7960f44"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Core",
        "Requirements",
        "Microsoft .NET Core version",
        "Target framework version",
        "Important",
        "App/web servers",
        "Operating system",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Network requirements",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "External call libraries",
        "Messaging",
        "Unavailable features",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Core",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "ce9a62a0c6a2d98442118333f39152c38bf9fdda",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core/",
      "published_at": "2021-06-08T20:33:27Z",
      "updated_at": "2021-03-17T20:20:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent supports both .NET Framework and .NET Core. This document describes compatibility and support for .NET Core applications. See Compatibility and requirements for .NET Framework for .NET Framework applications. New Relic's .NET agent includes built-in instrumentation for some of the most popular parts of the .NET Core ecosystem, including frameworks, databases, and message queuing systems. After installation, the agent runs within the monitored process; there is not a separate process or service created by the agent. For frameworks and libraries that are not automatically instrumented out of the box, you can extend the agent with .NET custom instrumentation. Requirements Before you install the New Relic .NET agent on Windows or Linux, make sure your system meets these requirements: Microsoft .NET Core version The .NET agent supports .NET Core versions 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0. Table of minimum agent versions required per .NET Core version .NET Core Version Minimum Required .NET Agent Version .NET Core 2.0 > = 8.19.353.0 .NET Core 2.1 > = 8.19.353.0 .NET Core 2.2 > = 8.19.353.0 .NET Core 3.0 > = 8.21.34.0 .NET Core 3.1 > = 8.21.34.0 .NET 5.0 > = 8.35.0 The agent is not compatible with .NET Core versions 1.0 or 1.1. For .NET Core 2.1 or higher applications with tiered compilation enabled, the agent will disable tiered compilation. .NET Core 2.1 support requires .NET Core runtime 2.1.3 and .NET Core SDK 2.1.401 or higher due to a bug in the .NET Core profiling API. Target framework version The .NET agent only supports applications targeting .NET Core 2.0, 2.1, 2.2, 3.0, 3.1, and NET 5.0. You can find the target framework in your .csproj file: Supported: <TargetFramework>netcoreapp2.0</TargetFramework> Copy <TargetFramework>netcoreapp2.1</TargetFramework> Copy <TargetFramework>netcoreapp2.2</TargetFramework> Copy <TargetFramework>netcoreapp3.0</TargetFramework> Copy <TargetFramework>netcoreapp3.1</TargetFramework> Copy <TargetFramework>net5.0</TargetFramework> Copy Unsupported: <TargetFramework>net452</TargetFramework> Copy Important If you want to monitor an ASP.NET Core application targeting .NET Framework, ensure your install of the .NET agent has .NET Framework support enabled. App/web servers Ensure you use one of these app/web servers: Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 Kestrel with Nginx reverse proxy Kestrel with Apache reverse proxy Operating system The agent has been verified to work with the following operating systems: Operating system Supported versions Windows (32- and 64-bit Intel compatible architectures) Server 2008 R2 SP1 Server 2012 Server 2012 R2 Server 2016 Server 2019 Windows containers running on Server 2016 (NanoServer based images are not supported) Linux (64-bit Intel compatible only) All x64 Linux distributions supported by the .NET Core 2.0+/.NET 5 runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation for the version of the runtime you are using. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both 32-bit (x86) and 64-bit (x64) versions on Windows as well as 64-bit (x64) on Linux. Permissions Installing and running the .NET agent requires these permissions: Component Necessary permissions Install the agent The process or user that installs the agent must have sufficient permissions to set environment variables and write access to the directory where the agent is installed. Run the agent The monitored process must have read/write access to the directory in which you installed the agent. The agent runs as a part of the monitored process and relies on those permissions to function. For applications using IIS via reverse proxy, the group IIS_IUSRS is often used. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Automatic instrumentation If your application is hosted in ASP.NET Core, the agent automatically creates and instruments transactions. The .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. App frameworks The .NET agent automatically instruments these application frameworks: ASP.NET Core MVC 2.0, 2.1, 2.2, 3.0, 3.1, and 5.0 (includes Web API) Datastores The .NET agent automatically instruments the performance of .NET application calls to these datastores: Datastore Instance details Notes Microsoft SQL Server Use System.Data.SqlClient version 4.3.1 or Microsoft.Data.SqlClient. PostgresSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. MongoDB Use driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x. Driver version 2.7.x: The .NET agent will support pre-existing API methods, but not new methods introduced in 2.7.x. MySQL Use MySql.Data version 6.10.4. or the MySQL Connector StackExchange.Redis The .NET agent does not directly monitor datastore processes. Also, the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collecting instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. External call libraries The .NET agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync Messaging The agent automatically instruments these message systems: RabbitMQ 5.1.0 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. Unavailable features The following features are not available for the .NET agent: Memory usage on Linux due to an ongoing .NET Core issue (try using .NET performance metrics to get this information) Automatic Browser monitoring script injection (API or manual instrumentation is required) The .NET agent does not support trim self-contained deployments and executables, because the compiler can potentially trim assemblies that the agent depends on. Infinite Tracing is not supported on Alpine Linux due to a GRPC compatibility issue. See this agent issue for more information. Connect the agent to other New Relic products In addition to APM, the .NET agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Browser monitoring JavaScript agent will not be injected by the .NET agent for ASP.NET core applications. However, you can inject the Browser agent by using the .NET agent API or the Browser agent's copy/paste method. After enabling Browser injection, you can view Browser data in the APM Summary page and quickly switch between the APM and Browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the .NET agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.7883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " at support.newrelic.com. External call libraries The .<em>NET</em> <em>agent</em> automatically instruments these external call libraries : Libraries Supported methods HttpClient The <em>agent</em> instruments these HttpClient methods: SendAsync <em>Get</em>Async PostAsync PutAsync DeleteAsync <em>Get</em>StringAsync <em>Get</em>StreamAsync <em>Get</em>ByteArrayAsync Messaging"
      },
      "id": "603e8e7e196a675c41a83d9f"
    }
  ],
  "/docs/agents/net-agent/index": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.5142,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This document explains how to install New Relic&#x27;s .<em>NET</em> <em>agent</em> for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        ".NET agent configuration",
        "Configuration overview",
        "Important",
        "Configuration methods and precedence levels",
        "Required environment variables",
        "Caution",
        ".NET Framework environment variables",
        ".NET Core environment variables",
        "Profiler conflict explanation",
        "Optional environment variables",
        "Setup options, newrelic.config",
        "Configuration element",
        "agentEnabled",
        "maxStackTraceLines",
        "timingPrecision",
        "Service element",
        "licenseKey (required)",
        "sendEnvironmentInfo",
        "syncStartup",
        "sendDataOnExit",
        "sendDataOnExitThreshold",
        "completeTransactionsOnThread",
        "requestTimeout",
        "autoStart",
        "ssl (DEPRECATED)",
        "Obscuring key element",
        "Proxy element",
        "host",
        "port",
        "uriPath",
        "domain",
        "user",
        "password",
        "passwordObfuscated",
        "Log element",
        "level",
        "auditLog",
        "console",
        "directory",
        "fileName",
        "Application element (required)",
        "name",
        "disableSamplers",
        "Data transmission element",
        "putForDataSend",
        "Host name",
        "Set using config file",
        "Set using environment variable",
        "Cloud platform utilization",
        "detectAws",
        "detectAzure",
        "detectGcp",
        "detectPcf",
        "detectDocker",
        "detectKubernetes",
        "Instrumentation options",
        "Instrumentation element",
        "Applications element (instrumentation)",
        "Attributes element",
        "enabled",
        "include",
        "exclude",
        "Feature options",
        "App pools",
        "defaultBehavior",
        "applicationPool",
        "Cross application traces",
        "Error collection",
        "Tip",
        "captureEvents",
        "maxEventSamplesStored",
        "ignoreClasses",
        "ignoreMessages",
        "ignoreErrors (DEPRECATED)",
        "ignoreStatusCodes",
        "expectedClasses",
        "expectedMessages",
        "expectedStatusCodes",
        "attributes",
        "High security mode",
        "Strip exception messages",
        "Transaction events",
        "maximumSamplesStored",
        "Custom events",
        "Custom parameters",
        "Labels (tags)",
        "Browser instrumentation",
        "autoInstrument",
        "requestPathsExcluded",
        "Slow queries",
        "Transaction traces",
        "transactionThreshold",
        "recordSql",
        "explainEnabled",
        "explainThreshold",
        "maxSegments",
        "maxExplainPlans",
        "Datastore tracer",
        "instanceReporting",
        "databaseNameReporting",
        "queryParameters",
        "Distributed tracing",
        "excludeNewrelicHeader",
        "Disable span events via config file",
        "Disable span events via environment variable",
        "Infinite Tracing",
        "trace_observer",
        "Span events",
        "Settings in app.config or web.config",
        "Enable and disable the agent",
        "Application name",
        "License key",
        "Change newrelic.config location",
        "Settings in appsettings.json"
      ],
      "title": ".NET agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Configuration"
      ],
      "external_id": "b89fa7fc399f2729bfee8f5106e777798a73177a",
      "image": "https://docs.newrelic.com/static/cffd7eb2d22c8e338531c38f35208c7c/c1b63/net-agent-config-settings-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/configuration/net-agent-configuration/",
      "published_at": "2021-06-09T07:45:48Z",
      "updated_at": "2021-05-15T16:33:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains the configuration options for the APM .NET agent. Configuration overview APM agent configuration options allow you to control some aspects of how the agent behaves. Some of these config options are part of the basic install process (like setting your license key and app name), but most are more advanced settings, such as: setting a log level, setting up proxy host access, excluding certain attributes, and enabling distributed tracing. The .NET agent gets its configuration from the newrelic.config file, which is generated as part of the install process. By default, only a global newrelic.config file is created, but you can also create app-local newrelic.config files for finer control over a multi-app system. Other ways to set config options include: using environment variables, or setting server-side configuration from the UI. For more on the various config options and what overrides what, see Config settings precedence. Support for both .NET Framework and .NET Core use the same configuration options and have the same APM features, unless otherwise stated. If you make changes to the config file and want to validate that it's in the right format, you can check it against the XSD file (for example, at C:\\ProgramData\\New Relic\\.NET Agent\\newrelic.xsd for Windows) with any XSD validator. Important For IIS: after you change your newrelic.config or app.config file, perform an IISRESET from an administrative command prompt. Log level adjustments do not require a reset. Configuration methods and precedence levels Upon installation, the .NET agent's configuration file (newrelic.config) applies to all monitored applications, but you can configure the agent in other ways. Here's a diagram showing how different configuration options take precedence over one another: This diagram explains the order of precedence for different ways you might configure the .NET agent. Here are details about the configuration methods shown in the diagram, and their precedence levels: .NET configuration Details and precedence web.config or app.config or appsettings.json Configuration settings set in these files take highest precedence. However, if the agent is disabled in the local or global newrelic.config, the NewRelic.AgentEnabled settings in these files will be ignored. Environment variables Second-highest precedence. For more about these, see .NET environment variables. Server-side configuration Third-highest precedence. A limited number of server-side configuration settings are available; the other settings will come from other configuration sources. App-local newrelic.config Fourth-highest precedence. You can create app-local newrelic.config files to configure individual apps on a multi-app system. These local configuration files override settings in the global newrelic.config file. The agent looks for app-local config files in the following directories, in this order: A directory specified in your web.config or app.config file with the NewRelic.ConfigFile property The web app's root directory (with the app.config or web.config) The directory containing your app's executable file Note that the app-local config file must be complete and validate against the XSD file (for example, at C:\\ProgramData\\New Relic\\.NET Agent\\newrelic.xsd for Windows). Default (global) newrelic.config Default source and the lowest precedence. Will configure all applications on a host in the absence of other config files. The global config file is located in the New Relic agent home directory: %PROGRAMDATA%\\New Relic\\.NET Agent Required environment variables New Relic's .NET agent relies on environment variables to tell the .NET Common Language Runtime (CLR) to attach New Relic to your processes. Some .NET agent install procedures (like the MSI installer) will automatically set these variables for you; some procedures will require you to manually set them. Caution Security recommendation: You should consider what users can set system environment variables. You should also secure the accounts under which your applications execute to prevent user environment variables overriding system environment variables .NET Framework environment variables For .NET Framework, the following variables are required: COR_ENABLE_PROFILING=1 COR_PROFILER={71DA0A04-7777-4EC6-9643-7D28B46A8A41} NEWRELIC_INSTALL_PATH=path\\to\\agent\\directory Copy The .NET agent installer will add these to IIS or as system-wide environment variables. .NET Core environment variables For .NET Core, the following variables are required: Linux: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_NEWRELIC_HOME=path/to/agent/directory CORECLR_PROFILER_PATH=\"${CORECLR_NEWRELIC_HOME}/libNewRelicProfiler.so\" Copy Windows: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} NEWRELIC_INSTALL_PATH=path\\to\\agent\\directory CORECLR_NEWRELIC_HOME=path\\to\\agent\\directory Copy The .NET agent installer will add these to IIS or as system-wide environment variables. If your system has previously used monitoring services (non-New Relic), you may have a \"profiler conflict\" when trying to install and use the New Relic agent. More details: Profiler conflict explanation New Relic’s .NET agents rely on environment variables to tell the .NET Common Language Runtime (CLR) to load New Relic into your processes. The install-related environment variables are Microsoft variables, not New Relic variables. They can be used by other .NET profilers, and only one profiler can be attached to a process at a time. For this reason, if you have used previous application monitoring products, you may have profiler conflicts. For specific install instructions, see the .NET agent install documentation. Optional environment variables Some configuration options in New Relic's .NET agent can be set via environment variables as an alternative to setting them in a config file. Below is a list of environment variables recognized by the .NET agent with example values. NEW_RELIC_LICENSE_KEY=XXXXXXXX NEW_RELIC_LOG=MyApp.log NEW_RELIC_APP_NAME=Descriptive Name MAX_TRANSACTION_SAMPLES_STORED=500 MAX_EVENT_SAMPLES_STORED=500 NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true NEW_RELIC_SPAN_EVENTS_ENABLED=false NEW_RELIC_LABELS=foo:bar;zip:zap NEW_RELIC_CONFIG_OBSCURING_KEY=XXXXXXXX NEW_RELIC_DISABLE_SAMPLERS=true NEWRELIC_PROFILER_LOG_DIRECTORY=path\\to\\agent\\directory (not configurable via config file) Copy Setup options, newrelic.config Use these options to setup and configure your agent via the newrelic.config file. The New Relic .NET agent supports the following categories of setup options: Configuration element Service element Obscuring key element Proxy element Log element Application element (configuration) Data transmission element Host name Configuration element The root element of the configuration document is a configuration element. <configuration xmlns=\"urn:newrelic-config\" agentEnabled=\"true\" maxStackTraceLines=\"50\" timingPrecision=\"low\"> Copy The configuration element supports the following attributes: agentEnabled Type Boolean Default true Enable or disable the New Relic agent. maxStackTraceLines Type Integer Default 80 The maximum number of stack frames to trace in any stack dump. timingPrecision Type String Default low Controls the precision of the timers. High precision will provide better data, but at a lower execution speed. Possible values are high and low. Service element The first child of the configuration element is a service element. The service element configures the agent's connection to the New Relic service. <service licenseKey=\"YOUR_LICENSE_KEY\" sendEnvironmentInfo=\"true\" syncStartup=\"false\" sendDataOnExit=\"false\" sendDataOnExitThreshold=\"60000\" autoStart=\"true\"/> Copy The service element supports the following attributes: licenseKey (required) Type String Default (none) Your New Relic license key. New Relic uses the license key to match your app's data to the correct account in the UI. Set the license key via environment variable. Alternatively, set the NEW_RELIC_LICENSE_KEY environment variable in the application's environment. NEW_RELIC_LICENSE_KEY=XXXXXXXX Copy sendEnvironmentInfo Type Boolean Default true Instructs the agent to record execution environment information. Environment information includes operating system, agent version, and which assemblies are available. syncStartup Type Boolean Default false Block application startup until the agent connects to New Relic. If set to true, the first transaction may take substantially longer to complete, because it is blocked until the connection to New Relic is finished. sendDataOnExit Type Boolean Default false Block application shutdown until the agent sends all data from the latest harvest cycle. sendDataOnExitThreshold Type Integer Default 60000 Unit Milliseconds The minimum amount of time the process must run before the agent blocks it from shutting down. This setting only applies when sendDataOnExit is true. completeTransactionsOnThread Type Boolean Default false If false, the agent uses a pool thread to complete the transaction processing. If true, the agent will complete transaction processing on the request thread. requestTimeout Type Integer Default 2000 (sendDataOnExit enabled) 120000 (sendDataOnExit disabled) Unit Milliseconds The agent's request timeout when communicating with New Relic. autoStart Type Boolean Default True Automatically start the .NET agent when the first instrumented method is hit. ssl (DEPRECATED) Type Boolean Default true The option to disable SSL is valid only for .NET agent versions 7.x and earlier. .NET agent version 8.x and higher communicate only via SSL. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. Obscuring key element The obscuringKey element is an optional child of the service element. The .NET Agent uses this value to deobfuscate supported configuration values. For example, when an obfuscated proxy password is supplied, it will be deobfuscated using this key. <service licenseKey=\"YOUR_LICENSE_KEY\"> <obscuringKey>OBSCURING_KEY</obscuringKey> </service> Copy The obscuring key may also be configured by setting the NEW_RELIC_CONFIG_OBSCURING_KEY environment variable. Caution Security recommendation: The placement of the obscuring Key in the same configuration file as an obfuscated value may pose a security risk. Consider placing the obscuring key in an environment variable and limiting access to environment variables within your environment. Proxy element The proxy element is an optional child of the service element. The proxy element is used when the agent communicates to the New Relic back-end service via a proxy. <service licenseKey=\"YOUR_LICENSE_KEY\"> <proxy host=\"hostname\" port=\"PROXY_PORT\" uriPath=\"path/to/something.aspx\" domain=\"mydomain.com\" user=\"PROXY_USERNAME\" password=\"PROXY_PASSWORD\" passwordObfuscated=\"OBFUSCATED_PROXY_PASSWORD\"/> </service> Copy The proxy element supports the following attributes: host Type String Default (none) Defines the proxy host. port Type Integer Default 8080 Defines the proxy port. uriPath Type String Default (none) Optionally define a proxy URI path. domain Type String Default (none) Optionally define a domain to use when authenticating with the proxy server. user Type String Default (none) Optionally define a user name for authentication. password Type String Default (none) Optionally define a password for authentication. passwordObfuscated Type String Default (none) For additional security, the .NET Agent supports the use of an obfuscated proxy password with the passwordObfuscated attribute. The obfuscated proxy password is generated using the following New Relic CLI command: newrelic agent config obfuscate --key OBSCURING_KEY --value \"CLEAR_TEXT_PROXY_PASSWORD\" Copy Important When using an obfuscated proxy password, the obscuring key must also be configured. Log element The log element is a child of the configuration element. The log element configures New Relic's logging . The agent generates its own log file to keep its logging information separate from your application's logs. <log level=\"info\" auditLog=\"false\" console=\"false\" directory=\"PATH\\TO\\LOG\\DIRECTORY\" fileName=\"FILENAME.log\" /> Copy The log element supports the following attributes: level Type String Default info Defines the level of detail recorded in the log file. Possible values, in increasing order of detail, are: off error warn info debug finest all Important Increasing the log level will increase New Relic's performance impact. auditLog Type Boolean Default false Records all data sent to and received from New Relic in both an auditlog log file and the standard log file. console Type Boolean Default false Send log messages to the console, in addition to the log file. directory Type String Default C:\\ProgramData\\New Relic\\.NET Agent\\Logs The directory to hold log files generated by the agent. If this is omitted, then a directory named logs in the New Relic agent install area will be used by default. fileName Type String Default (none) Defines a name for the log file. If you do not define a fileName, the name is derived from the name of the monitored process. Alternatively, set the NEW_RELIC_LOG environment variable in the application's environment. NEW_RELIC_LOG=MyApp.log Copy Application element (required) The application element is a child of the configuration element. This required element defines your application name, and disables or enables sampling. name Type String Default My Application The name of your .NET application is a child of the application element. New Relic will aggregate your data according to this name. For example, if you have two running applications named AppA and AppB, you will see two applications in the New Relic interface: AppA and AppB. You can also assign up to three names to your app. The first name is the primary name. For example: <application> <name>MY APPLICATION PRIMARY</name> <name>SECOND APP NAME</name> <name>THIRD APP NAME</name> </application> Copy Alternatively, set the NEW_RELIC_APP_NAME environment variable in the application's environment. NEW_RELIC_APP_NAME=Descriptive Name Copy disableSamplers Type Boolean Default false Samplers collect information about memory and CPU consumption. Set this to true to disable sampling. Alternatively, set the NEW_RELIC_DISABLE_SAMPLERS environment variable in the application's environment. NEW_RELIC_DISABLE_SAMPLERS=true Copy Data transmission element The dataTransmission element is a child of the configuration element. This element affects how data is sent to New Relic and can be used if you have specific data transmission requirements. <dataTransmission putForDataSend=\"false\" compressedContentEncoding=\"deflate\"/> Copy The dataTransmission element supports the following attributes: putForDataSend Type Boolean Default false Defines the HTTP method used when sending data to New Relic. Set this to true to enable using the PUT method when sending data. The POST method is used by default. Host name If the default host name label in the APM UI is not useful, you can decorate that name in the New Relic UI with a display name. After the application process is restarted and the .NET agent is reporting again, the display name will appear in the Servers drop-down list. This host name setting does not affect the list of hosts on your application's Summary page. To set a display name, choose one of the following options. The environment variable takes precedence over the config file value. Then restart your application to see your changes in the New Relic UI. Set using config file Set the displayName attribute in the processHost element in newrelic.config. The processHost element is a child of the configuration element. <configuration . . . > <processHost displayName=\"CUSTOM_NAME\" /> </configuration> Copy Set using environment variable Set the NEW_RELIC_PROCESS_HOST_DISPLAY_NAME environment variable: NEW_RELIC_PROCESS_HOST_DISPLAY_NAME = \"CUSTOM_NAME\" Copy Cloud platform utilization Configures the utilization configuration element to control how the agent collects utilization information and sends it to the New Relic service to determine pricing. The agent can collect information from Amazon Web Services (AWS) EC2 instances, Docker containers, Azure, Google Cloud Platform, Pivotal Cloud Foundry, and Kubernetes. detectAws Type Boolean Default true Determines whether the agent polls AWS metadata API. detectAzure Type Boolean Default true Determines whether the agent polls Azure metadata API. detectGcp Type Boolean Default true Determines whether the agent polls GCP metadata API. detectPcf Type Boolean Default true Determines whether the agent polls PCF information from environment variables. detectDocker Type Boolean Default true Determines whether the agent reads Docker information from the file system. detectKubernetes Type Boolean Default true Determines whether the agent polls Kubernetes information from environment variables. Instrumentation options Use these options to configure which elements of your application and environment to instrument. New Relic for .NET supports the following categories of instrumentation options: Instrumentation element Applications element (instrumentation) Attributes element Instrumentation element The instrumentation element is a child of the configuration element. By default, the .NET agent instruments IIS asp worker processes and Azure web and worker roles. To instrument other processes, see Instrumenting custom applications. Applications element (instrumentation) The applications element is a child of the instrumentation element. The applications element specifies which non-web apps to instrument. It contains a name attribute. Important This is not the same as the application (configuration) element, which is a child of the configuration element. <instrumentation> <applications> <application name=\"MyService1.exe\" /> <application name=\"MyService2.exe\" /> <application name=\"MyService3.exe\" /> </applications> </instrumentation> Copy Attributes element An attribute is a key/value pair that determines the properties of an event or transaction. Each attribute is sent to APM transaction traces, APM error traces, Transaction events, TransactionError events, or PageView events. The primary attributes element enables or disables attribute collection for the .NET agent, and defines specific attributes to collect or exclude. You can also configure attribute settings based on their destination: Error collection, transaction traces, Browser instrumentation, and transaction events. In this example, the agent excludes all attributes whose key begins with myApiKey (myApiKey.bar, myApiKey.value), but collects the custom attribute myApiKey.foo. <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> Copy You can view the .NET APM attributes on the .NET agent attributes page. You can also define custom attributes with the agent API call AddCustomParameter. enabled Type Boolean Default true Enable or disable attribute collection. When set to false in the primary attribute element, this setting overrides all attribute settings for individual destinations. include Type String Default (none) If attributes are enabled, the agent will collect all attribute keys specified in this list. To specify multiple attribute keys, specify each individually. You can also use a * wildcard character at the end of a key to match multiple attributes (for example, myApiKey.*). For more information, see Attribute rules. exclude Type String Default (none) If attributes are enabled, the agent will not collect attribute keys specified in this list. To specify multiple attribute keys, specify each individually. You can also use a * wildcard character at the end of a key to match multiple attributes (for example, myApiKey.*). For more information, see Attribute rules. Feature options Use these options to enable, disable, and configure New Relic features. New Relic for .NET allows you to configure the following features: App pools Cross application traces Error collection High security mode Strip exception messages Transaction events Custom events Custom parameters Tags/labels Browser instrumentation Slow Queries Transaction traces Datastore tracer Distributed tracing Span events App pools Important This is only applicable to a system's global config file. The applicationPools element is a child of the configuration element. The applicationPools element specifies for the profiler exactly which application pools to instrument and uses the same name as the IIS application pool name. This configuration element is useful when you may need to instrument only a small subset of your app pools. For example, a given server might have several hundred application pools, but only a few of those pools need to be instrumented by the .NET agent. Here is an example of disabling instrumentation for specific application pools: <applicationPools> <applicationPool name=\"Foo\" instrument=\"false\"/> <applicationPool name=\"Bar\" instrument=\"false\"/> </applicationPools> Copy Here is an example of disabling instrumentation for all application pools currently executing on the server and enabling instrumentation for specific application pools: <applicationPools> <defaultBehavior instrument=\"false\"/> <applicationPool name=\"Foo\" instrument=\"true\"/> <applicationPool name=\"Bar\" instrument=\"true\"/> </applicationPools> Copy The applicationPools element supports the following elements: defaultBehavior Type Boolean Default false Defines how the .NET agent will behave on a \"global\" level for application pools served via IIS. The .NET agent instruments all application pools by default. When true, application pools listed under applicationPool with an instrument attribute set to false will not be instrumented. Essentially, when set to false, the application pool list acts as an allow list. When set to true, the application pool list acts as a deny list. applicationPool Defines instrumentation behavior for a specific application pool. The name attribute is the name of an application pool. Enable or disable profiling in the instrument attribute. Define this application in the name attribute. Cross application traces The crossApplicationTracer element is a child of the configuration element. crossApplicationTracer links transaction traces across applications. When linked in a service-oriented architecture, all instrumented applications that communicate with each other via HTTP will now \"link\" transaction traces with the applications that they call and the applications they are called by. Cross application tracing makes it easier to understand the performance relationship between services and applications. <crossApplicationTracer enabled=\"true\"/> Copy The crossApplicationTracer element supports the following attribute: enabled Type Boolean Default true Enable or disable cross application tracing Error collection The errorCollector element is a child of the configuration element. errorCollector configures error collection, which captures information about uncaught exceptions and sends them to New Relic. <errorCollector enabled=\"true\" captureEvents=\"true\" maxEventSamplesStored=\"100\"> <ignoreClasses> <errorClass>System.IO.FileNotFoundException</errorClass> <errorClass>System.Threading.ThreadAbortException</errorClass> </ignoreClasses> <ignoreMessages> <errorClass name=\"System.Exception\"> <message>Ignore message</message> <message>Ignore too</message> </errorClass> </ignoreMessages> <ignoreStatusCodes> <code>401</code> <code>404</code> </ignoreStatusCodes> <expectedClasses> <errorClass>System.ArgumentNullException</errorClass> <errorClass>System.ArgumentOutOfRangeException</errorClass> </expectedClasses> <expectedMessages> <errorClass name=\"System.Exception\"> <message>Expected message</message> <message>Expected too</message> </errorClass> </expectedMessages> <expectedStatusCodes>403,500-505</expectedStatusCodes> <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> </errorCollector> Copy Tip For an overview of error configuration in APM, see Manage errors in APM. The errorCollector element supports the following elements and attributes: enabled Type Boolean Default true Enable or disable the error collector. captureEvents Type Boolean Default true Enable or disable the capturing of error events. maxEventSamplesStored Type Integer Default 100 Reservoir limit for error events. ignoreClasses A list of fully qualified class names to be ignored. The maximum number of error class and message combinations that SHOULD be reported is 50. If more than 50 are listed, then only the first 50 SHOULD be used ignoreMessages An optional map of fully qualified class names to list of strings matching a substring of the message of an error. The maximum number of error class and message combinations that SHOULD be reported is 50. If more than 50 are listed, then only the first 50 SHOULD be used ignoreErrors (DEPRECATED) Type String Default (none) Lists specific exceptions to not report to New Relic. The full name of the exception should be used, such as System.IO.FileNotFoundException. ignoreStatusCodes Type String Default (none) Lists specific HTTP error codes to not report to New Relic. You can use standard integral HTTP error codes, such as just 401, or you may use Microsoft full status codes with decimal points, such as 401.4 or 403.18. The status codes should be equal to or greater than 400. expectedClasses A list of fully qualified class names to be marked as expected. The maximum number of error class and message combinations that SHOULD be reported is 50. If more than 50 are listed, then only the first 50 SHOULD be used expectedMessages An optional map of fully qualified class names to list of strings matching a substring of the message of an error. The maximum number of error class and message combinations that SHOULD be reported is 50. If more than 50 are listed, then only the first 50 SHOULD be used expectedStatusCodes A comma separated list of status codes. The list may include integer ranges, using a single dash (-) and will be inclusive of both the starting and ending integer in the range. attributes Use this sub-element to customize your agent attribute settings for error traces. This sub-element uses the same settings as the primary attributes element: enabled, include, and exclude. High security mode The highSecurity element is a child of the configuration element. To enable high security mode, set this property to true and enable high security property in the New Relic user interface. Enabling high security means SSL is turned on, request parameters and custom parameters are not collected, strip exception messages is enabled, and queries cannot be sent to New Relic in their raw form. enabled Type Boolean Default false Enable or disable high security mode. Example: <highSecurity enabled=\"true\"/> Copy Strip exception messages The stripExceptionMessages element is a child of the configuration element. To enable strip exception messages, set this property to true. By default, this is set to false, which means that the agent sends messages from all exceptions to the New Relic collector. If you enable high security mode, this is automatically changed to true, and the agent strips the messages from exceptions. enabled Type Boolean Default false Enable or disable strip exception messages. Example: <stripExceptionMessages enabled=\"true\"/> Copy Transaction events The transactionEvents element is a child of the configuration element. Use transactionEvents to configure transaction events. <transactionEvents enabled=\"true\" maximumSamplesStored=\"10000\"> <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> </transactionEvents> Copy The transactionEvents element supports the following attributes: enabled Type Boolean Default true Enable or disable the event recorder. maximumSamplesStored Type Integer Default 10000 The maximum number of samples to store in memory at once. Alternatively, set the MAX_TRANSACTION_SAMPLES_STORED environment variable in the application's environment. MAX_TRANSACTION_SAMPLES_STORED=500 Copy attributes Use this sub-element to customize your agent attribute settings for transaction events. This sub-element uses the same settings as the primary attributes element: enabled, include, and exclude. Tip These attribute settings are specific to transaction events. Attribute settings can be applied globally to all event types to with this configuration setting. Caution When distributed tracing and/or Infinite Tracing are enabled, information from transaction events is applied to the root Span Event of the transaction. Consider applying any attribute settings for transaction events to span events and/or apply them as Global Attribute settings. Custom events The customEvents element is a child of the configuration element. Use customEvents to configure custom events. <customEvents enabled=\"true\" maximumSamplesStored=\"10000\"/> Copy The CustomEvents element supports the following attributes: enabled Type Boolean Default true Enable or disable the event recorder. maximumSamplesStored Type Integer Default 10000 The maximum number of samples to store in memory at once. Alternatively, set the MAX_EVENT_SAMPLES_STORED environment variable in the application's environment. MAX_EVENT_SAMPLES_STORED=500 Copy Custom parameters The customParameters element is a child of the configuration element. Use customParameters to configure custom parameters. <customParameters enabled=\"true\" /> Copy The CustomParameters element supports the following attributes: enabled Type Boolean Default true Enable or disable the capture of custom parameters. Labels (tags) The labels element is a child of the configuration element. This sets tag names and values. The list is a semicolon delimited list of colon-separated name and value pairs. You can also use with the NEW_RELIC_LABELS environment variable. Example: <labels>foo:bar;zip:zap</labels> Copy Browser instrumentation The browserMonitoring element is a child of the configuration element. browserMonitoring configures Browser monitoring in your .NET application. Browser gives you insight your end users' performance experience. This is accomplished by measuring the time it takes for your users' browsers to download and render your webpages by injecting a small amount of JavaScript code into the header and footer of each page. // If you use both the Exclude and Attribute elements // the Exclude element must be listed first. <browserMonitoring autoInstrument=\"true\"> <requestPathsExcluded> <path regex=\"url-regex-1\"/> <path regex=\"url-regex-2\"/> ... <path regex=\"url-regex-n\"/> </requestPathsExcluded> <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> </browserMonitoring> Copy The browserMonitoring element supports the following attributes: autoInstrument Type Boolean Default true By default the agent automatically injects the Browser agent JavaScript. To turn off automatic injection, set this attribute to false. attributes Use this sub-element to customize your agent attribute settings for Browser. This sub-element uses the same settings as the primary attributes element: enabled, include, and exclude. requestPathsExcluded Use this sub-element to prevent the Browser agent from being injected in specific pages. The element is used as follows: <requestPathsExcluded> <path regex=\"url-regex-1\"/> <path regex=\"url-regex-2\"/> ... <path regex=\"url-regex-n\"/> </requestPathsExcluded> Copy The agent will not inject the Browser agent into pages whose URL matches one of the specified regular expressions. The regular expression should follow Microsoft guidelines for the Regex class. It is a reference to the virtual directory of the path in your application and not the full URL of the path you wish to exclude. For example, to exclude the pages in https://www.mywebsite.com/mywebpages/ you would simply insert /mywebpages/ as the path regex value. The requestPathsExcluded element should be used in cases where it is impossible or undesirable to use the DisableBrowserMonitoring() call. To minimize a possible performance impact try to use as few regular expressions as possible and keep them as simple as possible. Slow queries The slowSql element is a child of the configuration element. slowSql configures capturing information about slow query executions, and captures and obfuscates explain plans for these queries. <slowSql enabled=\"true\"/> Copy The slowSql element supports the following attribute: enabled Type Boolean Default true Enable or disable slow query tracing. Transaction traces The transactionTracer element is a child of the configuration element. transactionTracer configures transaction traces. Included in the trace is the exact call sequence of the transactions, including any query statements issued. <transactionTracer enabled=\"true\" transactionThreshold=\"apdex_f\" recordSql=\"obfuscated\" explainEnabled=\"true\" explainThreshold=\"500\" maxSegments=\"3000\" maxExplainPlans=\"20\"> <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> </transactionTracer> Copy The transactionTracer element supports the following attributes: enabled Type Boolean Default true Enable or disable transaction traces. transactionThreshold Type String Default apdex_f Defines the threshold for transaction traces. If a transaction takes longer than the threshold, it is eligible for being traced. See transaction trace basics for more about the rules governing traces. The default value is apdex_f, which sets the threshold to four times the application's apdex_t value. For more information about apdex_t, see Apdex. You can also set the threshold to be a specific time value in milliseconds. recordSql Type String Default obfuscated Select a query tracing policy. Options are off, which records nothing; obfuscated, which records an obfuscated version of the query; or raw, which records the query exactly as it is issued to the database. Caution Recording raw queries may capture sensitive information. explainEnabled Type Boolean Default false When true, the agent captures EXPLAIN statements for slow queries. explainThreshold Type Integer Default 500 Unit Milliseconds The agent collects slow query data for queries that exceed this threshold, along with any available explain plans, as part of transaction traces. maxSegments Type Integer Default 3000 The maximum number of segments to collect in a transaction trace. maxExplainPlans Type Integer Default 20 The maximum number of explain plans to collect during a harvest cycle. attributes Use this sub-element to customize your agent attribute settings for transaction traces. This sub-element uses the same settings as the primary attributes element: enabled, include, and exclude. Datastore tracer The datastoreTracer element is a child of the configuration element. <datastoreTracer> <instanceReporting enabled=\"true\" /> <databaseNameReporting enabled=\"true\" /> <queryParameters enabled=\"false\" /> </datastoreTracer> Copy The datastoreTracer element supports the following sub-elements: instanceReporting Use this sub-element to enable collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on slow query traces and transaction traces. The default value of attribute enabled is true. databaseNameReporting Use this sub-element to enable collection of the database name on slow query traces and transaction traces for some database drivers. The default value of attribute enabled is true. queryParameters Use this sub-element to enable collection of the SQL query parameters on slow query traces. The default value of attribute enabled is false. Caution Recording query parameters may capture sensitive information. The transactionTracer.recordSql configuration option must be set to raw or this option is ignored. Distributed tracing The distributedTracing element is a child of the configuration element. <distributedTracing enabled=\"false\" excludeNewrelicHeader=\"false\"/> Copy Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Enabling distributed tracing disables cross application tracing, and has other effects on APM features. Before enabling, read the planning guide. Important Requires .NET agent version 8.6.45.0 or higher. The distributedTracing element supports the following attributes: To enable or disable, see Enable distributed tracing. enabled Type Boolean Default false Alternatively, enable distributed tracing via the NEW_RELIC_DISTRIBUTED_TRACING_ENABLED environment variable in the application's environment. NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true Copy excludeNewrelicHeader Type Boolean Default false By default, supported versions of the agent utilize both the newrelic header and W3C Trace Context headers for distributed tracing. The newrelic distributed tracing header allows interoperability with older agents that don't support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over newrelic headers for distributed tracing. If you do not want to utilize the newrelic header, setting this to true will result in the agent excluding the newrelic header and only using W3C Trace Context headers for distributed tracing. Distributed tracing reports span events. Span event reporting is enabled by default, but distributed tracing must be enabled for spans to be reported. To disable span events, choose one of the following options: Disable span events via config file Set the <spanEvents> element to false to disable via the newrelic.config file. This element is a child of the <configuration> element. <configuration . . . > <spanEvents enabled=\"false\" /> </configuration> Copy Disable span events via environment variable Set the NEW_RELIC_SPAN_EVENTS_ENABLED environment variable in the application's environment. NEW_RELIC_SPAN_EVENTS_ENABLED=false Copy Infinite Tracing Infinite Tracing extends the distributed tracing service by employing a trace observer that is external to the agent. It observes 100% of your application traces across various services and provides actionable data so you can solve issues faster. Important Infinite Tracing requires .NET Agent version 8.30 or higher. To turn on Infinite Tracing, enable distributed tracing and add the additional settings below <configuration . . . > <distributedTracing enabled=\"true\" /> <infiniteTracing> <trace_observer host=\"YOUR_TRACE_OBSERVER_HOST\" /> </infiniteTracing> </configuration> Copy The infiniteTracing element supports the following elements: trace_observer The trace_observer element identifies an observer host that is independent from the agent. For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint. The trace observer may be configured using the NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST environment variable as well. Important When configuring the trace observer, you should not supply the protocol as part of the host. For example, use myhost.infinitetracing.com instead of https://myhost.infinitetracing.com. Span events The spanEvents element is a child of the configuration element. Use spanEvents to configure span events. <spanEvents enabled=\"true\"> <attributes enabled=\"true\"> <exclude>myApiKey.*</exclude> <include>myApiKey.foo</include> </attributes> </spanEvents> Copy The spanEvents element supports the following attributes: enabled Type Boolean Default true Enable or disable the event recorder. attributes Use this sub-element to customize your agent attribute settings for span events. This sub-element uses the same settings as the primary attributes element: enabled, include, and exclude. Tip These attribute settings are specific to span events. Attribute settings may be applied globally to all event types to with this configuration setting. Settings in app.config or web.config For ASP.NET and .NET Framework console apps you can also configure the following settings in your app's app.config or web.config, within the outermost element, <configuration>: Enable and disable the agent <appSettings> <add key = \"NewRelic.AgentEnabled\" value=\"false\" /> </appSettings> Copy Important If the agent is disabled in the local or global newrelic.config, the NewRelic.AgentEnabled settings in these files will be ignored. Application name For more information, see Name your .NET application. <appSettings> <add key = \"NewRelic.AppName\" value =\"Descriptive Name\" /> </appSettings> Copy License key <appSettings> <add key = \"NewRelic.LicenseKey\" value =\"XXXXXXXX\" /> </appSettings> Copy Change newrelic.config location Designates an alternative location for the config file outside of the local root of the app or global config location. The location entered must be an absolute path. <appSettings> <add key = \"NewRelic.ConfigFile\" value=\"C:\\Path-to-alternate-config-dir\\newrelic.config\" /> </appSettings> Copy Settings in appsettings.json For .NET Core apps, you can configure the following settings in appsettings.json if the following is true: The appsettings.json file must be located in the current working directory of the application. The application must have the following dependencies: Microsoft.Extensions.Configuration Microsoft.Extensions.Configuration.Json Microsoft.Extensions.Configuration.EnvironmentVariables Enable and disable the agent { \"NewRelic.AgentEnabled\":\"false\" } Copy Important If the agent is disabled in the local or global newrelic.config, the NewRelic.AgentEnabled setting in this file will be ignored. Application name For more information, see Name your .NET application. { \"NewRelic.AppName\": \"Descriptive Name\" } Copy License key { \"NewRelic.LicenseKey\": \"XXXXXXXX\" } Copy Change newrelic.config location Designates an alternative location for the config file outside of the local root of the app or global config location. The location entered must be an absolute path. { \"NewRelic.ConfigFile\": \"C:\\\\Path-to-alternate-config-dir\\\\newrelic.config\" } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 67.55148,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> configuration",
        "sections": ".<em>NET</em> <em>agent</em> configuration",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " Relic), you may have a &quot;profiler conflict&quot; when trying to install and use the New Relic <em>agent</em>. More details: Profiler conflict explanation New Relic’s .<em>NET</em> <em>agents</em> rely on environment variables to tell the .<em>NET</em> Common Language Runtime (CLR) to load New Relic into your processes. The install-related"
      },
      "id": "60446c3b196a679d6a960f7a"
    },
    {
      "sections": [
        "Custom instrumentation via attributes (.NET)",
        "Requirements and recommendations",
        "Transactions called within transactions",
        "Example: Calling Transaction in an already-started transaction",
        "Create a new non-web transaction",
        "Create a new web transaction",
        "Add detail to existing transactions with Trace",
        "Properties for [Transaction]",
        "Web",
        "Read forum posts about instrumentation",
        "Use other API functions"
      ],
      "title": "Custom instrumentation via attributes (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Custom instrumentation"
      ],
      "external_id": "68ae52e48b04bfe2279bcd038778cc5eebf53d1d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/custom-instrumentation/custom-instrumentation-attributes-net/",
      "published_at": "2021-06-08T20:32:16Z",
      "updated_at": "2021-05-15T18:25:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent provides several options for custom instrumentation. Custom instrumentation allows you to instrument parts of your app that are not instrumented automatically. This document describes how to instrument your app by decorating the methods in your app code with attributes. Use the Transaction attribute to create a custom transaction. You can also mark the custom transaction as a web transaction with the attribute's Web property. Use the Trace attribute to add custom instrumentation to methods that are invoked within a preexisting transaction. Requirements and recommendations Requirements include: .NET agent version 6.16.178.0 or higher. You must be willing to modify your source code. If you cannot or do not want to modify your source code, use custom instrumentation via XML. Your project must have a reference to NewRelic.Api.Agent.dll (for example, installing the package and placing using NewRelic.Api.Agent; in your code). This package is in the NuGet gallery. The Transaction and Trace attributes must be applied to concrete implementations of methods. They cannot be applied on interfaces or super class method definitions. Transactions called within transactions Methods decorated with the [Transaction] attribute will only create a new transaction when one does not already exist. When a method decorated with [Transaction] is called from within a previously started transaction, it will be treated as the [Trace] attribute instead, and will provide more information about the existing transaction. Example: Calling Transaction in an already-started transaction During the execution of this console application, OuterMethod will be called first and create a new transaction. The InnerMethod is called from within the transaction started by OuterMethod, so it will not create a new transaction. Instead, information about the execution of InnerMethod will be tracked as if the [Trace] attribute had been applied. static void Main(string[] args) { OuterMethod(); } [Transaction] public void OuterMethod() { InnerMethod(); } [Transaction] public void InnerMethod() { } Copy Create a new non-web transaction To start a non-web transaction (also known as a background request) with the Transaction attribute: [Transaction] public void Run() { // your background task } Copy For details about why to use either web or non-web, see Classify as web or non-web. Create a new web transaction To tell the agent to mark a non-web task as a web browser transaction, use either of these options: Set the Web property of the Transaction attribute to true. Set the transaction's URI with SetTransactionUri(). [Transaction(Web = true)] public void Run() { var uri = new Uri(\"http://www.mydomain.com/path\"); NewRelic.Api.Agent.NewRelic.SetTransactionUri(uri); // your web task } Copy When used inside a previously started transaction, this will be treated as a [Trace] attribute. For details about why to use either web or non-web, see Classify as web or non-web. Add detail to existing transactions with Trace If your transaction traces show large blocks of un-instrumented time and you want to include additional methods within the trace, you can use the Trace attribute: [Trace] protected void MethodWithinTransaction() { // your app code } Copy Properties for [ Transaction] The Transaction attribute supports the following properties: Web Type: Boolean Default: false If true, the agent starts a web transaction when it reaches this Transaction attribute. If a transaction is in progress, then that transaction will continue. If false (default), the agent starts a non-web transaction when it reaches this Transaction attribute. For example: [Transaction(Web = true)] Copy Read forum posts about instrumentation For more specific recommendations, check out these posts in our Explorers Hub community: Troubleshoot attribute-based custom instrumentation issues Build custom instrumentation tracer factories from .NET agent log files Use other API functions For more about the .NET agent API and its functionality, see New Relic's .NET agent API guide. For custom instrumentation without modifying your source code, see Create transactions via XML and Add detail to transactions via XML.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 62.285503,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Custom instrumentation via attributes (.<em>NET</em>)",
        "sections": "Custom instrumentation via attributes (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> provides several options for custom instrumentation. Custom instrumentation allows you to instrument parts of your app that are not instrumented automatically. This document describes how to instrument your app by decorating the methods in your app code with attributes. Use"
      },
      "id": "6043cd9528ccbcfe1e2c60aa"
    }
  ],
  "/docs/agents/net-agent/install-guides/install-net-agent-using-nuget": [
    {
      "sections": [
        "Install .NET agent for Windows Communication Foundation (WCF)",
        "Install for WCF applications",
        "Important",
        "ASP.NET pipeline events and WCF events",
        "Only WCF events"
      ],
      "title": "Install .NET agent for Windows Communication Foundation (WCF)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "c39d558ff81b712496798549087933ccabcc2586",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-windows-communication-foundation-wcf/",
      "published_at": "2021-06-08T20:43:01Z",
      "updated_at": "2021-03-16T04:35:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the .NET agent and monitor WCF applications. Install for WCF applications To install the .NET agent on IIS-hosted WCF apps: Install the latest .NET agent. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app, or a Windows Forms app) take note of the instructions to enable the agent for your application. Ensure you give each WCF app a descriptive name. Enable or disable ASP.NET compatibility mode in your WCF application depending on which type of events you want monitored: ASP.NET pipeline events and WCF events When ASP.NET compatibility mode is enabled, the .NET agent instruments ASP.NET pipeline events as well as WCF events. In this mode, the agent provides you with a full view of your application stack. Only WCF events When ASP.NET compatibility mode is disabled, the .NET agent only instruments WCF events. Any activity that occurs as part of the ASP.NET pipeline will not be captured, such as agent API calls that are made outside of a WCF transaction. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.17984,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document explains how to install the .<em>NET</em> <em>agent</em> and monitor WCF applications. Install for WCF applications To install the .<em>NET</em> <em>agent</em> on IIS-hosted WCF apps: Install the latest .<em>NET</em> <em>agent</em>. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app"
      },
      "id": "603ea62e196a679eb4a83d8d"
    },
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Tip",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "d0515c81825c0b108418459b6c14a510b540c206",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-06-09T01:07:51Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile FROM microsoft/dotnet:2.2-aspnetcore-runtime # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile FROM microsoft/dotnet:2.2-sdk AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet build -c Release -o /app/ ./YOUR_APP_NAME FROM microsoft/dotnet:2.2-aspnetcore-runtime AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM microsoft/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i,\\ \"C:\\NewRelicDotNetAgent_x64.msi\",\\ /qn,NR_LICENSE_KEY=YOUR_LICENSE_KEY # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"C:\\NewRelicDotNetAgent_x64.msi\", /qn, NR_LICENSE_KEY=YOUR_LICENSE_KEY # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windowsservercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.52936,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": " for either Windows or Linux. It&#x27;s just a matter of configuring your Dockerfile to perform the procedure. Tip To use .<em>NET</em> or any <em>other</em> <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB"
      },
      "id": "603e85bde7b9d2b26c2a07fd"
    },
    {
      "sections": [
        ".NET agent install resources",
        "Important",
        "Microsoft's .NET profiler",
        ".NET agent download library",
        "Zip files for manual .NET agent install (Windows)",
        "Caution",
        ".NET Framework environment variables for manual install",
        ".NET Core environment variables for manual install",
        "Need for custom instrumentation",
        "Install-related environment variables",
        "Scriptable installers (Windows only)",
        "Scriptable installer for .NET Framework",
        "Tip",
        "Scriptable installer for .NET Core",
        "Local install",
        "Global install"
      ],
      "title": ".NET agent install resources",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "15e6347108ca11e12ccb535fb9fc3fa90d3f4a40",
      "image": "",
      "url": "https://docs.newrelic.com/docs/net-agent-install-resources/",
      "published_at": "2021-06-09T00:51:14Z",
      "updated_at": "2021-03-16T02:42:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains detailed descriptions of resources and procedures that are referenced in the New Relic .NET agent install procedures. Important This document is not meant to be read as a standalone document. For install instructions, see Introduction to .NET agent install. Microsoft's .NET profiler New Relic’s .NET agent relies on the Microsoft profiling API to report data from your .NET application. .NET monitoring solutions other than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .NET monitoring service in the past and haven’t completely disabled/removed it, the profiler may still be in use, which will cause profiler conflicts when you try to enable the .NET agent. .NET agent download library The New Relic .NET agent download library contains install file packages that are referenced in specific install procedures. For more on these files, see the download library’s ReadMe file. Zip files for manual .NET agent install (Windows) To manually install the agent using a ZIP file, choose the correct file for the application you wish to monitor: Go to the .NET agent download site and get the file matching your application's runtime and architecture: .NET Framework (32-bit): newrelic-agent-win-x86-VERSION.zip .NET Framework (64-bit): newrelic-agent-win-x64-VERSION.zip .NET Core (32-bit): newrelic-netcore20-agent-win-x86-VERSION.zip .NET Core (64-bit): newrelic-netcore20-agent-win-x64-VERSION.zip Unzip the agent folder in the desired location. Set environment variables for the process you wish to monitor. Caution We do not recommend setting these environment variables globally. Setting these environment variables globally can cause all .NET processes running on the system to get instrumented and report to New Relic. If you are installing the agent manually, we expect that you have the means to set these environment variables only for the processes you wish to monitor. .NET Framework environment variables for manual install For .NET Framework, the following variables are required: COR_ENABLE_PROFILING=1 COR_PROFILER={71DA0A04-7777-4EC6-9643-7D28B46A8A41} NEWRELIC_HOME=path\\to\\agent\\directory COR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy .NET Core environment variables for manual install For .NET Core, the following variables are required: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_NEWRELIC_HOME=path\\to\\agent\\directory CORECLR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy Restart your application. If using IIS, restart IIS. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Need for custom instrumentation After installing a .NET agent, most .NET application frameworks will automatically report data to your New Relic account. (See app framework compatibility: .NET Framework | .NET Core.) If your .NET application uses an application framework that is not automatically instrumented, or if the app has no framework (like a console app), after the install you will need to manually set up instrumentation of your app. Here are the steps to do that: Follow the relevant install instructions for your application and framework. Custom instrument your application to define what activity is reported to New Relic. Install-related environment variables A .NET agent install requires setting environment variables. For some install procedures (like for IIS-hosted .NET applications), these environment variables are set automatically. For other install procedures, you will have to manually set them. To see the required environment variables for both .NET Framework and .NET Core applications, see Environment variables. For installations requiring you to manually set environment variables, you can also set other configuration options via environment variables. Here's a look at two that are commonly set: License key. The environment variable for setting the New Relic license key is: NEW_RELIC_LICENSE_KEY = YOUR_LICENSE_KEY Copy You can also set this in the newrelic.config file or the app's config file. App name. Setting a meaningful application name is recommended, but you can also set this after install. The environment variable is: NEW_RELIC_APP_NAME = YOUR_APP_NAME Copy You can also set this via the newrelic.config, the app's config file, or the API. Scriptable installers (Windows only) The scriptable installers are ZIP archives containing a PowerShell script for installing the .NET agent. There is a separate zip archive for .NET Framework versus .NET Core. Important We recommend using the MSI installer over the scriptable installer. If you want to automate your install, consider running the MSI installer from the command line. Scriptable installer for .NET Framework To use the scriptable installer to install the .NET agent for a .NET Framework app: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation. Download the scriptable installer package for .NET Framework from the download site. By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package. Open a command shell and navigate into the unzipped package's folder. For a simple install with no options, use this command: .\\install.cmd -LicenseKey YOUR_LICENSE_KEY Copy To install with one or more additional options, use the format below. See table below for a description of the install options. install.cmd -LicenseKey YOUR_LICENSE_KEY [-NoIISReset] [-InstrumentAll] [-InstallPath PATH_TO_INSTALL] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description LicenseKey Required. Your New Relic license key. NoIISReset Optional. Use this option to prevent the installer from initiating an IIS reset. Important If you use this option, you need to do an IIS reset manually before New Relic starts instrumenting any IIS-hosted applications. InstrumentAll Optional. By default, the .NET agent will instrument all IIS-hosted applications. Use this option to enable instrumentation of other types of .NET applications. InstallPath Optional. Use this option to choose a different installation location. The default install location is C:\\Program Files\\New Relic. Uninstalling the agent with the scriptable uninstaller: Tip You can add the Force option to the uninstall script to force an uninstall without prompting to restart IIS. Execute the following command to uninstall the .NET Framework agent: .\\uninstall.cmd Copy Scriptable installer for .NET Core Important Before installing the agent: Understand the agent requirements, including the permissions requirements. Note that admin rights in an elevated shell are required (specifically for selecting a custom log directory and performing an IISReset). Caution For security reasons, it is necessary to execute the installAgent.ps1 script as shown below, by prepending ./ to the script filename, rather than by prepending powershell to the script. If you execute the script by prepending powershell, and any of your supplied arguments (e.g. the install path or custom log path) have spaces in them, these arguments will be corrupted, which would lead to the agent being installed to a location other than the intended location, which could be unsecure. To use the scriptable installer to install the .NET agent for a .NET Core application: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation Download the .NET Core agent's scriptable installer package from the .NET agent download site . By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package in the desired location. Open a command shell and navigate into the unzipped package's folder. You can install the agent either locally or globally: Local install For a simple install, with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy Global install Important The global install will instrument all .NET Core processes on your system. Only choose the global install if you want all .NET Core processes monitored. For a simple install with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description Destination Required. The location where the agent is installed. This can be an absolute or relative path. Wrapping quotes are required. InstallType Required. Determines whether this is a local (app-specific) or global (system-wide) install. LicenseKey Required. Your New Relic license key. AppName Optional. Sets the default application name associated with your agent installation. LogDir Optional. Sets a custom logging location for the agent. By default, the agent puts the logs directory in the install directory. X86 Optional. Installs the 32-bit version of the agent rather than the 64-bit version. New Relic does not recommend installing the 32-bit version of the agent globally. ResetIIS Optional. Performs an iisreset after the installation. Important Only use this if your .NET Core app is hosted via an IIS reverse proxy. Force Optional. Forces the installation process to overwrite a previous install or to install into an existing folder. Caution This overwrites any configuration customizations. New Relic recommends backing up your configuration file and any custom instrumentation files prior to forcing an over-install. Help Optional. Displays usage information for this script.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.1289,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "sections": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": " profiler New Relic’s .<em>NET</em> <em>agent</em> relies on the Microsoft profiling API to report data from your .<em>NET</em> application. .<em>NET</em> monitoring solutions <em>other</em> than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .<em>NET</em> monitoring service"
      },
      "id": "603eb8ba28ccbc3daceba773"
    }
  ],
  "/docs/agents/net-agent/install-guides/install-overview": [
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-09T01:14:43Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 247.66118,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for PHP",
        "sections": "Use the newrelic-<em>install</em> script for PHP",
        "tags": "Advanced <em>installation</em>",
        "body": "The interactive newrelic-<em>install</em> script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. <em>Install</em> sample ini files. Configure the New Relic proxy"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 246.03662,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the .NET agent on Azure Web Apps",
        "sections": "<em>Install</em> the .NET agent on Azure Web Apps",
        "tags": "Azure <em>installation</em>",
        "body": "This document explains how to <em>install</em> New Relic&#x27;s .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "PHP agent installation overview",
        "Tip",
        "PHP components",
        "Install the agent",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Tar archive",
        "Install PHP with partnership accounts",
        "For more help"
      ],
      "title": "PHP agent installation overview",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "e2acdb74f9365baa40b0b07a0bb638d19dbe6f5c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/php-agent-installation-overview/",
      "published_at": "2021-06-09T01:17:25Z",
      "updated_at": "2021-04-16T06:02:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic PHP agent installation. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add PHP data PHP components Our PHP agent consists of two basic components: A PHP extension, which collects data from your application A local proxy daemon, which transmits the data to New Relic Your system's configuration components, including the web server, operating system, system permissions, PHP installation itself, package manager, etc., are all important factors during installation and configuration, because the agent is a part of that. For more information about supported PHP releases, frameworks, and other system requirements, see PHP compatibility and requirements. Install the agent Follow this general process to install the agent on your system. The agent installation package or tar archive includes the interactive newrelic-install script, which automates some installation tasks. Tip If your application is frequently inactive, we recommend you generate some data by interacting with the application or site. This will help ensure the agent initially connects. Ensure your system meets the agent's requirements, including appropriate system permissions. If you do not already have a New Relic account, create one. From your Account settings, copy your license key information. Install the agent package or tar archive on your system. RedHat or CentOS The most common way to install the agent on RedHat or CentOS is with the installation package (.rpm) and the package manager. You can tell the package manager to get it from the New Relic repository, or you can download the .rpm file directly from the New Relic website. Install the package with your preferred package manager (yum or rpm) and then run the newrelic-install script. Ubuntu or Debian Install the package either with apt-get or with dpkg commands. Typically, running the newrelic-install script is not required. Tar archive The .tar archive method is the most generic method you can use on all supported operating systems. Download the compressed tar archive for your system if any of these situations apply to you: Your operating system is not listed here. You are not using a package manager. Other methods are unsuccessful. Install the tar archive of the agent on any supported platform. Change the default application name to a meaningful name. Optional: Change other agent configuration settings to further customize your installation. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Recommendation: To help ensure the PHP agent is initiated, especially if your application has infrequent activity, generate some data by using the app for a few seconds. Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the New Relic UI. Install PHP with partnership accounts Installation procedures may be different for admins who install the PHP agent through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership installation procedures Not all partners support PHP agents. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 240.12209,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "PHP agent <em>installation</em> <em>overview</em>",
        "sections": "PHP agent <em>installation</em> <em>overview</em>",
        "tags": "<em>Installation</em>",
        "body": " information about supported PHP releases, frameworks, and other system requirements, see PHP compatibility and requirements. <em>Install</em> the agent Follow this general process to <em>install</em> the agent on your system. The agent installation package or tar archive includes the interactive newrelic-<em>install</em> script, which"
      },
      "id": "6043c95064441f9382378ebf"
    }
  ],
  "/docs/agents/net-agent/installation/install-net-agent-linux": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.00778,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "<em>Install</em> the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " <em>installation</em> overview. <em>Installation</em> options Tip To use .<em>NET</em> or any other <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-09T01:14:43Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.229675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for PHP",
        "sections": "Work with multiple PHP <em>installations</em>",
        "tags": "<em>Agents</em>",
        "body": ": The <em>installation</em> script is in the &#x2F;usr&#x2F;bin directory. Via a tarball: The <em>installation</em> script is in the directory where you extracted the tar archive file. The script in the tar distribution includes <em>installation</em> steps otherwise handled by the package manager. Tip To use PHP or any other <em>agent</em>, as well"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-06-08T14:59:48Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.89484,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "PHP <em>agent</em> <em>installation</em>: Non-standard PHP (advanced)",
        "sections": "PHP <em>agent</em> <em>installation</em>: Non-standard PHP (advanced)",
        "tags": "<em>Agents</em>",
        "body": " <em>installation</em> directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP <em>agent</em> versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    }
  ],
  "/docs/agents/net-agent/installation/install-net-agent-windows": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.00778,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "<em>Install</em> the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " <em>installation</em> overview. <em>Installation</em> options Tip To use .<em>NET</em> or any other <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-09T01:14:43Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.229675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for PHP",
        "sections": "Work with multiple PHP <em>installations</em>",
        "tags": "<em>Agents</em>",
        "body": ": The <em>installation</em> script is in the &#x2F;usr&#x2F;bin directory. Via a tarball: The <em>installation</em> script is in the directory where you extracted the tar archive file. The script in the tar distribution includes <em>installation</em> steps otherwise handled by the package manager. Tip To use PHP or any other <em>agent</em>, as well"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-06-08T14:59:48Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.89484,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "PHP <em>agent</em> <em>installation</em>: Non-standard PHP (advanced)",
        "sections": "PHP <em>agent</em> <em>installation</em>: Non-standard PHP (advanced)",
        "tags": "<em>Agents</em>",
        "body": " <em>installation</em> directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP <em>agent</em> versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    }
  ],
  "/docs/agents/net-agent/installation/introduction-net-agent-install": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.00764,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "<em>Install</em> the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " <em>installation</em> overview. <em>Installation</em> options Tip To use .<em>NET</em> or any other <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-09T01:14:43Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.2296,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for PHP",
        "sections": "Work with multiple PHP <em>installations</em>",
        "tags": "<em>Agents</em>",
        "body": ": The <em>installation</em> script is in the &#x2F;usr&#x2F;bin directory. Via a tarball: The <em>installation</em> script is in the directory where you extracted the tar archive file. The script in the tar distribution includes <em>installation</em> steps otherwise handled by the package manager. Tip To use PHP or any other <em>agent</em>, as well"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-06-08T14:59:48Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.89477,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "PHP <em>agent</em> <em>installation</em>: Non-standard PHP (advanced)",
        "sections": "PHP <em>agent</em> <em>installation</em>: Non-standard PHP (advanced)",
        "tags": "<em>Agents</em>",
        "body": " <em>installation</em> directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP <em>agent</em> versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    }
  ],
  "/docs/agents/net-agent/installation/uninstall-net-agent": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.00764,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "<em>Install</em> the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " <em>installation</em> overview. <em>Installation</em> options Tip To use .<em>NET</em> or any other <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-09T01:14:43Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.2296,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for PHP",
        "sections": "Work with multiple PHP <em>installations</em>",
        "tags": "<em>Agents</em>",
        "body": ": The <em>installation</em> script is in the &#x2F;usr&#x2F;bin directory. Via a tarball: The <em>installation</em> script is in the directory where you extracted the tar archive file. The script in the tar distribution includes <em>installation</em> steps otherwise handled by the package manager. Tip To use PHP or any other <em>agent</em>, as well"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-06-08T14:59:48Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.89477,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "PHP <em>agent</em> <em>installation</em>: Non-standard PHP (advanced)",
        "sections": "PHP <em>agent</em> <em>installation</em>: Non-standard PHP (advanced)",
        "tags": "<em>Agents</em>",
        "body": " <em>installation</em> directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP <em>agent</em> versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    }
  ],
  "/docs/agents/net-agent/installation/update-net-agent": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.00752,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "<em>Install</em> the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " <em>installation</em> overview. <em>Installation</em> options Tip To use .<em>NET</em> or any other <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-09T01:14:43Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.22952,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for PHP",
        "sections": "Work with multiple PHP <em>installations</em>",
        "tags": "<em>Agents</em>",
        "body": ": The <em>installation</em> script is in the &#x2F;usr&#x2F;bin directory. Via a tarball: The <em>installation</em> script is in the directory where you extracted the tar archive file. The script in the tar distribution includes <em>installation</em> steps otherwise handled by the package manager. Tip To use PHP or any other <em>agent</em>, as well"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-06-08T14:59:48Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.8947,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "PHP <em>agent</em> <em>installation</em>: Non-standard PHP (advanced)",
        "sections": "PHP <em>agent</em> <em>installation</em>: Non-standard PHP (advanced)",
        "tags": "<em>Agents</em>",
        "body": " <em>installation</em> directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP <em>agent</em> versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.585464,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.585464,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.585556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.585464,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    },
    {
      "sections": [
        "SetTransactionUri (.NET agent API)",
        "Syntax",
        "Requirements",
        "Important",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "SetTransactionUri (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "d129360ab83b7b3b98bc9a79200a6f3dba437178",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-transaction-uri/",
      "published_at": "2021-06-08T17:02:25Z",
      "updated_at": "2021-03-16T13:14:40Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetTransactionUri(Uri $uri) Copy Sets the URI of the current transaction. Requirements Must be called inside a transaction. Agent version 6.16 or higher. Important This method only works when used within a transaction created using the Transaction attribute with the Web property set to true. (See Instrument using attributes.) It provides support for custom web-based frameworks that the agent does not automatically support. Description Sets the URI of the current transaction. The URI appears in the 'request.uri' attribute of transaction traces and transaction events, and also can affect transaction naming. If you use this call multiple times within the same transaction, each call overwrites the previous call. The last call sets the URI. Note: as of agent version 8.18, the 'request.uri' attribute's value is set to the value of the Uri.AbsolutePath property of the System.Uri object passed to the API. Parameters Parameter Description $uri Uri The URI of this transaction. Examples var uri = new System.Uri(\"http://www.mydomain.com/path\"); NewRelic.Api.Agent.NewRelic.SetTransactionUri(uri); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.57822,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetTransactionUri (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "SetTransactionUri (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetTransactionUri(Uri $uri) Copy Sets the URI of the current transaction. Requirements Must be called inside a transaction. <em>Agent</em> version 6.16 or higher. Important This method only works when used within a transaction created using the Transaction attribute"
      },
      "id": "603e848a64441fedeb4e8894"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/getagent": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.585556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.585464,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.585464,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.585556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "SetTransactionUri (.NET agent API)",
        "Syntax",
        "Requirements",
        "Important",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "SetTransactionUri (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "d129360ab83b7b3b98bc9a79200a6f3dba437178",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-transaction-uri/",
      "published_at": "2021-06-08T17:02:25Z",
      "updated_at": "2021-03-16T13:14:40Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetTransactionUri(Uri $uri) Copy Sets the URI of the current transaction. Requirements Must be called inside a transaction. Agent version 6.16 or higher. Important This method only works when used within a transaction created using the Transaction attribute with the Web property set to true. (See Instrument using attributes.) It provides support for custom web-based frameworks that the agent does not automatically support. Description Sets the URI of the current transaction. The URI appears in the 'request.uri' attribute of transaction traces and transaction events, and also can affect transaction naming. If you use this call multiple times within the same transaction, each call overwrites the previous call. The last call sets the URI. Note: as of agent version 8.18, the 'request.uri' attribute's value is set to the value of the Uri.AbsolutePath property of the System.Uri object passed to the API. Parameters Parameter Description $uri Uri The URI of this transaction. Examples var uri = new System.Uri(\"http://www.mydomain.com/path\"); NewRelic.Api.Agent.NewRelic.SetTransactionUri(uri); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.57821,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetTransactionUri (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "SetTransactionUri (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetTransactionUri(Uri $uri) Copy Sets the URI of the current transaction. Requirements Must be called inside a transaction. <em>Agent</em> version 6.16 or higher. Important This method only works when used within a transaction created using the Transaction attribute"
      },
      "id": "603e848a64441fedeb4e8894"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api": [
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    },
    {
      "sections": [
        "SetTransactionUri (.NET agent API)",
        "Syntax",
        "Requirements",
        "Important",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "SetTransactionUri (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "d129360ab83b7b3b98bc9a79200a6f3dba437178",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-transaction-uri/",
      "published_at": "2021-06-08T17:02:25Z",
      "updated_at": "2021-03-16T13:14:40Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetTransactionUri(Uri $uri) Copy Sets the URI of the current transaction. Requirements Must be called inside a transaction. Agent version 6.16 or higher. Important This method only works when used within a transaction created using the Transaction attribute with the Web property set to true. (See Instrument using attributes.) It provides support for custom web-based frameworks that the agent does not automatically support. Description Sets the URI of the current transaction. The URI appears in the 'request.uri' attribute of transaction traces and transaction events, and also can affect transaction naming. If you use this call multiple times within the same transaction, each call overwrites the previous call. The last call sets the URI. Note: as of agent version 8.18, the 'request.uri' attribute's value is set to the value of the Uri.AbsolutePath property of the System.Uri object passed to the API. Parameters Parameter Description $uri Uri The URI of this transaction. Examples var uri = new System.Uri(\"http://www.mydomain.com/path\"); NewRelic.Api.Agent.NewRelic.SetTransactionUri(uri); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.57821,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetTransactionUri (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "SetTransactionUri (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetTransactionUri(Uri $uri) Copy Sets the URI of the current transaction. Requirements Must be called inside a transaction. <em>Agent</em> version 6.16 or higher. Important This method only works when used within a transaction created using the Transaction attribute"
      },
      "id": "603e848a64441fedeb4e8894"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/iagent": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.585556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/idistributedtracepayload-net-agent-api": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.585556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/ignore-apdex": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.585556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/ignore-transaction": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.585556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/incrementcounter-net-agent-api": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.585556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/index": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 567.6303,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 567.6299,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 567.6299,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/ispan": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.585556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/itransaction": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.585556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/noticeerror-net-agent-api": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.585556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/recordcustomevent-net-agent-api": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.585556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/recordmetric-net-agent-api": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58555,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/recordresponsetimemetric-net-agent-api": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58555,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/set-application-name": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58555,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/set-transaction-uri": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58555,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/set-user-parameters": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58555,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/settransactionname-net-agent-api": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58555,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/start-agent": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58555,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0": [
    {
      "sections": [
        "GetLinkingMetadata (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples"
      ],
      "title": "GetLinkingMetadata (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "2ff925a95a082d2da546d1d20d80affcb1ef758e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api/",
      "published_at": "2021-06-08T20:40:38Z",
      "updated_at": "2021-03-16T14:32:47Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetLinkingMetadata(); Copy Returns key/value pairs which can be used to link traces or entities. Requirements Agent version 8.19 or higher. Compatible with all app types. Description The Dictionary of key/value pairs returned includes items used to link traces and entities in the APM product. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. Return values Dictionary < string, string>() returned includes items used to link traces and entities in the APM product. Examples NewRelic.Api.Agent.IAgent Agent = NewRelic.Api.Agent.NewRelic.GetAgent(); var linkingMetadata = Agent.GetLinkingMetadata(); foreach (KeyValuePair<string, string> kvp in linkingMetadata) { Console.WriteLine(\"Key = {0}, Value = {1}\", kvp.Key, kvp.Value); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58555,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetLinkingMetadata (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetLinkingMetadata(); Copy Returns key&#x2F;value pairs which can be used to link traces or entities. Requirements <em>Agent</em> version 8.19 or higher. Compatible with all app types. Description The Dictionary of key&#x2F;value pairs returned includes items used to link traces"
      },
      "id": "603ea75c28ccbc07bceba7c0"
    },
    {
      "sections": [
        "DisableBrowserMonitoring (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Disable automatic injection",
        "Disable automatic and manual injection"
      ],
      "title": "DisableBrowserMonitoring (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "7853e78e9446046adda3411f9c56900f8980e9cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api/",
      "published_at": "2021-06-08T20:38:29Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Add this call to disable the automatic injection of Browser monitoring scripts on specific pages. You can also add an optional override to disable both manual and automatic injection. In either case, put this API call as close as possible to the top of the view in which you want Browser disabled. Tip Compare GetBrowserTimingHeader(), which adds the Browser script to the page. Parameters Parameter Description $override boolean Optional. When true, disables all injection of Browser scripts. This flag affects both manual and automatic injection. This also overrides the GetBrowserTimingHeader() call. Examples Disable automatic injection This example disables only the automatic injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(); Copy Disable automatic and manual injection This example disables both automatic and manual injection of the snippet: NewRelic.Api.Agent.NewRelic.DisableBrowserMonitoring(true); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "DisableBrowserMonitoring (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.DisableBrowserMonitoring([boolean $override]) Copy Disable automatic injection of Browser monitoring snippet on specific pages. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description Add this call to disable the automatic"
      },
      "id": "603e9fea64441f66734e8894"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-06-08T20:39:38Z",
      "updated_at": "2021-03-16T14:31:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable Browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the Browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the Browser Monitoring Compatibility Requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.58545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a Browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/other-features/async-support-net": [
    {
      "sections": [
        "Browser monitoring and the .NET agent",
        "Auto-instrumentation",
        "Important",
        "Manual instrumentation via agent API",
        ".NET Web Forms view engine",
        "Other view engines such as Razor",
        ".NET MVC",
        "Disable instrumentation",
        "Disable auto-instrumentation",
        "Disable auto-instrumentation on a particular view",
        "Disable both automatic and manual instrumentation on a particular view",
        "Troubleshooting"
      ],
      "title": "Browser monitoring and the .NET agent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "746e8fe73518ac456d3dea8c3524822766fe5e74",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/browser-monitoring-net-agent/",
      "published_at": "2021-06-08T14:38:40Z",
      "updated_at": "2021-03-13T02:40:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the .NET agent, you can add Browser monitoring instrumentation to your webpages. Before you use Browser with your .NET agent, refer to the .NET agent release notes, and make sure you have the installed the latest .NET agent release. Follow the .NET agent requirements to install Browser monitoring. Then follow the procedures in this document to manually instrument the .NET agent. Auto-instrumentation Important This feature is not available for asp.net core applications whether they are monitored by the .NET Framework or Core agent. Browser auto-instrumentation is enabled by default. With Browser auto-instrumentation, the .NET Framework agent automatically injects the Browser JavaScript header into any page that has a content-type of text/html and also has <head> tag within the page. The <head> tag search starts at the beginning of the DOM. The .NET agent injects the JavaScript header through the addition of an HttpModule that modifies the page using HTTP response filters before streaming the content to the user. The first time you enable auto-instrumentation, you may need to clean your asp.net cache directory so that aspx pages are recompiled. Use the following command: flush_dotnet_temp.cmd Copy With this injection, previously functioning pages may stop working if a content-type is not set correctly. To correct, review and update the content-types in your app or disable auto-instrumentation. Manual instrumentation via agent API If you cannot enable auto-instrumentation, you can still include the Browser agent manually by using the New Relic .NET agent API and including appropriate code in your pages. To download the NewRelic.Api.agent.dll, re-run the installation and reference the .dll: From the New Relic .NET agent directory, select the New Relic.Net agent section, then select API Assembly. NuGet: Install and reference the .dll by running Install-package NewRelic.Agent.Api. To set up your web application to call the New Relic .NET agent API, add a reference to NewRelic.Api.Agent.dll to your project. Optional: If you are modifying the deployed application directory on the web server, copy NewRelic.Api.Agent.dll into the application's bin directory. Call the API in your <head> tag. If a meta-tag with the X-UA-COMPATIBLE http-equiv attribute exists, set it after that meta tag. .NET Web Forms view engine When using .NET Web Forms view engine, be sure to use = and not :. That way the view engine will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. If you are using .NET ASP Web Forms with master pages, add the header manually by calling GetBrowserTimingHeader() in your master page under the <head> tag: <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() %> Copy Import the namespace with: <%@ Import Namespace=\"NewRelic.Api.Agent\" %> Copy Other view engines such as Razor For other view engines such as Razor, you can use the GetBrowserTimingHeader() method to generate the header string. Here is a Razor-based view example: <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> </html> Copy .NET MVC When using .NET MVC, call the Html.Raw helper. That way, .NET MVC will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. Disable instrumentation To disable instrumentation: Disable auto-instrumentation To fully disable auto-instrumentation, edit newrelic.config and set the autoInstrument flag to false: <!-- disable auto instrumentation --> <browserMonitoring autoInstrument=\"false\"/> Copy Important If you change the flag or uninstall the .NET agent, be sure to flush your cache again so that references to the agent are removed from compiled files. Disable auto-instrumentation on a particular view To disable only auto-instrumentation on a particular view, use the agent API call DisableBrowserMonitoring(). Add this call in any view where Browser scripts are not needed or wanted. Put this API call as close as possible to the top of the view where you want it disabled. Disable both automatic and manual instrumentation on a particular view To disable both auto-instrumentation and manual instrumentation for individual webpages, use the agent API call DisableBrowserMonitoring(true). Troubleshooting Follow the troubleshooting procedures if you are unable to view any Browser timing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.23047,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "sections": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "With the .<em>NET</em> <em>agent</em>, you can add Browser monitoring instrumentation to your webpages. Before you use Browser with your .<em>NET</em> <em>agent</em>, refer to the .<em>NET</em> <em>agent</em> release notes, and make sure you have the installed the latest .<em>NET</em> <em>agent</em> release. Follow the .<em>NET</em> <em>agent</em> requirements to install Browser"
      },
      "id": "6043d3b664441f6d66378ed5"
    },
    {
      "sections": [
        "Limit log disk space with log rolling"
      ],
      "title": "Limit log disk space with log rolling",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "35ad3dc2e183ec2658d288e185a63ed1c4b4521f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/limit-log-disk-space-log-rolling/",
      "published_at": "2021-06-08T20:41:55Z",
      "updated_at": "2021-03-16T14:58:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To balance the need for logs while considering disk usage, each .NET agent will limit disk usage to 250MB using log rolling. The agent will first log to the file newrelic_agent_UNIQUENAME.log and create the file if it doesn't exist. Once that file reaches 50MB in size, the agent will: Create a new log file. Roll each existing log file to a new, sequentially numbered name (up to four archived files). Delete the fourth archive. To roll the log files, the old newrelic_agent_UNIQUENAME.log becomes the new newrelic_agent_UNIQUENAME.log(1). Then, the old newrelic_agent_UNIQUENAME.log(1) becomes the new newrelic_agent_UNIQUENAME.log(2), and so on. The old newrelic_agent_UNIQUENAME.log(4) is deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.60298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Other</em> <em>features</em>",
        "body": "To balance the need for logs while considering disk usage, each .<em>NET</em> <em>agent</em> will limit disk usage to 250MB using log rolling. The <em>agent</em> will first log to the file newrelic_<em>agent</em>_UNIQUENAME.log and create the file if it doesn&#x27;t exist. Once that file reaches 50MB in size, the <em>agent</em> will: Create a new"
      },
      "id": "603ea2f628ccbc9822eba77b"
    },
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "e5f9bd93b19834319b08c0b64afb53fb1cdba0dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-06-09T01:07:42Z",
      "updated_at": "2021-03-16T14:58:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.60298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "603eb36864441fdc6d4e88a2"
    }
  ],
  "/docs/agents/net-agent/other-features/browser-monitoring-net-agent": [
    {
      "sections": [
        "Limit log disk space with log rolling"
      ],
      "title": "Limit log disk space with log rolling",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "35ad3dc2e183ec2658d288e185a63ed1c4b4521f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/limit-log-disk-space-log-rolling/",
      "published_at": "2021-06-08T20:41:55Z",
      "updated_at": "2021-03-16T14:58:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To balance the need for logs while considering disk usage, each .NET agent will limit disk usage to 250MB using log rolling. The agent will first log to the file newrelic_agent_UNIQUENAME.log and create the file if it doesn't exist. Once that file reaches 50MB in size, the agent will: Create a new log file. Roll each existing log file to a new, sequentially numbered name (up to four archived files). Delete the fourth archive. To roll the log files, the old newrelic_agent_UNIQUENAME.log becomes the new newrelic_agent_UNIQUENAME.log(1). Then, the old newrelic_agent_UNIQUENAME.log(1) becomes the new newrelic_agent_UNIQUENAME.log(2), and so on. The old newrelic_agent_UNIQUENAME.log(4) is deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.60298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Other</em> <em>features</em>",
        "body": "To balance the need for logs while considering disk usage, each .<em>NET</em> <em>agent</em> will limit disk usage to 250MB using log rolling. The <em>agent</em> will first log to the file newrelic_<em>agent</em>_UNIQUENAME.log and create the file if it doesn&#x27;t exist. Once that file reaches 50MB in size, the <em>agent</em> will: Create a new"
      },
      "id": "603ea2f628ccbc9822eba77b"
    },
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "e5f9bd93b19834319b08c0b64afb53fb1cdba0dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-06-09T01:07:42Z",
      "updated_at": "2021-03-16T14:58:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.60298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "603eb36864441fdc6d4e88a2"
    },
    {
      "sections": [
        "Async support in .NET",
        "Features supporting async instrumentation",
        "HttpClient async methods",
        "RestClient async methods",
        "SqlCommand async methods",
        "SqlDataReader async methods",
        "NpgsqlCommand async methods (Postgres)",
        "Custom instrumentation",
        "Known limitations",
        "Requires updated ASP pipeline",
        "Instrumented async methods must have return type of Task or Task<T>, not void",
        "No instrumentation for begin* and end* style",
        "No capture of scoped metrics/segments in manually created threads",
        "For instrumented async methods, use await, not Task.Result()",
        "ContinueWith({}) block may affect timing measurements",
        "Problem with nesting in IIS-hosted WCF apps",
        "Segments don't auto-create stack traces"
      ],
      "title": "Async support in .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "8e1bd3f7d576bde032c478dbd4586e6c24c0fd85",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/async-support-net/",
      "published_at": "2021-06-08T14:38:39Z",
      "updated_at": "2021-03-13T02:40:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent automatically includes asynchronous framework instrumentation as of agent version 6.0. With the standard async-await pattern, introduced in .NET 4.5, calls to async methods can return even though the work being done in the called method is still in progress. The .NET agent observes this in-progress asynchronous work and waits for it to complete before recording timings. Features supporting async instrumentation With the addition of async support, new features are available in New Relic's .NET agent. However, as part of this enhancement, a small number of features previously provided by the agent currently are not available. Except as noted, the agent does not instrument async methods for any of the other supported frameworks for the .NET agent. HttpClient async methods The agent instruments these HttpClient async methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestClient async methods The agent instruments these RestClient async methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync SqlCommand async methods The agent instruments these SqlCommand async methods: ExecuteReaderAsync ExecuteNonQueryAsync ExecuteScalarAsync ExecuteXmlReaderAsync SqlDataReader async methods The agent instruments these SqlDataReader async methods: NextResultAsync ReadAsync NpgsqlCommand async methods (Postgres) The agent instruments these NpgsqlCommand async methods (Postgres): ExecuteReaderAsync ExecuteNonQueryAsync ExecuteScalarAsync Custom instrumentation The .NET agent supports custom instrumentation of your own async methods. Known limitations Here is a summary of known limitations for async instrumentation with New Relic's .NET agent. Requires updated ASP pipeline The .NET agent will not instrument async methods if the legacy ASP pipeline is present. Since Microsoft replaced the legacy ASP pipeline well before async methods were introduced, this issue typically only affects applications created under .NET Framework 4.0 or lower, then migrated to .NET Framework 4.5 or higher. To see if this issue affects your application, and how to resolve it if it does, review the troubleshooting procedures. Instrumented async methods must have return type of Task or Task<T>, not void The .NET agent does not support instrumentation of async methods that have return type of anything other than Task or Task<T>. The agent does not support async void methods. For more information, refer to the Microsoft documentation about async return types: Task < TResult> return type Async void and generalized async return types No instrumentation for begin* and end* style The .NET agent does not instrument any .NET methods that use the begin* and end* style, except for WCF applications. Outside of this exception, if your application calls these types of methods, the agent will not create segments for them. However, the rest of your transactions and segments will be created correctly. No capture of scoped metrics/segments in manually created threads The .NET agent does not capture scoped metrics or segments within threads that are manually created by your application. For instrumented async methods, use await, not Task.Result() If your application calls instrumented async methods, use await rather than Task related methods like Task.Result() to wait for the results. Otherwise, instrumentation may not work properly. In general, avoid using Task.Result() when calling async methods. It can lead to deadlocks. ContinueWith({}) block may affect timing measurements If you add your own ContinueWith({}) block to the promise returned by an instrumented async method, it may affect timing measurements reported by the instrumentation. For example, the time may include the time your ContinueWith takes to execute. Problem with nesting in IIS-hosted WCF apps IIS-hosted WCF services do not properly nest the WCF segment under the ExecuteRequestHandler segment. The two segments will appear to be siblings within a transaction trace, even though their reported total time will be accurate. Segments don't auto-create stack traces Segments in a transaction trace will not generate stack traces automatically, even if they run longer than transaction_tracer.stack_trace_threshold.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.15257,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Async support in .<em>NET</em>",
        "sections": "<em>Features</em> supporting async instrumentation",
        "tags": "<em>Other</em> <em>features</em>",
        "body": " observes this in-progress asynchronous work and waits for it to complete before recording timings. <em>Features</em> supporting async instrumentation With the addition of async support, new <em>features</em> are available in New Relic&#x27;s .<em>NET</em> <em>agent</em>. However, as part of this enhancement, a small number of <em>features</em>"
      },
      "id": "6043d96b28ccbc24e92c6094"
    }
  ],
  "/docs/agents/net-agent/other-features/limit-log-disk-space-log-rolling": [
    {
      "sections": [
        "Browser monitoring and the .NET agent",
        "Auto-instrumentation",
        "Important",
        "Manual instrumentation via agent API",
        ".NET Web Forms view engine",
        "Other view engines such as Razor",
        ".NET MVC",
        "Disable instrumentation",
        "Disable auto-instrumentation",
        "Disable auto-instrumentation on a particular view",
        "Disable both automatic and manual instrumentation on a particular view",
        "Troubleshooting"
      ],
      "title": "Browser monitoring and the .NET agent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "746e8fe73518ac456d3dea8c3524822766fe5e74",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/browser-monitoring-net-agent/",
      "published_at": "2021-06-08T14:38:40Z",
      "updated_at": "2021-03-13T02:40:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the .NET agent, you can add Browser monitoring instrumentation to your webpages. Before you use Browser with your .NET agent, refer to the .NET agent release notes, and make sure you have the installed the latest .NET agent release. Follow the .NET agent requirements to install Browser monitoring. Then follow the procedures in this document to manually instrument the .NET agent. Auto-instrumentation Important This feature is not available for asp.net core applications whether they are monitored by the .NET Framework or Core agent. Browser auto-instrumentation is enabled by default. With Browser auto-instrumentation, the .NET Framework agent automatically injects the Browser JavaScript header into any page that has a content-type of text/html and also has <head> tag within the page. The <head> tag search starts at the beginning of the DOM. The .NET agent injects the JavaScript header through the addition of an HttpModule that modifies the page using HTTP response filters before streaming the content to the user. The first time you enable auto-instrumentation, you may need to clean your asp.net cache directory so that aspx pages are recompiled. Use the following command: flush_dotnet_temp.cmd Copy With this injection, previously functioning pages may stop working if a content-type is not set correctly. To correct, review and update the content-types in your app or disable auto-instrumentation. Manual instrumentation via agent API If you cannot enable auto-instrumentation, you can still include the Browser agent manually by using the New Relic .NET agent API and including appropriate code in your pages. To download the NewRelic.Api.agent.dll, re-run the installation and reference the .dll: From the New Relic .NET agent directory, select the New Relic.Net agent section, then select API Assembly. NuGet: Install and reference the .dll by running Install-package NewRelic.Agent.Api. To set up your web application to call the New Relic .NET agent API, add a reference to NewRelic.Api.Agent.dll to your project. Optional: If you are modifying the deployed application directory on the web server, copy NewRelic.Api.Agent.dll into the application's bin directory. Call the API in your <head> tag. If a meta-tag with the X-UA-COMPATIBLE http-equiv attribute exists, set it after that meta tag. .NET Web Forms view engine When using .NET Web Forms view engine, be sure to use = and not :. That way the view engine will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. If you are using .NET ASP Web Forms with master pages, add the header manually by calling GetBrowserTimingHeader() in your master page under the <head> tag: <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() %> Copy Import the namespace with: <%@ Import Namespace=\"NewRelic.Api.Agent\" %> Copy Other view engines such as Razor For other view engines such as Razor, you can use the GetBrowserTimingHeader() method to generate the header string. Here is a Razor-based view example: <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> </html> Copy .NET MVC When using .NET MVC, call the Html.Raw helper. That way, .NET MVC will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. Disable instrumentation To disable instrumentation: Disable auto-instrumentation To fully disable auto-instrumentation, edit newrelic.config and set the autoInstrument flag to false: <!-- disable auto instrumentation --> <browserMonitoring autoInstrument=\"false\"/> Copy Important If you change the flag or uninstall the .NET agent, be sure to flush your cache again so that references to the agent are removed from compiled files. Disable auto-instrumentation on a particular view To disable only auto-instrumentation on a particular view, use the agent API call DisableBrowserMonitoring(). Add this call in any view where Browser scripts are not needed or wanted. Put this API call as close as possible to the top of the view where you want it disabled. Disable both automatic and manual instrumentation on a particular view To disable both auto-instrumentation and manual instrumentation for individual webpages, use the agent API call DisableBrowserMonitoring(true). Troubleshooting Follow the troubleshooting procedures if you are unable to view any Browser timing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.23047,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "sections": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "With the .<em>NET</em> <em>agent</em>, you can add Browser monitoring instrumentation to your webpages. Before you use Browser with your .<em>NET</em> <em>agent</em>, refer to the .<em>NET</em> <em>agent</em> release notes, and make sure you have the installed the latest .<em>NET</em> <em>agent</em> release. Follow the .<em>NET</em> <em>agent</em> requirements to install Browser"
      },
      "id": "6043d3b664441f6d66378ed5"
    },
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "e5f9bd93b19834319b08c0b64afb53fb1cdba0dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-06-09T01:07:42Z",
      "updated_at": "2021-03-16T14:58:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.60298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "603eb36864441fdc6d4e88a2"
    },
    {
      "sections": [
        "Async support in .NET",
        "Features supporting async instrumentation",
        "HttpClient async methods",
        "RestClient async methods",
        "SqlCommand async methods",
        "SqlDataReader async methods",
        "NpgsqlCommand async methods (Postgres)",
        "Custom instrumentation",
        "Known limitations",
        "Requires updated ASP pipeline",
        "Instrumented async methods must have return type of Task or Task<T>, not void",
        "No instrumentation for begin* and end* style",
        "No capture of scoped metrics/segments in manually created threads",
        "For instrumented async methods, use await, not Task.Result()",
        "ContinueWith({}) block may affect timing measurements",
        "Problem with nesting in IIS-hosted WCF apps",
        "Segments don't auto-create stack traces"
      ],
      "title": "Async support in .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "8e1bd3f7d576bde032c478dbd4586e6c24c0fd85",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/async-support-net/",
      "published_at": "2021-06-08T14:38:39Z",
      "updated_at": "2021-03-13T02:40:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent automatically includes asynchronous framework instrumentation as of agent version 6.0. With the standard async-await pattern, introduced in .NET 4.5, calls to async methods can return even though the work being done in the called method is still in progress. The .NET agent observes this in-progress asynchronous work and waits for it to complete before recording timings. Features supporting async instrumentation With the addition of async support, new features are available in New Relic's .NET agent. However, as part of this enhancement, a small number of features previously provided by the agent currently are not available. Except as noted, the agent does not instrument async methods for any of the other supported frameworks for the .NET agent. HttpClient async methods The agent instruments these HttpClient async methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestClient async methods The agent instruments these RestClient async methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync SqlCommand async methods The agent instruments these SqlCommand async methods: ExecuteReaderAsync ExecuteNonQueryAsync ExecuteScalarAsync ExecuteXmlReaderAsync SqlDataReader async methods The agent instruments these SqlDataReader async methods: NextResultAsync ReadAsync NpgsqlCommand async methods (Postgres) The agent instruments these NpgsqlCommand async methods (Postgres): ExecuteReaderAsync ExecuteNonQueryAsync ExecuteScalarAsync Custom instrumentation The .NET agent supports custom instrumentation of your own async methods. Known limitations Here is a summary of known limitations for async instrumentation with New Relic's .NET agent. Requires updated ASP pipeline The .NET agent will not instrument async methods if the legacy ASP pipeline is present. Since Microsoft replaced the legacy ASP pipeline well before async methods were introduced, this issue typically only affects applications created under .NET Framework 4.0 or lower, then migrated to .NET Framework 4.5 or higher. To see if this issue affects your application, and how to resolve it if it does, review the troubleshooting procedures. Instrumented async methods must have return type of Task or Task<T>, not void The .NET agent does not support instrumentation of async methods that have return type of anything other than Task or Task<T>. The agent does not support async void methods. For more information, refer to the Microsoft documentation about async return types: Task < TResult> return type Async void and generalized async return types No instrumentation for begin* and end* style The .NET agent does not instrument any .NET methods that use the begin* and end* style, except for WCF applications. Outside of this exception, if your application calls these types of methods, the agent will not create segments for them. However, the rest of your transactions and segments will be created correctly. No capture of scoped metrics/segments in manually created threads The .NET agent does not capture scoped metrics or segments within threads that are manually created by your application. For instrumented async methods, use await, not Task.Result() If your application calls instrumented async methods, use await rather than Task related methods like Task.Result() to wait for the results. Otherwise, instrumentation may not work properly. In general, avoid using Task.Result() when calling async methods. It can lead to deadlocks. ContinueWith({}) block may affect timing measurements If you add your own ContinueWith({}) block to the promise returned by an instrumented async method, it may affect timing measurements reported by the instrumentation. For example, the time may include the time your ContinueWith takes to execute. Problem with nesting in IIS-hosted WCF apps IIS-hosted WCF services do not properly nest the WCF segment under the ExecuteRequestHandler segment. The two segments will appear to be siblings within a transaction trace, even though their reported total time will be accurate. Segments don't auto-create stack traces Segments in a transaction trace will not generate stack traces automatically, even if they run longer than transaction_tracer.stack_trace_threshold.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.15257,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Async support in .<em>NET</em>",
        "sections": "<em>Features</em> supporting async instrumentation",
        "tags": "<em>Other</em> <em>features</em>",
        "body": " observes this in-progress asynchronous work and waits for it to complete before recording timings. <em>Features</em> supporting async instrumentation With the addition of async support, new <em>features</em> are available in New Relic&#x27;s .<em>NET</em> <em>agent</em>. However, as part of this enhancement, a small number of <em>features</em>"
      },
      "id": "6043d96b28ccbc24e92c6094"
    }
  ],
  "/docs/agents/net-agent/other-features/net-performance-metrics": [
    {
      "sections": [
        "Browser monitoring and the .NET agent",
        "Auto-instrumentation",
        "Important",
        "Manual instrumentation via agent API",
        ".NET Web Forms view engine",
        "Other view engines such as Razor",
        ".NET MVC",
        "Disable instrumentation",
        "Disable auto-instrumentation",
        "Disable auto-instrumentation on a particular view",
        "Disable both automatic and manual instrumentation on a particular view",
        "Troubleshooting"
      ],
      "title": "Browser monitoring and the .NET agent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "746e8fe73518ac456d3dea8c3524822766fe5e74",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/browser-monitoring-net-agent/",
      "published_at": "2021-06-08T14:38:40Z",
      "updated_at": "2021-03-13T02:40:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the .NET agent, you can add Browser monitoring instrumentation to your webpages. Before you use Browser with your .NET agent, refer to the .NET agent release notes, and make sure you have the installed the latest .NET agent release. Follow the .NET agent requirements to install Browser monitoring. Then follow the procedures in this document to manually instrument the .NET agent. Auto-instrumentation Important This feature is not available for asp.net core applications whether they are monitored by the .NET Framework or Core agent. Browser auto-instrumentation is enabled by default. With Browser auto-instrumentation, the .NET Framework agent automatically injects the Browser JavaScript header into any page that has a content-type of text/html and also has <head> tag within the page. The <head> tag search starts at the beginning of the DOM. The .NET agent injects the JavaScript header through the addition of an HttpModule that modifies the page using HTTP response filters before streaming the content to the user. The first time you enable auto-instrumentation, you may need to clean your asp.net cache directory so that aspx pages are recompiled. Use the following command: flush_dotnet_temp.cmd Copy With this injection, previously functioning pages may stop working if a content-type is not set correctly. To correct, review and update the content-types in your app or disable auto-instrumentation. Manual instrumentation via agent API If you cannot enable auto-instrumentation, you can still include the Browser agent manually by using the New Relic .NET agent API and including appropriate code in your pages. To download the NewRelic.Api.agent.dll, re-run the installation and reference the .dll: From the New Relic .NET agent directory, select the New Relic.Net agent section, then select API Assembly. NuGet: Install and reference the .dll by running Install-package NewRelic.Agent.Api. To set up your web application to call the New Relic .NET agent API, add a reference to NewRelic.Api.Agent.dll to your project. Optional: If you are modifying the deployed application directory on the web server, copy NewRelic.Api.Agent.dll into the application's bin directory. Call the API in your <head> tag. If a meta-tag with the X-UA-COMPATIBLE http-equiv attribute exists, set it after that meta tag. .NET Web Forms view engine When using .NET Web Forms view engine, be sure to use = and not :. That way the view engine will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. If you are using .NET ASP Web Forms with master pages, add the header manually by calling GetBrowserTimingHeader() in your master page under the <head> tag: <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() %> Copy Import the namespace with: <%@ Import Namespace=\"NewRelic.Api.Agent\" %> Copy Other view engines such as Razor For other view engines such as Razor, you can use the GetBrowserTimingHeader() method to generate the header string. Here is a Razor-based view example: <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> </html> Copy .NET MVC When using .NET MVC, call the Html.Raw helper. That way, .NET MVC will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. Disable instrumentation To disable instrumentation: Disable auto-instrumentation To fully disable auto-instrumentation, edit newrelic.config and set the autoInstrument flag to false: <!-- disable auto instrumentation --> <browserMonitoring autoInstrument=\"false\"/> Copy Important If you change the flag or uninstall the .NET agent, be sure to flush your cache again so that references to the agent are removed from compiled files. Disable auto-instrumentation on a particular view To disable only auto-instrumentation on a particular view, use the agent API call DisableBrowserMonitoring(). Add this call in any view where Browser scripts are not needed or wanted. Put this API call as close as possible to the top of the view where you want it disabled. Disable both automatic and manual instrumentation on a particular view To disable both auto-instrumentation and manual instrumentation for individual webpages, use the agent API call DisableBrowserMonitoring(true). Troubleshooting Follow the troubleshooting procedures if you are unable to view any Browser timing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.23047,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "sections": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "With the .<em>NET</em> <em>agent</em>, you can add Browser monitoring instrumentation to your webpages. Before you use Browser with your .<em>NET</em> <em>agent</em>, refer to the .<em>NET</em> <em>agent</em> release notes, and make sure you have the installed the latest .<em>NET</em> <em>agent</em> release. Follow the .<em>NET</em> <em>agent</em> requirements to install Browser"
      },
      "id": "6043d3b664441f6d66378ed5"
    },
    {
      "sections": [
        "Limit log disk space with log rolling"
      ],
      "title": "Limit log disk space with log rolling",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "35ad3dc2e183ec2658d288e185a63ed1c4b4521f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/limit-log-disk-space-log-rolling/",
      "published_at": "2021-06-08T20:41:55Z",
      "updated_at": "2021-03-16T14:58:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To balance the need for logs while considering disk usage, each .NET agent will limit disk usage to 250MB using log rolling. The agent will first log to the file newrelic_agent_UNIQUENAME.log and create the file if it doesn't exist. Once that file reaches 50MB in size, the agent will: Create a new log file. Roll each existing log file to a new, sequentially numbered name (up to four archived files). Delete the fourth archive. To roll the log files, the old newrelic_agent_UNIQUENAME.log becomes the new newrelic_agent_UNIQUENAME.log(1). Then, the old newrelic_agent_UNIQUENAME.log(1) becomes the new newrelic_agent_UNIQUENAME.log(2), and so on. The old newrelic_agent_UNIQUENAME.log(4) is deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.60298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Other</em> <em>features</em>",
        "body": "To balance the need for logs while considering disk usage, each .<em>NET</em> <em>agent</em> will limit disk usage to 250MB using log rolling. The <em>agent</em> will first log to the file newrelic_<em>agent</em>_UNIQUENAME.log and create the file if it doesn&#x27;t exist. Once that file reaches 50MB in size, the <em>agent</em> will: Create a new"
      },
      "id": "603ea2f628ccbc9822eba77b"
    },
    {
      "sections": [
        "Async support in .NET",
        "Features supporting async instrumentation",
        "HttpClient async methods",
        "RestClient async methods",
        "SqlCommand async methods",
        "SqlDataReader async methods",
        "NpgsqlCommand async methods (Postgres)",
        "Custom instrumentation",
        "Known limitations",
        "Requires updated ASP pipeline",
        "Instrumented async methods must have return type of Task or Task<T>, not void",
        "No instrumentation for begin* and end* style",
        "No capture of scoped metrics/segments in manually created threads",
        "For instrumented async methods, use await, not Task.Result()",
        "ContinueWith({}) block may affect timing measurements",
        "Problem with nesting in IIS-hosted WCF apps",
        "Segments don't auto-create stack traces"
      ],
      "title": "Async support in .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "8e1bd3f7d576bde032c478dbd4586e6c24c0fd85",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/async-support-net/",
      "published_at": "2021-06-08T14:38:39Z",
      "updated_at": "2021-03-13T02:40:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent automatically includes asynchronous framework instrumentation as of agent version 6.0. With the standard async-await pattern, introduced in .NET 4.5, calls to async methods can return even though the work being done in the called method is still in progress. The .NET agent observes this in-progress asynchronous work and waits for it to complete before recording timings. Features supporting async instrumentation With the addition of async support, new features are available in New Relic's .NET agent. However, as part of this enhancement, a small number of features previously provided by the agent currently are not available. Except as noted, the agent does not instrument async methods for any of the other supported frameworks for the .NET agent. HttpClient async methods The agent instruments these HttpClient async methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestClient async methods The agent instruments these RestClient async methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync SqlCommand async methods The agent instruments these SqlCommand async methods: ExecuteReaderAsync ExecuteNonQueryAsync ExecuteScalarAsync ExecuteXmlReaderAsync SqlDataReader async methods The agent instruments these SqlDataReader async methods: NextResultAsync ReadAsync NpgsqlCommand async methods (Postgres) The agent instruments these NpgsqlCommand async methods (Postgres): ExecuteReaderAsync ExecuteNonQueryAsync ExecuteScalarAsync Custom instrumentation The .NET agent supports custom instrumentation of your own async methods. Known limitations Here is a summary of known limitations for async instrumentation with New Relic's .NET agent. Requires updated ASP pipeline The .NET agent will not instrument async methods if the legacy ASP pipeline is present. Since Microsoft replaced the legacy ASP pipeline well before async methods were introduced, this issue typically only affects applications created under .NET Framework 4.0 or lower, then migrated to .NET Framework 4.5 or higher. To see if this issue affects your application, and how to resolve it if it does, review the troubleshooting procedures. Instrumented async methods must have return type of Task or Task<T>, not void The .NET agent does not support instrumentation of async methods that have return type of anything other than Task or Task<T>. The agent does not support async void methods. For more information, refer to the Microsoft documentation about async return types: Task < TResult> return type Async void and generalized async return types No instrumentation for begin* and end* style The .NET agent does not instrument any .NET methods that use the begin* and end* style, except for WCF applications. Outside of this exception, if your application calls these types of methods, the agent will not create segments for them. However, the rest of your transactions and segments will be created correctly. No capture of scoped metrics/segments in manually created threads The .NET agent does not capture scoped metrics or segments within threads that are manually created by your application. For instrumented async methods, use await, not Task.Result() If your application calls instrumented async methods, use await rather than Task related methods like Task.Result() to wait for the results. Otherwise, instrumentation may not work properly. In general, avoid using Task.Result() when calling async methods. It can lead to deadlocks. ContinueWith({}) block may affect timing measurements If you add your own ContinueWith({}) block to the promise returned by an instrumented async method, it may affect timing measurements reported by the instrumentation. For example, the time may include the time your ContinueWith takes to execute. Problem with nesting in IIS-hosted WCF apps IIS-hosted WCF services do not properly nest the WCF segment under the ExecuteRequestHandler segment. The two segments will appear to be siblings within a transaction trace, even though their reported total time will be accurate. Segments don't auto-create stack traces Segments in a transaction trace will not generate stack traces automatically, even if they run longer than transaction_tracer.stack_trace_threshold.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.15257,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Async support in .<em>NET</em>",
        "sections": "<em>Features</em> supporting async instrumentation",
        "tags": "<em>Other</em> <em>features</em>",
        "body": " observes this in-progress asynchronous work and waits for it to complete before recording timings. <em>Features</em> supporting async instrumentation With the addition of async support, new <em>features</em> are available in New Relic&#x27;s .<em>NET</em> <em>agent</em>. However, as part of this enhancement, a small number of <em>features</em>"
      },
      "id": "6043d96b28ccbc24e92c6094"
    }
  ],
  "/docs/agents/net-agent/other-installation/how-verify-checksum-net-agent-downloads": [
    {
      "sections": [
        "Install .NET agent for Windows Communication Foundation (WCF)",
        "Install for WCF applications",
        "Important",
        "ASP.NET pipeline events and WCF events",
        "Only WCF events"
      ],
      "title": "Install .NET agent for Windows Communication Foundation (WCF)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "c39d558ff81b712496798549087933ccabcc2586",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-windows-communication-foundation-wcf/",
      "published_at": "2021-06-08T20:43:01Z",
      "updated_at": "2021-03-16T04:35:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the .NET agent and monitor WCF applications. Install for WCF applications To install the .NET agent on IIS-hosted WCF apps: Install the latest .NET agent. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app, or a Windows Forms app) take note of the instructions to enable the agent for your application. Ensure you give each WCF app a descriptive name. Enable or disable ASP.NET compatibility mode in your WCF application depending on which type of events you want monitored: ASP.NET pipeline events and WCF events When ASP.NET compatibility mode is enabled, the .NET agent instruments ASP.NET pipeline events as well as WCF events. In this mode, the agent provides you with a full view of your application stack. Only WCF events When ASP.NET compatibility mode is disabled, the .NET agent only instruments WCF events. Any activity that occurs as part of the ASP.NET pipeline will not be captured, such as agent API calls that are made outside of a WCF transaction. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.17982,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document explains how to install the .<em>NET</em> <em>agent</em> and monitor WCF applications. Install for WCF applications To install the .<em>NET</em> <em>agent</em> on IIS-hosted WCF apps: Install the latest .<em>NET</em> <em>agent</em>. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app"
      },
      "id": "603ea62e196a679eb4a83d8d"
    },
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Tip",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "d0515c81825c0b108418459b6c14a510b540c206",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-06-09T01:07:51Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile FROM microsoft/dotnet:2.2-aspnetcore-runtime # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile FROM microsoft/dotnet:2.2-sdk AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet build -c Release -o /app/ ./YOUR_APP_NAME FROM microsoft/dotnet:2.2-aspnetcore-runtime AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM microsoft/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i,\\ \"C:\\NewRelicDotNetAgent_x64.msi\",\\ /qn,NR_LICENSE_KEY=YOUR_LICENSE_KEY # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"C:\\NewRelicDotNetAgent_x64.msi\", /qn, NR_LICENSE_KEY=YOUR_LICENSE_KEY # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windowsservercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.52933,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": " for either Windows or Linux. It&#x27;s just a matter of configuring your Dockerfile to perform the procedure. Tip To use .<em>NET</em> or any <em>other</em> <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB"
      },
      "id": "603e85bde7b9d2b26c2a07fd"
    },
    {
      "sections": [
        ".NET agent install resources",
        "Important",
        "Microsoft's .NET profiler",
        ".NET agent download library",
        "Zip files for manual .NET agent install (Windows)",
        "Caution",
        ".NET Framework environment variables for manual install",
        ".NET Core environment variables for manual install",
        "Need for custom instrumentation",
        "Install-related environment variables",
        "Scriptable installers (Windows only)",
        "Scriptable installer for .NET Framework",
        "Tip",
        "Scriptable installer for .NET Core",
        "Local install",
        "Global install"
      ],
      "title": ".NET agent install resources",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "15e6347108ca11e12ccb535fb9fc3fa90d3f4a40",
      "image": "",
      "url": "https://docs.newrelic.com/docs/net-agent-install-resources/",
      "published_at": "2021-06-09T00:51:14Z",
      "updated_at": "2021-03-16T02:42:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains detailed descriptions of resources and procedures that are referenced in the New Relic .NET agent install procedures. Important This document is not meant to be read as a standalone document. For install instructions, see Introduction to .NET agent install. Microsoft's .NET profiler New Relic’s .NET agent relies on the Microsoft profiling API to report data from your .NET application. .NET monitoring solutions other than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .NET monitoring service in the past and haven’t completely disabled/removed it, the profiler may still be in use, which will cause profiler conflicts when you try to enable the .NET agent. .NET agent download library The New Relic .NET agent download library contains install file packages that are referenced in specific install procedures. For more on these files, see the download library’s ReadMe file. Zip files for manual .NET agent install (Windows) To manually install the agent using a ZIP file, choose the correct file for the application you wish to monitor: Go to the .NET agent download site and get the file matching your application's runtime and architecture: .NET Framework (32-bit): newrelic-agent-win-x86-VERSION.zip .NET Framework (64-bit): newrelic-agent-win-x64-VERSION.zip .NET Core (32-bit): newrelic-netcore20-agent-win-x86-VERSION.zip .NET Core (64-bit): newrelic-netcore20-agent-win-x64-VERSION.zip Unzip the agent folder in the desired location. Set environment variables for the process you wish to monitor. Caution We do not recommend setting these environment variables globally. Setting these environment variables globally can cause all .NET processes running on the system to get instrumented and report to New Relic. If you are installing the agent manually, we expect that you have the means to set these environment variables only for the processes you wish to monitor. .NET Framework environment variables for manual install For .NET Framework, the following variables are required: COR_ENABLE_PROFILING=1 COR_PROFILER={71DA0A04-7777-4EC6-9643-7D28B46A8A41} NEWRELIC_HOME=path\\to\\agent\\directory COR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy .NET Core environment variables for manual install For .NET Core, the following variables are required: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_NEWRELIC_HOME=path\\to\\agent\\directory CORECLR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy Restart your application. If using IIS, restart IIS. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Need for custom instrumentation After installing a .NET agent, most .NET application frameworks will automatically report data to your New Relic account. (See app framework compatibility: .NET Framework | .NET Core.) If your .NET application uses an application framework that is not automatically instrumented, or if the app has no framework (like a console app), after the install you will need to manually set up instrumentation of your app. Here are the steps to do that: Follow the relevant install instructions for your application and framework. Custom instrument your application to define what activity is reported to New Relic. Install-related environment variables A .NET agent install requires setting environment variables. For some install procedures (like for IIS-hosted .NET applications), these environment variables are set automatically. For other install procedures, you will have to manually set them. To see the required environment variables for both .NET Framework and .NET Core applications, see Environment variables. For installations requiring you to manually set environment variables, you can also set other configuration options via environment variables. Here's a look at two that are commonly set: License key. The environment variable for setting the New Relic license key is: NEW_RELIC_LICENSE_KEY = YOUR_LICENSE_KEY Copy You can also set this in the newrelic.config file or the app's config file. App name. Setting a meaningful application name is recommended, but you can also set this after install. The environment variable is: NEW_RELIC_APP_NAME = YOUR_APP_NAME Copy You can also set this via the newrelic.config, the app's config file, or the API. Scriptable installers (Windows only) The scriptable installers are ZIP archives containing a PowerShell script for installing the .NET agent. There is a separate zip archive for .NET Framework versus .NET Core. Important We recommend using the MSI installer over the scriptable installer. If you want to automate your install, consider running the MSI installer from the command line. Scriptable installer for .NET Framework To use the scriptable installer to install the .NET agent for a .NET Framework app: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation. Download the scriptable installer package for .NET Framework from the download site. By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package. Open a command shell and navigate into the unzipped package's folder. For a simple install with no options, use this command: .\\install.cmd -LicenseKey YOUR_LICENSE_KEY Copy To install with one or more additional options, use the format below. See table below for a description of the install options. install.cmd -LicenseKey YOUR_LICENSE_KEY [-NoIISReset] [-InstrumentAll] [-InstallPath PATH_TO_INSTALL] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description LicenseKey Required. Your New Relic license key. NoIISReset Optional. Use this option to prevent the installer from initiating an IIS reset. Important If you use this option, you need to do an IIS reset manually before New Relic starts instrumenting any IIS-hosted applications. InstrumentAll Optional. By default, the .NET agent will instrument all IIS-hosted applications. Use this option to enable instrumentation of other types of .NET applications. InstallPath Optional. Use this option to choose a different installation location. The default install location is C:\\Program Files\\New Relic. Uninstalling the agent with the scriptable uninstaller: Tip You can add the Force option to the uninstall script to force an uninstall without prompting to restart IIS. Execute the following command to uninstall the .NET Framework agent: .\\uninstall.cmd Copy Scriptable installer for .NET Core Important Before installing the agent: Understand the agent requirements, including the permissions requirements. Note that admin rights in an elevated shell are required (specifically for selecting a custom log directory and performing an IISReset). Caution For security reasons, it is necessary to execute the installAgent.ps1 script as shown below, by prepending ./ to the script filename, rather than by prepending powershell to the script. If you execute the script by prepending powershell, and any of your supplied arguments (e.g. the install path or custom log path) have spaces in them, these arguments will be corrupted, which would lead to the agent being installed to a location other than the intended location, which could be unsecure. To use the scriptable installer to install the .NET agent for a .NET Core application: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation Download the .NET Core agent's scriptable installer package from the .NET agent download site . By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package in the desired location. Open a command shell and navigate into the unzipped package's folder. You can install the agent either locally or globally: Local install For a simple install, with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy Global install Important The global install will instrument all .NET Core processes on your system. Only choose the global install if you want all .NET Core processes monitored. For a simple install with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description Destination Required. The location where the agent is installed. This can be an absolute or relative path. Wrapping quotes are required. InstallType Required. Determines whether this is a local (app-specific) or global (system-wide) install. LicenseKey Required. Your New Relic license key. AppName Optional. Sets the default application name associated with your agent installation. LogDir Optional. Sets a custom logging location for the agent. By default, the agent puts the logs directory in the install directory. X86 Optional. Installs the 32-bit version of the agent rather than the 64-bit version. New Relic does not recommend installing the 32-bit version of the agent globally. ResetIIS Optional. Performs an iisreset after the installation. Important Only use this if your .NET Core app is hosted via an IIS reverse proxy. Force Optional. Forces the installation process to overwrite a previous install or to install into an existing folder. Caution This overwrites any configuration customizations. New Relic recommends backing up your configuration file and any custom instrumentation files prior to forcing an over-install. Help Optional. Displays usage information for this script.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.128876,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "sections": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": " profiler New Relic’s .<em>NET</em> <em>agent</em> relies on the Microsoft profiling API to report data from your .<em>NET</em> application. .<em>NET</em> monitoring solutions <em>other</em> than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .<em>NET</em> monitoring service"
      },
      "id": "603eb8ba28ccbc3daceba773"
    }
  ],
  "/docs/agents/net-agent/other-installation/install-net-agent-aspnet-core": [
    {
      "sections": [
        "Install .NET agent for Windows Communication Foundation (WCF)",
        "Install for WCF applications",
        "Important",
        "ASP.NET pipeline events and WCF events",
        "Only WCF events"
      ],
      "title": "Install .NET agent for Windows Communication Foundation (WCF)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "c39d558ff81b712496798549087933ccabcc2586",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-windows-communication-foundation-wcf/",
      "published_at": "2021-06-08T20:43:01Z",
      "updated_at": "2021-03-16T04:35:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the .NET agent and monitor WCF applications. Install for WCF applications To install the .NET agent on IIS-hosted WCF apps: Install the latest .NET agent. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app, or a Windows Forms app) take note of the instructions to enable the agent for your application. Ensure you give each WCF app a descriptive name. Enable or disable ASP.NET compatibility mode in your WCF application depending on which type of events you want monitored: ASP.NET pipeline events and WCF events When ASP.NET compatibility mode is enabled, the .NET agent instruments ASP.NET pipeline events as well as WCF events. In this mode, the agent provides you with a full view of your application stack. Only WCF events When ASP.NET compatibility mode is disabled, the .NET agent only instruments WCF events. Any activity that occurs as part of the ASP.NET pipeline will not be captured, such as agent API calls that are made outside of a WCF transaction. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.17982,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document explains how to install the .<em>NET</em> <em>agent</em> and monitor WCF applications. Install for WCF applications To install the .<em>NET</em> <em>agent</em> on IIS-hosted WCF apps: Install the latest .<em>NET</em> <em>agent</em>. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app"
      },
      "id": "603ea62e196a679eb4a83d8d"
    },
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Tip",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "d0515c81825c0b108418459b6c14a510b540c206",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-06-09T01:07:51Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile FROM microsoft/dotnet:2.2-aspnetcore-runtime # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile FROM microsoft/dotnet:2.2-sdk AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet build -c Release -o /app/ ./YOUR_APP_NAME FROM microsoft/dotnet:2.2-aspnetcore-runtime AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM microsoft/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i,\\ \"C:\\NewRelicDotNetAgent_x64.msi\",\\ /qn,NR_LICENSE_KEY=YOUR_LICENSE_KEY # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"C:\\NewRelicDotNetAgent_x64.msi\", /qn, NR_LICENSE_KEY=YOUR_LICENSE_KEY # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windowsservercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.52933,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": " for either Windows or Linux. It&#x27;s just a matter of configuring your Dockerfile to perform the procedure. Tip To use .<em>NET</em> or any <em>other</em> <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB"
      },
      "id": "603e85bde7b9d2b26c2a07fd"
    },
    {
      "sections": [
        ".NET agent install resources",
        "Important",
        "Microsoft's .NET profiler",
        ".NET agent download library",
        "Zip files for manual .NET agent install (Windows)",
        "Caution",
        ".NET Framework environment variables for manual install",
        ".NET Core environment variables for manual install",
        "Need for custom instrumentation",
        "Install-related environment variables",
        "Scriptable installers (Windows only)",
        "Scriptable installer for .NET Framework",
        "Tip",
        "Scriptable installer for .NET Core",
        "Local install",
        "Global install"
      ],
      "title": ".NET agent install resources",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "15e6347108ca11e12ccb535fb9fc3fa90d3f4a40",
      "image": "",
      "url": "https://docs.newrelic.com/docs/net-agent-install-resources/",
      "published_at": "2021-06-09T00:51:14Z",
      "updated_at": "2021-03-16T02:42:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains detailed descriptions of resources and procedures that are referenced in the New Relic .NET agent install procedures. Important This document is not meant to be read as a standalone document. For install instructions, see Introduction to .NET agent install. Microsoft's .NET profiler New Relic’s .NET agent relies on the Microsoft profiling API to report data from your .NET application. .NET monitoring solutions other than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .NET monitoring service in the past and haven’t completely disabled/removed it, the profiler may still be in use, which will cause profiler conflicts when you try to enable the .NET agent. .NET agent download library The New Relic .NET agent download library contains install file packages that are referenced in specific install procedures. For more on these files, see the download library’s ReadMe file. Zip files for manual .NET agent install (Windows) To manually install the agent using a ZIP file, choose the correct file for the application you wish to monitor: Go to the .NET agent download site and get the file matching your application's runtime and architecture: .NET Framework (32-bit): newrelic-agent-win-x86-VERSION.zip .NET Framework (64-bit): newrelic-agent-win-x64-VERSION.zip .NET Core (32-bit): newrelic-netcore20-agent-win-x86-VERSION.zip .NET Core (64-bit): newrelic-netcore20-agent-win-x64-VERSION.zip Unzip the agent folder in the desired location. Set environment variables for the process you wish to monitor. Caution We do not recommend setting these environment variables globally. Setting these environment variables globally can cause all .NET processes running on the system to get instrumented and report to New Relic. If you are installing the agent manually, we expect that you have the means to set these environment variables only for the processes you wish to monitor. .NET Framework environment variables for manual install For .NET Framework, the following variables are required: COR_ENABLE_PROFILING=1 COR_PROFILER={71DA0A04-7777-4EC6-9643-7D28B46A8A41} NEWRELIC_HOME=path\\to\\agent\\directory COR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy .NET Core environment variables for manual install For .NET Core, the following variables are required: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_NEWRELIC_HOME=path\\to\\agent\\directory CORECLR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy Restart your application. If using IIS, restart IIS. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Need for custom instrumentation After installing a .NET agent, most .NET application frameworks will automatically report data to your New Relic account. (See app framework compatibility: .NET Framework | .NET Core.) If your .NET application uses an application framework that is not automatically instrumented, or if the app has no framework (like a console app), after the install you will need to manually set up instrumentation of your app. Here are the steps to do that: Follow the relevant install instructions for your application and framework. Custom instrument your application to define what activity is reported to New Relic. Install-related environment variables A .NET agent install requires setting environment variables. For some install procedures (like for IIS-hosted .NET applications), these environment variables are set automatically. For other install procedures, you will have to manually set them. To see the required environment variables for both .NET Framework and .NET Core applications, see Environment variables. For installations requiring you to manually set environment variables, you can also set other configuration options via environment variables. Here's a look at two that are commonly set: License key. The environment variable for setting the New Relic license key is: NEW_RELIC_LICENSE_KEY = YOUR_LICENSE_KEY Copy You can also set this in the newrelic.config file or the app's config file. App name. Setting a meaningful application name is recommended, but you can also set this after install. The environment variable is: NEW_RELIC_APP_NAME = YOUR_APP_NAME Copy You can also set this via the newrelic.config, the app's config file, or the API. Scriptable installers (Windows only) The scriptable installers are ZIP archives containing a PowerShell script for installing the .NET agent. There is a separate zip archive for .NET Framework versus .NET Core. Important We recommend using the MSI installer over the scriptable installer. If you want to automate your install, consider running the MSI installer from the command line. Scriptable installer for .NET Framework To use the scriptable installer to install the .NET agent for a .NET Framework app: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation. Download the scriptable installer package for .NET Framework from the download site. By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package. Open a command shell and navigate into the unzipped package's folder. For a simple install with no options, use this command: .\\install.cmd -LicenseKey YOUR_LICENSE_KEY Copy To install with one or more additional options, use the format below. See table below for a description of the install options. install.cmd -LicenseKey YOUR_LICENSE_KEY [-NoIISReset] [-InstrumentAll] [-InstallPath PATH_TO_INSTALL] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description LicenseKey Required. Your New Relic license key. NoIISReset Optional. Use this option to prevent the installer from initiating an IIS reset. Important If you use this option, you need to do an IIS reset manually before New Relic starts instrumenting any IIS-hosted applications. InstrumentAll Optional. By default, the .NET agent will instrument all IIS-hosted applications. Use this option to enable instrumentation of other types of .NET applications. InstallPath Optional. Use this option to choose a different installation location. The default install location is C:\\Program Files\\New Relic. Uninstalling the agent with the scriptable uninstaller: Tip You can add the Force option to the uninstall script to force an uninstall without prompting to restart IIS. Execute the following command to uninstall the .NET Framework agent: .\\uninstall.cmd Copy Scriptable installer for .NET Core Important Before installing the agent: Understand the agent requirements, including the permissions requirements. Note that admin rights in an elevated shell are required (specifically for selecting a custom log directory and performing an IISReset). Caution For security reasons, it is necessary to execute the installAgent.ps1 script as shown below, by prepending ./ to the script filename, rather than by prepending powershell to the script. If you execute the script by prepending powershell, and any of your supplied arguments (e.g. the install path or custom log path) have spaces in them, these arguments will be corrupted, which would lead to the agent being installed to a location other than the intended location, which could be unsecure. To use the scriptable installer to install the .NET agent for a .NET Core application: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation Download the .NET Core agent's scriptable installer package from the .NET agent download site . By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package in the desired location. Open a command shell and navigate into the unzipped package's folder. You can install the agent either locally or globally: Local install For a simple install, with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy Global install Important The global install will instrument all .NET Core processes on your system. Only choose the global install if you want all .NET Core processes monitored. For a simple install with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description Destination Required. The location where the agent is installed. This can be an absolute or relative path. Wrapping quotes are required. InstallType Required. Determines whether this is a local (app-specific) or global (system-wide) install. LicenseKey Required. Your New Relic license key. AppName Optional. Sets the default application name associated with your agent installation. LogDir Optional. Sets a custom logging location for the agent. By default, the agent puts the logs directory in the install directory. X86 Optional. Installs the 32-bit version of the agent rather than the 64-bit version. New Relic does not recommend installing the 32-bit version of the agent globally. ResetIIS Optional. Performs an iisreset after the installation. Important Only use this if your .NET Core app is hosted via an IIS reverse proxy. Force Optional. Forces the installation process to overwrite a previous install or to install into an existing folder. Caution This overwrites any configuration customizations. New Relic recommends backing up your configuration file and any custom instrumentation files prior to forcing an over-install. Help Optional. Displays usage information for this script.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.128876,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "sections": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": " profiler New Relic’s .<em>NET</em> <em>agent</em> relies on the Microsoft profiling API to report data from your .<em>NET</em> application. .<em>NET</em> monitoring solutions <em>other</em> than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .<em>NET</em> monitoring service"
      },
      "id": "603eb8ba28ccbc3daceba773"
    }
  ],
  "/docs/agents/net-agent/other-installation/install-net-agent-docker-container": [
    {
      "sections": [
        "Install .NET agent for Windows Communication Foundation (WCF)",
        "Install for WCF applications",
        "Important",
        "ASP.NET pipeline events and WCF events",
        "Only WCF events"
      ],
      "title": "Install .NET agent for Windows Communication Foundation (WCF)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "c39d558ff81b712496798549087933ccabcc2586",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-windows-communication-foundation-wcf/",
      "published_at": "2021-06-08T20:43:01Z",
      "updated_at": "2021-03-16T04:35:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the .NET agent and monitor WCF applications. Install for WCF applications To install the .NET agent on IIS-hosted WCF apps: Install the latest .NET agent. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app, or a Windows Forms app) take note of the instructions to enable the agent for your application. Ensure you give each WCF app a descriptive name. Enable or disable ASP.NET compatibility mode in your WCF application depending on which type of events you want monitored: ASP.NET pipeline events and WCF events When ASP.NET compatibility mode is enabled, the .NET agent instruments ASP.NET pipeline events as well as WCF events. In this mode, the agent provides you with a full view of your application stack. Only WCF events When ASP.NET compatibility mode is disabled, the .NET agent only instruments WCF events. Any activity that occurs as part of the ASP.NET pipeline will not be captured, such as agent API calls that are made outside of a WCF transaction. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.17982,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document explains how to install the .<em>NET</em> <em>agent</em> and monitor WCF applications. Install for WCF applications To install the .<em>NET</em> <em>agent</em> on IIS-hosted WCF apps: Install the latest .<em>NET</em> <em>agent</em>. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app"
      },
      "id": "603ea62e196a679eb4a83d8d"
    },
    {
      "sections": [
        ".NET agent install resources",
        "Important",
        "Microsoft's .NET profiler",
        ".NET agent download library",
        "Zip files for manual .NET agent install (Windows)",
        "Caution",
        ".NET Framework environment variables for manual install",
        ".NET Core environment variables for manual install",
        "Need for custom instrumentation",
        "Install-related environment variables",
        "Scriptable installers (Windows only)",
        "Scriptable installer for .NET Framework",
        "Tip",
        "Scriptable installer for .NET Core",
        "Local install",
        "Global install"
      ],
      "title": ".NET agent install resources",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "15e6347108ca11e12ccb535fb9fc3fa90d3f4a40",
      "image": "",
      "url": "https://docs.newrelic.com/docs/net-agent-install-resources/",
      "published_at": "2021-06-09T00:51:14Z",
      "updated_at": "2021-03-16T02:42:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains detailed descriptions of resources and procedures that are referenced in the New Relic .NET agent install procedures. Important This document is not meant to be read as a standalone document. For install instructions, see Introduction to .NET agent install. Microsoft's .NET profiler New Relic’s .NET agent relies on the Microsoft profiling API to report data from your .NET application. .NET monitoring solutions other than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .NET monitoring service in the past and haven’t completely disabled/removed it, the profiler may still be in use, which will cause profiler conflicts when you try to enable the .NET agent. .NET agent download library The New Relic .NET agent download library contains install file packages that are referenced in specific install procedures. For more on these files, see the download library’s ReadMe file. Zip files for manual .NET agent install (Windows) To manually install the agent using a ZIP file, choose the correct file for the application you wish to monitor: Go to the .NET agent download site and get the file matching your application's runtime and architecture: .NET Framework (32-bit): newrelic-agent-win-x86-VERSION.zip .NET Framework (64-bit): newrelic-agent-win-x64-VERSION.zip .NET Core (32-bit): newrelic-netcore20-agent-win-x86-VERSION.zip .NET Core (64-bit): newrelic-netcore20-agent-win-x64-VERSION.zip Unzip the agent folder in the desired location. Set environment variables for the process you wish to monitor. Caution We do not recommend setting these environment variables globally. Setting these environment variables globally can cause all .NET processes running on the system to get instrumented and report to New Relic. If you are installing the agent manually, we expect that you have the means to set these environment variables only for the processes you wish to monitor. .NET Framework environment variables for manual install For .NET Framework, the following variables are required: COR_ENABLE_PROFILING=1 COR_PROFILER={71DA0A04-7777-4EC6-9643-7D28B46A8A41} NEWRELIC_HOME=path\\to\\agent\\directory COR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy .NET Core environment variables for manual install For .NET Core, the following variables are required: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_NEWRELIC_HOME=path\\to\\agent\\directory CORECLR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy Restart your application. If using IIS, restart IIS. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Need for custom instrumentation After installing a .NET agent, most .NET application frameworks will automatically report data to your New Relic account. (See app framework compatibility: .NET Framework | .NET Core.) If your .NET application uses an application framework that is not automatically instrumented, or if the app has no framework (like a console app), after the install you will need to manually set up instrumentation of your app. Here are the steps to do that: Follow the relevant install instructions for your application and framework. Custom instrument your application to define what activity is reported to New Relic. Install-related environment variables A .NET agent install requires setting environment variables. For some install procedures (like for IIS-hosted .NET applications), these environment variables are set automatically. For other install procedures, you will have to manually set them. To see the required environment variables for both .NET Framework and .NET Core applications, see Environment variables. For installations requiring you to manually set environment variables, you can also set other configuration options via environment variables. Here's a look at two that are commonly set: License key. The environment variable for setting the New Relic license key is: NEW_RELIC_LICENSE_KEY = YOUR_LICENSE_KEY Copy You can also set this in the newrelic.config file or the app's config file. App name. Setting a meaningful application name is recommended, but you can also set this after install. The environment variable is: NEW_RELIC_APP_NAME = YOUR_APP_NAME Copy You can also set this via the newrelic.config, the app's config file, or the API. Scriptable installers (Windows only) The scriptable installers are ZIP archives containing a PowerShell script for installing the .NET agent. There is a separate zip archive for .NET Framework versus .NET Core. Important We recommend using the MSI installer over the scriptable installer. If you want to automate your install, consider running the MSI installer from the command line. Scriptable installer for .NET Framework To use the scriptable installer to install the .NET agent for a .NET Framework app: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation. Download the scriptable installer package for .NET Framework from the download site. By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package. Open a command shell and navigate into the unzipped package's folder. For a simple install with no options, use this command: .\\install.cmd -LicenseKey YOUR_LICENSE_KEY Copy To install with one or more additional options, use the format below. See table below for a description of the install options. install.cmd -LicenseKey YOUR_LICENSE_KEY [-NoIISReset] [-InstrumentAll] [-InstallPath PATH_TO_INSTALL] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description LicenseKey Required. Your New Relic license key. NoIISReset Optional. Use this option to prevent the installer from initiating an IIS reset. Important If you use this option, you need to do an IIS reset manually before New Relic starts instrumenting any IIS-hosted applications. InstrumentAll Optional. By default, the .NET agent will instrument all IIS-hosted applications. Use this option to enable instrumentation of other types of .NET applications. InstallPath Optional. Use this option to choose a different installation location. The default install location is C:\\Program Files\\New Relic. Uninstalling the agent with the scriptable uninstaller: Tip You can add the Force option to the uninstall script to force an uninstall without prompting to restart IIS. Execute the following command to uninstall the .NET Framework agent: .\\uninstall.cmd Copy Scriptable installer for .NET Core Important Before installing the agent: Understand the agent requirements, including the permissions requirements. Note that admin rights in an elevated shell are required (specifically for selecting a custom log directory and performing an IISReset). Caution For security reasons, it is necessary to execute the installAgent.ps1 script as shown below, by prepending ./ to the script filename, rather than by prepending powershell to the script. If you execute the script by prepending powershell, and any of your supplied arguments (e.g. the install path or custom log path) have spaces in them, these arguments will be corrupted, which would lead to the agent being installed to a location other than the intended location, which could be unsecure. To use the scriptable installer to install the .NET agent for a .NET Core application: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation Download the .NET Core agent's scriptable installer package from the .NET agent download site . By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package in the desired location. Open a command shell and navigate into the unzipped package's folder. You can install the agent either locally or globally: Local install For a simple install, with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy Global install Important The global install will instrument all .NET Core processes on your system. Only choose the global install if you want all .NET Core processes monitored. For a simple install with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description Destination Required. The location where the agent is installed. This can be an absolute or relative path. Wrapping quotes are required. InstallType Required. Determines whether this is a local (app-specific) or global (system-wide) install. LicenseKey Required. Your New Relic license key. AppName Optional. Sets the default application name associated with your agent installation. LogDir Optional. Sets a custom logging location for the agent. By default, the agent puts the logs directory in the install directory. X86 Optional. Installs the 32-bit version of the agent rather than the 64-bit version. New Relic does not recommend installing the 32-bit version of the agent globally. ResetIIS Optional. Performs an iisreset after the installation. Important Only use this if your .NET Core app is hosted via an IIS reverse proxy. Force Optional. Forces the installation process to overwrite a previous install or to install into an existing folder. Caution This overwrites any configuration customizations. New Relic recommends backing up your configuration file and any custom instrumentation files prior to forcing an over-install. Help Optional. Displays usage information for this script.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.128876,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "sections": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": " profiler New Relic’s .<em>NET</em> <em>agent</em> relies on the Microsoft profiling API to report data from your .<em>NET</em> application. .<em>NET</em> monitoring solutions <em>other</em> than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .<em>NET</em> monitoring service"
      },
      "id": "603eb8ba28ccbc3daceba773"
    },
    {
      "sections": [
        "How to verify the checksum of .NET Agent downloads",
        "Windows",
        "CertUtil",
        "Powershell: Get-FileHash",
        "Linux",
        "sha256sum"
      ],
      "title": "How to verify the checksum of .NET Agent downloads",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "95a198f26d732f7cc1940079bfe5a29eca22a425",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/how-verify-checksum-net-agent-downloads/",
      "published_at": "2021-06-09T01:07:50Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about how to confirm the checksum for New Relic's .NET agent installers. If you need the hashes for our current releases, download their SHA256 hashes from our download site. Windows On Windows, we recommended using either CertUtil or Get-FileHash to compute a file hash. CertUtil This utility is available as part of Certificate Services and can be used to compute the hash of a file. This utility can be run from the Command Prompt or Powershell. To compute the hash, run: CertUtil -hashfile YOUR_FILENAME SHA256 If successful, you'll get this response: SHA256 hash of YOUR_FILENAME: 5092fd52e40132a41ac06c320296cd9d63196d6de0fa6ce9b74fc4de1b3f9502 CertUtil: -hashfile command completed successfully. Copy Powershell: Get-FileHash The Get-FileHash cmdlet is included with Powershell version 5.1+ and can be used to compute the hash of a file. To compute the hash, run: Get-FileHash YOUR_FILENAME Algorithm SHA256 | Format-List If successful, you'll get this response: Algorithm : SHA256 Hash : 5092FD52E40132A41AC06C320296CD9D63196D6DE0FA6CE9B74FC4DE1B3F9502 Path : C:\\Path\\To\\YOUR_FILENAME Copy Linux On Linux, we recommend using sha256sum Copy to compute a file hash. sha256sum To compute the hash, run: sha256sum YOUR_FILENAME If successful, you'll get this response: 5092fd52e40132a41ac06c320296cd9d63196d6de0fa6ce9b74fc4de1b3f9502 YOUR_FILENAME Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.80591,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "How to verify the checksum of .<em>NET</em> <em>Agent</em> downloads",
        "sections": "How to verify the checksum of .<em>NET</em> <em>Agent</em> downloads",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "Read about how to confirm the checksum for New Relic&#x27;s .<em>NET</em> <em>agent</em> installers. If you need the hashes for our current releases, download their SHA256 hashes from our download site. Windows On Windows, we recommended using either CertUtil or Get-FileHash to compute a file hash. CertUtil This utility"
      },
      "id": "603e829964441fea3c4e88a9"
    }
  ],
  "/docs/agents/net-agent/other-installation/install-net-agent-windows-communication-foundation-wcf": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Tip",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "d0515c81825c0b108418459b6c14a510b540c206",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-06-09T01:07:51Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile FROM microsoft/dotnet:2.2-aspnetcore-runtime # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile FROM microsoft/dotnet:2.2-sdk AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet build -c Release -o /app/ ./YOUR_APP_NAME FROM microsoft/dotnet:2.2-aspnetcore-runtime AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM microsoft/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i,\\ \"C:\\NewRelicDotNetAgent_x64.msi\",\\ /qn,NR_LICENSE_KEY=YOUR_LICENSE_KEY # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"C:\\NewRelicDotNetAgent_x64.msi\", /qn, NR_LICENSE_KEY=YOUR_LICENSE_KEY # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windowsservercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.52933,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": " for either Windows or Linux. It&#x27;s just a matter of configuring your Dockerfile to perform the procedure. Tip To use .<em>NET</em> or any <em>other</em> <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB"
      },
      "id": "603e85bde7b9d2b26c2a07fd"
    },
    {
      "sections": [
        ".NET agent install resources",
        "Important",
        "Microsoft's .NET profiler",
        ".NET agent download library",
        "Zip files for manual .NET agent install (Windows)",
        "Caution",
        ".NET Framework environment variables for manual install",
        ".NET Core environment variables for manual install",
        "Need for custom instrumentation",
        "Install-related environment variables",
        "Scriptable installers (Windows only)",
        "Scriptable installer for .NET Framework",
        "Tip",
        "Scriptable installer for .NET Core",
        "Local install",
        "Global install"
      ],
      "title": ".NET agent install resources",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "15e6347108ca11e12ccb535fb9fc3fa90d3f4a40",
      "image": "",
      "url": "https://docs.newrelic.com/docs/net-agent-install-resources/",
      "published_at": "2021-06-09T00:51:14Z",
      "updated_at": "2021-03-16T02:42:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains detailed descriptions of resources and procedures that are referenced in the New Relic .NET agent install procedures. Important This document is not meant to be read as a standalone document. For install instructions, see Introduction to .NET agent install. Microsoft's .NET profiler New Relic’s .NET agent relies on the Microsoft profiling API to report data from your .NET application. .NET monitoring solutions other than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .NET monitoring service in the past and haven’t completely disabled/removed it, the profiler may still be in use, which will cause profiler conflicts when you try to enable the .NET agent. .NET agent download library The New Relic .NET agent download library contains install file packages that are referenced in specific install procedures. For more on these files, see the download library’s ReadMe file. Zip files for manual .NET agent install (Windows) To manually install the agent using a ZIP file, choose the correct file for the application you wish to monitor: Go to the .NET agent download site and get the file matching your application's runtime and architecture: .NET Framework (32-bit): newrelic-agent-win-x86-VERSION.zip .NET Framework (64-bit): newrelic-agent-win-x64-VERSION.zip .NET Core (32-bit): newrelic-netcore20-agent-win-x86-VERSION.zip .NET Core (64-bit): newrelic-netcore20-agent-win-x64-VERSION.zip Unzip the agent folder in the desired location. Set environment variables for the process you wish to monitor. Caution We do not recommend setting these environment variables globally. Setting these environment variables globally can cause all .NET processes running on the system to get instrumented and report to New Relic. If you are installing the agent manually, we expect that you have the means to set these environment variables only for the processes you wish to monitor. .NET Framework environment variables for manual install For .NET Framework, the following variables are required: COR_ENABLE_PROFILING=1 COR_PROFILER={71DA0A04-7777-4EC6-9643-7D28B46A8A41} NEWRELIC_HOME=path\\to\\agent\\directory COR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy .NET Core environment variables for manual install For .NET Core, the following variables are required: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_NEWRELIC_HOME=path\\to\\agent\\directory CORECLR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy Restart your application. If using IIS, restart IIS. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Need for custom instrumentation After installing a .NET agent, most .NET application frameworks will automatically report data to your New Relic account. (See app framework compatibility: .NET Framework | .NET Core.) If your .NET application uses an application framework that is not automatically instrumented, or if the app has no framework (like a console app), after the install you will need to manually set up instrumentation of your app. Here are the steps to do that: Follow the relevant install instructions for your application and framework. Custom instrument your application to define what activity is reported to New Relic. Install-related environment variables A .NET agent install requires setting environment variables. For some install procedures (like for IIS-hosted .NET applications), these environment variables are set automatically. For other install procedures, you will have to manually set them. To see the required environment variables for both .NET Framework and .NET Core applications, see Environment variables. For installations requiring you to manually set environment variables, you can also set other configuration options via environment variables. Here's a look at two that are commonly set: License key. The environment variable for setting the New Relic license key is: NEW_RELIC_LICENSE_KEY = YOUR_LICENSE_KEY Copy You can also set this in the newrelic.config file or the app's config file. App name. Setting a meaningful application name is recommended, but you can also set this after install. The environment variable is: NEW_RELIC_APP_NAME = YOUR_APP_NAME Copy You can also set this via the newrelic.config, the app's config file, or the API. Scriptable installers (Windows only) The scriptable installers are ZIP archives containing a PowerShell script for installing the .NET agent. There is a separate zip archive for .NET Framework versus .NET Core. Important We recommend using the MSI installer over the scriptable installer. If you want to automate your install, consider running the MSI installer from the command line. Scriptable installer for .NET Framework To use the scriptable installer to install the .NET agent for a .NET Framework app: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation. Download the scriptable installer package for .NET Framework from the download site. By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package. Open a command shell and navigate into the unzipped package's folder. For a simple install with no options, use this command: .\\install.cmd -LicenseKey YOUR_LICENSE_KEY Copy To install with one or more additional options, use the format below. See table below for a description of the install options. install.cmd -LicenseKey YOUR_LICENSE_KEY [-NoIISReset] [-InstrumentAll] [-InstallPath PATH_TO_INSTALL] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description LicenseKey Required. Your New Relic license key. NoIISReset Optional. Use this option to prevent the installer from initiating an IIS reset. Important If you use this option, you need to do an IIS reset manually before New Relic starts instrumenting any IIS-hosted applications. InstrumentAll Optional. By default, the .NET agent will instrument all IIS-hosted applications. Use this option to enable instrumentation of other types of .NET applications. InstallPath Optional. Use this option to choose a different installation location. The default install location is C:\\Program Files\\New Relic. Uninstalling the agent with the scriptable uninstaller: Tip You can add the Force option to the uninstall script to force an uninstall without prompting to restart IIS. Execute the following command to uninstall the .NET Framework agent: .\\uninstall.cmd Copy Scriptable installer for .NET Core Important Before installing the agent: Understand the agent requirements, including the permissions requirements. Note that admin rights in an elevated shell are required (specifically for selecting a custom log directory and performing an IISReset). Caution For security reasons, it is necessary to execute the installAgent.ps1 script as shown below, by prepending ./ to the script filename, rather than by prepending powershell to the script. If you execute the script by prepending powershell, and any of your supplied arguments (e.g. the install path or custom log path) have spaces in them, these arguments will be corrupted, which would lead to the agent being installed to a location other than the intended location, which could be unsecure. To use the scriptable installer to install the .NET agent for a .NET Core application: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation Download the .NET Core agent's scriptable installer package from the .NET agent download site . By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package in the desired location. Open a command shell and navigate into the unzipped package's folder. You can install the agent either locally or globally: Local install For a simple install, with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy Global install Important The global install will instrument all .NET Core processes on your system. Only choose the global install if you want all .NET Core processes monitored. For a simple install with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description Destination Required. The location where the agent is installed. This can be an absolute or relative path. Wrapping quotes are required. InstallType Required. Determines whether this is a local (app-specific) or global (system-wide) install. LicenseKey Required. Your New Relic license key. AppName Optional. Sets the default application name associated with your agent installation. LogDir Optional. Sets a custom logging location for the agent. By default, the agent puts the logs directory in the install directory. X86 Optional. Installs the 32-bit version of the agent rather than the 64-bit version. New Relic does not recommend installing the 32-bit version of the agent globally. ResetIIS Optional. Performs an iisreset after the installation. Important Only use this if your .NET Core app is hosted via an IIS reverse proxy. Force Optional. Forces the installation process to overwrite a previous install or to install into an existing folder. Caution This overwrites any configuration customizations. New Relic recommends backing up your configuration file and any custom instrumentation files prior to forcing an over-install. Help Optional. Displays usage information for this script.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.128876,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "sections": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": " profiler New Relic’s .<em>NET</em> <em>agent</em> relies on the Microsoft profiling API to report data from your .<em>NET</em> application. .<em>NET</em> monitoring solutions <em>other</em> than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .<em>NET</em> monitoring service"
      },
      "id": "603eb8ba28ccbc3daceba773"
    },
    {
      "sections": [
        "How to verify the checksum of .NET Agent downloads",
        "Windows",
        "CertUtil",
        "Powershell: Get-FileHash",
        "Linux",
        "sha256sum"
      ],
      "title": "How to verify the checksum of .NET Agent downloads",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "95a198f26d732f7cc1940079bfe5a29eca22a425",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/how-verify-checksum-net-agent-downloads/",
      "published_at": "2021-06-09T01:07:50Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about how to confirm the checksum for New Relic's .NET agent installers. If you need the hashes for our current releases, download their SHA256 hashes from our download site. Windows On Windows, we recommended using either CertUtil or Get-FileHash to compute a file hash. CertUtil This utility is available as part of Certificate Services and can be used to compute the hash of a file. This utility can be run from the Command Prompt or Powershell. To compute the hash, run: CertUtil -hashfile YOUR_FILENAME SHA256 If successful, you'll get this response: SHA256 hash of YOUR_FILENAME: 5092fd52e40132a41ac06c320296cd9d63196d6de0fa6ce9b74fc4de1b3f9502 CertUtil: -hashfile command completed successfully. Copy Powershell: Get-FileHash The Get-FileHash cmdlet is included with Powershell version 5.1+ and can be used to compute the hash of a file. To compute the hash, run: Get-FileHash YOUR_FILENAME Algorithm SHA256 | Format-List If successful, you'll get this response: Algorithm : SHA256 Hash : 5092FD52E40132A41AC06C320296CD9D63196D6DE0FA6CE9B74FC4DE1B3F9502 Path : C:\\Path\\To\\YOUR_FILENAME Copy Linux On Linux, we recommend using sha256sum Copy to compute a file hash. sha256sum To compute the hash, run: sha256sum YOUR_FILENAME If successful, you'll get this response: 5092fd52e40132a41ac06c320296cd9d63196d6de0fa6ce9b74fc4de1b3f9502 YOUR_FILENAME Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.80591,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "How to verify the checksum of .<em>NET</em> <em>Agent</em> downloads",
        "sections": "How to verify the checksum of .<em>NET</em> <em>Agent</em> downloads",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "Read about how to confirm the checksum for New Relic&#x27;s .<em>NET</em> <em>agent</em> installers. If you need the hashes for our current releases, download their SHA256 hashes from our download site. Windows On Windows, we recommended using either CertUtil or Get-FileHash to compute a file hash. CertUtil This utility"
      },
      "id": "603e829964441fea3c4e88a9"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/agent-changes-content-type-header-wcf-apps-net": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.48593,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.23745,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/azure-pipelines-wipes-out-newrelicazurewebsitesextension-directories": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.48593,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.23745,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/browser-injection-health-check-conflict": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.4858,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.23744,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/cocreate-errors-no-event-log": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.4858,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.23744,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/cocreateinstance-errors-no-profiler-log": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.48566,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.23744,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/debugging-net-core-agent-linux": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.48566,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.23744,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/generate-logs-troubleshooting-net": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.48553,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.237434,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/high-memory-usage-net": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.48553,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.237434,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/missing-couchbase-metrics-net": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.48553,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.237434,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/missing-net-async-metrics": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.48541,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.237434,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/monitor-short-lived-net-processes": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.48541,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.237434,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.48528,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        "No data appears (.NET)",
        "Problem",
        "Solution",
        "Basic solutions",
        "Advanced solutions"
      ],
      "title": "No data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "ac2a9d51d0845b16c586c49d32266565a7691fad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-data-appears-net/",
      "published_at": "2021-06-08T20:46:39Z",
      "updated_at": "2021-03-16T02:06:20Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic for your app and waiting five minutes, none of your .NET agent data appears in the New Relic UI. Solution The absence of data may occur for several reasons. Common causes for missing data: See the basic troubleshooting solutions. Other situations: If the basic solutions do not solve the problem, the lack of data may be more intrinsic to your system. For more information, see the advanced troubleshooting solutions. Microsoft Azure users: See the Azure troubleshooting solutions. No Browser data appears: See the troubleshooting tips when using the Browser agent. Basic solutions To troubleshoot the most common reasons for missing data, try these solutions as applicable. Basic solutions Comments Check app and framework for compatibility with agent .NET Framework compatibility and requirements or .NET Core compatibility and requirements Configure for short-lived .NET process If you have a short-lived (below 60 seconds) process, it may not report data. For more information, see Monitor short-lived processes. .NET Core: Check Kestrel requirements. Make sure you are using a Kestrel app/web server supported by New Relic. Otherwise, you may need to ensure your .NET agent has .NET Framework support enabled. .NET Core: Check environment variables. Make sure you have configured all the required environment variables, then restart the agent. .NET Framework: Restart IIS. If your app is not receiving traffic, no data will be reported to New Relic. To restart IIS: From a command line, run IISRESET. Verify that traffic is being sent to your application. Run New Relic Diagnostics. To try to automatically identify the issue, use New Relic Diagnostics. Check for profiler conflicts. If you are using Microsoft's System Center Operations Manager (SCOM), follow the troubleshooting procedures to resolve .NET and SCOM conflicts. Review log files. If log files exist, open them and review for errors. Advanced solutions To remedy more complex issues when no data appears, try these solutions as applicable: Advanced solutions Comments .NET Framework: Check Registry permissions. Check for a registry key permissions error. .NET Framework: Run Windows Event Viewer. If applicable: Run the Windows Event Viewer, and look for application events from the New Relic .NET Profiler. Search for messages whose source is the New Relic .NET Profiler or New Relic .NET agent. If there are no New Relic event messages, look for messages from the .NET Runtime. For more information, see No data or event log: CoCreate errors. Get debug logs. If your logs did not show errors, increase the logging level temporarily to collect debug logs. Check proxy settings. Ensure your proxy settings are correct and that your settings include a host attribute. Get additional help. If data still does not appear, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.96182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (.<em>NET</em>)",
        "sections": "No data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic for your app and waiting five minutes, none of your .<em>NET</em> <em>agent</em> data appears in the New Relic UI. Solution The absence of data may occur for several reasons. Common causes for missing data: See the basic <em>troubleshooting</em> solutions. Other situations: If the basic"
      },
      "id": "603e7f2728ccbc2cc8eba7a6"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.48528,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.23743,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.48514,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.23743,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    },
    {
      "sections": [
        "No data appears (.NET)",
        "Problem",
        "Solution",
        "Basic solutions",
        "Advanced solutions"
      ],
      "title": "No data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "ac2a9d51d0845b16c586c49d32266565a7691fad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-data-appears-net/",
      "published_at": "2021-06-08T20:46:39Z",
      "updated_at": "2021-03-16T02:06:20Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic for your app and waiting five minutes, none of your .NET agent data appears in the New Relic UI. Solution The absence of data may occur for several reasons. Common causes for missing data: See the basic troubleshooting solutions. Other situations: If the basic solutions do not solve the problem, the lack of data may be more intrinsic to your system. For more information, see the advanced troubleshooting solutions. Microsoft Azure users: See the Azure troubleshooting solutions. No Browser data appears: See the troubleshooting tips when using the Browser agent. Basic solutions To troubleshoot the most common reasons for missing data, try these solutions as applicable. Basic solutions Comments Check app and framework for compatibility with agent .NET Framework compatibility and requirements or .NET Core compatibility and requirements Configure for short-lived .NET process If you have a short-lived (below 60 seconds) process, it may not report data. For more information, see Monitor short-lived processes. .NET Core: Check Kestrel requirements. Make sure you are using a Kestrel app/web server supported by New Relic. Otherwise, you may need to ensure your .NET agent has .NET Framework support enabled. .NET Core: Check environment variables. Make sure you have configured all the required environment variables, then restart the agent. .NET Framework: Restart IIS. If your app is not receiving traffic, no data will be reported to New Relic. To restart IIS: From a command line, run IISRESET. Verify that traffic is being sent to your application. Run New Relic Diagnostics. To try to automatically identify the issue, use New Relic Diagnostics. Check for profiler conflicts. If you are using Microsoft's System Center Operations Manager (SCOM), follow the troubleshooting procedures to resolve .NET and SCOM conflicts. Review log files. If log files exist, open them and review for errors. Advanced solutions To remedy more complex issues when no data appears, try these solutions as applicable: Advanced solutions Comments .NET Framework: Check Registry permissions. Check for a registry key permissions error. .NET Framework: Run Windows Event Viewer. If applicable: Run the Windows Event Viewer, and look for application events from the New Relic .NET Profiler. Search for messages whose source is the New Relic .NET Profiler or New Relic .NET agent. If there are no New Relic event messages, look for messages from the .NET Runtime. For more information, see No data or event log: CoCreate errors. Get debug logs. If your logs did not show errors, increase the logging level temporarily to collect debug logs. Check proxy settings. Ensure your proxy settings are correct and that your settings include a host attribute. Get additional help. If data still does not appear, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.96182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (.<em>NET</em>)",
        "sections": "No data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic for your app and waiting five minutes, none of your .<em>NET</em> <em>agent</em> data appears in the New Relic UI. Solution The absence of data may occur for several reasons. Common causes for missing data: See the basic <em>troubleshooting</em> solutions. Other situations: If the basic"
      },
      "id": "603e7f2728ccbc2cc8eba7a6"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/no-data-appears-after-disabling-tls-10": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.48514,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.23743,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/no-data-appears-net": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.48502,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.23742,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/no-data-registry-key-permission-issues": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.48502,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.23742,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/profiler-conflicts": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.4849,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44355,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.23742,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/resolve-net-scom-conflicts": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.4849,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44355,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.23742,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower": [
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Tip",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-06-09T01:35:57Z",
      "updated_at": "2021-06-09T01:35:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows &lt;log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Log file configuration for Linux &lt;log directory=\"/home/LogFiles/NewRelic\" level=\"info\"&gt;&lt;/log&gt; Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.4849,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "sections": "Install the .<em>NET</em> <em>agent</em> on Azure Web Apps",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", but only one may be active at a time. You must disable Application Insights in order for the .<em>NET</em> <em>agent</em> to function properly. For more information, see our Application Insights <em>troubleshooting</em> procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .<em>NET</em> <em>agent</em>"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "No Browser data appears (.NET)",
        "Problem",
        "Solution"
      ],
      "title": "No Browser data appears (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "61a0ca0687aa9ebea7c0ce8d99e38822db0eb1cd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net/",
      "published_at": "2021-06-08T20:45:26Z",
      "updated_at": "2021-03-11T02:34:52Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .NET app. Solution To troubleshoot missing data: Make sure you have installed the latest release of the .NET agent. Follow the troubleshooting procedures for missing data as applicable. Verify whether your pages are rendered using ASPs. If you use another rendering technology, use manual instrumentation. Flush your .NET cache. Set the <head> tag of your pages to render on the server. Verify that your agent is configured to auto-instrument pages. Edit newrelic.config and verify that autoInstrument is set to true: <browserMonitoring autoInstrument=\"true\"/> Copy Check whether IIS page compression is disabled. If compressed before the .NET agent attempts browser instrumentation, the necessary <HEAD> tag won't be found. For instructions on how to check that, see Microsoft documentation. Look at the source of one of your pages through a browser. Look for a script with references to NREUMQ at the top and bottom of your pages. If you get support at support.newrelic.com, mention whether you are seeing this JavaScript in the page header or in some other location in the page, or you are not seeing it at all. Here are some additional troubleshooting tips: Browser problems Additional troubleshooting tips for .NET agent IIS exception error With IIS, you may receive an InvalidOperationException that states: Post cache substitution is not compatible with modules in the IIS integrated pipeline that modify the response buffers. Copy To solve this problem, you must manually implement the Browser agent: Set browserMonitoring to false in newrelic.config, and follow the manual instrumentation procedures. Razor framework error With the Razor framework, you may encounter the following message: Parser Error Message: \"\").pop().split(\"\" is not valid at the start of a code block. Only identifiers, keywords, comments, \"(\" and \"{\" are valid. Copy To solve this problem, follow the Browser troubleshooting procedures for Razor frameworks.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.44355,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No Browser data appears (.<em>NET</em>)",
        "sections": "No Browser data appears (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem After generating traffic and waiting five minutes, you do not see any browser monitoring data for your .<em>NET</em> app. Solution To <em>troubleshoot</em> missing data: Make sure you have installed the latest release of the .<em>NET</em> <em>agent</em>. Follow the <em>troubleshooting</em> procedures for missing data as applicable"
      },
      "id": "6043f856e7b9d202d65799b5"
    },
    {
      "sections": [
        ".NET agent reports handled errors",
        "Problem",
        "Solution",
        "GetResponse() throws an error",
        "Define a custom instrumentation file",
        "Wrap the method in a custom transaction",
        "Cause"
      ],
      "title": ".NET agent reports handled errors",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5cd50fdec02b9d8e48348c183e786eac54c312e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors/",
      "published_at": "2021-06-08T14:53:54Z",
      "updated_at": "2021-04-29T00:18:04Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem New Relic's .NET agent reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception handler. Instrument the target method by defining a custom instrumentation file, or by wrapping the method in a custom transaction, as shown in this example: GetResponse() throws an error In this example, New Relic reports an error from GetResponse() unless the method Foo() is instrumented. As long is Foo is instrumented, New Relic begins a transaction when Foo is called and ends the transaction when Foo ends. Because the error is handled before Foo ends, New Relic will not report an error. Note also that GetResponse() becomes a segment of the Foo transaction. using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks; using System.Net; using System.IO; namespace ErrorTester { class Program { static void Main(string[] args) { var i = 0; while (true) { Foo(++i); } } static void Foo(int i) { try { GetNotFound(); } catch (Exception ex) { Console.WriteLine(\"Got it \" + i + \"!\"); Thread.Sleep(1000); } } static string GetNotFound() { string uri = \"http://localhost/Test/this/is/not/a/real/page\"; var request = (HttpWebRequest)WebRequest.Create(uri); var response = request.GetResponse(); var data = new StreamReader(response.GetResponseStream()).ReadToEnd(); response.Close(); return data; } } } Copy Define a custom instrumentation file To instrument Foo: Define a custom instrumentation file; for example, CustomInstrumentation.xml: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- © 2008-2014 New Relic, Inc. All rights reserved. --> <!-- When you edit this file, please use an XML aware editor (such as Visual Studio), and pair with the companion file extension.xsd to minimize the chance of introducing typos that may confuse the agent when it is run. --> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory > <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Place CustomInstrumenation.xml in the New Relic extensions folder, alongside CoreInstrumentation.xml, and restart your application. Wrap the method in a custom transaction To instrument Foo, wrap it in a custom transaction: <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerFactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Background/Task\"> <match assemblyName=\"ErrorTester\" className=\"ErrorTester.Program\"> <exactMethodMatcher methodName=\"Foo\" /> </match> </tracerFactory> </instrumentation> </extension> Copy Cause The only errors New Relic's .NET agent reports are unhandled errors that end a transaction. If your app calls an exception handler before the transaction ends, New Relic will not report an error. However, New Relic does not always detect exception handlers when the error occurs outside of a web transaction, WCF transaction, or custom transaction. This is because the agent creates \"mini-transactions\" for instrumented methods that are not associated with a transaction. When the instrumented method exits, the mini-transaction ends. If the mini-transaction throws an error and the instrumented method does not handle it, then New Relic will report an error. You can see this in a console app that calls GetResponse(), as shown in the example. If GetResponse throws an error, then New Relic will report it, even though GetResponse() is called within a try/catch block. The agent reports an error because the GetResponse() \"mini-transaction\" ended and the error was still unhandled on transaction exit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.23742,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> reports handled errors",
        "sections": ".<em>NET</em> <em>agent</em> reports handled errors",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem New Relic&#x27;s .<em>NET</em> <em>agent</em> reports handled errors as though they are standard errors. This is most common with Azure worker roles, console apps, async work, and similar operations. Solution To avoid false error reports, instrument a method that directly or indirectly contains the exception"
      },
      "id": "603e910028ccbcc7c0eba7b4"
    }
  ],
  "/docs/agents/nodejs-agent/api-guides/guide-using-nodejs-agent-api": [
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, \\[action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire \\[, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, \\[group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, \\[amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end(\\[callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, \\[customParameters])",
        "newrelic.shutdown(\\[options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-06-09T01:10:51Z",
      "updated_at": "2021-04-16T05:29:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, \\[action]) newrelic.setControllerName(name, \\[action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire \\[, onError]) newrelic.instrument(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, \\[group], handle) newrelic.startBackgroundTransaction(name, \\[group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, \\[amount]) newrelic.incrementMetric(name, \\[amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end(\\[callback]) transactionHandle.end(\\[callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in New Relic APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable New Relic Browser. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, \\[customParameters]) newrelic.noticeError(error, \\[customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown(\\[options], callback) newrelic.shutdown(\\[options], callback) Copy Use this method to gracefully shut down the agent. options options.collectPendingData - type boolean - Tell the agent whether to send any pending data to the New Relic collector before shutting down. options.timeout - type number (ms) - The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. Example: newrelic.shutdown({collectPendingData: true, timeout: 3000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.60582,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " and the <em>Node.js</em> <em>agent</em> <em>API</em> documentation on Github. Request names The <em>Node.js</em> <em>agent</em> captures the HTTP method along with a potentially parameterized path (such as &#x2F;user&#x2F;:id) or a regular expression (such as &#x2F;^&#x2F;user&#x2F;([-0-9a-f]+)$&#x2F;). These pieces of information become part of the request name. If you have support"
      },
      "id": "6043daa7196a67e488960f4f"
    },
    {
      "sections": [
        "Guide to using the Java agent API",
        "Important",
        "Use the API",
        "Transactions",
        "Instrument asynchronous work",
        "Distributed tracing API usage",
        "Caution",
        "Cross application tracing (CAT) API usage",
        "Obtain references to New Relic API classes",
        "Additional API functionality",
        "Additional API usage examples"
      ],
      "title": "Guide to using the Java agent API ",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "API guides"
      ],
      "external_id": "d2e891456fe10b28930afad273f760ef9f06a85a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/api-guides/guide-using-java-agent-api/",
      "published_at": "2021-06-08T15:42:35Z",
      "updated_at": "2021-06-02T15:30:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent API lets you control, customize, and extend the functionality of the APM Java agent. This API consists of: Static methods on the com.newrelic.api.agent.NewRelic class A @Trace annotation for implementing custom instrumentation A hierarchy of API objects providing additional functionality Use this API to set up custom instrumentation of your Java app and collect more in-depth data. For detailed information about this API, see the complete Javadoc on GitHub. Another way to set up custom instrumentation is to use XML instrumentation. The XML option is simpler and does not require modification of your app code, but it lacks the complete functionality of the Java agent API. Important For best results when using the API, ensure that you have the latest Java agent release. Several APIs used in the examples require Java agent 6.4.0 or higher. For all available New Relic APIs, see Intro to APIs. Use the API To access the API class, add newrelic-api.jar to your application class path. The jar is in the New Relic Java agent's installation zip file. You can call the API when the Java agent is not running. The API methods are just stubs; the implementation is added when the Java agent loads the class. Transactions To instrument Transactions in your application, use the following APIs. If you want to... Use this Create a Transaction when New Relic does not create one automatically @Trace(dispatcher = true) on the method that encompasses the work to be reported. When this annotation is used on a method within the context of an existing transaction, this will not start a new transaction, but rather include the method in the existing transaction. Capture the duration of a method that New Relic does not automatically trace @Trace() on the method you want to time. Set the name of the current Transaction NewRelic.setTransactionName(...) Start the timer for the response time of the current Transaction and to cause a Transaction you create to be reported as a Web transaction, rather than as an Other transaction NewRelic.setRequestAndReponse(...) Add custom attributes to Transactions and TransactionEvents NewRelic.addCustomParameter(...) Prevent a Transaction from being reported to New Relic NewRelic.ignoreTransaction() Exclude a Transaction when calculating your app's Apdex score NewRelic.ignoreApdex() Instrument asynchronous work For detailed information, see Java agent API for asynchronous applications. If you want to... Use this Trace an asynchronous method if it is linked to an existing Transaction... @Trace(async = true) Link the Transaction associated with the Token on the current thread... Token.link() or Token.linkAndExpire() Expire a Token associated with the current Transaction... Token.expire() Stop timing a Segment and have it report as part of its parent Transaction Segment.end() Stop timing a Segment and not have it report as part of its parent Transaction Segment.ignore() Distributed tracing API usage These APIs require distributed tracing to be enabled. See Java agent configuration for all distributed tracing config options. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. To see these APIs in action, see Using Java agent distributing tracing API with Kafka. Important With agent version 6.4.0, the following distributed tracing APIs were introduced, with the exception of addCustomAttribute(), which was introduced in 6.1.0. We highly recommended using these APIs instead of the deprecated ones. If you want to... Use this Create and insert distributed tracing headers into a Headers data structure. This API will insert both newrelic and W3C Trace Context headers (traceparent & tracestate), unless the agent is explicitly configured to exclude newrelic headers. Transaction.insertDistributedTraceHeaders(Headers) Copy For more on obtaining references to the current transaction and other API classes, see Obtain references. Accept the distributed tracing headers sent from the calling service and link these services together in a distributed trace. Transaction.acceptDistributedTraceHeaders(TransportType, Headers) Copy For more on obtaining references to the current transaction and other API classes, see Obtain references. The type-specific headers of an inbound or outbound message. For a provided implementation of Headers use ConcurrentHashMapHeaders. Headers Copy A utility class that provides enum constants for defining the transport type when accepting distributed tracing headers. TransportType Copy Add custom attributes to SpanEvents in distributed traces NewRelic.getAgent().getTracedMethod().addCustomAttribute(...) Caution With agent version 6.4.0, the following distributed tracing APIs have been deprecated and replaced by the APIs in the above table. It's highly recommended to upgrade the agent and use the new APIs instead of these deprecated ones. If you want to... Use this Create a payload to be sent to a called service. Transaction.createDistributedTracePayload() Copy For more on obtaining references to the current transaction and other API classes, see Obtain references. Caution API deprecated as of agent 6.4.0 Accept a payload sent from the first service; this will link these services together in a trace. Transaction.acceptDistributedTracePayload(...) Copy For more on obtaining references to the current transaction and other API classes, see Obtain references. Caution API deprecated as of agent 6.4.0 Payload used to connect services. The text() call returns a JSON string representation of the payload. DistributedTracePayload.text() Caution API deprecated as of agent 6.4.0 Payload used to connect services. The httpSafe() call returns a base64 encoded JSON string representation of the payload. DistributedTracePayload.httpSafe() Caution API deprecated as of agent 6.4.0 Cross application tracing (CAT) API usage To track external calls and add cross application tracing, use the following APIs: If you want to... Use this Trace across a custom transport channel that New Relic does not support by default, such as a proprietary RPC transport Transaction.getRequestMetadata(), .processRequestMetadata(...), .getResponseMetadata(), .processResponseMetadata(...) Copy Also refer to the information in this document about using Transaction to obtain references to New Relic API classes. View or change the metric name or a rollup metric name of a TracedMethod (A rollup metric name, such as OtherTransaction/all, is not scoped to a specific transaction. It represents all background transactions.) TracedMethod.getMetricName(), .setMetricName(...), .setRollupMetricName(...) Copy Also refer to the information in this document about using TracedMethod to obtain references to New Relic API classes. Report a call to an external HTTP service, database server, message queue, or other external resource that is being traced using the Java agent API's @Trace annotation TracedMethod.reportAsExternal(...) passing arguments constructed using ExternalParameters builder. Also refer to the information in this document about using TracedMethod to obtain references to New Relic API classes. Enable and add cross application tracing when communicating with an external HTTP or JMS service that is instrumented by New Relic TracedMethod.addOutboundRequestHeaders(...) along with TracedMethod.reportAsExternal(...) Also refer to the information in this document about using TracedMethod to obtain references to New Relic API classes. Add timing for an application server or dispatcher that is not supported automatically Transaction.setRequest(...), Transaction.setResponse(...), or NewRelic.setRequestAndResponse(...), and Transaction.markResponseSent() Also refer to the information in this document about using Transaction to obtain references to New Relic API classes. Obtain references to New Relic API classes Other tasks require the New Relic Agent object. The Agent object exposes multiple objects that give you the following functionality: If you want to... Use this Get a reference to the current Transaction NewRelic.getAgent().getTransaction() Get a Token to link asynchronous work NewRelic.getAgent().getTransaction().getToken() Copy Start and get a reference to a Segment NewRelic.getAgent().getTransaction().startSegment() Copy Get a reference to the method currently being traced NewRelic.getAgent().getTracedMethod() Get a reference to the Agent logger NewRelic.getAgent().getLogger() Get a reference to the Agent configuration NewRelic.getAgent().getConfig() Get a reference to an aggregator for custom metrics NewRelic.getAgent().getAggregator() Get a reference to Insights (our original name for the feature that governed custom events) in order to record custom events NewRelic.getAgent().getInsights() Additional API functionality The following APIs provide additional functionality, such as setting app server info, reporting errors, adding page load timing information, recording custom metrics, and sending custom events. If you want to... Use this Explicitly set port, name, and version information for an application server or dispatcher and the instance name for a JVM NewRelic.setAppServerPort(...), .setServerInfo(...), and .setInstanceName(...) Copy Report an error that New Relic does not report automatically NewRelic.noticeError(...) When inside a transaction, the last call to noticeError wins. Only 1 error will be reported per transaction. Add browser page load timing for Transactions that New Relic does not add to the header automatically NewRelic.getBrowserTimingHeader(), .getBrowserTimingFooter(), .setUserName(String name), .setAccountName(String name), and .setProductName(String name) Copy Create and accumulate custom metrics NewRelic.recordMetric(...), .recordResponseTimeMetric(...), or .incrementCounter(...) Record custom events Insights.recordCustomEvent(...) Or, use NewRelic.addCustomParameter(...) to add custom attributes to the New Relic-defined TransactionEvent type. Also refer to the information in this document about using Insights to obtain references to New Relic API classes. Additional API usage examples For detailed code examples about using the APIs, see New Relic's documentation about custom instrumentation for: External calls, cross application traces, messaging, datastores, and web frameworks Cross application tracing and external datastore calls Apps using custom instrumentation with annotation Custom framework instrumentation API Preventing unwanted instrumentation Inserting custom attributes Inserting custom events Collecting custom metrics",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.70353,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Guide</em> to using the Java <em>agent</em> <em>API</em> ",
        "sections": "<em>Guide</em> to using the Java <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic Java <em>agent</em> <em>API</em> lets you control, customize, and extend the functionality of the APM Java <em>agent</em>. This <em>API</em> consists of: Static methods on the com.newrelic.<em>api.agent</em>.NewRelic class A @Trace annotation for implementing custom instrumentation A hierarchy of <em>API</em> objects providing additional"
      },
      "id": "6043c7f8e7b9d2dd935799df"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-06-09T03:24:23Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.48569,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Guide</em> to using the Python <em>agent</em> <em>API</em>",
        "sections": "<em>Guide</em> to using the Python <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The Python <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the Python <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available Python <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    }
  ],
  "/docs/agents/nodejs-agent/api-guides/nodejs-agent-api": [
    {
      "sections": [
        "Guide to using the Node.js agent API",
        "Requirements",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "Instrument asynchronous work",
        "Instrument calls to external services",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser agent",
        "Extend custom instrumentation"
      ],
      "title": "Guide to using the Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "0c26c1cc3ef128c47758c020985c2d4942db7fdb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/guide-using-nodejs-agent-api/",
      "published_at": "2021-06-08T20:48:48Z",
      "updated_at": "2021-03-11T08:08:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent API allows you to extend the agent's standard functionality. You can use this API to: Create custom transaction parameters Report custom errors and metrics You can also use the API for custom instrumentation. For supported frameworks, the agent instruments most activity automatically. Custom instrumentation lets you extend that monitoring to frameworks without default instrumentation. Other resources: The Node.js agent API documentation on GitHub has more detail and practical tutorials. You can also adjust the Node.js agent's default behavior with configuration settings. To see all available New Relic APIs, see Intro to APIs. Requirements To use the Node.js agent API, make sure you have the latest Node.js agent release. In addition, see: Node.js agent API requirements Getting started procedures on GitHub Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Start timing a method New Relic is not instrumenting automatically Create a new transaction. See newrelic.startWebTransaction(). Stop timing a method after its work is completed Use either of these options: Return a promise from the callback handed to newrelic.startWebTransaction. Call end on a handle returned from newrelic.getTransaction. Prevent a transaction from reporting to New Relic Ignore the transaction using any of these options: See Rules for ignoring requests. Call ignore() on a handle returned from newrelic.getTransaction. Time specific methods using segments If a transaction is already visible in New Relic, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. Use this method when you want to instrument a method within an existing transaction: If you want to... Do this... Time a particular method See newrelic.startSegment(). For more information about timing, see the instrumentation tutorial on GitHub. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in New Relic, but some details of the method are not useful. For example: The default name might not be helpful. (Perhaps it is causing a metric grouping issue.) You want to add custom attributes to your transactions so you can filter them . Use these methods when you want to change how New Relic instruments a transaction that's already visible in New Relic: If you want to... Do this... Change the name of a transaction See newrelic.setTransactionName and rules.name. Add metadata (such as your customer’s account name or subscription level) to your transactions Use custom attributes. (Custom attribute collection is enabled by default in the Node.js agent.) See newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). Create a new transaction for background work See newrelic.startBackgroundTransaction(). Create a new web transaction Use newrelic.startWebTransaction(). Prevent a transaction from affecting your Apdex score See Rules for naming and ignoring requests, including the ignoring rules example. Record other performance data, such as timing or computer resource data Use the custom metrics API. Instrument asynchronous work For supported frameworks and supported Node.js versions, New Relic's Node.js agent usually correctly instruments async work. However, if your app uses another framework, or if the default async instrumentation is inaccurate, you can explicitly track async work. If you want to... Do this... Trace an async method that New Relic is already instrumenting See newrelic.startSegment. Trace an async method that New Relic is not instrumenting See newrelic.startSegment. Trace a transaction that got lost See newrelic.startSegment. You can also create your own custom instrumentation for libraries that are losing your transactions. Trace a lost transaction state A common issue is the loss of transaction state while using uninstrumented libraries. For more information, see the transaction preservation tutorial on GitHub. Instrument calls to external services Once the request naming API loads, New Relic's Node.js agent can automatically identify external service calls. You can also use these methods to collect data about your app's connections to other apps or databases: If you want to... Do this... Time a call to an external resource (such as an external service, database server, or message queue) Use any of these as appropriate: Custom instrumentation API Message queues Also see the tutorials on GitHub for datastore shims and message shims. Connect activity to another app instrumented by a New Relic agent Use cross application tracing. Collect or ignore errors Usually the agent detects errors automatically. However, you can manually mark an error with the agent. You can also mark errors as ignored. If you want to... Do this... Report an error the agent does not report automatically See newrelic.noticeError(). Send custom event and metric data from your app New Relic includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in New Relic Create a custom event. See newrelic.recordCustomEvent(). Tag your events with metadata to filter and facet them Add custom attributes if needed. (Custom attribute collection is enabled by default in the Node.js agent.) See newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). Report custom performance data Create a custom metric. See newrelic.recordMetric() and newrelic.incrementMetric(). To view the data, use the data explorer. Control the browser agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add browser apps to New Relic. You can also control the browser agent via APM agent API calls. For more information, see Browser monitoring and the Node.js agent. Extend custom instrumentation The newrelic.instrument() provides additional flexibility for custom instrumentation. For more information, including tutorials and examples, see the shims documentation on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.295044,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Guide</em> to using the Node.js <em>agent</em> <em>API</em>",
        "sections": "<em>Guide</em> to using the Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> <em>API</em> allows you to extend the <em>agent</em>&#x27;s standard functionality. You can use this <em>API</em> to: Create custom transaction parameters Report custom errors and metrics You can also use the <em>API</em> for custom instrumentation. For supported frameworks, the <em>agent</em> instruments most activity"
      },
      "id": "60440faae7b9d29ea8579a05"
    },
    {
      "sections": [
        "Guide to using the Java agent API",
        "Important",
        "Use the API",
        "Transactions",
        "Instrument asynchronous work",
        "Distributed tracing API usage",
        "Caution",
        "Cross application tracing (CAT) API usage",
        "Obtain references to New Relic API classes",
        "Additional API functionality",
        "Additional API usage examples"
      ],
      "title": "Guide to using the Java agent API ",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "API guides"
      ],
      "external_id": "d2e891456fe10b28930afad273f760ef9f06a85a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/api-guides/guide-using-java-agent-api/",
      "published_at": "2021-06-08T15:42:35Z",
      "updated_at": "2021-06-02T15:30:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent API lets you control, customize, and extend the functionality of the APM Java agent. This API consists of: Static methods on the com.newrelic.api.agent.NewRelic class A @Trace annotation for implementing custom instrumentation A hierarchy of API objects providing additional functionality Use this API to set up custom instrumentation of your Java app and collect more in-depth data. For detailed information about this API, see the complete Javadoc on GitHub. Another way to set up custom instrumentation is to use XML instrumentation. The XML option is simpler and does not require modification of your app code, but it lacks the complete functionality of the Java agent API. Important For best results when using the API, ensure that you have the latest Java agent release. Several APIs used in the examples require Java agent 6.4.0 or higher. For all available New Relic APIs, see Intro to APIs. Use the API To access the API class, add newrelic-api.jar to your application class path. The jar is in the New Relic Java agent's installation zip file. You can call the API when the Java agent is not running. The API methods are just stubs; the implementation is added when the Java agent loads the class. Transactions To instrument Transactions in your application, use the following APIs. If you want to... Use this Create a Transaction when New Relic does not create one automatically @Trace(dispatcher = true) on the method that encompasses the work to be reported. When this annotation is used on a method within the context of an existing transaction, this will not start a new transaction, but rather include the method in the existing transaction. Capture the duration of a method that New Relic does not automatically trace @Trace() on the method you want to time. Set the name of the current Transaction NewRelic.setTransactionName(...) Start the timer for the response time of the current Transaction and to cause a Transaction you create to be reported as a Web transaction, rather than as an Other transaction NewRelic.setRequestAndReponse(...) Add custom attributes to Transactions and TransactionEvents NewRelic.addCustomParameter(...) Prevent a Transaction from being reported to New Relic NewRelic.ignoreTransaction() Exclude a Transaction when calculating your app's Apdex score NewRelic.ignoreApdex() Instrument asynchronous work For detailed information, see Java agent API for asynchronous applications. If you want to... Use this Trace an asynchronous method if it is linked to an existing Transaction... @Trace(async = true) Link the Transaction associated with the Token on the current thread... Token.link() or Token.linkAndExpire() Expire a Token associated with the current Transaction... Token.expire() Stop timing a Segment and have it report as part of its parent Transaction Segment.end() Stop timing a Segment and not have it report as part of its parent Transaction Segment.ignore() Distributed tracing API usage These APIs require distributed tracing to be enabled. See Java agent configuration for all distributed tracing config options. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. To see these APIs in action, see Using Java agent distributing tracing API with Kafka. Important With agent version 6.4.0, the following distributed tracing APIs were introduced, with the exception of addCustomAttribute(), which was introduced in 6.1.0. We highly recommended using these APIs instead of the deprecated ones. If you want to... Use this Create and insert distributed tracing headers into a Headers data structure. This API will insert both newrelic and W3C Trace Context headers (traceparent & tracestate), unless the agent is explicitly configured to exclude newrelic headers. Transaction.insertDistributedTraceHeaders(Headers) Copy For more on obtaining references to the current transaction and other API classes, see Obtain references. Accept the distributed tracing headers sent from the calling service and link these services together in a distributed trace. Transaction.acceptDistributedTraceHeaders(TransportType, Headers) Copy For more on obtaining references to the current transaction and other API classes, see Obtain references. The type-specific headers of an inbound or outbound message. For a provided implementation of Headers use ConcurrentHashMapHeaders. Headers Copy A utility class that provides enum constants for defining the transport type when accepting distributed tracing headers. TransportType Copy Add custom attributes to SpanEvents in distributed traces NewRelic.getAgent().getTracedMethod().addCustomAttribute(...) Caution With agent version 6.4.0, the following distributed tracing APIs have been deprecated and replaced by the APIs in the above table. It's highly recommended to upgrade the agent and use the new APIs instead of these deprecated ones. If you want to... Use this Create a payload to be sent to a called service. Transaction.createDistributedTracePayload() Copy For more on obtaining references to the current transaction and other API classes, see Obtain references. Caution API deprecated as of agent 6.4.0 Accept a payload sent from the first service; this will link these services together in a trace. Transaction.acceptDistributedTracePayload(...) Copy For more on obtaining references to the current transaction and other API classes, see Obtain references. Caution API deprecated as of agent 6.4.0 Payload used to connect services. The text() call returns a JSON string representation of the payload. DistributedTracePayload.text() Caution API deprecated as of agent 6.4.0 Payload used to connect services. The httpSafe() call returns a base64 encoded JSON string representation of the payload. DistributedTracePayload.httpSafe() Caution API deprecated as of agent 6.4.0 Cross application tracing (CAT) API usage To track external calls and add cross application tracing, use the following APIs: If you want to... Use this Trace across a custom transport channel that New Relic does not support by default, such as a proprietary RPC transport Transaction.getRequestMetadata(), .processRequestMetadata(...), .getResponseMetadata(), .processResponseMetadata(...) Copy Also refer to the information in this document about using Transaction to obtain references to New Relic API classes. View or change the metric name or a rollup metric name of a TracedMethod (A rollup metric name, such as OtherTransaction/all, is not scoped to a specific transaction. It represents all background transactions.) TracedMethod.getMetricName(), .setMetricName(...), .setRollupMetricName(...) Copy Also refer to the information in this document about using TracedMethod to obtain references to New Relic API classes. Report a call to an external HTTP service, database server, message queue, or other external resource that is being traced using the Java agent API's @Trace annotation TracedMethod.reportAsExternal(...) passing arguments constructed using ExternalParameters builder. Also refer to the information in this document about using TracedMethod to obtain references to New Relic API classes. Enable and add cross application tracing when communicating with an external HTTP or JMS service that is instrumented by New Relic TracedMethod.addOutboundRequestHeaders(...) along with TracedMethod.reportAsExternal(...) Also refer to the information in this document about using TracedMethod to obtain references to New Relic API classes. Add timing for an application server or dispatcher that is not supported automatically Transaction.setRequest(...), Transaction.setResponse(...), or NewRelic.setRequestAndResponse(...), and Transaction.markResponseSent() Also refer to the information in this document about using Transaction to obtain references to New Relic API classes. Obtain references to New Relic API classes Other tasks require the New Relic Agent object. The Agent object exposes multiple objects that give you the following functionality: If you want to... Use this Get a reference to the current Transaction NewRelic.getAgent().getTransaction() Get a Token to link asynchronous work NewRelic.getAgent().getTransaction().getToken() Copy Start and get a reference to a Segment NewRelic.getAgent().getTransaction().startSegment() Copy Get a reference to the method currently being traced NewRelic.getAgent().getTracedMethod() Get a reference to the Agent logger NewRelic.getAgent().getLogger() Get a reference to the Agent configuration NewRelic.getAgent().getConfig() Get a reference to an aggregator for custom metrics NewRelic.getAgent().getAggregator() Get a reference to Insights (our original name for the feature that governed custom events) in order to record custom events NewRelic.getAgent().getInsights() Additional API functionality The following APIs provide additional functionality, such as setting app server info, reporting errors, adding page load timing information, recording custom metrics, and sending custom events. If you want to... Use this Explicitly set port, name, and version information for an application server or dispatcher and the instance name for a JVM NewRelic.setAppServerPort(...), .setServerInfo(...), and .setInstanceName(...) Copy Report an error that New Relic does not report automatically NewRelic.noticeError(...) When inside a transaction, the last call to noticeError wins. Only 1 error will be reported per transaction. Add browser page load timing for Transactions that New Relic does not add to the header automatically NewRelic.getBrowserTimingHeader(), .getBrowserTimingFooter(), .setUserName(String name), .setAccountName(String name), and .setProductName(String name) Copy Create and accumulate custom metrics NewRelic.recordMetric(...), .recordResponseTimeMetric(...), or .incrementCounter(...) Record custom events Insights.recordCustomEvent(...) Or, use NewRelic.addCustomParameter(...) to add custom attributes to the New Relic-defined TransactionEvent type. Also refer to the information in this document about using Insights to obtain references to New Relic API classes. Additional API usage examples For detailed code examples about using the APIs, see New Relic's documentation about custom instrumentation for: External calls, cross application traces, messaging, datastores, and web frameworks Cross application tracing and external datastore calls Apps using custom instrumentation with annotation Custom framework instrumentation API Preventing unwanted instrumentation Inserting custom attributes Inserting custom events Collecting custom metrics",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.70353,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Guide</em> to using the Java <em>agent</em> <em>API</em> ",
        "sections": "<em>Guide</em> to using the Java <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic Java <em>agent</em> <em>API</em> lets you control, customize, and extend the functionality of the APM Java <em>agent</em>. This <em>API</em> consists of: Static methods on the com.newrelic.<em>api.agent</em>.NewRelic class A @Trace annotation for implementing custom instrumentation A hierarchy of <em>API</em> objects providing additional"
      },
      "id": "6043c7f8e7b9d2dd935799df"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-06-09T03:24:23Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.48569,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Guide</em> to using the Python <em>agent</em> <em>API</em>",
        "sections": "<em>Guide</em> to using the Python <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The Python <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the Python <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available Python <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    }
  ],
  "/docs/agents/nodejs-agent/attributes/nodejs-agent-attributes": [
    {
      "sections": [
        "Ruby agent attributes",
        "httpResponseCode",
        "request.headers.referer",
        "request.parameters.*",
        "job.resque.args.*",
        "job.sidekiq.args.*",
        "Adding custom attributes",
        "Caution",
        "Upgrading the Ruby agent",
        "For more help"
      ],
      "title": "Ruby agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Attributes"
      ],
      "external_id": "76453699d829800b2dc9757c66c6f25f6c37f86a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/attributes/ruby-agent-attributes/",
      "published_at": "2021-06-08T21:36:17Z",
      "updated_at": "2021-06-02T22:15:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can be viewed within transaction traces in APM, traced errors in APM, transaction events in dashboards, and page views in dashboards. You can customize exactly which attributes will be sent to each of these destinations. These attribute settings apply to version 3.12.0 or higher of the Ruby agent. Ruby agent attributes The following table lists the attributes that can be automatically captured by the Ruby agent: httpResponseCode The response status code for a web request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable Note: The httpResponseCode attribute (string value) is deprecated as of agent version 6.12.0. http.statusCode (integer value) should be used instead. request.headers.referer The HTTP referrer header if present (minus the query string). Defaults: Transaction traces: Disabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.parameters.* The HTTP request parameters, associated with the transaction. Available for Rails, Sinatra, and Grape applications only. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Disabled Note: The capture_params property is deprecated. However, if set to true, it will enable request parameters for transaction traces and traced errors. job.resque.args.* Job arguments passed to the Resque worker. Arguments passed to Resque workers are positional. These arguments are stored as keys of the form job.resque.args.<position> where position is the index of the argument to the perform method. For example, a Resque job that takes two arguments will have keys job.resque.args.0 and job.resque.args.1. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Unavailable Note: The resque.capture_params property is deprecated. However, if set to true, it will enable capture of Resque arguments for transaction traces, traced errors. job.sidekiq.args.* Job arguments passed to the Sidekiq worker. Arguments passed to Sidekiq workers are positional. These arguments are stored as keys of the form job.sidekiq.args.<position> where position is the index of the argument to the perform method. For example, a Sidekiq job that takes two arguments will have keys job.sidekiq.args.0 and job.sidekiq.args.1. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Unavailable Note: The sidekiq.capture_params property is deprecated. However, if set to true, it will enable capture of Sidekiq arguments for transaction traces and traced errors. Adding custom attributes To capture additional custom attributes from your application, use NewRelic::Agent.add_custom_attributes. For full reference see Collecting custom attributes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Disabled Caution If you want to query your custom parameters or attributes, avoid using any of the reserved terms for naming them. Upgrading the Ruby agent When upgrading to Ruby agent 3.12.0 or higher, upgrade your newrelic.yml configuration. For more help Additional documentation resources include: Agent attributes (types, destinations, and limits for attributes used by New Relic agents) Enabling and disabling attributes (properties, rules, and backwards compatibility information for Ruby agent attributes) Attribute examples (scenarios and results of enabling and disabling different Ruby agent attributes)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.448425,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> <em>attributes</em>",
        "sections": "Ruby <em>agent</em> <em>attributes</em>",
        "tags": "<em>Agents</em>",
        "body": " <em>attributes</em> (types, destinations, and limits for <em>attributes</em> used by New Relic <em>agents</em>) Enabling and disabling <em>attributes</em> (properties, rules, and backwards compatibility information for Ruby <em>agent</em> <em>attributes</em>) Attribute examples (scenarios and results of enabling and disabling different Ruby <em>agent</em> <em>attributes</em>)"
      },
      "id": "6044042028ccbc7da82c6083"
    },
    {
      "sections": [
        "Enable or disable attributes",
        "Properties",
        "newrelic.attributes.enabled",
        "newrelic.browser_monitoring.attributes.enabled",
        "newrelic.error_collector.attributes.enabled",
        "newrelic.transaction_events.attributes.enabled",
        "newrelic.transaction_tracer.attributes.enabled",
        "newrelic.span_events.attributes.enabled",
        "newrelic.attributes.include",
        "newrelic.attributes.exclude",
        "newrelic.browser_monitoring.attributes.include",
        "newrelic.browser_monitoring.attributes.exclude",
        "newrelic.error_collector.attributes.include",
        "newrelic.error_collector.attributes.exclude",
        "newrelic.transaction_events.attributes.include",
        "newrelic.transaction_events.attributes.exclude",
        "newrelic.transaction_tracer.attributes.include",
        "newrelic.transaction_tracer.attributes.exclude",
        "newrelic.span_events.attributes.include",
        "newrelic.span_events.attributes.exclude",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use a star (\\*) for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Deprecated properties",
        "For more help"
      ],
      "title": "Enable or disable attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "6e9bf6c2e32a6add76412e6381a7bd4c99a0bc1c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/enable-or-disable-attributes/",
      "published_at": "2021-06-08T20:52:20Z",
      "updated_at": "2021-06-02T20:32:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Learn about properties to enable or disable attributes, and the rules that New Relic uses when determining which attributes to include or exclude for a destination. This also includes a summary of the PHP agent properties that have been deprecated with the release of New Relic agent attributes. Properties Use the following destination properties to open or close the destination to any attribute collection: newrelic.attributes.enabled Type Boolean Default True Turns on or turns off all attributes in all destinations. newrelic.browser_monitoring.attributes.enabled Type: Boolean Default: False Turns on or turns off all attributes for browser monitoring. This is the data that gets attached to page view events. If newrelic.attributes.enabled is false, no attributes will be sent to browser monitoring regardless of how this property is set. newrelic.error_collector.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for traced errors. If newrelic.attributes.enabled is false, no attributes will be sent to traced errors regardless of how this property is set. newrelic.transaction_events.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for transaction events. If newrelic.attributes.enabled is false, no attributes will be sent to transaction events regardless of how this property is set. newrelic.transaction_tracer.attributes.enabled Type Boolean Default True Turns on or off all attributes for transaction traces. If newrelic.attributes.enabled is false, no attributes will be sent to transaction traces regardless of how this property is set. newrelic.span_events.attributes.enabled Type Boolean Default True Turns on or off all attributes for Span data. If newrelic.attributes.enabled is false, no attributes will be sent to spans regardless of how this property is set. Use the following attribute/destination specific .include or .exclude properties to add or remove specific attributes in specific destinations: newrelic.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled, all attribute keys in this list will be sent to New Relic. newrelic.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic. newrelic.browser_monitoring.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for browser_monitoring, all attribute keys in this list will be sent to New Relic Browser in page views. newrelic.browser_monitoring.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys found in this list will not be sent to New Relic in page views. newrelic.error_collector.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for traced errors, all attribute keys in this list will be sent to New Relic in traced errors. newrelic.error_collector.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in traced errors. newrelic.transaction_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction events, all attribute keys in this list will be sent to New Relic in transaction events. newrelic.transaction_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction events. newrelic.transaction_tracer.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction traces, all attribute keys in this list will be sent to New Relic in transaction traces. newrelic.transaction_tracer.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction traces. newrelic.span_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for span events, all attribute keys in this list will be sent to New Relic in span events. newrelic.span_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in span events. Attribute rules New Relic follows these rules when determining which attributes to include or exclude for a destination. Root level takes precedence for enabled. The newrelic.attributes.enabled field trumps all other settings. When false, no attributes will be reported to New Relic. Example configuration: newrelic.attributes.enabled = false newrelic.attributes.include = foo,bar newrelic.transaction_tracer.attributes.enabled = true Copy Example output: Keys passed in: password, foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: password, foo, bar, bat Copy Destination enabled takes precedence over include and exclude. newrelic.{destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.include = one,two newrelic.transaction_tracer.attributes.include = three,four Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = myAttKey Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = foo,myCustomAtt newrelic.attributes.exclude = password,myCustomAtt Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = password,PaSsWoRd Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use a star (\\*) for wildcards. You can use an asterisk or star (*) at the end of a key as a wildcard. This will match a set of attributes with the same prefix. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = custom* newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = request.parameters.foo newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: newrelic.attributes.include = foo newrelic.transaction_events.attributes.exclude = foo Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated properties The following properties have been deprecated. Switch to the new attributes configuration for these properties when upgrading your PHP agent. Deprecated property New property newrelic.capture_params newrelic.attributes.include = request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the newrelic.attributes.include list to turn on all request parameters. The newrelic.capture_params property has been deprecated. newrelic.ignored_params newrelic.attributes.exclude = request.parameters.{name} Add each request parameter key to the newrelic.attributes.exclude list, delimited by commas. Be sure to prepend the key with request.parameters. The newrelic.ignored_params property has been deprecated. newrelic.{destination}.capture_attributes newrelic.{destination}.attributes.enabled The old newrelic.{destination}.capture_attributes flag would turn off user attribute collection. This has been deprecated. Use newrelic.{destination}.attributes.enabled instead. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.235916,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable or disable <em>attributes</em>",
        "sections": "Enable or disable <em>attributes</em>",
        "tags": "<em>Agents</em>",
        "body": "Learn about properties to enable or disable <em>attributes</em>, and the rules that New Relic uses when determining which <em>attributes</em> to include or exclude for a destination. This also includes a summary of the PHP <em>agent</em> properties that have been deprecated with the release of New Relic <em>agent</em> <em>attributes</em>"
      },
      "id": "603e9d6de7b9d22a5f2f3445"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, \\[action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire \\[, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, \\[group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, \\[amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end(\\[callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, \\[customParameters])",
        "newrelic.shutdown(\\[options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-06-09T01:10:51Z",
      "updated_at": "2021-04-16T05:29:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, \\[action]) newrelic.setControllerName(name, \\[action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire \\[, onError]) newrelic.instrument(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, \\[group], handle) newrelic.startBackgroundTransaction(name, \\[group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, \\[amount]) newrelic.incrementMetric(name, \\[amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end(\\[callback]) transactionHandle.end(\\[callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in New Relic APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable New Relic Browser. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, \\[customParameters]) newrelic.noticeError(error, \\[customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown(\\[options], callback) newrelic.shutdown(\\[options], callback) Copy Use this method to gracefully shut down the agent. options options.collectPendingData - type boolean - Tell the agent whether to send any pending data to the New Relic collector before shutting down. options.timeout - type number (ms) - The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. Example: newrelic.shutdown({collectPendingData: true, timeout: 3000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.827324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> API",
        "sections": "newrelic.recordCustomEvent(eventType, <em>attributes</em>)",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " <em>attributes</em> are ignored. Testing your naming rules [#testing-rules] The <em>Node.js</em> <em>agent</em> comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules&#x2F;.bin&#x2F;newrelic-naming-rules Copy"
      },
      "id": "6043daa7196a67e488960f4f"
    }
  ],
  "/docs/agents/nodejs-agent/extend-your-instrumentation/apollo-server-plugin-nodejs": [
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-06-09T01:12:41Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.6597,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-06-08T14:56:05Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.65953,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    },
    {
      "sections": [
        "Browser monitoring and the Node.js agent",
        "Insert the JavaScript header",
        "Framework examples",
        "Express and jade",
        "Express and Swig",
        "Hapi.js and handlebars",
        "Disable header generation",
        "Caution"
      ],
      "title": "Browser monitoring and the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "8b8cba2d5ce2acdc55df2621d850329cf4796bbd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/browser-monitoring-nodejs-agent/",
      "published_at": "2021-06-08T14:56:05Z",
      "updated_at": "2021-03-16T09:02:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Node.js agent, you can add browser instrumentation to your web pages. To use browser monitoring with your Node.js agent, ensure you have the latest release of the Node.js agent. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Node.js agent. Insert the JavaScript header Instrumentation for the Node.js agent can continue beyond your application into end users' browsers. The newrelic module can generate script headers which, when inserted into your HTML templates, will capture the end users' page load times. The headers must be manually injected, but no extra configuration is necessary. At the beginning of your html page's head tag, insert the results of newrelic.getBrowserTimingHeader() after any CHARSET meta tags. Exception: For maximum Internet Explorer compatibility, insert the results of newrelic.getBrowserTimingHeader() after any X-UA-COMPATIBLE HTTP-EQUIV meta tags. Call the header once for every request. Do not cache the header. Generating headers is fast, and it does not require your application to make extra requests to New Relic. Framework examples Here are some examples of how to set up browser monitoring with different frameworks and templates. Express and jade This example uses Express, a web application framework, and jade, a template module. Although the specifics are different with other frameworks, this general approach should work in most cases. The simplest way to insert browser timing headings is to pass the newrelic module into your template, and then call newrelic.getBrowsertimingHeader() from within the template. In your app.js: var newrelic = require('newrelic'); var app = require('express')(); // in express, this lets you call newrelic from within a template app.locals.newrelic = newrelic; app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your layout.jade: doctype html html head != newrelic.getBrowserTimingHeader() title= title link(rel='stylesheet', href='stylesheets/style.css') body block content Copy Express and Swig This example uses Express with Swig. In your app.js: var newrelic = require('newrelic'); var http = require('http') var path = require('path') var swig = require('swig') var app = require('express')(); app.locals.newrelic = newrelic; //taken from http://paularmstrong.github.io/swig/docs/#express app.engine('html', swig.renderFile); app.set('view engine', 'html'); app.set('views', __dirname + '/views'); app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your views/user.html: <!DOCTYPE html> <html> <head> {{ newrelic.getBrowserTimingHeader() }} <title>Hello</title> </head> <body> <h1>Hello World</h1> </body> </html> Copy Hapi.js and handlebars This example uses hapi.js and handlebars. Other similar templating languages typically require triple brackets; for example, using mustache with hogan-express. This helps prevent escaping of the script content. Using hapi, in your app.js: var newrelic = require('newrelic'); var Hapi = require('hapi'); var server = new Hapi.Server(parseInt(PORT), '0.0.0.0', { views: { engines : {html: 'handlebars' }, path : __dirname + '/templates' } }); function homepage(request, reply) { var context = { // pass in the header each request nreum : newrelic.getBrowserTimingHeader(), content : ... }; reply.view('homepage', context); }; server.route({ method : 'GET', path : '/', handler : homepage }); server.start(); Copy In your templates/homepage.html: <!DOCTYPE html> <html> <head> {{{ nreum }}} <title>Hello</title> </head> <body> {{ content }} </body> </html> Copy Disable header generation By default, calls to newrelic.getBrowserTimingHeader() should return valid headers. To disable header generation without removing your template code: In your newrelic.js file, add: browser_monitoring : { enable : false } Copy You can also set the environment variable NEW_RELIC_BROWSER_MONITOR_ENABLE=false. Caution Always leave ssl between the agent and the New Relic collector when using browser monitoring. You can safely leave the API calls in place even if you are not using browser monitoring or the newrelic module. If browser monitoring is disabled, or if there is an error so that working headers cannot be generated, the newrelic module generates an innocuous HTML comment. If you disable the newrelic module completely, no content will be generated.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.6172,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the Node.js <em>agent</em>",
        "sections": "Browser monitoring and the Node.js <em>agent</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "With the <em>Node.js</em> <em>agent</em>, you can add browser <em>instrumentation</em> to <em>your</em> web pages. To use browser monitoring with <em>your</em> <em>Node.js</em> <em>agent</em>, ensure you have the latest release of the <em>Node.js</em> <em>agent</em>. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>"
      },
      "id": "603e8376e7b9d2b7472a07f7"
    }
  ],
  "/docs/agents/nodejs-agent/extend-your-instrumentation/browser-monitoring-nodejs-agent": [
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-06-09T01:12:41Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.6597,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-06-08T14:56:05Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.65952,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    },
    {
      "sections": [
        "Apollo Server plugin and Node.js",
        "Compatibility",
        "GitHub documentation"
      ],
      "title": "Apollo Server plugin and Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "823dc0152fa10c89d0379c58ab3e8599726e56a9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/apollo-server-plugin-nodejs/",
      "published_at": "2021-06-08T20:49:58Z",
      "updated_at": "2021-03-13T07:26:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Apollo Server plugin instruments your Apollo Server applications to give visibility into your GraphQL payloads. This helps you uncover and diagnose the cause of your slow GraphQL queries. Our plugin records overall timings for queries and uses distributed tracing to uncover the route problem. Use this instrumentation to see if the problem arises from resolving a piece of requested data or if it stems from work done on other services or databases. Compatibility The New Relic plugin works with the following Apollo Server modules: apollo-server apollo-server-express apollo-server-hapi apollo-server-koa apollo-server-fastify Because fastify is not fully instrumented in the Node.js agent, transactions are prefixed with WebTransaction\\Nodejs. Other plugins may work, depending on their underlying implementation, but they have not been verified. GitHub documentation For detailed information about installation, configuration, transaction details, metrics, segments, errors, testing, troubleshooting, and more, see New Relic's Apollo Server plugin documentation on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.11208,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "-hapi apollo-server-koa apollo-server-fastify Because fastify is not fully instrumented in the <em>Node.js</em> <em>agent</em>, transactions are prefixed with WebTransaction\\<em>Nodejs</em>. Other plugins may work, depending on their underlying implementation, but they have not been verified. GitHub documentation For detailed"
      },
      "id": "6043cd9528ccbceaf72c60be"
    }
  ],
  "/docs/agents/nodejs-agent/extend-your-instrumentation/message-queues": [
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-06-09T01:12:41Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.6597,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-06-08T14:56:05Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.65952,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    },
    {
      "sections": [
        "Browser monitoring and the Node.js agent",
        "Insert the JavaScript header",
        "Framework examples",
        "Express and jade",
        "Express and Swig",
        "Hapi.js and handlebars",
        "Disable header generation",
        "Caution"
      ],
      "title": "Browser monitoring and the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "8b8cba2d5ce2acdc55df2621d850329cf4796bbd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/browser-monitoring-nodejs-agent/",
      "published_at": "2021-06-08T14:56:05Z",
      "updated_at": "2021-03-16T09:02:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Node.js agent, you can add browser instrumentation to your web pages. To use browser monitoring with your Node.js agent, ensure you have the latest release of the Node.js agent. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Node.js agent. Insert the JavaScript header Instrumentation for the Node.js agent can continue beyond your application into end users' browsers. The newrelic module can generate script headers which, when inserted into your HTML templates, will capture the end users' page load times. The headers must be manually injected, but no extra configuration is necessary. At the beginning of your html page's head tag, insert the results of newrelic.getBrowserTimingHeader() after any CHARSET meta tags. Exception: For maximum Internet Explorer compatibility, insert the results of newrelic.getBrowserTimingHeader() after any X-UA-COMPATIBLE HTTP-EQUIV meta tags. Call the header once for every request. Do not cache the header. Generating headers is fast, and it does not require your application to make extra requests to New Relic. Framework examples Here are some examples of how to set up browser monitoring with different frameworks and templates. Express and jade This example uses Express, a web application framework, and jade, a template module. Although the specifics are different with other frameworks, this general approach should work in most cases. The simplest way to insert browser timing headings is to pass the newrelic module into your template, and then call newrelic.getBrowsertimingHeader() from within the template. In your app.js: var newrelic = require('newrelic'); var app = require('express')(); // in express, this lets you call newrelic from within a template app.locals.newrelic = newrelic; app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your layout.jade: doctype html html head != newrelic.getBrowserTimingHeader() title= title link(rel='stylesheet', href='stylesheets/style.css') body block content Copy Express and Swig This example uses Express with Swig. In your app.js: var newrelic = require('newrelic'); var http = require('http') var path = require('path') var swig = require('swig') var app = require('express')(); app.locals.newrelic = newrelic; //taken from http://paularmstrong.github.io/swig/docs/#express app.engine('html', swig.renderFile); app.set('view engine', 'html'); app.set('views', __dirname + '/views'); app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your views/user.html: <!DOCTYPE html> <html> <head> {{ newrelic.getBrowserTimingHeader() }} <title>Hello</title> </head> <body> <h1>Hello World</h1> </body> </html> Copy Hapi.js and handlebars This example uses hapi.js and handlebars. Other similar templating languages typically require triple brackets; for example, using mustache with hogan-express. This helps prevent escaping of the script content. Using hapi, in your app.js: var newrelic = require('newrelic'); var Hapi = require('hapi'); var server = new Hapi.Server(parseInt(PORT), '0.0.0.0', { views: { engines : {html: 'handlebars' }, path : __dirname + '/templates' } }); function homepage(request, reply) { var context = { // pass in the header each request nreum : newrelic.getBrowserTimingHeader(), content : ... }; reply.view('homepage', context); }; server.route({ method : 'GET', path : '/', handler : homepage }); server.start(); Copy In your templates/homepage.html: <!DOCTYPE html> <html> <head> {{{ nreum }}} <title>Hello</title> </head> <body> {{ content }} </body> </html> Copy Disable header generation By default, calls to newrelic.getBrowserTimingHeader() should return valid headers. To disable header generation without removing your template code: In your newrelic.js file, add: browser_monitoring : { enable : false } Copy You can also set the environment variable NEW_RELIC_BROWSER_MONITOR_ENABLE=false. Caution Always leave ssl between the agent and the New Relic collector when using browser monitoring. You can safely leave the API calls in place even if you are not using browser monitoring or the newrelic module. If browser monitoring is disabled, or if there is an error so that working headers cannot be generated, the newrelic module generates an innocuous HTML comment. If you disable the newrelic module completely, no content will be generated.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.6172,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the Node.js <em>agent</em>",
        "sections": "Browser monitoring and the Node.js <em>agent</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "With the <em>Node.js</em> <em>agent</em>, you can add browser <em>instrumentation</em> to <em>your</em> web pages. To use browser monitoring with <em>your</em> <em>Node.js</em> <em>agent</em>, ensure you have the latest release of the <em>Node.js</em> <em>agent</em>. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>"
      },
      "id": "603e8376e7b9d2b7472a07f7"
    }
  ],
  "/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation": [
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-06-09T01:12:41Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.6597,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Browser monitoring and the Node.js agent",
        "Insert the JavaScript header",
        "Framework examples",
        "Express and jade",
        "Express and Swig",
        "Hapi.js and handlebars",
        "Disable header generation",
        "Caution"
      ],
      "title": "Browser monitoring and the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "8b8cba2d5ce2acdc55df2621d850329cf4796bbd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/browser-monitoring-nodejs-agent/",
      "published_at": "2021-06-08T14:56:05Z",
      "updated_at": "2021-03-16T09:02:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Node.js agent, you can add browser instrumentation to your web pages. To use browser monitoring with your Node.js agent, ensure you have the latest release of the Node.js agent. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Node.js agent. Insert the JavaScript header Instrumentation for the Node.js agent can continue beyond your application into end users' browsers. The newrelic module can generate script headers which, when inserted into your HTML templates, will capture the end users' page load times. The headers must be manually injected, but no extra configuration is necessary. At the beginning of your html page's head tag, insert the results of newrelic.getBrowserTimingHeader() after any CHARSET meta tags. Exception: For maximum Internet Explorer compatibility, insert the results of newrelic.getBrowserTimingHeader() after any X-UA-COMPATIBLE HTTP-EQUIV meta tags. Call the header once for every request. Do not cache the header. Generating headers is fast, and it does not require your application to make extra requests to New Relic. Framework examples Here are some examples of how to set up browser monitoring with different frameworks and templates. Express and jade This example uses Express, a web application framework, and jade, a template module. Although the specifics are different with other frameworks, this general approach should work in most cases. The simplest way to insert browser timing headings is to pass the newrelic module into your template, and then call newrelic.getBrowsertimingHeader() from within the template. In your app.js: var newrelic = require('newrelic'); var app = require('express')(); // in express, this lets you call newrelic from within a template app.locals.newrelic = newrelic; app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your layout.jade: doctype html html head != newrelic.getBrowserTimingHeader() title= title link(rel='stylesheet', href='stylesheets/style.css') body block content Copy Express and Swig This example uses Express with Swig. In your app.js: var newrelic = require('newrelic'); var http = require('http') var path = require('path') var swig = require('swig') var app = require('express')(); app.locals.newrelic = newrelic; //taken from http://paularmstrong.github.io/swig/docs/#express app.engine('html', swig.renderFile); app.set('view engine', 'html'); app.set('views', __dirname + '/views'); app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your views/user.html: <!DOCTYPE html> <html> <head> {{ newrelic.getBrowserTimingHeader() }} <title>Hello</title> </head> <body> <h1>Hello World</h1> </body> </html> Copy Hapi.js and handlebars This example uses hapi.js and handlebars. Other similar templating languages typically require triple brackets; for example, using mustache with hogan-express. This helps prevent escaping of the script content. Using hapi, in your app.js: var newrelic = require('newrelic'); var Hapi = require('hapi'); var server = new Hapi.Server(parseInt(PORT), '0.0.0.0', { views: { engines : {html: 'handlebars' }, path : __dirname + '/templates' } }); function homepage(request, reply) { var context = { // pass in the header each request nreum : newrelic.getBrowserTimingHeader(), content : ... }; reply.view('homepage', context); }; server.route({ method : 'GET', path : '/', handler : homepage }); server.start(); Copy In your templates/homepage.html: <!DOCTYPE html> <html> <head> {{{ nreum }}} <title>Hello</title> </head> <body> {{ content }} </body> </html> Copy Disable header generation By default, calls to newrelic.getBrowserTimingHeader() should return valid headers. To disable header generation without removing your template code: In your newrelic.js file, add: browser_monitoring : { enable : false } Copy You can also set the environment variable NEW_RELIC_BROWSER_MONITOR_ENABLE=false. Caution Always leave ssl between the agent and the New Relic collector when using browser monitoring. You can safely leave the API calls in place even if you are not using browser monitoring or the newrelic module. If browser monitoring is disabled, or if there is an error so that working headers cannot be generated, the newrelic module generates an innocuous HTML comment. If you disable the newrelic module completely, no content will be generated.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.6172,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the Node.js <em>agent</em>",
        "sections": "Browser monitoring and the Node.js <em>agent</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "With the <em>Node.js</em> <em>agent</em>, you can add browser <em>instrumentation</em> to <em>your</em> web pages. To use browser monitoring with <em>your</em> <em>Node.js</em> <em>agent</em>, ensure you have the latest release of the <em>Node.js</em> <em>agent</em>. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>"
      },
      "id": "603e8376e7b9d2b7472a07f7"
    },
    {
      "sections": [
        "Apollo Server plugin and Node.js",
        "Compatibility",
        "GitHub documentation"
      ],
      "title": "Apollo Server plugin and Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "823dc0152fa10c89d0379c58ab3e8599726e56a9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/apollo-server-plugin-nodejs/",
      "published_at": "2021-06-08T20:49:58Z",
      "updated_at": "2021-03-13T07:26:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Apollo Server plugin instruments your Apollo Server applications to give visibility into your GraphQL payloads. This helps you uncover and diagnose the cause of your slow GraphQL queries. Our plugin records overall timings for queries and uses distributed tracing to uncover the route problem. Use this instrumentation to see if the problem arises from resolving a piece of requested data or if it stems from work done on other services or databases. Compatibility The New Relic plugin works with the following Apollo Server modules: apollo-server apollo-server-express apollo-server-hapi apollo-server-koa apollo-server-fastify Because fastify is not fully instrumented in the Node.js agent, transactions are prefixed with WebTransaction\\Nodejs. Other plugins may work, depending on their underlying implementation, but they have not been verified. GitHub documentation For detailed information about installation, configuration, transaction details, metrics, segments, errors, testing, troubleshooting, and more, see New Relic's Apollo Server plugin documentation on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.11208,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "-hapi apollo-server-koa apollo-server-fastify Because fastify is not fully instrumented in the <em>Node.js</em> <em>agent</em>, transactions are prefixed with WebTransaction\\<em>Nodejs</em>. Other plugins may work, depending on their underlying implementation, but they have not been verified. GitHub documentation For detailed"
      },
      "id": "6043cd9528ccbceaf72c60be"
    }
  ],
  "/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-metrics": [
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-06-09T01:12:41Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.6597,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-06-08T14:56:05Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.65952,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    },
    {
      "sections": [
        "Browser monitoring and the Node.js agent",
        "Insert the JavaScript header",
        "Framework examples",
        "Express and jade",
        "Express and Swig",
        "Hapi.js and handlebars",
        "Disable header generation",
        "Caution"
      ],
      "title": "Browser monitoring and the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "8b8cba2d5ce2acdc55df2621d850329cf4796bbd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/browser-monitoring-nodejs-agent/",
      "published_at": "2021-06-08T14:56:05Z",
      "updated_at": "2021-03-16T09:02:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Node.js agent, you can add browser instrumentation to your web pages. To use browser monitoring with your Node.js agent, ensure you have the latest release of the Node.js agent. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Node.js agent. Insert the JavaScript header Instrumentation for the Node.js agent can continue beyond your application into end users' browsers. The newrelic module can generate script headers which, when inserted into your HTML templates, will capture the end users' page load times. The headers must be manually injected, but no extra configuration is necessary. At the beginning of your html page's head tag, insert the results of newrelic.getBrowserTimingHeader() after any CHARSET meta tags. Exception: For maximum Internet Explorer compatibility, insert the results of newrelic.getBrowserTimingHeader() after any X-UA-COMPATIBLE HTTP-EQUIV meta tags. Call the header once for every request. Do not cache the header. Generating headers is fast, and it does not require your application to make extra requests to New Relic. Framework examples Here are some examples of how to set up browser monitoring with different frameworks and templates. Express and jade This example uses Express, a web application framework, and jade, a template module. Although the specifics are different with other frameworks, this general approach should work in most cases. The simplest way to insert browser timing headings is to pass the newrelic module into your template, and then call newrelic.getBrowsertimingHeader() from within the template. In your app.js: var newrelic = require('newrelic'); var app = require('express')(); // in express, this lets you call newrelic from within a template app.locals.newrelic = newrelic; app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your layout.jade: doctype html html head != newrelic.getBrowserTimingHeader() title= title link(rel='stylesheet', href='stylesheets/style.css') body block content Copy Express and Swig This example uses Express with Swig. In your app.js: var newrelic = require('newrelic'); var http = require('http') var path = require('path') var swig = require('swig') var app = require('express')(); app.locals.newrelic = newrelic; //taken from http://paularmstrong.github.io/swig/docs/#express app.engine('html', swig.renderFile); app.set('view engine', 'html'); app.set('views', __dirname + '/views'); app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your views/user.html: <!DOCTYPE html> <html> <head> {{ newrelic.getBrowserTimingHeader() }} <title>Hello</title> </head> <body> <h1>Hello World</h1> </body> </html> Copy Hapi.js and handlebars This example uses hapi.js and handlebars. Other similar templating languages typically require triple brackets; for example, using mustache with hogan-express. This helps prevent escaping of the script content. Using hapi, in your app.js: var newrelic = require('newrelic'); var Hapi = require('hapi'); var server = new Hapi.Server(parseInt(PORT), '0.0.0.0', { views: { engines : {html: 'handlebars' }, path : __dirname + '/templates' } }); function homepage(request, reply) { var context = { // pass in the header each request nreum : newrelic.getBrowserTimingHeader(), content : ... }; reply.view('homepage', context); }; server.route({ method : 'GET', path : '/', handler : homepage }); server.start(); Copy In your templates/homepage.html: <!DOCTYPE html> <html> <head> {{{ nreum }}} <title>Hello</title> </head> <body> {{ content }} </body> </html> Copy Disable header generation By default, calls to newrelic.getBrowserTimingHeader() should return valid headers. To disable header generation without removing your template code: In your newrelic.js file, add: browser_monitoring : { enable : false } Copy You can also set the environment variable NEW_RELIC_BROWSER_MONITOR_ENABLE=false. Caution Always leave ssl between the agent and the New Relic collector when using browser monitoring. You can safely leave the API calls in place even if you are not using browser monitoring or the newrelic module. If browser monitoring is disabled, or if there is an error so that working headers cannot be generated, the newrelic module generates an innocuous HTML comment. If you disable the newrelic module completely, no content will be generated.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.6172,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the Node.js <em>agent</em>",
        "sections": "Browser monitoring and the Node.js <em>agent</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "With the <em>Node.js</em> <em>agent</em>, you can add browser <em>instrumentation</em> to <em>your</em> web pages. To use browser monitoring with <em>your</em> <em>Node.js</em> <em>agent</em>, ensure you have the latest release of the <em>Node.js</em> <em>agent</em>. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>"
      },
      "id": "603e8376e7b9d2b7472a07f7"
    }
  ],
  "/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-v1-custom-instrumentation-legacy": [
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-06-09T01:12:41Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.6597,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-06-08T14:56:05Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.65952,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    },
    {
      "sections": [
        "Browser monitoring and the Node.js agent",
        "Insert the JavaScript header",
        "Framework examples",
        "Express and jade",
        "Express and Swig",
        "Hapi.js and handlebars",
        "Disable header generation",
        "Caution"
      ],
      "title": "Browser monitoring and the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "8b8cba2d5ce2acdc55df2621d850329cf4796bbd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/browser-monitoring-nodejs-agent/",
      "published_at": "2021-06-08T14:56:05Z",
      "updated_at": "2021-03-16T09:02:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Node.js agent, you can add browser instrumentation to your web pages. To use browser monitoring with your Node.js agent, ensure you have the latest release of the Node.js agent. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Node.js agent. Insert the JavaScript header Instrumentation for the Node.js agent can continue beyond your application into end users' browsers. The newrelic module can generate script headers which, when inserted into your HTML templates, will capture the end users' page load times. The headers must be manually injected, but no extra configuration is necessary. At the beginning of your html page's head tag, insert the results of newrelic.getBrowserTimingHeader() after any CHARSET meta tags. Exception: For maximum Internet Explorer compatibility, insert the results of newrelic.getBrowserTimingHeader() after any X-UA-COMPATIBLE HTTP-EQUIV meta tags. Call the header once for every request. Do not cache the header. Generating headers is fast, and it does not require your application to make extra requests to New Relic. Framework examples Here are some examples of how to set up browser monitoring with different frameworks and templates. Express and jade This example uses Express, a web application framework, and jade, a template module. Although the specifics are different with other frameworks, this general approach should work in most cases. The simplest way to insert browser timing headings is to pass the newrelic module into your template, and then call newrelic.getBrowsertimingHeader() from within the template. In your app.js: var newrelic = require('newrelic'); var app = require('express')(); // in express, this lets you call newrelic from within a template app.locals.newrelic = newrelic; app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your layout.jade: doctype html html head != newrelic.getBrowserTimingHeader() title= title link(rel='stylesheet', href='stylesheets/style.css') body block content Copy Express and Swig This example uses Express with Swig. In your app.js: var newrelic = require('newrelic'); var http = require('http') var path = require('path') var swig = require('swig') var app = require('express')(); app.locals.newrelic = newrelic; //taken from http://paularmstrong.github.io/swig/docs/#express app.engine('html', swig.renderFile); app.set('view engine', 'html'); app.set('views', __dirname + '/views'); app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your views/user.html: <!DOCTYPE html> <html> <head> {{ newrelic.getBrowserTimingHeader() }} <title>Hello</title> </head> <body> <h1>Hello World</h1> </body> </html> Copy Hapi.js and handlebars This example uses hapi.js and handlebars. Other similar templating languages typically require triple brackets; for example, using mustache with hogan-express. This helps prevent escaping of the script content. Using hapi, in your app.js: var newrelic = require('newrelic'); var Hapi = require('hapi'); var server = new Hapi.Server(parseInt(PORT), '0.0.0.0', { views: { engines : {html: 'handlebars' }, path : __dirname + '/templates' } }); function homepage(request, reply) { var context = { // pass in the header each request nreum : newrelic.getBrowserTimingHeader(), content : ... }; reply.view('homepage', context); }; server.route({ method : 'GET', path : '/', handler : homepage }); server.start(); Copy In your templates/homepage.html: <!DOCTYPE html> <html> <head> {{{ nreum }}} <title>Hello</title> </head> <body> {{ content }} </body> </html> Copy Disable header generation By default, calls to newrelic.getBrowserTimingHeader() should return valid headers. To disable header generation without removing your template code: In your newrelic.js file, add: browser_monitoring : { enable : false } Copy You can also set the environment variable NEW_RELIC_BROWSER_MONITOR_ENABLE=false. Caution Always leave ssl between the agent and the New Relic collector when using browser monitoring. You can safely leave the API calls in place even if you are not using browser monitoring or the newrelic module. If browser monitoring is disabled, or if there is an error so that working headers cannot be generated, the newrelic module generates an innocuous HTML comment. If you disable the newrelic module completely, no content will be generated.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.6172,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the Node.js <em>agent</em>",
        "sections": "Browser monitoring and the Node.js <em>agent</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "With the <em>Node.js</em> <em>agent</em>, you can add browser <em>instrumentation</em> to <em>your</em> web pages. To use browser monitoring with <em>your</em> <em>Node.js</em> <em>agent</em>, ensure you have the latest release of the <em>Node.js</em> <em>agent</em>. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>"
      },
      "id": "603e8376e7b9d2b7472a07f7"
    }
  ],
  "/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vm-measurements": [
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-06-09T01:12:41Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.6597,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-06-08T14:56:05Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.65952,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    },
    {
      "sections": [
        "Browser monitoring and the Node.js agent",
        "Insert the JavaScript header",
        "Framework examples",
        "Express and jade",
        "Express and Swig",
        "Hapi.js and handlebars",
        "Disable header generation",
        "Caution"
      ],
      "title": "Browser monitoring and the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "8b8cba2d5ce2acdc55df2621d850329cf4796bbd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/browser-monitoring-nodejs-agent/",
      "published_at": "2021-06-08T14:56:05Z",
      "updated_at": "2021-03-16T09:02:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Node.js agent, you can add browser instrumentation to your web pages. To use browser monitoring with your Node.js agent, ensure you have the latest release of the Node.js agent. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Node.js agent. Insert the JavaScript header Instrumentation for the Node.js agent can continue beyond your application into end users' browsers. The newrelic module can generate script headers which, when inserted into your HTML templates, will capture the end users' page load times. The headers must be manually injected, but no extra configuration is necessary. At the beginning of your html page's head tag, insert the results of newrelic.getBrowserTimingHeader() after any CHARSET meta tags. Exception: For maximum Internet Explorer compatibility, insert the results of newrelic.getBrowserTimingHeader() after any X-UA-COMPATIBLE HTTP-EQUIV meta tags. Call the header once for every request. Do not cache the header. Generating headers is fast, and it does not require your application to make extra requests to New Relic. Framework examples Here are some examples of how to set up browser monitoring with different frameworks and templates. Express and jade This example uses Express, a web application framework, and jade, a template module. Although the specifics are different with other frameworks, this general approach should work in most cases. The simplest way to insert browser timing headings is to pass the newrelic module into your template, and then call newrelic.getBrowsertimingHeader() from within the template. In your app.js: var newrelic = require('newrelic'); var app = require('express')(); // in express, this lets you call newrelic from within a template app.locals.newrelic = newrelic; app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your layout.jade: doctype html html head != newrelic.getBrowserTimingHeader() title= title link(rel='stylesheet', href='stylesheets/style.css') body block content Copy Express and Swig This example uses Express with Swig. In your app.js: var newrelic = require('newrelic'); var http = require('http') var path = require('path') var swig = require('swig') var app = require('express')(); app.locals.newrelic = newrelic; //taken from http://paularmstrong.github.io/swig/docs/#express app.engine('html', swig.renderFile); app.set('view engine', 'html'); app.set('views', __dirname + '/views'); app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your views/user.html: <!DOCTYPE html> <html> <head> {{ newrelic.getBrowserTimingHeader() }} <title>Hello</title> </head> <body> <h1>Hello World</h1> </body> </html> Copy Hapi.js and handlebars This example uses hapi.js and handlebars. Other similar templating languages typically require triple brackets; for example, using mustache with hogan-express. This helps prevent escaping of the script content. Using hapi, in your app.js: var newrelic = require('newrelic'); var Hapi = require('hapi'); var server = new Hapi.Server(parseInt(PORT), '0.0.0.0', { views: { engines : {html: 'handlebars' }, path : __dirname + '/templates' } }); function homepage(request, reply) { var context = { // pass in the header each request nreum : newrelic.getBrowserTimingHeader(), content : ... }; reply.view('homepage', context); }; server.route({ method : 'GET', path : '/', handler : homepage }); server.start(); Copy In your templates/homepage.html: <!DOCTYPE html> <html> <head> {{{ nreum }}} <title>Hello</title> </head> <body> {{ content }} </body> </html> Copy Disable header generation By default, calls to newrelic.getBrowserTimingHeader() should return valid headers. To disable header generation without removing your template code: In your newrelic.js file, add: browser_monitoring : { enable : false } Copy You can also set the environment variable NEW_RELIC_BROWSER_MONITOR_ENABLE=false. Caution Always leave ssl between the agent and the New Relic collector when using browser monitoring. You can safely leave the API calls in place even if you are not using browser monitoring or the newrelic module. If browser monitoring is disabled, or if there is an error so that working headers cannot be generated, the newrelic module generates an innocuous HTML comment. If you disable the newrelic module completely, no content will be generated.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.6172,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the Node.js <em>agent</em>",
        "sections": "Browser monitoring and the Node.js <em>agent</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "With the <em>Node.js</em> <em>agent</em>, you can add browser <em>instrumentation</em> to <em>your</em> web pages. To use browser monitoring with <em>your</em> <em>Node.js</em> <em>agent</em>, ensure you have the latest release of the <em>Node.js</em> <em>agent</em>. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>"
      },
      "id": "603e8376e7b9d2b7472a07f7"
    }
  ],
  "/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page": [
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-06-08T14:56:05Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.65952,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    },
    {
      "sections": [
        "Browser monitoring and the Node.js agent",
        "Insert the JavaScript header",
        "Framework examples",
        "Express and jade",
        "Express and Swig",
        "Hapi.js and handlebars",
        "Disable header generation",
        "Caution"
      ],
      "title": "Browser monitoring and the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "8b8cba2d5ce2acdc55df2621d850329cf4796bbd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/browser-monitoring-nodejs-agent/",
      "published_at": "2021-06-08T14:56:05Z",
      "updated_at": "2021-03-16T09:02:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Node.js agent, you can add browser instrumentation to your web pages. To use browser monitoring with your Node.js agent, ensure you have the latest release of the Node.js agent. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Node.js agent. Insert the JavaScript header Instrumentation for the Node.js agent can continue beyond your application into end users' browsers. The newrelic module can generate script headers which, when inserted into your HTML templates, will capture the end users' page load times. The headers must be manually injected, but no extra configuration is necessary. At the beginning of your html page's head tag, insert the results of newrelic.getBrowserTimingHeader() after any CHARSET meta tags. Exception: For maximum Internet Explorer compatibility, insert the results of newrelic.getBrowserTimingHeader() after any X-UA-COMPATIBLE HTTP-EQUIV meta tags. Call the header once for every request. Do not cache the header. Generating headers is fast, and it does not require your application to make extra requests to New Relic. Framework examples Here are some examples of how to set up browser monitoring with different frameworks and templates. Express and jade This example uses Express, a web application framework, and jade, a template module. Although the specifics are different with other frameworks, this general approach should work in most cases. The simplest way to insert browser timing headings is to pass the newrelic module into your template, and then call newrelic.getBrowsertimingHeader() from within the template. In your app.js: var newrelic = require('newrelic'); var app = require('express')(); // in express, this lets you call newrelic from within a template app.locals.newrelic = newrelic; app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your layout.jade: doctype html html head != newrelic.getBrowserTimingHeader() title= title link(rel='stylesheet', href='stylesheets/style.css') body block content Copy Express and Swig This example uses Express with Swig. In your app.js: var newrelic = require('newrelic'); var http = require('http') var path = require('path') var swig = require('swig') var app = require('express')(); app.locals.newrelic = newrelic; //taken from http://paularmstrong.github.io/swig/docs/#express app.engine('html', swig.renderFile); app.set('view engine', 'html'); app.set('views', __dirname + '/views'); app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your views/user.html: <!DOCTYPE html> <html> <head> {{ newrelic.getBrowserTimingHeader() }} <title>Hello</title> </head> <body> <h1>Hello World</h1> </body> </html> Copy Hapi.js and handlebars This example uses hapi.js and handlebars. Other similar templating languages typically require triple brackets; for example, using mustache with hogan-express. This helps prevent escaping of the script content. Using hapi, in your app.js: var newrelic = require('newrelic'); var Hapi = require('hapi'); var server = new Hapi.Server(parseInt(PORT), '0.0.0.0', { views: { engines : {html: 'handlebars' }, path : __dirname + '/templates' } }); function homepage(request, reply) { var context = { // pass in the header each request nreum : newrelic.getBrowserTimingHeader(), content : ... }; reply.view('homepage', context); }; server.route({ method : 'GET', path : '/', handler : homepage }); server.start(); Copy In your templates/homepage.html: <!DOCTYPE html> <html> <head> {{{ nreum }}} <title>Hello</title> </head> <body> {{ content }} </body> </html> Copy Disable header generation By default, calls to newrelic.getBrowserTimingHeader() should return valid headers. To disable header generation without removing your template code: In your newrelic.js file, add: browser_monitoring : { enable : false } Copy You can also set the environment variable NEW_RELIC_BROWSER_MONITOR_ENABLE=false. Caution Always leave ssl between the agent and the New Relic collector when using browser monitoring. You can safely leave the API calls in place even if you are not using browser monitoring or the newrelic module. If browser monitoring is disabled, or if there is an error so that working headers cannot be generated, the newrelic module generates an innocuous HTML comment. If you disable the newrelic module completely, no content will be generated.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.6172,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the Node.js <em>agent</em>",
        "sections": "Browser monitoring and the Node.js <em>agent</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "With the <em>Node.js</em> <em>agent</em>, you can add browser <em>instrumentation</em> to <em>your</em> web pages. To use browser monitoring with <em>your</em> <em>Node.js</em> <em>agent</em>, ensure you have the latest release of the <em>Node.js</em> <em>agent</em>. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>"
      },
      "id": "603e8376e7b9d2b7472a07f7"
    },
    {
      "sections": [
        "Apollo Server plugin and Node.js",
        "Compatibility",
        "GitHub documentation"
      ],
      "title": "Apollo Server plugin and Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "823dc0152fa10c89d0379c58ab3e8599726e56a9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/apollo-server-plugin-nodejs/",
      "published_at": "2021-06-08T20:49:58Z",
      "updated_at": "2021-03-13T07:26:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Apollo Server plugin instruments your Apollo Server applications to give visibility into your GraphQL payloads. This helps you uncover and diagnose the cause of your slow GraphQL queries. Our plugin records overall timings for queries and uses distributed tracing to uncover the route problem. Use this instrumentation to see if the problem arises from resolving a piece of requested data or if it stems from work done on other services or databases. Compatibility The New Relic plugin works with the following Apollo Server modules: apollo-server apollo-server-express apollo-server-hapi apollo-server-koa apollo-server-fastify Because fastify is not fully instrumented in the Node.js agent, transactions are prefixed with WebTransaction\\Nodejs. Other plugins may work, depending on their underlying implementation, but they have not been verified. GitHub documentation For detailed information about installation, configuration, transaction details, metrics, segments, errors, testing, troubleshooting, and more, see New Relic's Apollo Server plugin documentation on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.11208,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "-hapi apollo-server-koa apollo-server-fastify Because fastify is not fully instrumented in the <em>Node.js</em> <em>agent</em>, transactions are prefixed with WebTransaction\\<em>Nodejs</em>. Other plugins may work, depending on their underlying implementation, but they have not been verified. GitHub documentation For detailed"
      },
      "id": "6043cd9528ccbceaf72c60be"
    }
  ],
  "/docs/agents/nodejs-agent/getting-started/apm-agent-security-nodejs": [
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-06-08T14:45:02Z",
      "updated_at": "2021-03-16T15:02:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 16 October 2021 April-October 2021 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 April-October 2021 Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect v1 and v2 (router not supported) Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as-is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you full-stack observability: Product Integration Browser monitoring The Node.js agent automatically injects the browser monitoring agent when you enable auto-instrumentation. After enabling browser monitoring injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.6274,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ". The following are proposed time ranges. The actual release date may vary. <em>Node.js</em> version Active long term support (LTS) <em>start</em> date Initial release date of <em>Node.js</em> <em>agent</em> with support 16 October 2021 April-October 2021 End of support for <em>Node.js</em> releases reaching EOL When support for a new long term support"
      },
      "id": "6043d8dae7b9d2d4415799df"
    },
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Tip",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "8e664d52df4f0ccf1c91301e3b620699a0770850",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-06-08T14:57:04Z",
      "updated_at": "2021-03-11T07:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Tip To use Node.js or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting Browser instrumentation: If you encounter problems with Browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.028465,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Pinpoint and solve issues down to the line of code with <em>Node.js</em> monitoring from New Relic. With features like service maps and error analytics, our <em>Node.js</em> <em>agent</em> helps you <em>get</em> the full picture of your app environment. Tip To use <em>Node.js</em> or any other <em>agent</em>, as well as the rest of our observability"
      },
      "id": "6043d881196a67be9f960f7a"
    },
    {
      "sections": [
        "APM agent security: Python",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "Tip"
      ],
      "title": "APM agent security: Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "ad1cc218ab320532980be60513a8ce52b5e209c3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/apm-agent-security-python/",
      "published_at": "2021-06-09T03:33:08Z",
      "updated_at": "2021-06-03T06:22:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the Python agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: The agent does not collect message queue parameters. You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Python agent configuration file Custom attributes Python agent API Tip Some of these settings can be changed using environment variables. See Python agent environment variables for the complete list. Setting Effects on data security audit_log_file string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the data collector. You can then evaluate the information that the agent sends to the collector to see if it includes sensitive information. high_security boolean Default: false To enable high security mode, set this to true and enable high security. This restricts the information you can send. proxy_host string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. attributes.enabled boolean Default: true By default, you are sending attributes. If you do not want to send attributes, set this to false. attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send in transaction traces, identify them using attributes.exclude. This restricts the information sent. Consider if you want to exclude these potentially sensitive attributes using attributes.exclude or if you need the information sent: request.headers.*: Removes all request headers. (Note that HTTP headers that contain sensitive data such as cookie and authorization are never collected.) response.headers.*: Removes all response headers. custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via record_custom_event(). If you enable high security mode, this is automatically set to false. transaction_tracer.record_sql string Default: obfuscated By default, transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. strip_exception_messages.enabled boolean Default: false If you enable high security mode, this is automatically set to true. If you are not using high security mode but want to strip messages from all exceptions except those in your allow list, set this to true.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.44063,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: Python",
        "sections": "APM <em>agent</em> security: Python",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "The Python <em>agent</em> default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security"
      },
      "id": "6044103f64441fbcef378ef7"
    }
  ],
  "/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Tip",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "8e664d52df4f0ccf1c91301e3b620699a0770850",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-06-08T14:57:04Z",
      "updated_at": "2021-03-11T07:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Tip To use Node.js or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting Browser instrumentation: If you encounter problems with Browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.028465,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Pinpoint and solve issues down to the line of code with <em>Node.js</em> monitoring from New Relic. With features like service maps and error analytics, our <em>Node.js</em> <em>agent</em> helps you <em>get</em> the full picture of your app environment. Tip To use <em>Node.js</em> or any other <em>agent</em>, as well as the rest of our observability"
      },
      "id": "6043d881196a67be9f960f7a"
    },
    {
      "sections": [
        "APM agent security: Node.js",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution"
      ],
      "title": "APM agent security: Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "50e7d82e0be7f4c4da34fda6704bfb0f7eec6c05",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/apm-agent-security-nodejs/",
      "published_at": "2021-06-08T14:57:04Z",
      "updated_at": "2021-03-11T07:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Node.js agent default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the Node.js agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. HTTPS: The agent communicates with New Relic using HTTPS. SQL: The agent sets SQL recording to off. When set to off, the agent does not capture slow queries and does not include backtraces or SQL in transaction traces. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: The agent does not collect message queue parameters. The record_sql configuration setting is changed to obfuscated, which strips out string and numeric literals. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Node.js agent configuration file Custom attributes Node.js agent API Setting Effects on data security audit_log.enabled boolean Default: false By default, the agent does not log all data sent to New Relic in the agent log file. If you set this to true, the agent logs the data sent to the New Relic collector in the agent log file. You can then evaluate the information that the agent sends by reviewing the agent log file to see if it includes sensitive information. high_security boolean Default: false To enable high security mode, set this to true and enable high security in New Relic. This restricts the information you can send to New Relic. proxy_host string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. record_sql string Default: off By default, record_sql is set to off. If you enable high security mode, this is automatically changed to obfuscated. You can change this setting to adjust the information that the agent sends to the New Relic collector. If you do not want the agent to capture slow queries or to include backtraces and SQL in transaction traces, set this to off. If you want the agent to strip out string and numeric literals, set this to obfuscated. If you want the agent to capture all query information in its original form, set this to raw.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.028465,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: Node.js",
        "sections": "APM <em>agent</em> security: Node.js",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "The New Relic <em>Node.js</em> <em>agent</em> default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic"
      },
      "id": "6043d8da28ccbc44562c608d"
    },
    {
      "sections": [
        "APM agent security: Python",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "Tip"
      ],
      "title": "APM agent security: Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "ad1cc218ab320532980be60513a8ce52b5e209c3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/apm-agent-security-python/",
      "published_at": "2021-06-09T03:33:08Z",
      "updated_at": "2021-06-03T06:22:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the Python agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: The agent does not collect message queue parameters. You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Python agent configuration file Custom attributes Python agent API Tip Some of these settings can be changed using environment variables. See Python agent environment variables for the complete list. Setting Effects on data security audit_log_file string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the data collector. You can then evaluate the information that the agent sends to the collector to see if it includes sensitive information. high_security boolean Default: false To enable high security mode, set this to true and enable high security. This restricts the information you can send. proxy_host string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. attributes.enabled boolean Default: true By default, you are sending attributes. If you do not want to send attributes, set this to false. attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send in transaction traces, identify them using attributes.exclude. This restricts the information sent. Consider if you want to exclude these potentially sensitive attributes using attributes.exclude or if you need the information sent: request.headers.*: Removes all request headers. (Note that HTTP headers that contain sensitive data such as cookie and authorization are never collected.) response.headers.*: Removes all response headers. custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via record_custom_event(). If you enable high security mode, this is automatically set to false. transaction_tracer.record_sql string Default: obfuscated By default, transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. strip_exception_messages.enabled boolean Default: false If you enable high security mode, this is automatically set to true. If you are not using high security mode but want to strip messages from all exceptions except those in your allow list, set this to true.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.4406,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: Python",
        "sections": "APM <em>agent</em> security: Python",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "The Python <em>agent</em> default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security"
      },
      "id": "6044103f64441fbcef378ef7"
    }
  ],
  "/docs/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs": [
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-06-08T14:45:02Z",
      "updated_at": "2021-03-16T15:02:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 16 October 2021 April-October 2021 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 April-October 2021 Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect v1 and v2 (router not supported) Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as-is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you full-stack observability: Product Integration Browser monitoring The Node.js agent automatically injects the browser monitoring agent when you enable auto-instrumentation. After enabling browser monitoring injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.6274,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ". The following are proposed time ranges. The actual release date may vary. <em>Node.js</em> version Active long term support (LTS) <em>start</em> date Initial release date of <em>Node.js</em> <em>agent</em> with support 16 October 2021 April-October 2021 End of support for <em>Node.js</em> releases reaching EOL When support for a new long term support"
      },
      "id": "6043d8dae7b9d2d4415799df"
    },
    {
      "sections": [
        "APM agent security: Node.js",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution"
      ],
      "title": "APM agent security: Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "50e7d82e0be7f4c4da34fda6704bfb0f7eec6c05",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/apm-agent-security-nodejs/",
      "published_at": "2021-06-08T14:57:04Z",
      "updated_at": "2021-03-11T07:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Node.js agent default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the Node.js agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. HTTPS: The agent communicates with New Relic using HTTPS. SQL: The agent sets SQL recording to off. When set to off, the agent does not capture slow queries and does not include backtraces or SQL in transaction traces. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: The agent does not collect message queue parameters. The record_sql configuration setting is changed to obfuscated, which strips out string and numeric literals. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Node.js agent configuration file Custom attributes Node.js agent API Setting Effects on data security audit_log.enabled boolean Default: false By default, the agent does not log all data sent to New Relic in the agent log file. If you set this to true, the agent logs the data sent to the New Relic collector in the agent log file. You can then evaluate the information that the agent sends by reviewing the agent log file to see if it includes sensitive information. high_security boolean Default: false To enable high security mode, set this to true and enable high security in New Relic. This restricts the information you can send to New Relic. proxy_host string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. record_sql string Default: off By default, record_sql is set to off. If you enable high security mode, this is automatically changed to obfuscated. You can change this setting to adjust the information that the agent sends to the New Relic collector. If you do not want the agent to capture slow queries or to include backtraces and SQL in transaction traces, set this to off. If you want the agent to strip out string and numeric literals, set this to obfuscated. If you want the agent to capture all query information in its original form, set this to raw.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.028465,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: Node.js",
        "sections": "APM <em>agent</em> security: Node.js",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "The New Relic <em>Node.js</em> <em>agent</em> default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic"
      },
      "id": "6043d8da28ccbc44562c608d"
    },
    {
      "sections": [
        "APM agent security: Python",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "Tip"
      ],
      "title": "APM agent security: Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "ad1cc218ab320532980be60513a8ce52b5e209c3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/apm-agent-security-python/",
      "published_at": "2021-06-09T03:33:08Z",
      "updated_at": "2021-06-03T06:22:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the Python agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: The agent does not collect message queue parameters. You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Python agent configuration file Custom attributes Python agent API Tip Some of these settings can be changed using environment variables. See Python agent environment variables for the complete list. Setting Effects on data security audit_log_file string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the data collector. You can then evaluate the information that the agent sends to the collector to see if it includes sensitive information. high_security boolean Default: false To enable high security mode, set this to true and enable high security. This restricts the information you can send. proxy_host string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. attributes.enabled boolean Default: true By default, you are sending attributes. If you do not want to send attributes, set this to false. attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send in transaction traces, identify them using attributes.exclude. This restricts the information sent. Consider if you want to exclude these potentially sensitive attributes using attributes.exclude or if you need the information sent: request.headers.*: Removes all request headers. (Note that HTTP headers that contain sensitive data such as cookie and authorization are never collected.) response.headers.*: Removes all response headers. custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via record_custom_event(). If you enable high security mode, this is automatically set to false. transaction_tracer.record_sql string Default: obfuscated By default, transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. strip_exception_messages.enabled boolean Default: false If you enable high security mode, this is automatically set to true. If you are not using high security mode but want to strip messages from all exceptions except those in your allow list, set this to true.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.4406,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: Python",
        "sections": "APM <em>agent</em> security: Python",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "The Python <em>agent</em> default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security"
      },
      "id": "6044103f64441fbcef378ef7"
    }
  ],
  "/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment": [
    {
      "sections": [
        "Node.js agent on Microsoft Azure Web Apps",
        "What you need",
        "Installing the Node.js agent",
        "Adding app settings in Azure",
        "Optional: Adding app settings with the CLI",
        "Using environment variables",
        "For more help"
      ],
      "title": "Node.js agent on Microsoft Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "83ad47cdad2739c3137c7a3b060d6d78f1884463",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/nodejs-agent-microsoft-azure/",
      "published_at": "2021-06-08T14:45:01Z",
      "updated_at": "2021-03-16T15:02:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn about special considerations for using Microsoft Azure Web Apps as a hosting service with New Relic's Node.js agent. What you need In addition to the Compatibility and requirements for the Node.js agent, this tutorial assumes you have a working installation of Node.js and the Windows Azure SDK for Node.js for your platform: Install the Azure SDK for Node.js. Ensure Git is installed. Installing the Node.js agent To add the New Relic Node.js agent to your Azure application: In your app's root, verify that there is a package.json file. If there is not, create one via the command line: touch package.json Copy Add the following to your package.json file: { \"name\": \"node\", \"version\": \"0.0.1\", \"dependencies\" : { \"newrelic\" : \"*\" }, \"engine\": { \"node\": \"10.18\" } } Copy Add require('newrelic'); to the top of the server.js file. For example: require('newrelic'); var http = require('http') var port = process.env.PORT || 1337; http.createServer(function(req, res) { res.writeHead(200, { 'Content-Type': 'text/plain' }); res.end('Hello New Relic Node.js agent!\\n'); }).listen(port); Copy Adding app settings in Azure After installation, you must configure your app in Azure Web Apps: Sign in to portal.azure.com. Select App Services > (select a Node.js app) > Configure. Add the following to the app settings: new_relic_app_name: Your Windows Azure website name new_relic_license_key: Your New Relic license key Save your settings. Restart your Node.js app. Generate some traffic to your app and wait a few minutes. After waiting, see your data by going to one.newrelic.com > APM > (select your app). Optional: Adding app settings with the CLI Optional: Here is an example of how to add the app settings by using the CLI (Node SDK): azure account download \"YOUR_SUBSCRIPTION_NAME\" azure account import \"PATH_TO_PUBLISH_SETTINGS_FILE\" azure site config add \"new_relic_app_name=REPLACE_WITH_YOUR_APP_NAME\" azure site config add \"new_relic_license_key=REPLACE_WITH_YOUR_LICENSE_KEY\" azure site restart AZURE_WEB_APP_NAME Copy Using environment variables If your agent runs in PaaS environments such as Heroku or Azure Web Apps, all of the configuration variables in newrelic.js have counterparts that can be set as environment variables. You can freely mix and match variables in the configuration file. Environment variables override your configuration file settings. For example, as a convenience to Azure users, the agent will use APP_POOL_ID as the application name (NEW_RELIC_APP_NAME) if it's set, so you can use the name you chose without setting it twice. For more information, see Configuring Node.js with environment variables. For more help Additional documentation resources include: Node.js agent configuration (changing the default values in your agent configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.18276,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> on Microsoft Azure Web Apps",
        "sections": "Node.js <em>agent</em> on Microsoft Azure Web Apps",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Read on to learn about special considerations for using Microsoft Azure Web Apps as a <em>hosting</em> service with New Relic&#x27;s <em>Node.js</em> <em>agent</em>. What you need In addition to the Compatibility and requirements for the <em>Node.js</em> <em>agent</em>, this tutorial assumes you have a working installation of <em>Node.js</em>"
      },
      "id": "603e881528ccbc2501eba7a0"
    },
    {
      "sections": [
        "Node.js agent and Heroku",
        "Install the agent add-on",
        "Troubleshoot your installation",
        "Customize your configuration",
        "Upgrade from an existing New Relic installation",
        "For more help"
      ],
      "title": "Node.js agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "5a5a3dc52312ca8d70d4bb08c4b15df3209764a3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/nodejs-agent-heroku/",
      "published_at": "2021-06-08T14:45:02Z",
      "updated_at": "2021-03-11T09:41:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Node.js. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Here we describe special considerations for using Heroku as a hosting service with New Relic's Node.js agent. Install the agent add-on After deploying your Node.js app on Heroku, install the New Relic agent. Installing the add-on automatically creates a private New Relic account and configures access for Heroku servers. To install the New Relic add-on through the Heroku website's Add-on page for New Relic, you must be logged in to Heroku. From Heroku's Add-on page for New Relic, select the appropriate subscription plan. Then run this toolbelt command: heroku addons:create newrelic:$planlevel Copy From Select an app, select your New Relic app. Use this toolbelt command to give your app a descriptive name: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy If you are using environment variables instead of your newrelic.js config file settings to customize your Node.js agent configuration, use this toolbelt command: heroku config:set NEW_RELIC_NO_CONFIG_FILE='true' Copy Verify your New Relic app name, license key, and log setting: heroku config Copy Install the Node.js agent and save to your npm dependencies. npm install newrelic --save Copy To ensure that the newrelic package is properly included in your package.json file when you push to Heroku, install the New Relic Node.js agent package on your local system. Include New Relic on the first line of your app's main module: require ('newrelic'); Copy Run the following commands: git add . && git commit -m \"Add New Relic\" git push heroku master && heroku logs --tail Copy Restart your dyno. Generate some traffic to your app. New Relic will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Troubleshoot your installation If no data appears within a few minutes after you complete the installation procedures, follow the Node.js agent troubleshooting procedures. Customize your configuration You can customize the New Relic newrelic.js config file for your Node.js agent. You can also use New Relic's Node.js agent environment variables in the Heroku environment to override your config file values. Here is an example of using the Heroku command line to set environment variables instead of using your newrelic.js config file. $ heroku config:set NEW_RELIC_LICENSE_KEY=your license key $ heroku config:set NEW_RELIC_APP_NAME=your production app name $ heroku config:set NEW_RELIC_NO_CONFIG_FILE='true' Copy To confirm your settings from the command line, use: $ heroku config Copy Upgrade from an existing New Relic installation To upgrade your Node.js agent version if New Relic is already installed, use this toolbelt command: npm install newrelic --save Copy For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.47525,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> and Heroku",
        "sections": "Node.js <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for <em>hosting</em> web applications in various <em>agent</em> languages, including <em>Node.js</em>. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Here we describe special considerations for using Heroku as a <em>hosting</em> service with New"
      },
      "id": "6043d8dc28ccbcbd982c60a8"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-06-08T14:45:02Z",
      "updated_at": "2021-03-16T15:02:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 16 October 2021 April-October 2021 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 April-October 2021 Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect v1 and v2 (router not supported) Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as-is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you full-stack observability: Product Integration Browser monitoring The Node.js agent automatically injects the browser monitoring agent when you enable auto-instrumentation. After enabling browser monitoring injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 79.399826,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "<em>Hosting</em> <em>services</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. <em>Hosting</em> <em>services</em> Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of <em>Node.js</em> (like"
      },
      "id": "6043d8dae7b9d2d4415799df"
    }
  ],
  "/docs/agents/nodejs-agent/hosting-services/nodejs-agent-heroku": [
    {
      "sections": [
        "Node.js agent on Microsoft Azure Web Apps",
        "What you need",
        "Installing the Node.js agent",
        "Adding app settings in Azure",
        "Optional: Adding app settings with the CLI",
        "Using environment variables",
        "For more help"
      ],
      "title": "Node.js agent on Microsoft Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "83ad47cdad2739c3137c7a3b060d6d78f1884463",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/nodejs-agent-microsoft-azure/",
      "published_at": "2021-06-08T14:45:01Z",
      "updated_at": "2021-03-16T15:02:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn about special considerations for using Microsoft Azure Web Apps as a hosting service with New Relic's Node.js agent. What you need In addition to the Compatibility and requirements for the Node.js agent, this tutorial assumes you have a working installation of Node.js and the Windows Azure SDK for Node.js for your platform: Install the Azure SDK for Node.js. Ensure Git is installed. Installing the Node.js agent To add the New Relic Node.js agent to your Azure application: In your app's root, verify that there is a package.json file. If there is not, create one via the command line: touch package.json Copy Add the following to your package.json file: { \"name\": \"node\", \"version\": \"0.0.1\", \"dependencies\" : { \"newrelic\" : \"*\" }, \"engine\": { \"node\": \"10.18\" } } Copy Add require('newrelic'); to the top of the server.js file. For example: require('newrelic'); var http = require('http') var port = process.env.PORT || 1337; http.createServer(function(req, res) { res.writeHead(200, { 'Content-Type': 'text/plain' }); res.end('Hello New Relic Node.js agent!\\n'); }).listen(port); Copy Adding app settings in Azure After installation, you must configure your app in Azure Web Apps: Sign in to portal.azure.com. Select App Services > (select a Node.js app) > Configure. Add the following to the app settings: new_relic_app_name: Your Windows Azure website name new_relic_license_key: Your New Relic license key Save your settings. Restart your Node.js app. Generate some traffic to your app and wait a few minutes. After waiting, see your data by going to one.newrelic.com > APM > (select your app). Optional: Adding app settings with the CLI Optional: Here is an example of how to add the app settings by using the CLI (Node SDK): azure account download \"YOUR_SUBSCRIPTION_NAME\" azure account import \"PATH_TO_PUBLISH_SETTINGS_FILE\" azure site config add \"new_relic_app_name=REPLACE_WITH_YOUR_APP_NAME\" azure site config add \"new_relic_license_key=REPLACE_WITH_YOUR_LICENSE_KEY\" azure site restart AZURE_WEB_APP_NAME Copy Using environment variables If your agent runs in PaaS environments such as Heroku or Azure Web Apps, all of the configuration variables in newrelic.js have counterparts that can be set as environment variables. You can freely mix and match variables in the configuration file. Environment variables override your configuration file settings. For example, as a convenience to Azure users, the agent will use APP_POOL_ID as the application name (NEW_RELIC_APP_NAME) if it's set, so you can use the name you chose without setting it twice. For more information, see Configuring Node.js with environment variables. For more help Additional documentation resources include: Node.js agent configuration (changing the default values in your agent configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.18276,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> on Microsoft Azure Web Apps",
        "sections": "Node.js <em>agent</em> on Microsoft Azure Web Apps",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Read on to learn about special considerations for using Microsoft Azure Web Apps as a <em>hosting</em> service with New Relic&#x27;s <em>Node.js</em> <em>agent</em>. What you need In addition to the Compatibility and requirements for the <em>Node.js</em> <em>agent</em>, this tutorial assumes you have a working installation of <em>Node.js</em>"
      },
      "id": "603e881528ccbc2501eba7a0"
    },
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "28df1194ff848b2c26e5c966843d2bf5f0adbf9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-06-09T01:12:40Z",
      "updated_at": "2021-03-11T07:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in New Relic APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.466156,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "With New Relic&#x27;s <em>Node.js</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring"
      },
      "id": "6043d8da28ccbc08242c60a6"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-06-08T14:45:02Z",
      "updated_at": "2021-03-16T15:02:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 16 October 2021 April-October 2021 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 April-October 2021 Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect v1 and v2 (router not supported) Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as-is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you full-stack observability: Product Integration Browser monitoring The Node.js agent automatically injects the browser monitoring agent when you enable auto-instrumentation. After enabling browser monitoring injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 79.399826,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "<em>Hosting</em> <em>services</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. <em>Hosting</em> <em>services</em> Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of <em>Node.js</em> (like"
      },
      "id": "6043d8dae7b9d2d4415799df"
    }
  ],
  "/docs/agents/nodejs-agent/hosting-services/nodejs-agent-microsoft-azure": [
    {
      "sections": [
        "Node.js agent and Heroku",
        "Install the agent add-on",
        "Troubleshoot your installation",
        "Customize your configuration",
        "Upgrade from an existing New Relic installation",
        "For more help"
      ],
      "title": "Node.js agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "5a5a3dc52312ca8d70d4bb08c4b15df3209764a3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/nodejs-agent-heroku/",
      "published_at": "2021-06-08T14:45:02Z",
      "updated_at": "2021-03-11T09:41:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Node.js. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Here we describe special considerations for using Heroku as a hosting service with New Relic's Node.js agent. Install the agent add-on After deploying your Node.js app on Heroku, install the New Relic agent. Installing the add-on automatically creates a private New Relic account and configures access for Heroku servers. To install the New Relic add-on through the Heroku website's Add-on page for New Relic, you must be logged in to Heroku. From Heroku's Add-on page for New Relic, select the appropriate subscription plan. Then run this toolbelt command: heroku addons:create newrelic:$planlevel Copy From Select an app, select your New Relic app. Use this toolbelt command to give your app a descriptive name: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy If you are using environment variables instead of your newrelic.js config file settings to customize your Node.js agent configuration, use this toolbelt command: heroku config:set NEW_RELIC_NO_CONFIG_FILE='true' Copy Verify your New Relic app name, license key, and log setting: heroku config Copy Install the Node.js agent and save to your npm dependencies. npm install newrelic --save Copy To ensure that the newrelic package is properly included in your package.json file when you push to Heroku, install the New Relic Node.js agent package on your local system. Include New Relic on the first line of your app's main module: require ('newrelic'); Copy Run the following commands: git add . && git commit -m \"Add New Relic\" git push heroku master && heroku logs --tail Copy Restart your dyno. Generate some traffic to your app. New Relic will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Troubleshoot your installation If no data appears within a few minutes after you complete the installation procedures, follow the Node.js agent troubleshooting procedures. Customize your configuration You can customize the New Relic newrelic.js config file for your Node.js agent. You can also use New Relic's Node.js agent environment variables in the Heroku environment to override your config file values. Here is an example of using the Heroku command line to set environment variables instead of using your newrelic.js config file. $ heroku config:set NEW_RELIC_LICENSE_KEY=your license key $ heroku config:set NEW_RELIC_APP_NAME=your production app name $ heroku config:set NEW_RELIC_NO_CONFIG_FILE='true' Copy To confirm your settings from the command line, use: $ heroku config Copy Upgrade from an existing New Relic installation To upgrade your Node.js agent version if New Relic is already installed, use this toolbelt command: npm install newrelic --save Copy For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.47525,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> and Heroku",
        "sections": "Node.js <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for <em>hosting</em> web applications in various <em>agent</em> languages, including <em>Node.js</em>. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Here we describe special considerations for using Heroku as a <em>hosting</em> service with New"
      },
      "id": "6043d8dc28ccbcbd982c60a8"
    },
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "28df1194ff848b2c26e5c966843d2bf5f0adbf9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-06-09T01:12:40Z",
      "updated_at": "2021-03-11T07:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in New Relic APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.466156,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "With New Relic&#x27;s <em>Node.js</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring"
      },
      "id": "6043d8da28ccbc08242c60a6"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-06-08T14:45:02Z",
      "updated_at": "2021-03-16T15:02:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 16 October 2021 April-October 2021 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 April-October 2021 Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect v1 and v2 (router not supported) Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as-is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you full-stack observability: Product Integration Browser monitoring The Node.js agent automatically injects the browser monitoring agent when you enable auto-instrumentation. After enabling browser monitoring injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 79.399826,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "<em>Hosting</em> <em>services</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. <em>Hosting</em> <em>services</em> Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of <em>Node.js</em> (like"
      },
      "id": "6043d8dae7b9d2d4415799df"
    }
  ],
  "/docs/agents/nodejs-agent/index": [
    {
      "sections": [
        "Troubleshooting large memory usage (Node.js)",
        "Problem",
        "Solution",
        "Increase caused by TLS memory buffer allocation",
        "Caution",
        "Increase caused by cluster worker slab allocations",
        "Increase caused by log messages stored to disk",
        "Increase caused by leaked MongoDB cursors",
        "Increase caused by agent data storage"
      ],
      "title": "Troubleshooting large memory usage (Node.js)",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "fdacc90072462a34ca0db2b51f5145c1be4caf9d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/troubleshooting-large-memory-usage-nodejs/",
      "published_at": "2021-06-08T14:59:48Z",
      "updated_at": "2021-05-10T19:02:56Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You installed the New Relic Node.js agent, and your Node.js application's memory usage increased. Solution There are several possible causes for this memory increase and potential solutions for each. Increase caused by TLS memory buffer allocation The first time a Node.js application uses any form of encryption, including SSL and HTTPS, a slab buffer is created. The default size for this buffer is 10 MB. Applications running in environments where SSL termination on inbound requests occurs in a separate router layer do not normally incur this overhead. Cloud services like Heroku and AWS often operate this way. However, the Node.js agent sends outbound data to New Relic services over HTTPS, and this triggers the allocation of a slab buffer. Solution: In some cases, you can reduce the slab buffer below its 10 MB default. To set the slab buffer size, use tls.SLAB_BUFFER_SIZE. Caution When using the New Relic agent, do not set the slab buffer size below 128 KB. The slab buffer allocation should not be reduced for apps that communicate with services or clients using SSL, HTTPS, or any other form of cryptography. Increase caused by cluster worker slab allocations Node.js provides the Cluster module. This allows for handling requests in parallel by using all processor cores available on a host. However, each cluster worker allocates its own slab buffer for SSL transactions, and keeps its own copy of Node.js agent data. This multiplies the memory overhead by the number of cluster workers used. The is also true if a host runs multiple Node.js applications at the same time. Solution: Some cloud service providers use environments that state a higher number of processor cores than can actually be used at any given time. Reducing the number of cluster workers or running without Cluster support may decrease memory usage without impacting performance. Increase caused by log messages stored to disk Log messages are logged to disk by default. Due to how message data is handled, message objects may be moved into Old-pointer-space for garbage collection. This means the objects stay in memory for a while, even after all references to them are gone. This leads to a larger amount of memory consumed by a process at any given time. Additional processing time is also used for garbage collection. Solution: Depending on your version of the Node.js, the agent may default to the trace or info log levels. Decrease logging verbosity to info or warn levels to noticeably decrease memory usage and time spent in garbage collection. Increase caused by leaked MongoDB cursors Many database drivers use an abstraction called a cursor. Cursors provide the ability to iterate through the results of queries. For example, the mongodb driver provides cursors when executing find queries. Cursors live both as objects in the Node.js runtime and as entities in the MongoDB server. When an application has finished using a cursor, it should close it to free up resources in both the server and the client application. In Node.js, it is possible for a cursor to be garbage collected, freeing resources in the application, without closing the cursor in the server. This may be go unnoticed in the application. However, the New Relic Node.js agent keeps track of open cursors to measure the time spent iterating through results. If your application does not close all the cursors it uses, the agent will continue to track stale cursors and leak memory. Solution: Ensure every cursor created in your application is closed by calling cursor.close() after the application finishes processing the results of the query. Increase caused by agent data storage The Node.js agent records data for each transaction your app handles. Data is generally grouped by transaction name. The memory used by the agent increases with the number of different transactions recorded in each minute-long harvest cycle. In addition, a larger amount of data is kept during each transaction, but is eventually discarded when the transaction completes. Memory used by the agent increases with the number of concurrent transactions handled by the application. Solution: If agent data storage is identified as the cause of a memory usage increase, this can best be addressed by adding additional memory to your host, or by switching to a larger cloud instance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 78.14666,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Increase caused by <em>agent</em> data storage",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem You installed the New Relic <em>Node.js</em> <em>agent</em>, and your <em>Node.js</em> application&#x27;s memory usage increased. Solution There are several possible causes for this memory increase and potential solutions for each. Increase caused by TLS memory buffer allocation The first time a <em>Node.js</em> application uses"
      },
      "id": "603e9d6828ccbcb774eba788"
    },
    {
      "sections": [
        "Troubleshoot browser instrumentation in Node.js",
        "Problem",
        "Solution"
      ],
      "title": "Troubleshoot browser instrumentation in Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "2e88b00e4abda779f6e7241cd39cb9d0732b5af4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/troubleshoot-browser-instrumentation-nodejs/",
      "published_at": "2021-06-08T14:58:39Z",
      "updated_at": "2021-03-16T15:05:11Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If you have problems instrumenting browser applications via your New Relic Node.js agent, follow the standard browser monitoring troubleshooting procedures. Here are some additional tips for Node.js. Solution Error codes will automatically appear in the site source code and in your Node.js agent logs. Search for NREUM to find these codes. Error code Description 0 Browser monitoring has been explicitly disabled. This was done either in the newrelic.js or with an environment variable. (NEW_RELIC_BROWSER_MONITOR_ENABLE defaults to true.) 1 The browser agent was called outside of a web transaction. This may occur if you tried to generate the browser data once and then cache it, or if you called it in a background task. 2 Something unexpected occurred. 3 The transaction is unnamed. If you are not using Express or Restify and you did not explicitly name the transaction, this error appears. This is to avoid rolling the transaction name into / *. For more information, see naming your transactions. 4 The Node.js agent has not yet done a \"handshake\" with the collector. The app was started and a user hit the site before the collector could talk to the agent. This may occur because: The browser page loaded before the agent made its initial connection to New Relic. The license key is invalid. Some other problem occurred that would prevent the application ID from being available. If these errors persist longer than 1 minute, check your license key. Otherwise, the errors should disappear on their own. 5 Browser monitoring has been disabled on the collector side. For example, the collector did not return enough data for browser monitoring to be enabled. This is a collector issue, because some server-side configuration settings for Node.js currently are not available.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 67.615395,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem If you have problems instrumenting browser applications via your New Relic <em>Node.js</em> <em>agent</em>, follow the standard browser monitoring troubleshooting procedures. Here are some additional tips for <em>Node.js</em>. Solution Error codes will automatically appear in the site source code and in your <em>Node.js</em>"
      },
      "id": "603e7e82196a675274a83d9f"
    },
    {
      "sections": [
        "Troubleshoot message consumers",
        "Problem",
        "Solution",
        "Callbacks",
        "Callback problem",
        "Promises",
        "Promise problem"
      ],
      "title": "Troubleshoot message consumers",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "0658082539671d572e780dcc3599593dfd562419",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/troubleshoot-message-consumers/",
      "published_at": "2021-06-08T14:46:02Z",
      "updated_at": "2021-03-16T15:05:11Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Message consumer services have a few differences to HTTP servers that make monitoring them more difficult. This document discusses those limitations and ways to work around them with the New Relic Node.js agent. Because a message does not necessarily have a reply, it can be hard to determine the end of a transaction. If New Relic's Node.js agent cannot determine when a message consumer will be done, it will immediately end the transaction. Follow these troubleshooting tips depending on your application. Solution The solution to this issue depends on whether you are using callbacks or promises: Callbacks When using a callback-based messaging API such as amqplib's callback_api, there is no easy way to determine when your consumer is done. Here is an example. Callback problem In this example, all the transactions created for this service will be immediately ended and not show any of the work done by doWorkWithMessage. const newrelic = require('newrelic'); const amqp = require('amqplib/callback_api'); // Connect, make a channel, and assert required queues... channel.consume('my.queue', (msg) => { doWorkWithMessage(msg, (err) => { if (err) { logger.error(err); channel.reject(msg, true); // Requeue message on failure. } }); }, {noAck: true}); Copy In order to properly time the transaction, you need to get the transaction and end it manually, as shown in the following solution. Solution To properly time the transaction, get the transaction and end it manually. Modify the consumer to this: channel.consume('my.queue', (msg) => { var transaction = newrelic.getTransaction(); doWorkWithMessage(msg, (err) => { if (err) { logger.error(err); channel.reject(msg, true); // Requeue message on failure. } transaction.end(); }); }, {noAck: true}); Copy Promises For promise-based servers, the message consumer simply needs to return a promise. When that promise resolves or rejects, the transaction will be ended. Here is an example: Promise problem In this example, doWorkWithMessage returns a promise: const newrelic = require('newrelic'); const amqp = require('amqplib'); // Connect, make a channel, and assert required queues... channel.consume('my.queue', (msg) => { doWorkWithMessage(msg).catch((err) => { if (err) { logger.error(err); channel.reject(msg, true); // Requeue message on failure. } }); }, {noAck: true}); Copy Solution To get correct timing, return the end of the chain by modifying the code to: channel.consume('my.queue', (msg) => { return doWorkWithMessage(msg).catch((err) => { if (err) { logger.error(err); channel.reject(msg, true); // Requeue message on failure. } }); }, {noAck: true}); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 67.615395,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem Message consumer services have a few differences to HTTP servers that make monitoring them more difficult. This document discusses those limitations and ways to work around them with the New Relic <em>Node.js</em> <em>agent</em>. Because a message does not necessarily have a reply, it can be hard"
      },
      "id": "603e8eb4196a670c1ba83de2"
    }
  ],
  "/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent-docker": [
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-06-09T07:45:49Z",
      "updated_at": "2021-03-16T15:53:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the New Relic APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default true When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. When distributed tracing is enabled, you can collect span events. enabled Type Boolean Default false Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for span events, all attribute keys found in this list will be attached to span events. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with span events. For more information, see the agent attribute rules. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.62045,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>configuration</em>",
        "sections": "Node.js <em>agent</em> <em>configuration</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. <em>Configuration</em> methods and precedence The primary method to configure the <em>Node.js</em> <em>agent</em> is the <em>agent</em> <em>configuration</em> file (newrelic.js). You can also"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Install the Node.js agent",
        "Tip",
        "Important",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "5877d4bc24ac6201ac15fd7dd909ce85213e6680",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-06-08T20:49:58Z",
      "updated_at": "2021-03-16T15:03:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic Node.js agent installation. Tip To use Node.js or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add Node.js data Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.61404,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em>",
        "sections": "<em>Install</em> the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic <em>Node.js</em> <em>agent</em> <em>installation</em>. Tip To use <em>Node.js</em> or any other <em>agent</em>, as well as the rest of our"
      },
      "id": "603e962e28ccbcf759eba75b"
    },
    {
      "sections": [
        "Uninstall the Node.js agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "17cdfffa0ea6ea5888c601dca3846e50772fc112",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/uninstall-nodejs-agent/",
      "published_at": "2021-06-08T14:46:02Z",
      "updated_at": "2021-03-13T02:39:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to uninstall the New Relic Node.js agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall the New Relic Node.js agent: Remove require('newrelic'); as the first line of the app's main module. Remove the npm package with npm uninstall newrelic --save. Delete the newrelic.js file and unset any environment variables being used. When the uninstall process finishes, restart your app. For more information about installation, see Installing and maintaining Node.js. Tip You may also want to remove your app from New Relic. For more help Additional documentation resources include: Troubleshooting the Node.js agent (a library of troubleshooting solutions for Node.js)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.99199,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the Node.js <em>agent</em>",
        "sections": "Uninstall the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " newrelic --save. Delete the newrelic.js file and unset any environment variables being used. When the uninstall process finishes, restart your app. For more information about <em>installation</em>, see Installing and maintaining <em>Node.js</em>. Tip You may also want to remove your app from New Relic. For more help Additional documentation resources include: Troubleshooting the <em>Node.js</em> <em>agent</em> (a library of troubleshooting solutions for <em>Node.js</em>)"
      },
      "id": "6043d36a196a676f52960f77"
    }
  ],
  "/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent": [
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-06-09T07:45:49Z",
      "updated_at": "2021-03-16T15:53:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the New Relic APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default true When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. When distributed tracing is enabled, you can collect span events. enabled Type Boolean Default false Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for span events, all attribute keys found in this list will be attached to span events. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with span events. For more information, see the agent attribute rules. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.62045,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>configuration</em>",
        "sections": "Node.js <em>agent</em> <em>configuration</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. <em>Configuration</em> methods and precedence The primary method to configure the <em>Node.js</em> <em>agent</em> is the <em>agent</em> <em>configuration</em> file (newrelic.js). You can also"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Install the Node.js agent for Docker",
        "Tip",
        "Instrument your container",
        "Other configuration options",
        "Caution"
      ],
      "title": "Install the Node.js agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "e8c8820b46d5d7ed0983a5001f83235f3bbd09b7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent-docker/",
      "published_at": "2021-06-08T14:46:03Z",
      "updated_at": "2021-03-13T04:22:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use our Node.js agent to instrument Node.js applications deployed in Docker containers. This document explains how to build, configure, and deploy your Dockerized Node.js application that has been instrumented with New Relic. Tip To use Node.js or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Instrument your container With just a few additions your existing Dockerfile can be used with our Node.js agent. You'll configure the agent by running your new Docker image with environment variables set. Add newrelic to your package.json: \"newrelic\": \"latest\", Copy Install a specific version, or use any of the other options provided by the package.json format. Check the Node.js agent release notes for information about past agent versions. In the first line of your app's main module, add require('newrelic');. Add this line to your Dockerfile so the agent can run without a configuration file: ENV NEW_RELIC_NO_CONFIG_FILE=true Copy Build your Docker image the way you normally do. To run your Docker app with the agent enabled, add your license key and app name to your docker run command as environment variables: docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ your_image_name:latest Copy Other configuration options Caution Do not include your license key in your Dockerfile or Docker image. For more information, see our documentation on license key security. In addition to setting your application name or license key, you can set other configuration options by starting your container with the -e option. For example, to enable distributed tracing, use: $ docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ -e NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ your_image_name:latest Copy You can also set configuration options in your Dockerfile using ENV directives: ENV NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ NEW_RELIC_LOG=stdout # etc. Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.0041,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "sections": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "You can use our <em>Node.js</em> <em>agent</em> to instrument <em>Node.js</em> applications deployed in Docker containers. This document explains how to build, configure, and deploy your Dockerized <em>Node.js</em> application that has been instrumented with New Relic. Tip To use <em>Node.js</em> or any other <em>agent</em>, as well as the rest of our"
      },
      "id": "6043d3b728ccbcd4b82c60ce"
    },
    {
      "sections": [
        "Uninstall the Node.js agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "17cdfffa0ea6ea5888c601dca3846e50772fc112",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/uninstall-nodejs-agent/",
      "published_at": "2021-06-08T14:46:02Z",
      "updated_at": "2021-03-13T02:39:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to uninstall the New Relic Node.js agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall the New Relic Node.js agent: Remove require('newrelic'); as the first line of the app's main module. Remove the npm package with npm uninstall newrelic --save. Delete the newrelic.js file and unset any environment variables being used. When the uninstall process finishes, restart your app. For more information about installation, see Installing and maintaining Node.js. Tip You may also want to remove your app from New Relic. For more help Additional documentation resources include: Troubleshooting the Node.js agent (a library of troubleshooting solutions for Node.js)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.99199,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the Node.js <em>agent</em>",
        "sections": "Uninstall the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " newrelic --save. Delete the newrelic.js file and unset any environment variables being used. When the uninstall process finishes, restart your app. For more information about <em>installation</em>, see Installing and maintaining <em>Node.js</em>. Tip You may also want to remove your app from New Relic. For more help Additional documentation resources include: Troubleshooting the <em>Node.js</em> <em>agent</em> (a library of troubleshooting solutions for <em>Node.js</em>)"
      },
      "id": "6043d36a196a676f52960f77"
    }
  ],
  "/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration": [
    {
      "sections": [
        "Install the Node.js agent",
        "Tip",
        "Important",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "5877d4bc24ac6201ac15fd7dd909ce85213e6680",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-06-08T20:49:58Z",
      "updated_at": "2021-03-16T15:03:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic Node.js agent installation. Tip To use Node.js or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add Node.js data Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.61403,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em>",
        "sections": "<em>Install</em> the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic <em>Node.js</em> <em>agent</em> <em>installation</em>. Tip To use <em>Node.js</em> or any other <em>agent</em>, as well as the rest of our"
      },
      "id": "603e962e28ccbcf759eba75b"
    },
    {
      "sections": [
        "Install the Node.js agent for Docker",
        "Tip",
        "Instrument your container",
        "Other configuration options",
        "Caution"
      ],
      "title": "Install the Node.js agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "e8c8820b46d5d7ed0983a5001f83235f3bbd09b7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent-docker/",
      "published_at": "2021-06-08T14:46:03Z",
      "updated_at": "2021-03-13T04:22:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use our Node.js agent to instrument Node.js applications deployed in Docker containers. This document explains how to build, configure, and deploy your Dockerized Node.js application that has been instrumented with New Relic. Tip To use Node.js or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Instrument your container With just a few additions your existing Dockerfile can be used with our Node.js agent. You'll configure the agent by running your new Docker image with environment variables set. Add newrelic to your package.json: \"newrelic\": \"latest\", Copy Install a specific version, or use any of the other options provided by the package.json format. Check the Node.js agent release notes for information about past agent versions. In the first line of your app's main module, add require('newrelic');. Add this line to your Dockerfile so the agent can run without a configuration file: ENV NEW_RELIC_NO_CONFIG_FILE=true Copy Build your Docker image the way you normally do. To run your Docker app with the agent enabled, add your license key and app name to your docker run command as environment variables: docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ your_image_name:latest Copy Other configuration options Caution Do not include your license key in your Dockerfile or Docker image. For more information, see our documentation on license key security. In addition to setting your application name or license key, you can set other configuration options by starting your container with the -e option. For example, to enable distributed tracing, use: $ docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ -e NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ your_image_name:latest Copy You can also set configuration options in your Dockerfile using ENV directives: ENV NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ NEW_RELIC_LOG=stdout # etc. Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.0041,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "sections": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "You can use our <em>Node.js</em> <em>agent</em> to instrument <em>Node.js</em> applications deployed in Docker containers. This document explains how to build, configure, and deploy your Dockerized <em>Node.js</em> application that has been instrumented with New Relic. Tip To use <em>Node.js</em> or any other <em>agent</em>, as well as the rest of our"
      },
      "id": "6043d3b728ccbcd4b82c60ce"
    },
    {
      "sections": [
        "Uninstall the Node.js agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "17cdfffa0ea6ea5888c601dca3846e50772fc112",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/uninstall-nodejs-agent/",
      "published_at": "2021-06-08T14:46:02Z",
      "updated_at": "2021-03-13T02:39:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to uninstall the New Relic Node.js agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall the New Relic Node.js agent: Remove require('newrelic'); as the first line of the app's main module. Remove the npm package with npm uninstall newrelic --save. Delete the newrelic.js file and unset any environment variables being used. When the uninstall process finishes, restart your app. For more information about installation, see Installing and maintaining Node.js. Tip You may also want to remove your app from New Relic. For more help Additional documentation resources include: Troubleshooting the Node.js agent (a library of troubleshooting solutions for Node.js)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.99199,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the Node.js <em>agent</em>",
        "sections": "Uninstall the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " newrelic --save. Delete the newrelic.js file and unset any environment variables being used. When the uninstall process finishes, restart your app. For more information about <em>installation</em>, see Installing and maintaining <em>Node.js</em>. Tip You may also want to remove your app from New Relic. For more help Additional documentation resources include: Troubleshooting the <em>Node.js</em> <em>agent</em> (a library of troubleshooting solutions for <em>Node.js</em>)"
      },
      "id": "6043d36a196a676f52960f77"
    }
  ],
  "/docs/agents/nodejs-agent/installation-configuration/uninstall-nodejs-agent": [
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-06-09T07:45:49Z",
      "updated_at": "2021-03-16T15:53:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the New Relic APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default true When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. When distributed tracing is enabled, you can collect span events. enabled Type Boolean Default false Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for span events, all attribute keys found in this list will be attached to span events. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with span events. For more information, see the agent attribute rules. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.62044,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>configuration</em>",
        "sections": "Node.js <em>agent</em> <em>configuration</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. <em>Configuration</em> methods and precedence The primary method to configure the <em>Node.js</em> <em>agent</em> is the <em>agent</em> <em>configuration</em> file (newrelic.js). You can also"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Install the Node.js agent",
        "Tip",
        "Important",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "5877d4bc24ac6201ac15fd7dd909ce85213e6680",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-06-08T20:49:58Z",
      "updated_at": "2021-03-16T15:03:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic Node.js agent installation. Tip To use Node.js or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add Node.js data Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.61403,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em>",
        "sections": "<em>Install</em> the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic <em>Node.js</em> <em>agent</em> <em>installation</em>. Tip To use <em>Node.js</em> or any other <em>agent</em>, as well as the rest of our"
      },
      "id": "603e962e28ccbcf759eba75b"
    },
    {
      "sections": [
        "Install the Node.js agent for Docker",
        "Tip",
        "Instrument your container",
        "Other configuration options",
        "Caution"
      ],
      "title": "Install the Node.js agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "e8c8820b46d5d7ed0983a5001f83235f3bbd09b7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent-docker/",
      "published_at": "2021-06-08T14:46:03Z",
      "updated_at": "2021-03-13T04:22:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use our Node.js agent to instrument Node.js applications deployed in Docker containers. This document explains how to build, configure, and deploy your Dockerized Node.js application that has been instrumented with New Relic. Tip To use Node.js or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Instrument your container With just a few additions your existing Dockerfile can be used with our Node.js agent. You'll configure the agent by running your new Docker image with environment variables set. Add newrelic to your package.json: \"newrelic\": \"latest\", Copy Install a specific version, or use any of the other options provided by the package.json format. Check the Node.js agent release notes for information about past agent versions. In the first line of your app's main module, add require('newrelic');. Add this line to your Dockerfile so the agent can run without a configuration file: ENV NEW_RELIC_NO_CONFIG_FILE=true Copy Build your Docker image the way you normally do. To run your Docker app with the agent enabled, add your license key and app name to your docker run command as environment variables: docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ your_image_name:latest Copy Other configuration options Caution Do not include your license key in your Dockerfile or Docker image. For more information, see our documentation on license key security. In addition to setting your application name or license key, you can set other configuration options by starting your container with the -e option. For example, to enable distributed tracing, use: $ docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ -e NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ your_image_name:latest Copy You can also set configuration options in your Dockerfile using ENV directives: ENV NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ NEW_RELIC_LOG=stdout # etc. Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.0041,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "sections": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "You can use our <em>Node.js</em> <em>agent</em> to instrument <em>Node.js</em> applications deployed in Docker containers. This document explains how to build, configure, and deploy your Dockerized <em>Node.js</em> application that has been instrumented with New Relic. Tip To use <em>Node.js</em> or any other <em>agent</em>, as well as the rest of our"
      },
      "id": "6043d3b728ccbcd4b82c60ce"
    }
  ],
  "/docs/agents/nodejs-agent/installation-configuration/update-nodejs-agent": [
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-06-09T07:45:49Z",
      "updated_at": "2021-03-16T15:53:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the New Relic APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default true When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. When distributed tracing is enabled, you can collect span events. enabled Type Boolean Default false Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for span events, all attribute keys found in this list will be attached to span events. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with span events. For more information, see the agent attribute rules. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.62044,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>configuration</em>",
        "sections": "Node.js <em>agent</em> <em>configuration</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. <em>Configuration</em> methods and precedence The primary method to configure the <em>Node.js</em> <em>agent</em> is the <em>agent</em> <em>configuration</em> file (newrelic.js). You can also"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Install the Node.js agent",
        "Tip",
        "Important",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "5877d4bc24ac6201ac15fd7dd909ce85213e6680",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-06-08T20:49:58Z",
      "updated_at": "2021-03-16T15:03:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic Node.js agent installation. Tip To use Node.js or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add Node.js data Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.61403,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em>",
        "sections": "<em>Install</em> the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic <em>Node.js</em> <em>agent</em> <em>installation</em>. Tip To use <em>Node.js</em> or any other <em>agent</em>, as well as the rest of our"
      },
      "id": "603e962e28ccbcf759eba75b"
    },
    {
      "sections": [
        "Install the Node.js agent for Docker",
        "Tip",
        "Instrument your container",
        "Other configuration options",
        "Caution"
      ],
      "title": "Install the Node.js agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "e8c8820b46d5d7ed0983a5001f83235f3bbd09b7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent-docker/",
      "published_at": "2021-06-08T14:46:03Z",
      "updated_at": "2021-03-13T04:22:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use our Node.js agent to instrument Node.js applications deployed in Docker containers. This document explains how to build, configure, and deploy your Dockerized Node.js application that has been instrumented with New Relic. Tip To use Node.js or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Instrument your container With just a few additions your existing Dockerfile can be used with our Node.js agent. You'll configure the agent by running your new Docker image with environment variables set. Add newrelic to your package.json: \"newrelic\": \"latest\", Copy Install a specific version, or use any of the other options provided by the package.json format. Check the Node.js agent release notes for information about past agent versions. In the first line of your app's main module, add require('newrelic');. Add this line to your Dockerfile so the agent can run without a configuration file: ENV NEW_RELIC_NO_CONFIG_FILE=true Copy Build your Docker image the way you normally do. To run your Docker app with the agent enabled, add your license key and app name to your docker run command as environment variables: docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ your_image_name:latest Copy Other configuration options Caution Do not include your license key in your Dockerfile or Docker image. For more information, see our documentation on license key security. In addition to setting your application name or license key, you can set other configuration options by starting your container with the -e option. For example, to enable distributed tracing, use: $ docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ -e NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ your_image_name:latest Copy You can also set configuration options in your Dockerfile using ENV directives: ENV NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ NEW_RELIC_LOG=stdout # etc. Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.0041,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "sections": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "You can use our <em>Node.js</em> <em>agent</em> to instrument <em>Node.js</em> applications deployed in Docker containers. This document explains how to build, configure, and deploy your Dockerized <em>Node.js</em> application that has been instrumented with New Relic. Tip To use <em>Node.js</em> or any other <em>agent</em>, as well as the rest of our"
      },
      "id": "6043d3b728ccbcd4b82c60ce"
    }
  ],
  "/docs/agents/nodejs-agent/troubleshooting/generate-trace-log-troubleshooting-nodejs": [
    {
      "sections": [
        "Troubleshooting large memory usage (Node.js)",
        "Problem",
        "Solution",
        "Increase caused by TLS memory buffer allocation",
        "Caution",
        "Increase caused by cluster worker slab allocations",
        "Increase caused by log messages stored to disk",
        "Increase caused by leaked MongoDB cursors",
        "Increase caused by agent data storage"
      ],
      "title": "Troubleshooting large memory usage (Node.js)",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "fdacc90072462a34ca0db2b51f5145c1be4caf9d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/troubleshooting-large-memory-usage-nodejs/",
      "published_at": "2021-06-08T14:59:48Z",
      "updated_at": "2021-05-10T19:02:56Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You installed the New Relic Node.js agent, and your Node.js application's memory usage increased. Solution There are several possible causes for this memory increase and potential solutions for each. Increase caused by TLS memory buffer allocation The first time a Node.js application uses any form of encryption, including SSL and HTTPS, a slab buffer is created. The default size for this buffer is 10 MB. Applications running in environments where SSL termination on inbound requests occurs in a separate router layer do not normally incur this overhead. Cloud services like Heroku and AWS often operate this way. However, the Node.js agent sends outbound data to New Relic services over HTTPS, and this triggers the allocation of a slab buffer. Solution: In some cases, you can reduce the slab buffer below its 10 MB default. To set the slab buffer size, use tls.SLAB_BUFFER_SIZE. Caution When using the New Relic agent, do not set the slab buffer size below 128 KB. The slab buffer allocation should not be reduced for apps that communicate with services or clients using SSL, HTTPS, or any other form of cryptography. Increase caused by cluster worker slab allocations Node.js provides the Cluster module. This allows for handling requests in parallel by using all processor cores available on a host. However, each cluster worker allocates its own slab buffer for SSL transactions, and keeps its own copy of Node.js agent data. This multiplies the memory overhead by the number of cluster workers used. The is also true if a host runs multiple Node.js applications at the same time. Solution: Some cloud service providers use environments that state a higher number of processor cores than can actually be used at any given time. Reducing the number of cluster workers or running without Cluster support may decrease memory usage without impacting performance. Increase caused by log messages stored to disk Log messages are logged to disk by default. Due to how message data is handled, message objects may be moved into Old-pointer-space for garbage collection. This means the objects stay in memory for a while, even after all references to them are gone. This leads to a larger amount of memory consumed by a process at any given time. Additional processing time is also used for garbage collection. Solution: Depending on your version of the Node.js, the agent may default to the trace or info log levels. Decrease logging verbosity to info or warn levels to noticeably decrease memory usage and time spent in garbage collection. Increase caused by leaked MongoDB cursors Many database drivers use an abstraction called a cursor. Cursors provide the ability to iterate through the results of queries. For example, the mongodb driver provides cursors when executing find queries. Cursors live both as objects in the Node.js runtime and as entities in the MongoDB server. When an application has finished using a cursor, it should close it to free up resources in both the server and the client application. In Node.js, it is possible for a cursor to be garbage collected, freeing resources in the application, without closing the cursor in the server. This may be go unnoticed in the application. However, the New Relic Node.js agent keeps track of open cursors to measure the time spent iterating through results. If your application does not close all the cursors it uses, the agent will continue to track stale cursors and leak memory. Solution: Ensure every cursor created in your application is closed by calling cursor.close() after the application finishes processing the results of the query. Increase caused by agent data storage The Node.js agent records data for each transaction your app handles. Data is generally grouped by transaction name. The memory used by the agent increases with the number of different transactions recorded in each minute-long harvest cycle. In addition, a larger amount of data is kept during each transaction, but is eventually discarded when the transaction completes. Memory used by the agent increases with the number of concurrent transactions handled by the application. Solution: If agent data storage is identified as the cause of a memory usage increase, this can best be addressed by adding additional memory to your host, or by switching to a larger cloud instance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.04144,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Troubleshooting</em> large memory usage (Node.js)",
        "sections": "<em>Troubleshooting</em> large memory usage (Node.js)",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem You installed the New Relic <em>Node.js</em> <em>agent</em>, and your <em>Node.js</em> application&#x27;s memory usage increased. Solution There are several possible causes for this memory increase and potential solutions for each. Increase caused by TLS memory buffer allocation The first time a <em>Node.js</em> application uses"
      },
      "id": "603e9d6828ccbcb774eba788"
    },
    {
      "sections": [
        "Troubleshoot your Node.js installation",
        "Problem",
        "Solution",
        "Not seeing data",
        "Installation problems",
        "Log files",
        "Missing VM metrics"
      ],
      "title": "Troubleshoot your Node.js installation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "2c9fef97ba7342d3e3b334a26890c3a166a12849",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/troubleshoot-your-nodejs-installation/",
      "published_at": "2021-06-08T20:51:07Z",
      "updated_at": "2021-03-16T15:05:11Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If you have encountered any of these common problems after installing your New Relic Node.js agent, try these troubleshooting tips. Solution Some common problems users encounter after installing the New Relic Node.js agent include: Not seeing data To minimize the amount of bandwidth the Node.js agent consumes, New Relic only reports data once per minute. If you add the agent to tests that take less than a minute to run, it will not have time to report data to New Relic. If you do not see transaction traces or other data after deploying the agent, this may be due to configuration, framework, or Apdex settings. Use New Relic Diagnostics to try to automatically identify the issue. Installation problems What to check Comments Main module Ensure that you have added require('newrelic'); as the first line of the app's main module. If the require is added later, the Node.js agent may not properly instrument your application. Conditional logic If you have any conditional logic in your require, move the conditional logic to your newrelic.js configuration file. Frameworks For problems with supported frameworks, make sure you are using Connect, Express, Hapi, Kraken, or Restify. There are other Node.js frameworks, but New Relic does not support all of them. Apdex For problems with your Apdex results, try adjusting your Apdex score via your Node.js agent config file (newrelic.js) or the New Relic user interface. Log files The Node.js agent writes its log to the newrelic_agent.log file in the application directory, unless you have changed the logging settings. If the agent does not send data or crashes your app, you can generate a troubleshooting log file to accompany bug reports and support requests. Missing VM metrics The agent can collect VM metrics related to garbage collection (GC), memory, and CPU. Some of these metrics require an additional native module to be installed. Here are some common problems and their solutions: Problem During installation, npm shows one of the following error messages: gyp ERR! configure error gyp ERR! stack Error: Can't find Python executable \"python\", you can set the PYTHON env variable. Copy gyp ERR! build error gyp ERR! stack Error: not found: make Copy make: g++: Command not found Copy Solution Ensure that the prerequisites for the node-gyp module are installed. On Debian/Ubuntu platforms, use this command: apt-get install build-essential Copy For more information, see Node.js VM measurements. Other troubleshooting resources on our Explorers Hub forum: Troubleshooting install General configuration troubleshooting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.304276,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Troubleshoot</em> your Node.js installation",
        "sections": "<em>Troubleshoot</em> your Node.js installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem If you have encountered any of these common problems after installing your New Relic <em>Node.js</em> <em>agent</em>, try these <em>troubleshooting</em> tips. Solution Some common problems users encounter after installing the New Relic <em>Node.js</em> <em>agent</em> include: Not seeing data To minimize the amount of bandwidth"
      },
      "id": "603e7e83e7b9d25c0b2a07d1"
    },
    {
      "sections": [
        "Uninstall the Node.js agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "17cdfffa0ea6ea5888c601dca3846e50772fc112",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/uninstall-nodejs-agent/",
      "published_at": "2021-06-08T14:46:02Z",
      "updated_at": "2021-03-13T02:39:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to uninstall the New Relic Node.js agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall the New Relic Node.js agent: Remove require('newrelic'); as the first line of the app's main module. Remove the npm package with npm uninstall newrelic --save. Delete the newrelic.js file and unset any environment variables being used. When the uninstall process finishes, restart your app. For more information about installation, see Installing and maintaining Node.js. Tip You may also want to remove your app from New Relic. For more help Additional documentation resources include: Troubleshooting the Node.js agent (a library of troubleshooting solutions for Node.js)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.7779,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the Node.js <em>agent</em>",
        "sections": "Uninstall the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " newrelic --save. Delete the newrelic.js file and unset any environment variables being used. When the uninstall process finishes, restart your app. For more information about installation, see Installing and maintaining <em>Node.js</em>. Tip You may also want to remove your app from New Relic. For more help Additional documentation resources include: <em>Troubleshooting</em> the <em>Node.js</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for <em>Node.js</em>)"
      },
      "id": "6043d36a196a676f52960f77"
    }
  ],
  "/docs/agents/nodejs-agent/troubleshooting/troubleshoot-browser-instrumentation-nodejs": [
    {
      "sections": [
        "Troubleshooting large memory usage (Node.js)",
        "Problem",
        "Solution",
        "Increase caused by TLS memory buffer allocation",
        "Caution",
        "Increase caused by cluster worker slab allocations",
        "Increase caused by log messages stored to disk",
        "Increase caused by leaked MongoDB cursors",
        "Increase caused by agent data storage"
      ],
      "title": "Troubleshooting large memory usage (Node.js)",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "fdacc90072462a34ca0db2b51f5145c1be4caf9d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/troubleshooting-large-memory-usage-nodejs/",
      "published_at": "2021-06-08T14:59:48Z",
      "updated_at": "2021-05-10T19:02:56Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You installed the New Relic Node.js agent, and your Node.js application's memory usage increased. Solution There are several possible causes for this memory increase and potential solutions for each. Increase caused by TLS memory buffer allocation The first time a Node.js application uses any form of encryption, including SSL and HTTPS, a slab buffer is created. The default size for this buffer is 10 MB. Applications running in environments where SSL termination on inbound requests occurs in a separate router layer do not normally incur this overhead. Cloud services like Heroku and AWS often operate this way. However, the Node.js agent sends outbound data to New Relic services over HTTPS, and this triggers the allocation of a slab buffer. Solution: In some cases, you can reduce the slab buffer below its 10 MB default. To set the slab buffer size, use tls.SLAB_BUFFER_SIZE. Caution When using the New Relic agent, do not set the slab buffer size below 128 KB. The slab buffer allocation should not be reduced for apps that communicate with services or clients using SSL, HTTPS, or any other form of cryptography. Increase caused by cluster worker slab allocations Node.js provides the Cluster module. This allows for handling requests in parallel by using all processor cores available on a host. However, each cluster worker allocates its own slab buffer for SSL transactions, and keeps its own copy of Node.js agent data. This multiplies the memory overhead by the number of cluster workers used. The is also true if a host runs multiple Node.js applications at the same time. Solution: Some cloud service providers use environments that state a higher number of processor cores than can actually be used at any given time. Reducing the number of cluster workers or running without Cluster support may decrease memory usage without impacting performance. Increase caused by log messages stored to disk Log messages are logged to disk by default. Due to how message data is handled, message objects may be moved into Old-pointer-space for garbage collection. This means the objects stay in memory for a while, even after all references to them are gone. This leads to a larger amount of memory consumed by a process at any given time. Additional processing time is also used for garbage collection. Solution: Depending on your version of the Node.js, the agent may default to the trace or info log levels. Decrease logging verbosity to info or warn levels to noticeably decrease memory usage and time spent in garbage collection. Increase caused by leaked MongoDB cursors Many database drivers use an abstraction called a cursor. Cursors provide the ability to iterate through the results of queries. For example, the mongodb driver provides cursors when executing find queries. Cursors live both as objects in the Node.js runtime and as entities in the MongoDB server. When an application has finished using a cursor, it should close it to free up resources in both the server and the client application. In Node.js, it is possible for a cursor to be garbage collected, freeing resources in the application, without closing the cursor in the server. This may be go unnoticed in the application. However, the New Relic Node.js agent keeps track of open cursors to measure the time spent iterating through results. If your application does not close all the cursors it uses, the agent will continue to track stale cursors and leak memory. Solution: Ensure every cursor created in your application is closed by calling cursor.close() after the application finishes processing the results of the query. Increase caused by agent data storage The Node.js agent records data for each transaction your app handles. Data is generally grouped by transaction name. The memory used by the agent increases with the number of different transactions recorded in each minute-long harvest cycle. In addition, a larger amount of data is kept during each transaction, but is eventually discarded when the transaction completes. Memory used by the agent increases with the number of concurrent transactions handled by the application. Solution: If agent data storage is identified as the cause of a memory usage increase, this can best be addressed by adding additional memory to your host, or by switching to a larger cloud instance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.04144,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Troubleshooting</em> large memory usage (Node.js)",
        "sections": "<em>Troubleshooting</em> large memory usage (Node.js)",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem You installed the New Relic <em>Node.js</em> <em>agent</em>, and your <em>Node.js</em> application&#x27;s memory usage increased. Solution There are several possible causes for this memory increase and potential solutions for each. Increase caused by TLS memory buffer allocation The first time a <em>Node.js</em> application uses"
      },
      "id": "603e9d6828ccbcb774eba788"
    },
    {
      "sections": [
        "Troubleshoot your Node.js installation",
        "Problem",
        "Solution",
        "Not seeing data",
        "Installation problems",
        "Log files",
        "Missing VM metrics"
      ],
      "title": "Troubleshoot your Node.js installation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "2c9fef97ba7342d3e3b334a26890c3a166a12849",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/troubleshoot-your-nodejs-installation/",
      "published_at": "2021-06-08T20:51:07Z",
      "updated_at": "2021-03-16T15:05:11Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If you have encountered any of these common problems after installing your New Relic Node.js agent, try these troubleshooting tips. Solution Some common problems users encounter after installing the New Relic Node.js agent include: Not seeing data To minimize the amount of bandwidth the Node.js agent consumes, New Relic only reports data once per minute. If you add the agent to tests that take less than a minute to run, it will not have time to report data to New Relic. If you do not see transaction traces or other data after deploying the agent, this may be due to configuration, framework, or Apdex settings. Use New Relic Diagnostics to try to automatically identify the issue. Installation problems What to check Comments Main module Ensure that you have added require('newrelic'); as the first line of the app's main module. If the require is added later, the Node.js agent may not properly instrument your application. Conditional logic If you have any conditional logic in your require, move the conditional logic to your newrelic.js configuration file. Frameworks For problems with supported frameworks, make sure you are using Connect, Express, Hapi, Kraken, or Restify. There are other Node.js frameworks, but New Relic does not support all of them. Apdex For problems with your Apdex results, try adjusting your Apdex score via your Node.js agent config file (newrelic.js) or the New Relic user interface. Log files The Node.js agent writes its log to the newrelic_agent.log file in the application directory, unless you have changed the logging settings. If the agent does not send data or crashes your app, you can generate a troubleshooting log file to accompany bug reports and support requests. Missing VM metrics The agent can collect VM metrics related to garbage collection (GC), memory, and CPU. Some of these metrics require an additional native module to be installed. Here are some common problems and their solutions: Problem During installation, npm shows one of the following error messages: gyp ERR! configure error gyp ERR! stack Error: Can't find Python executable \"python\", you can set the PYTHON env variable. Copy gyp ERR! build error gyp ERR! stack Error: not found: make Copy make: g++: Command not found Copy Solution Ensure that the prerequisites for the node-gyp module are installed. On Debian/Ubuntu platforms, use this command: apt-get install build-essential Copy For more information, see Node.js VM measurements. Other troubleshooting resources on our Explorers Hub forum: Troubleshooting install General configuration troubleshooting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.304276,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Troubleshoot</em> your Node.js installation",
        "sections": "<em>Troubleshoot</em> your Node.js installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem If you have encountered any of these common problems after installing your New Relic <em>Node.js</em> <em>agent</em>, try these <em>troubleshooting</em> tips. Solution Some common problems users encounter after installing the New Relic <em>Node.js</em> <em>agent</em> include: Not seeing data To minimize the amount of bandwidth"
      },
      "id": "603e7e83e7b9d25c0b2a07d1"
    },
    {
      "sections": [
        "Generate trace log for troubleshooting (Node.js)",
        "Important",
        "Generate log files",
        "Examine log file",
        "For more help"
      ],
      "title": "Generate trace log for troubleshooting (Node.js)",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "8a65a36752d2e3c296e49e0d6b8161722c6d9042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/generate-trace-log-troubleshooting-nodejs/",
      "published_at": "2021-06-08T14:58:40Z",
      "updated_at": "2021-03-13T02:56:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your New Relic Node.js agent log captures errors at the default info level. However, when troubleshooting or debugging, generate a more verbose trace log to help find and investigate problems. Important The trace log setting is a highly verbose logging level. To reduce disk space consumption, return the logging : { section's level to its original setting after testing. Generate log files To generate the detailed trace log file: Edit your newrelic.js file and change the logging section's level to trace. logging: { level: 'trace' } Copy Restart Node. Exercise your web application for about five minutes to generate sufficient logging data. After testing, change the level to a less verbose logging level, such as info (default). Open and examine the generated log file. Examine log file By default, the Node.js agent stores the log file in the current working directory as newrelic_agent.log. If the log file or folder are not visible: Check whether you have set the logging path to stdout or stderr. Verify that the current working directory is the same as the directory where you expect the log file to be located. For more help Additional documentation resources include the Node.js agent's Troubleshooting section. For logging on all New Relic agents, see New Relic agent logs and troubleshooting.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.49676,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "sections": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": ".log. If the log file or folder are not visible: Check whether you have set the logging path to stdout or stderr. Verify that the current working directory is the same as the directory where you expect the log file to be located. For more help Additional documentation resources include the <em>Node.js</em> <em>agent</em>&#x27;s <em>Troubleshooting</em> section. For logging on all New Relic <em>agents</em>, see New Relic <em>agent</em> logs and <em>troubleshooting</em>."
      },
      "id": "6043d43128ccbce0f02c606a"
    }
  ],
  "/docs/agents/nodejs-agent/troubleshooting/troubleshoot-message-consumers": [
    {
      "sections": [
        "Troubleshooting large memory usage (Node.js)",
        "Problem",
        "Solution",
        "Increase caused by TLS memory buffer allocation",
        "Caution",
        "Increase caused by cluster worker slab allocations",
        "Increase caused by log messages stored to disk",
        "Increase caused by leaked MongoDB cursors",
        "Increase caused by agent data storage"
      ],
      "title": "Troubleshooting large memory usage (Node.js)",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "fdacc90072462a34ca0db2b51f5145c1be4caf9d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/troubleshooting-large-memory-usage-nodejs/",
      "published_at": "2021-06-08T14:59:48Z",
      "updated_at": "2021-05-10T19:02:56Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You installed the New Relic Node.js agent, and your Node.js application's memory usage increased. Solution There are several possible causes for this memory increase and potential solutions for each. Increase caused by TLS memory buffer allocation The first time a Node.js application uses any form of encryption, including SSL and HTTPS, a slab buffer is created. The default size for this buffer is 10 MB. Applications running in environments where SSL termination on inbound requests occurs in a separate router layer do not normally incur this overhead. Cloud services like Heroku and AWS often operate this way. However, the Node.js agent sends outbound data to New Relic services over HTTPS, and this triggers the allocation of a slab buffer. Solution: In some cases, you can reduce the slab buffer below its 10 MB default. To set the slab buffer size, use tls.SLAB_BUFFER_SIZE. Caution When using the New Relic agent, do not set the slab buffer size below 128 KB. The slab buffer allocation should not be reduced for apps that communicate with services or clients using SSL, HTTPS, or any other form of cryptography. Increase caused by cluster worker slab allocations Node.js provides the Cluster module. This allows for handling requests in parallel by using all processor cores available on a host. However, each cluster worker allocates its own slab buffer for SSL transactions, and keeps its own copy of Node.js agent data. This multiplies the memory overhead by the number of cluster workers used. The is also true if a host runs multiple Node.js applications at the same time. Solution: Some cloud service providers use environments that state a higher number of processor cores than can actually be used at any given time. Reducing the number of cluster workers or running without Cluster support may decrease memory usage without impacting performance. Increase caused by log messages stored to disk Log messages are logged to disk by default. Due to how message data is handled, message objects may be moved into Old-pointer-space for garbage collection. This means the objects stay in memory for a while, even after all references to them are gone. This leads to a larger amount of memory consumed by a process at any given time. Additional processing time is also used for garbage collection. Solution: Depending on your version of the Node.js, the agent may default to the trace or info log levels. Decrease logging verbosity to info or warn levels to noticeably decrease memory usage and time spent in garbage collection. Increase caused by leaked MongoDB cursors Many database drivers use an abstraction called a cursor. Cursors provide the ability to iterate through the results of queries. For example, the mongodb driver provides cursors when executing find queries. Cursors live both as objects in the Node.js runtime and as entities in the MongoDB server. When an application has finished using a cursor, it should close it to free up resources in both the server and the client application. In Node.js, it is possible for a cursor to be garbage collected, freeing resources in the application, without closing the cursor in the server. This may be go unnoticed in the application. However, the New Relic Node.js agent keeps track of open cursors to measure the time spent iterating through results. If your application does not close all the cursors it uses, the agent will continue to track stale cursors and leak memory. Solution: Ensure every cursor created in your application is closed by calling cursor.close() after the application finishes processing the results of the query. Increase caused by agent data storage The Node.js agent records data for each transaction your app handles. Data is generally grouped by transaction name. The memory used by the agent increases with the number of different transactions recorded in each minute-long harvest cycle. In addition, a larger amount of data is kept during each transaction, but is eventually discarded when the transaction completes. Memory used by the agent increases with the number of concurrent transactions handled by the application. Solution: If agent data storage is identified as the cause of a memory usage increase, this can best be addressed by adding additional memory to your host, or by switching to a larger cloud instance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.04144,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Troubleshooting</em> large memory usage (Node.js)",
        "sections": "<em>Troubleshooting</em> large memory usage (Node.js)",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem You installed the New Relic <em>Node.js</em> <em>agent</em>, and your <em>Node.js</em> application&#x27;s memory usage increased. Solution There are several possible causes for this memory increase and potential solutions for each. Increase caused by TLS memory buffer allocation The first time a <em>Node.js</em> application uses"
      },
      "id": "603e9d6828ccbcb774eba788"
    },
    {
      "sections": [
        "Troubleshoot your Node.js installation",
        "Problem",
        "Solution",
        "Not seeing data",
        "Installation problems",
        "Log files",
        "Missing VM metrics"
      ],
      "title": "Troubleshoot your Node.js installation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "2c9fef97ba7342d3e3b334a26890c3a166a12849",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/troubleshoot-your-nodejs-installation/",
      "published_at": "2021-06-08T20:51:07Z",
      "updated_at": "2021-03-16T15:05:11Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If you have encountered any of these common problems after installing your New Relic Node.js agent, try these troubleshooting tips. Solution Some common problems users encounter after installing the New Relic Node.js agent include: Not seeing data To minimize the amount of bandwidth the Node.js agent consumes, New Relic only reports data once per minute. If you add the agent to tests that take less than a minute to run, it will not have time to report data to New Relic. If you do not see transaction traces or other data after deploying the agent, this may be due to configuration, framework, or Apdex settings. Use New Relic Diagnostics to try to automatically identify the issue. Installation problems What to check Comments Main module Ensure that you have added require('newrelic'); as the first line of the app's main module. If the require is added later, the Node.js agent may not properly instrument your application. Conditional logic If you have any conditional logic in your require, move the conditional logic to your newrelic.js configuration file. Frameworks For problems with supported frameworks, make sure you are using Connect, Express, Hapi, Kraken, or Restify. There are other Node.js frameworks, but New Relic does not support all of them. Apdex For problems with your Apdex results, try adjusting your Apdex score via your Node.js agent config file (newrelic.js) or the New Relic user interface. Log files The Node.js agent writes its log to the newrelic_agent.log file in the application directory, unless you have changed the logging settings. If the agent does not send data or crashes your app, you can generate a troubleshooting log file to accompany bug reports and support requests. Missing VM metrics The agent can collect VM metrics related to garbage collection (GC), memory, and CPU. Some of these metrics require an additional native module to be installed. Here are some common problems and their solutions: Problem During installation, npm shows one of the following error messages: gyp ERR! configure error gyp ERR! stack Error: Can't find Python executable \"python\", you can set the PYTHON env variable. Copy gyp ERR! build error gyp ERR! stack Error: not found: make Copy make: g++: Command not found Copy Solution Ensure that the prerequisites for the node-gyp module are installed. On Debian/Ubuntu platforms, use this command: apt-get install build-essential Copy For more information, see Node.js VM measurements. Other troubleshooting resources on our Explorers Hub forum: Troubleshooting install General configuration troubleshooting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.304276,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Troubleshoot</em> your Node.js installation",
        "sections": "<em>Troubleshoot</em> your Node.js installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem If you have encountered any of these common problems after installing your New Relic <em>Node.js</em> <em>agent</em>, try these <em>troubleshooting</em> tips. Solution Some common problems users encounter after installing the New Relic <em>Node.js</em> <em>agent</em> include: Not seeing data To minimize the amount of bandwidth"
      },
      "id": "603e7e83e7b9d25c0b2a07d1"
    },
    {
      "sections": [
        "Generate trace log for troubleshooting (Node.js)",
        "Important",
        "Generate log files",
        "Examine log file",
        "For more help"
      ],
      "title": "Generate trace log for troubleshooting (Node.js)",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "8a65a36752d2e3c296e49e0d6b8161722c6d9042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/generate-trace-log-troubleshooting-nodejs/",
      "published_at": "2021-06-08T14:58:40Z",
      "updated_at": "2021-03-13T02:56:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your New Relic Node.js agent log captures errors at the default info level. However, when troubleshooting or debugging, generate a more verbose trace log to help find and investigate problems. Important The trace log setting is a highly verbose logging level. To reduce disk space consumption, return the logging : { section's level to its original setting after testing. Generate log files To generate the detailed trace log file: Edit your newrelic.js file and change the logging section's level to trace. logging: { level: 'trace' } Copy Restart Node. Exercise your web application for about five minutes to generate sufficient logging data. After testing, change the level to a less verbose logging level, such as info (default). Open and examine the generated log file. Examine log file By default, the Node.js agent stores the log file in the current working directory as newrelic_agent.log. If the log file or folder are not visible: Check whether you have set the logging path to stdout or stderr. Verify that the current working directory is the same as the directory where you expect the log file to be located. For more help Additional documentation resources include the Node.js agent's Troubleshooting section. For logging on all New Relic agents, see New Relic agent logs and troubleshooting.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.49676,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "sections": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": ".log. If the log file or folder are not visible: Check whether you have set the logging path to stdout or stderr. Verify that the current working directory is the same as the directory where you expect the log file to be located. For more help Additional documentation resources include the <em>Node.js</em> <em>agent</em>&#x27;s <em>Troubleshooting</em> section. For logging on all New Relic <em>agents</em>, see New Relic <em>agent</em> logs and <em>troubleshooting</em>."
      },
      "id": "6043d43128ccbce0f02c606a"
    }
  ],
  "/docs/agents/nodejs-agent/troubleshooting/troubleshoot-your-nodejs-installation": [
    {
      "sections": [
        "Troubleshooting large memory usage (Node.js)",
        "Problem",
        "Solution",
        "Increase caused by TLS memory buffer allocation",
        "Caution",
        "Increase caused by cluster worker slab allocations",
        "Increase caused by log messages stored to disk",
        "Increase caused by leaked MongoDB cursors",
        "Increase caused by agent data storage"
      ],
      "title": "Troubleshooting large memory usage (Node.js)",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "fdacc90072462a34ca0db2b51f5145c1be4caf9d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/troubleshooting-large-memory-usage-nodejs/",
      "published_at": "2021-06-08T14:59:48Z",
      "updated_at": "2021-05-10T19:02:56Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You installed the New Relic Node.js agent, and your Node.js application's memory usage increased. Solution There are several possible causes for this memory increase and potential solutions for each. Increase caused by TLS memory buffer allocation The first time a Node.js application uses any form of encryption, including SSL and HTTPS, a slab buffer is created. The default size for this buffer is 10 MB. Applications running in environments where SSL termination on inbound requests occurs in a separate router layer do not normally incur this overhead. Cloud services like Heroku and AWS often operate this way. However, the Node.js agent sends outbound data to New Relic services over HTTPS, and this triggers the allocation of a slab buffer. Solution: In some cases, you can reduce the slab buffer below its 10 MB default. To set the slab buffer size, use tls.SLAB_BUFFER_SIZE. Caution When using the New Relic agent, do not set the slab buffer size below 128 KB. The slab buffer allocation should not be reduced for apps that communicate with services or clients using SSL, HTTPS, or any other form of cryptography. Increase caused by cluster worker slab allocations Node.js provides the Cluster module. This allows for handling requests in parallel by using all processor cores available on a host. However, each cluster worker allocates its own slab buffer for SSL transactions, and keeps its own copy of Node.js agent data. This multiplies the memory overhead by the number of cluster workers used. The is also true if a host runs multiple Node.js applications at the same time. Solution: Some cloud service providers use environments that state a higher number of processor cores than can actually be used at any given time. Reducing the number of cluster workers or running without Cluster support may decrease memory usage without impacting performance. Increase caused by log messages stored to disk Log messages are logged to disk by default. Due to how message data is handled, message objects may be moved into Old-pointer-space for garbage collection. This means the objects stay in memory for a while, even after all references to them are gone. This leads to a larger amount of memory consumed by a process at any given time. Additional processing time is also used for garbage collection. Solution: Depending on your version of the Node.js, the agent may default to the trace or info log levels. Decrease logging verbosity to info or warn levels to noticeably decrease memory usage and time spent in garbage collection. Increase caused by leaked MongoDB cursors Many database drivers use an abstraction called a cursor. Cursors provide the ability to iterate through the results of queries. For example, the mongodb driver provides cursors when executing find queries. Cursors live both as objects in the Node.js runtime and as entities in the MongoDB server. When an application has finished using a cursor, it should close it to free up resources in both the server and the client application. In Node.js, it is possible for a cursor to be garbage collected, freeing resources in the application, without closing the cursor in the server. This may be go unnoticed in the application. However, the New Relic Node.js agent keeps track of open cursors to measure the time spent iterating through results. If your application does not close all the cursors it uses, the agent will continue to track stale cursors and leak memory. Solution: Ensure every cursor created in your application is closed by calling cursor.close() after the application finishes processing the results of the query. Increase caused by agent data storage The Node.js agent records data for each transaction your app handles. Data is generally grouped by transaction name. The memory used by the agent increases with the number of different transactions recorded in each minute-long harvest cycle. In addition, a larger amount of data is kept during each transaction, but is eventually discarded when the transaction completes. Memory used by the agent increases with the number of concurrent transactions handled by the application. Solution: If agent data storage is identified as the cause of a memory usage increase, this can best be addressed by adding additional memory to your host, or by switching to a larger cloud instance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.04143,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Troubleshooting</em> large memory usage (Node.js)",
        "sections": "<em>Troubleshooting</em> large memory usage (Node.js)",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem You installed the New Relic <em>Node.js</em> <em>agent</em>, and your <em>Node.js</em> application&#x27;s memory usage increased. Solution There are several possible causes for this memory increase and potential solutions for each. Increase caused by TLS memory buffer allocation The first time a <em>Node.js</em> application uses"
      },
      "id": "603e9d6828ccbcb774eba788"
    },
    {
      "sections": [
        "Generate trace log for troubleshooting (Node.js)",
        "Important",
        "Generate log files",
        "Examine log file",
        "For more help"
      ],
      "title": "Generate trace log for troubleshooting (Node.js)",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "8a65a36752d2e3c296e49e0d6b8161722c6d9042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/generate-trace-log-troubleshooting-nodejs/",
      "published_at": "2021-06-08T14:58:40Z",
      "updated_at": "2021-03-13T02:56:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your New Relic Node.js agent log captures errors at the default info level. However, when troubleshooting or debugging, generate a more verbose trace log to help find and investigate problems. Important The trace log setting is a highly verbose logging level. To reduce disk space consumption, return the logging : { section's level to its original setting after testing. Generate log files To generate the detailed trace log file: Edit your newrelic.js file and change the logging section's level to trace. logging: { level: 'trace' } Copy Restart Node. Exercise your web application for about five minutes to generate sufficient logging data. After testing, change the level to a less verbose logging level, such as info (default). Open and examine the generated log file. Examine log file By default, the Node.js agent stores the log file in the current working directory as newrelic_agent.log. If the log file or folder are not visible: Check whether you have set the logging path to stdout or stderr. Verify that the current working directory is the same as the directory where you expect the log file to be located. For more help Additional documentation resources include the Node.js agent's Troubleshooting section. For logging on all New Relic agents, see New Relic agent logs and troubleshooting.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.49676,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "sections": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": ".log. If the log file or folder are not visible: Check whether you have set the logging path to stdout or stderr. Verify that the current working directory is the same as the directory where you expect the log file to be located. For more help Additional documentation resources include the <em>Node.js</em> <em>agent</em>&#x27;s <em>Troubleshooting</em> section. For logging on all New Relic <em>agents</em>, see New Relic <em>agent</em> logs and <em>troubleshooting</em>."
      },
      "id": "6043d43128ccbce0f02c606a"
    },
    {
      "sections": [
        "Uninstall the Node.js agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "17cdfffa0ea6ea5888c601dca3846e50772fc112",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/uninstall-nodejs-agent/",
      "published_at": "2021-06-08T14:46:02Z",
      "updated_at": "2021-03-13T02:39:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to uninstall the New Relic Node.js agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall the New Relic Node.js agent: Remove require('newrelic'); as the first line of the app's main module. Remove the npm package with npm uninstall newrelic --save. Delete the newrelic.js file and unset any environment variables being used. When the uninstall process finishes, restart your app. For more information about installation, see Installing and maintaining Node.js. Tip You may also want to remove your app from New Relic. For more help Additional documentation resources include: Troubleshooting the Node.js agent (a library of troubleshooting solutions for Node.js)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.77789,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the Node.js <em>agent</em>",
        "sections": "Uninstall the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " newrelic --save. Delete the newrelic.js file and unset any environment variables being used. When the uninstall process finishes, restart your app. For more information about installation, see Installing and maintaining <em>Node.js</em>. Tip You may also want to remove your app from New Relic. For more help Additional documentation resources include: <em>Troubleshooting</em> the <em>Node.js</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for <em>Node.js</em>)"
      },
      "id": "6043d36a196a676f52960f77"
    }
  ],
  "/docs/agents/nodejs-agent/troubleshooting/troubleshooting-large-memory-usage-nodejs": [
    {
      "sections": [
        "Troubleshoot your Node.js installation",
        "Problem",
        "Solution",
        "Not seeing data",
        "Installation problems",
        "Log files",
        "Missing VM metrics"
      ],
      "title": "Troubleshoot your Node.js installation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "2c9fef97ba7342d3e3b334a26890c3a166a12849",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/troubleshoot-your-nodejs-installation/",
      "published_at": "2021-06-08T20:51:07Z",
      "updated_at": "2021-03-16T15:05:11Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If you have encountered any of these common problems after installing your New Relic Node.js agent, try these troubleshooting tips. Solution Some common problems users encounter after installing the New Relic Node.js agent include: Not seeing data To minimize the amount of bandwidth the Node.js agent consumes, New Relic only reports data once per minute. If you add the agent to tests that take less than a minute to run, it will not have time to report data to New Relic. If you do not see transaction traces or other data after deploying the agent, this may be due to configuration, framework, or Apdex settings. Use New Relic Diagnostics to try to automatically identify the issue. Installation problems What to check Comments Main module Ensure that you have added require('newrelic'); as the first line of the app's main module. If the require is added later, the Node.js agent may not properly instrument your application. Conditional logic If you have any conditional logic in your require, move the conditional logic to your newrelic.js configuration file. Frameworks For problems with supported frameworks, make sure you are using Connect, Express, Hapi, Kraken, or Restify. There are other Node.js frameworks, but New Relic does not support all of them. Apdex For problems with your Apdex results, try adjusting your Apdex score via your Node.js agent config file (newrelic.js) or the New Relic user interface. Log files The Node.js agent writes its log to the newrelic_agent.log file in the application directory, unless you have changed the logging settings. If the agent does not send data or crashes your app, you can generate a troubleshooting log file to accompany bug reports and support requests. Missing VM metrics The agent can collect VM metrics related to garbage collection (GC), memory, and CPU. Some of these metrics require an additional native module to be installed. Here are some common problems and their solutions: Problem During installation, npm shows one of the following error messages: gyp ERR! configure error gyp ERR! stack Error: Can't find Python executable \"python\", you can set the PYTHON env variable. Copy gyp ERR! build error gyp ERR! stack Error: not found: make Copy make: g++: Command not found Copy Solution Ensure that the prerequisites for the node-gyp module are installed. On Debian/Ubuntu platforms, use this command: apt-get install build-essential Copy For more information, see Node.js VM measurements. Other troubleshooting resources on our Explorers Hub forum: Troubleshooting install General configuration troubleshooting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.304276,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Troubleshoot</em> your Node.js installation",
        "sections": "<em>Troubleshoot</em> your Node.js installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem If you have encountered any of these common problems after installing your New Relic <em>Node.js</em> <em>agent</em>, try these <em>troubleshooting</em> tips. Solution Some common problems users encounter after installing the New Relic <em>Node.js</em> <em>agent</em> include: Not seeing data To minimize the amount of bandwidth"
      },
      "id": "603e7e83e7b9d25c0b2a07d1"
    },
    {
      "sections": [
        "Generate trace log for troubleshooting (Node.js)",
        "Important",
        "Generate log files",
        "Examine log file",
        "For more help"
      ],
      "title": "Generate trace log for troubleshooting (Node.js)",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "8a65a36752d2e3c296e49e0d6b8161722c6d9042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/troubleshooting/generate-trace-log-troubleshooting-nodejs/",
      "published_at": "2021-06-08T14:58:40Z",
      "updated_at": "2021-03-13T02:56:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your New Relic Node.js agent log captures errors at the default info level. However, when troubleshooting or debugging, generate a more verbose trace log to help find and investigate problems. Important The trace log setting is a highly verbose logging level. To reduce disk space consumption, return the logging : { section's level to its original setting after testing. Generate log files To generate the detailed trace log file: Edit your newrelic.js file and change the logging section's level to trace. logging: { level: 'trace' } Copy Restart Node. Exercise your web application for about five minutes to generate sufficient logging data. After testing, change the level to a less verbose logging level, such as info (default). Open and examine the generated log file. Examine log file By default, the Node.js agent stores the log file in the current working directory as newrelic_agent.log. If the log file or folder are not visible: Check whether you have set the logging path to stdout or stderr. Verify that the current working directory is the same as the directory where you expect the log file to be located. For more help Additional documentation resources include the Node.js agent's Troubleshooting section. For logging on all New Relic agents, see New Relic agent logs and troubleshooting.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.49676,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "sections": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": ".log. If the log file or folder are not visible: Check whether you have set the logging path to stdout or stderr. Verify that the current working directory is the same as the directory where you expect the log file to be located. For more help Additional documentation resources include the <em>Node.js</em> <em>agent</em>&#x27;s <em>Troubleshooting</em> section. For logging on all New Relic <em>agents</em>, see New Relic <em>agent</em> logs and <em>troubleshooting</em>."
      },
      "id": "6043d43128ccbce0f02c606a"
    },
    {
      "sections": [
        "Uninstall the Node.js agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "17cdfffa0ea6ea5888c601dca3846e50772fc112",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/uninstall-nodejs-agent/",
      "published_at": "2021-06-08T14:46:02Z",
      "updated_at": "2021-03-13T02:39:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to uninstall the New Relic Node.js agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall the New Relic Node.js agent: Remove require('newrelic'); as the first line of the app's main module. Remove the npm package with npm uninstall newrelic --save. Delete the newrelic.js file and unset any environment variables being used. When the uninstall process finishes, restart your app. For more information about installation, see Installing and maintaining Node.js. Tip You may also want to remove your app from New Relic. For more help Additional documentation resources include: Troubleshooting the Node.js agent (a library of troubleshooting solutions for Node.js)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.77789,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the Node.js <em>agent</em>",
        "sections": "Uninstall the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " newrelic --save. Delete the newrelic.js file and unset any environment variables being used. When the uninstall process finishes, restart your app. For more information about installation, see Installing and maintaining <em>Node.js</em>. Tip You may also want to remove your app from New Relic. For more help Additional documentation resources include: <em>Troubleshooting</em> the <em>Node.js</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for <em>Node.js</em>)"
      },
      "id": "6043d36a196a676f52960f77"
    }
  ]
}