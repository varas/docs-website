{
  "/docs/accounts/accounts/account-maintenance/account-email-settings": [
    {
      "sections": [
        "Introduction to account settings",
        "Pricing and billing settings",
        "New Relic One pricing UI",
        "Original pricing UI",
        "Manage users",
        "New Relic One user model",
        "Original user model",
        "Add accounts",
        "General account settings"
      ],
      "title": "Introduction to account settings",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "1dbac104fa7e60637c32a61a80b8b709f6fd84c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings/",
      "published_at": "2021-06-08T20:19:00Z",
      "updated_at": "2021-06-08T20:19:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view and edit account-related settings, go to one.newrelic.com and in the top right corner, select the account dropdown. Keep reading for tips on how to find different kinds of account settings in the UI. Pricing and billing settings To view and edit some billing-related settings, you must be a full user. Basic users have some restrictions. How you access billing-related UI depends on which pricing plan your New Relic account is on: New Relic One pricing UI View and manage billing information based on your user model: New Relic One user model: click the account dropdown, click Administration, and click Plan and usage. From there, you can view your usage data, and view and edit billing information. The ability to manage billing requires the Billing user role, which is included in the default Admin group. Original user model: click the account dropdown and click Account settings. Note that if you're in an organization that has a master/sub-account structure and you're in a sub-account, usage data may only display usage from that account and not the broader organization. Billing management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see Pricing. Original pricing UI If your account is on the original pricing plan, to view and edit billing details: Click the account dropdown, and click Account settings. On the right, there are details about your subscription. For more about your subscription, click Subscription. To view and edit billing details, click Billing. To learn more about original pricing, see Pricing. Manage users How you manage users depends on which user model your users are on: New Relic One user model For managing users on the New Relic One user model, see Manage users. Original user model To manage users on the original user model: from the account dropdown, click Account settings and then click Users and roles. For more on managing these users, see Original users. Add accounts How you add accounts depends on which user model you're on. This is because the user model has impacts on account structure and management. Learn more about adding accounts. General account settings For how to edit things like user preferences and email settings, see the various account settings docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 428.31653,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>account</em> <em>settings</em>",
        "sections": "<em>General</em> <em>account</em> <em>settings</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " and management. Learn more about adding <em>accounts</em>. <em>General</em> <em>account</em> <em>settings</em> For how to edit things like user preferences and email <em>settings</em>, see the various <em>account</em> <em>settings</em> docs."
      },
      "id": "6043f38a196a679ae4960f5e"
    },
    {
      "sections": [
        "Eligibility guidelines for Observability for Good",
        "Exceptions",
        "Tip",
        "Additional requirements",
        "Signup procedures",
        "Program Benefits"
      ],
      "title": "Eligibility guidelines for Observability for Good",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "fad5f24e224295de88cdb1d62cb863d9b64b063e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/subscription-pricing/eligibility-guidelines-new-relic-nonprofit-program/",
      "published_at": "2021-06-09T00:46:55Z",
      "updated_at": "2021-05-21T14:38:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides New Relic's Observability for Good program eligibility guidelines for nonprofit, charitable, and NGO organizations. Exceptions Many global nonprofit, charity and NGO organizations are eligible for Observability for Good if the organization has a recognized legal status in their respective country equal to 501(c)(3) status under the United States Internal Revenue Code, with certain exceptions. In addition, all organizations must be verified by TechSoup or the local TechSoup partner. Examples of ineligible organizations include, but are not limited to: Ineligible nonprofits Comments Higher education institutions Private nonprofit and public higher education institutions do not qualify. This includes: Universities Colleges Trade schools Primary and secondary schools (public and private) Primary and secondary schools do not qualify. This includes, but is not limited to: K-12 public school districts Individual K-12 public schools within a state or federally funded school district Standalone K-12 charter schools K-12 Knowledge is Power Program (KiPP) schools Other K-12 schools that are not part of a state or federally funded school district Healthcare organizations providing patient care This includes hospitals, hospital auxiliaries, healthcare systems, and related health services organizations, such as: Nursing or convalescent homes Care and housing for the aged Pregnancy centers Tip Free clinics may qualify. Professional, commerce, mutual, and trade organizations This includes organizations such as: Credit Unions Regulation of business Industry trade shows Professional athletic leagues Tourist bureaus Employee or membership benefit organizations This includes organizations such as: Fraternal Beneficiary societies Associations of employees Employee or member welfare associations Pension and retirement benefits Tip Organizations focusing on the improvement of working conditions may qualify. Legislative or political organizations and advocacy groups Organizations focused on nonpartisan voter education may qualify. Organizations within countries sanctioned by the US This includes organizations within any sanctioned countries included on the US Department of Treasury's Office of Foreign Assets control list , which is updated periodically. Additional requirements In order to participate, approved organizations must also: Submit an application through newrelic.org/signup. Complete the eligibility validation process through TechSoup. Tip Learn about TechSoups local NGO definitions. Accept New Relic's standard terms of service. Be a direct customer of New Relic and have a direct billing relationship with New Relic. Signup procedures To learn more or to sign up as a new or existing New Relic customer, go to newrelic.org/signup. Program Benefits Observability for Good Standard: 4 additional free users per month (+1 free edition user: 5 total) 900 additional gb of data (+100 gb free edition: 1TB total) Observability for Good Pro: 2 free users per month 1 free TB data per month Tip A payment method on file is required for accounts using Observability for Good Pro.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 263.29523,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " through newrelic.org&#x2F;signup. Complete the eligibility validation process through TechSoup. Tip Learn about TechSoups local NGO definitions. Accept New Relic&#x27;s standard terms of service. Be a direct customer of New Relic and have a direct <em>billing</em> relationship with New Relic. Signup procedures To learn"
      },
      "id": "60441bcfe7b9d261305799e5"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "da1d767d7bc556d6b1a0b78e73738936607cb7dd",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/mastersub-account-structure/",
      "published_at": "2021-06-08T19:09:12Z",
      "updated_at": "2021-06-08T04:17:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For organizations on our original account/user model, you can create a more complex account structure with master accounts and sub-accounts that inherit master account settings. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user models, see User models. The major differences are: Original account/user model: Our original model uses a master/sub-account structure, where sub-accounts inherit settings from master accounts. Our partnership accounts also use this model. If your organization is on this model, you're able to create your own sub-accounts. If you're on this model, continue reading below to learn how this account structure works. New Relic One account/user model: This is our new, improved model. For more about how accounts work for this model, see Account structure. Master and sub-account hierarchy For organizations on our original account/user model that have a master/sub-account structure, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.65366,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "<em>Set</em> up <em>accounts</em> with SAML SSO",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "For organizations on our original <em>account</em>&#x2F;user model, you can create a more complex <em>account</em> structure with master <em>accounts</em> and sub-<em>accounts</em> that inherit master <em>account</em> <em>settings</em>. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization"
      },
      "id": "60beef5764441fc42dd543d3"
    }
  ],
  "/docs/accounts/accounts/account-maintenance/change-passwords-user-preferences": [
    {
      "sections": [
        "Introduction to account settings",
        "Pricing and billing settings",
        "New Relic One pricing UI",
        "Original pricing UI",
        "Manage users",
        "New Relic One user model",
        "Original user model",
        "Add accounts",
        "General account settings"
      ],
      "title": "Introduction to account settings",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "1dbac104fa7e60637c32a61a80b8b709f6fd84c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings/",
      "published_at": "2021-06-08T20:19:00Z",
      "updated_at": "2021-06-08T20:19:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view and edit account-related settings, go to one.newrelic.com and in the top right corner, select the account dropdown. Keep reading for tips on how to find different kinds of account settings in the UI. Pricing and billing settings To view and edit some billing-related settings, you must be a full user. Basic users have some restrictions. How you access billing-related UI depends on which pricing plan your New Relic account is on: New Relic One pricing UI View and manage billing information based on your user model: New Relic One user model: click the account dropdown, click Administration, and click Plan and usage. From there, you can view your usage data, and view and edit billing information. The ability to manage billing requires the Billing user role, which is included in the default Admin group. Original user model: click the account dropdown and click Account settings. Note that if you're in an organization that has a master/sub-account structure and you're in a sub-account, usage data may only display usage from that account and not the broader organization. Billing management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see Pricing. Original pricing UI If your account is on the original pricing plan, to view and edit billing details: Click the account dropdown, and click Account settings. On the right, there are details about your subscription. For more about your subscription, click Subscription. To view and edit billing details, click Billing. To learn more about original pricing, see Pricing. Manage users How you manage users depends on which user model your users are on: New Relic One user model For managing users on the New Relic One user model, see Manage users. Original user model To manage users on the original user model: from the account dropdown, click Account settings and then click Users and roles. For more on managing these users, see Original users. Add accounts How you add accounts depends on which user model you're on. This is because the user model has impacts on account structure and management. Learn more about adding accounts. General account settings For how to edit things like user preferences and email settings, see the various account settings docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 428.31616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>account</em> <em>settings</em>",
        "sections": "<em>General</em> <em>account</em> <em>settings</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " and management. Learn more about adding <em>accounts</em>. <em>General</em> <em>account</em> <em>settings</em> For how to edit things like user preferences and email <em>settings</em>, see the various <em>account</em> <em>settings</em> docs."
      },
      "id": "6043f38a196a679ae4960f5e"
    },
    {
      "sections": [
        "Eligibility guidelines for Observability for Good",
        "Exceptions",
        "Tip",
        "Additional requirements",
        "Signup procedures",
        "Program Benefits"
      ],
      "title": "Eligibility guidelines for Observability for Good",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "fad5f24e224295de88cdb1d62cb863d9b64b063e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/subscription-pricing/eligibility-guidelines-new-relic-nonprofit-program/",
      "published_at": "2021-06-09T00:46:55Z",
      "updated_at": "2021-05-21T14:38:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides New Relic's Observability for Good program eligibility guidelines for nonprofit, charitable, and NGO organizations. Exceptions Many global nonprofit, charity and NGO organizations are eligible for Observability for Good if the organization has a recognized legal status in their respective country equal to 501(c)(3) status under the United States Internal Revenue Code, with certain exceptions. In addition, all organizations must be verified by TechSoup or the local TechSoup partner. Examples of ineligible organizations include, but are not limited to: Ineligible nonprofits Comments Higher education institutions Private nonprofit and public higher education institutions do not qualify. This includes: Universities Colleges Trade schools Primary and secondary schools (public and private) Primary and secondary schools do not qualify. This includes, but is not limited to: K-12 public school districts Individual K-12 public schools within a state or federally funded school district Standalone K-12 charter schools K-12 Knowledge is Power Program (KiPP) schools Other K-12 schools that are not part of a state or federally funded school district Healthcare organizations providing patient care This includes hospitals, hospital auxiliaries, healthcare systems, and related health services organizations, such as: Nursing or convalescent homes Care and housing for the aged Pregnancy centers Tip Free clinics may qualify. Professional, commerce, mutual, and trade organizations This includes organizations such as: Credit Unions Regulation of business Industry trade shows Professional athletic leagues Tourist bureaus Employee or membership benefit organizations This includes organizations such as: Fraternal Beneficiary societies Associations of employees Employee or member welfare associations Pension and retirement benefits Tip Organizations focusing on the improvement of working conditions may qualify. Legislative or political organizations and advocacy groups Organizations focused on nonpartisan voter education may qualify. Organizations within countries sanctioned by the US This includes organizations within any sanctioned countries included on the US Department of Treasury's Office of Foreign Assets control list , which is updated periodically. Additional requirements In order to participate, approved organizations must also: Submit an application through newrelic.org/signup. Complete the eligibility validation process through TechSoup. Tip Learn about TechSoups local NGO definitions. Accept New Relic's standard terms of service. Be a direct customer of New Relic and have a direct billing relationship with New Relic. Signup procedures To learn more or to sign up as a new or existing New Relic customer, go to newrelic.org/signup. Program Benefits Observability for Good Standard: 4 additional free users per month (+1 free edition user: 5 total) 900 additional gb of data (+100 gb free edition: 1TB total) Observability for Good Pro: 2 free users per month 1 free TB data per month Tip A payment method on file is required for accounts using Observability for Good Pro.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 263.2952,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " through newrelic.org&#x2F;signup. Complete the eligibility validation process through TechSoup. Tip Learn about TechSoups local NGO definitions. Accept New Relic&#x27;s standard terms of service. Be a direct customer of New Relic and have a direct <em>billing</em> relationship with New Relic. Signup procedures To learn"
      },
      "id": "60441bcfe7b9d261305799e5"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "da1d767d7bc556d6b1a0b78e73738936607cb7dd",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/mastersub-account-structure/",
      "published_at": "2021-06-08T19:09:12Z",
      "updated_at": "2021-06-08T04:17:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For organizations on our original account/user model, you can create a more complex account structure with master accounts and sub-accounts that inherit master account settings. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user models, see User models. The major differences are: Original account/user model: Our original model uses a master/sub-account structure, where sub-accounts inherit settings from master accounts. Our partnership accounts also use this model. If your organization is on this model, you're able to create your own sub-accounts. If you're on this model, continue reading below to learn how this account structure works. New Relic One account/user model: This is our new, improved model. For more about how accounts work for this model, see Account structure. Master and sub-account hierarchy For organizations on our original account/user model that have a master/sub-account structure, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.6535,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "<em>Set</em> up <em>accounts</em> with SAML SSO",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "For organizations on our original <em>account</em>&#x2F;user model, you can create a more complex <em>account</em> structure with master <em>accounts</em> and sub-<em>accounts</em> that inherit master <em>account</em> <em>settings</em>. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization"
      },
      "id": "60beef5764441fc42dd543d3"
    }
  ],
  "/docs/accounts/accounts/account-maintenance/change-your-new-relic-account-name": [
    {
      "sections": [
        "Introduction to account settings",
        "Pricing and billing settings",
        "New Relic One pricing UI",
        "Original pricing UI",
        "Manage users",
        "New Relic One user model",
        "Original user model",
        "Add accounts",
        "General account settings"
      ],
      "title": "Introduction to account settings",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "1dbac104fa7e60637c32a61a80b8b709f6fd84c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings/",
      "published_at": "2021-06-08T20:19:00Z",
      "updated_at": "2021-06-08T20:19:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view and edit account-related settings, go to one.newrelic.com and in the top right corner, select the account dropdown. Keep reading for tips on how to find different kinds of account settings in the UI. Pricing and billing settings To view and edit some billing-related settings, you must be a full user. Basic users have some restrictions. How you access billing-related UI depends on which pricing plan your New Relic account is on: New Relic One pricing UI View and manage billing information based on your user model: New Relic One user model: click the account dropdown, click Administration, and click Plan and usage. From there, you can view your usage data, and view and edit billing information. The ability to manage billing requires the Billing user role, which is included in the default Admin group. Original user model: click the account dropdown and click Account settings. Note that if you're in an organization that has a master/sub-account structure and you're in a sub-account, usage data may only display usage from that account and not the broader organization. Billing management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see Pricing. Original pricing UI If your account is on the original pricing plan, to view and edit billing details: Click the account dropdown, and click Account settings. On the right, there are details about your subscription. For more about your subscription, click Subscription. To view and edit billing details, click Billing. To learn more about original pricing, see Pricing. Manage users How you manage users depends on which user model your users are on: New Relic One user model For managing users on the New Relic One user model, see Manage users. Original user model To manage users on the original user model: from the account dropdown, click Account settings and then click Users and roles. For more on managing these users, see Original users. Add accounts How you add accounts depends on which user model you're on. This is because the user model has impacts on account structure and management. Learn more about adding accounts. General account settings For how to edit things like user preferences and email settings, see the various account settings docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 428.31616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>account</em> <em>settings</em>",
        "sections": "<em>General</em> <em>account</em> <em>settings</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " and management. Learn more about adding <em>accounts</em>. <em>General</em> <em>account</em> <em>settings</em> For how to edit things like user preferences and email <em>settings</em>, see the various <em>account</em> <em>settings</em> docs."
      },
      "id": "6043f38a196a679ae4960f5e"
    },
    {
      "sections": [
        "Eligibility guidelines for Observability for Good",
        "Exceptions",
        "Tip",
        "Additional requirements",
        "Signup procedures",
        "Program Benefits"
      ],
      "title": "Eligibility guidelines for Observability for Good",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "fad5f24e224295de88cdb1d62cb863d9b64b063e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/subscription-pricing/eligibility-guidelines-new-relic-nonprofit-program/",
      "published_at": "2021-06-09T00:46:55Z",
      "updated_at": "2021-05-21T14:38:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides New Relic's Observability for Good program eligibility guidelines for nonprofit, charitable, and NGO organizations. Exceptions Many global nonprofit, charity and NGO organizations are eligible for Observability for Good if the organization has a recognized legal status in their respective country equal to 501(c)(3) status under the United States Internal Revenue Code, with certain exceptions. In addition, all organizations must be verified by TechSoup or the local TechSoup partner. Examples of ineligible organizations include, but are not limited to: Ineligible nonprofits Comments Higher education institutions Private nonprofit and public higher education institutions do not qualify. This includes: Universities Colleges Trade schools Primary and secondary schools (public and private) Primary and secondary schools do not qualify. This includes, but is not limited to: K-12 public school districts Individual K-12 public schools within a state or federally funded school district Standalone K-12 charter schools K-12 Knowledge is Power Program (KiPP) schools Other K-12 schools that are not part of a state or federally funded school district Healthcare organizations providing patient care This includes hospitals, hospital auxiliaries, healthcare systems, and related health services organizations, such as: Nursing or convalescent homes Care and housing for the aged Pregnancy centers Tip Free clinics may qualify. Professional, commerce, mutual, and trade organizations This includes organizations such as: Credit Unions Regulation of business Industry trade shows Professional athletic leagues Tourist bureaus Employee or membership benefit organizations This includes organizations such as: Fraternal Beneficiary societies Associations of employees Employee or member welfare associations Pension and retirement benefits Tip Organizations focusing on the improvement of working conditions may qualify. Legislative or political organizations and advocacy groups Organizations focused on nonpartisan voter education may qualify. Organizations within countries sanctioned by the US This includes organizations within any sanctioned countries included on the US Department of Treasury's Office of Foreign Assets control list , which is updated periodically. Additional requirements In order to participate, approved organizations must also: Submit an application through newrelic.org/signup. Complete the eligibility validation process through TechSoup. Tip Learn about TechSoups local NGO definitions. Accept New Relic's standard terms of service. Be a direct customer of New Relic and have a direct billing relationship with New Relic. Signup procedures To learn more or to sign up as a new or existing New Relic customer, go to newrelic.org/signup. Program Benefits Observability for Good Standard: 4 additional free users per month (+1 free edition user: 5 total) 900 additional gb of data (+100 gb free edition: 1TB total) Observability for Good Pro: 2 free users per month 1 free TB data per month Tip A payment method on file is required for accounts using Observability for Good Pro.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 263.2952,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " through newrelic.org&#x2F;signup. Complete the eligibility validation process through TechSoup. Tip Learn about TechSoups local NGO definitions. Accept New Relic&#x27;s standard terms of service. Be a direct customer of New Relic and have a direct <em>billing</em> relationship with New Relic. Signup procedures To learn"
      },
      "id": "60441bcfe7b9d261305799e5"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "da1d767d7bc556d6b1a0b78e73738936607cb7dd",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/mastersub-account-structure/",
      "published_at": "2021-06-08T19:09:12Z",
      "updated_at": "2021-06-08T04:17:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For organizations on our original account/user model, you can create a more complex account structure with master accounts and sub-accounts that inherit master account settings. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user models, see User models. The major differences are: Original account/user model: Our original model uses a master/sub-account structure, where sub-accounts inherit settings from master accounts. Our partnership accounts also use this model. If your organization is on this model, you're able to create your own sub-accounts. If you're on this model, continue reading below to learn how this account structure works. New Relic One account/user model: This is our new, improved model. For more about how accounts work for this model, see Account structure. Master and sub-account hierarchy For organizations on our original account/user model that have a master/sub-account structure, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.6535,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "<em>Set</em> up <em>accounts</em> with SAML SSO",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "For organizations on our original <em>account</em>&#x2F;user model, you can create a more complex <em>account</em> structure with master <em>accounts</em> and sub-<em>accounts</em> that inherit master <em>account</em> <em>settings</em>. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization"
      },
      "id": "60beef5764441fc42dd543d3"
    }
  ],
  "/docs/accounts/accounts/account-maintenance/set-session-timeouts": [
    {
      "sections": [
        "Overview of changes to pricing and user model",
        "Pricing plans explained",
        "Determine pricing plan using UI",
        "Convert to new pricing",
        "Account/user model changes explained",
        "Requirements for new account/user model",
        "Determine which user model you're on",
        "Feature impacts of user model",
        "Transition to new models",
        "How pricing and user model relate"
      ],
      "title": "Overview of changes to pricing and user model",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "b19d61b5a0c65ca352e2ce0e260e2b53391b94fc",
      "image": "https://docs.newrelic.com/static/1461470cc1ef0be91120c84d76a7ccdd/c1b63/new-relic-one-pricing-plan-billing-ui.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/overview-changes-pricing-user-model/",
      "published_at": "2021-06-09T02:28:10Z",
      "updated_at": "2021-06-09T02:28:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In 2020, New Relic released both a newer pricing plan and a newer account/user model. If you have a New Relic organization created after July 30, 2020, you're on our newer pricing plan and newer user model. But for older customers, your pricing plan and user model are not necessarily related: for example, you may have switched to our newer pricing plan and still have users on our original user model. Keep reading to learn about: Our original and new pricing plans Our original and new account/user models How to switch to the new models How the pricing plan and the user model relate to each other Pricing plans explained New Relic organizations are on one of two pricing plans: New Relic One pricing: Our new pricing plan is simpler. It bills on which Full Stack Observability edition (Standard, Pro, Enterprise) you're on, the GBs of data ingested, and the count of billable \"full users.\" All organizations created on or after July 30 2020 are on this pricing plan. Some older organizations are able to transition to this pricing. Our original product-based pricing plan: this is based on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer pricing plan: in that case, their users remain on our original user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the account dropdown, and select Manage your plan. If you see billing information about data ingested and the number of billable users, you’re on the new pricing plan. If you're on New Relic One pricing, you'll see a billing UI like this. Convert to new pricing Some customers are able to switch to new pricing. Learn more about switching your pricing plan. Account/user model changes explained In this context, the term \"account/user model\" (or simply \"user model\") refers to the structure of a New Relic user record and how it interacts with the broader New Relic organization that it's in. Our two account/user models are: New Relic One user model: this newer, improved user model has these major differences from the original user model: All your accounts and users are contained under a top-level organization. This gives an organization stronger control over managing users and what they can access. One impact of this is that users who work with multiple New Relic organizations may have an email address associated with multiple logins. Users on this model have a different system for managing permissions and account access. Using access grants, you assign users access to specific roles on specific accounts. Original user model: some aspects of this older model that are different from our newer model: There wasn't as much organization-level control over users. For example, a New Relic user had the ability to access multiple accounts they'd been granted access to using a single login. Users on the original user model have a different user management system. To learn more about benefits of the new model, see our blog post about user model changes. For impacts and limitations, see Feature impacts. Requirements for new account/user model Here's a synopsis of the factors governing what organizations use the new model: All new sign-up accounts after July 202 have users on this model, and also use the new pricing plan. Partner accounts (resellers, managed service providers), and customers using the partnership account structure, cannot yet migrate their users to the new model. Some pre-existing organizations have had their users migrated to the new model by New Relic or by using the user migration procedure. Note that switching to the new pricing plan is independent from migrating your users. Determine which user model you're on To determine what user model you're on, from the account dropdown select User preferences. If you see the UI below, you're on the New Relic One user model. If you see a different UI with more content displayed, you're on the original user model (see original user docs). To determine if you can manage users on the New Relic One user model, see Manage users. The user model is independent of your pricing plan. For how user model relates to pricing, see the Pricing and user model table. Feature impacts of user model The new user model offers many benefits. Here are some feature impacts of being on the New Relic One user model that may be surprising or unintuitive to our existing customers: More separation of organizations/accounts: If you have an email address associated with multiple New Relic accounts, this may mean you need to log out and log back in. Learn more about account access. Adding accounts: Pro and Enterprise edition can have more than one account in their organization. Currently users in these organizations cannot, on their own, add accounts. They must get help from their New Relic account representative. To learn about adding users to accounts, see Manage users. Alert notifications: Users on the new model won’t show up as an option when choosing users to receive alert notifications. The result of this is that these users will not get New Relic mobile app push notifications. As a workaround, you can instead use their email address as the notification channel. Changing account name: These users cannot change the name of their organization after it has been created. Transition to new models Some New Relic customers are able to transition to the new models. To learn more about this, see Transition to new models. How pricing and user model relate As explained in the pricing and user model overview, your pricing plan and user model aren't necessarily related. This table shows how pricing and user model relate to each other: Pricing plan factors Users on original user model Users on New Relic One user model Original pricing If your organization was created before July 30 2020, you remain on our original pricing plan until you transition to New Relic One pricing. See original pricing plan docs. For original pricing accounts, your users are on the original user model, unless they were added via automated user management. See original user docs. For original pricing accounts, users added with automated user management (users imported from your identity provider) are on the New Relic One user model. Upon switching to New Relic One pricing, you'll have new roles available. New Relic One pricing An organization is on the New Relic One pricing plan if it was created on or after July 30 2020 or it's an older organization but has transitioned to New Relic One pricing. See New Relic One pricing docs. If your organization has transitioned to New Relic One pricing, your users are on our original user model (unless they were added via automated user management). These users are now also categorized by user type (full vs basic). See original user docs. If your organization was created on or after July 30 2020, your users are on this user model. See New Relic One user docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 478.86172,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview of changes to <em>pricing</em> <em>and</em> user model",
        "sections": "Overview of changes to <em>pricing</em> <em>and</em> user model",
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": " organizations created on or after July 30 2020 are on this <em>pricing</em> plan. Some older organizations are able to transition to this <em>pricing</em>. Our <em>original</em> <em>product</em>-<em>based</em> <em>pricing</em> plan: this is <em>based</em> on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have"
      },
      "id": "603e97fa28ccbcb7c2eba754"
    },
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 254.52095,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Users, roles, permissions (<em>original</em> user model)",
        "sections": "Users, roles, permissions (<em>original</em> user model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " than one login, they&#x27;ll see a &quot;multiple <em>accounts</em> found&quot; note when logging in. View and manage users in UI If your New Relic <em>account</em> has users on our <em>original</em> user model, you can use the Users and roles UI. To access this UI: select the <em>account</em> dropdown, select <em>Account</em> settings, and select Users"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Trial and Lite accounts",
        "Important",
        "Trial accounts",
        "Trial lengths",
        "End of trial period",
        "Caution"
      ],
      "title": "Trial and Lite accounts",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "050d5fa2eea990cf75a7d4de2c15bebd612860f3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/product-based-pricing/trial-lite-accounts-deprecated/",
      "published_at": "2021-06-09T01:04:25Z",
      "updated_at": "2021-03-16T09:14:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This document applies to our original product-based pricing, which is no longer available for new accounts. For an explanation of pricing plans, see Overview of pricing. Free trials for New Relic allow you to identify which products and subscription tier best fit your business. Accounts not upgraded with a subscription before the end of the trial period become Lite accounts, losing many key features and data. Trial accounts When you start a free trial, you gain access to all the features of a Pro account including full access to support. Our products allow you to view and track trends. Pro level data retention allows you to track how changes in your business, such as marketing approaches or new technology, affect trends. Trial lengths Trial lengths depend on the product: Product Trial Length Alerts 30 days APM 14 days Browser 14 days Infrastructure 30 days Insights 30 days Mobile 30 days Synthetics 14 days End of trial period Once the trial ends, your account becomes a Lite account. Lite accounts can access all of our products except Infrastructure and Insights, but lose access to most product features and support. Caution Lite accounts retain only very recent data, which could cause the loss of valuable trend data. Avoid this by subscribing before your trial ends.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 229.20622,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Trial <em>and</em> Lite <em>accounts</em>",
        "sections": "Trial <em>and</em> Lite <em>accounts</em>",
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": "Important This document applies to our <em>original</em> <em>product</em>-<em>based</em> <em>pricing</em>, which is no longer available for new <em>accounts</em>. For an explanation of <em>pricing</em> plans, see Overview of <em>pricing</em>. Free trials for New Relic allow you to identify which products and subscription tier best fit your business. <em>Accounts</em>"
      },
      "id": "603ec29a196a67b153a83dad"
    }
  ],
  "/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign": [
    {
      "sections": [
        "Azure AD SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Create authentication domain and enable SAML",
        "Step 2. Configure connection",
        "Step 3. Configure provisioning rules",
        "Tip",
        "Step 4. Assign users and groups"
      ],
      "title": "Azure AD SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d6e7f7e95daa833451159a3db4e2c4257270b5e9",
      "image": "https://docs.newrelic.com/static/0a9a32fd5041e6e2ea37cc5f032b6910/8c557/Azure_AD_Provisioning_Attribute_Mapping_2_0.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/azure-ad-scimsso-application-configuration/",
      "published_at": "2021-06-09T01:01:07Z",
      "updated_at": "2021-06-09T01:01:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM/SSO application. Requirements Before using this guide, read the requirements and procedure overview. Step 1. Create authentication domain and enable SAML If you haven't already, enable SAML SSO and then return here to complete these instructions. Step 2. Configure connection Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning link in the sidebar. In the main pane, click on Get started. In the Provisioning Mode pick-list, choose Automatic. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. In Azure AD's New Relic SCIM/SSO app, in the Admin credentials section, fill out the Tenant URL and Secret token fields with the values provided in New Relic's authentication domain UI. To verify you can connect to New Relic, click Test Connection. When you see a message indicating verification success, click Save. The New Relic SCIM/SSO application can now connect with New Relic. Continue with the following section to configure the provisioning rules. Step 3. Configure provisioning rules Initially, nothing is configured to be sent to New Relic. You must configure Azure AD to send changes for user creation, updates, and deactivation. Go to the Provisioning page and complete the following: Expand the Mappings section. Click Provision Azure Active Directory Users. Verify the Target Object Actions Create Update and Delete checkboxes are all checked. Verify the Attribute Mappings look correct for your environment. Each of the New Relic attributes shown in the list must receive a value. Tip Ensure that the Azure Active Directory attributes shown in the list on the left are good sources for the information to send to New Relic. In particular, not all environments set the mail attribute. If your environment does not set the mail attribute, userPrincipalName could be a good alternative. Leave the switch for Enabled set to Off until you're done with the user and group configuration in the next section. Once all configuration is ready, return to this page and set the switch to On. Click Save. Here's an example of a filled-in attribute mapping page with the default values. Your values may be configured differently depending on your situation. After saving the provisioning rules, the New Relic SCIM/SSO application is ready to provision any changes made to users assigned to the application. Continue with the following section to assign users and groups to the New Relic SCIM/SSO application. Step 4. Assign users and groups After the New Relic SCIM/SSO application configuration and the New Relic side configuration is finished, you can assign users and groups to the application. From the New Relic SCIM/SSO application page, click on Users and groups in the sidebar. Click +Add user. From the Add Assignment page, click on Users and groups, and select the appropriate users or groups that you'd like to provision. Then click Select and Assign. The selected users and groups appear on the Users and groups page, indicating that they're candidates for provisioning. Repeat the steps to add users and groups until all desired entities have been assigned to the application. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 418.3048,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Step 4. Assign <em>users</em> <em>and</em> groups",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM&#x2F;SSO application. Requirements Before using this guide, read"
      },
      "id": "6043f5c964441fcfb0378ef3"
    },
    {
      "sections": [
        "OneLogin SCIM/SSO application configuration",
        "Requirements",
        "Create authentication domain and enable SAML and SCIM",
        "Configure SCIM/SSO application",
        "Step 1. Fill in the configuration form",
        "Step 2. Fill in the rules form",
        "A rule that only uses actions",
        "Step 3. Fill in the Parameters form",
        "Step 4. Fill in the provisioning form",
        "Tip",
        "Step 5. Save your changes",
        "Assign users"
      ],
      "title": "OneLogin SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d298162c055490c99117f564c3ea9c2ea5dfd8d1",
      "image": "https://docs.newrelic.com/static/8f585557ea58f70d94a746e6439bf1ad/c1b63/onelogin_rules_conditions_actions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/onelogin-scimsso-application-configuration/",
      "published_at": "2021-06-09T00:45:54Z",
      "updated_at": "2021-06-09T00:45:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Create authentication domain and enable SAML and SCIM If you haven't already, create a new authentication domain with SAML SSO enabled and SCIM enabled. You will use values from this UI in later steps. Configure SCIM/SSO application Configuration for the New Relic SCIM/SSO application is split across several forms. This section describes the different forms that need to be configured. From the New Relic by organization application page, fill in the following forms: Step 1. Fill in the configuration form In the left pane, select Configuration and complete the following: Take the authentication domain ID and SCIM bearer token values from New Relic's authentication domain UI and input them into the appropriate app fields. Leave the API Connection disabled until all the configuration described in the following sections is completed. After completing all the configuration, enable the connection. Step 2. Fill in the rules form Configure the user groups to send to New Relic using rules. OneLogin provides this documentation which describes how to use rules to provision groups for users. Decide what type of groups to send along with your users to New Relic. If your organization is using Active Directory or LDAP, you might choose to use security groups to define your users capabilities at New Relic. Another reasonable group choice is OneLogin role. On the New Relic side, your user's groups define their capabilities. The groups that are sent with users will be mapped to New Relic capability groups. Note that at the moment, there is no way to delete a group from the OneLogin side. This is a known limitation from OneLogin. Removing or changing rules does not delete groups already sent to New Relic. If you wish to no longer use a group, removing all the users from the group will prevent it from being used at New Relic. A rule that only uses actions Here's an example rule configuration does not use any conditions. The conditions are left empty to avoid applying any filtering logic to the users. All users will be sent in this example. If you want to send only a subset of users, you need to specify conditions to select the subset. The actions describe where to retrieve the value for the group name and how to parse the value. In this example, we retrieve the group name from the OneLogin role field. The OneLogin role field only has a single value, but sometimes the source for the group name contains other fields besides group name. In other words, some sources give you a list of fields and values and only one of those fields has the value you want to use. In this case, you can insert a regular expression in with value that matches field to find and extract the value for the group name. This example uses the entire value of the For each field for the group name. Step 3. Fill in the Parameters form In the left pane, select Parameters and complete the following: Click Groups field. Check Include in User Provisioning. Click Save. Step 4. Fill in the provisioning form In the left pane, select Provisioning and complete the following: Check Enable provisioning. Under Require admin approval before this action is performed, uncheck these options: Create user Delete user Update user Tip If you do not uncheck these options, SCIM provisioning requests will not be sent until an administrator approves them. Set When users are deleted in OneLogin, or the user's app access is removed, perform the below action to Delete. Set When user accounts are suspended in OneLogin, perform the following action to Suspend. Step 5. Save your changes After you complete the above forms, click Save. Then, return to the Configuration form and enable the API connection. Assign users After New Relic SCIM/SSO application configuration is finished and New Relic side configuration is finished, you can begin to assign users to the application. Assign the New Relic SCIM/SSO application to a user. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click Administration. From the OneLogin Administration page, choose the Users menu Users item. From the OneLogin Users page, click the user you want to assign the application to. From the user's page, click Applications. From the user's application page, click the plus sign and select the \"New Relic by Organization\" application. From the Edit New Relic by Organization login for user page, enter the user's time zone in IANA Time Zone database format (also known as the Olson time zone database format) and click Save. If you're using Roles to define your New Relic capability groups, from the user's application page, click the proper role(s) for the user and then click Save User. OneLogin provisions users in near real time so almost the moment you save the user in OneLogin, the user should be ready to use at New Relic. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 418.00095,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Create authentication domain <em>and</em> enable SAML <em>and</em> SCIM",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f34228ccbccafb2c606a"
    },
    {
      "sections": [
        "Example of identity provider groups mapping to New Relic access grants",
        "How groups work with your users"
      ],
      "title": "Example of identity provider groups mapping to New Relic access grants",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "2c6f40b0e13b23fa16cacb0ff5a8688b41a80100",
      "image": "https://docs.newrelic.com/static/2a531e9f7f54cfeaa9a6c926770bd163/d9199/Roles%2526Permissions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/roles-permissions-automated-user-management/",
      "published_at": "2021-06-08T17:10:05Z",
      "updated_at": "2021-06-08T17:10:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With automated user management (AUM), your users and groups in your identity provider (like OneLogin or Okta) are synchronized with New Relic. How groups work with your users When using automated user management, all group administration happens in your identity provider. If your existing groups logically map to access in New Relic, we recommend sending your existing groups. This makes providing and changing access to New Relic from your identity provider easy. An example of how the user groups in your identity provider might map over to access grants in New Relic, which assign a group access to a specific role (default or customer) on a specific account. In the above example, let’s focus on the Engineers group. Via SCIM, New Relic will receive the two user records as well as the information that they belong to the Engineers group. In this example, the configuration would be: the two Engineer users have the Read only role on Account 1, the Standard user role on Account 2, and the All product admin role on Account 3. This access is given by creating three access grants in New Relic: Access grant assigning the role Read only to the group Engineers on Account 1 Access grant assigning the role Standard user to the group Engineers on Account 2 Access grant assigning the role All product admin to the group Engineers on Account 3 To learn more about how access grants work, see User management concepts. For tutorials on creating new groups and custom roles, see User management tutorials.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 409.2446,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "How groups work with your <em>users</em>",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "With <em>automated</em> <em>user</em> <em>management</em> (AUM), your users and groups in your identity provider (like OneLogin or Okta) are synchronized with New Relic. How groups work with your users When using <em>automated</em> <em>user</em> <em>management</em>, all group administration happens in your identity provider. If your existing groups"
      },
      "id": "603e919e28ccbcbe6beba78b"
    }
  ],
  "/docs/accounts/accounts/automated-user-management/azure-ad-scimsso-application-configuration": [
    {
      "sections": [
        "OneLogin SCIM/SSO application configuration",
        "Requirements",
        "Create authentication domain and enable SAML and SCIM",
        "Configure SCIM/SSO application",
        "Step 1. Fill in the configuration form",
        "Step 2. Fill in the rules form",
        "A rule that only uses actions",
        "Step 3. Fill in the Parameters form",
        "Step 4. Fill in the provisioning form",
        "Tip",
        "Step 5. Save your changes",
        "Assign users"
      ],
      "title": "OneLogin SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d298162c055490c99117f564c3ea9c2ea5dfd8d1",
      "image": "https://docs.newrelic.com/static/8f585557ea58f70d94a746e6439bf1ad/c1b63/onelogin_rules_conditions_actions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/onelogin-scimsso-application-configuration/",
      "published_at": "2021-06-09T00:45:54Z",
      "updated_at": "2021-06-09T00:45:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Create authentication domain and enable SAML and SCIM If you haven't already, create a new authentication domain with SAML SSO enabled and SCIM enabled. You will use values from this UI in later steps. Configure SCIM/SSO application Configuration for the New Relic SCIM/SSO application is split across several forms. This section describes the different forms that need to be configured. From the New Relic by organization application page, fill in the following forms: Step 1. Fill in the configuration form In the left pane, select Configuration and complete the following: Take the authentication domain ID and SCIM bearer token values from New Relic's authentication domain UI and input them into the appropriate app fields. Leave the API Connection disabled until all the configuration described in the following sections is completed. After completing all the configuration, enable the connection. Step 2. Fill in the rules form Configure the user groups to send to New Relic using rules. OneLogin provides this documentation which describes how to use rules to provision groups for users. Decide what type of groups to send along with your users to New Relic. If your organization is using Active Directory or LDAP, you might choose to use security groups to define your users capabilities at New Relic. Another reasonable group choice is OneLogin role. On the New Relic side, your user's groups define their capabilities. The groups that are sent with users will be mapped to New Relic capability groups. Note that at the moment, there is no way to delete a group from the OneLogin side. This is a known limitation from OneLogin. Removing or changing rules does not delete groups already sent to New Relic. If you wish to no longer use a group, removing all the users from the group will prevent it from being used at New Relic. A rule that only uses actions Here's an example rule configuration does not use any conditions. The conditions are left empty to avoid applying any filtering logic to the users. All users will be sent in this example. If you want to send only a subset of users, you need to specify conditions to select the subset. The actions describe where to retrieve the value for the group name and how to parse the value. In this example, we retrieve the group name from the OneLogin role field. The OneLogin role field only has a single value, but sometimes the source for the group name contains other fields besides group name. In other words, some sources give you a list of fields and values and only one of those fields has the value you want to use. In this case, you can insert a regular expression in with value that matches field to find and extract the value for the group name. This example uses the entire value of the For each field for the group name. Step 3. Fill in the Parameters form In the left pane, select Parameters and complete the following: Click Groups field. Check Include in User Provisioning. Click Save. Step 4. Fill in the provisioning form In the left pane, select Provisioning and complete the following: Check Enable provisioning. Under Require admin approval before this action is performed, uncheck these options: Create user Delete user Update user Tip If you do not uncheck these options, SCIM provisioning requests will not be sent until an administrator approves them. Set When users are deleted in OneLogin, or the user's app access is removed, perform the below action to Delete. Set When user accounts are suspended in OneLogin, perform the following action to Suspend. Step 5. Save your changes After you complete the above forms, click Save. Then, return to the Configuration form and enable the API connection. Assign users After New Relic SCIM/SSO application configuration is finished and New Relic side configuration is finished, you can begin to assign users to the application. Assign the New Relic SCIM/SSO application to a user. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click Administration. From the OneLogin Administration page, choose the Users menu Users item. From the OneLogin Users page, click the user you want to assign the application to. From the user's page, click Applications. From the user's application page, click the plus sign and select the \"New Relic by Organization\" application. From the Edit New Relic by Organization login for user page, enter the user's time zone in IANA Time Zone database format (also known as the Olson time zone database format) and click Save. If you're using Roles to define your New Relic capability groups, from the user's application page, click the proper role(s) for the user and then click Save User. OneLogin provisions users in near real time so almost the moment you save the user in OneLogin, the user should be ready to use at New Relic. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 418.0006,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Create authentication domain <em>and</em> enable SAML <em>and</em> SCIM",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f34228ccbccafb2c606a"
    },
    {
      "sections": [
        "Introduction to automated user management (AUM) and single-sign on (SSO)",
        "Requirements",
        "Set up automated user management (AUM)"
      ],
      "title": "Introduction to automated user management (AUM) and single-sign on (SSO)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "831a5f1137eccac9540d716302645b4e976a6332",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign/",
      "published_at": "2021-06-08T18:48:09Z",
      "updated_at": "2021-06-08T18:48:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic lets you set up automated user management (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this automated provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements and impacts: Requires Enterprise edition. User model-related requirements: This feature creates users on our New Relic One user model. To implement AUM, you must be on our New Relic One user model and have user management roles assigned. If you're on our original user model (or otherwise can't seem to implement this feature), talk to your New Relic account representative. Supports SAML 2.0 standard for single sign on (SSO). Supports SCIM 2.0 standard. Supported identity providers: Okta, Azure AD, OneLogin. For unsupported identity providers, we have a SCIM API. Notes on initial enabling of AUM: We don't currently support toggling SCIM on or off. If an authentication domain has already been set up with the source of users as Manual, you can't change it to SCIM. When first enabled, the bearer token is generated and only shown once. If you need to view a bearer token later, the only way to do this is to generate a new one, and that will invalidate the old one and any integrations using the old token. Set up automated user management (AUM) For an explanation of how your identity provider groups map over to New Relic groups, see Group and role mapping. To use automated user management to import users from your identity provider: It's important to first review the requirements. In the authentication domain UI, create a new authentication domain. For that authentication domain, enable SCIM and configure SAML SSO. Configure your identity provider using a relevant guide: Azure AD | Okta | OneLogin. If you don't use one of those services, we also have a SCIM API. Note that your users are created in New Relic as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. Recommended: Set a time zone in your identity provider. If not specified, our UI shows date/times with the UTC time zone. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). If you have issues, contact your account representative. After being provisioned, your users can click on the New Relic SCIM/SSO application tile in their identity provider to be logged into New Relic. To learn more about New Relic's roles and capabilities, see Standard roles.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 411.07336,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "sections": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "New Relic lets you set up <em>automated</em> <em>user</em> <em>management</em> (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this <em>automated</em> provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements"
      },
      "id": "6043d60e64441ff8f5378f37"
    },
    {
      "sections": [
        "Example of identity provider groups mapping to New Relic access grants",
        "How groups work with your users"
      ],
      "title": "Example of identity provider groups mapping to New Relic access grants",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "2c6f40b0e13b23fa16cacb0ff5a8688b41a80100",
      "image": "https://docs.newrelic.com/static/2a531e9f7f54cfeaa9a6c926770bd163/d9199/Roles%2526Permissions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/roles-permissions-automated-user-management/",
      "published_at": "2021-06-08T17:10:05Z",
      "updated_at": "2021-06-08T17:10:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With automated user management (AUM), your users and groups in your identity provider (like OneLogin or Okta) are synchronized with New Relic. How groups work with your users When using automated user management, all group administration happens in your identity provider. If your existing groups logically map to access in New Relic, we recommend sending your existing groups. This makes providing and changing access to New Relic from your identity provider easy. An example of how the user groups in your identity provider might map over to access grants in New Relic, which assign a group access to a specific role (default or customer) on a specific account. In the above example, let’s focus on the Engineers group. Via SCIM, New Relic will receive the two user records as well as the information that they belong to the Engineers group. In this example, the configuration would be: the two Engineer users have the Read only role on Account 1, the Standard user role on Account 2, and the All product admin role on Account 3. This access is given by creating three access grants in New Relic: Access grant assigning the role Read only to the group Engineers on Account 1 Access grant assigning the role Standard user to the group Engineers on Account 2 Access grant assigning the role All product admin to the group Engineers on Account 3 To learn more about how access grants work, see User management concepts. For tutorials on creating new groups and custom roles, see User management tutorials.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 409.2443,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "How groups work with your <em>users</em>",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "With <em>automated</em> <em>user</em> <em>management</em> (AUM), your users and groups in your identity provider (like OneLogin or Okta) are synchronized with New Relic. How groups work with your users When using <em>automated</em> <em>user</em> <em>management</em>, all group administration happens in your identity provider. If your existing groups"
      },
      "id": "603e919e28ccbcbe6beba78b"
    }
  ],
  "/docs/accounts/accounts/automated-user-management/okta-scimsso-application-configuration": [
    {
      "sections": [
        "Azure AD SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Create authentication domain and enable SAML",
        "Step 2. Configure connection",
        "Step 3. Configure provisioning rules",
        "Tip",
        "Step 4. Assign users and groups"
      ],
      "title": "Azure AD SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d6e7f7e95daa833451159a3db4e2c4257270b5e9",
      "image": "https://docs.newrelic.com/static/0a9a32fd5041e6e2ea37cc5f032b6910/8c557/Azure_AD_Provisioning_Attribute_Mapping_2_0.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/azure-ad-scimsso-application-configuration/",
      "published_at": "2021-06-09T01:01:07Z",
      "updated_at": "2021-06-09T01:01:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM/SSO application. Requirements Before using this guide, read the requirements and procedure overview. Step 1. Create authentication domain and enable SAML If you haven't already, enable SAML SSO and then return here to complete these instructions. Step 2. Configure connection Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning link in the sidebar. In the main pane, click on Get started. In the Provisioning Mode pick-list, choose Automatic. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. In Azure AD's New Relic SCIM/SSO app, in the Admin credentials section, fill out the Tenant URL and Secret token fields with the values provided in New Relic's authentication domain UI. To verify you can connect to New Relic, click Test Connection. When you see a message indicating verification success, click Save. The New Relic SCIM/SSO application can now connect with New Relic. Continue with the following section to configure the provisioning rules. Step 3. Configure provisioning rules Initially, nothing is configured to be sent to New Relic. You must configure Azure AD to send changes for user creation, updates, and deactivation. Go to the Provisioning page and complete the following: Expand the Mappings section. Click Provision Azure Active Directory Users. Verify the Target Object Actions Create Update and Delete checkboxes are all checked. Verify the Attribute Mappings look correct for your environment. Each of the New Relic attributes shown in the list must receive a value. Tip Ensure that the Azure Active Directory attributes shown in the list on the left are good sources for the information to send to New Relic. In particular, not all environments set the mail attribute. If your environment does not set the mail attribute, userPrincipalName could be a good alternative. Leave the switch for Enabled set to Off until you're done with the user and group configuration in the next section. Once all configuration is ready, return to this page and set the switch to On. Click Save. Here's an example of a filled-in attribute mapping page with the default values. Your values may be configured differently depending on your situation. After saving the provisioning rules, the New Relic SCIM/SSO application is ready to provision any changes made to users assigned to the application. Continue with the following section to assign users and groups to the New Relic SCIM/SSO application. Step 4. Assign users and groups After the New Relic SCIM/SSO application configuration and the New Relic side configuration is finished, you can assign users and groups to the application. From the New Relic SCIM/SSO application page, click on Users and groups in the sidebar. Click +Add user. From the Add Assignment page, click on Users and groups, and select the appropriate users or groups that you'd like to provision. Then click Select and Assign. The selected users and groups appear on the Users and groups page, indicating that they're candidates for provisioning. Repeat the steps to add users and groups until all desired entities have been assigned to the application. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 418.30447,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Step 4. Assign <em>users</em> <em>and</em> groups",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM&#x2F;SSO application. Requirements Before using this guide, read"
      },
      "id": "6043f5c964441fcfb0378ef3"
    },
    {
      "sections": [
        "OneLogin SCIM/SSO application configuration",
        "Requirements",
        "Create authentication domain and enable SAML and SCIM",
        "Configure SCIM/SSO application",
        "Step 1. Fill in the configuration form",
        "Step 2. Fill in the rules form",
        "A rule that only uses actions",
        "Step 3. Fill in the Parameters form",
        "Step 4. Fill in the provisioning form",
        "Tip",
        "Step 5. Save your changes",
        "Assign users"
      ],
      "title": "OneLogin SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d298162c055490c99117f564c3ea9c2ea5dfd8d1",
      "image": "https://docs.newrelic.com/static/8f585557ea58f70d94a746e6439bf1ad/c1b63/onelogin_rules_conditions_actions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/onelogin-scimsso-application-configuration/",
      "published_at": "2021-06-09T00:45:54Z",
      "updated_at": "2021-06-09T00:45:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Create authentication domain and enable SAML and SCIM If you haven't already, create a new authentication domain with SAML SSO enabled and SCIM enabled. You will use values from this UI in later steps. Configure SCIM/SSO application Configuration for the New Relic SCIM/SSO application is split across several forms. This section describes the different forms that need to be configured. From the New Relic by organization application page, fill in the following forms: Step 1. Fill in the configuration form In the left pane, select Configuration and complete the following: Take the authentication domain ID and SCIM bearer token values from New Relic's authentication domain UI and input them into the appropriate app fields. Leave the API Connection disabled until all the configuration described in the following sections is completed. After completing all the configuration, enable the connection. Step 2. Fill in the rules form Configure the user groups to send to New Relic using rules. OneLogin provides this documentation which describes how to use rules to provision groups for users. Decide what type of groups to send along with your users to New Relic. If your organization is using Active Directory or LDAP, you might choose to use security groups to define your users capabilities at New Relic. Another reasonable group choice is OneLogin role. On the New Relic side, your user's groups define their capabilities. The groups that are sent with users will be mapped to New Relic capability groups. Note that at the moment, there is no way to delete a group from the OneLogin side. This is a known limitation from OneLogin. Removing or changing rules does not delete groups already sent to New Relic. If you wish to no longer use a group, removing all the users from the group will prevent it from being used at New Relic. A rule that only uses actions Here's an example rule configuration does not use any conditions. The conditions are left empty to avoid applying any filtering logic to the users. All users will be sent in this example. If you want to send only a subset of users, you need to specify conditions to select the subset. The actions describe where to retrieve the value for the group name and how to parse the value. In this example, we retrieve the group name from the OneLogin role field. The OneLogin role field only has a single value, but sometimes the source for the group name contains other fields besides group name. In other words, some sources give you a list of fields and values and only one of those fields has the value you want to use. In this case, you can insert a regular expression in with value that matches field to find and extract the value for the group name. This example uses the entire value of the For each field for the group name. Step 3. Fill in the Parameters form In the left pane, select Parameters and complete the following: Click Groups field. Check Include in User Provisioning. Click Save. Step 4. Fill in the provisioning form In the left pane, select Provisioning and complete the following: Check Enable provisioning. Under Require admin approval before this action is performed, uncheck these options: Create user Delete user Update user Tip If you do not uncheck these options, SCIM provisioning requests will not be sent until an administrator approves them. Set When users are deleted in OneLogin, or the user's app access is removed, perform the below action to Delete. Set When user accounts are suspended in OneLogin, perform the following action to Suspend. Step 5. Save your changes After you complete the above forms, click Save. Then, return to the Configuration form and enable the API connection. Assign users After New Relic SCIM/SSO application configuration is finished and New Relic side configuration is finished, you can begin to assign users to the application. Assign the New Relic SCIM/SSO application to a user. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click Administration. From the OneLogin Administration page, choose the Users menu Users item. From the OneLogin Users page, click the user you want to assign the application to. From the user's page, click Applications. From the user's application page, click the plus sign and select the \"New Relic by Organization\" application. From the Edit New Relic by Organization login for user page, enter the user's time zone in IANA Time Zone database format (also known as the Olson time zone database format) and click Save. If you're using Roles to define your New Relic capability groups, from the user's application page, click the proper role(s) for the user and then click Save User. OneLogin provisions users in near real time so almost the moment you save the user in OneLogin, the user should be ready to use at New Relic. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 418.0006,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Create authentication domain <em>and</em> enable SAML <em>and</em> SCIM",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f34228ccbccafb2c606a"
    },
    {
      "sections": [
        "Introduction to automated user management (AUM) and single-sign on (SSO)",
        "Requirements",
        "Set up automated user management (AUM)"
      ],
      "title": "Introduction to automated user management (AUM) and single-sign on (SSO)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "831a5f1137eccac9540d716302645b4e976a6332",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign/",
      "published_at": "2021-06-08T18:48:09Z",
      "updated_at": "2021-06-08T18:48:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic lets you set up automated user management (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this automated provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements and impacts: Requires Enterprise edition. User model-related requirements: This feature creates users on our New Relic One user model. To implement AUM, you must be on our New Relic One user model and have user management roles assigned. If you're on our original user model (or otherwise can't seem to implement this feature), talk to your New Relic account representative. Supports SAML 2.0 standard for single sign on (SSO). Supports SCIM 2.0 standard. Supported identity providers: Okta, Azure AD, OneLogin. For unsupported identity providers, we have a SCIM API. Notes on initial enabling of AUM: We don't currently support toggling SCIM on or off. If an authentication domain has already been set up with the source of users as Manual, you can't change it to SCIM. When first enabled, the bearer token is generated and only shown once. If you need to view a bearer token later, the only way to do this is to generate a new one, and that will invalidate the old one and any integrations using the old token. Set up automated user management (AUM) For an explanation of how your identity provider groups map over to New Relic groups, see Group and role mapping. To use automated user management to import users from your identity provider: It's important to first review the requirements. In the authentication domain UI, create a new authentication domain. For that authentication domain, enable SCIM and configure SAML SSO. Configure your identity provider using a relevant guide: Azure AD | Okta | OneLogin. If you don't use one of those services, we also have a SCIM API. Note that your users are created in New Relic as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. Recommended: Set a time zone in your identity provider. If not specified, our UI shows date/times with the UTC time zone. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). If you have issues, contact your account representative. After being provisioned, your users can click on the New Relic SCIM/SSO application tile in their identity provider to be logged into New Relic. To learn more about New Relic's roles and capabilities, see Standard roles.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 411.07336,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "sections": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "New Relic lets you set up <em>automated</em> <em>user</em> <em>management</em> (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this <em>automated</em> provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements"
      },
      "id": "6043d60e64441ff8f5378f37"
    }
  ],
  "/docs/accounts/accounts/automated-user-management/onelogin-scimsso-application-configuration": [
    {
      "sections": [
        "Azure AD SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Create authentication domain and enable SAML",
        "Step 2. Configure connection",
        "Step 3. Configure provisioning rules",
        "Tip",
        "Step 4. Assign users and groups"
      ],
      "title": "Azure AD SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d6e7f7e95daa833451159a3db4e2c4257270b5e9",
      "image": "https://docs.newrelic.com/static/0a9a32fd5041e6e2ea37cc5f032b6910/8c557/Azure_AD_Provisioning_Attribute_Mapping_2_0.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/azure-ad-scimsso-application-configuration/",
      "published_at": "2021-06-09T01:01:07Z",
      "updated_at": "2021-06-09T01:01:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM/SSO application. Requirements Before using this guide, read the requirements and procedure overview. Step 1. Create authentication domain and enable SAML If you haven't already, enable SAML SSO and then return here to complete these instructions. Step 2. Configure connection Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning link in the sidebar. In the main pane, click on Get started. In the Provisioning Mode pick-list, choose Automatic. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. In Azure AD's New Relic SCIM/SSO app, in the Admin credentials section, fill out the Tenant URL and Secret token fields with the values provided in New Relic's authentication domain UI. To verify you can connect to New Relic, click Test Connection. When you see a message indicating verification success, click Save. The New Relic SCIM/SSO application can now connect with New Relic. Continue with the following section to configure the provisioning rules. Step 3. Configure provisioning rules Initially, nothing is configured to be sent to New Relic. You must configure Azure AD to send changes for user creation, updates, and deactivation. Go to the Provisioning page and complete the following: Expand the Mappings section. Click Provision Azure Active Directory Users. Verify the Target Object Actions Create Update and Delete checkboxes are all checked. Verify the Attribute Mappings look correct for your environment. Each of the New Relic attributes shown in the list must receive a value. Tip Ensure that the Azure Active Directory attributes shown in the list on the left are good sources for the information to send to New Relic. In particular, not all environments set the mail attribute. If your environment does not set the mail attribute, userPrincipalName could be a good alternative. Leave the switch for Enabled set to Off until you're done with the user and group configuration in the next section. Once all configuration is ready, return to this page and set the switch to On. Click Save. Here's an example of a filled-in attribute mapping page with the default values. Your values may be configured differently depending on your situation. After saving the provisioning rules, the New Relic SCIM/SSO application is ready to provision any changes made to users assigned to the application. Continue with the following section to assign users and groups to the New Relic SCIM/SSO application. Step 4. Assign users and groups After the New Relic SCIM/SSO application configuration and the New Relic side configuration is finished, you can assign users and groups to the application. From the New Relic SCIM/SSO application page, click on Users and groups in the sidebar. Click +Add user. From the Add Assignment page, click on Users and groups, and select the appropriate users or groups that you'd like to provision. Then click Select and Assign. The selected users and groups appear on the Users and groups page, indicating that they're candidates for provisioning. Repeat the steps to add users and groups until all desired entities have been assigned to the application. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 418.30414,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Step 4. Assign <em>users</em> <em>and</em> groups",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM&#x2F;SSO application. Requirements Before using this guide, read"
      },
      "id": "6043f5c964441fcfb0378ef3"
    },
    {
      "sections": [
        "Introduction to automated user management (AUM) and single-sign on (SSO)",
        "Requirements",
        "Set up automated user management (AUM)"
      ],
      "title": "Introduction to automated user management (AUM) and single-sign on (SSO)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "831a5f1137eccac9540d716302645b4e976a6332",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign/",
      "published_at": "2021-06-08T18:48:09Z",
      "updated_at": "2021-06-08T18:48:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic lets you set up automated user management (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this automated provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements and impacts: Requires Enterprise edition. User model-related requirements: This feature creates users on our New Relic One user model. To implement AUM, you must be on our New Relic One user model and have user management roles assigned. If you're on our original user model (or otherwise can't seem to implement this feature), talk to your New Relic account representative. Supports SAML 2.0 standard for single sign on (SSO). Supports SCIM 2.0 standard. Supported identity providers: Okta, Azure AD, OneLogin. For unsupported identity providers, we have a SCIM API. Notes on initial enabling of AUM: We don't currently support toggling SCIM on or off. If an authentication domain has already been set up with the source of users as Manual, you can't change it to SCIM. When first enabled, the bearer token is generated and only shown once. If you need to view a bearer token later, the only way to do this is to generate a new one, and that will invalidate the old one and any integrations using the old token. Set up automated user management (AUM) For an explanation of how your identity provider groups map over to New Relic groups, see Group and role mapping. To use automated user management to import users from your identity provider: It's important to first review the requirements. In the authentication domain UI, create a new authentication domain. For that authentication domain, enable SCIM and configure SAML SSO. Configure your identity provider using a relevant guide: Azure AD | Okta | OneLogin. If you don't use one of those services, we also have a SCIM API. Note that your users are created in New Relic as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. Recommended: Set a time zone in your identity provider. If not specified, our UI shows date/times with the UTC time zone. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). If you have issues, contact your account representative. After being provisioned, your users can click on the New Relic SCIM/SSO application tile in their identity provider to be logged into New Relic. To learn more about New Relic's roles and capabilities, see Standard roles.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 411.07306,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "sections": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "New Relic lets you set up <em>automated</em> <em>user</em> <em>management</em> (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this <em>automated</em> provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements"
      },
      "id": "6043d60e64441ff8f5378f37"
    },
    {
      "sections": [
        "Example of identity provider groups mapping to New Relic access grants",
        "How groups work with your users"
      ],
      "title": "Example of identity provider groups mapping to New Relic access grants",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "2c6f40b0e13b23fa16cacb0ff5a8688b41a80100",
      "image": "https://docs.newrelic.com/static/2a531e9f7f54cfeaa9a6c926770bd163/d9199/Roles%2526Permissions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/roles-permissions-automated-user-management/",
      "published_at": "2021-06-08T17:10:05Z",
      "updated_at": "2021-06-08T17:10:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With automated user management (AUM), your users and groups in your identity provider (like OneLogin or Okta) are synchronized with New Relic. How groups work with your users When using automated user management, all group administration happens in your identity provider. If your existing groups logically map to access in New Relic, we recommend sending your existing groups. This makes providing and changing access to New Relic from your identity provider easy. An example of how the user groups in your identity provider might map over to access grants in New Relic, which assign a group access to a specific role (default or customer) on a specific account. In the above example, let’s focus on the Engineers group. Via SCIM, New Relic will receive the two user records as well as the information that they belong to the Engineers group. In this example, the configuration would be: the two Engineer users have the Read only role on Account 1, the Standard user role on Account 2, and the All product admin role on Account 3. This access is given by creating three access grants in New Relic: Access grant assigning the role Read only to the group Engineers on Account 1 Access grant assigning the role Standard user to the group Engineers on Account 2 Access grant assigning the role All product admin to the group Engineers on Account 3 To learn more about how access grants work, see User management concepts. For tutorials on creating new groups and custom roles, see User management tutorials.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 409.244,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "How groups work with your <em>users</em>",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "With <em>automated</em> <em>user</em> <em>management</em> (AUM), your users and groups in your identity provider (like OneLogin or Okta) are synchronized with New Relic. How groups work with your users When using <em>automated</em> <em>user</em> <em>management</em>, all group administration happens in your identity provider. If your existing groups"
      },
      "id": "603e919e28ccbcbe6beba78b"
    }
  ],
  "/docs/accounts/accounts/automated-user-management/roles-permissions-automated-user-management": [
    {
      "sections": [
        "Azure AD SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Create authentication domain and enable SAML",
        "Step 2. Configure connection",
        "Step 3. Configure provisioning rules",
        "Tip",
        "Step 4. Assign users and groups"
      ],
      "title": "Azure AD SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d6e7f7e95daa833451159a3db4e2c4257270b5e9",
      "image": "https://docs.newrelic.com/static/0a9a32fd5041e6e2ea37cc5f032b6910/8c557/Azure_AD_Provisioning_Attribute_Mapping_2_0.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/azure-ad-scimsso-application-configuration/",
      "published_at": "2021-06-09T01:01:07Z",
      "updated_at": "2021-06-09T01:01:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM/SSO application. Requirements Before using this guide, read the requirements and procedure overview. Step 1. Create authentication domain and enable SAML If you haven't already, enable SAML SSO and then return here to complete these instructions. Step 2. Configure connection Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning link in the sidebar. In the main pane, click on Get started. In the Provisioning Mode pick-list, choose Automatic. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. In Azure AD's New Relic SCIM/SSO app, in the Admin credentials section, fill out the Tenant URL and Secret token fields with the values provided in New Relic's authentication domain UI. To verify you can connect to New Relic, click Test Connection. When you see a message indicating verification success, click Save. The New Relic SCIM/SSO application can now connect with New Relic. Continue with the following section to configure the provisioning rules. Step 3. Configure provisioning rules Initially, nothing is configured to be sent to New Relic. You must configure Azure AD to send changes for user creation, updates, and deactivation. Go to the Provisioning page and complete the following: Expand the Mappings section. Click Provision Azure Active Directory Users. Verify the Target Object Actions Create Update and Delete checkboxes are all checked. Verify the Attribute Mappings look correct for your environment. Each of the New Relic attributes shown in the list must receive a value. Tip Ensure that the Azure Active Directory attributes shown in the list on the left are good sources for the information to send to New Relic. In particular, not all environments set the mail attribute. If your environment does not set the mail attribute, userPrincipalName could be a good alternative. Leave the switch for Enabled set to Off until you're done with the user and group configuration in the next section. Once all configuration is ready, return to this page and set the switch to On. Click Save. Here's an example of a filled-in attribute mapping page with the default values. Your values may be configured differently depending on your situation. After saving the provisioning rules, the New Relic SCIM/SSO application is ready to provision any changes made to users assigned to the application. Continue with the following section to assign users and groups to the New Relic SCIM/SSO application. Step 4. Assign users and groups After the New Relic SCIM/SSO application configuration and the New Relic side configuration is finished, you can assign users and groups to the application. From the New Relic SCIM/SSO application page, click on Users and groups in the sidebar. Click +Add user. From the Add Assignment page, click on Users and groups, and select the appropriate users or groups that you'd like to provision. Then click Select and Assign. The selected users and groups appear on the Users and groups page, indicating that they're candidates for provisioning. Repeat the steps to add users and groups until all desired entities have been assigned to the application. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 418.30414,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Step 4. Assign <em>users</em> <em>and</em> groups",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM&#x2F;SSO application. Requirements Before using this guide, read"
      },
      "id": "6043f5c964441fcfb0378ef3"
    },
    {
      "sections": [
        "OneLogin SCIM/SSO application configuration",
        "Requirements",
        "Create authentication domain and enable SAML and SCIM",
        "Configure SCIM/SSO application",
        "Step 1. Fill in the configuration form",
        "Step 2. Fill in the rules form",
        "A rule that only uses actions",
        "Step 3. Fill in the Parameters form",
        "Step 4. Fill in the provisioning form",
        "Tip",
        "Step 5. Save your changes",
        "Assign users"
      ],
      "title": "OneLogin SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d298162c055490c99117f564c3ea9c2ea5dfd8d1",
      "image": "https://docs.newrelic.com/static/8f585557ea58f70d94a746e6439bf1ad/c1b63/onelogin_rules_conditions_actions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/onelogin-scimsso-application-configuration/",
      "published_at": "2021-06-09T00:45:54Z",
      "updated_at": "2021-06-09T00:45:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Create authentication domain and enable SAML and SCIM If you haven't already, create a new authentication domain with SAML SSO enabled and SCIM enabled. You will use values from this UI in later steps. Configure SCIM/SSO application Configuration for the New Relic SCIM/SSO application is split across several forms. This section describes the different forms that need to be configured. From the New Relic by organization application page, fill in the following forms: Step 1. Fill in the configuration form In the left pane, select Configuration and complete the following: Take the authentication domain ID and SCIM bearer token values from New Relic's authentication domain UI and input them into the appropriate app fields. Leave the API Connection disabled until all the configuration described in the following sections is completed. After completing all the configuration, enable the connection. Step 2. Fill in the rules form Configure the user groups to send to New Relic using rules. OneLogin provides this documentation which describes how to use rules to provision groups for users. Decide what type of groups to send along with your users to New Relic. If your organization is using Active Directory or LDAP, you might choose to use security groups to define your users capabilities at New Relic. Another reasonable group choice is OneLogin role. On the New Relic side, your user's groups define their capabilities. The groups that are sent with users will be mapped to New Relic capability groups. Note that at the moment, there is no way to delete a group from the OneLogin side. This is a known limitation from OneLogin. Removing or changing rules does not delete groups already sent to New Relic. If you wish to no longer use a group, removing all the users from the group will prevent it from being used at New Relic. A rule that only uses actions Here's an example rule configuration does not use any conditions. The conditions are left empty to avoid applying any filtering logic to the users. All users will be sent in this example. If you want to send only a subset of users, you need to specify conditions to select the subset. The actions describe where to retrieve the value for the group name and how to parse the value. In this example, we retrieve the group name from the OneLogin role field. The OneLogin role field only has a single value, but sometimes the source for the group name contains other fields besides group name. In other words, some sources give you a list of fields and values and only one of those fields has the value you want to use. In this case, you can insert a regular expression in with value that matches field to find and extract the value for the group name. This example uses the entire value of the For each field for the group name. Step 3. Fill in the Parameters form In the left pane, select Parameters and complete the following: Click Groups field. Check Include in User Provisioning. Click Save. Step 4. Fill in the provisioning form In the left pane, select Provisioning and complete the following: Check Enable provisioning. Under Require admin approval before this action is performed, uncheck these options: Create user Delete user Update user Tip If you do not uncheck these options, SCIM provisioning requests will not be sent until an administrator approves them. Set When users are deleted in OneLogin, or the user's app access is removed, perform the below action to Delete. Set When user accounts are suspended in OneLogin, perform the following action to Suspend. Step 5. Save your changes After you complete the above forms, click Save. Then, return to the Configuration form and enable the API connection. Assign users After New Relic SCIM/SSO application configuration is finished and New Relic side configuration is finished, you can begin to assign users to the application. Assign the New Relic SCIM/SSO application to a user. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click Administration. From the OneLogin Administration page, choose the Users menu Users item. From the OneLogin Users page, click the user you want to assign the application to. From the user's page, click Applications. From the user's application page, click the plus sign and select the \"New Relic by Organization\" application. From the Edit New Relic by Organization login for user page, enter the user's time zone in IANA Time Zone database format (also known as the Olson time zone database format) and click Save. If you're using Roles to define your New Relic capability groups, from the user's application page, click the proper role(s) for the user and then click Save User. OneLogin provisions users in near real time so almost the moment you save the user in OneLogin, the user should be ready to use at New Relic. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 418.00027,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Create authentication domain <em>and</em> enable SAML <em>and</em> SCIM",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f34228ccbccafb2c606a"
    },
    {
      "sections": [
        "Introduction to automated user management (AUM) and single-sign on (SSO)",
        "Requirements",
        "Set up automated user management (AUM)"
      ],
      "title": "Introduction to automated user management (AUM) and single-sign on (SSO)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "831a5f1137eccac9540d716302645b4e976a6332",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign/",
      "published_at": "2021-06-08T18:48:09Z",
      "updated_at": "2021-06-08T18:48:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic lets you set up automated user management (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this automated provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements and impacts: Requires Enterprise edition. User model-related requirements: This feature creates users on our New Relic One user model. To implement AUM, you must be on our New Relic One user model and have user management roles assigned. If you're on our original user model (or otherwise can't seem to implement this feature), talk to your New Relic account representative. Supports SAML 2.0 standard for single sign on (SSO). Supports SCIM 2.0 standard. Supported identity providers: Okta, Azure AD, OneLogin. For unsupported identity providers, we have a SCIM API. Notes on initial enabling of AUM: We don't currently support toggling SCIM on or off. If an authentication domain has already been set up with the source of users as Manual, you can't change it to SCIM. When first enabled, the bearer token is generated and only shown once. If you need to view a bearer token later, the only way to do this is to generate a new one, and that will invalidate the old one and any integrations using the old token. Set up automated user management (AUM) For an explanation of how your identity provider groups map over to New Relic groups, see Group and role mapping. To use automated user management to import users from your identity provider: It's important to first review the requirements. In the authentication domain UI, create a new authentication domain. For that authentication domain, enable SCIM and configure SAML SSO. Configure your identity provider using a relevant guide: Azure AD | Okta | OneLogin. If you don't use one of those services, we also have a SCIM API. Note that your users are created in New Relic as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. Recommended: Set a time zone in your identity provider. If not specified, our UI shows date/times with the UTC time zone. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). If you have issues, contact your account representative. After being provisioned, your users can click on the New Relic SCIM/SSO application tile in their identity provider to be logged into New Relic. To learn more about New Relic's roles and capabilities, see Standard roles.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 411.07306,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "sections": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "New Relic lets you set up <em>automated</em> <em>user</em> <em>management</em> (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this <em>automated</em> provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements"
      },
      "id": "6043d60e64441ff8f5378f37"
    }
  ],
  "/docs/accounts/accounts/automated-user-management/scim-support-automated-user-management": [
    {
      "sections": [
        "Azure AD SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Create authentication domain and enable SAML",
        "Step 2. Configure connection",
        "Step 3. Configure provisioning rules",
        "Tip",
        "Step 4. Assign users and groups"
      ],
      "title": "Azure AD SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d6e7f7e95daa833451159a3db4e2c4257270b5e9",
      "image": "https://docs.newrelic.com/static/0a9a32fd5041e6e2ea37cc5f032b6910/8c557/Azure_AD_Provisioning_Attribute_Mapping_2_0.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/azure-ad-scimsso-application-configuration/",
      "published_at": "2021-06-09T01:01:07Z",
      "updated_at": "2021-06-09T01:01:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM/SSO application. Requirements Before using this guide, read the requirements and procedure overview. Step 1. Create authentication domain and enable SAML If you haven't already, enable SAML SSO and then return here to complete these instructions. Step 2. Configure connection Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning link in the sidebar. In the main pane, click on Get started. In the Provisioning Mode pick-list, choose Automatic. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. In Azure AD's New Relic SCIM/SSO app, in the Admin credentials section, fill out the Tenant URL and Secret token fields with the values provided in New Relic's authentication domain UI. To verify you can connect to New Relic, click Test Connection. When you see a message indicating verification success, click Save. The New Relic SCIM/SSO application can now connect with New Relic. Continue with the following section to configure the provisioning rules. Step 3. Configure provisioning rules Initially, nothing is configured to be sent to New Relic. You must configure Azure AD to send changes for user creation, updates, and deactivation. Go to the Provisioning page and complete the following: Expand the Mappings section. Click Provision Azure Active Directory Users. Verify the Target Object Actions Create Update and Delete checkboxes are all checked. Verify the Attribute Mappings look correct for your environment. Each of the New Relic attributes shown in the list must receive a value. Tip Ensure that the Azure Active Directory attributes shown in the list on the left are good sources for the information to send to New Relic. In particular, not all environments set the mail attribute. If your environment does not set the mail attribute, userPrincipalName could be a good alternative. Leave the switch for Enabled set to Off until you're done with the user and group configuration in the next section. Once all configuration is ready, return to this page and set the switch to On. Click Save. Here's an example of a filled-in attribute mapping page with the default values. Your values may be configured differently depending on your situation. After saving the provisioning rules, the New Relic SCIM/SSO application is ready to provision any changes made to users assigned to the application. Continue with the following section to assign users and groups to the New Relic SCIM/SSO application. Step 4. Assign users and groups After the New Relic SCIM/SSO application configuration and the New Relic side configuration is finished, you can assign users and groups to the application. From the New Relic SCIM/SSO application page, click on Users and groups in the sidebar. Click +Add user. From the Add Assignment page, click on Users and groups, and select the appropriate users or groups that you'd like to provision. Then click Select and Assign. The selected users and groups appear on the Users and groups page, indicating that they're candidates for provisioning. Repeat the steps to add users and groups until all desired entities have been assigned to the application. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 418.3038,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Step 4. Assign <em>users</em> <em>and</em> groups",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM&#x2F;SSO application. Requirements Before using this guide, read"
      },
      "id": "6043f5c964441fcfb0378ef3"
    },
    {
      "sections": [
        "OneLogin SCIM/SSO application configuration",
        "Requirements",
        "Create authentication domain and enable SAML and SCIM",
        "Configure SCIM/SSO application",
        "Step 1. Fill in the configuration form",
        "Step 2. Fill in the rules form",
        "A rule that only uses actions",
        "Step 3. Fill in the Parameters form",
        "Step 4. Fill in the provisioning form",
        "Tip",
        "Step 5. Save your changes",
        "Assign users"
      ],
      "title": "OneLogin SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d298162c055490c99117f564c3ea9c2ea5dfd8d1",
      "image": "https://docs.newrelic.com/static/8f585557ea58f70d94a746e6439bf1ad/c1b63/onelogin_rules_conditions_actions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/onelogin-scimsso-application-configuration/",
      "published_at": "2021-06-09T00:45:54Z",
      "updated_at": "2021-06-09T00:45:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Create authentication domain and enable SAML and SCIM If you haven't already, create a new authentication domain with SAML SSO enabled and SCIM enabled. You will use values from this UI in later steps. Configure SCIM/SSO application Configuration for the New Relic SCIM/SSO application is split across several forms. This section describes the different forms that need to be configured. From the New Relic by organization application page, fill in the following forms: Step 1. Fill in the configuration form In the left pane, select Configuration and complete the following: Take the authentication domain ID and SCIM bearer token values from New Relic's authentication domain UI and input them into the appropriate app fields. Leave the API Connection disabled until all the configuration described in the following sections is completed. After completing all the configuration, enable the connection. Step 2. Fill in the rules form Configure the user groups to send to New Relic using rules. OneLogin provides this documentation which describes how to use rules to provision groups for users. Decide what type of groups to send along with your users to New Relic. If your organization is using Active Directory or LDAP, you might choose to use security groups to define your users capabilities at New Relic. Another reasonable group choice is OneLogin role. On the New Relic side, your user's groups define their capabilities. The groups that are sent with users will be mapped to New Relic capability groups. Note that at the moment, there is no way to delete a group from the OneLogin side. This is a known limitation from OneLogin. Removing or changing rules does not delete groups already sent to New Relic. If you wish to no longer use a group, removing all the users from the group will prevent it from being used at New Relic. A rule that only uses actions Here's an example rule configuration does not use any conditions. The conditions are left empty to avoid applying any filtering logic to the users. All users will be sent in this example. If you want to send only a subset of users, you need to specify conditions to select the subset. The actions describe where to retrieve the value for the group name and how to parse the value. In this example, we retrieve the group name from the OneLogin role field. The OneLogin role field only has a single value, but sometimes the source for the group name contains other fields besides group name. In other words, some sources give you a list of fields and values and only one of those fields has the value you want to use. In this case, you can insert a regular expression in with value that matches field to find and extract the value for the group name. This example uses the entire value of the For each field for the group name. Step 3. Fill in the Parameters form In the left pane, select Parameters and complete the following: Click Groups field. Check Include in User Provisioning. Click Save. Step 4. Fill in the provisioning form In the left pane, select Provisioning and complete the following: Check Enable provisioning. Under Require admin approval before this action is performed, uncheck these options: Create user Delete user Update user Tip If you do not uncheck these options, SCIM provisioning requests will not be sent until an administrator approves them. Set When users are deleted in OneLogin, or the user's app access is removed, perform the below action to Delete. Set When user accounts are suspended in OneLogin, perform the following action to Suspend. Step 5. Save your changes After you complete the above forms, click Save. Then, return to the Configuration form and enable the API connection. Assign users After New Relic SCIM/SSO application configuration is finished and New Relic side configuration is finished, you can begin to assign users to the application. Assign the New Relic SCIM/SSO application to a user. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click Administration. From the OneLogin Administration page, choose the Users menu Users item. From the OneLogin Users page, click the user you want to assign the application to. From the user's page, click Applications. From the user's application page, click the plus sign and select the \"New Relic by Organization\" application. From the Edit New Relic by Organization login for user page, enter the user's time zone in IANA Time Zone database format (also known as the Olson time zone database format) and click Save. If you're using Roles to define your New Relic capability groups, from the user's application page, click the proper role(s) for the user and then click Save User. OneLogin provisions users in near real time so almost the moment you save the user in OneLogin, the user should be ready to use at New Relic. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 417.99994,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Create authentication domain <em>and</em> enable SAML <em>and</em> SCIM",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f34228ccbccafb2c606a"
    },
    {
      "sections": [
        "Introduction to automated user management (AUM) and single-sign on (SSO)",
        "Requirements",
        "Set up automated user management (AUM)"
      ],
      "title": "Introduction to automated user management (AUM) and single-sign on (SSO)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "831a5f1137eccac9540d716302645b4e976a6332",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign/",
      "published_at": "2021-06-08T18:48:09Z",
      "updated_at": "2021-06-08T18:48:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic lets you set up automated user management (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this automated provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements and impacts: Requires Enterprise edition. User model-related requirements: This feature creates users on our New Relic One user model. To implement AUM, you must be on our New Relic One user model and have user management roles assigned. If you're on our original user model (or otherwise can't seem to implement this feature), talk to your New Relic account representative. Supports SAML 2.0 standard for single sign on (SSO). Supports SCIM 2.0 standard. Supported identity providers: Okta, Azure AD, OneLogin. For unsupported identity providers, we have a SCIM API. Notes on initial enabling of AUM: We don't currently support toggling SCIM on or off. If an authentication domain has already been set up with the source of users as Manual, you can't change it to SCIM. When first enabled, the bearer token is generated and only shown once. If you need to view a bearer token later, the only way to do this is to generate a new one, and that will invalidate the old one and any integrations using the old token. Set up automated user management (AUM) For an explanation of how your identity provider groups map over to New Relic groups, see Group and role mapping. To use automated user management to import users from your identity provider: It's important to first review the requirements. In the authentication domain UI, create a new authentication domain. For that authentication domain, enable SCIM and configure SAML SSO. Configure your identity provider using a relevant guide: Azure AD | Okta | OneLogin. If you don't use one of those services, we also have a SCIM API. Note that your users are created in New Relic as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. Recommended: Set a time zone in your identity provider. If not specified, our UI shows date/times with the UTC time zone. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). If you have issues, contact your account representative. After being provisioned, your users can click on the New Relic SCIM/SSO application tile in their identity provider to be logged into New Relic. To learn more about New Relic's roles and capabilities, see Standard roles.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 411.07275,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "sections": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "New Relic lets you set up <em>automated</em> <em>user</em> <em>management</em> (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this <em>automated</em> provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements"
      },
      "id": "6043d60e64441ff8f5378f37"
    }
  ],
  "/docs/accounts/accounts/billing/view-or-change-account-tax-information": [
    {
      "sections": [
        "Introduction to account settings",
        "Pricing and billing settings",
        "New Relic One pricing UI",
        "Original pricing UI",
        "Manage users",
        "New Relic One user model",
        "Original user model",
        "Add accounts",
        "General account settings"
      ],
      "title": "Introduction to account settings",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "1dbac104fa7e60637c32a61a80b8b709f6fd84c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings/",
      "published_at": "2021-06-08T20:19:00Z",
      "updated_at": "2021-06-08T20:19:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view and edit account-related settings, go to one.newrelic.com and in the top right corner, select the account dropdown. Keep reading for tips on how to find different kinds of account settings in the UI. Pricing and billing settings To view and edit some billing-related settings, you must be a full user. Basic users have some restrictions. How you access billing-related UI depends on which pricing plan your New Relic account is on: New Relic One pricing UI View and manage billing information based on your user model: New Relic One user model: click the account dropdown, click Administration, and click Plan and usage. From there, you can view your usage data, and view and edit billing information. The ability to manage billing requires the Billing user role, which is included in the default Admin group. Original user model: click the account dropdown and click Account settings. Note that if you're in an organization that has a master/sub-account structure and you're in a sub-account, usage data may only display usage from that account and not the broader organization. Billing management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see Pricing. Original pricing UI If your account is on the original pricing plan, to view and edit billing details: Click the account dropdown, and click Account settings. On the right, there are details about your subscription. For more about your subscription, click Subscription. To view and edit billing details, click Billing. To learn more about original pricing, see Pricing. Manage users How you manage users depends on which user model your users are on: New Relic One user model For managing users on the New Relic One user model, see Manage users. Original user model To manage users on the original user model: from the account dropdown, click Account settings and then click Users and roles. For more on managing these users, see Original users. Add accounts How you add accounts depends on which user model you're on. This is because the user model has impacts on account structure and management. Learn more about adding accounts. General account settings For how to edit things like user preferences and email settings, see the various account settings docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 428.31488,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>account</em> <em>settings</em>",
        "sections": "<em>General</em> <em>account</em> <em>settings</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " and management. Learn more about adding <em>accounts</em>. <em>General</em> <em>account</em> <em>settings</em> For how to edit things like user preferences and email <em>settings</em>, see the various <em>account</em> <em>settings</em> docs."
      },
      "id": "6043f38a196a679ae4960f5e"
    },
    {
      "sections": [
        "Eligibility guidelines for Observability for Good",
        "Exceptions",
        "Tip",
        "Additional requirements",
        "Signup procedures",
        "Program Benefits"
      ],
      "title": "Eligibility guidelines for Observability for Good",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "fad5f24e224295de88cdb1d62cb863d9b64b063e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/subscription-pricing/eligibility-guidelines-new-relic-nonprofit-program/",
      "published_at": "2021-06-09T00:46:55Z",
      "updated_at": "2021-05-21T14:38:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides New Relic's Observability for Good program eligibility guidelines for nonprofit, charitable, and NGO organizations. Exceptions Many global nonprofit, charity and NGO organizations are eligible for Observability for Good if the organization has a recognized legal status in their respective country equal to 501(c)(3) status under the United States Internal Revenue Code, with certain exceptions. In addition, all organizations must be verified by TechSoup or the local TechSoup partner. Examples of ineligible organizations include, but are not limited to: Ineligible nonprofits Comments Higher education institutions Private nonprofit and public higher education institutions do not qualify. This includes: Universities Colleges Trade schools Primary and secondary schools (public and private) Primary and secondary schools do not qualify. This includes, but is not limited to: K-12 public school districts Individual K-12 public schools within a state or federally funded school district Standalone K-12 charter schools K-12 Knowledge is Power Program (KiPP) schools Other K-12 schools that are not part of a state or federally funded school district Healthcare organizations providing patient care This includes hospitals, hospital auxiliaries, healthcare systems, and related health services organizations, such as: Nursing or convalescent homes Care and housing for the aged Pregnancy centers Tip Free clinics may qualify. Professional, commerce, mutual, and trade organizations This includes organizations such as: Credit Unions Regulation of business Industry trade shows Professional athletic leagues Tourist bureaus Employee or membership benefit organizations This includes organizations such as: Fraternal Beneficiary societies Associations of employees Employee or member welfare associations Pension and retirement benefits Tip Organizations focusing on the improvement of working conditions may qualify. Legislative or political organizations and advocacy groups Organizations focused on nonpartisan voter education may qualify. Organizations within countries sanctioned by the US This includes organizations within any sanctioned countries included on the US Department of Treasury's Office of Foreign Assets control list , which is updated periodically. Additional requirements In order to participate, approved organizations must also: Submit an application through newrelic.org/signup. Complete the eligibility validation process through TechSoup. Tip Learn about TechSoups local NGO definitions. Accept New Relic's standard terms of service. Be a direct customer of New Relic and have a direct billing relationship with New Relic. Signup procedures To learn more or to sign up as a new or existing New Relic customer, go to newrelic.org/signup. Program Benefits Observability for Good Standard: 4 additional free users per month (+1 free edition user: 5 total) 900 additional gb of data (+100 gb free edition: 1TB total) Observability for Good Pro: 2 free users per month 1 free TB data per month Tip A payment method on file is required for accounts using Observability for Good Pro.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 263.29504,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " through newrelic.org&#x2F;signup. Complete the eligibility validation process through TechSoup. Tip Learn about TechSoups local NGO definitions. Accept New Relic&#x27;s standard terms of service. Be a direct customer of New Relic and have a direct <em>billing</em> relationship with New Relic. Signup procedures To learn"
      },
      "id": "60441bcfe7b9d261305799e5"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "da1d767d7bc556d6b1a0b78e73738936607cb7dd",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/mastersub-account-structure/",
      "published_at": "2021-06-08T19:09:12Z",
      "updated_at": "2021-06-08T04:17:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For organizations on our original account/user model, you can create a more complex account structure with master accounts and sub-accounts that inherit master account settings. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user models, see User models. The major differences are: Original account/user model: Our original model uses a master/sub-account structure, where sub-accounts inherit settings from master accounts. Our partnership accounts also use this model. If your organization is on this model, you're able to create your own sub-accounts. If you're on this model, continue reading below to learn how this account structure works. New Relic One account/user model: This is our new, improved model. For more about how accounts work for this model, see Account structure. Master and sub-account hierarchy For organizations on our original account/user model that have a master/sub-account structure, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.65292,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "<em>Set</em> up <em>accounts</em> with SAML SSO",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "For organizations on our original <em>account</em>&#x2F;user model, you can create a more complex <em>account</em> structure with master <em>accounts</em> and sub-<em>accounts</em> that inherit master <em>account</em> <em>settings</em>. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization"
      },
      "id": "60beef5764441fc42dd543d3"
    }
  ],
  "/docs/accounts/accounts/roles-permissions/bulk-user-actions-add-delete-or-update-batches-users": [
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 520.4254,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Users</em>, <em>roles</em>, permissions (<em>original</em> <em>user</em> model)",
        "sections": "<em>Users</em>, <em>roles</em>, permissions (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " than one login, they&#x27;ll see a &quot;multiple <em>accounts</em> found&quot; note when logging in. View and manage <em>users</em> in UI If your New Relic <em>account</em> has <em>users</em> on our <em>original</em> <em>user</em> model, you can use the <em>Users</em> and <em>roles</em> UI. To access this UI: select the <em>account</em> dropdown, select <em>Account</em> settings, and select <em>Users</em>"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Overview of changes to pricing and user model",
        "Pricing plans explained",
        "Determine pricing plan using UI",
        "Convert to new pricing",
        "Account/user model changes explained",
        "Requirements for new account/user model",
        "Determine which user model you're on",
        "Feature impacts of user model",
        "Transition to new models",
        "How pricing and user model relate"
      ],
      "title": "Overview of changes to pricing and user model",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "b19d61b5a0c65ca352e2ce0e260e2b53391b94fc",
      "image": "https://docs.newrelic.com/static/1461470cc1ef0be91120c84d76a7ccdd/c1b63/new-relic-one-pricing-plan-billing-ui.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/overview-changes-pricing-user-model/",
      "published_at": "2021-06-09T02:28:10Z",
      "updated_at": "2021-06-09T02:28:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In 2020, New Relic released both a newer pricing plan and a newer account/user model. If you have a New Relic organization created after July 30, 2020, you're on our newer pricing plan and newer user model. But for older customers, your pricing plan and user model are not necessarily related: for example, you may have switched to our newer pricing plan and still have users on our original user model. Keep reading to learn about: Our original and new pricing plans Our original and new account/user models How to switch to the new models How the pricing plan and the user model relate to each other Pricing plans explained New Relic organizations are on one of two pricing plans: New Relic One pricing: Our new pricing plan is simpler. It bills on which Full Stack Observability edition (Standard, Pro, Enterprise) you're on, the GBs of data ingested, and the count of billable \"full users.\" All organizations created on or after July 30 2020 are on this pricing plan. Some older organizations are able to transition to this pricing. Our original product-based pricing plan: this is based on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer pricing plan: in that case, their users remain on our original user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the account dropdown, and select Manage your plan. If you see billing information about data ingested and the number of billable users, you’re on the new pricing plan. If you're on New Relic One pricing, you'll see a billing UI like this. Convert to new pricing Some customers are able to switch to new pricing. Learn more about switching your pricing plan. Account/user model changes explained In this context, the term \"account/user model\" (or simply \"user model\") refers to the structure of a New Relic user record and how it interacts with the broader New Relic organization that it's in. Our two account/user models are: New Relic One user model: this newer, improved user model has these major differences from the original user model: All your accounts and users are contained under a top-level organization. This gives an organization stronger control over managing users and what they can access. One impact of this is that users who work with multiple New Relic organizations may have an email address associated with multiple logins. Users on this model have a different system for managing permissions and account access. Using access grants, you assign users access to specific roles on specific accounts. Original user model: some aspects of this older model that are different from our newer model: There wasn't as much organization-level control over users. For example, a New Relic user had the ability to access multiple accounts they'd been granted access to using a single login. Users on the original user model have a different user management system. To learn more about benefits of the new model, see our blog post about user model changes. For impacts and limitations, see Feature impacts. Requirements for new account/user model Here's a synopsis of the factors governing what organizations use the new model: All new sign-up accounts after July 202 have users on this model, and also use the new pricing plan. Partner accounts (resellers, managed service providers), and customers using the partnership account structure, cannot yet migrate their users to the new model. Some pre-existing organizations have had their users migrated to the new model by New Relic or by using the user migration procedure. Note that switching to the new pricing plan is independent from migrating your users. Determine which user model you're on To determine what user model you're on, from the account dropdown select User preferences. If you see the UI below, you're on the New Relic One user model. If you see a different UI with more content displayed, you're on the original user model (see original user docs). To determine if you can manage users on the New Relic One user model, see Manage users. The user model is independent of your pricing plan. For how user model relates to pricing, see the Pricing and user model table. Feature impacts of user model The new user model offers many benefits. Here are some feature impacts of being on the New Relic One user model that may be surprising or unintuitive to our existing customers: More separation of organizations/accounts: If you have an email address associated with multiple New Relic accounts, this may mean you need to log out and log back in. Learn more about account access. Adding accounts: Pro and Enterprise edition can have more than one account in their organization. Currently users in these organizations cannot, on their own, add accounts. They must get help from their New Relic account representative. To learn about adding users to accounts, see Manage users. Alert notifications: Users on the new model won’t show up as an option when choosing users to receive alert notifications. The result of this is that these users will not get New Relic mobile app push notifications. As a workaround, you can instead use their email address as the notification channel. Changing account name: These users cannot change the name of their organization after it has been created. Transition to new models Some New Relic customers are able to transition to the new models. To learn more about this, see Transition to new models. How pricing and user model relate As explained in the pricing and user model overview, your pricing plan and user model aren't necessarily related. This table shows how pricing and user model relate to each other: Pricing plan factors Users on original user model Users on New Relic One user model Original pricing If your organization was created before July 30 2020, you remain on our original pricing plan until you transition to New Relic One pricing. See original pricing plan docs. For original pricing accounts, your users are on the original user model, unless they were added via automated user management. See original user docs. For original pricing accounts, users added with automated user management (users imported from your identity provider) are on the New Relic One user model. Upon switching to New Relic One pricing, you'll have new roles available. New Relic One pricing An organization is on the New Relic One pricing plan if it was created on or after July 30 2020 or it's an older organization but has transitioned to New Relic One pricing. See New Relic One pricing docs. If your organization has transitioned to New Relic One pricing, your users are on our original user model (unless they were added via automated user management). These users are now also categorized by user type (full vs basic). See original user docs. If your organization was created on or after July 30 2020, your users are on this user model. See New Relic One user docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.55487,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview of changes to pricing <em>and</em> <em>user</em> model",
        "sections": "<em>Account</em>&#x2F;<em>user</em> model changes explained",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " organizations may have an email address associated with multiple logins. <em>Users</em> on this model have a different system for managing permissions and <em>account</em> access. Using access grants, you assign <em>users</em> access to specific <em>roles</em> on specific <em>accounts</em>. <em>Original</em> <em>user</em> model: some aspects of this older model"
      },
      "id": "603e97fa28ccbcb7c2eba754"
    },
    {
      "sections": [
        "Intro to authentication (SAML SSO) for users on original user model",
        "Overview",
        "Requirements",
        "SSO settings UI page",
        "Providers supported by New Relic",
        "SAML information in New Relic account",
        "New Relic SAML requirements"
      ],
      "title": "Intro to authentication (SAML SSO) for users on original user model ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "80a96fa16d37d34d8f66c5564f2df32b081536ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/saml-service-providers/",
      "published_at": "2021-06-09T01:02:14Z",
      "updated_at": "2021-06-09T01:02:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. These docs are for setting up SSO for users on our original user model. Single Sign On (SSO) allows a computer user to log in to multiple systems via a single portal. If you are a New Relic account Owner setting up SSO integration for your organization, you must obtain a SAML certificate that identifies the SSO login URL (and possibly logout URL) for your organization. The other types of information required for SSO integration will vary depending on the SAML service provider being used. Requirements Requirements include: These docs apply for managing users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Access to this feature requires Pro or Enterprise edition. Owner role required SSO settings UI page To find the New Relic SSO settings page: from the account dropdown, click Account settings, then click Security and authentication, then click Single sign on. If you don't see this UI, review the requirements. Providers supported by New Relic For a list of the SAML service providers that New Relic currently supports for SSO integration: From the New Relic title bar, select (account dropdown) > Account settings > Security and authentication > Single sign on. Providers include: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 SAML information in New Relic account To integrate with an SAML provider, the provider will need information from you about your New Relic account. Most of the information you will need is visible on the New Relic SSO settings UI page: Metadata URL: Contains multiple pieces of information in a single XML message SAML version: 2.0 Assertion consumer URL: The endpoint to New Relic SSO (for example, https://rpm.newrelic.com/accounts/ACCOUNTID/sso/saml/finalize) Consumer binding: Transmission method is HTTP-POST NameID format: Email address Attributes: None required Entity ID: Account URL (default of rpm.newrelic.com) New Relic SAML requirements For SAML providers and service providers like New Relic to be able to work together, their processes must align in certain ways. Here are some aspects of how New Relic implements SSO integration. This will be useful if you are verifying that a specific SAML provider will be able to work with New Relic or if you are troubleshooting implementation problems. SSO considerations New Relic functions and preferences Scope of user credentials (IdP) Should be all users. Type of connection Must be both IdP initiated and SP initiated. Expected SAML profile New Relic uses a POST binding for SP-initiated requests. Expected NameID value format Must be email address. Sensitive info exchanged in SAML assertion? No, only the email address is sent. Session management and logout Does your organization use a redirect URL for logout? If not, New Relic can provide a logout landing page. Plan for users who no longer need access Typically manual deletion by the account Owner or Administrator. Clock synchronization Ensure the SAML identity provider clocks are maintained by NTP.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.63777,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to authentication (SAML SSO) for <em>users</em> on <em>original</em> <em>user</em> model ",
        "sections": "Intro to authentication (SAML SSO) for <em>users</em> on <em>original</em> <em>user</em> model",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. These docs are for setting up SSO for <em>users</em> on our <em>original</em> <em>user</em> model. Single Sign On (SSO) allows a computer <em>user</em> to log in to multiple systems via a single portal. If you are a New Relic <em>account</em>"
      },
      "id": "6043f3c4196a674d5f960f88"
    }
  ],
  "/docs/accounts/accounts/saml-single-sign/add-users-saml-accounts": [
    {
      "sections": [
        "Intro to authentication (SAML SSO) for users on original user model",
        "Overview",
        "Requirements",
        "SSO settings UI page",
        "Providers supported by New Relic",
        "SAML information in New Relic account",
        "New Relic SAML requirements"
      ],
      "title": "Intro to authentication (SAML SSO) for users on original user model ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "80a96fa16d37d34d8f66c5564f2df32b081536ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/saml-service-providers/",
      "published_at": "2021-06-09T01:02:14Z",
      "updated_at": "2021-06-09T01:02:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. These docs are for setting up SSO for users on our original user model. Single Sign On (SSO) allows a computer user to log in to multiple systems via a single portal. If you are a New Relic account Owner setting up SSO integration for your organization, you must obtain a SAML certificate that identifies the SSO login URL (and possibly logout URL) for your organization. The other types of information required for SSO integration will vary depending on the SAML service provider being used. Requirements Requirements include: These docs apply for managing users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Access to this feature requires Pro or Enterprise edition. Owner role required SSO settings UI page To find the New Relic SSO settings page: from the account dropdown, click Account settings, then click Security and authentication, then click Single sign on. If you don't see this UI, review the requirements. Providers supported by New Relic For a list of the SAML service providers that New Relic currently supports for SSO integration: From the New Relic title bar, select (account dropdown) > Account settings > Security and authentication > Single sign on. Providers include: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 SAML information in New Relic account To integrate with an SAML provider, the provider will need information from you about your New Relic account. Most of the information you will need is visible on the New Relic SSO settings UI page: Metadata URL: Contains multiple pieces of information in a single XML message SAML version: 2.0 Assertion consumer URL: The endpoint to New Relic SSO (for example, https://rpm.newrelic.com/accounts/ACCOUNTID/sso/saml/finalize) Consumer binding: Transmission method is HTTP-POST NameID format: Email address Attributes: None required Entity ID: Account URL (default of rpm.newrelic.com) New Relic SAML requirements For SAML providers and service providers like New Relic to be able to work together, their processes must align in certain ways. Here are some aspects of how New Relic implements SSO integration. This will be useful if you are verifying that a specific SAML provider will be able to work with New Relic or if you are troubleshooting implementation problems. SSO considerations New Relic functions and preferences Scope of user credentials (IdP) Should be all users. Type of connection Must be both IdP initiated and SP initiated. Expected SAML profile New Relic uses a POST binding for SP-initiated requests. Expected NameID value format Must be email address. Sensitive info exchanged in SAML assertion? No, only the email address is sent. Session management and logout Does your organization use a redirect URL for logout? If not, New Relic can provide a logout landing page. Plan for users who no longer need access Typically manual deletion by the account Owner or Administrator. Clock synchronization Ensure the SAML identity provider clocks are maintained by NTP.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 521.21875,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model ",
        "sections": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Overview For an overview of our <em>SAML</em> <em>SSO</em> and SCIM docs, first read Introduction to <em>SAML</em> <em>SSO</em> and SCIM. These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. Single Sign On (<em>SSO</em>) allows a computer <em>user</em> to log in to multiple systems via a single portal. If you are a New Relic <em>account</em>"
      },
      "id": "6043f3c4196a674d5f960f88"
    },
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 267.31766,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Users</em>, roles, permissions (<em>original</em> <em>user</em> model)",
        "sections": "<em>Users</em>, roles, permissions (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " than one login, they&#x27;ll see a &quot;multiple <em>accounts</em> found&quot; note when logging in. View and manage <em>users</em> in UI If your New Relic <em>account</em> has <em>users</em> on our <em>original</em> <em>user</em> model, you can use the <em>Users</em> and roles UI. To access this UI: select the <em>account</em> dropdown, select <em>Account</em> settings, and select <em>Users</em>"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Delete the SSO configuration (original user model)",
        "Important",
        "Caution"
      ],
      "title": "Delete the SSO configuration (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "f3e83fa8322e5c639a0163fdec775348030b20be",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/delete-sso-configuration/",
      "published_at": "2021-06-08T17:32:45Z",
      "updated_at": "2021-03-13T05:47:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. For requirements, including which New Relic users this feature applies to, see Requirements. Caution If you delete your SAML SSO integration with New Relic, you cannot restore it. However, you can follow standard procedures to set up your configuration again. To delete your SAML Single Sign On configuration completely: Sign in to New Relic by using your SAML SSO login URL. From the New Relic menu bar, select: account dropdown > Account settings > Security and authentication > Single sign-on. Select Delete SAML Configuration. At the confirmation prompt, select OK.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 249.64679,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Delete the <em>SSO</em> configuration (<em>original</em> <em>user</em> model)",
        "sections": "Delete the <em>SSO</em> configuration (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. For requirements, including which New Relic <em>users</em> this feature applies to, see Requirements. Caution If you delete your <em>SAML</em> <em>SSO</em> integration"
      },
      "id": "6043f605e7b9d22e54579a01"
    }
  ],
  "/docs/accounts/accounts/saml-single-sign/delete-sso-configuration": [
    {
      "sections": [
        "Intro to authentication (SAML SSO) for users on original user model",
        "Overview",
        "Requirements",
        "SSO settings UI page",
        "Providers supported by New Relic",
        "SAML information in New Relic account",
        "New Relic SAML requirements"
      ],
      "title": "Intro to authentication (SAML SSO) for users on original user model ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "80a96fa16d37d34d8f66c5564f2df32b081536ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/saml-service-providers/",
      "published_at": "2021-06-09T01:02:14Z",
      "updated_at": "2021-06-09T01:02:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. These docs are for setting up SSO for users on our original user model. Single Sign On (SSO) allows a computer user to log in to multiple systems via a single portal. If you are a New Relic account Owner setting up SSO integration for your organization, you must obtain a SAML certificate that identifies the SSO login URL (and possibly logout URL) for your organization. The other types of information required for SSO integration will vary depending on the SAML service provider being used. Requirements Requirements include: These docs apply for managing users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Access to this feature requires Pro or Enterprise edition. Owner role required SSO settings UI page To find the New Relic SSO settings page: from the account dropdown, click Account settings, then click Security and authentication, then click Single sign on. If you don't see this UI, review the requirements. Providers supported by New Relic For a list of the SAML service providers that New Relic currently supports for SSO integration: From the New Relic title bar, select (account dropdown) > Account settings > Security and authentication > Single sign on. Providers include: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 SAML information in New Relic account To integrate with an SAML provider, the provider will need information from you about your New Relic account. Most of the information you will need is visible on the New Relic SSO settings UI page: Metadata URL: Contains multiple pieces of information in a single XML message SAML version: 2.0 Assertion consumer URL: The endpoint to New Relic SSO (for example, https://rpm.newrelic.com/accounts/ACCOUNTID/sso/saml/finalize) Consumer binding: Transmission method is HTTP-POST NameID format: Email address Attributes: None required Entity ID: Account URL (default of rpm.newrelic.com) New Relic SAML requirements For SAML providers and service providers like New Relic to be able to work together, their processes must align in certain ways. Here are some aspects of how New Relic implements SSO integration. This will be useful if you are verifying that a specific SAML provider will be able to work with New Relic or if you are troubleshooting implementation problems. SSO considerations New Relic functions and preferences Scope of user credentials (IdP) Should be all users. Type of connection Must be both IdP initiated and SP initiated. Expected SAML profile New Relic uses a POST binding for SP-initiated requests. Expected NameID value format Must be email address. Sensitive info exchanged in SAML assertion? No, only the email address is sent. Session management and logout Does your organization use a redirect URL for logout? If not, New Relic can provide a logout landing page. Plan for users who no longer need access Typically manual deletion by the account Owner or Administrator. Clock synchronization Ensure the SAML identity provider clocks are maintained by NTP.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 521.2183,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model ",
        "sections": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Overview For an overview of our <em>SAML</em> <em>SSO</em> and SCIM docs, first read Introduction to <em>SAML</em> <em>SSO</em> and SCIM. These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. Single Sign On (<em>SSO</em>) allows a computer <em>user</em> to log in to multiple systems via a single portal. If you are a New Relic <em>account</em>"
      },
      "id": "6043f3c4196a674d5f960f88"
    },
    {
      "sections": [
        "Add users to SAML accounts (original user model)",
        "Important",
        "Overview",
        "Requirements",
        "Add and confirm users",
        "Caution",
        "Bypass email confirmation"
      ],
      "title": "Add users to SAML accounts (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "1ab1cb53dc639014a77f74442c2a89c37b021cc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/add-users-saml-accounts/",
      "published_at": "2021-06-08T18:49:13Z",
      "updated_at": "2021-06-08T18:49:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For an overview of SAML and SCIM options, see Introduction to SAML SSO and SCIM. Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. As an additional security measure for SAML single sign-on (SSO) accounts, users are not added until they complete the email confirmation that New Relic sends automatically. Users in the pending state (not yet confirmed) won't receive notifications, such as alerts. For accounts without SAML SSO integration, the account Owner and Admins can add new users without requiring confirmation. Requirements For requirements, including which New Relic users this feature applies to, see Requirements. Add and confirm users Follow this process to add and confirm users for New Relic accounts with SAML SSO: The account's Owner or an Administrator adds new users: Go to: account dropdown > Account settings > Account > Summary. On SAML-enabled accounts, New Relic flags the users as Pending and sends an email confirmation. (Pending users will not receive notifications associated with their user role, such as alert notifications.) Users select the link in the email to confirm their account, which directs them to the SAML provider's login URL. When users successfully sign into their SAML SSO end point (Auth0, Okta, OneLogin, Ping Identity, Salesforce, etc.), New Relic flags the users as Active. Caution If you disable SAML SSO, New Relic automatically flags all of your Pending users as Active. If you decide to re-enable SAML SSO later, New Relic automatically flags all users except the Owner as Pending, and they will need to confirm their account access by email. Admin user's API keys for all users that go into a pending state will be deleted. Bypass email confirmation Depending on your subscription level, you may have the option to claim the domain names that you own and bypass the SAML SSO confirmation process. When the account Owner or Administrators add new users and their email address has a domain that matches the account's domains, New Relic automatically adds them as Active users. Benefits of identifying domain ownership include: Adds a useful feature to your account. Claims domains as your own. Makes it easier for your employees to get started with New Relic, because they do not need to confirm their account access. Maintains security when adding users outside of your organization. To flag your account as owning one or more domain names, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 512.20593,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "sections": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For an overview of <em>SAML</em> and SCIM options, see Introduction to <em>SAML</em> <em>SSO</em> and SCIM. Overview For an overview of our <em>SAML</em> <em>SSO</em> and SCIM docs, first read Introduction to <em>SAML</em> <em>SSO</em> and SCIM. As an additional security measure"
      },
      "id": "6043f342e7b9d20ca55799fa"
    },
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 267.31744,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Users</em>, roles, permissions (<em>original</em> <em>user</em> model)",
        "sections": "<em>Users</em>, roles, permissions (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " than one login, they&#x27;ll see a &quot;multiple <em>accounts</em> found&quot; note when logging in. View and manage <em>users</em> in UI If your New Relic <em>account</em> has <em>users</em> on our <em>original</em> <em>user</em> model, you can use the <em>Users</em> and roles UI. To access this UI: select the <em>account</em> dropdown, select <em>Account</em> settings, and select <em>Users</em>"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    }
  ],
  "/docs/accounts/accounts/saml-single-sign/maintain-sso-settings": [
    {
      "sections": [
        "Intro to authentication (SAML SSO) for users on original user model",
        "Overview",
        "Requirements",
        "SSO settings UI page",
        "Providers supported by New Relic",
        "SAML information in New Relic account",
        "New Relic SAML requirements"
      ],
      "title": "Intro to authentication (SAML SSO) for users on original user model ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "80a96fa16d37d34d8f66c5564f2df32b081536ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/saml-service-providers/",
      "published_at": "2021-06-09T01:02:14Z",
      "updated_at": "2021-06-09T01:02:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. These docs are for setting up SSO for users on our original user model. Single Sign On (SSO) allows a computer user to log in to multiple systems via a single portal. If you are a New Relic account Owner setting up SSO integration for your organization, you must obtain a SAML certificate that identifies the SSO login URL (and possibly logout URL) for your organization. The other types of information required for SSO integration will vary depending on the SAML service provider being used. Requirements Requirements include: These docs apply for managing users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Access to this feature requires Pro or Enterprise edition. Owner role required SSO settings UI page To find the New Relic SSO settings page: from the account dropdown, click Account settings, then click Security and authentication, then click Single sign on. If you don't see this UI, review the requirements. Providers supported by New Relic For a list of the SAML service providers that New Relic currently supports for SSO integration: From the New Relic title bar, select (account dropdown) > Account settings > Security and authentication > Single sign on. Providers include: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 SAML information in New Relic account To integrate with an SAML provider, the provider will need information from you about your New Relic account. Most of the information you will need is visible on the New Relic SSO settings UI page: Metadata URL: Contains multiple pieces of information in a single XML message SAML version: 2.0 Assertion consumer URL: The endpoint to New Relic SSO (for example, https://rpm.newrelic.com/accounts/ACCOUNTID/sso/saml/finalize) Consumer binding: Transmission method is HTTP-POST NameID format: Email address Attributes: None required Entity ID: Account URL (default of rpm.newrelic.com) New Relic SAML requirements For SAML providers and service providers like New Relic to be able to work together, their processes must align in certain ways. Here are some aspects of how New Relic implements SSO integration. This will be useful if you are verifying that a specific SAML provider will be able to work with New Relic or if you are troubleshooting implementation problems. SSO considerations New Relic functions and preferences Scope of user credentials (IdP) Should be all users. Type of connection Must be both IdP initiated and SP initiated. Expected SAML profile New Relic uses a POST binding for SP-initiated requests. Expected NameID value format Must be email address. Sensitive info exchanged in SAML assertion? No, only the email address is sent. Session management and logout Does your organization use a redirect URL for logout? If not, New Relic can provide a logout landing page. Plan for users who no longer need access Typically manual deletion by the account Owner or Administrator. Clock synchronization Ensure the SAML identity provider clocks are maintained by NTP.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 521.2183,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model ",
        "sections": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Overview For an overview of our <em>SAML</em> <em>SSO</em> and SCIM docs, first read Introduction to <em>SAML</em> <em>SSO</em> and SCIM. These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. Single Sign On (<em>SSO</em>) allows a computer <em>user</em> to log in to multiple systems via a single portal. If you are a New Relic <em>account</em>"
      },
      "id": "6043f3c4196a674d5f960f88"
    },
    {
      "sections": [
        "Add users to SAML accounts (original user model)",
        "Important",
        "Overview",
        "Requirements",
        "Add and confirm users",
        "Caution",
        "Bypass email confirmation"
      ],
      "title": "Add users to SAML accounts (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "1ab1cb53dc639014a77f74442c2a89c37b021cc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/add-users-saml-accounts/",
      "published_at": "2021-06-08T18:49:13Z",
      "updated_at": "2021-06-08T18:49:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For an overview of SAML and SCIM options, see Introduction to SAML SSO and SCIM. Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. As an additional security measure for SAML single sign-on (SSO) accounts, users are not added until they complete the email confirmation that New Relic sends automatically. Users in the pending state (not yet confirmed) won't receive notifications, such as alerts. For accounts without SAML SSO integration, the account Owner and Admins can add new users without requiring confirmation. Requirements For requirements, including which New Relic users this feature applies to, see Requirements. Add and confirm users Follow this process to add and confirm users for New Relic accounts with SAML SSO: The account's Owner or an Administrator adds new users: Go to: account dropdown > Account settings > Account > Summary. On SAML-enabled accounts, New Relic flags the users as Pending and sends an email confirmation. (Pending users will not receive notifications associated with their user role, such as alert notifications.) Users select the link in the email to confirm their account, which directs them to the SAML provider's login URL. When users successfully sign into their SAML SSO end point (Auth0, Okta, OneLogin, Ping Identity, Salesforce, etc.), New Relic flags the users as Active. Caution If you disable SAML SSO, New Relic automatically flags all of your Pending users as Active. If you decide to re-enable SAML SSO later, New Relic automatically flags all users except the Owner as Pending, and they will need to confirm their account access by email. Admin user's API keys for all users that go into a pending state will be deleted. Bypass email confirmation Depending on your subscription level, you may have the option to claim the domain names that you own and bypass the SAML SSO confirmation process. When the account Owner or Administrators add new users and their email address has a domain that matches the account's domains, New Relic automatically adds them as Active users. Benefits of identifying domain ownership include: Adds a useful feature to your account. Claims domains as your own. Makes it easier for your employees to get started with New Relic, because they do not need to confirm their account access. Maintains security when adding users outside of your organization. To flag your account as owning one or more domain names, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 512.20593,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "sections": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For an overview of <em>SAML</em> and SCIM options, see Introduction to <em>SAML</em> <em>SSO</em> and SCIM. Overview For an overview of our <em>SAML</em> <em>SSO</em> and SCIM docs, first read Introduction to <em>SAML</em> <em>SSO</em> and SCIM. As an additional security measure"
      },
      "id": "6043f342e7b9d20ca55799fa"
    },
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 267.31744,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Users</em>, roles, permissions (<em>original</em> <em>user</em> model)",
        "sections": "<em>Users</em>, roles, permissions (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " than one login, they&#x27;ll see a &quot;multiple <em>accounts</em> found&quot; note when logging in. View and manage <em>users</em> in UI If your New Relic <em>account</em> has <em>users</em> on our <em>original</em> <em>user</em> model, you can use the <em>Users</em> and roles UI. To access this UI: select the <em>account</em> dropdown, select <em>Account</em> settings, and select <em>Users</em>"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    }
  ],
  "/docs/accounts/accounts/saml-single-sign/new-relic-partners-saml-sso": [
    {
      "sections": [
        "Intro to authentication (SAML SSO) for users on original user model",
        "Overview",
        "Requirements",
        "SSO settings UI page",
        "Providers supported by New Relic",
        "SAML information in New Relic account",
        "New Relic SAML requirements"
      ],
      "title": "Intro to authentication (SAML SSO) for users on original user model ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "80a96fa16d37d34d8f66c5564f2df32b081536ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/saml-service-providers/",
      "published_at": "2021-06-09T01:02:14Z",
      "updated_at": "2021-06-09T01:02:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. These docs are for setting up SSO for users on our original user model. Single Sign On (SSO) allows a computer user to log in to multiple systems via a single portal. If you are a New Relic account Owner setting up SSO integration for your organization, you must obtain a SAML certificate that identifies the SSO login URL (and possibly logout URL) for your organization. The other types of information required for SSO integration will vary depending on the SAML service provider being used. Requirements Requirements include: These docs apply for managing users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Access to this feature requires Pro or Enterprise edition. Owner role required SSO settings UI page To find the New Relic SSO settings page: from the account dropdown, click Account settings, then click Security and authentication, then click Single sign on. If you don't see this UI, review the requirements. Providers supported by New Relic For a list of the SAML service providers that New Relic currently supports for SSO integration: From the New Relic title bar, select (account dropdown) > Account settings > Security and authentication > Single sign on. Providers include: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 SAML information in New Relic account To integrate with an SAML provider, the provider will need information from you about your New Relic account. Most of the information you will need is visible on the New Relic SSO settings UI page: Metadata URL: Contains multiple pieces of information in a single XML message SAML version: 2.0 Assertion consumer URL: The endpoint to New Relic SSO (for example, https://rpm.newrelic.com/accounts/ACCOUNTID/sso/saml/finalize) Consumer binding: Transmission method is HTTP-POST NameID format: Email address Attributes: None required Entity ID: Account URL (default of rpm.newrelic.com) New Relic SAML requirements For SAML providers and service providers like New Relic to be able to work together, their processes must align in certain ways. Here are some aspects of how New Relic implements SSO integration. This will be useful if you are verifying that a specific SAML provider will be able to work with New Relic or if you are troubleshooting implementation problems. SSO considerations New Relic functions and preferences Scope of user credentials (IdP) Should be all users. Type of connection Must be both IdP initiated and SP initiated. Expected SAML profile New Relic uses a POST binding for SP-initiated requests. Expected NameID value format Must be email address. Sensitive info exchanged in SAML assertion? No, only the email address is sent. Session management and logout Does your organization use a redirect URL for logout? If not, New Relic can provide a logout landing page. Plan for users who no longer need access Typically manual deletion by the account Owner or Administrator. Clock synchronization Ensure the SAML identity provider clocks are maintained by NTP.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 521.2183,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model ",
        "sections": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Overview For an overview of our <em>SAML</em> <em>SSO</em> and SCIM docs, first read Introduction to <em>SAML</em> <em>SSO</em> and SCIM. These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. Single Sign On (<em>SSO</em>) allows a computer <em>user</em> to log in to multiple systems via a single portal. If you are a New Relic <em>account</em>"
      },
      "id": "6043f3c4196a674d5f960f88"
    },
    {
      "sections": [
        "Add users to SAML accounts (original user model)",
        "Important",
        "Overview",
        "Requirements",
        "Add and confirm users",
        "Caution",
        "Bypass email confirmation"
      ],
      "title": "Add users to SAML accounts (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "1ab1cb53dc639014a77f74442c2a89c37b021cc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/add-users-saml-accounts/",
      "published_at": "2021-06-08T18:49:13Z",
      "updated_at": "2021-06-08T18:49:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For an overview of SAML and SCIM options, see Introduction to SAML SSO and SCIM. Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. As an additional security measure for SAML single sign-on (SSO) accounts, users are not added until they complete the email confirmation that New Relic sends automatically. Users in the pending state (not yet confirmed) won't receive notifications, such as alerts. For accounts without SAML SSO integration, the account Owner and Admins can add new users without requiring confirmation. Requirements For requirements, including which New Relic users this feature applies to, see Requirements. Add and confirm users Follow this process to add and confirm users for New Relic accounts with SAML SSO: The account's Owner or an Administrator adds new users: Go to: account dropdown > Account settings > Account > Summary. On SAML-enabled accounts, New Relic flags the users as Pending and sends an email confirmation. (Pending users will not receive notifications associated with their user role, such as alert notifications.) Users select the link in the email to confirm their account, which directs them to the SAML provider's login URL. When users successfully sign into their SAML SSO end point (Auth0, Okta, OneLogin, Ping Identity, Salesforce, etc.), New Relic flags the users as Active. Caution If you disable SAML SSO, New Relic automatically flags all of your Pending users as Active. If you decide to re-enable SAML SSO later, New Relic automatically flags all users except the Owner as Pending, and they will need to confirm their account access by email. Admin user's API keys for all users that go into a pending state will be deleted. Bypass email confirmation Depending on your subscription level, you may have the option to claim the domain names that you own and bypass the SAML SSO confirmation process. When the account Owner or Administrators add new users and their email address has a domain that matches the account's domains, New Relic automatically adds them as Active users. Benefits of identifying domain ownership include: Adds a useful feature to your account. Claims domains as your own. Makes it easier for your employees to get started with New Relic, because they do not need to confirm their account access. Maintains security when adding users outside of your organization. To flag your account as owning one or more domain names, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 512.20593,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "sections": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For an overview of <em>SAML</em> and SCIM options, see Introduction to <em>SAML</em> <em>SSO</em> and SCIM. Overview For an overview of our <em>SAML</em> <em>SSO</em> and SCIM docs, first read Introduction to <em>SAML</em> <em>SSO</em> and SCIM. As an additional security measure"
      },
      "id": "6043f342e7b9d20ca55799fa"
    },
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 267.31744,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Users</em>, roles, permissions (<em>original</em> <em>user</em> model)",
        "sections": "<em>Users</em>, roles, permissions (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " than one login, they&#x27;ll see a &quot;multiple <em>accounts</em> found&quot; note when logging in. View and manage <em>users</em> in UI If your New Relic <em>account</em> has <em>users</em> on our <em>original</em> <em>user</em> model, you can use the <em>Users</em> and roles UI. To access this UI: select the <em>account</em> dropdown, select <em>Account</em> settings, and select <em>Users</em>"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    }
  ],
  "/docs/accounts/accounts/saml-single-sign/saml-service-providers": [
    {
      "sections": [
        "Add users to SAML accounts (original user model)",
        "Important",
        "Overview",
        "Requirements",
        "Add and confirm users",
        "Caution",
        "Bypass email confirmation"
      ],
      "title": "Add users to SAML accounts (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "1ab1cb53dc639014a77f74442c2a89c37b021cc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/add-users-saml-accounts/",
      "published_at": "2021-06-08T18:49:13Z",
      "updated_at": "2021-06-08T18:49:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For an overview of SAML and SCIM options, see Introduction to SAML SSO and SCIM. Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. As an additional security measure for SAML single sign-on (SSO) accounts, users are not added until they complete the email confirmation that New Relic sends automatically. Users in the pending state (not yet confirmed) won't receive notifications, such as alerts. For accounts without SAML SSO integration, the account Owner and Admins can add new users without requiring confirmation. Requirements For requirements, including which New Relic users this feature applies to, see Requirements. Add and confirm users Follow this process to add and confirm users for New Relic accounts with SAML SSO: The account's Owner or an Administrator adds new users: Go to: account dropdown > Account settings > Account > Summary. On SAML-enabled accounts, New Relic flags the users as Pending and sends an email confirmation. (Pending users will not receive notifications associated with their user role, such as alert notifications.) Users select the link in the email to confirm their account, which directs them to the SAML provider's login URL. When users successfully sign into their SAML SSO end point (Auth0, Okta, OneLogin, Ping Identity, Salesforce, etc.), New Relic flags the users as Active. Caution If you disable SAML SSO, New Relic automatically flags all of your Pending users as Active. If you decide to re-enable SAML SSO later, New Relic automatically flags all users except the Owner as Pending, and they will need to confirm their account access by email. Admin user's API keys for all users that go into a pending state will be deleted. Bypass email confirmation Depending on your subscription level, you may have the option to claim the domain names that you own and bypass the SAML SSO confirmation process. When the account Owner or Administrators add new users and their email address has a domain that matches the account's domains, New Relic automatically adds them as Active users. Benefits of identifying domain ownership include: Adds a useful feature to your account. Claims domains as your own. Makes it easier for your employees to get started with New Relic, because they do not need to confirm their account access. Maintains security when adding users outside of your organization. To flag your account as owning one or more domain names, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 512.20557,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "sections": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For an overview of <em>SAML</em> and SCIM options, see Introduction to <em>SAML</em> <em>SSO</em> and SCIM. Overview For an overview of our <em>SAML</em> <em>SSO</em> and SCIM docs, first read Introduction to <em>SAML</em> <em>SSO</em> and SCIM. As an additional security measure"
      },
      "id": "6043f342e7b9d20ca55799fa"
    },
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 267.31723,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Users</em>, roles, permissions (<em>original</em> <em>user</em> model)",
        "sections": "<em>Users</em>, roles, permissions (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " than one login, they&#x27;ll see a &quot;multiple <em>accounts</em> found&quot; note when logging in. View and manage <em>users</em> in UI If your New Relic <em>account</em> has <em>users</em> on our <em>original</em> <em>user</em> model, you can use the <em>Users</em> and roles UI. To access this UI: select the <em>account</em> dropdown, select <em>Account</em> settings, and select <em>Users</em>"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Delete the SSO configuration (original user model)",
        "Important",
        "Caution"
      ],
      "title": "Delete the SSO configuration (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "f3e83fa8322e5c639a0163fdec775348030b20be",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/delete-sso-configuration/",
      "published_at": "2021-06-08T17:32:45Z",
      "updated_at": "2021-03-13T05:47:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. For requirements, including which New Relic users this feature applies to, see Requirements. Caution If you delete your SAML SSO integration with New Relic, you cannot restore it. However, you can follow standard procedures to set up your configuration again. To delete your SAML Single Sign On configuration completely: Sign in to New Relic by using your SAML SSO login URL. From the New Relic menu bar, select: account dropdown > Account settings > Security and authentication > Single sign-on. Select Delete SAML Configuration. At the confirmation prompt, select OK.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 249.64677,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Delete the <em>SSO</em> configuration (<em>original</em> <em>user</em> model)",
        "sections": "Delete the <em>SSO</em> configuration (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. For requirements, including which New Relic <em>users</em> this feature applies to, see Requirements. Caution If you delete your <em>SAML</em> <em>SSO</em> integration"
      },
      "id": "6043f605e7b9d22e54579a01"
    }
  ],
  "/docs/accounts/accounts/saml-single-sign/set-sso": [
    {
      "sections": [
        "Intro to authentication (SAML SSO) for users on original user model",
        "Overview",
        "Requirements",
        "SSO settings UI page",
        "Providers supported by New Relic",
        "SAML information in New Relic account",
        "New Relic SAML requirements"
      ],
      "title": "Intro to authentication (SAML SSO) for users on original user model ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "80a96fa16d37d34d8f66c5564f2df32b081536ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/saml-service-providers/",
      "published_at": "2021-06-09T01:02:14Z",
      "updated_at": "2021-06-09T01:02:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. These docs are for setting up SSO for users on our original user model. Single Sign On (SSO) allows a computer user to log in to multiple systems via a single portal. If you are a New Relic account Owner setting up SSO integration for your organization, you must obtain a SAML certificate that identifies the SSO login URL (and possibly logout URL) for your organization. The other types of information required for SSO integration will vary depending on the SAML service provider being used. Requirements Requirements include: These docs apply for managing users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Access to this feature requires Pro or Enterprise edition. Owner role required SSO settings UI page To find the New Relic SSO settings page: from the account dropdown, click Account settings, then click Security and authentication, then click Single sign on. If you don't see this UI, review the requirements. Providers supported by New Relic For a list of the SAML service providers that New Relic currently supports for SSO integration: From the New Relic title bar, select (account dropdown) > Account settings > Security and authentication > Single sign on. Providers include: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 SAML information in New Relic account To integrate with an SAML provider, the provider will need information from you about your New Relic account. Most of the information you will need is visible on the New Relic SSO settings UI page: Metadata URL: Contains multiple pieces of information in a single XML message SAML version: 2.0 Assertion consumer URL: The endpoint to New Relic SSO (for example, https://rpm.newrelic.com/accounts/ACCOUNTID/sso/saml/finalize) Consumer binding: Transmission method is HTTP-POST NameID format: Email address Attributes: None required Entity ID: Account URL (default of rpm.newrelic.com) New Relic SAML requirements For SAML providers and service providers like New Relic to be able to work together, their processes must align in certain ways. Here are some aspects of how New Relic implements SSO integration. This will be useful if you are verifying that a specific SAML provider will be able to work with New Relic or if you are troubleshooting implementation problems. SSO considerations New Relic functions and preferences Scope of user credentials (IdP) Should be all users. Type of connection Must be both IdP initiated and SP initiated. Expected SAML profile New Relic uses a POST binding for SP-initiated requests. Expected NameID value format Must be email address. Sensitive info exchanged in SAML assertion? No, only the email address is sent. Session management and logout Does your organization use a redirect URL for logout? If not, New Relic can provide a logout landing page. Plan for users who no longer need access Typically manual deletion by the account Owner or Administrator. Clock synchronization Ensure the SAML identity provider clocks are maintained by NTP.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 521.2179,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model ",
        "sections": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Overview For an overview of our <em>SAML</em> <em>SSO</em> and SCIM docs, first read Introduction to <em>SAML</em> <em>SSO</em> and SCIM. These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. Single Sign On (<em>SSO</em>) allows a computer <em>user</em> to log in to multiple systems via a single portal. If you are a New Relic <em>account</em>"
      },
      "id": "6043f3c4196a674d5f960f88"
    },
    {
      "sections": [
        "Add users to SAML accounts (original user model)",
        "Important",
        "Overview",
        "Requirements",
        "Add and confirm users",
        "Caution",
        "Bypass email confirmation"
      ],
      "title": "Add users to SAML accounts (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "1ab1cb53dc639014a77f74442c2a89c37b021cc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/add-users-saml-accounts/",
      "published_at": "2021-06-08T18:49:13Z",
      "updated_at": "2021-06-08T18:49:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For an overview of SAML and SCIM options, see Introduction to SAML SSO and SCIM. Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. As an additional security measure for SAML single sign-on (SSO) accounts, users are not added until they complete the email confirmation that New Relic sends automatically. Users in the pending state (not yet confirmed) won't receive notifications, such as alerts. For accounts without SAML SSO integration, the account Owner and Admins can add new users without requiring confirmation. Requirements For requirements, including which New Relic users this feature applies to, see Requirements. Add and confirm users Follow this process to add and confirm users for New Relic accounts with SAML SSO: The account's Owner or an Administrator adds new users: Go to: account dropdown > Account settings > Account > Summary. On SAML-enabled accounts, New Relic flags the users as Pending and sends an email confirmation. (Pending users will not receive notifications associated with their user role, such as alert notifications.) Users select the link in the email to confirm their account, which directs them to the SAML provider's login URL. When users successfully sign into their SAML SSO end point (Auth0, Okta, OneLogin, Ping Identity, Salesforce, etc.), New Relic flags the users as Active. Caution If you disable SAML SSO, New Relic automatically flags all of your Pending users as Active. If you decide to re-enable SAML SSO later, New Relic automatically flags all users except the Owner as Pending, and they will need to confirm their account access by email. Admin user's API keys for all users that go into a pending state will be deleted. Bypass email confirmation Depending on your subscription level, you may have the option to claim the domain names that you own and bypass the SAML SSO confirmation process. When the account Owner or Administrators add new users and their email address has a domain that matches the account's domains, New Relic automatically adds them as Active users. Benefits of identifying domain ownership include: Adds a useful feature to your account. Claims domains as your own. Makes it easier for your employees to get started with New Relic, because they do not need to confirm their account access. Maintains security when adding users outside of your organization. To flag your account as owning one or more domain names, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 512.20557,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "sections": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For an overview of <em>SAML</em> and SCIM options, see Introduction to <em>SAML</em> <em>SSO</em> and SCIM. Overview For an overview of our <em>SAML</em> <em>SSO</em> and SCIM docs, first read Introduction to <em>SAML</em> <em>SSO</em> and SCIM. As an additional security measure"
      },
      "id": "6043f342e7b9d20ca55799fa"
    },
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 267.31723,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Users</em>, roles, permissions (<em>original</em> <em>user</em> model)",
        "sections": "<em>Users</em>, roles, permissions (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " than one login, they&#x27;ll see a &quot;multiple <em>accounts</em> found&quot; note when logging in. View and manage <em>users</em> in UI If your New Relic <em>account</em> has <em>users</em> on our <em>original</em> <em>user</em> model, you can use the <em>Users</em> and roles UI. To access this UI: select the <em>account</em> dropdown, select <em>Account</em> settings, and select <em>Users</em>"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    }
  ],
  "/docs/accounts/accounts/subscription-pricing/eligibility-guidelines-new-relic-nonprofit-program": [
    {
      "sections": [
        "Introduction to account settings",
        "Pricing and billing settings",
        "New Relic One pricing UI",
        "Original pricing UI",
        "Manage users",
        "New Relic One user model",
        "Original user model",
        "Add accounts",
        "General account settings"
      ],
      "title": "Introduction to account settings",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "1dbac104fa7e60637c32a61a80b8b709f6fd84c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings/",
      "published_at": "2021-06-08T20:19:00Z",
      "updated_at": "2021-06-08T20:19:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view and edit account-related settings, go to one.newrelic.com and in the top right corner, select the account dropdown. Keep reading for tips on how to find different kinds of account settings in the UI. Pricing and billing settings To view and edit some billing-related settings, you must be a full user. Basic users have some restrictions. How you access billing-related UI depends on which pricing plan your New Relic account is on: New Relic One pricing UI View and manage billing information based on your user model: New Relic One user model: click the account dropdown, click Administration, and click Plan and usage. From there, you can view your usage data, and view and edit billing information. The ability to manage billing requires the Billing user role, which is included in the default Admin group. Original user model: click the account dropdown and click Account settings. Note that if you're in an organization that has a master/sub-account structure and you're in a sub-account, usage data may only display usage from that account and not the broader organization. Billing management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see Pricing. Original pricing UI If your account is on the original pricing plan, to view and edit billing details: Click the account dropdown, and click Account settings. On the right, there are details about your subscription. For more about your subscription, click Subscription. To view and edit billing details, click Billing. To learn more about original pricing, see Pricing. Manage users How you manage users depends on which user model your users are on: New Relic One user model For managing users on the New Relic One user model, see Manage users. Original user model To manage users on the original user model: from the account dropdown, click Account settings and then click Users and roles. For more on managing these users, see Original users. Add accounts How you add accounts depends on which user model you're on. This is because the user model has impacts on account structure and management. Learn more about adding accounts. General account settings For how to edit things like user preferences and email settings, see the various account settings docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 428.31354,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>account</em> <em>settings</em>",
        "sections": "<em>General</em> <em>account</em> <em>settings</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " and management. Learn more about adding <em>accounts</em>. <em>General</em> <em>account</em> <em>settings</em> For how to edit things like user preferences and email <em>settings</em>, see the various <em>account</em> <em>settings</em> docs."
      },
      "id": "6043f38a196a679ae4960f5e"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "da1d767d7bc556d6b1a0b78e73738936607cb7dd",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/mastersub-account-structure/",
      "published_at": "2021-06-08T19:09:12Z",
      "updated_at": "2021-06-08T04:17:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For organizations on our original account/user model, you can create a more complex account structure with master accounts and sub-accounts that inherit master account settings. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user models, see User models. The major differences are: Original account/user model: Our original model uses a master/sub-account structure, where sub-accounts inherit settings from master accounts. Our partnership accounts also use this model. If your organization is on this model, you're able to create your own sub-accounts. If you're on this model, continue reading below to learn how this account structure works. New Relic One account/user model: This is our new, improved model. For more about how accounts work for this model, see Account structure. Master and sub-account hierarchy For organizations on our original account/user model that have a master/sub-account structure, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.65234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "<em>Set</em> up <em>accounts</em> with SAML SSO",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "For organizations on our original <em>account</em>&#x2F;user model, you can create a more complex <em>account</em> structure with master <em>accounts</em> and sub-<em>accounts</em> that inherit master <em>account</em> <em>settings</em>. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization"
      },
      "id": "60beef5764441fc42dd543d3"
    },
    {
      "sections": [
        "Factors affecting access to features and data",
        "User permissions",
        "Account access",
        "Pricing plan or edition",
        "The entities being monitored",
        "Data retention"
      ],
      "title": "Factors affecting access to features and data",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "98bf366604050b491ee35c8422414c70bda452b4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/factors-affecting-access-features-data/",
      "published_at": "2021-06-09T01:22:01Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There are several factors that can affect your access to a New Relic feature, or New Relic data. User permissions User-related settings can impact what features or data you have access to. Potential impacts include: Your user type (basic user or full user). Your assigned roles. How your user roles and permissions work depends on which user model you're on. Account access If you're logged in to New Relic and don't see the account or data you expect to see, some causes and solutions include: If your organization has multiple accounts, there's an account switcher at the top left of most New Relic UI pages. Check to see if you can use that to switch accounts. You may have more than one login associated with the same email address. If you think this may be the case, log out and log back in. When you input your email address, the login UI tells you if you have multiple logins and gives you an option for seeing all accounts associated with that email. If you're having trouble accessing an older account, see this Explorers Hub post about multiple account access. It's possible an admin user in your organization changed your permissions for an account. Related docs: Account structure Login and password troubleshooting Delete accounts Pricing plan or edition We have two pricing plans available, and this can impact feature availability. Pricing plans: Our original product-based pricing plan: This plan separates our offerings by product. If you’re on this plan, access to some features may depend on the products you pay for. Our New Relic One pricing plan: This newer pricing plan gives more cross-platform access. The main factors affecting access are your edition and your user type. We also have several Full Stack Observability pricing editions: Standard, Pro, and Enterprise. Learn more about our pricing plans. The entities being monitored Some of our solutions enable functionality that isn’t available to all users, like: Additional UI components, and Data available for querying For example, enabling distributed tracing results in you seeing trace data in the UI and in having trace data available for querying. If you are missing data that you expect to see, see Missing data. Data retention Different types of New Relic data have different data retention periods. Once data has passed a given data retention point, it may be deleted or be aggregated for longer term storage. For details, see Data retention.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.29285,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Factors affecting access to features <em>and</em> data",
        "sections": "<em>Account</em> access",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " and permissions work depends on which user model you&#x27;re on. <em>Account</em> access If you&#x27;re logged in to New Relic and don&#x27;t see the <em>account</em> or data you expect to see, some causes and solutions include: If your organization has multiple <em>accounts</em>, there&#x27;s an <em>account</em> switcher at the top left of most New"
      },
      "id": "60bee5c064441f0505d543bb"
    }
  ],
  "/docs/accounts/accounts-billing/account-setup/account-id": [
    {
      "sections": [
        "Troubleshoot password, email address, and login issues",
        "Tip",
        "Account access issues",
        "Password solutions",
        "Forgot your password, or your password does not work.",
        "Important",
        "Reset password.",
        "Password error messages.",
        "Password reset link expired.",
        "Added existing user to another New Relic account.",
        "Email solutions",
        "Did not receive new account confirmation email.",
        "Email address does not work or email error messages.",
        "Received message that your email account already exists.",
        "Email link does not redirect to the password reset page.",
        "Asked to verify email during login.",
        "General system solutions",
        "Delete an account you recently created.",
        "SAML single sign-on (SSO) problems prevent login.",
        "System failure errors prevent login.",
        "Mobile device solutions",
        "Solutions for other situations",
        "Unable to log in from your New Relic partner account."
      ],
      "title": "Troubleshoot password, email address, and login issues",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "fc93486097659dacf04d90cfc6b435cc6791ce6d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/troubleshoot-new-relics-password-email-address-login-problems/",
      "published_at": "2021-06-08T17:33:49Z",
      "updated_at": "2021-05-28T12:03:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have problems with your email address or password when logging in to New Relic, review these troubleshooting tips. Tip To learn about factors affecting access to features and data, see Factors affecting access. Account access issues If you're logged into New Relic but don't see the accounts or data you expect, see Factors affecting access. Password solutions New Relic requires a valid email address and a valid password in order for you to log in and to receive information from New Relic. If you are unable to create your account successfully, or if you have password or other login problems, review these troubleshooting suggestions to try to identify a resolution. Forgot your password, or your password does not work. If you have forgotten your New Relic account password, or if your password does not work, request a password reset from New Relic. If you have access to multiple New Relic logins, also ensure you are using the correct password for the login method you're using Go to New Relic's login page. Select Forgot your password. Type your account email address, and select Send my reset link. When you receive a confirmation email from New Relic, select the password reset link, and follow New Relic's password requirements to complete the process to reset your password. Important The password reset link expires after 12 hours. If you do not quickly receive an email from New Relic, check your spam filters, contact your organization's email administrator for troubleshooting suggestions, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Reset password. If you forgot your own password or need to request a password reset for your account email, you can use New Relic's self-service options. Admin-level users cannot reset passwords for other users. If you need to reset someone else's password, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Password error messages. If you complete the signup process and are unable to log in to your account due to password error messages, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Password reset link expired. If you want to change your password but you see a message that the password reset link expired, try using a private browser or clearing your browser cache and cookies. Important The password reset link expires after 12 hours. If you do not quickly receive an email from New Relic after you select the reset link, check your spam filters, contact your organization's email administrator for troubleshooting suggestions, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Added existing user to another New Relic account. If you're an existing New Relic account user and you have been added to another account, you don't need to create a new password. Your existing password will work for each account, and you can switch between accounts after logging in. Email solutions New Relic requires a valid email address and a valid password in order for you to log in and to receive information from New Relic. If you're unable to create your account successfully, or if you have email or other login problems, review these troubleshooting suggestions to try to identify a resolution. Did not receive new account confirmation email. When you first create your account, New Relic sends a confirmation email so you can complete the setup process and sign in. If you cannot locate your original account confirmation email: Go to New Relic's login page at login.newrelic.com/login. Select Forgot your password. Type your account email address, and select Send my password. When New Relic's system returns an email message, select the link in it to confirm your account again. If you don't receive an email from New Relic: Check your spam filters. If applicable, add New Relic to your email allow list. Get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Email address does not work or email error messages. If you complete the signup process and are unable to log in to your account due to email or password error messages, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Received message that your email account already exists. If you are trying to create a new account and receive a message that your email account already exists, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Email link does not redirect to the password reset page. If you have used your password reset link but are not redirected to the password reset page, troubleshoot the following: Your password reset link has expired. You will need to request a new link from the New Relic website. You are experiencing a caching issue. Clear your browsing cache or use a private browsing window before trying the link again. Tip Private browsing, also known as incognito mode, is a privacy feature to disable browsing history and the web cache. To open a private browsing window, you can use the keyboard shortcut CTRL+Shift+N on Windows and Command+Shift+N on Mac for most browsing applications. If this still doesn't solve your problem, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Asked to verify email during login. If your email is associated with multiple accounts, you will be given the option to verify your email during login. This will allow you to choose which account to access. If you do not verify your email address, New Relic will attempt to log you in with the most recently created user record associated with your email address. To avoid verifying your email during each login, click the Remember Me checkbox in the login screen. General system solutions Some general system problems and solutions: Delete an account you recently created. If you created a New Relic account unnecessarily and want to delete it, and if that account is a simple one, you may be able to delete it yourself. See Delete simple organization. SAML single sign-on (SSO) problems prevent login. If your organization uses a SAML Single Sign On (SSO) solution, you can skip the Password field when you log in. If you need to reset your password, contact your organization's system administrator or IT department as applicable. If you're an administrator who has recently enabled or made changes to your SAML SSO settings and are unable to log in, there might be an issue with your configuration. Customers on the New Relic One user model can use a special recovery flow to fix any issues. Visit login.newrelic.com/recovery_access to bypass SSO and gain one-time access to your organization. System failure errors prevent login. If you receive failure errors while trying to sign up, a third-party password manager may be triggering New Relic's spam trap. To work around this, try these solutions: Bypass your password manager. Use a different browser to sign up with New Relic. Get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Mobile device solutions If you are unable to log in from your mobile device, the new user authentication time frame may have expired. You must complete this process within 20 minutes of receiving New Relic's confirmation message for your mobile device. To solve this problem, request another confirmation message to be sent to your device. Also, depending on your New Relic account, additional installation or authentication steps may be required for your iOS or Android app account. Solutions for other situations Here are suggestions for other unique situations. Unable to log in from your New Relic partner account. With partner accounts, SAML SSO authentication to sign in to New Relic is controlled by the partnership. Depending on the partnership, you may or may not be able to log in directly to New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 247.5015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Troubleshoot password, email address, <em>and</em> login issues",
        "sections": "<em>Account</em> access issues",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "If you have problems with your email address or password when logging in to New Relic, review these troubleshooting tips. Tip To learn about factors affecting access to features and data, see Factors affecting access. <em>Account</em> access issues If you&#x27;re logged into New Relic but don&#x27;t see the <em>accounts</em>"
      },
      "id": "6043f38b28ccbc04a22fd1aa"
    },
    {
      "sections": [
        "Downgrade or cancel account/organization",
        "Reduce data ingest",
        "Downgrade organization",
        "Pro or Enterprise edition downgrade",
        "Standard edition downgrade",
        "Cancel organization",
        "Pro or Enterprise edition cancel",
        "Standard edition: cancel simple organization",
        "Standard edition: cancel other organizations"
      ],
      "title": "Downgrade or cancel account/organization",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "3a75d74fd723f17050d69fe6da4fe162b6965bc8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/downgradecancel-account/",
      "published_at": "2021-06-08T20:17:58Z",
      "updated_at": "2021-05-28T12:03:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your pricing edition and other factors, we offer various options for reducing data ingest, deleting or uninstalling an agent or integration, or downgrading or cancelling your organization (your account or group of accounts). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can configure our tools to send less data. For how to manage data ingest, see Manage your data. To uninstall agents or integrations, here are some recommended procedures: Remove APM, browser, and mobile apps Remove infrastructure agent For how to disable other New Relic tools, see their specific docs. You can search New Relic integrations here. Downgrade organization Options for downgrading your New Relic organization will differ depending on your pricing edition: Pro or Enterprise edition downgrade To downgrade your Pro or Enterprise organization, contact your New Relic account representative. Standard edition downgrade Options for downgrading for Standard edition: If you're being billed and want to downgrade: From one.newrelic.com, click the account dropdown, click Manage your plan, and then click Downgrade account. Once you are downgraded, you’ll still be able to access New Relic via the login page. If you're not being billed and haven't input your credit card, you don’t need to downgrade and can continue using New Relic at a free level. Cancel organization If you've accidentally signed up for New Relic and want to delete that account, see Delete simple organization. Other options for cancelling your organization depend on your pricing edition: Pro or Enterprise edition cancel To cancel your Pro or Enterprise organization, contact your New Relic account representative. Standard edition: cancel simple organization If you've created a new New Relic organization that you don't need, and if it meets some requirements (below), you can delete that organization with these steps: click the account dropdown, select Organization and access, and then click Delete organization. Requirements for being able to self-delete an organization: Organization has a single account, and single user. Was created after July 2020 (and hence is on the new pricing plan and the New Relic One user model). Standard edition: cancel other organizations First consider removing monitoring tools or downgrading. If you still have questions, contact support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 247.50137,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "sections": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Depending on your pricing edition and other factors, we offer various options for reducing data ingest, deleting or uninstalling an agent or integration, or downgrading or cancelling your organization (your <em>account</em> or group of <em>accounts</em>). Reduce data ingest If you want to stop reporting some data"
      },
      "id": "6043f3c4196a677821960f65"
    },
    {
      "sections": [
        "Create your New Relic account",
        "Sign up for a New Relic account",
        "Login problems?",
        "Delete an accidental sign-up"
      ],
      "title": "Create your New Relic account",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "d3bcfb1dde6566ad655368040ede0d75d0089df8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/create-your-new-relic-account/",
      "published_at": "2021-06-08T17:10:05Z",
      "updated_at": "2021-05-28T12:02:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To create a New Relic account, go to newrelic.com/signup. Creating a New Relic account gives you free access to our entire observability platform. Sign up for a New Relic account A New Relic account is free forever. Sign up in a few minutes at newrelic.com/signup. Or, if you have a specific offer from a New Relic partner, use the link they've sent you. Next steps after signing up: To learn more about how to optimize your use of New Relic, see Introduction to New Relic. To learn about our monitoring solutions, browse our integrations. To watch videos on how to use our features, see New Relic University. Login problems? If you're having login or password problems, see Login troubleshooting. Delete an accidental sign-up If you've unintentionally signed up for New Relic and want to delete your entire account, see Delete organization.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 247.49866,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create your New Relic <em>account</em>",
        "sections": "Create your New Relic <em>account</em>",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "To create a New Relic <em>account</em>, go to newrelic.com&#x2F;signup. Creating a New Relic <em>account</em> gives you free access to our entire observability platform. Sign up for a New Relic <em>account</em> A New Relic <em>account</em> is free forever. Sign up in a few minutes at newrelic.com&#x2F;signup. Or, if you have a specific offer"
      },
      "id": "6043f64a64441fa576378eca"
    }
  ],
  "/docs/accounts/accounts-billing/account-setup/create-your-new-relic-account": [
    {
      "sections": [
        "Troubleshoot password, email address, and login issues",
        "Tip",
        "Account access issues",
        "Password solutions",
        "Forgot your password, or your password does not work.",
        "Important",
        "Reset password.",
        "Password error messages.",
        "Password reset link expired.",
        "Added existing user to another New Relic account.",
        "Email solutions",
        "Did not receive new account confirmation email.",
        "Email address does not work or email error messages.",
        "Received message that your email account already exists.",
        "Email link does not redirect to the password reset page.",
        "Asked to verify email during login.",
        "General system solutions",
        "Delete an account you recently created.",
        "SAML single sign-on (SSO) problems prevent login.",
        "System failure errors prevent login.",
        "Mobile device solutions",
        "Solutions for other situations",
        "Unable to log in from your New Relic partner account."
      ],
      "title": "Troubleshoot password, email address, and login issues",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "fc93486097659dacf04d90cfc6b435cc6791ce6d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/troubleshoot-new-relics-password-email-address-login-problems/",
      "published_at": "2021-06-08T17:33:49Z",
      "updated_at": "2021-05-28T12:03:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have problems with your email address or password when logging in to New Relic, review these troubleshooting tips. Tip To learn about factors affecting access to features and data, see Factors affecting access. Account access issues If you're logged into New Relic but don't see the accounts or data you expect, see Factors affecting access. Password solutions New Relic requires a valid email address and a valid password in order for you to log in and to receive information from New Relic. If you are unable to create your account successfully, or if you have password or other login problems, review these troubleshooting suggestions to try to identify a resolution. Forgot your password, or your password does not work. If you have forgotten your New Relic account password, or if your password does not work, request a password reset from New Relic. If you have access to multiple New Relic logins, also ensure you are using the correct password for the login method you're using Go to New Relic's login page. Select Forgot your password. Type your account email address, and select Send my reset link. When you receive a confirmation email from New Relic, select the password reset link, and follow New Relic's password requirements to complete the process to reset your password. Important The password reset link expires after 12 hours. If you do not quickly receive an email from New Relic, check your spam filters, contact your organization's email administrator for troubleshooting suggestions, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Reset password. If you forgot your own password or need to request a password reset for your account email, you can use New Relic's self-service options. Admin-level users cannot reset passwords for other users. If you need to reset someone else's password, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Password error messages. If you complete the signup process and are unable to log in to your account due to password error messages, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Password reset link expired. If you want to change your password but you see a message that the password reset link expired, try using a private browser or clearing your browser cache and cookies. Important The password reset link expires after 12 hours. If you do not quickly receive an email from New Relic after you select the reset link, check your spam filters, contact your organization's email administrator for troubleshooting suggestions, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Added existing user to another New Relic account. If you're an existing New Relic account user and you have been added to another account, you don't need to create a new password. Your existing password will work for each account, and you can switch between accounts after logging in. Email solutions New Relic requires a valid email address and a valid password in order for you to log in and to receive information from New Relic. If you're unable to create your account successfully, or if you have email or other login problems, review these troubleshooting suggestions to try to identify a resolution. Did not receive new account confirmation email. When you first create your account, New Relic sends a confirmation email so you can complete the setup process and sign in. If you cannot locate your original account confirmation email: Go to New Relic's login page at login.newrelic.com/login. Select Forgot your password. Type your account email address, and select Send my password. When New Relic's system returns an email message, select the link in it to confirm your account again. If you don't receive an email from New Relic: Check your spam filters. If applicable, add New Relic to your email allow list. Get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Email address does not work or email error messages. If you complete the signup process and are unable to log in to your account due to email or password error messages, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Received message that your email account already exists. If you are trying to create a new account and receive a message that your email account already exists, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Email link does not redirect to the password reset page. If you have used your password reset link but are not redirected to the password reset page, troubleshoot the following: Your password reset link has expired. You will need to request a new link from the New Relic website. You are experiencing a caching issue. Clear your browsing cache or use a private browsing window before trying the link again. Tip Private browsing, also known as incognito mode, is a privacy feature to disable browsing history and the web cache. To open a private browsing window, you can use the keyboard shortcut CTRL+Shift+N on Windows and Command+Shift+N on Mac for most browsing applications. If this still doesn't solve your problem, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Asked to verify email during login. If your email is associated with multiple accounts, you will be given the option to verify your email during login. This will allow you to choose which account to access. If you do not verify your email address, New Relic will attempt to log you in with the most recently created user record associated with your email address. To avoid verifying your email during each login, click the Remember Me checkbox in the login screen. General system solutions Some general system problems and solutions: Delete an account you recently created. If you created a New Relic account unnecessarily and want to delete it, and if that account is a simple one, you may be able to delete it yourself. See Delete simple organization. SAML single sign-on (SSO) problems prevent login. If your organization uses a SAML Single Sign On (SSO) solution, you can skip the Password field when you log in. If you need to reset your password, contact your organization's system administrator or IT department as applicable. If you're an administrator who has recently enabled or made changes to your SAML SSO settings and are unable to log in, there might be an issue with your configuration. Customers on the New Relic One user model can use a special recovery flow to fix any issues. Visit login.newrelic.com/recovery_access to bypass SSO and gain one-time access to your organization. System failure errors prevent login. If you receive failure errors while trying to sign up, a third-party password manager may be triggering New Relic's spam trap. To work around this, try these solutions: Bypass your password manager. Use a different browser to sign up with New Relic. Get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Mobile device solutions If you are unable to log in from your mobile device, the new user authentication time frame may have expired. You must complete this process within 20 minutes of receiving New Relic's confirmation message for your mobile device. To solve this problem, request another confirmation message to be sent to your device. Also, depending on your New Relic account, additional installation or authentication steps may be required for your iOS or Android app account. Solutions for other situations Here are suggestions for other unique situations. Unable to log in from your New Relic partner account. With partner accounts, SAML SSO authentication to sign in to New Relic is controlled by the partnership. Depending on the partnership, you may or may not be able to log in directly to New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 247.50143,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Troubleshoot password, email address, <em>and</em> login issues",
        "sections": "<em>Account</em> access issues",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "If you have problems with your email address or password when logging in to New Relic, review these troubleshooting tips. Tip To learn about factors affecting access to features and data, see Factors affecting access. <em>Account</em> access issues If you&#x27;re logged into New Relic but don&#x27;t see the <em>accounts</em>"
      },
      "id": "6043f38b28ccbc04a22fd1aa"
    },
    {
      "sections": [
        "Downgrade or cancel account/organization",
        "Reduce data ingest",
        "Downgrade organization",
        "Pro or Enterprise edition downgrade",
        "Standard edition downgrade",
        "Cancel organization",
        "Pro or Enterprise edition cancel",
        "Standard edition: cancel simple organization",
        "Standard edition: cancel other organizations"
      ],
      "title": "Downgrade or cancel account/organization",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "3a75d74fd723f17050d69fe6da4fe162b6965bc8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/downgradecancel-account/",
      "published_at": "2021-06-08T20:17:58Z",
      "updated_at": "2021-05-28T12:03:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your pricing edition and other factors, we offer various options for reducing data ingest, deleting or uninstalling an agent or integration, or downgrading or cancelling your organization (your account or group of accounts). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can configure our tools to send less data. For how to manage data ingest, see Manage your data. To uninstall agents or integrations, here are some recommended procedures: Remove APM, browser, and mobile apps Remove infrastructure agent For how to disable other New Relic tools, see their specific docs. You can search New Relic integrations here. Downgrade organization Options for downgrading your New Relic organization will differ depending on your pricing edition: Pro or Enterprise edition downgrade To downgrade your Pro or Enterprise organization, contact your New Relic account representative. Standard edition downgrade Options for downgrading for Standard edition: If you're being billed and want to downgrade: From one.newrelic.com, click the account dropdown, click Manage your plan, and then click Downgrade account. Once you are downgraded, you’ll still be able to access New Relic via the login page. If you're not being billed and haven't input your credit card, you don’t need to downgrade and can continue using New Relic at a free level. Cancel organization If you've accidentally signed up for New Relic and want to delete that account, see Delete simple organization. Other options for cancelling your organization depend on your pricing edition: Pro or Enterprise edition cancel To cancel your Pro or Enterprise organization, contact your New Relic account representative. Standard edition: cancel simple organization If you've created a new New Relic organization that you don't need, and if it meets some requirements (below), you can delete that organization with these steps: click the account dropdown, select Organization and access, and then click Delete organization. Requirements for being able to self-delete an organization: Organization has a single account, and single user. Was created after July 2020 (and hence is on the new pricing plan and the New Relic One user model). Standard edition: cancel other organizations First consider removing monitoring tools or downgrading. If you still have questions, contact support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 247.50133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "sections": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Depending on your pricing edition and other factors, we offer various options for reducing data ingest, deleting or uninstalling an agent or integration, or downgrading or cancelling your organization (your <em>account</em> or group of <em>accounts</em>). Reduce data ingest If you want to stop reporting some data"
      },
      "id": "6043f3c4196a677821960f65"
    },
    {
      "sections": [
        "New Relic license key",
        "Important",
        "View and manage your license key",
        "Keep your license key safe"
      ],
      "title": "New Relic license key",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "88609336a6922e3052ae5aedad6c0e406cfbb4d3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/new-relic-license-key/",
      "published_at": "2021-06-09T02:17:27Z",
      "updated_at": "2021-05-15T15:13:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your New Relic license key is a 40-character hexadecimal string created when you sign up for a New Relic account. It's used to determine the account to which you send your APM and infrastructure data, and some New Relic features will require you to input it. Important To prevent unexpected data to be sent to your account, treat your license key securely. View and manage your license key You can view the license key for your New Relic account in the API keys page. From the account dropdown, select Account settings. Select API keys from the options at the side of the page. You can also get to the API keys page by navigating directly to one.newrelic.com/launcher/api-keys-ui.api-keys-launcher. From there, you can view and manage your license key as well as other types of API keys. You can also create additional license keys and manage them with our NerdGraph API. Keep your license key safe Your license key uniquely identifies your account and the data it reports to New Relic. Given its importance, you should treat it like a password. If your license key falls into the wrong hands, an attacker could send fake data to your account, which could trigger false alerts and contaminate your data so that detecting actual issues is more difficult. In the event your license key is accidentally shared and you’re seeing unexpected data, you can work with our Support team to change your license key.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.75858,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "View <em>and</em> manage your license key",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Your New Relic license key is a 40-character hexadecimal string created when you sign up for a New Relic <em>account</em>. It&#x27;s used to determine the <em>account</em> to which you send your APM and infrastructure data, and some New Relic features will require you to input it. Important To prevent unexpected data"
      },
      "id": "6043f64b28ccbc04e82c6086"
    }
  ],
  "/docs/accounts/accounts-billing/account-setup/downgradecancel-account": [
    {
      "sections": [
        "Troubleshoot password, email address, and login issues",
        "Tip",
        "Account access issues",
        "Password solutions",
        "Forgot your password, or your password does not work.",
        "Important",
        "Reset password.",
        "Password error messages.",
        "Password reset link expired.",
        "Added existing user to another New Relic account.",
        "Email solutions",
        "Did not receive new account confirmation email.",
        "Email address does not work or email error messages.",
        "Received message that your email account already exists.",
        "Email link does not redirect to the password reset page.",
        "Asked to verify email during login.",
        "General system solutions",
        "Delete an account you recently created.",
        "SAML single sign-on (SSO) problems prevent login.",
        "System failure errors prevent login.",
        "Mobile device solutions",
        "Solutions for other situations",
        "Unable to log in from your New Relic partner account."
      ],
      "title": "Troubleshoot password, email address, and login issues",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "fc93486097659dacf04d90cfc6b435cc6791ce6d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/troubleshoot-new-relics-password-email-address-login-problems/",
      "published_at": "2021-06-08T17:33:49Z",
      "updated_at": "2021-05-28T12:03:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have problems with your email address or password when logging in to New Relic, review these troubleshooting tips. Tip To learn about factors affecting access to features and data, see Factors affecting access. Account access issues If you're logged into New Relic but don't see the accounts or data you expect, see Factors affecting access. Password solutions New Relic requires a valid email address and a valid password in order for you to log in and to receive information from New Relic. If you are unable to create your account successfully, or if you have password or other login problems, review these troubleshooting suggestions to try to identify a resolution. Forgot your password, or your password does not work. If you have forgotten your New Relic account password, or if your password does not work, request a password reset from New Relic. If you have access to multiple New Relic logins, also ensure you are using the correct password for the login method you're using Go to New Relic's login page. Select Forgot your password. Type your account email address, and select Send my reset link. When you receive a confirmation email from New Relic, select the password reset link, and follow New Relic's password requirements to complete the process to reset your password. Important The password reset link expires after 12 hours. If you do not quickly receive an email from New Relic, check your spam filters, contact your organization's email administrator for troubleshooting suggestions, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Reset password. If you forgot your own password or need to request a password reset for your account email, you can use New Relic's self-service options. Admin-level users cannot reset passwords for other users. If you need to reset someone else's password, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Password error messages. If you complete the signup process and are unable to log in to your account due to password error messages, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Password reset link expired. If you want to change your password but you see a message that the password reset link expired, try using a private browser or clearing your browser cache and cookies. Important The password reset link expires after 12 hours. If you do not quickly receive an email from New Relic after you select the reset link, check your spam filters, contact your organization's email administrator for troubleshooting suggestions, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Added existing user to another New Relic account. If you're an existing New Relic account user and you have been added to another account, you don't need to create a new password. Your existing password will work for each account, and you can switch between accounts after logging in. Email solutions New Relic requires a valid email address and a valid password in order for you to log in and to receive information from New Relic. If you're unable to create your account successfully, or if you have email or other login problems, review these troubleshooting suggestions to try to identify a resolution. Did not receive new account confirmation email. When you first create your account, New Relic sends a confirmation email so you can complete the setup process and sign in. If you cannot locate your original account confirmation email: Go to New Relic's login page at login.newrelic.com/login. Select Forgot your password. Type your account email address, and select Send my password. When New Relic's system returns an email message, select the link in it to confirm your account again. If you don't receive an email from New Relic: Check your spam filters. If applicable, add New Relic to your email allow list. Get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Email address does not work or email error messages. If you complete the signup process and are unable to log in to your account due to email or password error messages, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Received message that your email account already exists. If you are trying to create a new account and receive a message that your email account already exists, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Email link does not redirect to the password reset page. If you have used your password reset link but are not redirected to the password reset page, troubleshoot the following: Your password reset link has expired. You will need to request a new link from the New Relic website. You are experiencing a caching issue. Clear your browsing cache or use a private browsing window before trying the link again. Tip Private browsing, also known as incognito mode, is a privacy feature to disable browsing history and the web cache. To open a private browsing window, you can use the keyboard shortcut CTRL+Shift+N on Windows and Command+Shift+N on Mac for most browsing applications. If this still doesn't solve your problem, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Asked to verify email during login. If your email is associated with multiple accounts, you will be given the option to verify your email during login. This will allow you to choose which account to access. If you do not verify your email address, New Relic will attempt to log you in with the most recently created user record associated with your email address. To avoid verifying your email during each login, click the Remember Me checkbox in the login screen. General system solutions Some general system problems and solutions: Delete an account you recently created. If you created a New Relic account unnecessarily and want to delete it, and if that account is a simple one, you may be able to delete it yourself. See Delete simple organization. SAML single sign-on (SSO) problems prevent login. If your organization uses a SAML Single Sign On (SSO) solution, you can skip the Password field when you log in. If you need to reset your password, contact your organization's system administrator or IT department as applicable. If you're an administrator who has recently enabled or made changes to your SAML SSO settings and are unable to log in, there might be an issue with your configuration. Customers on the New Relic One user model can use a special recovery flow to fix any issues. Visit login.newrelic.com/recovery_access to bypass SSO and gain one-time access to your organization. System failure errors prevent login. If you receive failure errors while trying to sign up, a third-party password manager may be triggering New Relic's spam trap. To work around this, try these solutions: Bypass your password manager. Use a different browser to sign up with New Relic. Get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Mobile device solutions If you are unable to log in from your mobile device, the new user authentication time frame may have expired. You must complete this process within 20 minutes of receiving New Relic's confirmation message for your mobile device. To solve this problem, request another confirmation message to be sent to your device. Also, depending on your New Relic account, additional installation or authentication steps may be required for your iOS or Android app account. Solutions for other situations Here are suggestions for other unique situations. Unable to log in from your New Relic partner account. With partner accounts, SAML SSO authentication to sign in to New Relic is controlled by the partnership. Depending on the partnership, you may or may not be able to log in directly to New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 247.50143,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Troubleshoot password, email address, <em>and</em> login issues",
        "sections": "<em>Account</em> access issues",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "If you have problems with your email address or password when logging in to New Relic, review these troubleshooting tips. Tip To learn about factors affecting access to features and data, see Factors affecting access. <em>Account</em> access issues If you&#x27;re logged into New Relic but don&#x27;t see the <em>accounts</em>"
      },
      "id": "6043f38b28ccbc04a22fd1aa"
    },
    {
      "sections": [
        "Create your New Relic account",
        "Sign up for a New Relic account",
        "Login problems?",
        "Delete an accidental sign-up"
      ],
      "title": "Create your New Relic account",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "d3bcfb1dde6566ad655368040ede0d75d0089df8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/create-your-new-relic-account/",
      "published_at": "2021-06-08T17:10:05Z",
      "updated_at": "2021-05-28T12:02:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To create a New Relic account, go to newrelic.com/signup. Creating a New Relic account gives you free access to our entire observability platform. Sign up for a New Relic account A New Relic account is free forever. Sign up in a few minutes at newrelic.com/signup. Or, if you have a specific offer from a New Relic partner, use the link they've sent you. Next steps after signing up: To learn more about how to optimize your use of New Relic, see Introduction to New Relic. To learn about our monitoring solutions, browse our integrations. To watch videos on how to use our features, see New Relic University. Login problems? If you're having login or password problems, see Login troubleshooting. Delete an accidental sign-up If you've unintentionally signed up for New Relic and want to delete your entire account, see Delete organization.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 247.4986,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create your New Relic <em>account</em>",
        "sections": "Create your New Relic <em>account</em>",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "To create a New Relic <em>account</em>, go to newrelic.com&#x2F;signup. Creating a New Relic <em>account</em> gives you free access to our entire observability platform. Sign up for a New Relic <em>account</em> A New Relic <em>account</em> is free forever. Sign up in a few minutes at newrelic.com&#x2F;signup. Or, if you have a specific offer"
      },
      "id": "6043f64a64441fa576378eca"
    },
    {
      "sections": [
        "New Relic license key",
        "Important",
        "View and manage your license key",
        "Keep your license key safe"
      ],
      "title": "New Relic license key",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "88609336a6922e3052ae5aedad6c0e406cfbb4d3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/new-relic-license-key/",
      "published_at": "2021-06-09T02:17:27Z",
      "updated_at": "2021-05-15T15:13:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your New Relic license key is a 40-character hexadecimal string created when you sign up for a New Relic account. It's used to determine the account to which you send your APM and infrastructure data, and some New Relic features will require you to input it. Important To prevent unexpected data to be sent to your account, treat your license key securely. View and manage your license key You can view the license key for your New Relic account in the API keys page. From the account dropdown, select Account settings. Select API keys from the options at the side of the page. You can also get to the API keys page by navigating directly to one.newrelic.com/launcher/api-keys-ui.api-keys-launcher. From there, you can view and manage your license key as well as other types of API keys. You can also create additional license keys and manage them with our NerdGraph API. Keep your license key safe Your license key uniquely identifies your account and the data it reports to New Relic. Given its importance, you should treat it like a password. If your license key falls into the wrong hands, an attacker could send fake data to your account, which could trigger false alerts and contaminate your data so that detecting actual issues is more difficult. In the event your license key is accidentally shared and you’re seeing unexpected data, you can work with our Support team to change your license key.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.75858,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "View <em>and</em> manage your license key",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Your New Relic license key is a 40-character hexadecimal string created when you sign up for a New Relic <em>account</em>. It&#x27;s used to determine the <em>account</em> to which you send your APM and infrastructure data, and some New Relic features will require you to input it. Important To prevent unexpected data"
      },
      "id": "6043f64b28ccbc04e82c6086"
    }
  ],
  "/docs/accounts/accounts-billing/account-setup/new-relic-license-key": [
    {
      "sections": [
        "Troubleshoot password, email address, and login issues",
        "Tip",
        "Account access issues",
        "Password solutions",
        "Forgot your password, or your password does not work.",
        "Important",
        "Reset password.",
        "Password error messages.",
        "Password reset link expired.",
        "Added existing user to another New Relic account.",
        "Email solutions",
        "Did not receive new account confirmation email.",
        "Email address does not work or email error messages.",
        "Received message that your email account already exists.",
        "Email link does not redirect to the password reset page.",
        "Asked to verify email during login.",
        "General system solutions",
        "Delete an account you recently created.",
        "SAML single sign-on (SSO) problems prevent login.",
        "System failure errors prevent login.",
        "Mobile device solutions",
        "Solutions for other situations",
        "Unable to log in from your New Relic partner account."
      ],
      "title": "Troubleshoot password, email address, and login issues",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "fc93486097659dacf04d90cfc6b435cc6791ce6d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/troubleshoot-new-relics-password-email-address-login-problems/",
      "published_at": "2021-06-08T17:33:49Z",
      "updated_at": "2021-05-28T12:03:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have problems with your email address or password when logging in to New Relic, review these troubleshooting tips. Tip To learn about factors affecting access to features and data, see Factors affecting access. Account access issues If you're logged into New Relic but don't see the accounts or data you expect, see Factors affecting access. Password solutions New Relic requires a valid email address and a valid password in order for you to log in and to receive information from New Relic. If you are unable to create your account successfully, or if you have password or other login problems, review these troubleshooting suggestions to try to identify a resolution. Forgot your password, or your password does not work. If you have forgotten your New Relic account password, or if your password does not work, request a password reset from New Relic. If you have access to multiple New Relic logins, also ensure you are using the correct password for the login method you're using Go to New Relic's login page. Select Forgot your password. Type your account email address, and select Send my reset link. When you receive a confirmation email from New Relic, select the password reset link, and follow New Relic's password requirements to complete the process to reset your password. Important The password reset link expires after 12 hours. If you do not quickly receive an email from New Relic, check your spam filters, contact your organization's email administrator for troubleshooting suggestions, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Reset password. If you forgot your own password or need to request a password reset for your account email, you can use New Relic's self-service options. Admin-level users cannot reset passwords for other users. If you need to reset someone else's password, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Password error messages. If you complete the signup process and are unable to log in to your account due to password error messages, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Password reset link expired. If you want to change your password but you see a message that the password reset link expired, try using a private browser or clearing your browser cache and cookies. Important The password reset link expires after 12 hours. If you do not quickly receive an email from New Relic after you select the reset link, check your spam filters, contact your organization's email administrator for troubleshooting suggestions, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Added existing user to another New Relic account. If you're an existing New Relic account user and you have been added to another account, you don't need to create a new password. Your existing password will work for each account, and you can switch between accounts after logging in. Email solutions New Relic requires a valid email address and a valid password in order for you to log in and to receive information from New Relic. If you're unable to create your account successfully, or if you have email or other login problems, review these troubleshooting suggestions to try to identify a resolution. Did not receive new account confirmation email. When you first create your account, New Relic sends a confirmation email so you can complete the setup process and sign in. If you cannot locate your original account confirmation email: Go to New Relic's login page at login.newrelic.com/login. Select Forgot your password. Type your account email address, and select Send my password. When New Relic's system returns an email message, select the link in it to confirm your account again. If you don't receive an email from New Relic: Check your spam filters. If applicable, add New Relic to your email allow list. Get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Email address does not work or email error messages. If you complete the signup process and are unable to log in to your account due to email or password error messages, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Received message that your email account already exists. If you are trying to create a new account and receive a message that your email account already exists, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Email link does not redirect to the password reset page. If you have used your password reset link but are not redirected to the password reset page, troubleshoot the following: Your password reset link has expired. You will need to request a new link from the New Relic website. You are experiencing a caching issue. Clear your browsing cache or use a private browsing window before trying the link again. Tip Private browsing, also known as incognito mode, is a privacy feature to disable browsing history and the web cache. To open a private browsing window, you can use the keyboard shortcut CTRL+Shift+N on Windows and Command+Shift+N on Mac for most browsing applications. If this still doesn't solve your problem, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Asked to verify email during login. If your email is associated with multiple accounts, you will be given the option to verify your email during login. This will allow you to choose which account to access. If you do not verify your email address, New Relic will attempt to log you in with the most recently created user record associated with your email address. To avoid verifying your email during each login, click the Remember Me checkbox in the login screen. General system solutions Some general system problems and solutions: Delete an account you recently created. If you created a New Relic account unnecessarily and want to delete it, and if that account is a simple one, you may be able to delete it yourself. See Delete simple organization. SAML single sign-on (SSO) problems prevent login. If your organization uses a SAML Single Sign On (SSO) solution, you can skip the Password field when you log in. If you need to reset your password, contact your organization's system administrator or IT department as applicable. If you're an administrator who has recently enabled or made changes to your SAML SSO settings and are unable to log in, there might be an issue with your configuration. Customers on the New Relic One user model can use a special recovery flow to fix any issues. Visit login.newrelic.com/recovery_access to bypass SSO and gain one-time access to your organization. System failure errors prevent login. If you receive failure errors while trying to sign up, a third-party password manager may be triggering New Relic's spam trap. To work around this, try these solutions: Bypass your password manager. Use a different browser to sign up with New Relic. Get support at support.newrelic.com, or send an email to account_recovery@newrelic.com. Mobile device solutions If you are unable to log in from your mobile device, the new user authentication time frame may have expired. You must complete this process within 20 minutes of receiving New Relic's confirmation message for your mobile device. To solve this problem, request another confirmation message to be sent to your device. Also, depending on your New Relic account, additional installation or authentication steps may be required for your iOS or Android app account. Solutions for other situations Here are suggestions for other unique situations. Unable to log in from your New Relic partner account. With partner accounts, SAML SSO authentication to sign in to New Relic is controlled by the partnership. Depending on the partnership, you may or may not be able to log in directly to New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 247.50137,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Troubleshoot password, email address, <em>and</em> login issues",
        "sections": "<em>Account</em> access issues",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "If you have problems with your email address or password when logging in to New Relic, review these troubleshooting tips. Tip To learn about factors affecting access to features and data, see Factors affecting access. <em>Account</em> access issues If you&#x27;re logged into New Relic but don&#x27;t see the <em>accounts</em>"
      },
      "id": "6043f38b28ccbc04a22fd1aa"
    },
    {
      "sections": [
        "Downgrade or cancel account/organization",
        "Reduce data ingest",
        "Downgrade organization",
        "Pro or Enterprise edition downgrade",
        "Standard edition downgrade",
        "Cancel organization",
        "Pro or Enterprise edition cancel",
        "Standard edition: cancel simple organization",
        "Standard edition: cancel other organizations"
      ],
      "title": "Downgrade or cancel account/organization",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "3a75d74fd723f17050d69fe6da4fe162b6965bc8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/downgradecancel-account/",
      "published_at": "2021-06-08T20:17:58Z",
      "updated_at": "2021-05-28T12:03:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your pricing edition and other factors, we offer various options for reducing data ingest, deleting or uninstalling an agent or integration, or downgrading or cancelling your organization (your account or group of accounts). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can configure our tools to send less data. For how to manage data ingest, see Manage your data. To uninstall agents or integrations, here are some recommended procedures: Remove APM, browser, and mobile apps Remove infrastructure agent For how to disable other New Relic tools, see their specific docs. You can search New Relic integrations here. Downgrade organization Options for downgrading your New Relic organization will differ depending on your pricing edition: Pro or Enterprise edition downgrade To downgrade your Pro or Enterprise organization, contact your New Relic account representative. Standard edition downgrade Options for downgrading for Standard edition: If you're being billed and want to downgrade: From one.newrelic.com, click the account dropdown, click Manage your plan, and then click Downgrade account. Once you are downgraded, you’ll still be able to access New Relic via the login page. If you're not being billed and haven't input your credit card, you don’t need to downgrade and can continue using New Relic at a free level. Cancel organization If you've accidentally signed up for New Relic and want to delete that account, see Delete simple organization. Other options for cancelling your organization depend on your pricing edition: Pro or Enterprise edition cancel To cancel your Pro or Enterprise organization, contact your New Relic account representative. Standard edition: cancel simple organization If you've created a new New Relic organization that you don't need, and if it meets some requirements (below), you can delete that organization with these steps: click the account dropdown, select Organization and access, and then click Delete organization. Requirements for being able to self-delete an organization: Organization has a single account, and single user. Was created after July 2020 (and hence is on the new pricing plan and the New Relic One user model). Standard edition: cancel other organizations First consider removing monitoring tools or downgrading. If you still have questions, contact support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 247.50128,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "sections": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Depending on your pricing edition and other factors, we offer various options for reducing data ingest, deleting or uninstalling an agent or integration, or downgrading or cancelling your organization (your <em>account</em> or group of <em>accounts</em>). Reduce data ingest If you want to stop reporting some data"
      },
      "id": "6043f3c4196a677821960f65"
    },
    {
      "sections": [
        "Create your New Relic account",
        "Sign up for a New Relic account",
        "Login problems?",
        "Delete an accidental sign-up"
      ],
      "title": "Create your New Relic account",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "d3bcfb1dde6566ad655368040ede0d75d0089df8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/create-your-new-relic-account/",
      "published_at": "2021-06-08T17:10:05Z",
      "updated_at": "2021-05-28T12:02:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To create a New Relic account, go to newrelic.com/signup. Creating a New Relic account gives you free access to our entire observability platform. Sign up for a New Relic account A New Relic account is free forever. Sign up in a few minutes at newrelic.com/signup. Or, if you have a specific offer from a New Relic partner, use the link they've sent you. Next steps after signing up: To learn more about how to optimize your use of New Relic, see Introduction to New Relic. To learn about our monitoring solutions, browse our integrations. To watch videos on how to use our features, see New Relic University. Login problems? If you're having login or password problems, see Login troubleshooting. Delete an accidental sign-up If you've unintentionally signed up for New Relic and want to delete your entire account, see Delete organization.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 247.49855,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create your New Relic <em>account</em>",
        "sections": "Create your New Relic <em>account</em>",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "To create a New Relic <em>account</em>, go to newrelic.com&#x2F;signup. Creating a New Relic <em>account</em> gives you free access to our entire observability platform. Sign up for a New Relic <em>account</em> A New Relic <em>account</em> is free forever. Sign up in a few minutes at newrelic.com&#x2F;signup. Or, if you have a specific offer"
      },
      "id": "6043f64a64441fa576378eca"
    }
  ],
  "/docs/accounts/accounts-billing/account-setup/troubleshoot-new-relics-password-email-address-login-problems": [
    {
      "sections": [
        "Downgrade or cancel account/organization",
        "Reduce data ingest",
        "Downgrade organization",
        "Pro or Enterprise edition downgrade",
        "Standard edition downgrade",
        "Cancel organization",
        "Pro or Enterprise edition cancel",
        "Standard edition: cancel simple organization",
        "Standard edition: cancel other organizations"
      ],
      "title": "Downgrade or cancel account/organization",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "3a75d74fd723f17050d69fe6da4fe162b6965bc8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/downgradecancel-account/",
      "published_at": "2021-06-08T20:17:58Z",
      "updated_at": "2021-05-28T12:03:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your pricing edition and other factors, we offer various options for reducing data ingest, deleting or uninstalling an agent or integration, or downgrading or cancelling your organization (your account or group of accounts). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can configure our tools to send less data. For how to manage data ingest, see Manage your data. To uninstall agents or integrations, here are some recommended procedures: Remove APM, browser, and mobile apps Remove infrastructure agent For how to disable other New Relic tools, see their specific docs. You can search New Relic integrations here. Downgrade organization Options for downgrading your New Relic organization will differ depending on your pricing edition: Pro or Enterprise edition downgrade To downgrade your Pro or Enterprise organization, contact your New Relic account representative. Standard edition downgrade Options for downgrading for Standard edition: If you're being billed and want to downgrade: From one.newrelic.com, click the account dropdown, click Manage your plan, and then click Downgrade account. Once you are downgraded, you’ll still be able to access New Relic via the login page. If you're not being billed and haven't input your credit card, you don’t need to downgrade and can continue using New Relic at a free level. Cancel organization If you've accidentally signed up for New Relic and want to delete that account, see Delete simple organization. Other options for cancelling your organization depend on your pricing edition: Pro or Enterprise edition cancel To cancel your Pro or Enterprise organization, contact your New Relic account representative. Standard edition: cancel simple organization If you've created a new New Relic organization that you don't need, and if it meets some requirements (below), you can delete that organization with these steps: click the account dropdown, select Organization and access, and then click Delete organization. Requirements for being able to self-delete an organization: Organization has a single account, and single user. Was created after July 2020 (and hence is on the new pricing plan and the New Relic One user model). Standard edition: cancel other organizations First consider removing monitoring tools or downgrading. If you still have questions, contact support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 247.50128,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "sections": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Depending on your pricing edition and other factors, we offer various options for reducing data ingest, deleting or uninstalling an agent or integration, or downgrading or cancelling your organization (your <em>account</em> or group of <em>accounts</em>). Reduce data ingest If you want to stop reporting some data"
      },
      "id": "6043f3c4196a677821960f65"
    },
    {
      "sections": [
        "Create your New Relic account",
        "Sign up for a New Relic account",
        "Login problems?",
        "Delete an accidental sign-up"
      ],
      "title": "Create your New Relic account",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "d3bcfb1dde6566ad655368040ede0d75d0089df8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/create-your-new-relic-account/",
      "published_at": "2021-06-08T17:10:05Z",
      "updated_at": "2021-05-28T12:02:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To create a New Relic account, go to newrelic.com/signup. Creating a New Relic account gives you free access to our entire observability platform. Sign up for a New Relic account A New Relic account is free forever. Sign up in a few minutes at newrelic.com/signup. Or, if you have a specific offer from a New Relic partner, use the link they've sent you. Next steps after signing up: To learn more about how to optimize your use of New Relic, see Introduction to New Relic. To learn about our monitoring solutions, browse our integrations. To watch videos on how to use our features, see New Relic University. Login problems? If you're having login or password problems, see Login troubleshooting. Delete an accidental sign-up If you've unintentionally signed up for New Relic and want to delete your entire account, see Delete organization.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 247.49855,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create your New Relic <em>account</em>",
        "sections": "Create your New Relic <em>account</em>",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "To create a New Relic <em>account</em>, go to newrelic.com&#x2F;signup. Creating a New Relic <em>account</em> gives you free access to our entire observability platform. Sign up for a New Relic <em>account</em> A New Relic <em>account</em> is free forever. Sign up in a few minutes at newrelic.com&#x2F;signup. Or, if you have a specific offer"
      },
      "id": "6043f64a64441fa576378eca"
    },
    {
      "sections": [
        "New Relic license key",
        "Important",
        "View and manage your license key",
        "Keep your license key safe"
      ],
      "title": "New Relic license key",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "88609336a6922e3052ae5aedad6c0e406cfbb4d3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/new-relic-license-key/",
      "published_at": "2021-06-09T02:17:27Z",
      "updated_at": "2021-05-15T15:13:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your New Relic license key is a 40-character hexadecimal string created when you sign up for a New Relic account. It's used to determine the account to which you send your APM and infrastructure data, and some New Relic features will require you to input it. Important To prevent unexpected data to be sent to your account, treat your license key securely. View and manage your license key You can view the license key for your New Relic account in the API keys page. From the account dropdown, select Account settings. Select API keys from the options at the side of the page. You can also get to the API keys page by navigating directly to one.newrelic.com/launcher/api-keys-ui.api-keys-launcher. From there, you can view and manage your license key as well as other types of API keys. You can also create additional license keys and manage them with our NerdGraph API. Keep your license key safe Your license key uniquely identifies your account and the data it reports to New Relic. Given its importance, you should treat it like a password. If your license key falls into the wrong hands, an attacker could send fake data to your account, which could trigger false alerts and contaminate your data so that detecting actual issues is more difficult. In the event your license key is accidentally shared and you’re seeing unexpected data, you can work with our Support team to change your license key.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.75856,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "View <em>and</em> manage your license key",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Your New Relic license key is a 40-character hexadecimal string created when you sign up for a New Relic <em>account</em>. It&#x27;s used to determine the <em>account</em> to which you send your APM and infrastructure data, and some New Relic features will require you to input it. Important To prevent unexpected data"
      },
      "id": "6043f64b28ccbc04e82c6086"
    }
  ],
  "/docs/accounts/accounts-billing/account-structure/factors-affecting-access-features-data": [
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "da1d767d7bc556d6b1a0b78e73738936607cb7dd",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/mastersub-account-structure/",
      "published_at": "2021-06-08T19:09:12Z",
      "updated_at": "2021-06-08T04:17:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For organizations on our original account/user model, you can create a more complex account structure with master accounts and sub-accounts that inherit master account settings. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user models, see User models. The major differences are: Original account/user model: Our original model uses a master/sub-account structure, where sub-accounts inherit settings from master accounts. Our partnership accounts also use this model. If your organization is on this model, you're able to create your own sub-accounts. If you're on this model, continue reading below to learn how this account structure works. New Relic One account/user model: This is our new, improved model. For more about how accounts work for this model, see Account structure. Master and sub-account hierarchy For organizations on our original account/user model that have a master/sub-account structure, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 366.23322,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> <em>structure</em>",
        "sections": "Master&#x2F;sub-<em>account</em> <em>structure</em>",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "For organizations on our original <em>account</em>&#x2F;user model, you can create a more complex <em>account</em> <em>structure</em> with master <em>accounts</em> and sub-<em>accounts</em> that inherit master <em>account</em> settings. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization"
      },
      "id": "60beef5764441fc42dd543d3"
    },
    {
      "sections": [
        "New Relic account structure",
        "Impacts of account/user model",
        "Account structure for New Relic One account/user model"
      ],
      "title": "New Relic account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "4f5a4cde293d0b599f489eff010f69c021ccb539",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/new-relic-account-structure/",
      "published_at": "2021-06-09T02:17:27Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your account/user model, you have different options for adding and managing accounts and assigning users to them. Impacts of account/user model How you manage accounts and users differs based on which of our account/user models your organization is on. To learn more about the account/user models and determine which you're on, see User models. The major differences are: Original account/user model: Our original model used a master/sub-account structure, where sub-accounts inherited settings from master accounts. If you're on this model, see the Original user model docs. New Relic One account/user model: This is our new, improved model. We currently are migrating some customer accounts to this model and eventually all our customers will be on this model. To learn more and see if you can migrate your users, see Migrate users. To learn more about how account and user management works, keep reading. Account structure for New Relic One account/user model For organizations on the New Relic One account/user model, here are some details about how organization and account management work: The Standard edition allows for a single account per organization. Pro and Enterprise editions allows for multiple accounts. At the top level of a New Relic account hierarchy is the concept of the \"organization.\" Your group of related accounts that share the same billing are inside a single \"New Relic organization.\" Currently you can't add accounts to your organization on your own. To add accounts, talk to your New Relic account representative. To learn how you assign users permissions and access to specific accounts, see Manage users. Having trouble accessing a specific account or feature? See Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 365.61407,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic <em>account</em> <em>structure</em>",
        "sections": "New Relic <em>account</em> <em>structure</em>",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "&#x2F;user models and determine which you&#x27;re on, see User models. The major differences are: Original <em>account</em>&#x2F;user model: Our original model used a master&#x2F;sub-<em>account</em> <em>structure</em>, where sub-<em>accounts</em> inherited settings from master <em>accounts</em>. If you&#x27;re on this model, see the Original user model docs. New Relic"
      },
      "id": "60bee5c028ccbc2413e667e4"
    },
    {
      "sections": [
        "Introduction to account settings",
        "Pricing and billing settings",
        "New Relic One pricing UI",
        "Original pricing UI",
        "Manage users",
        "New Relic One user model",
        "Original user model",
        "Add accounts",
        "General account settings"
      ],
      "title": "Introduction to account settings",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "1dbac104fa7e60637c32a61a80b8b709f6fd84c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings/",
      "published_at": "2021-06-08T20:19:00Z",
      "updated_at": "2021-06-08T20:19:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view and edit account-related settings, go to one.newrelic.com and in the top right corner, select the account dropdown. Keep reading for tips on how to find different kinds of account settings in the UI. Pricing and billing settings To view and edit some billing-related settings, you must be a full user. Basic users have some restrictions. How you access billing-related UI depends on which pricing plan your New Relic account is on: New Relic One pricing UI View and manage billing information based on your user model: New Relic One user model: click the account dropdown, click Administration, and click Plan and usage. From there, you can view your usage data, and view and edit billing information. The ability to manage billing requires the Billing user role, which is included in the default Admin group. Original user model: click the account dropdown and click Account settings. Note that if you're in an organization that has a master/sub-account structure and you're in a sub-account, usage data may only display usage from that account and not the broader organization. Billing management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see Pricing. Original pricing UI If your account is on the original pricing plan, to view and edit billing details: Click the account dropdown, and click Account settings. On the right, there are details about your subscription. For more about your subscription, click Subscription. To view and edit billing details, click Billing. To learn more about original pricing, see Pricing. Manage users How you manage users depends on which user model your users are on: New Relic One user model For managing users on the New Relic One user model, see Manage users. Original user model To manage users on the original user model: from the account dropdown, click Account settings and then click Users and roles. For more on managing these users, see Original users. Add accounts How you add accounts depends on which user model you're on. This is because the user model has impacts on account structure and management. Learn more about adding accounts. General account settings For how to edit things like user preferences and email settings, see the various account settings docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 310.7699,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>account</em> settings",
        "sections": "Pricing <em>and</em> <em>billing</em> settings",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " that if you&#x27;re in an organization that has a master&#x2F;sub-<em>account</em> <em>structure</em> and you&#x27;re in a sub-<em>account</em>, usage data may only display usage from that <em>account</em> and not the broader organization. <em>Billing</em> management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see"
      },
      "id": "6043f38a196a679ae4960f5e"
    }
  ],
  "/docs/accounts/accounts-billing/account-structure/new-relic-account-structure": [
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "da1d767d7bc556d6b1a0b78e73738936607cb7dd",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/mastersub-account-structure/",
      "published_at": "2021-06-08T19:09:12Z",
      "updated_at": "2021-06-08T04:17:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For organizations on our original account/user model, you can create a more complex account structure with master accounts and sub-accounts that inherit master account settings. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user models, see User models. The major differences are: Original account/user model: Our original model uses a master/sub-account structure, where sub-accounts inherit settings from master accounts. Our partnership accounts also use this model. If your organization is on this model, you're able to create your own sub-accounts. If you're on this model, continue reading below to learn how this account structure works. New Relic One account/user model: This is our new, improved model. For more about how accounts work for this model, see Account structure. Master and sub-account hierarchy For organizations on our original account/user model that have a master/sub-account structure, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 366.23322,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> <em>structure</em>",
        "sections": "Master&#x2F;sub-<em>account</em> <em>structure</em>",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "For organizations on our original <em>account</em>&#x2F;user model, you can create a more complex <em>account</em> <em>structure</em> with master <em>accounts</em> and sub-<em>accounts</em> that inherit master <em>account</em> settings. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization"
      },
      "id": "60beef5764441fc42dd543d3"
    },
    {
      "sections": [
        "Factors affecting access to features and data",
        "User permissions",
        "Account access",
        "Pricing plan or edition",
        "The entities being monitored",
        "Data retention"
      ],
      "title": "Factors affecting access to features and data",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "98bf366604050b491ee35c8422414c70bda452b4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/factors-affecting-access-features-data/",
      "published_at": "2021-06-09T01:22:01Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There are several factors that can affect your access to a New Relic feature, or New Relic data. User permissions User-related settings can impact what features or data you have access to. Potential impacts include: Your user type (basic user or full user). Your assigned roles. How your user roles and permissions work depends on which user model you're on. Account access If you're logged in to New Relic and don't see the account or data you expect to see, some causes and solutions include: If your organization has multiple accounts, there's an account switcher at the top left of most New Relic UI pages. Check to see if you can use that to switch accounts. You may have more than one login associated with the same email address. If you think this may be the case, log out and log back in. When you input your email address, the login UI tells you if you have multiple logins and gives you an option for seeing all accounts associated with that email. If you're having trouble accessing an older account, see this Explorers Hub post about multiple account access. It's possible an admin user in your organization changed your permissions for an account. Related docs: Account structure Login and password troubleshooting Delete accounts Pricing plan or edition We have two pricing plans available, and this can impact feature availability. Pricing plans: Our original product-based pricing plan: This plan separates our offerings by product. If you’re on this plan, access to some features may depend on the products you pay for. Our New Relic One pricing plan: This newer pricing plan gives more cross-platform access. The main factors affecting access are your edition and your user type. We also have several Full Stack Observability pricing editions: Standard, Pro, and Enterprise. Learn more about our pricing plans. The entities being monitored Some of our solutions enable functionality that isn’t available to all users, like: Additional UI components, and Data available for querying For example, enabling distributed tracing results in you seeing trace data in the UI and in having trace data available for querying. If you are missing data that you expect to see, see Missing data. Data retention Different types of New Relic data have different data retention periods. Once data has passed a given data retention point, it may be deleted or be aggregated for longer term storage. For details, see Data retention.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 365.61407,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Factors affecting access to features <em>and</em> data",
        "sections": "<em>Account</em> access",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " an option for seeing all <em>accounts</em> associated with that email. If you&#x27;re having trouble accessing an older <em>account</em>, see this Explorers Hub post about multiple <em>account</em> access. It&#x27;s possible an admin user in your organization changed your permissions for an <em>account</em>. Related docs: <em>Account</em> <em>structure</em> Login"
      },
      "id": "60bee5c064441f0505d543bb"
    },
    {
      "sections": [
        "Introduction to account settings",
        "Pricing and billing settings",
        "New Relic One pricing UI",
        "Original pricing UI",
        "Manage users",
        "New Relic One user model",
        "Original user model",
        "Add accounts",
        "General account settings"
      ],
      "title": "Introduction to account settings",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "1dbac104fa7e60637c32a61a80b8b709f6fd84c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings/",
      "published_at": "2021-06-08T20:19:00Z",
      "updated_at": "2021-06-08T20:19:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view and edit account-related settings, go to one.newrelic.com and in the top right corner, select the account dropdown. Keep reading for tips on how to find different kinds of account settings in the UI. Pricing and billing settings To view and edit some billing-related settings, you must be a full user. Basic users have some restrictions. How you access billing-related UI depends on which pricing plan your New Relic account is on: New Relic One pricing UI View and manage billing information based on your user model: New Relic One user model: click the account dropdown, click Administration, and click Plan and usage. From there, you can view your usage data, and view and edit billing information. The ability to manage billing requires the Billing user role, which is included in the default Admin group. Original user model: click the account dropdown and click Account settings. Note that if you're in an organization that has a master/sub-account structure and you're in a sub-account, usage data may only display usage from that account and not the broader organization. Billing management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see Pricing. Original pricing UI If your account is on the original pricing plan, to view and edit billing details: Click the account dropdown, and click Account settings. On the right, there are details about your subscription. For more about your subscription, click Subscription. To view and edit billing details, click Billing. To learn more about original pricing, see Pricing. Manage users How you manage users depends on which user model your users are on: New Relic One user model For managing users on the New Relic One user model, see Manage users. Original user model To manage users on the original user model: from the account dropdown, click Account settings and then click Users and roles. For more on managing these users, see Original users. Add accounts How you add accounts depends on which user model you're on. This is because the user model has impacts on account structure and management. Learn more about adding accounts. General account settings For how to edit things like user preferences and email settings, see the various account settings docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 310.7699,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>account</em> settings",
        "sections": "Pricing <em>and</em> <em>billing</em> settings",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " that if you&#x27;re in an organization that has a master&#x2F;sub-<em>account</em> <em>structure</em> and you&#x27;re in a sub-<em>account</em>, usage data may only display usage from that <em>account</em> and not the broader organization. <em>Billing</em> management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see"
      },
      "id": "6043f38a196a679ae4960f5e"
    }
  ],
  "/docs/accounts/accounts-billing/general-account-settings/default-time-zone-setting": [
    {
      "sections": [
        "Introduction to account settings",
        "Pricing and billing settings",
        "New Relic One pricing UI",
        "Original pricing UI",
        "Manage users",
        "New Relic One user model",
        "Original user model",
        "Add accounts",
        "General account settings"
      ],
      "title": "Introduction to account settings",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "1dbac104fa7e60637c32a61a80b8b709f6fd84c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings/",
      "published_at": "2021-06-08T20:19:00Z",
      "updated_at": "2021-06-08T20:19:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view and edit account-related settings, go to one.newrelic.com and in the top right corner, select the account dropdown. Keep reading for tips on how to find different kinds of account settings in the UI. Pricing and billing settings To view and edit some billing-related settings, you must be a full user. Basic users have some restrictions. How you access billing-related UI depends on which pricing plan your New Relic account is on: New Relic One pricing UI View and manage billing information based on your user model: New Relic One user model: click the account dropdown, click Administration, and click Plan and usage. From there, you can view your usage data, and view and edit billing information. The ability to manage billing requires the Billing user role, which is included in the default Admin group. Original user model: click the account dropdown and click Account settings. Note that if you're in an organization that has a master/sub-account structure and you're in a sub-account, usage data may only display usage from that account and not the broader organization. Billing management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see Pricing. Original pricing UI If your account is on the original pricing plan, to view and edit billing details: Click the account dropdown, and click Account settings. On the right, there are details about your subscription. For more about your subscription, click Subscription. To view and edit billing details, click Billing. To learn more about original pricing, see Pricing. Manage users How you manage users depends on which user model your users are on: New Relic One user model For managing users on the New Relic One user model, see Manage users. Original user model To manage users on the original user model: from the account dropdown, click Account settings and then click Users and roles. For more on managing these users, see Original users. Add accounts How you add accounts depends on which user model you're on. This is because the user model has impacts on account structure and management. Learn more about adding accounts. General account settings For how to edit things like user preferences and email settings, see the various account settings docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 428.31256,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>account</em> <em>settings</em>",
        "sections": "<em>General</em> <em>account</em> <em>settings</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " and management. Learn more about adding <em>accounts</em>. <em>General</em> <em>account</em> <em>settings</em> For how to edit things like user preferences and email <em>settings</em>, see the various <em>account</em> <em>settings</em> docs."
      },
      "id": "6043f38a196a679ae4960f5e"
    },
    {
      "sections": [
        "Eligibility guidelines for Observability for Good",
        "Exceptions",
        "Tip",
        "Additional requirements",
        "Signup procedures",
        "Program Benefits"
      ],
      "title": "Eligibility guidelines for Observability for Good",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "fad5f24e224295de88cdb1d62cb863d9b64b063e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/subscription-pricing/eligibility-guidelines-new-relic-nonprofit-program/",
      "published_at": "2021-06-09T00:46:55Z",
      "updated_at": "2021-05-21T14:38:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides New Relic's Observability for Good program eligibility guidelines for nonprofit, charitable, and NGO organizations. Exceptions Many global nonprofit, charity and NGO organizations are eligible for Observability for Good if the organization has a recognized legal status in their respective country equal to 501(c)(3) status under the United States Internal Revenue Code, with certain exceptions. In addition, all organizations must be verified by TechSoup or the local TechSoup partner. Examples of ineligible organizations include, but are not limited to: Ineligible nonprofits Comments Higher education institutions Private nonprofit and public higher education institutions do not qualify. This includes: Universities Colleges Trade schools Primary and secondary schools (public and private) Primary and secondary schools do not qualify. This includes, but is not limited to: K-12 public school districts Individual K-12 public schools within a state or federally funded school district Standalone K-12 charter schools K-12 Knowledge is Power Program (KiPP) schools Other K-12 schools that are not part of a state or federally funded school district Healthcare organizations providing patient care This includes hospitals, hospital auxiliaries, healthcare systems, and related health services organizations, such as: Nursing or convalescent homes Care and housing for the aged Pregnancy centers Tip Free clinics may qualify. Professional, commerce, mutual, and trade organizations This includes organizations such as: Credit Unions Regulation of business Industry trade shows Professional athletic leagues Tourist bureaus Employee or membership benefit organizations This includes organizations such as: Fraternal Beneficiary societies Associations of employees Employee or member welfare associations Pension and retirement benefits Tip Organizations focusing on the improvement of working conditions may qualify. Legislative or political organizations and advocacy groups Organizations focused on nonpartisan voter education may qualify. Organizations within countries sanctioned by the US This includes organizations within any sanctioned countries included on the US Department of Treasury's Office of Foreign Assets control list , which is updated periodically. Additional requirements In order to participate, approved organizations must also: Submit an application through newrelic.org/signup. Complete the eligibility validation process through TechSoup. Tip Learn about TechSoups local NGO definitions. Accept New Relic's standard terms of service. Be a direct customer of New Relic and have a direct billing relationship with New Relic. Signup procedures To learn more or to sign up as a new or existing New Relic customer, go to newrelic.org/signup. Program Benefits Observability for Good Standard: 4 additional free users per month (+1 free edition user: 5 total) 900 additional gb of data (+100 gb free edition: 1TB total) Observability for Good Pro: 2 free users per month 1 free TB data per month Tip A payment method on file is required for accounts using Observability for Good Pro.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 263.29483,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " through newrelic.org&#x2F;signup. Complete the eligibility validation process through TechSoup. Tip Learn about TechSoups local NGO definitions. Accept New Relic&#x27;s standard terms of service. Be a direct customer of New Relic and have a direct <em>billing</em> relationship with New Relic. Signup procedures To learn"
      },
      "id": "60441bcfe7b9d261305799e5"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "da1d767d7bc556d6b1a0b78e73738936607cb7dd",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/mastersub-account-structure/",
      "published_at": "2021-06-08T19:09:12Z",
      "updated_at": "2021-06-08T04:17:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For organizations on our original account/user model, you can create a more complex account structure with master accounts and sub-accounts that inherit master account settings. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user models, see User models. The major differences are: Original account/user model: Our original model uses a master/sub-account structure, where sub-accounts inherit settings from master accounts. Our partnership accounts also use this model. If your organization is on this model, you're able to create your own sub-accounts. If you're on this model, continue reading below to learn how this account structure works. New Relic One account/user model: This is our new, improved model. For more about how accounts work for this model, see Account structure. Master and sub-account hierarchy For organizations on our original account/user model that have a master/sub-account structure, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.65189,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "<em>Set</em> up <em>accounts</em> with SAML SSO",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "For organizations on our original <em>account</em>&#x2F;user model, you can create a more complex <em>account</em> structure with master <em>accounts</em> and sub-<em>accounts</em> that inherit master <em>account</em> <em>settings</em>. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization"
      },
      "id": "60beef5764441fc42dd543d3"
    }
  ],
  "/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings": [
    {
      "sections": [
        "Eligibility guidelines for Observability for Good",
        "Exceptions",
        "Tip",
        "Additional requirements",
        "Signup procedures",
        "Program Benefits"
      ],
      "title": "Eligibility guidelines for Observability for Good",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "fad5f24e224295de88cdb1d62cb863d9b64b063e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/subscription-pricing/eligibility-guidelines-new-relic-nonprofit-program/",
      "published_at": "2021-06-09T00:46:55Z",
      "updated_at": "2021-05-21T14:38:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides New Relic's Observability for Good program eligibility guidelines for nonprofit, charitable, and NGO organizations. Exceptions Many global nonprofit, charity and NGO organizations are eligible for Observability for Good if the organization has a recognized legal status in their respective country equal to 501(c)(3) status under the United States Internal Revenue Code, with certain exceptions. In addition, all organizations must be verified by TechSoup or the local TechSoup partner. Examples of ineligible organizations include, but are not limited to: Ineligible nonprofits Comments Higher education institutions Private nonprofit and public higher education institutions do not qualify. This includes: Universities Colleges Trade schools Primary and secondary schools (public and private) Primary and secondary schools do not qualify. This includes, but is not limited to: K-12 public school districts Individual K-12 public schools within a state or federally funded school district Standalone K-12 charter schools K-12 Knowledge is Power Program (KiPP) schools Other K-12 schools that are not part of a state or federally funded school district Healthcare organizations providing patient care This includes hospitals, hospital auxiliaries, healthcare systems, and related health services organizations, such as: Nursing or convalescent homes Care and housing for the aged Pregnancy centers Tip Free clinics may qualify. Professional, commerce, mutual, and trade organizations This includes organizations such as: Credit Unions Regulation of business Industry trade shows Professional athletic leagues Tourist bureaus Employee or membership benefit organizations This includes organizations such as: Fraternal Beneficiary societies Associations of employees Employee or member welfare associations Pension and retirement benefits Tip Organizations focusing on the improvement of working conditions may qualify. Legislative or political organizations and advocacy groups Organizations focused on nonpartisan voter education may qualify. Organizations within countries sanctioned by the US This includes organizations within any sanctioned countries included on the US Department of Treasury's Office of Foreign Assets control list , which is updated periodically. Additional requirements In order to participate, approved organizations must also: Submit an application through newrelic.org/signup. Complete the eligibility validation process through TechSoup. Tip Learn about TechSoups local NGO definitions. Accept New Relic's standard terms of service. Be a direct customer of New Relic and have a direct billing relationship with New Relic. Signup procedures To learn more or to sign up as a new or existing New Relic customer, go to newrelic.org/signup. Program Benefits Observability for Good Standard: 4 additional free users per month (+1 free edition user: 5 total) 900 additional gb of data (+100 gb free edition: 1TB total) Observability for Good Pro: 2 free users per month 1 free TB data per month Tip A payment method on file is required for accounts using Observability for Good Pro.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 263.2948,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " through newrelic.org&#x2F;signup. Complete the eligibility validation process through TechSoup. Tip Learn about TechSoups local NGO definitions. Accept New Relic&#x27;s standard terms of service. Be a direct customer of New Relic and have a direct <em>billing</em> relationship with New Relic. Signup procedures To learn"
      },
      "id": "60441bcfe7b9d261305799e5"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "da1d767d7bc556d6b1a0b78e73738936607cb7dd",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/mastersub-account-structure/",
      "published_at": "2021-06-08T19:09:12Z",
      "updated_at": "2021-06-08T04:17:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For organizations on our original account/user model, you can create a more complex account structure with master accounts and sub-accounts that inherit master account settings. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user models, see User models. The major differences are: Original account/user model: Our original model uses a master/sub-account structure, where sub-accounts inherit settings from master accounts. Our partnership accounts also use this model. If your organization is on this model, you're able to create your own sub-accounts. If you're on this model, continue reading below to learn how this account structure works. New Relic One account/user model: This is our new, improved model. For more about how accounts work for this model, see Account structure. Master and sub-account hierarchy For organizations on our original account/user model that have a master/sub-account structure, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.65175,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "<em>Set</em> up <em>accounts</em> with SAML SSO",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "For organizations on our original <em>account</em>&#x2F;user model, you can create a more complex <em>account</em> structure with master <em>accounts</em> and sub-<em>accounts</em> that inherit master <em>account</em> <em>settings</em>. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization"
      },
      "id": "60beef5764441fc42dd543d3"
    },
    {
      "sections": [
        "Factors affecting access to features and data",
        "User permissions",
        "Account access",
        "Pricing plan or edition",
        "The entities being monitored",
        "Data retention"
      ],
      "title": "Factors affecting access to features and data",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "98bf366604050b491ee35c8422414c70bda452b4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/factors-affecting-access-features-data/",
      "published_at": "2021-06-09T01:22:01Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There are several factors that can affect your access to a New Relic feature, or New Relic data. User permissions User-related settings can impact what features or data you have access to. Potential impacts include: Your user type (basic user or full user). Your assigned roles. How your user roles and permissions work depends on which user model you're on. Account access If you're logged in to New Relic and don't see the account or data you expect to see, some causes and solutions include: If your organization has multiple accounts, there's an account switcher at the top left of most New Relic UI pages. Check to see if you can use that to switch accounts. You may have more than one login associated with the same email address. If you think this may be the case, log out and log back in. When you input your email address, the login UI tells you if you have multiple logins and gives you an option for seeing all accounts associated with that email. If you're having trouble accessing an older account, see this Explorers Hub post about multiple account access. It's possible an admin user in your organization changed your permissions for an account. Related docs: Account structure Login and password troubleshooting Delete accounts Pricing plan or edition We have two pricing plans available, and this can impact feature availability. Pricing plans: Our original product-based pricing plan: This plan separates our offerings by product. If you’re on this plan, access to some features may depend on the products you pay for. Our New Relic One pricing plan: This newer pricing plan gives more cross-platform access. The main factors affecting access are your edition and your user type. We also have several Full Stack Observability pricing editions: Standard, Pro, and Enterprise. Learn more about our pricing plans. The entities being monitored Some of our solutions enable functionality that isn’t available to all users, like: Additional UI components, and Data available for querying For example, enabling distributed tracing results in you seeing trace data in the UI and in having trace data available for querying. If you are missing data that you expect to see, see Missing data. Data retention Different types of New Relic data have different data retention periods. Once data has passed a given data retention point, it may be deleted or be aggregated for longer term storage. For details, see Data retention.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.29227,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Factors affecting access to features <em>and</em> data",
        "sections": "<em>Account</em> access",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " and permissions work depends on which user model you&#x27;re on. <em>Account</em> access If you&#x27;re logged in to New Relic and don&#x27;t see the <em>account</em> or data you expect to see, some causes and solutions include: If your organization has multiple <em>accounts</em>, there&#x27;s an <em>account</em> switcher at the top left of most New"
      },
      "id": "60bee5c064441f0505d543bb"
    }
  ],
  "/docs/accounts/accounts-billing/new-relic-one-pricing-billing/new-relic-one-pricing-billing": [
    {
      "sections": [
        "Query and alert on billing/usage data",
        "Available data types",
        "Query examples",
        "Data usage queries",
        "Daily data usage",
        "Daily usage by source",
        "Metrics ingest by source",
        "Month-to-date data usage",
        "Month-to-date estimated data cost",
        "User count queries",
        "Month-to-date full users",
        "Projected monthly full user count",
        "Count full users and basic users",
        "Set usage alerts",
        "Caution",
        "Ingested gigabytes exceed a fixed value",
        "Usage exceeds fixed threshold for GBs",
        "Usage exceeds fixed threshold for users",
        "Usage exceeds fixed threshold for estimated cost",
        "Available attributes"
      ],
      "title": "Query and alert on billing/usage data",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One pricing and billing"
      ],
      "external_id": "a214c27cab73c790ac6ce947a0c189db9677d215",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-pricing-users/usage-queries-alerts/",
      "published_at": "2021-06-08T20:19:01Z",
      "updated_at": "2021-05-21T14:40:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For accounts on our New Relic One pricing plan, we provide a UI for understanding your New Relic usage and managing your data. Additionally, you can: Query your usage data to get more detail than is available in the UI Set up NRQL alert conditions to get notifications about changes in your usage. Note that account hierarchy may affect queried data. See Account structure. Available data types Usage data is attached to these events: NrConsumption records usage every hour, and is the equivalent of \"real-time\" usage. Use this event to observe usage trends over time. NrMTDConsumption generates aggregate values from the NrConsumption event. Use this event to see usage or estimated cost for a billing period. NrUsage records usage every hour and is used to see usage reported per product. To see changes made to your account (for example, user management changes), you can query NrAuditEvent. Query examples The usage UI displays your data usage and billable user count. But to get more detail, you can use these NRQL queries. For definitions of some of the attributes used in these queries, see Attributes. Data usage queries Here are some data usage query examples: Daily data usage This query totals your billable ingested data, and displays a daily value for the past three months: FROM NrConsumption SELECT sum(GigabytesIngested) WHERE productLine = 'DataPlatform' SINCE 3 months ago TIMESERIES 1 day Copy Daily usage by source This query totals your billable ingested data, and displays a daily value for the past three months faceted by the source: FROM NrConsumption SELECT sum(GigabytesIngested) WHERE productLine = 'DataPlatform' SINCE 3 months ago FACET usageMetric TIMESERIES 1 day Copy Metrics ingest by source This query breaks down Metric data by the top ten metric names. You could also facet by appName or host to adjust the analysis. FROM Metric SELECT bytecountestimate()/10e8 as 'GB Estimate' SINCE '2021-04-01' UNTIL '2021-04-08' FACET metricName LIMIT 10 TIMESERIES 1 day Copy Month-to-date data usage This query shows the current full user count. In other words, it shows how much you'd be billed for your data for that month if you were billed right now. FROM NrMTDConsumption SELECT latest(GigabytesIngested) WHERE productLine = 'DataPlatform' SINCE this month Copy Month-to-date estimated data cost This query shows the estimated cost of your ingested data: FROM NrMTDConsumption SELECT latest(estimatedCost) WHERE productLine = 'DataPlatform' SINCE this month Copy User count queries Here are some user-related query examples. For details on how users are counted, see User count calculations. Month-to-date full users This query shows the billable full users for the month. In other words, it shows how much you'd be billed for your users for that month if you were billed right now. FROM NrMTDConsumption SELECT latest(usersBillable) SINCE this month Copy This query shows how many full users were counted by hour. This is useful for seeing how the full user count changed over time. from NrConsumption SELECT max(FullUsers) SINCE 10 days ago TIMESERIES 1 hour Copy Projected monthly full user count This query shows a projected count of monthly users. This query would not be good for using in a dashboard; it requires values based on a) the days remaining in the month, b) the start of the month. Here's an example querying the projected end-of-month count with 10 days left in that month: FROM NrMTDConsumption SELECT predictLinear(FullUsers, 10 days) SINCE '2020-09-01' Copy Count full users and basic users The usage UI shows the count of full users and basic users. The query used is: FROM NrUsage SELECT max(usage) SINCE 10 days ago WHERE productLine='FullStackObservability' WHERE metric in ('FullUsers', 'BasicUsers') FACET metric Copy To see the count of full and basic users over time: FROM NrUsage SELECT max(usage) SINCE 10 days ago WHERE productLine='FullStackObservability' WHERE metric in ('FullUsers', 'BasicUsers') FACET metric TIMESERIES 1 hour Copy Set usage alerts To help manage your billable data, you can set alerts to notify you of unexpected increases in usage. Learn how to create alerts with NRQL queries here. Caution When creating alert conditions, you should set the Evaluation offset value to 60 minutes or your conditions may not trigger. Here are some NRQL alert condition examples. For attribute definitions, see Attributes. Ingested gigabytes exceed a fixed value This query will create an alert when your hourly usage exceeds a fixed value: FROM NrConsumption SELECT sum(GigabytesIngested) WHERE productLine = 'DataPlatform' Copy If you have multiple sub-accounts, you may want to set threshold alerts for a specific subaccount: FROM NrConsumption SELECT sum(GigabytesIngested) WHERE productLine = 'DataPlatform' AND consumingAccountId = YOUR_SUB-ACCOUNT_ID Copy Usage exceeds fixed threshold for GBs This query will create an alert when your usage exceeds fixed monthly threshold for GBs: FROM NrMTDConsumption SELECT latest(GigabytesIngested) WHERE productLine = 'DataPlatform' Copy Usage exceeds fixed threshold for users This query will create an alert when your usage exceeds fixed monthly threshold for billable users: FROM NrMTDConsumption SELECT latest(usersBillable) Copy Usage exceeds fixed threshold for estimated cost This query will create an alert when your usage exceeds fixed threshold for estimated cost: FROM NrMTDConsumption SELECT latest(estimatedCost) WHERE productLine = 'DataPlatform' SINCE this month Copy Available attributes Below are some of the important attributes attached to usage events. Attribute Description productLine The category of usage. There are four options: DataPlatform, FullStackObservability, IncidentIntelligence, or ProactiveDetection. For more details about these categories, see New Relic platform. metric Consolidates multiple categories of usage into a single metric. Helpful when faceting by productLine. consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. estimatedCost Calculates a cost estimate based on usage and metric cost. This is an estimate of costs to date, not your monthly invoice. For more attributes, see the data dictionary.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 464.22748,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Query <em>and</em> alert on <em>billing</em>&#x2F;usage data",
        "sections": "Query <em>and</em> alert on <em>billing</em>&#x2F;usage data",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>pricing</em> <em>and</em> <em>billing</em>",
        "body": "For <em>accounts</em> on our <em>New</em> <em>Relic</em> <em>One</em> <em>pricing</em> plan, we provide a UI for understanding your <em>New</em> <em>Relic</em> usage and managing your data. Additionally, you can: Query your usage data to get more detail than is available in the UI Set up NRQL alert conditions to get notifications about changes in your usage"
      },
      "id": "6043f69ae7b9d2345b579a09"
    },
    {
      "sections": [
        "Introduction to managing users",
        "User management docs"
      ],
      "title": "Introduction to managing users ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "6c2f39333fa3c6931fe616669244cb44f183a167",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/introduction-managing-users/",
      "published_at": "2021-06-09T01:02:33Z",
      "updated_at": "2021-06-09T01:02:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some important things to note before starting: The docs in this section are for managing users on the New Relic One account/user model. Learn about user models. Note that this is a separate topic from our original pricing or New Relic One pricing plans. For managing users on our original user model, see Original users. User management docs Here are our main docs for managing these users: User model/structure: learn some basic aspects of our user model, such as user type (basic user vs full user), default groups (Admin and User), and roles and capabilities. Managing users: an overview of user management concepts, some common user management tasks, and where to manage users in the UI. A tutorial on how to create new groups, roles, and access grants Authentication domain settings: configure an authentication domain, which governs how your users are added to New Relic (manually versus SCIM provisioning), the authentication method they use (manual login versus SAML SSO), managing how basic users become full users, and user session settings. For an overview of SAML SSO and SCIM options, see Introduction to SAML and SCIM. Having problems logging in? See Login troubleshooting. To understand user-related billing factors, see User-related billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 437.88434,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Some important things to note before starting: The docs in this section are for managing users on the <em>New</em> <em>Relic</em> <em>One</em> <em>account</em>&#x2F;user model. Learn about user models. Note that this is a separate topic from our original <em>pricing</em> or <em>New</em> <em>Relic</em> <em>One</em> <em>pricing</em> plans. For managing users on our original user model"
      },
      "id": "6043f3c4196a67a215960f3c"
    },
    {
      "sections": [
        "Introduction to account settings",
        "Pricing and billing settings",
        "New Relic One pricing UI",
        "Original pricing UI",
        "Manage users",
        "New Relic One user model",
        "Original user model",
        "Add accounts",
        "General account settings"
      ],
      "title": "Introduction to account settings",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "1dbac104fa7e60637c32a61a80b8b709f6fd84c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings/",
      "published_at": "2021-06-08T20:19:00Z",
      "updated_at": "2021-06-08T20:19:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view and edit account-related settings, go to one.newrelic.com and in the top right corner, select the account dropdown. Keep reading for tips on how to find different kinds of account settings in the UI. Pricing and billing settings To view and edit some billing-related settings, you must be a full user. Basic users have some restrictions. How you access billing-related UI depends on which pricing plan your New Relic account is on: New Relic One pricing UI View and manage billing information based on your user model: New Relic One user model: click the account dropdown, click Administration, and click Plan and usage. From there, you can view your usage data, and view and edit billing information. The ability to manage billing requires the Billing user role, which is included in the default Admin group. Original user model: click the account dropdown and click Account settings. Note that if you're in an organization that has a master/sub-account structure and you're in a sub-account, usage data may only display usage from that account and not the broader organization. Billing management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see Pricing. Original pricing UI If your account is on the original pricing plan, to view and edit billing details: Click the account dropdown, and click Account settings. On the right, there are details about your subscription. For more about your subscription, click Subscription. To view and edit billing details, click Billing. To learn more about original pricing, see Pricing. Manage users How you manage users depends on which user model your users are on: New Relic One user model For managing users on the New Relic One user model, see Manage users. Original user model To manage users on the original user model: from the account dropdown, click Account settings and then click Users and roles. For more on managing these users, see Original users. Add accounts How you add accounts depends on which user model you're on. This is because the user model has impacts on account structure and management. Learn more about adding accounts. General account settings For how to edit things like user preferences and email settings, see the various account settings docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 404.05618,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>account</em> settings",
        "sections": "<em>New</em> <em>Relic</em> <em>One</em> <em>pricing</em> UI",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " be a full user. Basic users have some restrictions. How you access <em>billing</em>-related UI depends on which <em>pricing</em> plan your <em>New</em> <em>Relic</em> <em>account</em> is on: <em>New</em> <em>Relic</em> <em>One</em> <em>pricing</em> UI View and manage <em>billing</em> information based on your user model: <em>New</em> <em>Relic</em> <em>One</em> user model: click the <em>account</em> dropdown, click"
      },
      "id": "6043f38a196a679ae4960f5e"
    }
  ],
  "/docs/accounts/accounts-billing/new-relic-one-pricing-users/usage-queries-alerts": [
    {
      "sections": [
        "New Relic One pricing and billing",
        "Important",
        "How the New Relic One pricing plan works",
        "Tip",
        "Billing and usage in the UI",
        "Billing calculation details",
        "Data usage calculation",
        "Full user count billing details",
        "Data retention",
        "Billing periods",
        "Usage plan details",
        "Query and alert on usage data",
        "Free tier",
        "Non-profit use of New Relic",
        "Cancel or downgrade"
      ],
      "title": "New Relic One pricing and billing ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One pricing and billing"
      ],
      "external_id": "03d43f14ae24579c81b601571242aef540833c8c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-pricing-billing/new-relic-one-pricing-billing/",
      "published_at": "2021-06-09T00:46:54Z",
      "updated_at": "2021-06-09T00:46:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "An explanation of how New Relic One pricing works, and how to view and manage billing. Important This document explains the New Relic One pricing plan. If you’re on our original pricing plan, see Original pricing. Not sure which you're on? See Overview of pricing. How the New Relic One pricing plan works Tip To use our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Starting July 30, 2020, all of our new customers are on a pricing plan that we call New Relic One pricing. Customers on our original pricing plan are able to transition to this pricing. For New Relic One pricing, billing is based on these factors: The pricing edition (Standard, Pro, Enterprise). Higher editions give access to more account-related admin features, more support, longer data retention, and other features (learn more). The amount of data ingested. 100 GBs per month is free. $0.25 per GB ingested above that. The total number of provisioned full users (users with access to everything available at that edition). Basic users are free. Standard edition includes one full user for free, and a max of five. For Applied Intelligence, our intelligent alert/detection system: the number of incident events above the free 1000 per month. (Note that our alerting functionality is available for free and doesn't count towards this limit.) For a summary of what's included for free, see Free edition. For an overview of pricing, see our Pricing page. Keep reading for details about New Relic One pricing and billing. Billing and usage in the UI For how to view and manage billing and usage in the UI, see Pricing and billing UI. If you need more detail than the usage UI shows, you can also run queries of your usage data and set up alerts. Billing calculation details For accounts on New Relic One pricing, some high-level billing information is displayed in the UI. Here are some more details about how billing works: Data usage calculation One pricing factor is your ingested data. In this context, “ingested” refers to the data actually saved to your account after we apply various data trimming and data transformation rules. In other words, it’s not the size of the raw data sent to New Relic, but the size of the data that actually ends up stored. To view and manage your usage, go to the usage UI. Other calculation details: In the context of our pricing plan, a GB is defined as 1 billion bytes. Monthly data ingested is rounded down to the nearest integer. For example, if your account uses 100.9 GBs during a month, that’s counted as 100 GBs. For more on how data is ingested, see Manage data ingest. For how to query usage, see Query and alert on usage. Full user count billing details For accounts with New Relic One pricing, the monthly count of provisioned full users is one billing factor. To give an example: if you're on the Pro pricing edition and your organization has 100 full users during the month of January, you'd be billed for 100 full users for that month. A full user counts as a billable user the moment they're added to a New Relic organization (provisioned), whether or not that user has logged into or used New Relic yet. A user's user type is meant to be long-term setting determined by a user's expected New Relic duties and responsibilities. Because user type is a billing factor, we have restrictions around how often a full user can be downgraded to a basic user: a full user can downgrade to a basic user a maximum of two times in a rolling 12-month period. If a full user has been changed to a basic user two times in that 12-month period, that user won't be able to return to being a basic user until the start of the next 12-month period. To learn reasons for assigning one user type or another, see Tips on assigning user type. Other user-related billing details: You can see your full user count in the UI. The count of full users is prorated based on the start of a New Relic subscription, or based on when a user is created as a full user or converted to a full user. A user can have a maximum of either three concurrent active sessions, or three unique IP addresses in use at any given time. The Standard edition of the New Relic One pricing plan includes one free full user. Users with duplicate email addresses are only counted once. For organizations on our original user model, a user may be set as a basic user in one account, and as a full user in another account. In such cases, the full user status takes precedence and that user is considered a full user. For organizations that have multiple accounts, the billable users are counted on the main account responsible for payment. This can mean that if you’re viewing or querying your user count when in a sub-account, you may not see the complete user count for that organization. For how to query usage data, see Query and alert on usage. For more on user capabilities, see Users and roles. Data retention See Data retention. Billing periods For pay-as-you-go customers, billing occurs at the end of the month (UTC), and you can see this tracked in the UI. When you input your credit card and start to be charged, your end-of-month bill will take into account all activity (billable data usage and users) that occurred since the beginning of that month. For example: if you input your credit card in the middle of the month, and so far at that point your account has 200 GBs of usage for that month, that 200 GBs counts towards your end-of-month bill. For how to query user-related usage, see Query and alert on usage. Usage plan details There are two New Relic One pricing usage plans: Pay-as-you-go: This plan bills at the end of each month. There are no commitments and you can cancel at any time. For details, see Usage plans. Annual pool of funds: This plan applies to some customers who have subscribed for a year or more. For details, see Usage plans. For some frequently asked questions, see Pricing FAQs. Query and alert on usage data To create detailed queries of your usage, and get notifications when you are close to hitting certain usage levels, see Query usage data. Free tier If your organization is on New Relic One pricing and on the Standard pricing edition for Full Stack Observability, you can use New Relic free, forever, if you stay under the free allowed limits. Here's a summary of what Standard edition gets access to for free: A single account (Pro and Enterprise Full Stack Observability editions can have multiple accounts per organization). Up to 100 GBs of ingested data per month. One full user, and unlimited basic users. Access to alerts and Applied Intelligence (up to 1,000 Incident Intelligence events per month). To upgrade to Pro or Enterprise, or to learn more about pricing, see New Relic pricing. Non-profit use of New Relic If you’re a non-profit and want to use New Relic at special pricing, see our Non-profit eligibility docs. Cancel or downgrade See Downgrade account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 764.7283,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> <em>One</em> <em>pricing</em> <em>and</em> <em>billing</em> ",
        "sections": "<em>New</em> <em>Relic</em> <em>One</em> <em>pricing</em> <em>and</em> <em>billing</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>pricing</em> <em>and</em> <em>billing</em>",
        "body": ". Customers on our original <em>pricing</em> plan are able to transition to this <em>pricing</em>. For <em>New</em> <em>Relic</em> <em>One</em> <em>pricing</em>, <em>billing</em> is based on these factors: The <em>pricing</em> edition (Standard, Pro, Enterprise). Higher editions give access to more <em>account</em>-related admin features, more support, longer data retention"
      },
      "id": "6043f69a64441f7b26378eda"
    },
    {
      "sections": [
        "Introduction to managing users",
        "User management docs"
      ],
      "title": "Introduction to managing users ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "6c2f39333fa3c6931fe616669244cb44f183a167",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/introduction-managing-users/",
      "published_at": "2021-06-09T01:02:33Z",
      "updated_at": "2021-06-09T01:02:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some important things to note before starting: The docs in this section are for managing users on the New Relic One account/user model. Learn about user models. Note that this is a separate topic from our original pricing or New Relic One pricing plans. For managing users on our original user model, see Original users. User management docs Here are our main docs for managing these users: User model/structure: learn some basic aspects of our user model, such as user type (basic user vs full user), default groups (Admin and User), and roles and capabilities. Managing users: an overview of user management concepts, some common user management tasks, and where to manage users in the UI. A tutorial on how to create new groups, roles, and access grants Authentication domain settings: configure an authentication domain, which governs how your users are added to New Relic (manually versus SCIM provisioning), the authentication method they use (manual login versus SAML SSO), managing how basic users become full users, and user session settings. For an overview of SAML SSO and SCIM options, see Introduction to SAML and SCIM. Having problems logging in? See Login troubleshooting. To understand user-related billing factors, see User-related billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 437.88397,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Some important things to note before starting: The docs in this section are for managing users on the <em>New</em> <em>Relic</em> <em>One</em> <em>account</em>&#x2F;user model. Learn about user models. Note that this is a separate topic from our original <em>pricing</em> or <em>New</em> <em>Relic</em> <em>One</em> <em>pricing</em> plans. For managing users on our original user model"
      },
      "id": "6043f3c4196a67a215960f3c"
    },
    {
      "sections": [
        "Introduction to account settings",
        "Pricing and billing settings",
        "New Relic One pricing UI",
        "Original pricing UI",
        "Manage users",
        "New Relic One user model",
        "Original user model",
        "Add accounts",
        "General account settings"
      ],
      "title": "Introduction to account settings",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "1dbac104fa7e60637c32a61a80b8b709f6fd84c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings/",
      "published_at": "2021-06-08T20:19:00Z",
      "updated_at": "2021-06-08T20:19:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view and edit account-related settings, go to one.newrelic.com and in the top right corner, select the account dropdown. Keep reading for tips on how to find different kinds of account settings in the UI. Pricing and billing settings To view and edit some billing-related settings, you must be a full user. Basic users have some restrictions. How you access billing-related UI depends on which pricing plan your New Relic account is on: New Relic One pricing UI View and manage billing information based on your user model: New Relic One user model: click the account dropdown, click Administration, and click Plan and usage. From there, you can view your usage data, and view and edit billing information. The ability to manage billing requires the Billing user role, which is included in the default Admin group. Original user model: click the account dropdown and click Account settings. Note that if you're in an organization that has a master/sub-account structure and you're in a sub-account, usage data may only display usage from that account and not the broader organization. Billing management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see Pricing. Original pricing UI If your account is on the original pricing plan, to view and edit billing details: Click the account dropdown, and click Account settings. On the right, there are details about your subscription. For more about your subscription, click Subscription. To view and edit billing details, click Billing. To learn more about original pricing, see Pricing. Manage users How you manage users depends on which user model your users are on: New Relic One user model For managing users on the New Relic One user model, see Manage users. Original user model To manage users on the original user model: from the account dropdown, click Account settings and then click Users and roles. For more on managing these users, see Original users. Add accounts How you add accounts depends on which user model you're on. This is because the user model has impacts on account structure and management. Learn more about adding accounts. General account settings For how to edit things like user preferences and email settings, see the various account settings docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 404.05585,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>account</em> settings",
        "sections": "<em>New</em> <em>Relic</em> <em>One</em> <em>pricing</em> UI",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " be a full user. Basic users have some restrictions. How you access <em>billing</em>-related UI depends on which <em>pricing</em> plan your <em>New</em> <em>Relic</em> <em>account</em> is on: <em>New</em> <em>Relic</em> <em>One</em> <em>pricing</em> UI View and manage <em>billing</em> information based on your user model: <em>New</em> <em>Relic</em> <em>One</em> user model: click the <em>account</em> dropdown, click"
      },
      "id": "6043f38a196a679ae4960f5e"
    }
  ],
  "/docs/accounts/accounts-billing/new-relic-one-user-management/add-manage-users-groups-roles": [
    {
      "sections": [
        "Introduction to managing users",
        "User management docs"
      ],
      "title": "Introduction to managing users ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "6c2f39333fa3c6931fe616669244cb44f183a167",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/introduction-managing-users/",
      "published_at": "2021-06-09T01:02:33Z",
      "updated_at": "2021-06-09T01:02:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some important things to note before starting: The docs in this section are for managing users on the New Relic One account/user model. Learn about user models. Note that this is a separate topic from our original pricing or New Relic One pricing plans. For managing users on our original user model, see Original users. User management docs Here are our main docs for managing these users: User model/structure: learn some basic aspects of our user model, such as user type (basic user vs full user), default groups (Admin and User), and roles and capabilities. Managing users: an overview of user management concepts, some common user management tasks, and where to manage users in the UI. A tutorial on how to create new groups, roles, and access grants Authentication domain settings: configure an authentication domain, which governs how your users are added to New Relic (manually versus SCIM provisioning), the authentication method they use (manual login versus SAML SSO), managing how basic users become full users, and user session settings. For an overview of SAML SSO and SCIM options, see Introduction to SAML and SCIM. Having problems logging in? See Login troubleshooting. To understand user-related billing factors, see User-related billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 738.65796,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>managing</em> <em>users</em> ",
        "sections": "<em>User</em> <em>management</em> docs",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": "Some important things to note before starting: The docs in this section are for managing users on the <em>New</em> <em>Relic</em> <em>One</em> <em>account</em>&#x2F;<em>user</em> model. Learn about <em>user</em> models. Note that this is a separate topic from our original pricing or <em>New</em> <em>Relic</em> <em>One</em> pricing plans. For managing users on our original <em>user</em> model"
      },
      "id": "6043f3c4196a67a215960f3c"
    },
    {
      "sections": [
        "OneLogin SCIM/SSO application configuration",
        "Requirements",
        "Create authentication domain and enable SAML and SCIM",
        "Configure SCIM/SSO application",
        "Step 1. Fill in the configuration form",
        "Step 2. Fill in the rules form",
        "A rule that only uses actions",
        "Step 3. Fill in the Parameters form",
        "Step 4. Fill in the provisioning form",
        "Tip",
        "Step 5. Save your changes",
        "Assign users"
      ],
      "title": "OneLogin SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d298162c055490c99117f564c3ea9c2ea5dfd8d1",
      "image": "https://docs.newrelic.com/static/8f585557ea58f70d94a746e6439bf1ad/c1b63/onelogin_rules_conditions_actions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/onelogin-scimsso-application-configuration/",
      "published_at": "2021-06-09T00:45:54Z",
      "updated_at": "2021-06-09T00:45:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Create authentication domain and enable SAML and SCIM If you haven't already, create a new authentication domain with SAML SSO enabled and SCIM enabled. You will use values from this UI in later steps. Configure SCIM/SSO application Configuration for the New Relic SCIM/SSO application is split across several forms. This section describes the different forms that need to be configured. From the New Relic by organization application page, fill in the following forms: Step 1. Fill in the configuration form In the left pane, select Configuration and complete the following: Take the authentication domain ID and SCIM bearer token values from New Relic's authentication domain UI and input them into the appropriate app fields. Leave the API Connection disabled until all the configuration described in the following sections is completed. After completing all the configuration, enable the connection. Step 2. Fill in the rules form Configure the user groups to send to New Relic using rules. OneLogin provides this documentation which describes how to use rules to provision groups for users. Decide what type of groups to send along with your users to New Relic. If your organization is using Active Directory or LDAP, you might choose to use security groups to define your users capabilities at New Relic. Another reasonable group choice is OneLogin role. On the New Relic side, your user's groups define their capabilities. The groups that are sent with users will be mapped to New Relic capability groups. Note that at the moment, there is no way to delete a group from the OneLogin side. This is a known limitation from OneLogin. Removing or changing rules does not delete groups already sent to New Relic. If you wish to no longer use a group, removing all the users from the group will prevent it from being used at New Relic. A rule that only uses actions Here's an example rule configuration does not use any conditions. The conditions are left empty to avoid applying any filtering logic to the users. All users will be sent in this example. If you want to send only a subset of users, you need to specify conditions to select the subset. The actions describe where to retrieve the value for the group name and how to parse the value. In this example, we retrieve the group name from the OneLogin role field. The OneLogin role field only has a single value, but sometimes the source for the group name contains other fields besides group name. In other words, some sources give you a list of fields and values and only one of those fields has the value you want to use. In this case, you can insert a regular expression in with value that matches field to find and extract the value for the group name. This example uses the entire value of the For each field for the group name. Step 3. Fill in the Parameters form In the left pane, select Parameters and complete the following: Click Groups field. Check Include in User Provisioning. Click Save. Step 4. Fill in the provisioning form In the left pane, select Provisioning and complete the following: Check Enable provisioning. Under Require admin approval before this action is performed, uncheck these options: Create user Delete user Update user Tip If you do not uncheck these options, SCIM provisioning requests will not be sent until an administrator approves them. Set When users are deleted in OneLogin, or the user's app access is removed, perform the below action to Delete. Set When user accounts are suspended in OneLogin, perform the following action to Suspend. Step 5. Save your changes After you complete the above forms, click Save. Then, return to the Configuration form and enable the API connection. Assign users After New Relic SCIM/SSO application configuration is finished and New Relic side configuration is finished, you can begin to assign users to the application. Assign the New Relic SCIM/SSO application to a user. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click Administration. From the OneLogin Administration page, choose the Users menu Users item. From the OneLogin Users page, click the user you want to assign the application to. From the user's page, click Applications. From the user's application page, click the plus sign and select the \"New Relic by Organization\" application. From the Edit New Relic by Organization login for user page, enter the user's time zone in IANA Time Zone database format (also known as the Olson time zone database format) and click Save. If you're using Roles to define your New Relic capability groups, from the user's application page, click the proper role(s) for the user and then click Save User. OneLogin provisions users in near real time so almost the moment you save the user in OneLogin, the user should be ready to use at New Relic. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 416.28778,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>OneLogin</em> SCIM&#x2F;SSO application configuration",
        "sections": "<em>OneLogin</em> SCIM&#x2F;SSO application configuration",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Our automated <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your <em>New</em> <em>Relic</em> users from your identity provider via SCIM. This guide provides <em>One</em>Login-specific details on how to configure the <em>New</em> <em>Relic</em> <em>One</em>Login SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f34228ccbccafb2c606a"
    },
    {
      "sections": [
        "Azure AD SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Create authentication domain and enable SAML",
        "Step 2. Configure connection",
        "Step 3. Configure provisioning rules",
        "Tip",
        "Step 4. Assign users and groups"
      ],
      "title": "Azure AD SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d6e7f7e95daa833451159a3db4e2c4257270b5e9",
      "image": "https://docs.newrelic.com/static/0a9a32fd5041e6e2ea37cc5f032b6910/8c557/Azure_AD_Provisioning_Attribute_Mapping_2_0.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/azure-ad-scimsso-application-configuration/",
      "published_at": "2021-06-09T01:01:07Z",
      "updated_at": "2021-06-09T01:01:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM/SSO application. Requirements Before using this guide, read the requirements and procedure overview. Step 1. Create authentication domain and enable SAML If you haven't already, enable SAML SSO and then return here to complete these instructions. Step 2. Configure connection Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning link in the sidebar. In the main pane, click on Get started. In the Provisioning Mode pick-list, choose Automatic. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. In Azure AD's New Relic SCIM/SSO app, in the Admin credentials section, fill out the Tenant URL and Secret token fields with the values provided in New Relic's authentication domain UI. To verify you can connect to New Relic, click Test Connection. When you see a message indicating verification success, click Save. The New Relic SCIM/SSO application can now connect with New Relic. Continue with the following section to configure the provisioning rules. Step 3. Configure provisioning rules Initially, nothing is configured to be sent to New Relic. You must configure Azure AD to send changes for user creation, updates, and deactivation. Go to the Provisioning page and complete the following: Expand the Mappings section. Click Provision Azure Active Directory Users. Verify the Target Object Actions Create Update and Delete checkboxes are all checked. Verify the Attribute Mappings look correct for your environment. Each of the New Relic attributes shown in the list must receive a value. Tip Ensure that the Azure Active Directory attributes shown in the list on the left are good sources for the information to send to New Relic. In particular, not all environments set the mail attribute. If your environment does not set the mail attribute, userPrincipalName could be a good alternative. Leave the switch for Enabled set to Off until you're done with the user and group configuration in the next section. Once all configuration is ready, return to this page and set the switch to On. Click Save. Here's an example of a filled-in attribute mapping page with the default values. Your values may be configured differently depending on your situation. After saving the provisioning rules, the New Relic SCIM/SSO application is ready to provision any changes made to users assigned to the application. Continue with the following section to assign users and groups to the New Relic SCIM/SSO application. Step 4. Assign users and groups After the New Relic SCIM/SSO application configuration and the New Relic side configuration is finished, you can assign users and groups to the application. From the New Relic SCIM/SSO application page, click on Users and groups in the sidebar. Click +Add user. From the Add Assignment page, click on Users and groups, and select the appropriate users or groups that you'd like to provision. Then click Select and Assign. The selected users and groups appear on the Users and groups page, indicating that they're candidates for provisioning. Repeat the steps to add users and groups until all desired entities have been assigned to the application. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 415.67773,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Step 4. Assign <em>users</em> <em>and</em> groups",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": ". If your organization is on <em>New</em> <em>Relic</em> <em>One</em> pricing, these users are billable. To convert users to free basic users, use the <em>User</em> <em>management</em> UI. After adding users, you&#x27;ll want to grant them access to specific <em>New</em> <em>Relic</em> <em>accounts</em>, specific groups, and specific roles. To learn how to do this, see Manage users."
      },
      "id": "6043f5c964441fcfb0378ef3"
    }
  ],
  "/docs/accounts/accounts-billing/new-relic-one-user-management/authentication-domains-saml-sso-scim-more": [
    {
      "sections": [
        "Introduction to managing users",
        "User management docs"
      ],
      "title": "Introduction to managing users ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "6c2f39333fa3c6931fe616669244cb44f183a167",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/introduction-managing-users/",
      "published_at": "2021-06-09T01:02:33Z",
      "updated_at": "2021-06-09T01:02:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some important things to note before starting: The docs in this section are for managing users on the New Relic One account/user model. Learn about user models. Note that this is a separate topic from our original pricing or New Relic One pricing plans. For managing users on our original user model, see Original users. User management docs Here are our main docs for managing these users: User model/structure: learn some basic aspects of our user model, such as user type (basic user vs full user), default groups (Admin and User), and roles and capabilities. Managing users: an overview of user management concepts, some common user management tasks, and where to manage users in the UI. A tutorial on how to create new groups, roles, and access grants Authentication domain settings: configure an authentication domain, which governs how your users are added to New Relic (manually versus SCIM provisioning), the authentication method they use (manual login versus SAML SSO), managing how basic users become full users, and user session settings. For an overview of SAML SSO and SCIM options, see Introduction to SAML and SCIM. Having problems logging in? See Login troubleshooting. To understand user-related billing factors, see User-related billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 601.0356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "Accounts <em>and</em> billing",
        "body": " provisioning), the <em>authentication</em> method they use (manual login versus <em>SAML</em> <em>SSO</em>), managing how basic users become full users, and user session <em>settings</em>. For an overview of <em>SAML</em> <em>SSO</em> and <em>SCIM</em> options, see Introduction to <em>SAML</em> and <em>SCIM</em>. Having problems logging in? See Login troubleshooting. To understand user-related billing factors, see User-related billing."
      },
      "id": "6043f3c4196a67a215960f3c"
    },
    {
      "sections": [
        "Add users to SAML accounts (original user model)",
        "Important",
        "Overview",
        "Requirements",
        "Add and confirm users",
        "Caution",
        "Bypass email confirmation"
      ],
      "title": "Add users to SAML accounts (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "1ab1cb53dc639014a77f74442c2a89c37b021cc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/add-users-saml-accounts/",
      "published_at": "2021-06-08T18:49:13Z",
      "updated_at": "2021-06-08T18:49:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For an overview of SAML and SCIM options, see Introduction to SAML SSO and SCIM. Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. As an additional security measure for SAML single sign-on (SSO) accounts, users are not added until they complete the email confirmation that New Relic sends automatically. Users in the pending state (not yet confirmed) won't receive notifications, such as alerts. For accounts without SAML SSO integration, the account Owner and Admins can add new users without requiring confirmation. Requirements For requirements, including which New Relic users this feature applies to, see Requirements. Add and confirm users Follow this process to add and confirm users for New Relic accounts with SAML SSO: The account's Owner or an Administrator adds new users: Go to: account dropdown > Account settings > Account > Summary. On SAML-enabled accounts, New Relic flags the users as Pending and sends an email confirmation. (Pending users will not receive notifications associated with their user role, such as alert notifications.) Users select the link in the email to confirm their account, which directs them to the SAML provider's login URL. When users successfully sign into their SAML SSO end point (Auth0, Okta, OneLogin, Ping Identity, Salesforce, etc.), New Relic flags the users as Active. Caution If you disable SAML SSO, New Relic automatically flags all of your Pending users as Active. If you decide to re-enable SAML SSO later, New Relic automatically flags all users except the Owner as Pending, and they will need to confirm their account access by email. Admin user's API keys for all users that go into a pending state will be deleted. Bypass email confirmation Depending on your subscription level, you may have the option to claim the domain names that you own and bypass the SAML SSO confirmation process. When the account Owner or Administrators add new users and their email address has a domain that matches the account's domains, New Relic automatically adds them as Active users. Benefits of identifying domain ownership include: Adds a useful feature to your account. Claims domains as your own. Makes it easier for your employees to get started with New Relic, because they do not need to confirm their account access. Maintains security when adding users outside of your organization. To flag your account as owning one or more domain names, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 525.75507,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add users to <em>SAML</em> accounts (original user model)",
        "sections": "Add users to <em>SAML</em> accounts (original user model)",
        "tags": "<em>SAML</em> <em>SSO</em> (original users)",
        "body": "Important These docs are for setting up <em>SSO</em> for users on our original user model. For an overview of <em>SAML</em> and <em>SCIM</em> options, see Introduction to <em>SAML</em> <em>SSO</em> and <em>SCIM</em>. Overview For an overview of our <em>SAML</em> <em>SSO</em> and <em>SCIM</em> docs, first read Introduction to <em>SAML</em> <em>SSO</em> and <em>SCIM</em>. As an additional security measure"
      },
      "id": "6043f342e7b9d20ca55799fa"
    },
    {
      "sections": [
        "Introduction to automated user management (AUM) and single-sign on (SSO)",
        "Requirements",
        "Set up automated user management (AUM)"
      ],
      "title": "Introduction to automated user management (AUM) and single-sign on (SSO)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "831a5f1137eccac9540d716302645b4e976a6332",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign/",
      "published_at": "2021-06-08T18:48:09Z",
      "updated_at": "2021-06-08T18:48:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic lets you set up automated user management (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this automated provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements and impacts: Requires Enterprise edition. User model-related requirements: This feature creates users on our New Relic One user model. To implement AUM, you must be on our New Relic One user model and have user management roles assigned. If you're on our original user model (or otherwise can't seem to implement this feature), talk to your New Relic account representative. Supports SAML 2.0 standard for single sign on (SSO). Supports SCIM 2.0 standard. Supported identity providers: Okta, Azure AD, OneLogin. For unsupported identity providers, we have a SCIM API. Notes on initial enabling of AUM: We don't currently support toggling SCIM on or off. If an authentication domain has already been set up with the source of users as Manual, you can't change it to SCIM. When first enabled, the bearer token is generated and only shown once. If you need to view a bearer token later, the only way to do this is to generate a new one, and that will invalidate the old one and any integrations using the old token. Set up automated user management (AUM) For an explanation of how your identity provider groups map over to New Relic groups, see Group and role mapping. To use automated user management to import users from your identity provider: It's important to first review the requirements. In the authentication domain UI, create a new authentication domain. For that authentication domain, enable SCIM and configure SAML SSO. Configure your identity provider using a relevant guide: Azure AD | Okta | OneLogin. If you don't use one of those services, we also have a SCIM API. Note that your users are created in New Relic as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. Recommended: Set a time zone in your identity provider. If not specified, our UI shows date/times with the UTC time zone. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). If you have issues, contact your account representative. After being provisioned, your users can click on the New Relic SCIM/SSO application tile in their identity provider to be logged into New Relic. To learn more about New Relic's roles and capabilities, see Standard roles.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 515.20593,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to automated user management (AUM) <em>and</em> single-sign on (<em>SSO</em>)",
        "sections": "Introduction to automated user management (AUM) <em>and</em> single-sign on (<em>SSO</em>)",
        "tags": "Accounts <em>and</em> billing",
        "body": " to import users from your identity provider: It&#x27;s important to first review the requirements. In the <em>authentication</em> <em>domain</em> UI, create a new <em>authentication</em> <em>domain</em>. For that <em>authentication</em> <em>domain</em>, enable <em>SCIM</em> and configure <em>SAML</em> <em>SSO</em>. Configure your identity provider using a relevant guide: Azure AD | Okta"
      },
      "id": "6043d60e64441ff8f5378f37"
    }
  ],
  "/docs/accounts/accounts-billing/new-relic-one-user-management/introduction-managing-users": [
    {
      "sections": [
        "Add and manage users, groups, and roles",
        "Important",
        "Requirements",
        "Manage users in the UI",
        "Overview of user management concepts",
        "User management definitions",
        "Example user management tasks",
        "Add, edit, and delete users",
        "Create new groups and roles",
        "Grant users ability to manage other users",
        "Control how basic users upgrade to full users",
        "Track changes"
      ],
      "title": "Add and manage users, groups, and roles",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "9e37836740ce56302734d4af636bdbe087b4dbc3",
      "image": "https://docs.newrelic.com/static/b1c2da968a637f68569e890c8bd72a1c/c1b63/new-relic-one-user-mgmt.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/add-manage-users-groups-roles/",
      "published_at": "2021-06-08T20:19:01Z",
      "updated_at": "2021-06-02T20:02:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our New Relic One user model, we provide various user management features, including the ability to: Use role based access control (RBAC) to assign default or custom roles to user groups Create custom user groups Grant user groups access to specific roles and accounts Important This doc applies to users on the New Relic One user model. For managing users on our original user model, see Original users. Not sure which user model you're on? See User models. Requirements To see if you can access these user management features, go to the user management UI and see what you have access to. Access requirements: These features allow managing of users on the New Relic One user model. To learn more, see User models. To avoid configuration conflicts, ensure that only one user is managing users at a time. Simultaneous configuration by more than one user may result in errors and unexpected results. Most capabilities require the Authentication domain manager role and some require the Organization manager role. For details, see Standard roles. Pricing edition requirements: To manage user groups, roles, and access grants: Pro or Enterprise edition is required. To import users from an identity provider: Enterprise is required. A New Relic user can have a maximum of either three concurrent active sessions, or three unique IP addresses in use at any given time. Manage users in the UI For users on the New Relic One user model, to find your user management options: From the account dropdown, select Administration. There are two user management UI pages there: User management: Use this to add users, update user information, and approve upgrade requests. Organization and access: Use this page to create and manage groups, roles, and access grants, and to set up SAML SSO and SCIM provisioning. Important If you can't see these UI pages, it may be because you're on our original user model or because you don't have the required user management role. Overview of user management concepts To optimally use our more advanced user management features, it's important to first understand the concept of the \"access grant.\" An access grant gives a group of users access to a) a role and b) an account. For a New Relic organization that has many accounts, groups typically require more than one access grant because users in a group usually need access to multiple accounts and roles. The diagram below explains the elements that make up an access grant. Note that if your organization is on Standard edition and want to assign a user to a default group (Admin or User), you don't need to create an access grant: you would simply add a user to that group and you're done. But for Pro and Enterprise edition, if you're trying to grant users access to a custom group, a custom role, or to other accounts, you must create an access grant. A diagram explaining how you can grant user groups access to roles and accounts. Note that this applies to users on our New Relic One user model (and not our original user model). Some tips on setting up access grants: It may help to first plan out how your access grants will be organized. How many accounts will you have? What user groups will get access to which roles and which accounts? Will you use our default groups and roles or create your own custom groups and roles? For smaller, flatter organizations that are okay with full internal transparency, you may only need a couple groups. A common configuration for organizations with many accounts (roughly 20 or more) is setting up groups with the more organization-scoped roles (Organization manager, Authentication domain manager, and Billing user) on the primary account, and then on other accounts, setting up groups with the more product-scoped roles (like All product admin, Standard user, or custom roles). For examples of some common user management tasks, see Example tasks. User management definitions Here are some definitions of our user management terms and how they relate to each other: A capability is an ability to use or edit a specific, granular New Relic feature. Examples of capabilities: The ability to modify APM settings The ability to delete alert conditions A role is a set of capabilities. Our default standard roles have various capability sets, and you can create custom roles that have a custom set of capabilities. A user group has one or more roles associated with it. You assign your users to a group. We have default user groups (Admin and User), and you can make your own groups. An access grant is what grants a user group access to roles and specific New Relic accounts. An access grant essentially states, \"This group is assigned this role on this New Relic account.\" Adding a user to a group doesn’t do anything unless that group is included in an access grant. An authentication domain contains a set of users who are added to New Relic and who log in to New Relic in the same way. For example, you may have one authentication domain for users who log in via username/password and another authentication domain for users who log in via SAML. If a user is a basic user, this takes precedence over any role-related limitations. For more on this, see Basic user and roles. Example user management tasks In the Organization and access UI, you can create custom groups, roles, and grant access to user groups. Here are some example user management procedures: Add, edit, and delete users To add or edit users, use the User management UI. To add users: If you have multiple authentication domains, choose one from the authentication domain dropdown. Click Add user. Complete the process, including choosing user type and user group. If you've unintentionally signed up for New Relic and want to delete your entire account, see Delete organization. Create new groups and roles See our user management tutorial. Grant users ability to manage other users To grant your users the ability to manage other users, you'll need to add users to a group that has the Authentication domain manager role. Important Users cannot have only organization-scoped roles assigned; they must also be in a group that has account-scoped roles (for example, the default Admin group). You have two options: From the User management UI, you can add a user to the default Admin group, which includes both of those roles. OR You can assign those roles to a custom group. From the Organization and access UI: Select Access grants, and choose To this organization. Create an access grant that assigns the Authentication domain manager role to a custom group. From the User management UI, add users to that group. To see a tutorial on creating new groups and roles, see Tutorial. Control how basic users upgrade to full users See the authentication domain settings. Track changes To see an audit log of changes to your account, including user management actions, you can query the NrAuditEvent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 562.9397,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>and</em> <em>manage</em> <em>users</em>, groups, <em>and</em> roles",
        "sections": "Add <em>and</em> <em>manage</em> <em>users</em>, groups, <em>and</em> roles",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": "For users on our <em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model, we provide various <em>user</em> <em>management</em> features, including the ability to: Use role based access control (RBAC) to assign default or custom roles to <em>user</em> groups Create custom <em>user</em> groups Grant <em>user</em> groups access to specific roles and <em>accounts</em> Important"
      },
      "id": "603e7bce28ccbc415beba74c"
    },
    {
      "sections": [
        "OneLogin SCIM/SSO application configuration",
        "Requirements",
        "Create authentication domain and enable SAML and SCIM",
        "Configure SCIM/SSO application",
        "Step 1. Fill in the configuration form",
        "Step 2. Fill in the rules form",
        "A rule that only uses actions",
        "Step 3. Fill in the Parameters form",
        "Step 4. Fill in the provisioning form",
        "Tip",
        "Step 5. Save your changes",
        "Assign users"
      ],
      "title": "OneLogin SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d298162c055490c99117f564c3ea9c2ea5dfd8d1",
      "image": "https://docs.newrelic.com/static/8f585557ea58f70d94a746e6439bf1ad/c1b63/onelogin_rules_conditions_actions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/onelogin-scimsso-application-configuration/",
      "published_at": "2021-06-09T00:45:54Z",
      "updated_at": "2021-06-09T00:45:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Create authentication domain and enable SAML and SCIM If you haven't already, create a new authentication domain with SAML SSO enabled and SCIM enabled. You will use values from this UI in later steps. Configure SCIM/SSO application Configuration for the New Relic SCIM/SSO application is split across several forms. This section describes the different forms that need to be configured. From the New Relic by organization application page, fill in the following forms: Step 1. Fill in the configuration form In the left pane, select Configuration and complete the following: Take the authentication domain ID and SCIM bearer token values from New Relic's authentication domain UI and input them into the appropriate app fields. Leave the API Connection disabled until all the configuration described in the following sections is completed. After completing all the configuration, enable the connection. Step 2. Fill in the rules form Configure the user groups to send to New Relic using rules. OneLogin provides this documentation which describes how to use rules to provision groups for users. Decide what type of groups to send along with your users to New Relic. If your organization is using Active Directory or LDAP, you might choose to use security groups to define your users capabilities at New Relic. Another reasonable group choice is OneLogin role. On the New Relic side, your user's groups define their capabilities. The groups that are sent with users will be mapped to New Relic capability groups. Note that at the moment, there is no way to delete a group from the OneLogin side. This is a known limitation from OneLogin. Removing or changing rules does not delete groups already sent to New Relic. If you wish to no longer use a group, removing all the users from the group will prevent it from being used at New Relic. A rule that only uses actions Here's an example rule configuration does not use any conditions. The conditions are left empty to avoid applying any filtering logic to the users. All users will be sent in this example. If you want to send only a subset of users, you need to specify conditions to select the subset. The actions describe where to retrieve the value for the group name and how to parse the value. In this example, we retrieve the group name from the OneLogin role field. The OneLogin role field only has a single value, but sometimes the source for the group name contains other fields besides group name. In other words, some sources give you a list of fields and values and only one of those fields has the value you want to use. In this case, you can insert a regular expression in with value that matches field to find and extract the value for the group name. This example uses the entire value of the For each field for the group name. Step 3. Fill in the Parameters form In the left pane, select Parameters and complete the following: Click Groups field. Check Include in User Provisioning. Click Save. Step 4. Fill in the provisioning form In the left pane, select Provisioning and complete the following: Check Enable provisioning. Under Require admin approval before this action is performed, uncheck these options: Create user Delete user Update user Tip If you do not uncheck these options, SCIM provisioning requests will not be sent until an administrator approves them. Set When users are deleted in OneLogin, or the user's app access is removed, perform the below action to Delete. Set When user accounts are suspended in OneLogin, perform the following action to Suspend. Step 5. Save your changes After you complete the above forms, click Save. Then, return to the Configuration form and enable the API connection. Assign users After New Relic SCIM/SSO application configuration is finished and New Relic side configuration is finished, you can begin to assign users to the application. Assign the New Relic SCIM/SSO application to a user. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click Administration. From the OneLogin Administration page, choose the Users menu Users item. From the OneLogin Users page, click the user you want to assign the application to. From the user's page, click Applications. From the user's application page, click the plus sign and select the \"New Relic by Organization\" application. From the Edit New Relic by Organization login for user page, enter the user's time zone in IANA Time Zone database format (also known as the Olson time zone database format) and click Save. If you're using Roles to define your New Relic capability groups, from the user's application page, click the proper role(s) for the user and then click Save User. OneLogin provisions users in near real time so almost the moment you save the user in OneLogin, the user should be ready to use at New Relic. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 416.28748,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>OneLogin</em> SCIM&#x2F;SSO application configuration",
        "sections": "<em>OneLogin</em> SCIM&#x2F;SSO application configuration",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Our automated <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your <em>New</em> <em>Relic</em> users from your identity provider via SCIM. This guide provides <em>One</em>Login-specific details on how to configure the <em>New</em> <em>Relic</em> <em>One</em>Login SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f34228ccbccafb2c606a"
    },
    {
      "sections": [
        "Azure AD SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Create authentication domain and enable SAML",
        "Step 2. Configure connection",
        "Step 3. Configure provisioning rules",
        "Tip",
        "Step 4. Assign users and groups"
      ],
      "title": "Azure AD SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d6e7f7e95daa833451159a3db4e2c4257270b5e9",
      "image": "https://docs.newrelic.com/static/0a9a32fd5041e6e2ea37cc5f032b6910/8c557/Azure_AD_Provisioning_Attribute_Mapping_2_0.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/azure-ad-scimsso-application-configuration/",
      "published_at": "2021-06-09T01:01:07Z",
      "updated_at": "2021-06-09T01:01:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM/SSO application. Requirements Before using this guide, read the requirements and procedure overview. Step 1. Create authentication domain and enable SAML If you haven't already, enable SAML SSO and then return here to complete these instructions. Step 2. Configure connection Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning link in the sidebar. In the main pane, click on Get started. In the Provisioning Mode pick-list, choose Automatic. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. In Azure AD's New Relic SCIM/SSO app, in the Admin credentials section, fill out the Tenant URL and Secret token fields with the values provided in New Relic's authentication domain UI. To verify you can connect to New Relic, click Test Connection. When you see a message indicating verification success, click Save. The New Relic SCIM/SSO application can now connect with New Relic. Continue with the following section to configure the provisioning rules. Step 3. Configure provisioning rules Initially, nothing is configured to be sent to New Relic. You must configure Azure AD to send changes for user creation, updates, and deactivation. Go to the Provisioning page and complete the following: Expand the Mappings section. Click Provision Azure Active Directory Users. Verify the Target Object Actions Create Update and Delete checkboxes are all checked. Verify the Attribute Mappings look correct for your environment. Each of the New Relic attributes shown in the list must receive a value. Tip Ensure that the Azure Active Directory attributes shown in the list on the left are good sources for the information to send to New Relic. In particular, not all environments set the mail attribute. If your environment does not set the mail attribute, userPrincipalName could be a good alternative. Leave the switch for Enabled set to Off until you're done with the user and group configuration in the next section. Once all configuration is ready, return to this page and set the switch to On. Click Save. Here's an example of a filled-in attribute mapping page with the default values. Your values may be configured differently depending on your situation. After saving the provisioning rules, the New Relic SCIM/SSO application is ready to provision any changes made to users assigned to the application. Continue with the following section to assign users and groups to the New Relic SCIM/SSO application. Step 4. Assign users and groups After the New Relic SCIM/SSO application configuration and the New Relic side configuration is finished, you can assign users and groups to the application. From the New Relic SCIM/SSO application page, click on Users and groups in the sidebar. Click +Add user. From the Add Assignment page, click on Users and groups, and select the appropriate users or groups that you'd like to provision. Then click Select and Assign. The selected users and groups appear on the Users and groups page, indicating that they're candidates for provisioning. Repeat the steps to add users and groups until all desired entities have been assigned to the application. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 415.6774,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Step 4. Assign <em>users</em> <em>and</em> groups",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": ". If your organization is on <em>New</em> <em>Relic</em> <em>One</em> pricing, these users are billable. To convert users to free basic users, use the <em>User</em> <em>management</em> UI. After adding users, you&#x27;ll want to grant them access to specific <em>New</em> <em>Relic</em> <em>accounts</em>, specific groups, and specific roles. To learn how to do this, see Manage users."
      },
      "id": "6043f5c964441fcfb0378ef3"
    }
  ],
  "/docs/accounts/accounts-billing/new-relic-one-user-management/introduction-saml-scim": [
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 1166.1376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Users, roles, permissions (<em>original</em> user model)",
        "sections": "Enable <em>SAML</em> <em>SSO</em> <em>and</em>&#x2F;<em>or</em> <em>SCIM</em>",
        "tags": "<em>Original</em> accounts <em>and</em> billing",
        "body": "): Go to: account dropdown &gt; Account settings &gt; Users and roles &gt; Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable <em>SAML</em> <em>SSO</em> and&#x2F;or <em>SCIM</em> For an introduction to using <em>SAML</em> <em>SSO</em> and&#x2F;or <em>SCIM</em> provisioning, see <em>Get</em> <em>started</em>"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Add users to SAML accounts (original user model)",
        "Important",
        "Overview",
        "Requirements",
        "Add and confirm users",
        "Caution",
        "Bypass email confirmation"
      ],
      "title": "Add users to SAML accounts (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "1ab1cb53dc639014a77f74442c2a89c37b021cc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/add-users-saml-accounts/",
      "published_at": "2021-06-08T18:49:13Z",
      "updated_at": "2021-06-08T18:49:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For an overview of SAML and SCIM options, see Introduction to SAML SSO and SCIM. Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. As an additional security measure for SAML single sign-on (SSO) accounts, users are not added until they complete the email confirmation that New Relic sends automatically. Users in the pending state (not yet confirmed) won't receive notifications, such as alerts. For accounts without SAML SSO integration, the account Owner and Admins can add new users without requiring confirmation. Requirements For requirements, including which New Relic users this feature applies to, see Requirements. Add and confirm users Follow this process to add and confirm users for New Relic accounts with SAML SSO: The account's Owner or an Administrator adds new users: Go to: account dropdown > Account settings > Account > Summary. On SAML-enabled accounts, New Relic flags the users as Pending and sends an email confirmation. (Pending users will not receive notifications associated with their user role, such as alert notifications.) Users select the link in the email to confirm their account, which directs them to the SAML provider's login URL. When users successfully sign into their SAML SSO end point (Auth0, Okta, OneLogin, Ping Identity, Salesforce, etc.), New Relic flags the users as Active. Caution If you disable SAML SSO, New Relic automatically flags all of your Pending users as Active. If you decide to re-enable SAML SSO later, New Relic automatically flags all users except the Owner as Pending, and they will need to confirm their account access by email. Admin user's API keys for all users that go into a pending state will be deleted. Bypass email confirmation Depending on your subscription level, you may have the option to claim the domain names that you own and bypass the SAML SSO confirmation process. When the account Owner or Administrators add new users and their email address has a domain that matches the account's domains, New Relic automatically adds them as Active users. Benefits of identifying domain ownership include: Adds a useful feature to your account. Claims domains as your own. Makes it easier for your employees to get started with New Relic, because they do not need to confirm their account access. Maintains security when adding users outside of your organization. To flag your account as owning one or more domain names, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 424.65564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add users to <em>SAML</em> accounts (<em>original</em> user model)",
        "sections": "Add users to <em>SAML</em> accounts (<em>original</em> user model)",
        "tags": "<em>SAML</em> <em>SSO</em> (<em>original</em> users)",
        "body": "Important These docs are for setting up <em>SSO</em> for users on our original user model. For an overview of <em>SAML</em> and <em>SCIM</em> options, see Introduction to <em>SAML</em> <em>SSO</em> and <em>SCIM</em>. Overview For an overview of our <em>SAML</em> <em>SSO</em> and <em>SCIM</em> docs, first read Introduction to <em>SAML</em> <em>SSO</em> and <em>SCIM</em>. As an additional security measure"
      },
      "id": "6043f342e7b9d20ca55799fa"
    },
    {
      "sections": [
        "Azure AD SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Create authentication domain and enable SAML",
        "Step 2. Configure connection",
        "Step 3. Configure provisioning rules",
        "Tip",
        "Step 4. Assign users and groups"
      ],
      "title": "Azure AD SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d6e7f7e95daa833451159a3db4e2c4257270b5e9",
      "image": "https://docs.newrelic.com/static/0a9a32fd5041e6e2ea37cc5f032b6910/8c557/Azure_AD_Provisioning_Attribute_Mapping_2_0.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/azure-ad-scimsso-application-configuration/",
      "published_at": "2021-06-09T01:01:07Z",
      "updated_at": "2021-06-09T01:01:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM/SSO application. Requirements Before using this guide, read the requirements and procedure overview. Step 1. Create authentication domain and enable SAML If you haven't already, enable SAML SSO and then return here to complete these instructions. Step 2. Configure connection Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning link in the sidebar. In the main pane, click on Get started. In the Provisioning Mode pick-list, choose Automatic. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. In Azure AD's New Relic SCIM/SSO app, in the Admin credentials section, fill out the Tenant URL and Secret token fields with the values provided in New Relic's authentication domain UI. To verify you can connect to New Relic, click Test Connection. When you see a message indicating verification success, click Save. The New Relic SCIM/SSO application can now connect with New Relic. Continue with the following section to configure the provisioning rules. Step 3. Configure provisioning rules Initially, nothing is configured to be sent to New Relic. You must configure Azure AD to send changes for user creation, updates, and deactivation. Go to the Provisioning page and complete the following: Expand the Mappings section. Click Provision Azure Active Directory Users. Verify the Target Object Actions Create Update and Delete checkboxes are all checked. Verify the Attribute Mappings look correct for your environment. Each of the New Relic attributes shown in the list must receive a value. Tip Ensure that the Azure Active Directory attributes shown in the list on the left are good sources for the information to send to New Relic. In particular, not all environments set the mail attribute. If your environment does not set the mail attribute, userPrincipalName could be a good alternative. Leave the switch for Enabled set to Off until you're done with the user and group configuration in the next section. Once all configuration is ready, return to this page and set the switch to On. Click Save. Here's an example of a filled-in attribute mapping page with the default values. Your values may be configured differently depending on your situation. After saving the provisioning rules, the New Relic SCIM/SSO application is ready to provision any changes made to users assigned to the application. Continue with the following section to assign users and groups to the New Relic SCIM/SSO application. Step 4. Assign users and groups After the New Relic SCIM/SSO application configuration and the New Relic side configuration is finished, you can assign users and groups to the application. From the New Relic SCIM/SSO application page, click on Users and groups in the sidebar. Click +Add user. From the Add Assignment page, click on Users and groups, and select the appropriate users or groups that you'd like to provision. Then click Select and Assign. The selected users and groups appear on the Users and groups page, indicating that they're candidates for provisioning. Repeat the steps to add users and groups until all desired entities have been assigned to the application. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 377.0125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Azure AD <em>SCIM</em>&#x2F;<em>SSO</em> application configuration",
        "sections": "Azure AD <em>SCIM</em>&#x2F;<em>SSO</em> application configuration",
        "tags": "Accounts <em>and</em> billing",
        "body": " Relic. From the New Relic <em>SCIM</em>&#x2F;<em>SSO</em> application page, click on the Provisioning link in the sidebar. In the main pane, click on <em>Get</em> <em>started</em>. In the Provisioning Mode pick-list, choose Automatic. In New Relic&#x27;s authentication domain UI, set up a new domain with <em>SCIM</em> enabled. In Azure AD&#x27;s New Relic <em>SCIM</em>"
      },
      "id": "6043f5c964441fcfb0378ef3"
    }
  ],
  "/docs/accounts/accounts-billing/new-relic-one-user-management/new-relic-one-user-model-understand-user-structure": [
    {
      "sections": [
        "Introduction to managing users",
        "User management docs"
      ],
      "title": "Introduction to managing users ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "6c2f39333fa3c6931fe616669244cb44f183a167",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/introduction-managing-users/",
      "published_at": "2021-06-09T01:02:33Z",
      "updated_at": "2021-06-09T01:02:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some important things to note before starting: The docs in this section are for managing users on the New Relic One account/user model. Learn about user models. Note that this is a separate topic from our original pricing or New Relic One pricing plans. For managing users on our original user model, see Original users. User management docs Here are our main docs for managing these users: User model/structure: learn some basic aspects of our user model, such as user type (basic user vs full user), default groups (Admin and User), and roles and capabilities. Managing users: an overview of user management concepts, some common user management tasks, and where to manage users in the UI. A tutorial on how to create new groups, roles, and access grants Authentication domain settings: configure an authentication domain, which governs how your users are added to New Relic (manually versus SCIM provisioning), the authentication method they use (manual login versus SAML SSO), managing how basic users become full users, and user session settings. For an overview of SAML SSO and SCIM options, see Introduction to SAML and SCIM. Having problems logging in? See Login troubleshooting. To understand user-related billing factors, see User-related billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 452.68933,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to managing <em>users</em> ",
        "sections": "Introduction to managing <em>users</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> management",
        "body": "Some important things to note before starting: The docs in this section are for managing <em>users</em> on the <em>New</em> <em>Relic</em> <em>One</em> account&#x2F;<em>user</em> <em>model</em>. Learn about <em>user</em> models. Note that this is a separate topic from our original pricing or <em>New</em> <em>Relic</em> <em>One</em> pricing plans. For managing <em>users</em> on our original <em>user</em> <em>model</em>"
      },
      "id": "6043f3c4196a67a215960f3c"
    },
    {
      "sections": [
        "What is an entity in New Relic?",
        "What is an entity?",
        "Find and explore entities",
        "Tip",
        "Entity synthesis",
        "Reserved attributes for synthesized entities",
        "Entity relationships",
        "Important",
        "Group and organize entities"
      ],
      "title": "What is an entity in New Relic?",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "52a3e08bc9103c717d27b153e4fd4f547d6ecc32",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/what-entity-new-relic/",
      "published_at": "2021-06-08T19:55:34Z",
      "updated_at": "2021-06-08T19:55:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic monitoring is built around the concept of the entity. An entity is anything that reports data to New Relic. This document explains: What entities are How to find entity data How to modify existing entity types or create new ones How entities are related to one another How to organize them into groups for easier analysis What is an entity? From a New Relic product perspective, entity is a broad concept. An entity is anything we can identify that has data you can monitor. \"Entity\" can refer to fundamental data-reporting components like applications, hosts, and database services, but it can also refer to larger groupings of those components. For example, to monitor a data center, you could aggregate those hosts in New Relic to be a workload (a custom grouping of entities). That workload is, itself, also an entity. This conceptual definition of \"entity\" is important because New Relic's goal is to give you practical information about the status of your business-important entities (and not just give you an unhelpfully large stream of assorted metrics and data). Our focus on entities, and the relationships between them, helps us optimize monitoring and troubleshooting of complex, modern systems. Find and explore entities You'll find your entities wherever you see your data reporting in New Relic. Tip You can create new entity types to monitor any data source. Learn more about entity synthesis. Some tips for finding and understanding entity data: To find an entity's unique global identifier (GUID): from any list of monitored entities in the New Relic Explorer, hover over a specific entity and click the icon to see the GUID and other metadata. An entity's GUID is reported as the attribute entityGuid. You can query for an entity using this attribute in the query builder. Use the Related Entities view in the New Relic Explorer, service maps, distributed tracing, and our relationships API in GraphQL to see connections between entities. Explore entity data using our NerdGraph GraphiQL explorer (api.newrelic.com/graphiql). Entity synthesis If you have telemetry from any source that's not supported by New Relic out of the box, you can propose a mapping for it. Once approved, any telemetry received by New Relic which matches your definition file will be synthesized into an entity. Tip For more information on how to modify existing entity types or create new ones please refer to our Entity Synthesis documentation. Reserved attributes for synthesized entities These attributes are meant to be synthesized from the telemetry we receive. Do not set them unless you are aware of the implications and consequences. Attribute Description entity.guid Generally, you should not set this attribute field on your telemetry data. New Relic may add this field to ingested data to store a unique identifier for the entity associated with the data point. If telemetry arrives with the entity.guid attribute already present, then New Relic will not change the value. However, it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. One use case for passing this attribute is to associate ingested telemetry with an entity already created by New Relic. When the entity.guid attribute is sent, the value will override New Relic’s entity identification system (such as entity synthesis definitions) and instead will use the attribute as the data. entity.name This attribute shouldn't be put on ingested telemetry data unless you're trying to override the entity name that would have been selected by New Relic’s entity identification system. While New Relic won't change the value if it's already present on the data, New Relic may add the attribute to your data. Therefore invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. If this field is present on ingested telemetry, its value will be used to name the entity associated with the data point. This name will be used instead of the name selected by New Relic’s entity identification system (for example, entity synthesis definitions). Note that many entities use the name as part of their identification, so changing this field may result in the generation of a new entity. entity.type This attribute shouldn't be put on ingested telemetry data except for certain legacy cases where it's required to distinguish entity types. Passing this field may interfere with entity detection, particularly if unrecognized values are sent in this field. While New Relic won't change the value if already present on the data, the field is not guaranteed to provide unambiguous filtering of telemetry at query-time. Existing entity definitions already have overlapping values, and we recommend avoiding entity.type in favor of other fields for filtering telemetry queries. This field is used by New Relic, meaning that invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. Entity relationships Connections between entities are automatically created by New Relic based on what we can infer from your telemetry. For example, when two services that communicate using HTTP are instrumented with New Relic, we infer a \"calls/called-by\" relationship between them. When viewing a single entity in either the New Relic Explorer, Navigator, or Lookout, you can see its Related Entities in the entity's mini overview. Related Entities is a visualization of the various entities connected directly to the current entity in focus. You can quickly view important metrics for these related entities and navigate from one entity to another, through all the connected parts of your stack. Tip You can learn more about how entities are related using our NerdGraph API. When relationships are not automatically detected, you can manually create them using the \"Add/edit related entities\" link in Related Entities. Important Currently, you can only manually create calls/called-by relationships between service entities. Tip To manage manual relationships, you need to have modify and delete capabilities on entity relationships. These are granted to user roles by default. Group and organize entities You can place entities into groups that reflect business-important relationships in your organization. For example, you might group all entities related to a specific team or department, or related to a specific service. Or you might group multiple hosts together to reflect their grouping in a data center. To group your entities, see: How to tag entities Create workloads (groups of related entities)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 401.08234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "What is an entity in <em>New</em> <em>Relic</em>?",
        "sections": "What is an entity in <em>New</em> <em>Relic</em>?",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em>",
        "body": "<em>New</em> <em>Relic</em> monitoring is built around the concept of the entity. An entity is anything that reports data to <em>New</em> <em>Relic</em>. This document explains: What entities are How to find entity data How to modify existing entity types or create <em>new</em> ones How entities are related to <em>one</em> another How to organize them"
      },
      "id": "603ec160e7b9d295f72a07fc"
    },
    {
      "sections": [
        "Use tags to help organize and find your data",
        "Tip",
        "Tag format and limits",
        "Best practices and tips",
        "Tips on keeping tags simple:",
        "Tips on using tags consistently:",
        "Tips on cross-team implementation:",
        "Tag examples",
        "Team-related tags",
        "Environment-related tags",
        "Criticality-related tags",
        "How tags are added",
        "Add tags via UI or API",
        "APM agent tags",
        "Infrastructure data tags",
        "Automate tags with our CLI",
        "Use tags to filter the UI",
        "Custom queries, charts, and alerts",
        "Query and alert on APM tags",
        "Throughput across shards",
        "Transactions per team",
        "Alert on error rate for teams",
        "Query and alert on attributes"
      ],
      "title": "Use tags to help organize and find your data",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "e2e2d53776b9109965df9de2a20660e9f60bd479",
      "image": "https://docs.newrelic.com/static/529f55ef72f3e366e6cb4a7be67229b6/c1b63/new-relic-tags-workloads_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/use-tags-help-organize-find-your-data/",
      "published_at": "2021-06-08T19:54:20Z",
      "updated_at": "2021-06-08T19:54:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the software industry, a tag typically refers to a piece of metadata added to a data set for the purpose of improving data organization and findability. At New Relic, our tags are key:value pairs (like team: operations) added to various sets of data, like monitored apps and hosts, agents, dashboards, and workloads. We make some important attributes available as tags (for example, app metadata like app name and language, and host metadata like host name and AWS region), and you can also add your own custom tags. You can use tags in the UI to filter down to relevant data, as shown here: Here you can see an accountId tag being used to filter workloads to a specific account. You can use tags to: Help organize data coming from a large number of sources and/or to a large number of New Relic accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see example use cases) Better organize and search dashboards and workloads Help you query and chart APM data Tags are useful for organizing data at a high level. If you wanted to add more fine-grained detail, like capturing user names or other high-cardinality values, custom attributes or custom events would be a better solution. Tip At New Relic, tags were previously called \"labels.\" You may sometimes see \"label\" used in our code; for example, some of our APM agent config files use a label config option for tags. Tag format and limits Format requirements and limits for tags: The UI has limits on the total number of tags it can display per entity: Limit of 100 for tags reported by default or added via agent/integration configuration. Limit of 100 for custom tags added via UI or API. The following are maximum character length for tags: Key: 128 characters Value: 256 characters When using our API to add tags, a dash (-) in a tag key is interpreted as a minus symbol. If your tag key has a dash, use back ticks around it (like `key-name`). Best practices and tips Before adding tags, we recommend first seeing how our default tags work for you. When you're ready to add your own tags, read the best practices below to get the most out of them. Tips on keeping tags simple: Start by adding only tags you know you’ll definitely use. Unused tags create noise and may add confusion. Try to use short tags. Shorter tags are easier to parse, and also the UI may sometimes truncate longer tags. (See character limits.) When possible, use keys and values that are human-readable (for example, region: EMEA is better than Param8323 : 1229072). Avoid including several values like regions: EMEA | US | LATAM in a single tag. We recommend using three different tags for that, like region: emea, region: us, and region: latam. If you want to match multiple tags, you can do that using the advanced options in the filter UI. Tips on using tags consistently: Try to be consistent with tag language across your teams and entities. Be consistent with naming. For example, avoid using both region: emea and reg: emea. Be consistent with format. For example, avoid using both camelCase and kebab-case. Be consistent with capitalization. For example, avoid using both env: staging and env: Staging (although tag searching is case-insensitive in the UI and API) Tips on cross-team implementation: One reason for using tags is to improve observability and cost allocation. For this reason, responsibility for tag implementation is often assigned to an observability team, SREs, a group of architects, or a cross-team task force. We recommend the people responsible for implementing tags meet and create an internal policy to describe how the tags are defined and which conventions are to be used. Keep this reference manual up-to-date. Automate the definition of tags when you deploy New Relic agents, at the cloud provider, or through New Relic automation tools, such as the API or Terraform. Create recurring reports that identify entities that are non-compliant with your tagging standards. Tag examples Here are some examples of common ways to use tags to organize data: Team-related tags Creating tags for team names can be helpful to understand which team, group, department, or region was responsible for a change that led to a performance issue. Team examples: team: backend team: frontend team: db Role examples: roles: architecture roles: devops roles: pm Region examples: region: emea region: america region: asia Environment-related tags You can create entities for the environment they belong to. Examples: env: production env: qa env: development env: staging Criticality-related tags You can create tags related to criticality levels, which lets you easier track the most critical issues. Examples: layer: level1 layer: level2 layer: level3 How tags are added Some important attributes, by default, are available for use as tags. For example, the account name, the account ID, and some basic host/server metadata are available as default tags. You can't remove these available-by-default tags. Here are some details about how tags are added for some specific data sources: Add tags via UI or API When you add tags via the UI or API, this occurs at the entity level. This means that, for example, if you have multiple APM agents monitoring a single entity and apply a tag via the UI, that tag is available for all data coming from that entity. To add or delete tags via the UI: Select a monitored entity, like a monitored app or host. Near the entity’s name at the top of the page, select the See metadata and manage tags menu. In the menu that pops up, add or delete a tag. To manage tags via API: see our NerdGraph tagging docs. For a guide to using our CLI to automate tagging, see our developer site. APM agent tags You can add tags via the UI and API or you can add tags using APM agent configuration. There are differences in how these apply tags: Via agent config: These tags are applied at the agent-level, not the entity/application level. This would be a good option if you have multiple agents monitoring different aspects of the same app (for example, a blue-green deployment model). Via the UI or API: These tags are applied at the entity/application level. Here are links to the agent configuration options: C SDK: not available Java Go .NET Node.js PHP Python Ruby For information on querying APM tags, see Query APM tags. Infrastructure data tags There are several ways tags are added to infrastructure entities and services: Use the UI or API to add tags at the entity level. Infrastructure agent: some attributes are available by default as tags. You can also add custom attributes, which are also available as tags in the UI. On-host integrations: some attributes are available by default as tags. You can also add tags by using integration-specific labels config options (for an example, see the labels config for the Apache integration). Cloud service integrations: by default we report tags and labels that are defined in the cloud service. To add tags, you'd add them on the cloud-service-side. Automate tags with our CLI For a guide to automating tags using our CLI tool, see our developer site. Use tags to filter the UI Use the filter field at the top of the New Relic Explorer to filter down to the entities you care about. You can use multiple filter conditions. To filter down to certain entities using tags: From one.newrelic.com, click Explorer. Click the Filter by... field to see a dropdown of available attributes and tags. You can filter by multiple elements and use advanced search options. To find an entity’s metadata and tags from the UI, here are two options: From a list of entities in the UI, at the far right, select an entity's icon. OR Select an entity. Near the top of the page, select the icon. To use the API to view tags, see our NerdGraph docs. Learn about how to use tags with dashboards and how to use tags with workloads. Custom queries, charts, and alerts Different features handle tags differently. Here are some details about how you can use NRQL to query tag data, or create NRQL condition alerts. Query and alert on APM tags You can query APM tags using NRQL. Minimum agent versions: C: not available Go: 2.3.0 Java: 4.9.0 .NET: 8.17 Node: v4.13.0 PHP: not available Python: v4.10.0.112 Ruby: 6.1.0.352 Here are some query examples: Throughput across shards Given a service that is distributed across nine shards, each shard assigned as an environment, we can plot the transaction throughput on all shards using a wildcard query like: SELECT rate(count(apm.service.transaction.duration), 1 minute) FROM Metric WHERE appName LIKE 'MyApp (%' AND transactionType = 'Other' FACET tags.Environment TIMESERIES Copy Transactions per team To see the number of transactions per service for a specific team, we might use a query like: FROM Transaction SELECT count(*) WHERE tags.Team = 'team-a' FACET tags.Project TIMESERIES Copy Alert on error rate for teams You can use a query for your services’ error rate for setting an alert without having to create a rule for each service. Here is the error rate for all services on a team called team-b. And this alert will automatically monitor any new app names added with the team tag. FROM Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Team = 'team-b' FACET appName Copy Related to this, you might create a general rule for a specific service deployed across several environments, so that we have an alarm for a single service monitoring each environment individually: From Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Project = 'MyProject' FACET tags.Environment Copy Query and alert on attributes As explained in Tag sources, some important attributes are used as tags. You can query all attributes and create custom charts using NRQL, and create NRQL alert conditions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 401.0592,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>New</em> <em>Relic</em> <em>One</em>",
        "body": " you can see an accountId tag being used to filter workloads to a specific account. You can use tags to: Help organize data coming from a large number of sources and&#x2F;or to a large number of <em>New</em> <em>Relic</em> accounts Identity teams, <em>roles</em>, environment, or regions to know who’s responsible for what (see"
      },
      "id": "603ebd1228ccbc6278eba754"
    }
  ],
  "/docs/accounts/accounts-billing/new-relic-one-user-management/tutorial-add-new-user-groups-roles-new-relic-one-user-model": [
    {
      "sections": [
        "Introduction to managing users",
        "User management docs"
      ],
      "title": "Introduction to managing users ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "6c2f39333fa3c6931fe616669244cb44f183a167",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/introduction-managing-users/",
      "published_at": "2021-06-09T01:02:33Z",
      "updated_at": "2021-06-09T01:02:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some important things to note before starting: The docs in this section are for managing users on the New Relic One account/user model. Learn about user models. Note that this is a separate topic from our original pricing or New Relic One pricing plans. For managing users on our original user model, see Original users. User management docs Here are our main docs for managing these users: User model/structure: learn some basic aspects of our user model, such as user type (basic user vs full user), default groups (Admin and User), and roles and capabilities. Managing users: an overview of user management concepts, some common user management tasks, and where to manage users in the UI. A tutorial on how to create new groups, roles, and access grants Authentication domain settings: configure an authentication domain, which governs how your users are added to New Relic (manually versus SCIM provisioning), the authentication method they use (manual login versus SAML SSO), managing how basic users become full users, and user session settings. For an overview of SAML SSO and SCIM options, see Introduction to SAML and SCIM. Having problems logging in? See Login troubleshooting. To understand user-related billing factors, see User-related billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 738.65625,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>managing</em> <em>users</em> ",
        "sections": "<em>User</em> <em>management</em> docs",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": "Some important things to note before starting: The docs in this section are for managing users on the <em>New</em> <em>Relic</em> <em>One</em> <em>account</em>&#x2F;<em>user</em> model. Learn about <em>user</em> models. Note that this is a separate topic from our original pricing or <em>New</em> <em>Relic</em> <em>One</em> pricing plans. For managing users on our original <em>user</em> model"
      },
      "id": "6043f3c4196a67a215960f3c"
    },
    {
      "sections": [
        "Add and manage users, groups, and roles",
        "Important",
        "Requirements",
        "Manage users in the UI",
        "Overview of user management concepts",
        "User management definitions",
        "Example user management tasks",
        "Add, edit, and delete users",
        "Create new groups and roles",
        "Grant users ability to manage other users",
        "Control how basic users upgrade to full users",
        "Track changes"
      ],
      "title": "Add and manage users, groups, and roles",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "9e37836740ce56302734d4af636bdbe087b4dbc3",
      "image": "https://docs.newrelic.com/static/b1c2da968a637f68569e890c8bd72a1c/c1b63/new-relic-one-user-mgmt.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/add-manage-users-groups-roles/",
      "published_at": "2021-06-08T20:19:01Z",
      "updated_at": "2021-06-02T20:02:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our New Relic One user model, we provide various user management features, including the ability to: Use role based access control (RBAC) to assign default or custom roles to user groups Create custom user groups Grant user groups access to specific roles and accounts Important This doc applies to users on the New Relic One user model. For managing users on our original user model, see Original users. Not sure which user model you're on? See User models. Requirements To see if you can access these user management features, go to the user management UI and see what you have access to. Access requirements: These features allow managing of users on the New Relic One user model. To learn more, see User models. To avoid configuration conflicts, ensure that only one user is managing users at a time. Simultaneous configuration by more than one user may result in errors and unexpected results. Most capabilities require the Authentication domain manager role and some require the Organization manager role. For details, see Standard roles. Pricing edition requirements: To manage user groups, roles, and access grants: Pro or Enterprise edition is required. To import users from an identity provider: Enterprise is required. A New Relic user can have a maximum of either three concurrent active sessions, or three unique IP addresses in use at any given time. Manage users in the UI For users on the New Relic One user model, to find your user management options: From the account dropdown, select Administration. There are two user management UI pages there: User management: Use this to add users, update user information, and approve upgrade requests. Organization and access: Use this page to create and manage groups, roles, and access grants, and to set up SAML SSO and SCIM provisioning. Important If you can't see these UI pages, it may be because you're on our original user model or because you don't have the required user management role. Overview of user management concepts To optimally use our more advanced user management features, it's important to first understand the concept of the \"access grant.\" An access grant gives a group of users access to a) a role and b) an account. For a New Relic organization that has many accounts, groups typically require more than one access grant because users in a group usually need access to multiple accounts and roles. The diagram below explains the elements that make up an access grant. Note that if your organization is on Standard edition and want to assign a user to a default group (Admin or User), you don't need to create an access grant: you would simply add a user to that group and you're done. But for Pro and Enterprise edition, if you're trying to grant users access to a custom group, a custom role, or to other accounts, you must create an access grant. A diagram explaining how you can grant user groups access to roles and accounts. Note that this applies to users on our New Relic One user model (and not our original user model). Some tips on setting up access grants: It may help to first plan out how your access grants will be organized. How many accounts will you have? What user groups will get access to which roles and which accounts? Will you use our default groups and roles or create your own custom groups and roles? For smaller, flatter organizations that are okay with full internal transparency, you may only need a couple groups. A common configuration for organizations with many accounts (roughly 20 or more) is setting up groups with the more organization-scoped roles (Organization manager, Authentication domain manager, and Billing user) on the primary account, and then on other accounts, setting up groups with the more product-scoped roles (like All product admin, Standard user, or custom roles). For examples of some common user management tasks, see Example tasks. User management definitions Here are some definitions of our user management terms and how they relate to each other: A capability is an ability to use or edit a specific, granular New Relic feature. Examples of capabilities: The ability to modify APM settings The ability to delete alert conditions A role is a set of capabilities. Our default standard roles have various capability sets, and you can create custom roles that have a custom set of capabilities. A user group has one or more roles associated with it. You assign your users to a group. We have default user groups (Admin and User), and you can make your own groups. An access grant is what grants a user group access to roles and specific New Relic accounts. An access grant essentially states, \"This group is assigned this role on this New Relic account.\" Adding a user to a group doesn’t do anything unless that group is included in an access grant. An authentication domain contains a set of users who are added to New Relic and who log in to New Relic in the same way. For example, you may have one authentication domain for users who log in via username/password and another authentication domain for users who log in via SAML. If a user is a basic user, this takes precedence over any role-related limitations. For more on this, see Basic user and roles. Example user management tasks In the Organization and access UI, you can create custom groups, roles, and grant access to user groups. Here are some example user management procedures: Add, edit, and delete users To add or edit users, use the User management UI. To add users: If you have multiple authentication domains, choose one from the authentication domain dropdown. Click Add user. Complete the process, including choosing user type and user group. If you've unintentionally signed up for New Relic and want to delete your entire account, see Delete organization. Create new groups and roles See our user management tutorial. Grant users ability to manage other users To grant your users the ability to manage other users, you'll need to add users to a group that has the Authentication domain manager role. Important Users cannot have only organization-scoped roles assigned; they must also be in a group that has account-scoped roles (for example, the default Admin group). You have two options: From the User management UI, you can add a user to the default Admin group, which includes both of those roles. OR You can assign those roles to a custom group. From the Organization and access UI: Select Access grants, and choose To this organization. Create an access grant that assigns the Authentication domain manager role to a custom group. From the User management UI, add users to that group. To see a tutorial on creating new groups and roles, see Tutorial. Control how basic users upgrade to full users See the authentication domain settings. Track changes To see an audit log of changes to your account, including user management actions, you can query the NrAuditEvent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 562.93933,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>and</em> <em>manage</em> <em>users</em>, groups, <em>and</em> roles",
        "sections": "Add <em>and</em> <em>manage</em> <em>users</em>, groups, <em>and</em> roles",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": "For users on our <em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model, we provide various <em>user</em> <em>management</em> features, including the ability to: Use role based access control (RBAC) to assign default or custom roles to <em>user</em> groups Create custom <em>user</em> groups Grant <em>user</em> groups access to specific roles and <em>accounts</em> Important"
      },
      "id": "603e7bce28ccbc415beba74c"
    },
    {
      "sections": [
        "OneLogin SCIM/SSO application configuration",
        "Requirements",
        "Create authentication domain and enable SAML and SCIM",
        "Configure SCIM/SSO application",
        "Step 1. Fill in the configuration form",
        "Step 2. Fill in the rules form",
        "A rule that only uses actions",
        "Step 3. Fill in the Parameters form",
        "Step 4. Fill in the provisioning form",
        "Tip",
        "Step 5. Save your changes",
        "Assign users"
      ],
      "title": "OneLogin SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d298162c055490c99117f564c3ea9c2ea5dfd8d1",
      "image": "https://docs.newrelic.com/static/8f585557ea58f70d94a746e6439bf1ad/c1b63/onelogin_rules_conditions_actions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/onelogin-scimsso-application-configuration/",
      "published_at": "2021-06-09T00:45:54Z",
      "updated_at": "2021-06-09T00:45:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Create authentication domain and enable SAML and SCIM If you haven't already, create a new authentication domain with SAML SSO enabled and SCIM enabled. You will use values from this UI in later steps. Configure SCIM/SSO application Configuration for the New Relic SCIM/SSO application is split across several forms. This section describes the different forms that need to be configured. From the New Relic by organization application page, fill in the following forms: Step 1. Fill in the configuration form In the left pane, select Configuration and complete the following: Take the authentication domain ID and SCIM bearer token values from New Relic's authentication domain UI and input them into the appropriate app fields. Leave the API Connection disabled until all the configuration described in the following sections is completed. After completing all the configuration, enable the connection. Step 2. Fill in the rules form Configure the user groups to send to New Relic using rules. OneLogin provides this documentation which describes how to use rules to provision groups for users. Decide what type of groups to send along with your users to New Relic. If your organization is using Active Directory or LDAP, you might choose to use security groups to define your users capabilities at New Relic. Another reasonable group choice is OneLogin role. On the New Relic side, your user's groups define their capabilities. The groups that are sent with users will be mapped to New Relic capability groups. Note that at the moment, there is no way to delete a group from the OneLogin side. This is a known limitation from OneLogin. Removing or changing rules does not delete groups already sent to New Relic. If you wish to no longer use a group, removing all the users from the group will prevent it from being used at New Relic. A rule that only uses actions Here's an example rule configuration does not use any conditions. The conditions are left empty to avoid applying any filtering logic to the users. All users will be sent in this example. If you want to send only a subset of users, you need to specify conditions to select the subset. The actions describe where to retrieve the value for the group name and how to parse the value. In this example, we retrieve the group name from the OneLogin role field. The OneLogin role field only has a single value, but sometimes the source for the group name contains other fields besides group name. In other words, some sources give you a list of fields and values and only one of those fields has the value you want to use. In this case, you can insert a regular expression in with value that matches field to find and extract the value for the group name. This example uses the entire value of the For each field for the group name. Step 3. Fill in the Parameters form In the left pane, select Parameters and complete the following: Click Groups field. Check Include in User Provisioning. Click Save. Step 4. Fill in the provisioning form In the left pane, select Provisioning and complete the following: Check Enable provisioning. Under Require admin approval before this action is performed, uncheck these options: Create user Delete user Update user Tip If you do not uncheck these options, SCIM provisioning requests will not be sent until an administrator approves them. Set When users are deleted in OneLogin, or the user's app access is removed, perform the below action to Delete. Set When user accounts are suspended in OneLogin, perform the following action to Suspend. Step 5. Save your changes After you complete the above forms, click Save. Then, return to the Configuration form and enable the API connection. Assign users After New Relic SCIM/SSO application configuration is finished and New Relic side configuration is finished, you can begin to assign users to the application. Assign the New Relic SCIM/SSO application to a user. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click Administration. From the OneLogin Administration page, choose the Users menu Users item. From the OneLogin Users page, click the user you want to assign the application to. From the user's page, click Applications. From the user's application page, click the plus sign and select the \"New Relic by Organization\" application. From the Edit New Relic by Organization login for user page, enter the user's time zone in IANA Time Zone database format (also known as the Olson time zone database format) and click Save. If you're using Roles to define your New Relic capability groups, from the user's application page, click the proper role(s) for the user and then click Save User. OneLogin provisions users in near real time so almost the moment you save the user in OneLogin, the user should be ready to use at New Relic. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 416.2868,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>OneLogin</em> SCIM&#x2F;SSO application configuration",
        "sections": "<em>OneLogin</em> SCIM&#x2F;SSO application configuration",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Our automated <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your <em>New</em> <em>Relic</em> users from your identity provider via SCIM. This guide provides <em>One</em>Login-specific details on how to configure the <em>New</em> <em>Relic</em> <em>One</em>Login SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f34228ccbccafb2c606a"
    }
  ],
  "/docs/accounts/install-new-relic/partner-based-installation/google-app-engine-environment": [
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "da1d767d7bc556d6b1a0b78e73738936607cb7dd",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/mastersub-account-structure/",
      "published_at": "2021-06-08T19:09:12Z",
      "updated_at": "2021-06-08T04:17:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For organizations on our original account/user model, you can create a more complex account structure with master accounts and sub-accounts that inherit master account settings. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user models, see User models. The major differences are: Original account/user model: Our original model uses a master/sub-account structure, where sub-accounts inherit settings from master accounts. Our partnership accounts also use this model. If your organization is on this model, you're able to create your own sub-accounts. If you're on this model, continue reading below to learn how this account structure works. New Relic One account/user model: This is our new, improved model. For more about how accounts work for this model, see Account structure. Master and sub-account hierarchy For organizations on our original account/user model that have a master/sub-account structure, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.65115,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "Master <em>and</em> sub-<em>account</em> hierarchy",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "For organizations on our original <em>account</em>&#x2F;user model, you can create a more complex <em>account</em> structure with master <em>accounts</em> and sub-<em>accounts</em> that inherit master <em>account</em> settings. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization"
      },
      "id": "60beef5764441fc42dd543d3"
    },
    {
      "sections": [
        "Factors affecting access to features and data",
        "User permissions",
        "Account access",
        "Pricing plan or edition",
        "The entities being monitored",
        "Data retention"
      ],
      "title": "Factors affecting access to features and data",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "98bf366604050b491ee35c8422414c70bda452b4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/factors-affecting-access-features-data/",
      "published_at": "2021-06-09T01:22:01Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There are several factors that can affect your access to a New Relic feature, or New Relic data. User permissions User-related settings can impact what features or data you have access to. Potential impacts include: Your user type (basic user or full user). Your assigned roles. How your user roles and permissions work depends on which user model you're on. Account access If you're logged in to New Relic and don't see the account or data you expect to see, some causes and solutions include: If your organization has multiple accounts, there's an account switcher at the top left of most New Relic UI pages. Check to see if you can use that to switch accounts. You may have more than one login associated with the same email address. If you think this may be the case, log out and log back in. When you input your email address, the login UI tells you if you have multiple logins and gives you an option for seeing all accounts associated with that email. If you're having trouble accessing an older account, see this Explorers Hub post about multiple account access. It's possible an admin user in your organization changed your permissions for an account. Related docs: Account structure Login and password troubleshooting Delete accounts Pricing plan or edition We have two pricing plans available, and this can impact feature availability. Pricing plans: Our original product-based pricing plan: This plan separates our offerings by product. If you’re on this plan, access to some features may depend on the products you pay for. Our New Relic One pricing plan: This newer pricing plan gives more cross-platform access. The main factors affecting access are your edition and your user type. We also have several Full Stack Observability pricing editions: Standard, Pro, and Enterprise. Learn more about our pricing plans. The entities being monitored Some of our solutions enable functionality that isn’t available to all users, like: Additional UI components, and Data available for querying For example, enabling distributed tracing results in you seeing trace data in the UI and in having trace data available for querying. If you are missing data that you expect to see, see Missing data. Data retention Different types of New Relic data have different data retention periods. Once data has passed a given data retention point, it may be deleted or be aggregated for longer term storage. For details, see Data retention.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.29167,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Factors affecting access to features <em>and</em> data",
        "sections": "<em>Account</em> access",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " and permissions work depends on which user model you&#x27;re on. <em>Account</em> access If you&#x27;re logged in to New Relic and don&#x27;t see the <em>account</em> or data you expect to see, some causes and solutions include: If your organization has multiple <em>accounts</em>, there&#x27;s an <em>account</em> switcher at the top left of most New"
      },
      "id": "60bee5c064441f0505d543bb"
    },
    {
      "sections": [
        "New Relic account structure",
        "Impacts of account/user model",
        "Account structure for New Relic One account/user model"
      ],
      "title": "New Relic account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "4f5a4cde293d0b599f489eff010f69c021ccb539",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/new-relic-account-structure/",
      "published_at": "2021-06-09T02:17:27Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your account/user model, you have different options for adding and managing accounts and assigning users to them. Impacts of account/user model How you manage accounts and users differs based on which of our account/user models your organization is on. To learn more about the account/user models and determine which you're on, see User models. The major differences are: Original account/user model: Our original model used a master/sub-account structure, where sub-accounts inherited settings from master accounts. If you're on this model, see the Original user model docs. New Relic One account/user model: This is our new, improved model. We currently are migrating some customer accounts to this model and eventually all our customers will be on this model. To learn more and see if you can migrate your users, see Migrate users. To learn more about how account and user management works, keep reading. Account structure for New Relic One account/user model For organizations on the New Relic One account/user model, here are some details about how organization and account management work: The Standard edition allows for a single account per organization. Pro and Enterprise editions allows for multiple accounts. At the top level of a New Relic account hierarchy is the concept of the \"organization.\" Your group of related accounts that share the same billing are inside a single \"New Relic organization.\" Currently you can't add accounts to your organization on your own. To add accounts, talk to your New Relic account representative. To learn how you assign users permissions and access to specific accounts, see Manage users. Having trouble accessing a specific account or feature? See Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.29167,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic <em>account</em> structure",
        "sections": "New Relic <em>account</em> structure",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " editions allows for multiple <em>accounts</em>. At the top level of a New Relic <em>account</em> hierarchy is the concept of the &quot;organization.&quot; Your group of related <em>accounts</em> that share the same <em>billing</em> are inside a single &quot;New Relic organization.&quot; Currently you can&#x27;t add <em>accounts</em> to your organization on your own"
      },
      "id": "60bee5c028ccbc2413e667e4"
    }
  ],
  "/docs/accounts/install-new-relic/partner-based-installation/heroku-install-new-relic-add": [
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "da1d767d7bc556d6b1a0b78e73738936607cb7dd",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/mastersub-account-structure/",
      "published_at": "2021-06-08T19:09:12Z",
      "updated_at": "2021-06-08T04:17:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For organizations on our original account/user model, you can create a more complex account structure with master accounts and sub-accounts that inherit master account settings. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user models, see User models. The major differences are: Original account/user model: Our original model uses a master/sub-account structure, where sub-accounts inherit settings from master accounts. Our partnership accounts also use this model. If your organization is on this model, you're able to create your own sub-accounts. If you're on this model, continue reading below to learn how this account structure works. New Relic One account/user model: This is our new, improved model. For more about how accounts work for this model, see Account structure. Master and sub-account hierarchy For organizations on our original account/user model that have a master/sub-account structure, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.65115,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "Master <em>and</em> sub-<em>account</em> hierarchy",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "For organizations on our original <em>account</em>&#x2F;user model, you can create a more complex <em>account</em> structure with master <em>accounts</em> and sub-<em>accounts</em> that inherit master <em>account</em> settings. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization"
      },
      "id": "60beef5764441fc42dd543d3"
    },
    {
      "sections": [
        "Factors affecting access to features and data",
        "User permissions",
        "Account access",
        "Pricing plan or edition",
        "The entities being monitored",
        "Data retention"
      ],
      "title": "Factors affecting access to features and data",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "98bf366604050b491ee35c8422414c70bda452b4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/factors-affecting-access-features-data/",
      "published_at": "2021-06-09T01:22:01Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There are several factors that can affect your access to a New Relic feature, or New Relic data. User permissions User-related settings can impact what features or data you have access to. Potential impacts include: Your user type (basic user or full user). Your assigned roles. How your user roles and permissions work depends on which user model you're on. Account access If you're logged in to New Relic and don't see the account or data you expect to see, some causes and solutions include: If your organization has multiple accounts, there's an account switcher at the top left of most New Relic UI pages. Check to see if you can use that to switch accounts. You may have more than one login associated with the same email address. If you think this may be the case, log out and log back in. When you input your email address, the login UI tells you if you have multiple logins and gives you an option for seeing all accounts associated with that email. If you're having trouble accessing an older account, see this Explorers Hub post about multiple account access. It's possible an admin user in your organization changed your permissions for an account. Related docs: Account structure Login and password troubleshooting Delete accounts Pricing plan or edition We have two pricing plans available, and this can impact feature availability. Pricing plans: Our original product-based pricing plan: This plan separates our offerings by product. If you’re on this plan, access to some features may depend on the products you pay for. Our New Relic One pricing plan: This newer pricing plan gives more cross-platform access. The main factors affecting access are your edition and your user type. We also have several Full Stack Observability pricing editions: Standard, Pro, and Enterprise. Learn more about our pricing plans. The entities being monitored Some of our solutions enable functionality that isn’t available to all users, like: Additional UI components, and Data available for querying For example, enabling distributed tracing results in you seeing trace data in the UI and in having trace data available for querying. If you are missing data that you expect to see, see Missing data. Data retention Different types of New Relic data have different data retention periods. Once data has passed a given data retention point, it may be deleted or be aggregated for longer term storage. For details, see Data retention.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.29167,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Factors affecting access to features <em>and</em> data",
        "sections": "<em>Account</em> access",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " and permissions work depends on which user model you&#x27;re on. <em>Account</em> access If you&#x27;re logged in to New Relic and don&#x27;t see the <em>account</em> or data you expect to see, some causes and solutions include: If your organization has multiple <em>accounts</em>, there&#x27;s an <em>account</em> switcher at the top left of most New"
      },
      "id": "60bee5c064441f0505d543bb"
    },
    {
      "sections": [
        "New Relic account structure",
        "Impacts of account/user model",
        "Account structure for New Relic One account/user model"
      ],
      "title": "New Relic account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "4f5a4cde293d0b599f489eff010f69c021ccb539",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/new-relic-account-structure/",
      "published_at": "2021-06-09T02:17:27Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your account/user model, you have different options for adding and managing accounts and assigning users to them. Impacts of account/user model How you manage accounts and users differs based on which of our account/user models your organization is on. To learn more about the account/user models and determine which you're on, see User models. The major differences are: Original account/user model: Our original model used a master/sub-account structure, where sub-accounts inherited settings from master accounts. If you're on this model, see the Original user model docs. New Relic One account/user model: This is our new, improved model. We currently are migrating some customer accounts to this model and eventually all our customers will be on this model. To learn more and see if you can migrate your users, see Migrate users. To learn more about how account and user management works, keep reading. Account structure for New Relic One account/user model For organizations on the New Relic One account/user model, here are some details about how organization and account management work: The Standard edition allows for a single account per organization. Pro and Enterprise editions allows for multiple accounts. At the top level of a New Relic account hierarchy is the concept of the \"organization.\" Your group of related accounts that share the same billing are inside a single \"New Relic organization.\" Currently you can't add accounts to your organization on your own. To add accounts, talk to your New Relic account representative. To learn how you assign users permissions and access to specific accounts, see Manage users. Having trouble accessing a specific account or feature? See Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.29167,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic <em>account</em> structure",
        "sections": "New Relic <em>account</em> structure",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " editions allows for multiple <em>accounts</em>. At the top level of a New Relic <em>account</em> hierarchy is the concept of the &quot;organization.&quot; Your group of related <em>accounts</em> that share the same <em>billing</em> are inside a single &quot;New Relic organization.&quot; Currently you can&#x27;t add <em>accounts</em> to your organization on your own"
      },
      "id": "60bee5c028ccbc2413e667e4"
    }
  ],
  "/docs/accounts/install-new-relic/partner-based-installation/log-install-new-relic-partners": [
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "da1d767d7bc556d6b1a0b78e73738936607cb7dd",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/mastersub-account-structure/",
      "published_at": "2021-06-08T19:09:12Z",
      "updated_at": "2021-06-08T04:17:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For organizations on our original account/user model, you can create a more complex account structure with master accounts and sub-accounts that inherit master account settings. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user models, see User models. The major differences are: Original account/user model: Our original model uses a master/sub-account structure, where sub-accounts inherit settings from master accounts. Our partnership accounts also use this model. If your organization is on this model, you're able to create your own sub-accounts. If you're on this model, continue reading below to learn how this account structure works. New Relic One account/user model: This is our new, improved model. For more about how accounts work for this model, see Account structure. Master and sub-account hierarchy For organizations on our original account/user model that have a master/sub-account structure, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.65102,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "Master <em>and</em> sub-<em>account</em> hierarchy",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "For organizations on our original <em>account</em>&#x2F;user model, you can create a more complex <em>account</em> structure with master <em>accounts</em> and sub-<em>accounts</em> that inherit master <em>account</em> settings. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization"
      },
      "id": "60beef5764441fc42dd543d3"
    },
    {
      "sections": [
        "Factors affecting access to features and data",
        "User permissions",
        "Account access",
        "Pricing plan or edition",
        "The entities being monitored",
        "Data retention"
      ],
      "title": "Factors affecting access to features and data",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "98bf366604050b491ee35c8422414c70bda452b4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/factors-affecting-access-features-data/",
      "published_at": "2021-06-09T01:22:01Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There are several factors that can affect your access to a New Relic feature, or New Relic data. User permissions User-related settings can impact what features or data you have access to. Potential impacts include: Your user type (basic user or full user). Your assigned roles. How your user roles and permissions work depends on which user model you're on. Account access If you're logged in to New Relic and don't see the account or data you expect to see, some causes and solutions include: If your organization has multiple accounts, there's an account switcher at the top left of most New Relic UI pages. Check to see if you can use that to switch accounts. You may have more than one login associated with the same email address. If you think this may be the case, log out and log back in. When you input your email address, the login UI tells you if you have multiple logins and gives you an option for seeing all accounts associated with that email. If you're having trouble accessing an older account, see this Explorers Hub post about multiple account access. It's possible an admin user in your organization changed your permissions for an account. Related docs: Account structure Login and password troubleshooting Delete accounts Pricing plan or edition We have two pricing plans available, and this can impact feature availability. Pricing plans: Our original product-based pricing plan: This plan separates our offerings by product. If you’re on this plan, access to some features may depend on the products you pay for. Our New Relic One pricing plan: This newer pricing plan gives more cross-platform access. The main factors affecting access are your edition and your user type. We also have several Full Stack Observability pricing editions: Standard, Pro, and Enterprise. Learn more about our pricing plans. The entities being monitored Some of our solutions enable functionality that isn’t available to all users, like: Additional UI components, and Data available for querying For example, enabling distributed tracing results in you seeing trace data in the UI and in having trace data available for querying. If you are missing data that you expect to see, see Missing data. Data retention Different types of New Relic data have different data retention periods. Once data has passed a given data retention point, it may be deleted or be aggregated for longer term storage. For details, see Data retention.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.29153,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Factors affecting access to features <em>and</em> data",
        "sections": "<em>Account</em> access",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " and permissions work depends on which user model you&#x27;re on. <em>Account</em> access If you&#x27;re logged in to New Relic and don&#x27;t see the <em>account</em> or data you expect to see, some causes and solutions include: If your organization has multiple <em>accounts</em>, there&#x27;s an <em>account</em> switcher at the top left of most New"
      },
      "id": "60bee5c064441f0505d543bb"
    },
    {
      "sections": [
        "New Relic account structure",
        "Impacts of account/user model",
        "Account structure for New Relic One account/user model"
      ],
      "title": "New Relic account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "4f5a4cde293d0b599f489eff010f69c021ccb539",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/new-relic-account-structure/",
      "published_at": "2021-06-09T02:17:27Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your account/user model, you have different options for adding and managing accounts and assigning users to them. Impacts of account/user model How you manage accounts and users differs based on which of our account/user models your organization is on. To learn more about the account/user models and determine which you're on, see User models. The major differences are: Original account/user model: Our original model used a master/sub-account structure, where sub-accounts inherited settings from master accounts. If you're on this model, see the Original user model docs. New Relic One account/user model: This is our new, improved model. We currently are migrating some customer accounts to this model and eventually all our customers will be on this model. To learn more and see if you can migrate your users, see Migrate users. To learn more about how account and user management works, keep reading. Account structure for New Relic One account/user model For organizations on the New Relic One account/user model, here are some details about how organization and account management work: The Standard edition allows for a single account per organization. Pro and Enterprise editions allows for multiple accounts. At the top level of a New Relic account hierarchy is the concept of the \"organization.\" Your group of related accounts that share the same billing are inside a single \"New Relic organization.\" Currently you can't add accounts to your organization on your own. To add accounts, talk to your New Relic account representative. To learn how you assign users permissions and access to specific accounts, see Manage users. Having trouble accessing a specific account or feature? See Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.29153,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic <em>account</em> structure",
        "sections": "New Relic <em>account</em> structure",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " editions allows for multiple <em>accounts</em>. At the top level of a New Relic <em>account</em> hierarchy is the concept of the &quot;organization.&quot; Your group of related <em>accounts</em> that share the same <em>billing</em> are inside a single &quot;New Relic organization.&quot; Currently you can&#x27;t add <em>accounts</em> to your organization on your own"
      },
      "id": "60bee5c028ccbc2413e667e4"
    }
  ],
  "/docs/accounts/install-new-relic/partner-based-installation/rackspace-cloud-load-balancer-plugin": [
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "da1d767d7bc556d6b1a0b78e73738936607cb7dd",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/mastersub-account-structure/",
      "published_at": "2021-06-08T19:09:12Z",
      "updated_at": "2021-06-08T04:17:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For organizations on our original account/user model, you can create a more complex account structure with master accounts and sub-accounts that inherit master account settings. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user models, see User models. The major differences are: Original account/user model: Our original model uses a master/sub-account structure, where sub-accounts inherit settings from master accounts. Our partnership accounts also use this model. If your organization is on this model, you're able to create your own sub-accounts. If you're on this model, continue reading below to learn how this account structure works. New Relic One account/user model: This is our new, improved model. For more about how accounts work for this model, see Account structure. Master and sub-account hierarchy For organizations on our original account/user model that have a master/sub-account structure, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.65102,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "Master <em>and</em> sub-<em>account</em> hierarchy",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "For organizations on our original <em>account</em>&#x2F;user model, you can create a more complex <em>account</em> structure with master <em>accounts</em> and sub-<em>accounts</em> that inherit master <em>account</em> settings. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization"
      },
      "id": "60beef5764441fc42dd543d3"
    },
    {
      "sections": [
        "Factors affecting access to features and data",
        "User permissions",
        "Account access",
        "Pricing plan or edition",
        "The entities being monitored",
        "Data retention"
      ],
      "title": "Factors affecting access to features and data",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "98bf366604050b491ee35c8422414c70bda452b4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/factors-affecting-access-features-data/",
      "published_at": "2021-06-09T01:22:01Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There are several factors that can affect your access to a New Relic feature, or New Relic data. User permissions User-related settings can impact what features or data you have access to. Potential impacts include: Your user type (basic user or full user). Your assigned roles. How your user roles and permissions work depends on which user model you're on. Account access If you're logged in to New Relic and don't see the account or data you expect to see, some causes and solutions include: If your organization has multiple accounts, there's an account switcher at the top left of most New Relic UI pages. Check to see if you can use that to switch accounts. You may have more than one login associated with the same email address. If you think this may be the case, log out and log back in. When you input your email address, the login UI tells you if you have multiple logins and gives you an option for seeing all accounts associated with that email. If you're having trouble accessing an older account, see this Explorers Hub post about multiple account access. It's possible an admin user in your organization changed your permissions for an account. Related docs: Account structure Login and password troubleshooting Delete accounts Pricing plan or edition We have two pricing plans available, and this can impact feature availability. Pricing plans: Our original product-based pricing plan: This plan separates our offerings by product. If you’re on this plan, access to some features may depend on the products you pay for. Our New Relic One pricing plan: This newer pricing plan gives more cross-platform access. The main factors affecting access are your edition and your user type. We also have several Full Stack Observability pricing editions: Standard, Pro, and Enterprise. Learn more about our pricing plans. The entities being monitored Some of our solutions enable functionality that isn’t available to all users, like: Additional UI components, and Data available for querying For example, enabling distributed tracing results in you seeing trace data in the UI and in having trace data available for querying. If you are missing data that you expect to see, see Missing data. Data retention Different types of New Relic data have different data retention periods. Once data has passed a given data retention point, it may be deleted or be aggregated for longer term storage. For details, see Data retention.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.29153,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Factors affecting access to features <em>and</em> data",
        "sections": "<em>Account</em> access",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " and permissions work depends on which user model you&#x27;re on. <em>Account</em> access If you&#x27;re logged in to New Relic and don&#x27;t see the <em>account</em> or data you expect to see, some causes and solutions include: If your organization has multiple <em>accounts</em>, there&#x27;s an <em>account</em> switcher at the top left of most New"
      },
      "id": "60bee5c064441f0505d543bb"
    },
    {
      "sections": [
        "New Relic account structure",
        "Impacts of account/user model",
        "Account structure for New Relic One account/user model"
      ],
      "title": "New Relic account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "4f5a4cde293d0b599f489eff010f69c021ccb539",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/new-relic-account-structure/",
      "published_at": "2021-06-09T02:17:27Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your account/user model, you have different options for adding and managing accounts and assigning users to them. Impacts of account/user model How you manage accounts and users differs based on which of our account/user models your organization is on. To learn more about the account/user models and determine which you're on, see User models. The major differences are: Original account/user model: Our original model used a master/sub-account structure, where sub-accounts inherited settings from master accounts. If you're on this model, see the Original user model docs. New Relic One account/user model: This is our new, improved model. We currently are migrating some customer accounts to this model and eventually all our customers will be on this model. To learn more and see if you can migrate your users, see Migrate users. To learn more about how account and user management works, keep reading. Account structure for New Relic One account/user model For organizations on the New Relic One account/user model, here are some details about how organization and account management work: The Standard edition allows for a single account per organization. Pro and Enterprise editions allows for multiple accounts. At the top level of a New Relic account hierarchy is the concept of the \"organization.\" Your group of related accounts that share the same billing are inside a single \"New Relic organization.\" Currently you can't add accounts to your organization on your own. To add accounts, talk to your New Relic account representative. To learn how you assign users permissions and access to specific accounts, see Manage users. Having trouble accessing a specific account or feature? See Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.29153,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic <em>account</em> structure",
        "sections": "New Relic <em>account</em> structure",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " editions allows for multiple <em>accounts</em>. At the top level of a New Relic <em>account</em> hierarchy is the concept of the &quot;organization.&quot; Your group of related <em>accounts</em> that share the same <em>billing</em> are inside a single &quot;New Relic organization.&quot; Currently you can&#x27;t add <em>accounts</em> to your organization on your own"
      },
      "id": "60bee5c028ccbc2413e667e4"
    }
  ],
  "/docs/accounts/install-new-relic/partner-based-installation/rightscale-users-new-relic": [
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "da1d767d7bc556d6b1a0b78e73738936607cb7dd",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/mastersub-account-structure/",
      "published_at": "2021-06-08T19:09:12Z",
      "updated_at": "2021-06-08T04:17:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For organizations on our original account/user model, you can create a more complex account structure with master accounts and sub-accounts that inherit master account settings. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user models, see User models. The major differences are: Original account/user model: Our original model uses a master/sub-account structure, where sub-accounts inherit settings from master accounts. Our partnership accounts also use this model. If your organization is on this model, you're able to create your own sub-accounts. If you're on this model, continue reading below to learn how this account structure works. New Relic One account/user model: This is our new, improved model. For more about how accounts work for this model, see Account structure. Master and sub-account hierarchy For organizations on our original account/user model that have a master/sub-account structure, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.65088,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "Master <em>and</em> sub-<em>account</em> hierarchy",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "For organizations on our original <em>account</em>&#x2F;user model, you can create a more complex <em>account</em> structure with master <em>accounts</em> and sub-<em>accounts</em> that inherit master <em>account</em> settings. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization"
      },
      "id": "60beef5764441fc42dd543d3"
    },
    {
      "sections": [
        "Factors affecting access to features and data",
        "User permissions",
        "Account access",
        "Pricing plan or edition",
        "The entities being monitored",
        "Data retention"
      ],
      "title": "Factors affecting access to features and data",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "98bf366604050b491ee35c8422414c70bda452b4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/factors-affecting-access-features-data/",
      "published_at": "2021-06-09T01:22:01Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There are several factors that can affect your access to a New Relic feature, or New Relic data. User permissions User-related settings can impact what features or data you have access to. Potential impacts include: Your user type (basic user or full user). Your assigned roles. How your user roles and permissions work depends on which user model you're on. Account access If you're logged in to New Relic and don't see the account or data you expect to see, some causes and solutions include: If your organization has multiple accounts, there's an account switcher at the top left of most New Relic UI pages. Check to see if you can use that to switch accounts. You may have more than one login associated with the same email address. If you think this may be the case, log out and log back in. When you input your email address, the login UI tells you if you have multiple logins and gives you an option for seeing all accounts associated with that email. If you're having trouble accessing an older account, see this Explorers Hub post about multiple account access. It's possible an admin user in your organization changed your permissions for an account. Related docs: Account structure Login and password troubleshooting Delete accounts Pricing plan or edition We have two pricing plans available, and this can impact feature availability. Pricing plans: Our original product-based pricing plan: This plan separates our offerings by product. If you’re on this plan, access to some features may depend on the products you pay for. Our New Relic One pricing plan: This newer pricing plan gives more cross-platform access. The main factors affecting access are your edition and your user type. We also have several Full Stack Observability pricing editions: Standard, Pro, and Enterprise. Learn more about our pricing plans. The entities being monitored Some of our solutions enable functionality that isn’t available to all users, like: Additional UI components, and Data available for querying For example, enabling distributed tracing results in you seeing trace data in the UI and in having trace data available for querying. If you are missing data that you expect to see, see Missing data. Data retention Different types of New Relic data have different data retention periods. Once data has passed a given data retention point, it may be deleted or be aggregated for longer term storage. For details, see Data retention.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.29138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Factors affecting access to features <em>and</em> data",
        "sections": "<em>Account</em> access",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " and permissions work depends on which user model you&#x27;re on. <em>Account</em> access If you&#x27;re logged in to New Relic and don&#x27;t see the <em>account</em> or data you expect to see, some causes and solutions include: If your organization has multiple <em>accounts</em>, there&#x27;s an <em>account</em> switcher at the top left of most New"
      },
      "id": "60bee5c064441f0505d543bb"
    },
    {
      "sections": [
        "New Relic account structure",
        "Impacts of account/user model",
        "Account structure for New Relic One account/user model"
      ],
      "title": "New Relic account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "4f5a4cde293d0b599f489eff010f69c021ccb539",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/new-relic-account-structure/",
      "published_at": "2021-06-09T02:17:27Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your account/user model, you have different options for adding and managing accounts and assigning users to them. Impacts of account/user model How you manage accounts and users differs based on which of our account/user models your organization is on. To learn more about the account/user models and determine which you're on, see User models. The major differences are: Original account/user model: Our original model used a master/sub-account structure, where sub-accounts inherited settings from master accounts. If you're on this model, see the Original user model docs. New Relic One account/user model: This is our new, improved model. We currently are migrating some customer accounts to this model and eventually all our customers will be on this model. To learn more and see if you can migrate your users, see Migrate users. To learn more about how account and user management works, keep reading. Account structure for New Relic One account/user model For organizations on the New Relic One account/user model, here are some details about how organization and account management work: The Standard edition allows for a single account per organization. Pro and Enterprise editions allows for multiple accounts. At the top level of a New Relic account hierarchy is the concept of the \"organization.\" Your group of related accounts that share the same billing are inside a single \"New Relic organization.\" Currently you can't add accounts to your organization on your own. To add accounts, talk to your New Relic account representative. To learn how you assign users permissions and access to specific accounts, see Manage users. Having trouble accessing a specific account or feature? See Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.29138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic <em>account</em> structure",
        "sections": "New Relic <em>account</em> structure",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " editions allows for multiple <em>accounts</em>. At the top level of a New Relic <em>account</em> hierarchy is the concept of the &quot;organization.&quot; Your group of related <em>accounts</em> that share the same <em>billing</em> are inside a single &quot;New Relic organization.&quot; Currently you can&#x27;t add <em>accounts</em> to your organization on your own"
      },
      "id": "60bee5c028ccbc2413e667e4"
    }
  ],
  "/docs/accounts/install-new-relic/partner-based-installation/windows-azure-users-new-relic": [
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "da1d767d7bc556d6b1a0b78e73738936607cb7dd",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/mastersub-account-structure/",
      "published_at": "2021-06-08T19:09:12Z",
      "updated_at": "2021-06-08T04:17:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For organizations on our original account/user model, you can create a more complex account structure with master accounts and sub-accounts that inherit master account settings. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user models, see User models. The major differences are: Original account/user model: Our original model uses a master/sub-account structure, where sub-accounts inherit settings from master accounts. Our partnership accounts also use this model. If your organization is on this model, you're able to create your own sub-accounts. If you're on this model, continue reading below to learn how this account structure works. New Relic One account/user model: This is our new, improved model. For more about how accounts work for this model, see Account structure. Master and sub-account hierarchy For organizations on our original account/user model that have a master/sub-account structure, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.65088,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "Master <em>and</em> sub-<em>account</em> hierarchy",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "For organizations on our original <em>account</em>&#x2F;user model, you can create a more complex <em>account</em> structure with master <em>accounts</em> and sub-<em>accounts</em> that inherit master <em>account</em> settings. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization"
      },
      "id": "60beef5764441fc42dd543d3"
    },
    {
      "sections": [
        "Factors affecting access to features and data",
        "User permissions",
        "Account access",
        "Pricing plan or edition",
        "The entities being monitored",
        "Data retention"
      ],
      "title": "Factors affecting access to features and data",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "98bf366604050b491ee35c8422414c70bda452b4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/factors-affecting-access-features-data/",
      "published_at": "2021-06-09T01:22:01Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There are several factors that can affect your access to a New Relic feature, or New Relic data. User permissions User-related settings can impact what features or data you have access to. Potential impacts include: Your user type (basic user or full user). Your assigned roles. How your user roles and permissions work depends on which user model you're on. Account access If you're logged in to New Relic and don't see the account or data you expect to see, some causes and solutions include: If your organization has multiple accounts, there's an account switcher at the top left of most New Relic UI pages. Check to see if you can use that to switch accounts. You may have more than one login associated with the same email address. If you think this may be the case, log out and log back in. When you input your email address, the login UI tells you if you have multiple logins and gives you an option for seeing all accounts associated with that email. If you're having trouble accessing an older account, see this Explorers Hub post about multiple account access. It's possible an admin user in your organization changed your permissions for an account. Related docs: Account structure Login and password troubleshooting Delete accounts Pricing plan or edition We have two pricing plans available, and this can impact feature availability. Pricing plans: Our original product-based pricing plan: This plan separates our offerings by product. If you’re on this plan, access to some features may depend on the products you pay for. Our New Relic One pricing plan: This newer pricing plan gives more cross-platform access. The main factors affecting access are your edition and your user type. We also have several Full Stack Observability pricing editions: Standard, Pro, and Enterprise. Learn more about our pricing plans. The entities being monitored Some of our solutions enable functionality that isn’t available to all users, like: Additional UI components, and Data available for querying For example, enabling distributed tracing results in you seeing trace data in the UI and in having trace data available for querying. If you are missing data that you expect to see, see Missing data. Data retention Different types of New Relic data have different data retention periods. Once data has passed a given data retention point, it may be deleted or be aggregated for longer term storage. For details, see Data retention.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.29138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Factors affecting access to features <em>and</em> data",
        "sections": "<em>Account</em> access",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " and permissions work depends on which user model you&#x27;re on. <em>Account</em> access If you&#x27;re logged in to New Relic and don&#x27;t see the <em>account</em> or data you expect to see, some causes and solutions include: If your organization has multiple <em>accounts</em>, there&#x27;s an <em>account</em> switcher at the top left of most New"
      },
      "id": "60bee5c064441f0505d543bb"
    },
    {
      "sections": [
        "New Relic account structure",
        "Impacts of account/user model",
        "Account structure for New Relic One account/user model"
      ],
      "title": "New Relic account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "4f5a4cde293d0b599f489eff010f69c021ccb539",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/new-relic-account-structure/",
      "published_at": "2021-06-09T02:17:27Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your account/user model, you have different options for adding and managing accounts and assigning users to them. Impacts of account/user model How you manage accounts and users differs based on which of our account/user models your organization is on. To learn more about the account/user models and determine which you're on, see User models. The major differences are: Original account/user model: Our original model used a master/sub-account structure, where sub-accounts inherited settings from master accounts. If you're on this model, see the Original user model docs. New Relic One account/user model: This is our new, improved model. We currently are migrating some customer accounts to this model and eventually all our customers will be on this model. To learn more and see if you can migrate your users, see Migrate users. To learn more about how account and user management works, keep reading. Account structure for New Relic One account/user model For organizations on the New Relic One account/user model, here are some details about how organization and account management work: The Standard edition allows for a single account per organization. Pro and Enterprise editions allows for multiple accounts. At the top level of a New Relic account hierarchy is the concept of the \"organization.\" Your group of related accounts that share the same billing are inside a single \"New Relic organization.\" Currently you can't add accounts to your organization on your own. To add accounts, talk to your New Relic account representative. To learn how you assign users permissions and access to specific accounts, see Manage users. Having trouble accessing a specific account or feature? See Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.29138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic <em>account</em> structure",
        "sections": "New Relic <em>account</em> structure",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " editions allows for multiple <em>accounts</em>. At the top level of a New Relic <em>account</em> hierarchy is the concept of the &quot;organization.&quot; Your group of related <em>accounts</em> that share the same <em>billing</em> are inside a single &quot;New Relic organization.&quot; Currently you can&#x27;t add <em>accounts</em> to your organization on your own"
      },
      "id": "60bee5c028ccbc2413e667e4"
    }
  ],
  "/docs/accounts/new-relic-account-usage/getting-started-usage/apm-cu-based-subscription-usage": [
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 254.51727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Users, roles, permissions (<em>original</em> user model)",
        "sections": "Users, roles, permissions (<em>original</em> user model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " Relic One <em>pricing</em>. If you&#x27;re on our <em>original</em> <em>pricing</em> <em>plan</em>, <em>billing</em> impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Infrastructure subscription usage",
        "Important",
        "Data generation",
        "Usage calculation",
        "Tip",
        "Table definitions",
        "General attributes",
        "Infrastructure attributes",
        "Query examples",
        "Compute units for last month",
        "Detailed host report (reproducing old usage report)",
        "Account hierarchy"
      ],
      "title": "Infrastructure subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "036858ab7d7fb54da536202e11788d0fc1029460",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/infrastructure-subscription-usage/",
      "published_at": "2021-06-08T20:20:00Z",
      "updated_at": "2021-03-16T14:44:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Infrastructure accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, a New Relic Infrastructure account will generate an NrDailyUsage event for every unique host on which an application instance existed over the last 24 hours. All Infrastructure events have a productLine attribute value of Infrastructure. For more information, see query examples. Usage calculation Monthly billable CUs for a host are calculated by the size of the host running Infrastructure (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. If your usage is fairly steady over time, you can estimate usage for the current month. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Infrastructure usage page, set the time picker to Last 30 days. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Introduction to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns displayed depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not Infrastructure-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Infrastructure attributes The following are usage-related attributes generated by Infrastructure. To query this data, use a productLine attribute value of Infrastructure. Attribute Description agentHostname ID used to uniquely identify the host for which this usage is reported. Any given hour of usage for this host will be counted only once when calculating infrastructureHoursUsed. There are several possible host identifiers reported by the New Relic agent. The usage reporting system will always use the agent-reported hostname to uniquely identify the host for the Infrastructure product, but will also record the cloudInstanceId, if present, for informational purposes. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This will not be present if no cloud provider was detected by the agent. cloudInstanceSize Size of the cloud instance for this host for CU billing purposes, as calculated according to the formula for infrastructureBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. infrastructureAgentVersion Version of the Infrastructure agent running on the host reporting this usage. If multiple agents are reporting from the same host, the version from the first agent seen in a given hour will be used. infrastructureAgentMemoryBytes Bytes of RAM available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureAgentProcessorCount Number of logical CPU cores available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedMemoryBytes Bytes of RAM available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedProcessorCount Number of logical CPU cores available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureBillingInstanceSize Size of the host, for CU billing purposes. Calculated as: number of processors multiplied by memory in GiB. infrastructureHoursUsed Number of hours for which usage was recorded for the given host. When a host is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. infrastructureComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as: infrastructureHoursUsed multiplied by infrastructureBillingInstanceSize. For more about compute unit calculation, see CU pricing. infrastructureComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an agent and operating system combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData True if the Infrastructure agent reports no CPU count. missingRamData True if the Infrastructure agent reports no memory count. productLine The New Relic product the usage data is from. Always use the value Infrastructure when querying for Infrastructure usage data. usageType The type of entity this event records values for. This value is Host for Infrastructure. Query examples Here are some examples of NRQL queries you can use with your Infrastructure subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. For general information about how to use NRQL queries to get focused usage data, see Intro to usage data. Compute units for last month This query produces a count of the CUs used over the last month: SELECT sum(infrastructureComputeUnits) FROM NrDailyUsage WHERE productLine='Infrastructure' AND usageType='Host' SINCE last month UNTIL this month Copy Detailed host report (reproducing old usage report) This query reproduces as closely as possible the report you would have gotten by downloading the CSV from the previously available Infrastructure subscription usage UI: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID',agentHostname,cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type',infrastructureBillingInstanceSize AS 'Instance size',infrastructureHoursUsed AS 'Hours used',infrastructureComputeUnits AS 'Usage (CU)', infrastructureCloudDerivedMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureCloudDerivedProcessorCount AS 'Logical processors',infrastructureAgentMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureAgentProcessorCount AS 'Logical processors',infrastructureComputeUnitRule AS 'Business rule',missingCpuData, missingRamData, instanceSizeCapped,cloudZone,cloudInstanceId WHERE productLine='Infrastructure' AND usageType='Host' SINCE 1 day ago LIMIT 1000 Copy This NRQL query is different than the legacy usage report: Detailed host query Comments Time period This query includes only the last day of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to 1000 NRQL limits the results to 1000. If you have more than 1000 hosts and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE agentHostname LIKE ... to divide the data into groups). Business rule Business rule has been replaced with two attributes: infrastructureComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are now boolean flags describing what the value missing_data means when it is present in the infrastructureComputeUnitRule attribute. Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.48691,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure subscription <em>usage</em>",
        "sections": "Infrastructure subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a7196a676ed2a83db4"
    },
    {
      "sections": [
        "APM (host-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (host-based)",
        "Query examples",
        "Usage for last month",
        "Usage per host per application",
        "Instance-hours per application",
        "Agent version information",
        "Account hierarchy",
        "Legacy per-host usage report",
        "Legacy host usage report (application listing)",
        "Use of Docker and other containers"
      ],
      "title": "APM (host-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "afaa1272f61e4c003e687d26e904438c0391cda1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-host-based-subscription-usage/",
      "published_at": "2021-06-08T17:52:13Z",
      "updated_at": "2021-03-16T14:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this doc explains how New Relic calculates billable usage for APM accounts that have host-based pricing (not CU-based pricing). This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance that existed during the last 24 hours Every unique host on which an application instance ran during the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations For host-based APM pricing, monthly billable usage is determined by the number of equivalent hosts used during that month. An equivalent host is defined as: 750 hours (standardized number of monthly hours) of connection to New Relic by a host or multiple hosts. For more on this calculation, see host-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's billable usage: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. See the Avg daily equivalent hosts for an account or grouping of accounts. The UI is meant to estimate your host usage but, especially for cloud environments, your usage may go up or down over time. For more information about the usage UI, see Introduction to New Relic subscription usage data. Table definitions Here are definitions of the column headers in the UI table and CSV files. The columns you see depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily equivalent hosts Average equivalent hosts for that day. Calculated as the total number of hours reported for all unique hosts in a day, divided by 24. For more on how this is calculated, see Host-based pricing. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (host-based) The following are usage-related attributes generated by host-based APM accounts (not CU-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. When calculating monthly APM host usage, the calculation for equivalent hosts for a month assumes that a standard month has 750 hours: ` apmHoursUsed / 750 ` . apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. productLine The New Relic product the usage data is from. Always use the value APM when querying for APM CU usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage data can be analyzed in several ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. You can run NRQL queries and use the resulting charts in dashboards. Usage for last month This query uses New Relic’s standard number of hours per month (750) for the purpose of calculating APM equivalent hosts over the last month. SELECT sum(apmHoursUsed)/750 AS 'Equivalent hosts' FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Usage per host per application New Relic records usage per application instance, not strictly per application. This query gives an approximation of the usage for a given application on a given host. If unique application instances run sequentially on a host within a given day, this query could return an underestimate (this would be likely, for example, in a container environment). SELECT max(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName,hostId SINCE 1 day ago LIMIT 2000 Copy Instance-hours per application This query measures the total number of hours used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have seen in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with other attributes. It no longer is used to describe whether the agent needs to be updated. Legacy host usage report (application listing) This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Use of Docker and other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of host-based usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.4867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (host-based) subscription <em>usage</em>",
        "sections": "APM (host-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this doc explains how New Relic calculates billable"
      },
      "id": "603e834128ccbc66fdeba78b"
    }
  ],
  "/docs/accounts/new-relic-account-usage/getting-started-usage/apm-host-based-subscription-usage": [
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 254.51727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Users, roles, permissions (<em>original</em> user model)",
        "sections": "Users, roles, permissions (<em>original</em> user model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " Relic One <em>pricing</em>. If you&#x27;re on our <em>original</em> <em>pricing</em> <em>plan</em>, <em>billing</em> impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Infrastructure subscription usage",
        "Important",
        "Data generation",
        "Usage calculation",
        "Tip",
        "Table definitions",
        "General attributes",
        "Infrastructure attributes",
        "Query examples",
        "Compute units for last month",
        "Detailed host report (reproducing old usage report)",
        "Account hierarchy"
      ],
      "title": "Infrastructure subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "036858ab7d7fb54da536202e11788d0fc1029460",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/infrastructure-subscription-usage/",
      "published_at": "2021-06-08T20:20:00Z",
      "updated_at": "2021-03-16T14:44:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Infrastructure accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, a New Relic Infrastructure account will generate an NrDailyUsage event for every unique host on which an application instance existed over the last 24 hours. All Infrastructure events have a productLine attribute value of Infrastructure. For more information, see query examples. Usage calculation Monthly billable CUs for a host are calculated by the size of the host running Infrastructure (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. If your usage is fairly steady over time, you can estimate usage for the current month. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Infrastructure usage page, set the time picker to Last 30 days. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Introduction to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns displayed depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not Infrastructure-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Infrastructure attributes The following are usage-related attributes generated by Infrastructure. To query this data, use a productLine attribute value of Infrastructure. Attribute Description agentHostname ID used to uniquely identify the host for which this usage is reported. Any given hour of usage for this host will be counted only once when calculating infrastructureHoursUsed. There are several possible host identifiers reported by the New Relic agent. The usage reporting system will always use the agent-reported hostname to uniquely identify the host for the Infrastructure product, but will also record the cloudInstanceId, if present, for informational purposes. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This will not be present if no cloud provider was detected by the agent. cloudInstanceSize Size of the cloud instance for this host for CU billing purposes, as calculated according to the formula for infrastructureBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. infrastructureAgentVersion Version of the Infrastructure agent running on the host reporting this usage. If multiple agents are reporting from the same host, the version from the first agent seen in a given hour will be used. infrastructureAgentMemoryBytes Bytes of RAM available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureAgentProcessorCount Number of logical CPU cores available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedMemoryBytes Bytes of RAM available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedProcessorCount Number of logical CPU cores available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureBillingInstanceSize Size of the host, for CU billing purposes. Calculated as: number of processors multiplied by memory in GiB. infrastructureHoursUsed Number of hours for which usage was recorded for the given host. When a host is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. infrastructureComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as: infrastructureHoursUsed multiplied by infrastructureBillingInstanceSize. For more about compute unit calculation, see CU pricing. infrastructureComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an agent and operating system combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData True if the Infrastructure agent reports no CPU count. missingRamData True if the Infrastructure agent reports no memory count. productLine The New Relic product the usage data is from. Always use the value Infrastructure when querying for Infrastructure usage data. usageType The type of entity this event records values for. This value is Host for Infrastructure. Query examples Here are some examples of NRQL queries you can use with your Infrastructure subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. For general information about how to use NRQL queries to get focused usage data, see Intro to usage data. Compute units for last month This query produces a count of the CUs used over the last month: SELECT sum(infrastructureComputeUnits) FROM NrDailyUsage WHERE productLine='Infrastructure' AND usageType='Host' SINCE last month UNTIL this month Copy Detailed host report (reproducing old usage report) This query reproduces as closely as possible the report you would have gotten by downloading the CSV from the previously available Infrastructure subscription usage UI: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID',agentHostname,cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type',infrastructureBillingInstanceSize AS 'Instance size',infrastructureHoursUsed AS 'Hours used',infrastructureComputeUnits AS 'Usage (CU)', infrastructureCloudDerivedMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureCloudDerivedProcessorCount AS 'Logical processors',infrastructureAgentMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureAgentProcessorCount AS 'Logical processors',infrastructureComputeUnitRule AS 'Business rule',missingCpuData, missingRamData, instanceSizeCapped,cloudZone,cloudInstanceId WHERE productLine='Infrastructure' AND usageType='Host' SINCE 1 day ago LIMIT 1000 Copy This NRQL query is different than the legacy usage report: Detailed host query Comments Time period This query includes only the last day of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to 1000 NRQL limits the results to 1000. If you have more than 1000 hosts and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE agentHostname LIKE ... to divide the data into groups). Business rule Business rule has been replaced with two attributes: infrastructureComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are now boolean flags describing what the value missing_data means when it is present in the infrastructureComputeUnitRule attribute. Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.48691,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure subscription <em>usage</em>",
        "sections": "Infrastructure subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a7196a676ed2a83db4"
    },
    {
      "sections": [
        "Synthetics subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "General attributes",
        "Synthetics attributes",
        "Query examples",
        "Billable checks for the last month",
        "Account hierarchy"
      ],
      "title": "Synthetics subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "e44875ddb623f28b20215dda9ffd226b535e1e52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/synthetics-subscription-usage/",
      "published_at": "2021-06-09T01:23:11Z",
      "updated_at": "2021-03-16T14:28:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Synthetics accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation A New Relic Synthetics subscription level is based on the number of non-ping monitor checks used during a calendar month. Once per day, every Synthetics monitor location will generate an NrDailyUsage event for every monitor type. This event will summarize Synthetics usage for that location and monitor type over the last 24 hours. All Synthetics usage events have a productLine attribute value of Synthetics. For more information, see the Synthetics query examples. Usage calculations A New Relic Synthetics subscription level is based on the number of non-ping monitor checks used during a calendar month. If your monitor checks are fairly steady over time, you can estimate the current month's eventual usage. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Synthetics usage page, set the time picker to Last 30 days. Multiply the Avg daily paid checks by the number of days in the current month. The Synthetics usage chart displays the daily count of monitor checks. The table value Avg daily paid checks displays the total number of monitor checks for the selected time period, divided by the number of days. For more information about the usage UI, see Introduction to subscription usage data. General attributes The following are general (not Synthetics-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Synthetics attributes The following are usage-related attributes generated by New Relic Synthetics. To query this data, use a productLine attribute value of Synthetics. Attribute Description productLine The New Relic product the usage data is from. Synthetics data will have the value Synthetics. Use this value when querying Synthetics usage data. syntheticsFailedCheckCount Number of failed checks that ran on the given day for the given Synthetics monitor and location. Failed checks count toward subscription usage for Synthetics. Only checks with syntheticsType not equal to SIMPLE count toward billable subscription usage. syntheticsSuccessCheckCount Number of successful checks that ran on the given day for the given Synthetics monitor and location. Only checks with syntheticsType not equal to SIMPLE count toward billable subscription usage. syntheticsLocation Location the check ran in. syntheticsLocationLabel Human-readable label for the location of the check. syntheticsType The type of Synthetics monitor. Possible values: SIMPLE, BROWSER, SCRIPT_BROWSER, SCRIPT_API. For more information, see Monitor types. syntheticsTypeLabel Human-readable label for syntheticsType. Possible values: Ping, Simple Browser, Scripted Browser, Scripted API. syntheticsMonitorName Name of the monitor. syntheticsMonitorId Unique ID of the monitor. usageType The type of entity for which this event records usage data. This value is Check for Synthetics. Query examples Here are some examples of NRQL queries you can use with your Synthetics subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. Billable checks for the last month This query produces a chart of the billable monitor checks over the last month. Remember that a syntheticsType of SIMPLE refers to a ping monitor, which doesn't count towards paid usage. FROM NrDailyUsage SELECT sum(syntheticsFailedCheckCount) + sum(syntheticsSuccessCheckCount) AS 'Paid checks' where productLine='Synthetics' AND syntheticsType != 'SIMPLE' SINCE last month UNTIL this month Copy Account hierarchy This is a non-product-specific query useful for seeing your account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.48396,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetics subscription <em>usage</em>",
        "sections": "Synthetics subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a6196a672f33a83dd7"
    }
  ],
  "/docs/accounts/new-relic-account-usage/getting-started-usage/infrastructure-subscription-usage": [
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 254.51706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Users, roles, permissions (<em>original</em> user model)",
        "sections": "Users, roles, permissions (<em>original</em> user model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " Relic One <em>pricing</em>. If you&#x27;re on our <em>original</em> <em>pricing</em> <em>plan</em>, <em>billing</em> impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "APM (host-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (host-based)",
        "Query examples",
        "Usage for last month",
        "Usage per host per application",
        "Instance-hours per application",
        "Agent version information",
        "Account hierarchy",
        "Legacy per-host usage report",
        "Legacy host usage report (application listing)",
        "Use of Docker and other containers"
      ],
      "title": "APM (host-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "afaa1272f61e4c003e687d26e904438c0391cda1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-host-based-subscription-usage/",
      "published_at": "2021-06-08T17:52:13Z",
      "updated_at": "2021-03-16T14:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this doc explains how New Relic calculates billable usage for APM accounts that have host-based pricing (not CU-based pricing). This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance that existed during the last 24 hours Every unique host on which an application instance ran during the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations For host-based APM pricing, monthly billable usage is determined by the number of equivalent hosts used during that month. An equivalent host is defined as: 750 hours (standardized number of monthly hours) of connection to New Relic by a host or multiple hosts. For more on this calculation, see host-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's billable usage: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. See the Avg daily equivalent hosts for an account or grouping of accounts. The UI is meant to estimate your host usage but, especially for cloud environments, your usage may go up or down over time. For more information about the usage UI, see Introduction to New Relic subscription usage data. Table definitions Here are definitions of the column headers in the UI table and CSV files. The columns you see depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily equivalent hosts Average equivalent hosts for that day. Calculated as the total number of hours reported for all unique hosts in a day, divided by 24. For more on how this is calculated, see Host-based pricing. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (host-based) The following are usage-related attributes generated by host-based APM accounts (not CU-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. When calculating monthly APM host usage, the calculation for equivalent hosts for a month assumes that a standard month has 750 hours: ` apmHoursUsed / 750 ` . apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. productLine The New Relic product the usage data is from. Always use the value APM when querying for APM CU usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage data can be analyzed in several ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. You can run NRQL queries and use the resulting charts in dashboards. Usage for last month This query uses New Relic’s standard number of hours per month (750) for the purpose of calculating APM equivalent hosts over the last month. SELECT sum(apmHoursUsed)/750 AS 'Equivalent hosts' FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Usage per host per application New Relic records usage per application instance, not strictly per application. This query gives an approximation of the usage for a given application on a given host. If unique application instances run sequentially on a host within a given day, this query could return an underestimate (this would be likely, for example, in a container environment). SELECT max(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName,hostId SINCE 1 day ago LIMIT 2000 Copy Instance-hours per application This query measures the total number of hours used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have seen in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with other attributes. It no longer is used to describe whether the agent needs to be updated. Legacy host usage report (application listing) This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Use of Docker and other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of host-based usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.4867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (host-based) subscription <em>usage</em>",
        "sections": "APM (host-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this doc explains how New Relic calculates billable"
      },
      "id": "603e834128ccbc66fdeba78b"
    },
    {
      "sections": [
        "Synthetics subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "General attributes",
        "Synthetics attributes",
        "Query examples",
        "Billable checks for the last month",
        "Account hierarchy"
      ],
      "title": "Synthetics subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "e44875ddb623f28b20215dda9ffd226b535e1e52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/synthetics-subscription-usage/",
      "published_at": "2021-06-09T01:23:11Z",
      "updated_at": "2021-03-16T14:28:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Synthetics accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation A New Relic Synthetics subscription level is based on the number of non-ping monitor checks used during a calendar month. Once per day, every Synthetics monitor location will generate an NrDailyUsage event for every monitor type. This event will summarize Synthetics usage for that location and monitor type over the last 24 hours. All Synthetics usage events have a productLine attribute value of Synthetics. For more information, see the Synthetics query examples. Usage calculations A New Relic Synthetics subscription level is based on the number of non-ping monitor checks used during a calendar month. If your monitor checks are fairly steady over time, you can estimate the current month's eventual usage. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Synthetics usage page, set the time picker to Last 30 days. Multiply the Avg daily paid checks by the number of days in the current month. The Synthetics usage chart displays the daily count of monitor checks. The table value Avg daily paid checks displays the total number of monitor checks for the selected time period, divided by the number of days. For more information about the usage UI, see Introduction to subscription usage data. General attributes The following are general (not Synthetics-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Synthetics attributes The following are usage-related attributes generated by New Relic Synthetics. To query this data, use a productLine attribute value of Synthetics. Attribute Description productLine The New Relic product the usage data is from. Synthetics data will have the value Synthetics. Use this value when querying Synthetics usage data. syntheticsFailedCheckCount Number of failed checks that ran on the given day for the given Synthetics monitor and location. Failed checks count toward subscription usage for Synthetics. Only checks with syntheticsType not equal to SIMPLE count toward billable subscription usage. syntheticsSuccessCheckCount Number of successful checks that ran on the given day for the given Synthetics monitor and location. Only checks with syntheticsType not equal to SIMPLE count toward billable subscription usage. syntheticsLocation Location the check ran in. syntheticsLocationLabel Human-readable label for the location of the check. syntheticsType The type of Synthetics monitor. Possible values: SIMPLE, BROWSER, SCRIPT_BROWSER, SCRIPT_API. For more information, see Monitor types. syntheticsTypeLabel Human-readable label for syntheticsType. Possible values: Ping, Simple Browser, Scripted Browser, Scripted API. syntheticsMonitorName Name of the monitor. syntheticsMonitorId Unique ID of the monitor. usageType The type of entity for which this event records usage data. This value is Check for Synthetics. Query examples Here are some examples of NRQL queries you can use with your Synthetics subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. Billable checks for the last month This query produces a chart of the billable monitor checks over the last month. Remember that a syntheticsType of SIMPLE refers to a ping monitor, which doesn't count towards paid usage. FROM NrDailyUsage SELECT sum(syntheticsFailedCheckCount) + sum(syntheticsSuccessCheckCount) AS 'Paid checks' where productLine='Synthetics' AND syntheticsType != 'SIMPLE' SINCE last month UNTIL this month Copy Account hierarchy This is a non-product-specific query useful for seeing your account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.48395,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetics subscription <em>usage</em>",
        "sections": "Synthetics subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a6196a672f33a83dd7"
    }
  ],
  "/docs/accounts/new-relic-account-usage/getting-started-usage/insights-subscription-usage": [
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 254.51706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Users, roles, permissions (<em>original</em> user model)",
        "sections": "Users, roles, permissions (<em>original</em> user model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " Relic One <em>pricing</em>. If you&#x27;re on our <em>original</em> <em>pricing</em> <em>plan</em>, <em>billing</em> impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Infrastructure subscription usage",
        "Important",
        "Data generation",
        "Usage calculation",
        "Tip",
        "Table definitions",
        "General attributes",
        "Infrastructure attributes",
        "Query examples",
        "Compute units for last month",
        "Detailed host report (reproducing old usage report)",
        "Account hierarchy"
      ],
      "title": "Infrastructure subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "036858ab7d7fb54da536202e11788d0fc1029460",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/infrastructure-subscription-usage/",
      "published_at": "2021-06-08T20:20:00Z",
      "updated_at": "2021-03-16T14:44:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Infrastructure accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, a New Relic Infrastructure account will generate an NrDailyUsage event for every unique host on which an application instance existed over the last 24 hours. All Infrastructure events have a productLine attribute value of Infrastructure. For more information, see query examples. Usage calculation Monthly billable CUs for a host are calculated by the size of the host running Infrastructure (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. If your usage is fairly steady over time, you can estimate usage for the current month. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Infrastructure usage page, set the time picker to Last 30 days. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Introduction to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns displayed depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not Infrastructure-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Infrastructure attributes The following are usage-related attributes generated by Infrastructure. To query this data, use a productLine attribute value of Infrastructure. Attribute Description agentHostname ID used to uniquely identify the host for which this usage is reported. Any given hour of usage for this host will be counted only once when calculating infrastructureHoursUsed. There are several possible host identifiers reported by the New Relic agent. The usage reporting system will always use the agent-reported hostname to uniquely identify the host for the Infrastructure product, but will also record the cloudInstanceId, if present, for informational purposes. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This will not be present if no cloud provider was detected by the agent. cloudInstanceSize Size of the cloud instance for this host for CU billing purposes, as calculated according to the formula for infrastructureBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. infrastructureAgentVersion Version of the Infrastructure agent running on the host reporting this usage. If multiple agents are reporting from the same host, the version from the first agent seen in a given hour will be used. infrastructureAgentMemoryBytes Bytes of RAM available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureAgentProcessorCount Number of logical CPU cores available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedMemoryBytes Bytes of RAM available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedProcessorCount Number of logical CPU cores available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureBillingInstanceSize Size of the host, for CU billing purposes. Calculated as: number of processors multiplied by memory in GiB. infrastructureHoursUsed Number of hours for which usage was recorded for the given host. When a host is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. infrastructureComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as: infrastructureHoursUsed multiplied by infrastructureBillingInstanceSize. For more about compute unit calculation, see CU pricing. infrastructureComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an agent and operating system combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData True if the Infrastructure agent reports no CPU count. missingRamData True if the Infrastructure agent reports no memory count. productLine The New Relic product the usage data is from. Always use the value Infrastructure when querying for Infrastructure usage data. usageType The type of entity this event records values for. This value is Host for Infrastructure. Query examples Here are some examples of NRQL queries you can use with your Infrastructure subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. For general information about how to use NRQL queries to get focused usage data, see Intro to usage data. Compute units for last month This query produces a count of the CUs used over the last month: SELECT sum(infrastructureComputeUnits) FROM NrDailyUsage WHERE productLine='Infrastructure' AND usageType='Host' SINCE last month UNTIL this month Copy Detailed host report (reproducing old usage report) This query reproduces as closely as possible the report you would have gotten by downloading the CSV from the previously available Infrastructure subscription usage UI: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID',agentHostname,cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type',infrastructureBillingInstanceSize AS 'Instance size',infrastructureHoursUsed AS 'Hours used',infrastructureComputeUnits AS 'Usage (CU)', infrastructureCloudDerivedMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureCloudDerivedProcessorCount AS 'Logical processors',infrastructureAgentMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureAgentProcessorCount AS 'Logical processors',infrastructureComputeUnitRule AS 'Business rule',missingCpuData, missingRamData, instanceSizeCapped,cloudZone,cloudInstanceId WHERE productLine='Infrastructure' AND usageType='Host' SINCE 1 day ago LIMIT 1000 Copy This NRQL query is different than the legacy usage report: Detailed host query Comments Time period This query includes only the last day of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to 1000 NRQL limits the results to 1000. If you have more than 1000 hosts and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE agentHostname LIKE ... to divide the data into groups). Business rule Business rule has been replaced with two attributes: infrastructureComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are now boolean flags describing what the value missing_data means when it is present in the infrastructureComputeUnitRule attribute. Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.48691,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure subscription <em>usage</em>",
        "sections": "Infrastructure subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a7196a676ed2a83db4"
    },
    {
      "sections": [
        "APM (host-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (host-based)",
        "Query examples",
        "Usage for last month",
        "Usage per host per application",
        "Instance-hours per application",
        "Agent version information",
        "Account hierarchy",
        "Legacy per-host usage report",
        "Legacy host usage report (application listing)",
        "Use of Docker and other containers"
      ],
      "title": "APM (host-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "afaa1272f61e4c003e687d26e904438c0391cda1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-host-based-subscription-usage/",
      "published_at": "2021-06-08T17:52:13Z",
      "updated_at": "2021-03-16T14:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this doc explains how New Relic calculates billable usage for APM accounts that have host-based pricing (not CU-based pricing). This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance that existed during the last 24 hours Every unique host on which an application instance ran during the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations For host-based APM pricing, monthly billable usage is determined by the number of equivalent hosts used during that month. An equivalent host is defined as: 750 hours (standardized number of monthly hours) of connection to New Relic by a host or multiple hosts. For more on this calculation, see host-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's billable usage: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. See the Avg daily equivalent hosts for an account or grouping of accounts. The UI is meant to estimate your host usage but, especially for cloud environments, your usage may go up or down over time. For more information about the usage UI, see Introduction to New Relic subscription usage data. Table definitions Here are definitions of the column headers in the UI table and CSV files. The columns you see depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily equivalent hosts Average equivalent hosts for that day. Calculated as the total number of hours reported for all unique hosts in a day, divided by 24. For more on how this is calculated, see Host-based pricing. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (host-based) The following are usage-related attributes generated by host-based APM accounts (not CU-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. When calculating monthly APM host usage, the calculation for equivalent hosts for a month assumes that a standard month has 750 hours: ` apmHoursUsed / 750 ` . apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. productLine The New Relic product the usage data is from. Always use the value APM when querying for APM CU usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage data can be analyzed in several ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. You can run NRQL queries and use the resulting charts in dashboards. Usage for last month This query uses New Relic’s standard number of hours per month (750) for the purpose of calculating APM equivalent hosts over the last month. SELECT sum(apmHoursUsed)/750 AS 'Equivalent hosts' FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Usage per host per application New Relic records usage per application instance, not strictly per application. This query gives an approximation of the usage for a given application on a given host. If unique application instances run sequentially on a host within a given day, this query could return an underestimate (this would be likely, for example, in a container environment). SELECT max(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName,hostId SINCE 1 day ago LIMIT 2000 Copy Instance-hours per application This query measures the total number of hours used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have seen in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with other attributes. It no longer is used to describe whether the agent needs to be updated. Legacy host usage report (application listing) This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Use of Docker and other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of host-based usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.4867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (host-based) subscription <em>usage</em>",
        "sections": "APM (host-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this doc explains how New Relic calculates billable"
      },
      "id": "603e834128ccbc66fdeba78b"
    }
  ],
  "/docs/accounts/new-relic-account-usage/getting-started-usage/introduction-new-relic-subscription-usage-data": [
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 254.51686,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Users, roles, permissions (<em>original</em> user model)",
        "sections": "Users, roles, permissions (<em>original</em> user model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " Relic One <em>pricing</em>. If you&#x27;re on our <em>original</em> <em>pricing</em> <em>plan</em>, <em>billing</em> impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Infrastructure subscription usage",
        "Important",
        "Data generation",
        "Usage calculation",
        "Tip",
        "Table definitions",
        "General attributes",
        "Infrastructure attributes",
        "Query examples",
        "Compute units for last month",
        "Detailed host report (reproducing old usage report)",
        "Account hierarchy"
      ],
      "title": "Infrastructure subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "036858ab7d7fb54da536202e11788d0fc1029460",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/infrastructure-subscription-usage/",
      "published_at": "2021-06-08T20:20:00Z",
      "updated_at": "2021-03-16T14:44:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Infrastructure accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, a New Relic Infrastructure account will generate an NrDailyUsage event for every unique host on which an application instance existed over the last 24 hours. All Infrastructure events have a productLine attribute value of Infrastructure. For more information, see query examples. Usage calculation Monthly billable CUs for a host are calculated by the size of the host running Infrastructure (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. If your usage is fairly steady over time, you can estimate usage for the current month. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Infrastructure usage page, set the time picker to Last 30 days. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Introduction to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns displayed depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not Infrastructure-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Infrastructure attributes The following are usage-related attributes generated by Infrastructure. To query this data, use a productLine attribute value of Infrastructure. Attribute Description agentHostname ID used to uniquely identify the host for which this usage is reported. Any given hour of usage for this host will be counted only once when calculating infrastructureHoursUsed. There are several possible host identifiers reported by the New Relic agent. The usage reporting system will always use the agent-reported hostname to uniquely identify the host for the Infrastructure product, but will also record the cloudInstanceId, if present, for informational purposes. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This will not be present if no cloud provider was detected by the agent. cloudInstanceSize Size of the cloud instance for this host for CU billing purposes, as calculated according to the formula for infrastructureBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. infrastructureAgentVersion Version of the Infrastructure agent running on the host reporting this usage. If multiple agents are reporting from the same host, the version from the first agent seen in a given hour will be used. infrastructureAgentMemoryBytes Bytes of RAM available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureAgentProcessorCount Number of logical CPU cores available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedMemoryBytes Bytes of RAM available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedProcessorCount Number of logical CPU cores available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureBillingInstanceSize Size of the host, for CU billing purposes. Calculated as: number of processors multiplied by memory in GiB. infrastructureHoursUsed Number of hours for which usage was recorded for the given host. When a host is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. infrastructureComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as: infrastructureHoursUsed multiplied by infrastructureBillingInstanceSize. For more about compute unit calculation, see CU pricing. infrastructureComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an agent and operating system combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData True if the Infrastructure agent reports no CPU count. missingRamData True if the Infrastructure agent reports no memory count. productLine The New Relic product the usage data is from. Always use the value Infrastructure when querying for Infrastructure usage data. usageType The type of entity this event records values for. This value is Host for Infrastructure. Query examples Here are some examples of NRQL queries you can use with your Infrastructure subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. For general information about how to use NRQL queries to get focused usage data, see Intro to usage data. Compute units for last month This query produces a count of the CUs used over the last month: SELECT sum(infrastructureComputeUnits) FROM NrDailyUsage WHERE productLine='Infrastructure' AND usageType='Host' SINCE last month UNTIL this month Copy Detailed host report (reproducing old usage report) This query reproduces as closely as possible the report you would have gotten by downloading the CSV from the previously available Infrastructure subscription usage UI: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID',agentHostname,cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type',infrastructureBillingInstanceSize AS 'Instance size',infrastructureHoursUsed AS 'Hours used',infrastructureComputeUnits AS 'Usage (CU)', infrastructureCloudDerivedMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureCloudDerivedProcessorCount AS 'Logical processors',infrastructureAgentMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureAgentProcessorCount AS 'Logical processors',infrastructureComputeUnitRule AS 'Business rule',missingCpuData, missingRamData, instanceSizeCapped,cloudZone,cloudInstanceId WHERE productLine='Infrastructure' AND usageType='Host' SINCE 1 day ago LIMIT 1000 Copy This NRQL query is different than the legacy usage report: Detailed host query Comments Time period This query includes only the last day of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to 1000 NRQL limits the results to 1000. If you have more than 1000 hosts and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE agentHostname LIKE ... to divide the data into groups). Business rule Business rule has been replaced with two attributes: infrastructureComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are now boolean flags describing what the value missing_data means when it is present in the infrastructureComputeUnitRule attribute. Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.48691,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure subscription <em>usage</em>",
        "sections": "Infrastructure subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a7196a676ed2a83db4"
    },
    {
      "sections": [
        "APM (host-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (host-based)",
        "Query examples",
        "Usage for last month",
        "Usage per host per application",
        "Instance-hours per application",
        "Agent version information",
        "Account hierarchy",
        "Legacy per-host usage report",
        "Legacy host usage report (application listing)",
        "Use of Docker and other containers"
      ],
      "title": "APM (host-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "afaa1272f61e4c003e687d26e904438c0391cda1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-host-based-subscription-usage/",
      "published_at": "2021-06-08T17:52:13Z",
      "updated_at": "2021-03-16T14:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this doc explains how New Relic calculates billable usage for APM accounts that have host-based pricing (not CU-based pricing). This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance that existed during the last 24 hours Every unique host on which an application instance ran during the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations For host-based APM pricing, monthly billable usage is determined by the number of equivalent hosts used during that month. An equivalent host is defined as: 750 hours (standardized number of monthly hours) of connection to New Relic by a host or multiple hosts. For more on this calculation, see host-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's billable usage: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. See the Avg daily equivalent hosts for an account or grouping of accounts. The UI is meant to estimate your host usage but, especially for cloud environments, your usage may go up or down over time. For more information about the usage UI, see Introduction to New Relic subscription usage data. Table definitions Here are definitions of the column headers in the UI table and CSV files. The columns you see depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily equivalent hosts Average equivalent hosts for that day. Calculated as the total number of hours reported for all unique hosts in a day, divided by 24. For more on how this is calculated, see Host-based pricing. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (host-based) The following are usage-related attributes generated by host-based APM accounts (not CU-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. When calculating monthly APM host usage, the calculation for equivalent hosts for a month assumes that a standard month has 750 hours: ` apmHoursUsed / 750 ` . apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. productLine The New Relic product the usage data is from. Always use the value APM when querying for APM CU usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage data can be analyzed in several ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. You can run NRQL queries and use the resulting charts in dashboards. Usage for last month This query uses New Relic’s standard number of hours per month (750) for the purpose of calculating APM equivalent hosts over the last month. SELECT sum(apmHoursUsed)/750 AS 'Equivalent hosts' FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Usage per host per application New Relic records usage per application instance, not strictly per application. This query gives an approximation of the usage for a given application on a given host. If unique application instances run sequentially on a host within a given day, this query could return an underestimate (this would be likely, for example, in a container environment). SELECT max(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName,hostId SINCE 1 day ago LIMIT 2000 Copy Instance-hours per application This query measures the total number of hours used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have seen in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with other attributes. It no longer is used to describe whether the agent needs to be updated. Legacy host usage report (application listing) This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Use of Docker and other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of host-based usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.4867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (host-based) subscription <em>usage</em>",
        "sections": "APM (host-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this doc explains how New Relic calculates billable"
      },
      "id": "603e834128ccbc66fdeba78b"
    }
  ],
  "/docs/accounts/new-relic-account-usage/getting-started-usage/mobile-subscription-usage": [
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 254.51686,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Users, roles, permissions (<em>original</em> user model)",
        "sections": "Users, roles, permissions (<em>original</em> user model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " Relic One <em>pricing</em>. If you&#x27;re on our <em>original</em> <em>pricing</em> <em>plan</em>, <em>billing</em> impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Infrastructure subscription usage",
        "Important",
        "Data generation",
        "Usage calculation",
        "Tip",
        "Table definitions",
        "General attributes",
        "Infrastructure attributes",
        "Query examples",
        "Compute units for last month",
        "Detailed host report (reproducing old usage report)",
        "Account hierarchy"
      ],
      "title": "Infrastructure subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "036858ab7d7fb54da536202e11788d0fc1029460",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/infrastructure-subscription-usage/",
      "published_at": "2021-06-08T20:20:00Z",
      "updated_at": "2021-03-16T14:44:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Infrastructure accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, a New Relic Infrastructure account will generate an NrDailyUsage event for every unique host on which an application instance existed over the last 24 hours. All Infrastructure events have a productLine attribute value of Infrastructure. For more information, see query examples. Usage calculation Monthly billable CUs for a host are calculated by the size of the host running Infrastructure (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. If your usage is fairly steady over time, you can estimate usage for the current month. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Infrastructure usage page, set the time picker to Last 30 days. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Introduction to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns displayed depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not Infrastructure-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Infrastructure attributes The following are usage-related attributes generated by Infrastructure. To query this data, use a productLine attribute value of Infrastructure. Attribute Description agentHostname ID used to uniquely identify the host for which this usage is reported. Any given hour of usage for this host will be counted only once when calculating infrastructureHoursUsed. There are several possible host identifiers reported by the New Relic agent. The usage reporting system will always use the agent-reported hostname to uniquely identify the host for the Infrastructure product, but will also record the cloudInstanceId, if present, for informational purposes. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This will not be present if no cloud provider was detected by the agent. cloudInstanceSize Size of the cloud instance for this host for CU billing purposes, as calculated according to the formula for infrastructureBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. infrastructureAgentVersion Version of the Infrastructure agent running on the host reporting this usage. If multiple agents are reporting from the same host, the version from the first agent seen in a given hour will be used. infrastructureAgentMemoryBytes Bytes of RAM available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureAgentProcessorCount Number of logical CPU cores available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedMemoryBytes Bytes of RAM available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedProcessorCount Number of logical CPU cores available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureBillingInstanceSize Size of the host, for CU billing purposes. Calculated as: number of processors multiplied by memory in GiB. infrastructureHoursUsed Number of hours for which usage was recorded for the given host. When a host is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. infrastructureComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as: infrastructureHoursUsed multiplied by infrastructureBillingInstanceSize. For more about compute unit calculation, see CU pricing. infrastructureComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an agent and operating system combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData True if the Infrastructure agent reports no CPU count. missingRamData True if the Infrastructure agent reports no memory count. productLine The New Relic product the usage data is from. Always use the value Infrastructure when querying for Infrastructure usage data. usageType The type of entity this event records values for. This value is Host for Infrastructure. Query examples Here are some examples of NRQL queries you can use with your Infrastructure subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. For general information about how to use NRQL queries to get focused usage data, see Intro to usage data. Compute units for last month This query produces a count of the CUs used over the last month: SELECT sum(infrastructureComputeUnits) FROM NrDailyUsage WHERE productLine='Infrastructure' AND usageType='Host' SINCE last month UNTIL this month Copy Detailed host report (reproducing old usage report) This query reproduces as closely as possible the report you would have gotten by downloading the CSV from the previously available Infrastructure subscription usage UI: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID',agentHostname,cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type',infrastructureBillingInstanceSize AS 'Instance size',infrastructureHoursUsed AS 'Hours used',infrastructureComputeUnits AS 'Usage (CU)', infrastructureCloudDerivedMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureCloudDerivedProcessorCount AS 'Logical processors',infrastructureAgentMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureAgentProcessorCount AS 'Logical processors',infrastructureComputeUnitRule AS 'Business rule',missingCpuData, missingRamData, instanceSizeCapped,cloudZone,cloudInstanceId WHERE productLine='Infrastructure' AND usageType='Host' SINCE 1 day ago LIMIT 1000 Copy This NRQL query is different than the legacy usage report: Detailed host query Comments Time period This query includes only the last day of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to 1000 NRQL limits the results to 1000. If you have more than 1000 hosts and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE agentHostname LIKE ... to divide the data into groups). Business rule Business rule has been replaced with two attributes: infrastructureComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are now boolean flags describing what the value missing_data means when it is present in the infrastructureComputeUnitRule attribute. Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.48691,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure subscription <em>usage</em>",
        "sections": "Infrastructure subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a7196a676ed2a83db4"
    },
    {
      "sections": [
        "APM (host-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (host-based)",
        "Query examples",
        "Usage for last month",
        "Usage per host per application",
        "Instance-hours per application",
        "Agent version information",
        "Account hierarchy",
        "Legacy per-host usage report",
        "Legacy host usage report (application listing)",
        "Use of Docker and other containers"
      ],
      "title": "APM (host-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "afaa1272f61e4c003e687d26e904438c0391cda1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-host-based-subscription-usage/",
      "published_at": "2021-06-08T17:52:13Z",
      "updated_at": "2021-03-16T14:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this doc explains how New Relic calculates billable usage for APM accounts that have host-based pricing (not CU-based pricing). This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance that existed during the last 24 hours Every unique host on which an application instance ran during the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations For host-based APM pricing, monthly billable usage is determined by the number of equivalent hosts used during that month. An equivalent host is defined as: 750 hours (standardized number of monthly hours) of connection to New Relic by a host or multiple hosts. For more on this calculation, see host-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's billable usage: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. See the Avg daily equivalent hosts for an account or grouping of accounts. The UI is meant to estimate your host usage but, especially for cloud environments, your usage may go up or down over time. For more information about the usage UI, see Introduction to New Relic subscription usage data. Table definitions Here are definitions of the column headers in the UI table and CSV files. The columns you see depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily equivalent hosts Average equivalent hosts for that day. Calculated as the total number of hours reported for all unique hosts in a day, divided by 24. For more on how this is calculated, see Host-based pricing. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (host-based) The following are usage-related attributes generated by host-based APM accounts (not CU-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. When calculating monthly APM host usage, the calculation for equivalent hosts for a month assumes that a standard month has 750 hours: ` apmHoursUsed / 750 ` . apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. productLine The New Relic product the usage data is from. Always use the value APM when querying for APM CU usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage data can be analyzed in several ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. You can run NRQL queries and use the resulting charts in dashboards. Usage for last month This query uses New Relic’s standard number of hours per month (750) for the purpose of calculating APM equivalent hosts over the last month. SELECT sum(apmHoursUsed)/750 AS 'Equivalent hosts' FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Usage per host per application New Relic records usage per application instance, not strictly per application. This query gives an approximation of the usage for a given application on a given host. If unique application instances run sequentially on a host within a given day, this query could return an underestimate (this would be likely, for example, in a container environment). SELECT max(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName,hostId SINCE 1 day ago LIMIT 2000 Copy Instance-hours per application This query measures the total number of hours used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have seen in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with other attributes. It no longer is used to describe whether the agent needs to be updated. Legacy host usage report (application listing) This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Use of Docker and other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of host-based usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.4867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (host-based) subscription <em>usage</em>",
        "sections": "APM (host-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this doc explains how New Relic calculates billable"
      },
      "id": "603e834128ccbc66fdeba78b"
    }
  ],
  "/docs/accounts/new-relic-account-usage/getting-started-usage/synthetics-subscription-usage": [
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 254.51686,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Users, roles, permissions (<em>original</em> user model)",
        "sections": "Users, roles, permissions (<em>original</em> user model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " Relic One <em>pricing</em>. If you&#x27;re on our <em>original</em> <em>pricing</em> <em>plan</em>, <em>billing</em> impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Infrastructure subscription usage",
        "Important",
        "Data generation",
        "Usage calculation",
        "Tip",
        "Table definitions",
        "General attributes",
        "Infrastructure attributes",
        "Query examples",
        "Compute units for last month",
        "Detailed host report (reproducing old usage report)",
        "Account hierarchy"
      ],
      "title": "Infrastructure subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "036858ab7d7fb54da536202e11788d0fc1029460",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/infrastructure-subscription-usage/",
      "published_at": "2021-06-08T20:20:00Z",
      "updated_at": "2021-03-16T14:44:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Infrastructure accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, a New Relic Infrastructure account will generate an NrDailyUsage event for every unique host on which an application instance existed over the last 24 hours. All Infrastructure events have a productLine attribute value of Infrastructure. For more information, see query examples. Usage calculation Monthly billable CUs for a host are calculated by the size of the host running Infrastructure (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. If your usage is fairly steady over time, you can estimate usage for the current month. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Infrastructure usage page, set the time picker to Last 30 days. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Introduction to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns displayed depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not Infrastructure-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Infrastructure attributes The following are usage-related attributes generated by Infrastructure. To query this data, use a productLine attribute value of Infrastructure. Attribute Description agentHostname ID used to uniquely identify the host for which this usage is reported. Any given hour of usage for this host will be counted only once when calculating infrastructureHoursUsed. There are several possible host identifiers reported by the New Relic agent. The usage reporting system will always use the agent-reported hostname to uniquely identify the host for the Infrastructure product, but will also record the cloudInstanceId, if present, for informational purposes. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This will not be present if no cloud provider was detected by the agent. cloudInstanceSize Size of the cloud instance for this host for CU billing purposes, as calculated according to the formula for infrastructureBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. infrastructureAgentVersion Version of the Infrastructure agent running on the host reporting this usage. If multiple agents are reporting from the same host, the version from the first agent seen in a given hour will be used. infrastructureAgentMemoryBytes Bytes of RAM available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureAgentProcessorCount Number of logical CPU cores available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedMemoryBytes Bytes of RAM available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedProcessorCount Number of logical CPU cores available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureBillingInstanceSize Size of the host, for CU billing purposes. Calculated as: number of processors multiplied by memory in GiB. infrastructureHoursUsed Number of hours for which usage was recorded for the given host. When a host is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. infrastructureComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as: infrastructureHoursUsed multiplied by infrastructureBillingInstanceSize. For more about compute unit calculation, see CU pricing. infrastructureComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an agent and operating system combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData True if the Infrastructure agent reports no CPU count. missingRamData True if the Infrastructure agent reports no memory count. productLine The New Relic product the usage data is from. Always use the value Infrastructure when querying for Infrastructure usage data. usageType The type of entity this event records values for. This value is Host for Infrastructure. Query examples Here are some examples of NRQL queries you can use with your Infrastructure subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. For general information about how to use NRQL queries to get focused usage data, see Intro to usage data. Compute units for last month This query produces a count of the CUs used over the last month: SELECT sum(infrastructureComputeUnits) FROM NrDailyUsage WHERE productLine='Infrastructure' AND usageType='Host' SINCE last month UNTIL this month Copy Detailed host report (reproducing old usage report) This query reproduces as closely as possible the report you would have gotten by downloading the CSV from the previously available Infrastructure subscription usage UI: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID',agentHostname,cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type',infrastructureBillingInstanceSize AS 'Instance size',infrastructureHoursUsed AS 'Hours used',infrastructureComputeUnits AS 'Usage (CU)', infrastructureCloudDerivedMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureCloudDerivedProcessorCount AS 'Logical processors',infrastructureAgentMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureAgentProcessorCount AS 'Logical processors',infrastructureComputeUnitRule AS 'Business rule',missingCpuData, missingRamData, instanceSizeCapped,cloudZone,cloudInstanceId WHERE productLine='Infrastructure' AND usageType='Host' SINCE 1 day ago LIMIT 1000 Copy This NRQL query is different than the legacy usage report: Detailed host query Comments Time period This query includes only the last day of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to 1000 NRQL limits the results to 1000. If you have more than 1000 hosts and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE agentHostname LIKE ... to divide the data into groups). Business rule Business rule has been replaced with two attributes: infrastructureComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are now boolean flags describing what the value missing_data means when it is present in the infrastructureComputeUnitRule attribute. Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.48691,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure subscription <em>usage</em>",
        "sections": "Infrastructure subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a7196a676ed2a83db4"
    },
    {
      "sections": [
        "APM (host-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (host-based)",
        "Query examples",
        "Usage for last month",
        "Usage per host per application",
        "Instance-hours per application",
        "Agent version information",
        "Account hierarchy",
        "Legacy per-host usage report",
        "Legacy host usage report (application listing)",
        "Use of Docker and other containers"
      ],
      "title": "APM (host-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "afaa1272f61e4c003e687d26e904438c0391cda1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-host-based-subscription-usage/",
      "published_at": "2021-06-08T17:52:13Z",
      "updated_at": "2021-03-16T14:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this doc explains how New Relic calculates billable usage for APM accounts that have host-based pricing (not CU-based pricing). This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance that existed during the last 24 hours Every unique host on which an application instance ran during the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations For host-based APM pricing, monthly billable usage is determined by the number of equivalent hosts used during that month. An equivalent host is defined as: 750 hours (standardized number of monthly hours) of connection to New Relic by a host or multiple hosts. For more on this calculation, see host-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's billable usage: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. See the Avg daily equivalent hosts for an account or grouping of accounts. The UI is meant to estimate your host usage but, especially for cloud environments, your usage may go up or down over time. For more information about the usage UI, see Introduction to New Relic subscription usage data. Table definitions Here are definitions of the column headers in the UI table and CSV files. The columns you see depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily equivalent hosts Average equivalent hosts for that day. Calculated as the total number of hours reported for all unique hosts in a day, divided by 24. For more on how this is calculated, see Host-based pricing. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (host-based) The following are usage-related attributes generated by host-based APM accounts (not CU-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. When calculating monthly APM host usage, the calculation for equivalent hosts for a month assumes that a standard month has 750 hours: ` apmHoursUsed / 750 ` . apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. productLine The New Relic product the usage data is from. Always use the value APM when querying for APM CU usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage data can be analyzed in several ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. You can run NRQL queries and use the resulting charts in dashboards. Usage for last month This query uses New Relic’s standard number of hours per month (750) for the purpose of calculating APM equivalent hosts over the last month. SELECT sum(apmHoursUsed)/750 AS 'Equivalent hosts' FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Usage per host per application New Relic records usage per application instance, not strictly per application. This query gives an approximation of the usage for a given application on a given host. If unique application instances run sequentially on a host within a given day, this query could return an underestimate (this would be likely, for example, in a container environment). SELECT max(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName,hostId SINCE 1 day ago LIMIT 2000 Copy Instance-hours per application This query measures the total number of hours used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have seen in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with other attributes. It no longer is used to describe whether the agent needs to be updated. Legacy host usage report (application listing) This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Use of Docker and other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of host-based usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.4867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (host-based) subscription <em>usage</em>",
        "sections": "APM (host-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this doc explains how New Relic calculates billable"
      },
      "id": "603e834128ccbc66fdeba78b"
    }
  ],
  "/docs/accounts/original-accounts-billing/original-data-retention/event-data-retention-original-pricing-plan": [
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 254.51665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Users, roles, permissions (<em>original</em> user model)",
        "sections": "Users, roles, permissions (<em>original</em> user model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " than one login, they&#x27;ll see a &quot;multiple <em>accounts</em> found&quot; note when logging in. View and manage users in UI If your New Relic <em>account</em> has users on our <em>original</em> user model, you can use the Users and roles UI. To access this UI: select the <em>account</em> dropdown, select <em>Account</em> settings, and select Users"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Overview of data retention (original pricing plan)",
        "Important",
        "Limits on editing and deleting data",
        "Product and API data retention policies",
        "APM",
        "APM data retention policies",
        "Legacy APM data retention policies",
        "Browser",
        "Infrastructure",
        "Tip",
        "Infrastructure downsampling and data retention",
        "Integration compute unit event limits",
        "Insights",
        "Logs",
        "Logs in context data retention",
        "Mobile",
        "Mobile data retention policies",
        "Standard Mobile (legacy) data retention policies",
        "Plugins",
        "Plugins data retention",
        "Legacy Plugins data retention",
        "Synthetics",
        "Synthetics data retention policies",
        "Metric API",
        "Trace API",
        "Data components",
        "Event data: reported by most products",
        "Metric timeslice data: reported by APM, Browser, and Mobile",
        "Aggregate metric timeslice data: reported by APM, Browser, and Mobile",
        "Key metrics: reported by APM, Browser, and Mobile",
        "Trace data: reported by APM, Browser, and Mobile"
      ],
      "title": "Overview of data retention (original pricing plan)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original data retention"
      ],
      "external_id": "22d5ab9f4d623ead28ee7bb82c118d91804dee22",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/product-based-pricing/overview-data-retention-components/",
      "published_at": "2021-06-08T20:20:00Z",
      "updated_at": "2021-03-11T13:22:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on our New Relic One pricing plan, see Manage your data. Not sure which you're on? See Overview of pricing plans. If you're on the original product-based pricing plan, you retain your existing subscriptions and data retention values. You manage these existing retention settings from the Data management hub in New Relic One. To manage your retention settings, in New Relic One, click your user name, select Manage your data, and then select Data retention. You'll see your existing retention settings. Adjust retention values by clicking the Edit retention button. New Relic stores different types of data for different periods of time. The retention period for a type of data will vary depending on the product, the subscription level, and the feature. Limits on editing and deleting data Once telemetry data (events, metrics, logs, traces) is reported to New Relic and available for querying, that data cannot be edited or deleted. This is a purposeful design decision that optimizes New Relic's speed and performance. Data will expire after its data retention ends. If you sent unwanted data or sensitive data to New Relic that must be removed, contact your account representative at New Relic, or get support at support.newrelic.com. Product and API data retention policies Select a New Relic product to see details about its data retention: APM Specific retention policies apply to each New Relic APM subscription level, including Lite, Essentials, Pro, and Enterprise. This includes metric timeslice data, key metrics, trace data, and event data. In addition to retention limits, your data is subject to aggregation (averaging) after certain elapsed time periods. For more information, see the aggregate metric data description. APM data retention policies For accounts on our original product-based pricing, APM data retention policies depend on your APM product subscription level. Component Lite Essentials Pro Metric timeslice data 24 hours 3 days 90 days Key metrics none forever forever Distributed tracing and logs in context none none 8 days Other trace data * 1 day 3 days 7 days Event data * * 1 day 3 days 8 days * If you view a transaction trace in the New Relic UI, New Relic stores that trace data for up to one year. * * Learn about how to extend the retention of event data. Legacy APM data retention policies Component Standard Startup Small Business Enterprise Metric timeslice data 7 days 14 days 30 days 90 days Key metrics none none none forever Trace data 7 days 7 days 7 days 7 days Event data none 8 days 8 days 8 days Browser For accounts on our original product-based pricing, Browser data is stored depending on your subscription level: Component Lite Pro Metric data 24 hours 90 days Key metrics 24 hours forever Trace data 7 days 7 days Event data * 1 day 8 days SPA data Unavailable 8 days * Learn about how to extend the retention of event data. Infrastructure For accounts on our original product-based pricing, Infrastructure data retention policies depend on your Infrastructure subscription level and your New Relic Infrastructure compute units pricing model. Data retention rules apply the same whether that data is displayed in the UI or queried. Tip Infrastructure data retention is not governed by your Insights subscription. Infrastructure downsampling and data retention Types of data are stored depending on your subscription level: Component Essentials Pro Infrastructure data 3 months 13 months Host count Host count will stop reflecting a host whose agent is no longer reporting after three minutes. However, host data will be available, subject to other retention criteria. 3 minutes 3 minutes Inventory attributes removed Inventory attributes for a host are retained for 24 hours after the agent stops reporting. 24 hours 24 hours Integration data Not available with Essentials Limit of 2275 integration events per compute unit per month In addition, Infrastructure downsamples your data on the fly, as it's generated. All Infrastructure metric data types (including On-Host Integrations metrics) will display different granularity depending on the age of the data and the size of the time window. The following table illustrates when different downsampled buckets will be used, both in the Infrastructure UI and for queries: Bucket Size Used For Time Windows Covering... Data Retained For... Raw (5, 10 or 15 second) 0 to 59 minutes 7 days 1 minute 60 minutes to 6 hours 30 days 10 minutes 6 hours to 3 days Full account retention period 1 hour 3 days to 14 days Full account retention period 3 hours 14+ days Full account retention period Integration compute unit event limits The 2275 limit on integration events per compute unit per month is a limit on total Infrastructure integration events. It's not a limit of 2275 for each integration's events. Additional details and clarifications about this limit: This limit applies to all events from all integrations (cloud integrations and on-host integrations). The events are all handled the same. Default data received by the Infrastructure agent does not count against the 2275 event per compute unit limit. If you exceed your limit, we do not enforce this limit. If you exceed your limit, we'll review pricing options with you to ensure you get the most cost-effective pricing for your organization's integrations. Insights For accounts on our original product-based pricing, an Insights subscription extends your event data retention. An Insights Pro subscription allows you to customize the length of your event data retention. Logs For accounts on our original product-based pricing, log data can be retained for up to 30 days by New Relic. Shorter retention periods of 8 or 15 days are also available. Logs in context data retention New Relic Logs logs in context data retention policy is based on your current APM product subscription level. For more information, see APM data retention. Mobile For accounts on our original product-based pricing, Mobile data retention policies depend on your New Relic Mobile product subscription level. This includes data components such as metric data, aggregate metrics, key metrics, trace data, and event data. For information about your subscription-related data usage, see Mobile subscription usage. Mobile data retention policies Component Lite Enterprise Overview page data 24 hours 90 days Crash data and stack traces 24 hours 90 days HTTP requests (except errors) as metric data Unavailable 90 days HTTP request errors as metric data Unavailable 3 days Interaction traces Unavailable 90 days Custom events * Unavailable 1 day Mobile events * 1 day 8 days MobileBreadcrumb events * Unavailable 3 days MobileCrash events * 1 day 90 days MobileHandledException events * Unavailable 3 days MobileJSError events (React Native beta) * Unavailable 3 days MobileRequest events * Unavailable 3 days MobileRequestError events * Unavailable 3 days MobileSession events * 1 day 90 days * Learn how to extend retention of event data. Standard Mobile (legacy) data retention policies Unless otherwise noted, Insights event data is unavailable for Standard subscriptions. Component Standard Overview page data 7 days Crash data and stack traces 7 days HTTP requests (except errors) as metric data 7 days HTTP request errors as metric data 3 days Interaction traces Unavailable MobileCrash events 8 days MobileSession events 8 days Plugins The retention period for historical data depends on the product and subscription level. The following data retention periods exist for New Relic Plugins. Important Plugins is not supported with accounts that host data in the EU region data center. Plugins data retention Component Lite Essentials Pro Enterprise Metric data 24 hours 3 days 90 days 90 days Legacy Plugins data retention Component Standard Startup Small Business Metric data 7 days 14 days 30 days Synthetics For accounts on our original product-based pricing, Synthetics data retention policies depend on your Synthetics product subscription level. This includes data components such as metric data, aggregate metrics, key metrics, trace data, and Insights events. Tip Synthetics events do not count against an Insights Pro subscription. Your current subscription level appears in the right column of the Account summary page: Go to synthetics.newrelic.com > (account dropdown) > Account settings > Account > Summary. Synthetics data retention policies Component Lite Pro Synthetics monitor data 2 weeks 13 months Event data 2 weeks 13 months Also see the data retention details for APIs, including: Metric API All raw metric data points will be retained for 30 days. All additional aggregated data derived from the raw metric data points (for example, one-minute rollups) will be retained for 13 months. Any change to the retention period beyond such periods may result in a charge to you. Trace API See Trace API general requirements and limits. Data components For accounts on our original product-based pricing, the section below provides an explanation of some types of data components governed by the data retention rules of specific products: Event data: reported by most products See Event data retention for information on the event data type. Metric timeslice data: reported by APM, Browser, and Mobile Metric timeslice data is a specific type of data that is used for most metric charts and reports in New Relic APM, Mobile, and Browser. Important Note that metric timeslice data differs from other metric data types. All metric timeslice data is aggregated, but New Relic deals with fresh data and old data in different ways. Fresh data has specific policies applied to the data to keep granular views of performance as aggregate metrics. As data ages and becomes less useful in a granular state, we summarize that data and only keep key metrics. Aggregate metric timeslice data: reported by APM, Browser, and Mobile Aggregate metric timeslice data summarizes calls to specific methods in your application: how many times each one was called and response times. In the New Relic UI, you see the class and method names along with their aggregate numbers. Metric data aggregation depends on your subscription level. Subscription Level Aggregate retention Enterprise Aggregates (averages) to 1-hour periods after 8 days. After 90 days, the permanent metric data continues to be stored in 1-hour periods. This means you cannot obtain data granularity of less than 1 hour after 8 days, and only a subset of metrics are available after 90 days. Pro After 8 days Essentials After 3 days. Legacy Small Business, Startup, and Standard After 3 days. Lite After 2 hours. We retain your most recent data in one-minute increments. We also aggregate permanent metric data to day-size increments after 90 days. When looking at older data in small time windows, you may notice that charts show less detail. As data ages, it is aggregated into larger segments. Key metrics: reported by APM, Browser, and Mobile New Relic retains certain \"key\" metric timeslice data aggregations forever for Enterprise and Pro customers, for any number of applications. New Relic aggregates permanent key metric data to hour-size increments after 90 days. Product Key metrics APM Apdex, for app server Throughput and page views Response time, plus breakdown into tiers or categories on your app's main Overview chart Page load time, plus breakdown into segments Error rate CPU usage Memory usage Browser Apdex, for browser Browser page load time Throughput total. After 90 days, there is no breakout by browser type, and only the combined average value is available for the time range requested. Mobile Crash rate: For iOS and for Android Network throughput Network response time Network error rates Interaction traces Trace data: reported by APM, Browser, and Mobile Depending on the product, New Relic retains different types of trace data: Product Trace data APM Types of trace data: Transaction traces Distributed tracing Slow query samples Error details See APM data retention details. Browser Types of trace data: Session traces Browser traces JavaScript errors* See Browser data retention details. Mobile Types of trace data: App crash stack traces Interaction traces See Mobile data retention details. * JavaScript errors in the stack trace UI are saved as trace data. JS errors are also saved as events.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.17607,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview of <em>data</em> <em>retention</em> (<em>original</em> pricing plan)",
        "sections": "Overview of <em>data</em> <em>retention</em> (<em>original</em> pricing plan)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " metric <em>data</em> description. APM <em>data</em> <em>retention</em> policies For <em>accounts</em> on our <em>original</em> product-based pricing, APM <em>data</em> <em>retention</em> policies depend on your APM product subscription level. Component Lite Essentials Pro Metric timeslice <em>data</em> 24 hours 3 days 90 days Key metrics none forever forever Distributed"
      },
      "id": "6043f75364441f6967378ec6"
    },
    {
      "sections": [
        "Overview of changes to pricing and user model",
        "Pricing plans explained",
        "Determine pricing plan using UI",
        "Convert to new pricing",
        "Account/user model changes explained",
        "Requirements for new account/user model",
        "Determine which user model you're on",
        "Feature impacts of user model",
        "Transition to new models",
        "How pricing and user model relate"
      ],
      "title": "Overview of changes to pricing and user model",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "b19d61b5a0c65ca352e2ce0e260e2b53391b94fc",
      "image": "https://docs.newrelic.com/static/1461470cc1ef0be91120c84d76a7ccdd/c1b63/new-relic-one-pricing-plan-billing-ui.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/overview-changes-pricing-user-model/",
      "published_at": "2021-06-09T02:28:10Z",
      "updated_at": "2021-06-09T02:28:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In 2020, New Relic released both a newer pricing plan and a newer account/user model. If you have a New Relic organization created after July 30, 2020, you're on our newer pricing plan and newer user model. But for older customers, your pricing plan and user model are not necessarily related: for example, you may have switched to our newer pricing plan and still have users on our original user model. Keep reading to learn about: Our original and new pricing plans Our original and new account/user models How to switch to the new models How the pricing plan and the user model relate to each other Pricing plans explained New Relic organizations are on one of two pricing plans: New Relic One pricing: Our new pricing plan is simpler. It bills on which Full Stack Observability edition (Standard, Pro, Enterprise) you're on, the GBs of data ingested, and the count of billable \"full users.\" All organizations created on or after July 30 2020 are on this pricing plan. Some older organizations are able to transition to this pricing. Our original product-based pricing plan: this is based on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer pricing plan: in that case, their users remain on our original user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the account dropdown, and select Manage your plan. If you see billing information about data ingested and the number of billable users, you’re on the new pricing plan. If you're on New Relic One pricing, you'll see a billing UI like this. Convert to new pricing Some customers are able to switch to new pricing. Learn more about switching your pricing plan. Account/user model changes explained In this context, the term \"account/user model\" (or simply \"user model\") refers to the structure of a New Relic user record and how it interacts with the broader New Relic organization that it's in. Our two account/user models are: New Relic One user model: this newer, improved user model has these major differences from the original user model: All your accounts and users are contained under a top-level organization. This gives an organization stronger control over managing users and what they can access. One impact of this is that users who work with multiple New Relic organizations may have an email address associated with multiple logins. Users on this model have a different system for managing permissions and account access. Using access grants, you assign users access to specific roles on specific accounts. Original user model: some aspects of this older model that are different from our newer model: There wasn't as much organization-level control over users. For example, a New Relic user had the ability to access multiple accounts they'd been granted access to using a single login. Users on the original user model have a different user management system. To learn more about benefits of the new model, see our blog post about user model changes. For impacts and limitations, see Feature impacts. Requirements for new account/user model Here's a synopsis of the factors governing what organizations use the new model: All new sign-up accounts after July 202 have users on this model, and also use the new pricing plan. Partner accounts (resellers, managed service providers), and customers using the partnership account structure, cannot yet migrate their users to the new model. Some pre-existing organizations have had their users migrated to the new model by New Relic or by using the user migration procedure. Note that switching to the new pricing plan is independent from migrating your users. Determine which user model you're on To determine what user model you're on, from the account dropdown select User preferences. If you see the UI below, you're on the New Relic One user model. If you see a different UI with more content displayed, you're on the original user model (see original user docs). To determine if you can manage users on the New Relic One user model, see Manage users. The user model is independent of your pricing plan. For how user model relates to pricing, see the Pricing and user model table. Feature impacts of user model The new user model offers many benefits. Here are some feature impacts of being on the New Relic One user model that may be surprising or unintuitive to our existing customers: More separation of organizations/accounts: If you have an email address associated with multiple New Relic accounts, this may mean you need to log out and log back in. Learn more about account access. Adding accounts: Pro and Enterprise edition can have more than one account in their organization. Currently users in these organizations cannot, on their own, add accounts. They must get help from their New Relic account representative. To learn about adding users to accounts, see Manage users. Alert notifications: Users on the new model won’t show up as an option when choosing users to receive alert notifications. The result of this is that these users will not get New Relic mobile app push notifications. As a workaround, you can instead use their email address as the notification channel. Changing account name: These users cannot change the name of their organization after it has been created. Transition to new models Some New Relic customers are able to transition to the new models. To learn more about this, see Transition to new models. How pricing and user model relate As explained in the pricing and user model overview, your pricing plan and user model aren't necessarily related. This table shows how pricing and user model relate to each other: Pricing plan factors Users on original user model Users on New Relic One user model Original pricing If your organization was created before July 30 2020, you remain on our original pricing plan until you transition to New Relic One pricing. See original pricing plan docs. For original pricing accounts, your users are on the original user model, unless they were added via automated user management. See original user docs. For original pricing accounts, users added with automated user management (users imported from your identity provider) are on the New Relic One user model. Upon switching to New Relic One pricing, you'll have new roles available. New Relic One pricing An organization is on the New Relic One pricing plan if it was created on or after July 30 2020 or it's an older organization but has transitioned to New Relic One pricing. See New Relic One pricing docs. If your organization has transitioned to New Relic One pricing, your users are on our original user model (unless they were added via automated user management). These users are now also categorized by user type (full vs basic). See original user docs. If your organization was created on or after July 30 2020, your users are on this user model. See New Relic One user docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.55182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview of changes to pricing <em>and</em> user model",
        "sections": "<em>Account</em>&#x2F;user model changes explained",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " the option to transition to the newer pricing plan: in that case, their users remain on our <em>original</em> user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the <em>account</em> dropdown, and select Manage your plan. If you see <em>billing</em>"
      },
      "id": "603e97fa28ccbcb7c2eba754"
    }
  ],
  "/docs/accounts/original-accounts-billing/original-pricing-plan-usage/browser-subscription-usage": [
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 254.51645,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Users, roles, permissions (<em>original</em> user model)",
        "sections": "Users, roles, permissions (<em>original</em> user model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " Relic One <em>pricing</em>. If you&#x27;re on our <em>original</em> <em>pricing</em> <em>plan</em>, <em>billing</em> impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Infrastructure subscription usage",
        "Important",
        "Data generation",
        "Usage calculation",
        "Tip",
        "Table definitions",
        "General attributes",
        "Infrastructure attributes",
        "Query examples",
        "Compute units for last month",
        "Detailed host report (reproducing old usage report)",
        "Account hierarchy"
      ],
      "title": "Infrastructure subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "036858ab7d7fb54da536202e11788d0fc1029460",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/infrastructure-subscription-usage/",
      "published_at": "2021-06-08T20:20:00Z",
      "updated_at": "2021-03-16T14:44:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Infrastructure accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, a New Relic Infrastructure account will generate an NrDailyUsage event for every unique host on which an application instance existed over the last 24 hours. All Infrastructure events have a productLine attribute value of Infrastructure. For more information, see query examples. Usage calculation Monthly billable CUs for a host are calculated by the size of the host running Infrastructure (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. If your usage is fairly steady over time, you can estimate usage for the current month. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Infrastructure usage page, set the time picker to Last 30 days. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Introduction to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns displayed depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not Infrastructure-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Infrastructure attributes The following are usage-related attributes generated by Infrastructure. To query this data, use a productLine attribute value of Infrastructure. Attribute Description agentHostname ID used to uniquely identify the host for which this usage is reported. Any given hour of usage for this host will be counted only once when calculating infrastructureHoursUsed. There are several possible host identifiers reported by the New Relic agent. The usage reporting system will always use the agent-reported hostname to uniquely identify the host for the Infrastructure product, but will also record the cloudInstanceId, if present, for informational purposes. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This will not be present if no cloud provider was detected by the agent. cloudInstanceSize Size of the cloud instance for this host for CU billing purposes, as calculated according to the formula for infrastructureBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. infrastructureAgentVersion Version of the Infrastructure agent running on the host reporting this usage. If multiple agents are reporting from the same host, the version from the first agent seen in a given hour will be used. infrastructureAgentMemoryBytes Bytes of RAM available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureAgentProcessorCount Number of logical CPU cores available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedMemoryBytes Bytes of RAM available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedProcessorCount Number of logical CPU cores available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureBillingInstanceSize Size of the host, for CU billing purposes. Calculated as: number of processors multiplied by memory in GiB. infrastructureHoursUsed Number of hours for which usage was recorded for the given host. When a host is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. infrastructureComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as: infrastructureHoursUsed multiplied by infrastructureBillingInstanceSize. For more about compute unit calculation, see CU pricing. infrastructureComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an agent and operating system combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData True if the Infrastructure agent reports no CPU count. missingRamData True if the Infrastructure agent reports no memory count. productLine The New Relic product the usage data is from. Always use the value Infrastructure when querying for Infrastructure usage data. usageType The type of entity this event records values for. This value is Host for Infrastructure. Query examples Here are some examples of NRQL queries you can use with your Infrastructure subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. For general information about how to use NRQL queries to get focused usage data, see Intro to usage data. Compute units for last month This query produces a count of the CUs used over the last month: SELECT sum(infrastructureComputeUnits) FROM NrDailyUsage WHERE productLine='Infrastructure' AND usageType='Host' SINCE last month UNTIL this month Copy Detailed host report (reproducing old usage report) This query reproduces as closely as possible the report you would have gotten by downloading the CSV from the previously available Infrastructure subscription usage UI: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID',agentHostname,cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type',infrastructureBillingInstanceSize AS 'Instance size',infrastructureHoursUsed AS 'Hours used',infrastructureComputeUnits AS 'Usage (CU)', infrastructureCloudDerivedMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureCloudDerivedProcessorCount AS 'Logical processors',infrastructureAgentMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureAgentProcessorCount AS 'Logical processors',infrastructureComputeUnitRule AS 'Business rule',missingCpuData, missingRamData, instanceSizeCapped,cloudZone,cloudInstanceId WHERE productLine='Infrastructure' AND usageType='Host' SINCE 1 day ago LIMIT 1000 Copy This NRQL query is different than the legacy usage report: Detailed host query Comments Time period This query includes only the last day of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to 1000 NRQL limits the results to 1000. If you have more than 1000 hosts and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE agentHostname LIKE ... to divide the data into groups). Business rule Business rule has been replaced with two attributes: infrastructureComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are now boolean flags describing what the value missing_data means when it is present in the infrastructureComputeUnitRule attribute. Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.4869,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure subscription <em>usage</em>",
        "sections": "Infrastructure subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a7196a676ed2a83db4"
    },
    {
      "sections": [
        "APM (host-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (host-based)",
        "Query examples",
        "Usage for last month",
        "Usage per host per application",
        "Instance-hours per application",
        "Agent version information",
        "Account hierarchy",
        "Legacy per-host usage report",
        "Legacy host usage report (application listing)",
        "Use of Docker and other containers"
      ],
      "title": "APM (host-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "afaa1272f61e4c003e687d26e904438c0391cda1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-host-based-subscription-usage/",
      "published_at": "2021-06-08T17:52:13Z",
      "updated_at": "2021-03-16T14:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this doc explains how New Relic calculates billable usage for APM accounts that have host-based pricing (not CU-based pricing). This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance that existed during the last 24 hours Every unique host on which an application instance ran during the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations For host-based APM pricing, monthly billable usage is determined by the number of equivalent hosts used during that month. An equivalent host is defined as: 750 hours (standardized number of monthly hours) of connection to New Relic by a host or multiple hosts. For more on this calculation, see host-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's billable usage: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. See the Avg daily equivalent hosts for an account or grouping of accounts. The UI is meant to estimate your host usage but, especially for cloud environments, your usage may go up or down over time. For more information about the usage UI, see Introduction to New Relic subscription usage data. Table definitions Here are definitions of the column headers in the UI table and CSV files. The columns you see depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily equivalent hosts Average equivalent hosts for that day. Calculated as the total number of hours reported for all unique hosts in a day, divided by 24. For more on how this is calculated, see Host-based pricing. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (host-based) The following are usage-related attributes generated by host-based APM accounts (not CU-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. When calculating monthly APM host usage, the calculation for equivalent hosts for a month assumes that a standard month has 750 hours: ` apmHoursUsed / 750 ` . apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. productLine The New Relic product the usage data is from. Always use the value APM when querying for APM CU usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage data can be analyzed in several ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. You can run NRQL queries and use the resulting charts in dashboards. Usage for last month This query uses New Relic’s standard number of hours per month (750) for the purpose of calculating APM equivalent hosts over the last month. SELECT sum(apmHoursUsed)/750 AS 'Equivalent hosts' FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Usage per host per application New Relic records usage per application instance, not strictly per application. This query gives an approximation of the usage for a given application on a given host. If unique application instances run sequentially on a host within a given day, this query could return an underestimate (this would be likely, for example, in a container environment). SELECT max(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName,hostId SINCE 1 day ago LIMIT 2000 Copy Instance-hours per application This query measures the total number of hours used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have seen in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with other attributes. It no longer is used to describe whether the agent needs to be updated. Legacy host usage report (application listing) This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Use of Docker and other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of host-based usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.48668,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (host-based) subscription <em>usage</em>",
        "sections": "APM (host-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this doc explains how New Relic calculates billable"
      },
      "id": "603e834128ccbc66fdeba78b"
    }
  ],
  "/docs/accounts/original-accounts-billing/original-product-based-pricing/overview-changes-pricing-user-model": [
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 254.51645,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Users, roles, permissions (<em>original</em> user model)",
        "sections": "Users, roles, permissions (<em>original</em> user model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " than one login, they&#x27;ll see a &quot;multiple <em>accounts</em> found&quot; note when logging in. View and manage users in UI If your New Relic <em>account</em> has users on our <em>original</em> user model, you can use the Users and roles UI. To access this UI: select the <em>account</em> dropdown, select <em>Account</em> settings, and select Users"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Set session timeouts",
        "Requirements",
        "Overview",
        "Features",
        "Tip",
        "Select the session timeout value",
        "Select SAML SSO browser re-authentication",
        "Redirect after SAML timeout"
      ],
      "title": "Set session timeouts",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "a61d4c61f52ee18be0763a9cd526634d9d2f50f5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/account-maintenance/set-session-timeouts/",
      "published_at": "2021-06-08T20:16:53Z",
      "updated_at": "2021-03-30T15:37:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's session configuration feature allows you to set limits on idle time before your users' browser sessions automatically expire. Requirements This doc is for users on our original user model. If you're on the New Relic One user model, see Session settings. Overview Session configuration allows you to set limits on idle time before your users' browser sessions automatically expire. A message appears three minutes before the system logs them out. Users then need to sign back in to continue. For accounts configured with SAML Single Sign On (SSO), an additional option is available to set how often the users' browser sessions are re-authenticated. Users and Restricted Users can view the time period for automatic timeout, but they cannot change it. To view the timeout value: Go to account dropdown > Account settings > Authentication > Session configuration. Features Tip Owner or Admins The session configuration options provide an additional level of security to ensure that unattended browsers will automatically time out. Session values are automatically stored in the session cookie. Additional features include: Feature Notes Easy setup Admins use the slide bar in New Relic's user interface to select predefined time periods. Default is two weeks. Separate options available by role Admins can choose for Restricted User sessions to never time out even if they select a session timeout setting. This is useful, for example, when you use a Restricted User login for demos. Automatic inheritance for sub-accounts By default, sub-accounts inherit the same session configuration as their master account. Most restrictive by default If users have multiple accounts, the most restrictive setting applies, regardless of which account the user currently is using. Integration with SAML SSO logout URL If the account's SAML SSO configuration does not include a logout URL, New Relic includes a link from Session configuration for the Owner to set it up. If the Admin is not also the Owner, a message about the SAML SSO logout URL requirement appears. Additional re-authentication setting for SAML SSO In addition to the session timeout option, Admins can select the time (15 minutes to 2 weeks, or never) for how often a SAML-authenticated browser session must be re-authenticated. Select the session timeout value The process to select the session timeout value is the same for both SAML and non-SAML configurations. For additional SAML configuration options, see SAML SSO browser reauthentication. To select a predefined period for session timeouts with SAML SSO accounts, the account Owner must have previously identified the logout URL in the SAML SSO configuration settings. If this has not been set up, the account Admin can view the session timeout slide bar but not change it. If the Admin is also the account Owner, the Session configuration includes a link to go directly to New Relic's SAML SSO Configuration and identify the logout URL. For more information, see Setting up SSO. To select a predefined period for session timeouts: Go to: account dropdown > Account settings > Authentication > Session configuration. Use the slide bar to select a time period for idle sessions to expire and log out automatically. Optional: Select the checkbox option if you do not want restricted users' browser sessions to expire. Select Save my changes. Changes take effect immediately. Select SAML SSO browser re-authentication To select a predefined period for SAML SSO-authenticated browser sessions to be re-authenticated: Go to: account dropdown > Account settings > Authentication > Session configuration. Use the SAML re-authentication time slide bar to select a time period for New Relic to check the browser session. Select Save my changes. Redirect after SAML timeout If you are logged out due to a session idle timeout on an account configured for SAML, you will be sent to the New Relic login page. Because your account is configured for SAML, you do not have a direct New Relic login. To be redirected to your SAML provider for authentication: Enter your email address in the Email field. Leave the Password field blank. Click the Sign In button. You will then be redirected to your SAML provider. Once reauthorized, you will then be returned to the New Relic website.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.60022,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": ". Automatic inheritance for sub-<em>accounts</em> By default, sub-<em>accounts</em> inherit the same session configuration as their master <em>account</em>. Most restrictive by default If users have multiple <em>accounts</em>, the most restrictive setting applies, regardless of which <em>account</em> the user currently is using. Integration with SAML"
      },
      "id": "603e8914196a678f45a83de3"
    },
    {
      "sections": [
        "Trial and Lite accounts",
        "Important",
        "Trial accounts",
        "Trial lengths",
        "End of trial period",
        "Caution"
      ],
      "title": "Trial and Lite accounts",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "050d5fa2eea990cf75a7d4de2c15bebd612860f3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/product-based-pricing/trial-lite-accounts-deprecated/",
      "published_at": "2021-06-09T01:04:25Z",
      "updated_at": "2021-03-16T09:14:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This document applies to our original product-based pricing, which is no longer available for new accounts. For an explanation of pricing plans, see Overview of pricing. Free trials for New Relic allow you to identify which products and subscription tier best fit your business. Accounts not upgraded with a subscription before the end of the trial period become Lite accounts, losing many key features and data. Trial accounts When you start a free trial, you gain access to all the features of a Pro account including full access to support. Our products allow you to view and track trends. Pro level data retention allows you to track how changes in your business, such as marketing approaches or new technology, affect trends. Trial lengths Trial lengths depend on the product: Product Trial Length Alerts 30 days APM 14 days Browser 14 days Infrastructure 30 days Insights 30 days Mobile 30 days Synthetics 14 days End of trial period Once the trial ends, your account becomes a Lite account. Lite accounts can access all of our products except Infrastructure and Insights, but lose access to most product features and support. Caution Lite accounts retain only very recent data, which could cause the loss of valuable trend data. Avoid this by subscribing before your trial ends.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 229.20616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Trial <em>and</em> Lite <em>accounts</em>",
        "sections": "Trial <em>and</em> Lite <em>accounts</em>",
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": "Important This document applies to our <em>original</em> <em>product</em>-<em>based</em> <em>pricing</em>, which is no longer available for new <em>accounts</em>. For an explanation of <em>pricing</em> plans, see Overview of <em>pricing</em>. Free trials for New Relic allow you to identify which products and subscription tier best fit your business. <em>Accounts</em>"
      },
      "id": "603ec29a196a67b153a83dad"
    }
  ],
  "/docs/accounts/original-accounts-billing/original-product-based-pricing/switch-new-models": [
    {
      "sections": [
        "Overview of changes to pricing and user model",
        "Pricing plans explained",
        "Determine pricing plan using UI",
        "Convert to new pricing",
        "Account/user model changes explained",
        "Requirements for new account/user model",
        "Determine which user model you're on",
        "Feature impacts of user model",
        "Transition to new models",
        "How pricing and user model relate"
      ],
      "title": "Overview of changes to pricing and user model",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "b19d61b5a0c65ca352e2ce0e260e2b53391b94fc",
      "image": "https://docs.newrelic.com/static/1461470cc1ef0be91120c84d76a7ccdd/c1b63/new-relic-one-pricing-plan-billing-ui.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/overview-changes-pricing-user-model/",
      "published_at": "2021-06-09T02:28:10Z",
      "updated_at": "2021-06-09T02:28:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In 2020, New Relic released both a newer pricing plan and a newer account/user model. If you have a New Relic organization created after July 30, 2020, you're on our newer pricing plan and newer user model. But for older customers, your pricing plan and user model are not necessarily related: for example, you may have switched to our newer pricing plan and still have users on our original user model. Keep reading to learn about: Our original and new pricing plans Our original and new account/user models How to switch to the new models How the pricing plan and the user model relate to each other Pricing plans explained New Relic organizations are on one of two pricing plans: New Relic One pricing: Our new pricing plan is simpler. It bills on which Full Stack Observability edition (Standard, Pro, Enterprise) you're on, the GBs of data ingested, and the count of billable \"full users.\" All organizations created on or after July 30 2020 are on this pricing plan. Some older organizations are able to transition to this pricing. Our original product-based pricing plan: this is based on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer pricing plan: in that case, their users remain on our original user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the account dropdown, and select Manage your plan. If you see billing information about data ingested and the number of billable users, you’re on the new pricing plan. If you're on New Relic One pricing, you'll see a billing UI like this. Convert to new pricing Some customers are able to switch to new pricing. Learn more about switching your pricing plan. Account/user model changes explained In this context, the term \"account/user model\" (or simply \"user model\") refers to the structure of a New Relic user record and how it interacts with the broader New Relic organization that it's in. Our two account/user models are: New Relic One user model: this newer, improved user model has these major differences from the original user model: All your accounts and users are contained under a top-level organization. This gives an organization stronger control over managing users and what they can access. One impact of this is that users who work with multiple New Relic organizations may have an email address associated with multiple logins. Users on this model have a different system for managing permissions and account access. Using access grants, you assign users access to specific roles on specific accounts. Original user model: some aspects of this older model that are different from our newer model: There wasn't as much organization-level control over users. For example, a New Relic user had the ability to access multiple accounts they'd been granted access to using a single login. Users on the original user model have a different user management system. To learn more about benefits of the new model, see our blog post about user model changes. For impacts and limitations, see Feature impacts. Requirements for new account/user model Here's a synopsis of the factors governing what organizations use the new model: All new sign-up accounts after July 202 have users on this model, and also use the new pricing plan. Partner accounts (resellers, managed service providers), and customers using the partnership account structure, cannot yet migrate their users to the new model. Some pre-existing organizations have had their users migrated to the new model by New Relic or by using the user migration procedure. Note that switching to the new pricing plan is independent from migrating your users. Determine which user model you're on To determine what user model you're on, from the account dropdown select User preferences. If you see the UI below, you're on the New Relic One user model. If you see a different UI with more content displayed, you're on the original user model (see original user docs). To determine if you can manage users on the New Relic One user model, see Manage users. The user model is independent of your pricing plan. For how user model relates to pricing, see the Pricing and user model table. Feature impacts of user model The new user model offers many benefits. Here are some feature impacts of being on the New Relic One user model that may be surprising or unintuitive to our existing customers: More separation of organizations/accounts: If you have an email address associated with multiple New Relic accounts, this may mean you need to log out and log back in. Learn more about account access. Adding accounts: Pro and Enterprise edition can have more than one account in their organization. Currently users in these organizations cannot, on their own, add accounts. They must get help from their New Relic account representative. To learn about adding users to accounts, see Manage users. Alert notifications: Users on the new model won’t show up as an option when choosing users to receive alert notifications. The result of this is that these users will not get New Relic mobile app push notifications. As a workaround, you can instead use their email address as the notification channel. Changing account name: These users cannot change the name of their organization after it has been created. Transition to new models Some New Relic customers are able to transition to the new models. To learn more about this, see Transition to new models. How pricing and user model relate As explained in the pricing and user model overview, your pricing plan and user model aren't necessarily related. This table shows how pricing and user model relate to each other: Pricing plan factors Users on original user model Users on New Relic One user model Original pricing If your organization was created before July 30 2020, you remain on our original pricing plan until you transition to New Relic One pricing. See original pricing plan docs. For original pricing accounts, your users are on the original user model, unless they were added via automated user management. See original user docs. For original pricing accounts, users added with automated user management (users imported from your identity provider) are on the New Relic One user model. Upon switching to New Relic One pricing, you'll have new roles available. New Relic One pricing An organization is on the New Relic One pricing plan if it was created on or after July 30 2020 or it's an older organization but has transitioned to New Relic One pricing. See New Relic One pricing docs. If your organization has transitioned to New Relic One pricing, your users are on our original user model (unless they were added via automated user management). These users are now also categorized by user type (full vs basic). See original user docs. If your organization was created on or after July 30 2020, your users are on this user model. See New Relic One user docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.69962,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview of changes <em>to</em> <em>pricing</em> <em>and</em> <em>user</em> <em>model</em>",
        "sections": "Overview of changes <em>to</em> <em>pricing</em> <em>and</em> <em>user</em> <em>model</em>",
        "tags": "Original product-based <em>pricing</em>",
        "body": ": for example, you may have switched to our newer <em>pricing</em> plan and still have users on our original <em>user</em> <em>model</em>. Keep reading to learn about: Our original and <em>new</em> <em>pricing</em> plans Our original and <em>new</em> account&#x2F;<em>user</em> <em>models</em> How to <em>switch</em> to the <em>new</em> <em>models</em> How the <em>pricing</em> plan and the <em>user</em> <em>model</em> relate to each"
      },
      "id": "603e97fa28ccbcb7c2eba754"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "da1d767d7bc556d6b1a0b78e73738936607cb7dd",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/mastersub-account-structure/",
      "published_at": "2021-06-08T19:09:12Z",
      "updated_at": "2021-06-08T04:17:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For organizations on our original account/user model, you can create a more complex account structure with master accounts and sub-accounts that inherit master account settings. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user models, see User models. The major differences are: Original account/user model: Our original model uses a master/sub-account structure, where sub-accounts inherit settings from master accounts. Our partnership accounts also use this model. If your organization is on this model, you're able to create your own sub-accounts. If you're on this model, continue reading below to learn how this account structure works. New Relic One account/user model: This is our new, improved model. For more about how accounts work for this model, see Account structure. Master and sub-account hierarchy For organizations on our original account/user model that have a master/sub-account structure, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.96655,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Add <em>users</em> <em>to</em> sub-accounts",
        "tags": "Accounts <em>and</em> billing",
        "body": " is on. To learn more about the account&#x2F;<em>user</em> <em>models</em>, see <em>User</em> <em>models</em>. The major differences are: Original account&#x2F;<em>user</em> <em>model</em>: Our original <em>model</em> uses a master&#x2F;sub-account structure, where sub-accounts inherit settings from master accounts. Our partnership accounts also use this <em>model</em>. If your organization"
      },
      "id": "60beef5764441fc42dd543d3"
    },
    {
      "sections": [
        "New Relic account structure",
        "Impacts of account/user model",
        "Account structure for New Relic One account/user model"
      ],
      "title": "New Relic account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "4f5a4cde293d0b599f489eff010f69c021ccb539",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/new-relic-account-structure/",
      "published_at": "2021-06-09T02:17:27Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your account/user model, you have different options for adding and managing accounts and assigning users to them. Impacts of account/user model How you manage accounts and users differs based on which of our account/user models your organization is on. To learn more about the account/user models and determine which you're on, see User models. The major differences are: Original account/user model: Our original model used a master/sub-account structure, where sub-accounts inherited settings from master accounts. If you're on this model, see the Original user model docs. New Relic One account/user model: This is our new, improved model. We currently are migrating some customer accounts to this model and eventually all our customers will be on this model. To learn more and see if you can migrate your users, see Migrate users. To learn more about how account and user management works, keep reading. Account structure for New Relic One account/user model For organizations on the New Relic One account/user model, here are some details about how organization and account management work: The Standard edition allows for a single account per organization. Pro and Enterprise editions allows for multiple accounts. At the top level of a New Relic account hierarchy is the concept of the \"organization.\" Your group of related accounts that share the same billing are inside a single \"New Relic organization.\" Currently you can't add accounts to your organization on your own. To add accounts, talk to your New Relic account representative. To learn how you assign users permissions and access to specific accounts, see Manage users. Having trouble accessing a specific account or feature? See Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.7751,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> Relic account structure",
        "sections": "Account structure for <em>New</em> Relic One account&#x2F;<em>user</em> <em>model</em>",
        "tags": "Accounts <em>and</em> billing",
        "body": "&#x2F;<em>user</em> <em>models</em> and determine which you&#x27;re on, see <em>User</em> <em>models</em>. The major differences are: Original account&#x2F;<em>user</em> <em>model</em>: Our original <em>model</em> used a master&#x2F;sub-account structure, where sub-accounts inherited settings from master accounts. If you&#x27;re on this <em>model</em>, see the Original <em>user</em> <em>model</em> docs. <em>New</em> Relic"
      },
      "id": "60bee5c028ccbc2413e667e4"
    }
  ],
  "/docs/accounts/original-accounts-billing/original-users-roles/mastersub-account-structure": [
    {
      "sections": [
        "Factors affecting access to features and data",
        "User permissions",
        "Account access",
        "Pricing plan or edition",
        "The entities being monitored",
        "Data retention"
      ],
      "title": "Factors affecting access to features and data",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "98bf366604050b491ee35c8422414c70bda452b4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/factors-affecting-access-features-data/",
      "published_at": "2021-06-09T01:22:01Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There are several factors that can affect your access to a New Relic feature, or New Relic data. User permissions User-related settings can impact what features or data you have access to. Potential impacts include: Your user type (basic user or full user). Your assigned roles. How your user roles and permissions work depends on which user model you're on. Account access If you're logged in to New Relic and don't see the account or data you expect to see, some causes and solutions include: If your organization has multiple accounts, there's an account switcher at the top left of most New Relic UI pages. Check to see if you can use that to switch accounts. You may have more than one login associated with the same email address. If you think this may be the case, log out and log back in. When you input your email address, the login UI tells you if you have multiple logins and gives you an option for seeing all accounts associated with that email. If you're having trouble accessing an older account, see this Explorers Hub post about multiple account access. It's possible an admin user in your organization changed your permissions for an account. Related docs: Account structure Login and password troubleshooting Delete accounts Pricing plan or edition We have two pricing plans available, and this can impact feature availability. Pricing plans: Our original product-based pricing plan: This plan separates our offerings by product. If you’re on this plan, access to some features may depend on the products you pay for. Our New Relic One pricing plan: This newer pricing plan gives more cross-platform access. The main factors affecting access are your edition and your user type. We also have several Full Stack Observability pricing editions: Standard, Pro, and Enterprise. Learn more about our pricing plans. The entities being monitored Some of our solutions enable functionality that isn’t available to all users, like: Additional UI components, and Data available for querying For example, enabling distributed tracing results in you seeing trace data in the UI and in having trace data available for querying. If you are missing data that you expect to see, see Missing data. Data retention Different types of New Relic data have different data retention periods. Once data has passed a given data retention point, it may be deleted or be aggregated for longer term storage. For details, see Data retention.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 365.61078,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Factors affecting access to features <em>and</em> data",
        "sections": "<em>Account</em> access",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " an option for seeing all <em>accounts</em> associated with that email. If you&#x27;re having trouble accessing an older <em>account</em>, see this Explorers Hub post about multiple <em>account</em> access. It&#x27;s possible an admin user in your organization changed your permissions for an <em>account</em>. Related docs: <em>Account</em> <em>structure</em> Login"
      },
      "id": "60bee5c064441f0505d543bb"
    },
    {
      "sections": [
        "New Relic account structure",
        "Impacts of account/user model",
        "Account structure for New Relic One account/user model"
      ],
      "title": "New Relic account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "4f5a4cde293d0b599f489eff010f69c021ccb539",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/new-relic-account-structure/",
      "published_at": "2021-06-09T02:17:27Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your account/user model, you have different options for adding and managing accounts and assigning users to them. Impacts of account/user model How you manage accounts and users differs based on which of our account/user models your organization is on. To learn more about the account/user models and determine which you're on, see User models. The major differences are: Original account/user model: Our original model used a master/sub-account structure, where sub-accounts inherited settings from master accounts. If you're on this model, see the Original user model docs. New Relic One account/user model: This is our new, improved model. We currently are migrating some customer accounts to this model and eventually all our customers will be on this model. To learn more and see if you can migrate your users, see Migrate users. To learn more about how account and user management works, keep reading. Account structure for New Relic One account/user model For organizations on the New Relic One account/user model, here are some details about how organization and account management work: The Standard edition allows for a single account per organization. Pro and Enterprise editions allows for multiple accounts. At the top level of a New Relic account hierarchy is the concept of the \"organization.\" Your group of related accounts that share the same billing are inside a single \"New Relic organization.\" Currently you can't add accounts to your organization on your own. To add accounts, talk to your New Relic account representative. To learn how you assign users permissions and access to specific accounts, see Manage users. Having trouble accessing a specific account or feature? See Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 365.61078,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic <em>account</em> <em>structure</em>",
        "sections": "New Relic <em>account</em> <em>structure</em>",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "&#x2F;user models and determine which you&#x27;re on, see User models. The major differences are: Original <em>account</em>&#x2F;user model: Our original model used a master&#x2F;sub-<em>account</em> <em>structure</em>, where sub-<em>accounts</em> inherited settings from master <em>accounts</em>. If you&#x27;re on this model, see the Original user model docs. New Relic"
      },
      "id": "60bee5c028ccbc2413e667e4"
    },
    {
      "sections": [
        "Introduction to account settings",
        "Pricing and billing settings",
        "New Relic One pricing UI",
        "Original pricing UI",
        "Manage users",
        "New Relic One user model",
        "Original user model",
        "Add accounts",
        "General account settings"
      ],
      "title": "Introduction to account settings",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "1dbac104fa7e60637c32a61a80b8b709f6fd84c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings/",
      "published_at": "2021-06-08T20:19:00Z",
      "updated_at": "2021-06-08T20:19:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view and edit account-related settings, go to one.newrelic.com and in the top right corner, select the account dropdown. Keep reading for tips on how to find different kinds of account settings in the UI. Pricing and billing settings To view and edit some billing-related settings, you must be a full user. Basic users have some restrictions. How you access billing-related UI depends on which pricing plan your New Relic account is on: New Relic One pricing UI View and manage billing information based on your user model: New Relic One user model: click the account dropdown, click Administration, and click Plan and usage. From there, you can view your usage data, and view and edit billing information. The ability to manage billing requires the Billing user role, which is included in the default Admin group. Original user model: click the account dropdown and click Account settings. Note that if you're in an organization that has a master/sub-account structure and you're in a sub-account, usage data may only display usage from that account and not the broader organization. Billing management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see Pricing. Original pricing UI If your account is on the original pricing plan, to view and edit billing details: Click the account dropdown, and click Account settings. On the right, there are details about your subscription. For more about your subscription, click Subscription. To view and edit billing details, click Billing. To learn more about original pricing, see Pricing. Manage users How you manage users depends on which user model your users are on: New Relic One user model For managing users on the New Relic One user model, see Manage users. Original user model To manage users on the original user model: from the account dropdown, click Account settings and then click Users and roles. For more on managing these users, see Original users. Add accounts How you add accounts depends on which user model you're on. This is because the user model has impacts on account structure and management. Learn more about adding accounts. General account settings For how to edit things like user preferences and email settings, see the various account settings docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 310.76678,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>account</em> settings",
        "sections": "Pricing <em>and</em> <em>billing</em> settings",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " that if you&#x27;re in an organization that has a master&#x2F;sub-<em>account</em> <em>structure</em> and you&#x27;re in a sub-<em>account</em>, usage data may only display usage from that <em>account</em> and not the broader organization. <em>Billing</em> management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see"
      },
      "id": "6043f38a196a679ae4960f5e"
    }
  ],
  "/docs/accounts/original-accounts-billing/original-users-roles/user-migration": [
    {
      "sections": [
        "Introduction to managing users",
        "User management docs"
      ],
      "title": "Introduction to managing users ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "6c2f39333fa3c6931fe616669244cb44f183a167",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/introduction-managing-users/",
      "published_at": "2021-06-09T01:02:33Z",
      "updated_at": "2021-06-09T01:02:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some important things to note before starting: The docs in this section are for managing users on the New Relic One account/user model. Learn about user models. Note that this is a separate topic from our original pricing or New Relic One pricing plans. For managing users on our original user model, see Original users. User management docs Here are our main docs for managing these users: User model/structure: learn some basic aspects of our user model, such as user type (basic user vs full user), default groups (Admin and User), and roles and capabilities. Managing users: an overview of user management concepts, some common user management tasks, and where to manage users in the UI. A tutorial on how to create new groups, roles, and access grants Authentication domain settings: configure an authentication domain, which governs how your users are added to New Relic (manually versus SCIM provisioning), the authentication method they use (manual login versus SAML SSO), managing how basic users become full users, and user session settings. For an overview of SAML SSO and SCIM options, see Introduction to SAML and SCIM. Having problems logging in? See Login troubleshooting. To understand user-related billing factors, see User-related billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 436.3454,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction <em>to</em> managing <em>users</em> ",
        "sections": "Introduction <em>to</em> managing <em>users</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> management",
        "body": "Some important things to note before starting: The docs in this section are for managing <em>users</em> on the <em>New</em> <em>Relic</em> <em>One</em> <em>account</em>&#x2F;<em>user</em> <em>model</em>. Learn about <em>user</em> models. Note that this is a separate topic from our original pricing or <em>New</em> <em>Relic</em> <em>One</em> pricing plans. For managing <em>users</em> on our original <em>user</em> <em>model</em>"
      },
      "id": "6043f3c4196a67a215960f3c"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/introduction-saml-scim/",
      "sections": [
        "Get started with SAML SSO and/or SCIM",
        "New Relic One user/account model",
        "Original user/account model"
      ],
      "published_at": "2021-06-08T17:51:12Z",
      "title": "Get started with SAML SSO and/or SCIM",
      "updated_at": "2021-06-08T03:28:47Z",
      "type": "docs",
      "external_id": "013d50b5268dfd466c59498f26e982199c8df9a1",
      "document_type": "page",
      "popularity": 1,
      "body": "For setting up automatic controls for how your New Relic users are added and managed, and how they log in, New Relic has these main features: SAML SSO: this allows your users to use a single sign-on (SSO) identity provider service to log in to New Relic, as opposed to using the default email + password. Requirements: Pro or Enterprise edition. SCIM provisioning, also referred to as automated user management (AUM): SCIM provisioning allows organizations to use their identity provider service to automate how their users are added to and updated in New Relic. By definition, SCIM provisioning requires use of SAML SSO. Requirements: Enterprise edition, and organization must be on the New Relic One user model (more on that below). Before enabling these, it's important to understand another major factor that affects these features: which account/user model your organization is on. In 2020, we released a new and improved account/user model, called the New Relic One user model. At first mainly new customers used this model, but now it’s available to some of our older customers via a self-serve user migration procedure. Over time, all organizations will be migrated to this model. For information on how to enable SAML and SCIM, choose your account/user model below. If you’re not sure which you’re on, see Overview of account/user model. New Relic One user/account model If your organization is on the New Relic One account/user model, you'll use the authentication domain UI to set up SAML and SCIM. Note that Okta, OneLogin, and Azure have dedicated New Relic apps: if you use those, you must choose the one called \"New Relic by organization\", and not \"New Relic by account\". Original user/account model If your organization is on the original account/user model, we recommend migrating your users via the self-serve migration procedure if you’re able to. If you don’t meet the requirements but want to enable SAML and/or SCIM, please speak to your New Relic account representative. Here are some tips and docs links: SAML: If you want to or must stay on the original user model and can’t migrate to the new model, see our original SAML docs. SCIM + SAML: SCIM provisioning creates users on the new model. This is why your organization must first switch to the new user model before using SCIM. For more on how to migrate to the new model, see Migrate users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 359.7342,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em>&#x2F;<em>account</em> <em>model</em>",
        "body": " requires use of SAML SSO. Requirements: Enterprise edition, and organization must be on the <em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>model</em> (more on that below). Before enabling these, it&#x27;s important to understand another major factor that affects these features: which <em>account</em>&#x2F;<em>user</em> <em>model</em> <em>your</em> organization is on. In 2020, we"
      },
      "id": "60bee3ef196a6781d3d09e54"
    },
    {
      "sections": [
        "New Relic account structure",
        "Impacts of account/user model",
        "Account structure for New Relic One account/user model"
      ],
      "title": "New Relic account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "4f5a4cde293d0b599f489eff010f69c021ccb539",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/new-relic-account-structure/",
      "published_at": "2021-06-09T02:17:27Z",
      "updated_at": "2021-06-08T03:36:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your account/user model, you have different options for adding and managing accounts and assigning users to them. Impacts of account/user model How you manage accounts and users differs based on which of our account/user models your organization is on. To learn more about the account/user models and determine which you're on, see User models. The major differences are: Original account/user model: Our original model used a master/sub-account structure, where sub-accounts inherited settings from master accounts. If you're on this model, see the Original user model docs. New Relic One account/user model: This is our new, improved model. We currently are migrating some customer accounts to this model and eventually all our customers will be on this model. To learn more and see if you can migrate your users, see Migrate users. To learn more about how account and user management works, keep reading. Account structure for New Relic One account/user model For organizations on the New Relic One account/user model, here are some details about how organization and account management work: The Standard edition allows for a single account per organization. Pro and Enterprise editions allows for multiple accounts. At the top level of a New Relic account hierarchy is the concept of the \"organization.\" Your group of related accounts that share the same billing are inside a single \"New Relic organization.\" Currently you can't add accounts to your organization on your own. To add accounts, talk to your New Relic account representative. To learn how you assign users permissions and access to specific accounts, see Manage users. Having trouble accessing a specific account or feature? See Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 355.5782,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> <em>account</em> structure",
        "sections": "<em>Account</em> structure for <em>New</em> <em>Relic</em> <em>One</em> <em>account</em>&#x2F;<em>user</em> <em>model</em>",
        "tags": "<em>Accounts</em>",
        "body": " <em>One</em> <em>account</em>&#x2F;<em>user</em> <em>model</em>: This is our <em>new</em>, improved <em>model</em>. We currently are migrating some customer accounts to this <em>model</em> and eventually all our customers will be on this <em>model</em>. To learn more and see if you can <em>migrate</em> <em>your</em> <em>users</em>, see <em>Migrate</em> <em>users</em>. To learn more about how <em>account</em> and <em>user</em> management"
      },
      "id": "60bee5c028ccbc2413e667e4"
    }
  ],
  "/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model": [
    {
      "sections": [
        "Bulk user actions (original user model)",
        "Important",
        "Update users in bulk",
        "Example CSV file",
        "Troubleshooting",
        "If you have a backup CSV file",
        "If no backup file exists"
      ],
      "title": "Bulk user actions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "ebfb52863fb5b57a14a2c298a2518c42f23c0908",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/roles-permissions/bulk-user-actions-add-delete-or-update-batches-users/",
      "published_at": "2021-06-09T01:01:33Z",
      "updated_at": "2021-03-13T02:57:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc explains how to manage users on our original user model. Not sure which user model you're on? See Overview of pricing and users. With the Bulk user actions feature, you can add, update, or delete multiple users at once. This can be helpful for: adding roles when multiple new employees start deleting roles when multiple employees leave giving multiple employees Admin roles Update users in bulk Some important rules and recommendations for making bulk user actions: You cannot make updates to your own role or an Owner role. You cannot edit an existing user's email address or name. You should avoid editing an existing user by deleting and re-adding them because this can have unintended consequences (for example, API keys associated with the original user will be lost). To add new user roles, update existing user roles, or delete user roles: Go to: account dropdown > Account settings > Users and roles, and add /bulk_actions at the end of the URL. Example URL: https://account.newrelic.com/accounts/123456789/users/bulk_actions Copy Download a Backup CSV file. Downloading a backup file keeps a record of the users in your account prior to changes being made, and allows you to easily re-add any users that may be removed accidentally. Download a CSV of users or a CSV template. Each bulk action (add, update, or delete) will require its own CSV file. New Relic recommends saving your files with an account number, date, and the bulk action being performed. For example: account_123456789_delete_users_2018-06-29 Populate that sheet with only the users whose roles you'll be applying the chosen bulk action for. Remove users from the spreadsheet whose roles you do not want to change. Bulk action Fields Add Required fields: user email, name, type, base role Optional field: add-on role Update Required fields: user email (do not edit), name (do not edit), base role Optional field: add-on role Delete Required fields: only user email Example CSV file The following is an example downloaded CSV of users that lists four users on the New Relic account. In this example, we want to delete the user Alex Datanerd. All other users must be removed before uploading the CSV. Email Name Type Base role Add-on roles Last active User1 @Company.com Jane Datanerd full Owner 2/6/20 User2 @Company.com Jamie Datanerd full Admin 6/6/20 User3 @Company.com Alex Datanerd full User apm_admin, browser_admin 7/25/20 User4 @Company.com Pat Datanerd basic User alerts_admin, insights_admin, apm_admin 4/6/20 The other three users, whose roles will remain unchanged, are removed. The final CSV only shows Alex's name. This file would then be uploaded using the Delete users in CSV option in the UI. Email Name Type Base role Add-on roles Last active User3 @Company.com Alex Datanerd full User apm_admin, browser_admin In the UI, select a CSV action: Add, Update, or Delete the users listed within the CSV file. Upload the new CSV, and select Save changes. Troubleshooting If a user is removed or changed during your CSV file upload by mistake, you can add them back through another CSV file upload. Important Be aware that associated permissions may be lost when a user is deleted and re-added. For example, associated API keys will need to be re-added. If you have a backup CSV file If you have a backup CSV file saved: Open the backup CSV file. Populate the backup CSV file with the users whose roles will be modified. Select a CSV action for the new CSV file: add, update, or delete Upload the new CSV, and select Save changes. If no backup file exists If no backup CSV file has been previously downloaded: Download the CSV file template. Populate the spreadsheet with the information required for the user to be restored. Action Required fields Add User email, name, type, base role. Optional: Add-on role Update User email, name, type, base role. Optional: Add-on role Delete User email Select a CSV action for the new CSV file: Add, Update, or Delete. Upload the new CSV, and select Save changes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 248.32382,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Bulk <em>user</em> actions (<em>original</em> <em>user</em> model)",
        "sections": "Bulk <em>user</em> actions (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": ": <em>account_123456789_delete_users</em>_2018-06-29 Populate that sheet with only the <em>users</em> whose <em>roles</em> you&#x27;ll be applying the chosen bulk action for. Remove <em>users</em> from the spreadsheet whose <em>roles</em> you do not want to change. Bulk action Fields Add Required fields: <em>user</em> email, name, type, base <em>role</em> Optional field"
      },
      "id": "6043f605e7b9d264815799e1"
    },
    {
      "sections": [
        "Overview of changes to pricing and user model",
        "Pricing plans explained",
        "Determine pricing plan using UI",
        "Convert to new pricing",
        "Account/user model changes explained",
        "Requirements for new account/user model",
        "Determine which user model you're on",
        "Feature impacts of user model",
        "Transition to new models",
        "How pricing and user model relate"
      ],
      "title": "Overview of changes to pricing and user model",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "b19d61b5a0c65ca352e2ce0e260e2b53391b94fc",
      "image": "https://docs.newrelic.com/static/1461470cc1ef0be91120c84d76a7ccdd/c1b63/new-relic-one-pricing-plan-billing-ui.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/overview-changes-pricing-user-model/",
      "published_at": "2021-06-09T02:28:10Z",
      "updated_at": "2021-06-09T02:28:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In 2020, New Relic released both a newer pricing plan and a newer account/user model. If you have a New Relic organization created after July 30, 2020, you're on our newer pricing plan and newer user model. But for older customers, your pricing plan and user model are not necessarily related: for example, you may have switched to our newer pricing plan and still have users on our original user model. Keep reading to learn about: Our original and new pricing plans Our original and new account/user models How to switch to the new models How the pricing plan and the user model relate to each other Pricing plans explained New Relic organizations are on one of two pricing plans: New Relic One pricing: Our new pricing plan is simpler. It bills on which Full Stack Observability edition (Standard, Pro, Enterprise) you're on, the GBs of data ingested, and the count of billable \"full users.\" All organizations created on or after July 30 2020 are on this pricing plan. Some older organizations are able to transition to this pricing. Our original product-based pricing plan: this is based on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer pricing plan: in that case, their users remain on our original user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the account dropdown, and select Manage your plan. If you see billing information about data ingested and the number of billable users, you’re on the new pricing plan. If you're on New Relic One pricing, you'll see a billing UI like this. Convert to new pricing Some customers are able to switch to new pricing. Learn more about switching your pricing plan. Account/user model changes explained In this context, the term \"account/user model\" (or simply \"user model\") refers to the structure of a New Relic user record and how it interacts with the broader New Relic organization that it's in. Our two account/user models are: New Relic One user model: this newer, improved user model has these major differences from the original user model: All your accounts and users are contained under a top-level organization. This gives an organization stronger control over managing users and what they can access. One impact of this is that users who work with multiple New Relic organizations may have an email address associated with multiple logins. Users on this model have a different system for managing permissions and account access. Using access grants, you assign users access to specific roles on specific accounts. Original user model: some aspects of this older model that are different from our newer model: There wasn't as much organization-level control over users. For example, a New Relic user had the ability to access multiple accounts they'd been granted access to using a single login. Users on the original user model have a different user management system. To learn more about benefits of the new model, see our blog post about user model changes. For impacts and limitations, see Feature impacts. Requirements for new account/user model Here's a synopsis of the factors governing what organizations use the new model: All new sign-up accounts after July 202 have users on this model, and also use the new pricing plan. Partner accounts (resellers, managed service providers), and customers using the partnership account structure, cannot yet migrate their users to the new model. Some pre-existing organizations have had their users migrated to the new model by New Relic or by using the user migration procedure. Note that switching to the new pricing plan is independent from migrating your users. Determine which user model you're on To determine what user model you're on, from the account dropdown select User preferences. If you see the UI below, you're on the New Relic One user model. If you see a different UI with more content displayed, you're on the original user model (see original user docs). To determine if you can manage users on the New Relic One user model, see Manage users. The user model is independent of your pricing plan. For how user model relates to pricing, see the Pricing and user model table. Feature impacts of user model The new user model offers many benefits. Here are some feature impacts of being on the New Relic One user model that may be surprising or unintuitive to our existing customers: More separation of organizations/accounts: If you have an email address associated with multiple New Relic accounts, this may mean you need to log out and log back in. Learn more about account access. Adding accounts: Pro and Enterprise edition can have more than one account in their organization. Currently users in these organizations cannot, on their own, add accounts. They must get help from their New Relic account representative. To learn about adding users to accounts, see Manage users. Alert notifications: Users on the new model won’t show up as an option when choosing users to receive alert notifications. The result of this is that these users will not get New Relic mobile app push notifications. As a workaround, you can instead use their email address as the notification channel. Changing account name: These users cannot change the name of their organization after it has been created. Transition to new models Some New Relic customers are able to transition to the new models. To learn more about this, see Transition to new models. How pricing and user model relate As explained in the pricing and user model overview, your pricing plan and user model aren't necessarily related. This table shows how pricing and user model relate to each other: Pricing plan factors Users on original user model Users on New Relic One user model Original pricing If your organization was created before July 30 2020, you remain on our original pricing plan until you transition to New Relic One pricing. See original pricing plan docs. For original pricing accounts, your users are on the original user model, unless they were added via automated user management. See original user docs. For original pricing accounts, users added with automated user management (users imported from your identity provider) are on the New Relic One user model. Upon switching to New Relic One pricing, you'll have new roles available. New Relic One pricing An organization is on the New Relic One pricing plan if it was created on or after July 30 2020 or it's an older organization but has transitioned to New Relic One pricing. See New Relic One pricing docs. If your organization has transitioned to New Relic One pricing, your users are on our original user model (unless they were added via automated user management). These users are now also categorized by user type (full vs basic). See original user docs. If your organization was created on or after July 30 2020, your users are on this user model. See New Relic One user docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.55127,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview of changes to pricing <em>and</em> <em>user</em> model",
        "sections": "<em>Account</em>&#x2F;<em>user</em> model changes explained",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " organizations may have an email address associated with multiple logins. <em>Users</em> on this model have a different system for managing permissions and <em>account</em> access. Using access grants, you assign <em>users</em> access to specific <em>roles</em> on specific <em>accounts</em>. <em>Original</em> <em>user</em> model: some aspects of this older model"
      },
      "id": "603e97fa28ccbcb7c2eba754"
    },
    {
      "sections": [
        "Intro to authentication (SAML SSO) for users on original user model",
        "Overview",
        "Requirements",
        "SSO settings UI page",
        "Providers supported by New Relic",
        "SAML information in New Relic account",
        "New Relic SAML requirements"
      ],
      "title": "Intro to authentication (SAML SSO) for users on original user model ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "80a96fa16d37d34d8f66c5564f2df32b081536ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/saml-service-providers/",
      "published_at": "2021-06-09T01:02:14Z",
      "updated_at": "2021-06-09T01:02:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. These docs are for setting up SSO for users on our original user model. Single Sign On (SSO) allows a computer user to log in to multiple systems via a single portal. If you are a New Relic account Owner setting up SSO integration for your organization, you must obtain a SAML certificate that identifies the SSO login URL (and possibly logout URL) for your organization. The other types of information required for SSO integration will vary depending on the SAML service provider being used. Requirements Requirements include: These docs apply for managing users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Access to this feature requires Pro or Enterprise edition. Owner role required SSO settings UI page To find the New Relic SSO settings page: from the account dropdown, click Account settings, then click Security and authentication, then click Single sign on. If you don't see this UI, review the requirements. Providers supported by New Relic For a list of the SAML service providers that New Relic currently supports for SSO integration: From the New Relic title bar, select (account dropdown) > Account settings > Security and authentication > Single sign on. Providers include: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 SAML information in New Relic account To integrate with an SAML provider, the provider will need information from you about your New Relic account. Most of the information you will need is visible on the New Relic SSO settings UI page: Metadata URL: Contains multiple pieces of information in a single XML message SAML version: 2.0 Assertion consumer URL: The endpoint to New Relic SSO (for example, https://rpm.newrelic.com/accounts/ACCOUNTID/sso/saml/finalize) Consumer binding: Transmission method is HTTP-POST NameID format: Email address Attributes: None required Entity ID: Account URL (default of rpm.newrelic.com) New Relic SAML requirements For SAML providers and service providers like New Relic to be able to work together, their processes must align in certain ways. Here are some aspects of how New Relic implements SSO integration. This will be useful if you are verifying that a specific SAML provider will be able to work with New Relic or if you are troubleshooting implementation problems. SSO considerations New Relic functions and preferences Scope of user credentials (IdP) Should be all users. Type of connection Must be both IdP initiated and SP initiated. Expected SAML profile New Relic uses a POST binding for SP-initiated requests. Expected NameID value format Must be email address. Sensitive info exchanged in SAML assertion? No, only the email address is sent. Session management and logout Does your organization use a redirect URL for logout? If not, New Relic can provide a logout landing page. Plan for users who no longer need access Typically manual deletion by the account Owner or Administrator. Clock synchronization Ensure the SAML identity provider clocks are maintained by NTP.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.63425,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to authentication (SAML SSO) for <em>users</em> on <em>original</em> <em>user</em> model ",
        "sections": "Intro to authentication (SAML SSO) for <em>users</em> on <em>original</em> <em>user</em> model",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. These docs are for setting up SSO for <em>users</em> on our <em>original</em> <em>user</em> model. Single Sign On (SSO) allows a computer <em>user</em> to log in to multiple systems via a single portal. If you are a New Relic <em>account</em>"
      },
      "id": "6043f3c4196a674d5f960f88"
    }
  ],
  "/docs/accounts/original-accounts-billing/product-based-pricing/overview-data-retention-components": [
    {
      "sections": [
        "Event data retention (original pricing plan)",
        "Important",
        "Overview of event data retention",
        "Extend your event retention",
        "Insights Pro",
        "How number of events stored is calculated",
        "Insights Pro event overage example",
        "Disable/enable Transaction and Pageview event reporting",
        "Tip",
        "Flexible data retention",
        "How it works",
        "Manage retention via UI",
        "Master and sub-accounts",
        "Glossary",
        "Manage flexible retention via API",
        "List customizable retention event namespaces",
        "List active rules on an account",
        "Show active rule on an account/namespace pair",
        "Create a new rule",
        "Delete an existing rule",
        "Copy existing sub-account rules to other sub-accounts",
        "For more help"
      ],
      "title": "Event data retention (original pricing plan)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original data retention"
      ],
      "external_id": "76d1289aad7de08b355bb8c313f9e7a42a5779d8",
      "image": "https://docs.newrelic.com/static/3071b381c71a877c79b8c9881e57c26b/8cdda/Account_usage_flex-retention.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-data-retention/event-data-retention-original-pricing-plan/",
      "published_at": "2021-06-08T15:06:07Z",
      "updated_at": "2021-05-16T10:55:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. New Relic products report a wide range of event data. Different products have different data retention periods, and different ways to extend event data retention. You can customize the length of your event data retention through flexible event retention. Overview of event data retention All New Relic product subscriptions come with a certain level of data retention that governs how long different types of data are retained. One type of data governed by data retention rules is event data. Event data is available in some UI charts and tables, and also available for querying via NRQL, our querying language. There are events reported from products by default, and there are custom events: each have their own retention rules, depending on the product and subscription level. Here are some examples of how different product subscriptions can affect event data retention: Free/Lite APM subscription: default-reported events available for 1 day. No custom events available. Pro APM subscription: default-reported events available for 8 days. Custom events available for 1 day (and able to be extended with Insight Pro). To see your subscriptions, go to the Account summary page. Extend your event retention Product Method APM, Browser, and Mobile Event data retention can be extended with a paid subscription to these products (see product data retention). To extend retention of both default-reported events and custom events further, you need an Insights Pro subscription. Infrastructure Event data retention can be extended with a paid Infrastructure subscription. See Infrastructure data retention rules. Synthetics Event data retention can be extended with a paid Synthetics subscription. See Synthetics data retention rules. Custom events Custom events reported by agent APIs or the Event API: Extension requires an Insights Pro subscription. Insights Pro Important As of April 12, 2021, we are upgrading Insights to an improved web and mobile experience! All of your Insights URLs will be redirected automatically to the corresponding dashboards in New Relic One. For more details about this migration and how you can easily plan for this transition, see our Explorers Hub post. A paid Insights subscription is what governs the extension of event data retention for: Our APM, Browser, Mobile, and Serverless products Custom events that come from an agent API or from the Event API Important Note that having an Insights Pro subscription doesn't require use of the Insights UI (insights.newrelic.com) to query your data: there are other querying options available. To see the data retention governed by your Insights subscription, go to: account dropdown > Account settings > Usage > Event data retention. With an Insights Pro subscription, you can use flexible retention to customize how your event data is retained. This lets you keep only the data you need, for as long as you need it. How number of events stored is calculated This is an explanation of how the number of stored events are calculated by default for an Insights Pro subscription. (Note that with flexible retention, you have more fine-grained control over the retention period.) The events stored is calculated based on 1) total events stored over time (calculated based on the events generated per week) and 2) the weeks of data retention available. This equation can be represented like this: events stored = (events generated per week) * (weeks of retention) Copy An Insights Pro subscription provides a given number of weeks of data retention as well as a given number of events over that retention period. For example: (200M transactions per week) * (4 weeks of retention) = 800M events stored in Insights (16M transactions per week) * (50 weeks of retention) = 800M events stored in Insights For Insights Pro subscriptions, data is purged based on retention window, not volume. It is deleted from the system once it's past the retention window. For example: If your Insights license is for 800 million events with a 4 week retention period, your data would start being purged after it is older than four weeks. Temporary spikes in data exceeding your subscription level will still be recorded, but consistent overage should be solved by upgrading your subscription level or decreasing data collected. For customers without an Insights Pro subscription, New Relic may throttle or downsample events to a limit of not more than than 4,000 events per host per minute. Insights Pro event overage example In this example, you have an Insights Pro subscription with a license for 800 million events over 4 weeks, a rate of 200 million events per week. You have APM Pro, Browser Pro, and Mobile Enterprise. A fifth week of data is added via your subscriptions, bumping you to a total of 1 billion events stored within your plan: If you are using 975 million events, you are not over your retention. If you are using 1.25 billion events, you are over your retention. Disable/enable Transaction and Pageview event reporting Tip Owners or Admins The Insights Data summary UI page is used to see the types of events being reported. You can also use this page to enable and disable the reporting of PageView and Transaction events. To view Data summary: Go to insights.newrelic.com > Manage data. Select the Summary tab. Note: if you disable PageView or Transaction event reporting, this can affect some New Relic UI elements. You may see some empty charts on some UI pages that rely on this data. Go to insights.newrelic.com > Manage data > Summary. From the Summary tab, select Configure data sources. Toggle the appropriate switch on or off, then save. Toggling Transaction on or off will cause reporting agents to restart themselves. For more about configuring event reporting, see Event data retention. Flexible data retention With an Insights Pro subscription, you get access to flexible retention, which lets you define how some types of event data are retained. This lets you keep only the event data you need, for as long as you need it. You can manage your flexible retention through the UI or through our GraphQL API. Requirements to use this feature: An Insights Pro subscription or equivalent trial. Applies only for events governed by an Insights Pro subscription. To use this feature, you must be an account Owner or data retention add-on manager for your account. How it works To understand how standard event data retention works, first read Event data retention. With flexible retention, you specify the data retention for applicable event namespaces across your accounts. This gives you per-event namespace control of your data. The retention that you specify for an event namespace will be shared by all the event types under that namespace. If some namespaces are not relevant to you, you can avoid collecting their event data entirely. Your retention value can’t be lower than the included retention or higher than the default retention. You can control data retention either in our UI or by API. Manage retention via UI You can control data retention either using our GraphQL API or in the UI. To do this with the UI, go to Account Settings > Usage > Data management section. Your retention changes take effect within 24 hours after updating. Tip Want a demo of how the UI works? Check out our videos for UI overview and assigning a role. Go to one.newrelic.com > (account dropdown) > Account settings > Usage > Data management section: You can view your current retention plans, modify them, and perform overrides, all in the UI. Master and sub-accounts When it comes to master and sub-accounts with flexible retention, be aware of the following: Feature Description Account inheritance Retention set for a master account is inherited by all sub-accounts, unless a sub-account has its own custom retention override. Switch between accounts You can toggle between your master and sub-accounts by using the Account switcher in the data retention UI. Moving sub-accounts If a sub-account is moved to another master, it will adopt the retention settings of the new master account it’s under. However, if the sub-account has its own custom retention override, it’ll persist and ignore the current retention of its master account. Copy retention values from one sub-account to other sub-accounts From within a sub-account, select Copy retentions and use that sub-account as a source or template to apply those same namespace retention values to one or more other destination or target sub-accounts. Note: Source and destination sub-accounts must all be under the same master account. Glossary To understand the terms used with flexible retention, see the following: Term Description Event namespace An event's namespace corresponds to one or more event types that share a single data retention value. For more information, see Event namespaces (types). You can also use NerdGraph to get the list of customizable event namespaces. Retention value The number (in days) that specifies how long your event data is stored. Retention rule The event namespace and retention value pair that you specify to override the current retention. Licensed retention Retention period that’s determined in weeks by your Insights Pro subscription contract. Included retention Retention period for which your data is stored but not charged under the Insights Pro subscription. For details, see the data retention details for a specific product. Paid retention Retention period for which your data is stored and is charged under the Insights Pro subscription. By default, your licensed retention determines this value but Flexible retention lets you override it. Default retention Retention period that comes out of the box. This is based on the total of included retention plus licensed retention. Manage flexible retention via API You can control data retention with either NerdGraph (our GraphQL API) or in the UI. The following API examples show how to alter data retention via the NerdGraph GraphiQL explorer. Your retention changes take effect within 24 hours after updating. List customizable retention event namespaces To list the customizable retention event names spaces for your account, go to api.newrelic.com/graphiql and run the following: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { customizableRetention { eventNamespaces { namespace } } } } } } Copy List active rules on an account To list active rules on an account, go to api.newrelic.com/graphiql and run the following: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { eventRetentionRules { id deletedAt deletedById createdAt createdById retentionInDays namespace } } } } } Copy Show active rule on an account/namespace pair To show the active rule on a specific account/namespace pair, go to api.newrelic.com/graphiql and run the following: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { eventRetentionRule(namespace: \"APM\") { id deletedById deletedAt createdById createdAt retentionInDays namespace } } } } } Copy Create a new rule To create a new rule, go to api.newrelic.com/graphiql and run the following: mutation { dataManagementCreateEventRetentionRule(accountId: YOUR_ACCOUNT_ID, namespace: \"APM\", retentionInDays: 8) { id deletedById deletedAt createdById createdAt retentionInDays namespace } } Copy Delete an existing rule If you delete a rule applied to a sub-account, that sub-account will adopt the current retention value of its master account for the given namespace. If you delete a rule applied to a master account, the default retention value will re-apply for the given namespace. To delete an existing rule, go to api.newrelic.com/graphiql and run the following: mutation { dataManagementDeleteEventRetentionRule(accountId: YOUR_ACCOUNT_ID, namespace: \"APM\") { id deletedById deletedAt createdById createdAt retentionInDays namespace } } Copy Copy existing sub-account rules to other sub-accounts You can specify a sub-account to be the template or source account, and have other destination sub-accounts adopt the same namespace retention values of the source sub-account. Note: all sub-accounts must be within the same master account. To copy an existing set of retentions, go to api.newrelic.com/graphiql and run the following: mutation { dataManagementCopyRetentions( sourceAccountId: SOURCE_ACCOUNT_ID, destinationAccountIds: [DESTINATION_ACCOUNT_ID_1, DESTINATION_ACCOUNT_ID_2, DESTINATION_ACCOUNT_ID_3]) { success failure } } Copy Success and failure will return lists of destination account ids which were successful (or failed) in copying rules from the source account. For more help For details about the data retention of other products or integrations, see that specific documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 275.8425,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Event <em>data</em> <em>retention</em> (<em>original</em> pricing plan)",
        "sections": "Event <em>data</em> <em>retention</em> (<em>original</em> pricing plan)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " overview and assigning a role. Go to one.newrelic.com &gt; (<em>account</em> dropdown) &gt; <em>Account</em> settings &gt; Usage &gt; <em>Data</em> management section: You can view your current <em>retention</em> plans, modify them, and perform overrides, all in the UI. Master and sub-<em>accounts</em> When it comes to master and sub-<em>accounts</em>"
      },
      "id": "6043f713e7b9d2ccee579a1d"
    },
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 254.51604,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Users, roles, permissions (<em>original</em> user model)",
        "sections": "Users, roles, permissions (<em>original</em> user model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " than one login, they&#x27;ll see a &quot;multiple <em>accounts</em> found&quot; note when logging in. View and manage users in UI If your New Relic <em>account</em> has users on our <em>original</em> user model, you can use the Users and roles UI. To access this UI: select the <em>account</em> dropdown, select <em>Account</em> settings, and select Users"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Overview of changes to pricing and user model",
        "Pricing plans explained",
        "Determine pricing plan using UI",
        "Convert to new pricing",
        "Account/user model changes explained",
        "Requirements for new account/user model",
        "Determine which user model you're on",
        "Feature impacts of user model",
        "Transition to new models",
        "How pricing and user model relate"
      ],
      "title": "Overview of changes to pricing and user model",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "b19d61b5a0c65ca352e2ce0e260e2b53391b94fc",
      "image": "https://docs.newrelic.com/static/1461470cc1ef0be91120c84d76a7ccdd/c1b63/new-relic-one-pricing-plan-billing-ui.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/overview-changes-pricing-user-model/",
      "published_at": "2021-06-09T02:28:10Z",
      "updated_at": "2021-06-09T02:28:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In 2020, New Relic released both a newer pricing plan and a newer account/user model. If you have a New Relic organization created after July 30, 2020, you're on our newer pricing plan and newer user model. But for older customers, your pricing plan and user model are not necessarily related: for example, you may have switched to our newer pricing plan and still have users on our original user model. Keep reading to learn about: Our original and new pricing plans Our original and new account/user models How to switch to the new models How the pricing plan and the user model relate to each other Pricing plans explained New Relic organizations are on one of two pricing plans: New Relic One pricing: Our new pricing plan is simpler. It bills on which Full Stack Observability edition (Standard, Pro, Enterprise) you're on, the GBs of data ingested, and the count of billable \"full users.\" All organizations created on or after July 30 2020 are on this pricing plan. Some older organizations are able to transition to this pricing. Our original product-based pricing plan: this is based on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer pricing plan: in that case, their users remain on our original user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the account dropdown, and select Manage your plan. If you see billing information about data ingested and the number of billable users, you’re on the new pricing plan. If you're on New Relic One pricing, you'll see a billing UI like this. Convert to new pricing Some customers are able to switch to new pricing. Learn more about switching your pricing plan. Account/user model changes explained In this context, the term \"account/user model\" (or simply \"user model\") refers to the structure of a New Relic user record and how it interacts with the broader New Relic organization that it's in. Our two account/user models are: New Relic One user model: this newer, improved user model has these major differences from the original user model: All your accounts and users are contained under a top-level organization. This gives an organization stronger control over managing users and what they can access. One impact of this is that users who work with multiple New Relic organizations may have an email address associated with multiple logins. Users on this model have a different system for managing permissions and account access. Using access grants, you assign users access to specific roles on specific accounts. Original user model: some aspects of this older model that are different from our newer model: There wasn't as much organization-level control over users. For example, a New Relic user had the ability to access multiple accounts they'd been granted access to using a single login. Users on the original user model have a different user management system. To learn more about benefits of the new model, see our blog post about user model changes. For impacts and limitations, see Feature impacts. Requirements for new account/user model Here's a synopsis of the factors governing what organizations use the new model: All new sign-up accounts after July 202 have users on this model, and also use the new pricing plan. Partner accounts (resellers, managed service providers), and customers using the partnership account structure, cannot yet migrate their users to the new model. Some pre-existing organizations have had their users migrated to the new model by New Relic or by using the user migration procedure. Note that switching to the new pricing plan is independent from migrating your users. Determine which user model you're on To determine what user model you're on, from the account dropdown select User preferences. If you see the UI below, you're on the New Relic One user model. If you see a different UI with more content displayed, you're on the original user model (see original user docs). To determine if you can manage users on the New Relic One user model, see Manage users. The user model is independent of your pricing plan. For how user model relates to pricing, see the Pricing and user model table. Feature impacts of user model The new user model offers many benefits. Here are some feature impacts of being on the New Relic One user model that may be surprising or unintuitive to our existing customers: More separation of organizations/accounts: If you have an email address associated with multiple New Relic accounts, this may mean you need to log out and log back in. Learn more about account access. Adding accounts: Pro and Enterprise edition can have more than one account in their organization. Currently users in these organizations cannot, on their own, add accounts. They must get help from their New Relic account representative. To learn about adding users to accounts, see Manage users. Alert notifications: Users on the new model won’t show up as an option when choosing users to receive alert notifications. The result of this is that these users will not get New Relic mobile app push notifications. As a workaround, you can instead use their email address as the notification channel. Changing account name: These users cannot change the name of their organization after it has been created. Transition to new models Some New Relic customers are able to transition to the new models. To learn more about this, see Transition to new models. How pricing and user model relate As explained in the pricing and user model overview, your pricing plan and user model aren't necessarily related. This table shows how pricing and user model relate to each other: Pricing plan factors Users on original user model Users on New Relic One user model Original pricing If your organization was created before July 30 2020, you remain on our original pricing plan until you transition to New Relic One pricing. See original pricing plan docs. For original pricing accounts, your users are on the original user model, unless they were added via automated user management. See original user docs. For original pricing accounts, users added with automated user management (users imported from your identity provider) are on the New Relic One user model. Upon switching to New Relic One pricing, you'll have new roles available. New Relic One pricing An organization is on the New Relic One pricing plan if it was created on or after July 30 2020 or it's an older organization but has transitioned to New Relic One pricing. See New Relic One pricing docs. If your organization has transitioned to New Relic One pricing, your users are on our original user model (unless they were added via automated user management). These users are now also categorized by user type (full vs basic). See original user docs. If your organization was created on or after July 30 2020, your users are on this user model. See New Relic One user docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.55127,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview of changes to pricing <em>and</em> user model",
        "sections": "<em>Account</em>&#x2F;user model changes explained",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " the option to transition to the newer pricing plan: in that case, their users remain on our <em>original</em> user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the <em>account</em> dropdown, and select Manage your plan. If you see <em>billing</em>"
      },
      "id": "603e97fa28ccbcb7c2eba754"
    }
  ],
  "/docs/accounts/original-accounts-billing/product-based-pricing/trial-lite-accounts-deprecated": [
    {
      "sections": [
        "Overview of changes to pricing and user model",
        "Pricing plans explained",
        "Determine pricing plan using UI",
        "Convert to new pricing",
        "Account/user model changes explained",
        "Requirements for new account/user model",
        "Determine which user model you're on",
        "Feature impacts of user model",
        "Transition to new models",
        "How pricing and user model relate"
      ],
      "title": "Overview of changes to pricing and user model",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "b19d61b5a0c65ca352e2ce0e260e2b53391b94fc",
      "image": "https://docs.newrelic.com/static/1461470cc1ef0be91120c84d76a7ccdd/c1b63/new-relic-one-pricing-plan-billing-ui.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/overview-changes-pricing-user-model/",
      "published_at": "2021-06-09T02:28:10Z",
      "updated_at": "2021-06-09T02:28:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In 2020, New Relic released both a newer pricing plan and a newer account/user model. If you have a New Relic organization created after July 30, 2020, you're on our newer pricing plan and newer user model. But for older customers, your pricing plan and user model are not necessarily related: for example, you may have switched to our newer pricing plan and still have users on our original user model. Keep reading to learn about: Our original and new pricing plans Our original and new account/user models How to switch to the new models How the pricing plan and the user model relate to each other Pricing plans explained New Relic organizations are on one of two pricing plans: New Relic One pricing: Our new pricing plan is simpler. It bills on which Full Stack Observability edition (Standard, Pro, Enterprise) you're on, the GBs of data ingested, and the count of billable \"full users.\" All organizations created on or after July 30 2020 are on this pricing plan. Some older organizations are able to transition to this pricing. Our original product-based pricing plan: this is based on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer pricing plan: in that case, their users remain on our original user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the account dropdown, and select Manage your plan. If you see billing information about data ingested and the number of billable users, you’re on the new pricing plan. If you're on New Relic One pricing, you'll see a billing UI like this. Convert to new pricing Some customers are able to switch to new pricing. Learn more about switching your pricing plan. Account/user model changes explained In this context, the term \"account/user model\" (or simply \"user model\") refers to the structure of a New Relic user record and how it interacts with the broader New Relic organization that it's in. Our two account/user models are: New Relic One user model: this newer, improved user model has these major differences from the original user model: All your accounts and users are contained under a top-level organization. This gives an organization stronger control over managing users and what they can access. One impact of this is that users who work with multiple New Relic organizations may have an email address associated with multiple logins. Users on this model have a different system for managing permissions and account access. Using access grants, you assign users access to specific roles on specific accounts. Original user model: some aspects of this older model that are different from our newer model: There wasn't as much organization-level control over users. For example, a New Relic user had the ability to access multiple accounts they'd been granted access to using a single login. Users on the original user model have a different user management system. To learn more about benefits of the new model, see our blog post about user model changes. For impacts and limitations, see Feature impacts. Requirements for new account/user model Here's a synopsis of the factors governing what organizations use the new model: All new sign-up accounts after July 202 have users on this model, and also use the new pricing plan. Partner accounts (resellers, managed service providers), and customers using the partnership account structure, cannot yet migrate their users to the new model. Some pre-existing organizations have had their users migrated to the new model by New Relic or by using the user migration procedure. Note that switching to the new pricing plan is independent from migrating your users. Determine which user model you're on To determine what user model you're on, from the account dropdown select User preferences. If you see the UI below, you're on the New Relic One user model. If you see a different UI with more content displayed, you're on the original user model (see original user docs). To determine if you can manage users on the New Relic One user model, see Manage users. The user model is independent of your pricing plan. For how user model relates to pricing, see the Pricing and user model table. Feature impacts of user model The new user model offers many benefits. Here are some feature impacts of being on the New Relic One user model that may be surprising or unintuitive to our existing customers: More separation of organizations/accounts: If you have an email address associated with multiple New Relic accounts, this may mean you need to log out and log back in. Learn more about account access. Adding accounts: Pro and Enterprise edition can have more than one account in their organization. Currently users in these organizations cannot, on their own, add accounts. They must get help from their New Relic account representative. To learn about adding users to accounts, see Manage users. Alert notifications: Users on the new model won’t show up as an option when choosing users to receive alert notifications. The result of this is that these users will not get New Relic mobile app push notifications. As a workaround, you can instead use their email address as the notification channel. Changing account name: These users cannot change the name of their organization after it has been created. Transition to new models Some New Relic customers are able to transition to the new models. To learn more about this, see Transition to new models. How pricing and user model relate As explained in the pricing and user model overview, your pricing plan and user model aren't necessarily related. This table shows how pricing and user model relate to each other: Pricing plan factors Users on original user model Users on New Relic One user model Original pricing If your organization was created before July 30 2020, you remain on our original pricing plan until you transition to New Relic One pricing. See original pricing plan docs. For original pricing accounts, your users are on the original user model, unless they were added via automated user management. See original user docs. For original pricing accounts, users added with automated user management (users imported from your identity provider) are on the New Relic One user model. Upon switching to New Relic One pricing, you'll have new roles available. New Relic One pricing An organization is on the New Relic One pricing plan if it was created on or after July 30 2020 or it's an older organization but has transitioned to New Relic One pricing. See New Relic One pricing docs. If your organization has transitioned to New Relic One pricing, your users are on our original user model (unless they were added via automated user management). These users are now also categorized by user type (full vs basic). See original user docs. If your organization was created on or after July 30 2020, your users are on this user model. See New Relic One user docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 478.85208,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview of changes to <em>pricing</em> <em>and</em> user model",
        "sections": "Overview of changes to <em>pricing</em> <em>and</em> user model",
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": " organizations created on or after July 30 2020 are on this <em>pricing</em> plan. Some older organizations are able to transition to this <em>pricing</em>. Our <em>original</em> <em>product</em>-<em>based</em> <em>pricing</em> plan: this is <em>based</em> on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have"
      },
      "id": "603e97fa28ccbcb7c2eba754"
    },
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 254.51584,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Users, roles, permissions (<em>original</em> user model)",
        "sections": "Users, roles, permissions (<em>original</em> user model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " than one login, they&#x27;ll see a &quot;multiple <em>accounts</em> found&quot; note when logging in. View and manage users in UI If your New Relic <em>account</em> has users on our <em>original</em> user model, you can use the Users and roles UI. To access this UI: select the <em>account</em> dropdown, select <em>Account</em> settings, and select Users"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Set session timeouts",
        "Requirements",
        "Overview",
        "Features",
        "Tip",
        "Select the session timeout value",
        "Select SAML SSO browser re-authentication",
        "Redirect after SAML timeout"
      ],
      "title": "Set session timeouts",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "a61d4c61f52ee18be0763a9cd526634d9d2f50f5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/account-maintenance/set-session-timeouts/",
      "published_at": "2021-06-08T20:16:53Z",
      "updated_at": "2021-03-30T15:37:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's session configuration feature allows you to set limits on idle time before your users' browser sessions automatically expire. Requirements This doc is for users on our original user model. If you're on the New Relic One user model, see Session settings. Overview Session configuration allows you to set limits on idle time before your users' browser sessions automatically expire. A message appears three minutes before the system logs them out. Users then need to sign back in to continue. For accounts configured with SAML Single Sign On (SSO), an additional option is available to set how often the users' browser sessions are re-authenticated. Users and Restricted Users can view the time period for automatic timeout, but they cannot change it. To view the timeout value: Go to account dropdown > Account settings > Authentication > Session configuration. Features Tip Owner or Admins The session configuration options provide an additional level of security to ensure that unattended browsers will automatically time out. Session values are automatically stored in the session cookie. Additional features include: Feature Notes Easy setup Admins use the slide bar in New Relic's user interface to select predefined time periods. Default is two weeks. Separate options available by role Admins can choose for Restricted User sessions to never time out even if they select a session timeout setting. This is useful, for example, when you use a Restricted User login for demos. Automatic inheritance for sub-accounts By default, sub-accounts inherit the same session configuration as their master account. Most restrictive by default If users have multiple accounts, the most restrictive setting applies, regardless of which account the user currently is using. Integration with SAML SSO logout URL If the account's SAML SSO configuration does not include a logout URL, New Relic includes a link from Session configuration for the Owner to set it up. If the Admin is not also the Owner, a message about the SAML SSO logout URL requirement appears. Additional re-authentication setting for SAML SSO In addition to the session timeout option, Admins can select the time (15 minutes to 2 weeks, or never) for how often a SAML-authenticated browser session must be re-authenticated. Select the session timeout value The process to select the session timeout value is the same for both SAML and non-SAML configurations. For additional SAML configuration options, see SAML SSO browser reauthentication. To select a predefined period for session timeouts with SAML SSO accounts, the account Owner must have previously identified the logout URL in the SAML SSO configuration settings. If this has not been set up, the account Admin can view the session timeout slide bar but not change it. If the Admin is also the account Owner, the Session configuration includes a link to go directly to New Relic's SAML SSO Configuration and identify the logout URL. For more information, see Setting up SSO. To select a predefined period for session timeouts: Go to: account dropdown > Account settings > Authentication > Session configuration. Use the slide bar to select a time period for idle sessions to expire and log out automatically. Optional: Select the checkbox option if you do not want restricted users' browser sessions to expire. Select Save my changes. Changes take effect immediately. Select SAML SSO browser re-authentication To select a predefined period for SAML SSO-authenticated browser sessions to be re-authenticated: Go to: account dropdown > Account settings > Authentication > Session configuration. Use the SAML re-authentication time slide bar to select a time period for New Relic to check the browser session. Select Save my changes. Redirect after SAML timeout If you are logged out due to a session idle timeout on an account configured for SAML, you will be sent to the New Relic login page. Because your account is configured for SAML, you do not have a direct New Relic login. To be redirected to your SAML provider for authentication: Enter your email address in the Email field. Leave the Password field blank. Click the Sign In button. You will then be redirected to your SAML provider. Once reauthorized, you will then be returned to the New Relic website.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.6002,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": ". Automatic inheritance for sub-<em>accounts</em> By default, sub-<em>accounts</em> inherit the same session configuration as their master <em>account</em>. Most restrictive by default If users have multiple <em>accounts</em>, the most restrictive setting applies, regardless of which <em>account</em> the user currently is using. Integration with SAML"
      },
      "id": "603e8914196a678f45a83de3"
    }
  ],
  "/docs/accounts/original-accounts-billing/product-pricing/product-based-pricing": [
    {
      "sections": [
        "Overview of changes to pricing and user model",
        "Pricing plans explained",
        "Determine pricing plan using UI",
        "Convert to new pricing",
        "Account/user model changes explained",
        "Requirements for new account/user model",
        "Determine which user model you're on",
        "Feature impacts of user model",
        "Transition to new models",
        "How pricing and user model relate"
      ],
      "title": "Overview of changes to pricing and user model",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "b19d61b5a0c65ca352e2ce0e260e2b53391b94fc",
      "image": "https://docs.newrelic.com/static/1461470cc1ef0be91120c84d76a7ccdd/c1b63/new-relic-one-pricing-plan-billing-ui.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/overview-changes-pricing-user-model/",
      "published_at": "2021-06-09T02:28:10Z",
      "updated_at": "2021-06-09T02:28:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In 2020, New Relic released both a newer pricing plan and a newer account/user model. If you have a New Relic organization created after July 30, 2020, you're on our newer pricing plan and newer user model. But for older customers, your pricing plan and user model are not necessarily related: for example, you may have switched to our newer pricing plan and still have users on our original user model. Keep reading to learn about: Our original and new pricing plans Our original and new account/user models How to switch to the new models How the pricing plan and the user model relate to each other Pricing plans explained New Relic organizations are on one of two pricing plans: New Relic One pricing: Our new pricing plan is simpler. It bills on which Full Stack Observability edition (Standard, Pro, Enterprise) you're on, the GBs of data ingested, and the count of billable \"full users.\" All organizations created on or after July 30 2020 are on this pricing plan. Some older organizations are able to transition to this pricing. Our original product-based pricing plan: this is based on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer pricing plan: in that case, their users remain on our original user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the account dropdown, and select Manage your plan. If you see billing information about data ingested and the number of billable users, you’re on the new pricing plan. If you're on New Relic One pricing, you'll see a billing UI like this. Convert to new pricing Some customers are able to switch to new pricing. Learn more about switching your pricing plan. Account/user model changes explained In this context, the term \"account/user model\" (or simply \"user model\") refers to the structure of a New Relic user record and how it interacts with the broader New Relic organization that it's in. Our two account/user models are: New Relic One user model: this newer, improved user model has these major differences from the original user model: All your accounts and users are contained under a top-level organization. This gives an organization stronger control over managing users and what they can access. One impact of this is that users who work with multiple New Relic organizations may have an email address associated with multiple logins. Users on this model have a different system for managing permissions and account access. Using access grants, you assign users access to specific roles on specific accounts. Original user model: some aspects of this older model that are different from our newer model: There wasn't as much organization-level control over users. For example, a New Relic user had the ability to access multiple accounts they'd been granted access to using a single login. Users on the original user model have a different user management system. To learn more about benefits of the new model, see our blog post about user model changes. For impacts and limitations, see Feature impacts. Requirements for new account/user model Here's a synopsis of the factors governing what organizations use the new model: All new sign-up accounts after July 202 have users on this model, and also use the new pricing plan. Partner accounts (resellers, managed service providers), and customers using the partnership account structure, cannot yet migrate their users to the new model. Some pre-existing organizations have had their users migrated to the new model by New Relic or by using the user migration procedure. Note that switching to the new pricing plan is independent from migrating your users. Determine which user model you're on To determine what user model you're on, from the account dropdown select User preferences. If you see the UI below, you're on the New Relic One user model. If you see a different UI with more content displayed, you're on the original user model (see original user docs). To determine if you can manage users on the New Relic One user model, see Manage users. The user model is independent of your pricing plan. For how user model relates to pricing, see the Pricing and user model table. Feature impacts of user model The new user model offers many benefits. Here are some feature impacts of being on the New Relic One user model that may be surprising or unintuitive to our existing customers: More separation of organizations/accounts: If you have an email address associated with multiple New Relic accounts, this may mean you need to log out and log back in. Learn more about account access. Adding accounts: Pro and Enterprise edition can have more than one account in their organization. Currently users in these organizations cannot, on their own, add accounts. They must get help from their New Relic account representative. To learn about adding users to accounts, see Manage users. Alert notifications: Users on the new model won’t show up as an option when choosing users to receive alert notifications. The result of this is that these users will not get New Relic mobile app push notifications. As a workaround, you can instead use their email address as the notification channel. Changing account name: These users cannot change the name of their organization after it has been created. Transition to new models Some New Relic customers are able to transition to the new models. To learn more about this, see Transition to new models. How pricing and user model relate As explained in the pricing and user model overview, your pricing plan and user model aren't necessarily related. This table shows how pricing and user model relate to each other: Pricing plan factors Users on original user model Users on New Relic One user model Original pricing If your organization was created before July 30 2020, you remain on our original pricing plan until you transition to New Relic One pricing. See original pricing plan docs. For original pricing accounts, your users are on the original user model, unless they were added via automated user management. See original user docs. For original pricing accounts, users added with automated user management (users imported from your identity provider) are on the New Relic One user model. Upon switching to New Relic One pricing, you'll have new roles available. New Relic One pricing An organization is on the New Relic One pricing plan if it was created on or after July 30 2020 or it's an older organization but has transitioned to New Relic One pricing. See New Relic One pricing docs. If your organization has transitioned to New Relic One pricing, your users are on our original user model (unless they were added via automated user management). These users are now also categorized by user type (full vs basic). See original user docs. If your organization was created on or after July 30 2020, your users are on this user model. See New Relic One user docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 478.85208,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview of changes to <em>pricing</em> <em>and</em> user model",
        "sections": "Overview of changes to <em>pricing</em> <em>and</em> user model",
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": " organizations created on or after July 30 2020 are on this <em>pricing</em> plan. Some older organizations are able to transition to this <em>pricing</em>. Our <em>original</em> <em>product</em>-<em>based</em> <em>pricing</em> plan: this is <em>based</em> on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have"
      },
      "id": "603e97fa28ccbcb7c2eba754"
    },
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 254.51584,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Users, roles, permissions (<em>original</em> user model)",
        "sections": "Users, roles, permissions (<em>original</em> user model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " than one login, they&#x27;ll see a &quot;multiple <em>accounts</em> found&quot; note when logging in. View and manage users in UI If your New Relic <em>account</em> has users on our <em>original</em> user model, you can use the Users and roles UI. To access this UI: select the <em>account</em> dropdown, select <em>Account</em> settings, and select Users"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Set session timeouts",
        "Requirements",
        "Overview",
        "Features",
        "Tip",
        "Select the session timeout value",
        "Select SAML SSO browser re-authentication",
        "Redirect after SAML timeout"
      ],
      "title": "Set session timeouts",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "a61d4c61f52ee18be0763a9cd526634d9d2f50f5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/account-maintenance/set-session-timeouts/",
      "published_at": "2021-06-08T20:16:53Z",
      "updated_at": "2021-03-30T15:37:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's session configuration feature allows you to set limits on idle time before your users' browser sessions automatically expire. Requirements This doc is for users on our original user model. If you're on the New Relic One user model, see Session settings. Overview Session configuration allows you to set limits on idle time before your users' browser sessions automatically expire. A message appears three minutes before the system logs them out. Users then need to sign back in to continue. For accounts configured with SAML Single Sign On (SSO), an additional option is available to set how often the users' browser sessions are re-authenticated. Users and Restricted Users can view the time period for automatic timeout, but they cannot change it. To view the timeout value: Go to account dropdown > Account settings > Authentication > Session configuration. Features Tip Owner or Admins The session configuration options provide an additional level of security to ensure that unattended browsers will automatically time out. Session values are automatically stored in the session cookie. Additional features include: Feature Notes Easy setup Admins use the slide bar in New Relic's user interface to select predefined time periods. Default is two weeks. Separate options available by role Admins can choose for Restricted User sessions to never time out even if they select a session timeout setting. This is useful, for example, when you use a Restricted User login for demos. Automatic inheritance for sub-accounts By default, sub-accounts inherit the same session configuration as their master account. Most restrictive by default If users have multiple accounts, the most restrictive setting applies, regardless of which account the user currently is using. Integration with SAML SSO logout URL If the account's SAML SSO configuration does not include a logout URL, New Relic includes a link from Session configuration for the Owner to set it up. If the Admin is not also the Owner, a message about the SAML SSO logout URL requirement appears. Additional re-authentication setting for SAML SSO In addition to the session timeout option, Admins can select the time (15 minutes to 2 weeks, or never) for how often a SAML-authenticated browser session must be re-authenticated. Select the session timeout value The process to select the session timeout value is the same for both SAML and non-SAML configurations. For additional SAML configuration options, see SAML SSO browser reauthentication. To select a predefined period for session timeouts with SAML SSO accounts, the account Owner must have previously identified the logout URL in the SAML SSO configuration settings. If this has not been set up, the account Admin can view the session timeout slide bar but not change it. If the Admin is also the account Owner, the Session configuration includes a link to go directly to New Relic's SAML SSO Configuration and identify the logout URL. For more information, see Setting up SSO. To select a predefined period for session timeouts: Go to: account dropdown > Account settings > Authentication > Session configuration. Use the slide bar to select a time period for idle sessions to expire and log out automatically. Optional: Select the checkbox option if you do not want restricted users' browser sessions to expire. Select Save my changes. Changes take effect immediately. Select SAML SSO browser re-authentication To select a predefined period for SAML SSO-authenticated browser sessions to be re-authenticated: Go to: account dropdown > Account settings > Authentication > Session configuration. Use the SAML re-authentication time slide bar to select a time period for New Relic to check the browser session. Select Save my changes. Redirect after SAML timeout If you are logged out due to a session idle timeout on an account configured for SAML, you will be sent to the New Relic login page. Because your account is configured for SAML, you do not have a direct New Relic login. To be redirected to your SAML provider for authentication: Enter your email address in the Email field. Leave the Password field blank. Click the Sign In button. You will then be redirected to your SAML provider. Once reauthorized, you will then be returned to the New Relic website.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.6002,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": ". Automatic inheritance for sub-<em>accounts</em> By default, sub-<em>accounts</em> inherit the same session configuration as their master <em>account</em>. Most restrictive by default If users have multiple <em>accounts</em>, the most restrictive setting applies, regardless of which <em>account</em> the user currently is using. Integration with SAML"
      },
      "id": "603e8914196a678f45a83de3"
    }
  ],
  "/docs/accounts-partnerships/accounts/saml-single-sign/configure-saml-multiple-accounts": [
    {
      "sections": [
        "Intro to authentication (SAML SSO) for users on original user model",
        "Overview",
        "Requirements",
        "SSO settings UI page",
        "Providers supported by New Relic",
        "SAML information in New Relic account",
        "New Relic SAML requirements"
      ],
      "title": "Intro to authentication (SAML SSO) for users on original user model ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "80a96fa16d37d34d8f66c5564f2df32b081536ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/saml-service-providers/",
      "published_at": "2021-06-09T01:02:14Z",
      "updated_at": "2021-06-09T01:02:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. These docs are for setting up SSO for users on our original user model. Single Sign On (SSO) allows a computer user to log in to multiple systems via a single portal. If you are a New Relic account Owner setting up SSO integration for your organization, you must obtain a SAML certificate that identifies the SSO login URL (and possibly logout URL) for your organization. The other types of information required for SSO integration will vary depending on the SAML service provider being used. Requirements Requirements include: These docs apply for managing users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Access to this feature requires Pro or Enterprise edition. Owner role required SSO settings UI page To find the New Relic SSO settings page: from the account dropdown, click Account settings, then click Security and authentication, then click Single sign on. If you don't see this UI, review the requirements. Providers supported by New Relic For a list of the SAML service providers that New Relic currently supports for SSO integration: From the New Relic title bar, select (account dropdown) > Account settings > Security and authentication > Single sign on. Providers include: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 SAML information in New Relic account To integrate with an SAML provider, the provider will need information from you about your New Relic account. Most of the information you will need is visible on the New Relic SSO settings UI page: Metadata URL: Contains multiple pieces of information in a single XML message SAML version: 2.0 Assertion consumer URL: The endpoint to New Relic SSO (for example, https://rpm.newrelic.com/accounts/ACCOUNTID/sso/saml/finalize) Consumer binding: Transmission method is HTTP-POST NameID format: Email address Attributes: None required Entity ID: Account URL (default of rpm.newrelic.com) New Relic SAML requirements For SAML providers and service providers like New Relic to be able to work together, their processes must align in certain ways. Here are some aspects of how New Relic implements SSO integration. This will be useful if you are verifying that a specific SAML provider will be able to work with New Relic or if you are troubleshooting implementation problems. SSO considerations New Relic functions and preferences Scope of user credentials (IdP) Should be all users. Type of connection Must be both IdP initiated and SP initiated. Expected SAML profile New Relic uses a POST binding for SP-initiated requests. Expected NameID value format Must be email address. Sensitive info exchanged in SAML assertion? No, only the email address is sent. Session management and logout Does your organization use a redirect URL for logout? If not, New Relic can provide a logout landing page. Plan for users who no longer need access Typically manual deletion by the account Owner or Administrator. Clock synchronization Ensure the SAML identity provider clocks are maintained by NTP.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 521.2096,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model ",
        "sections": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Overview For an overview of our <em>SAML</em> <em>SSO</em> and SCIM docs, first read Introduction to <em>SAML</em> <em>SSO</em> and SCIM. These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. Single Sign On (<em>SSO</em>) allows a computer <em>user</em> to log in to multiple systems via a single portal. If you are a New Relic <em>account</em>"
      },
      "id": "6043f3c4196a674d5f960f88"
    },
    {
      "sections": [
        "Add users to SAML accounts (original user model)",
        "Important",
        "Overview",
        "Requirements",
        "Add and confirm users",
        "Caution",
        "Bypass email confirmation"
      ],
      "title": "Add users to SAML accounts (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "1ab1cb53dc639014a77f74442c2a89c37b021cc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/add-users-saml-accounts/",
      "published_at": "2021-06-08T18:49:13Z",
      "updated_at": "2021-06-08T18:49:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For an overview of SAML and SCIM options, see Introduction to SAML SSO and SCIM. Overview For an overview of our SAML SSO and SCIM docs, first read Introduction to SAML SSO and SCIM. As an additional security measure for SAML single sign-on (SSO) accounts, users are not added until they complete the email confirmation that New Relic sends automatically. Users in the pending state (not yet confirmed) won't receive notifications, such as alerts. For accounts without SAML SSO integration, the account Owner and Admins can add new users without requiring confirmation. Requirements For requirements, including which New Relic users this feature applies to, see Requirements. Add and confirm users Follow this process to add and confirm users for New Relic accounts with SAML SSO: The account's Owner or an Administrator adds new users: Go to: account dropdown > Account settings > Account > Summary. On SAML-enabled accounts, New Relic flags the users as Pending and sends an email confirmation. (Pending users will not receive notifications associated with their user role, such as alert notifications.) Users select the link in the email to confirm their account, which directs them to the SAML provider's login URL. When users successfully sign into their SAML SSO end point (Auth0, Okta, OneLogin, Ping Identity, Salesforce, etc.), New Relic flags the users as Active. Caution If you disable SAML SSO, New Relic automatically flags all of your Pending users as Active. If you decide to re-enable SAML SSO later, New Relic automatically flags all users except the Owner as Pending, and they will need to confirm their account access by email. Admin user's API keys for all users that go into a pending state will be deleted. Bypass email confirmation Depending on your subscription level, you may have the option to claim the domain names that you own and bypass the SAML SSO confirmation process. When the account Owner or Administrators add new users and their email address has a domain that matches the account's domains, New Relic automatically adds them as Active users. Benefits of identifying domain ownership include: Adds a useful feature to your account. Claims domains as your own. Makes it easier for your employees to get started with New Relic, because they do not need to confirm their account access. Maintains security when adding users outside of your organization. To flag your account as owning one or more domain names, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 512.19775,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "sections": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For an overview of <em>SAML</em> and SCIM options, see Introduction to <em>SAML</em> <em>SSO</em> and SCIM. Overview For an overview of our <em>SAML</em> <em>SSO</em> and SCIM docs, first read Introduction to <em>SAML</em> <em>SSO</em> and SCIM. As an additional security measure"
      },
      "id": "6043f342e7b9d20ca55799fa"
    },
    {
      "sections": [
        "Users, roles, permissions (original user model)",
        "Requirements",
        "Updates about our new account/user model",
        "View and manage users in UI",
        "Tip",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Enable SAML SSO and/or SCIM",
        "View pending SAML SSO users",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users, roles, permissions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "https://docs.newrelic.com/static/7c44fb7de7b71f84f961042e651fd609/75a80/login-multiple-accounts-found.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-06-09T02:18:32Z",
      "updated_at": "2021-06-09T02:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Updates about our new account/user model In July of 2020, we released a new account/user model called the New Relic One user model, which offers many benefits in terms of how you manage your organization and users. At first this was only available to new sign-ups but over time we've been migrating more and more pre-existing organizations to the new model. Some organizations with users on the original user model are able to migrate their users on their own. We'll continue working on migrating users to the new model until the original user model is fully deprecated. One impact of the new user model is that it's possible now for users to have multiple logins associated with the same email. For example, a user with access to multiple organizations (like a contractor) may have their user record updated to the new user model in one organization, resulting in them having their original login method and records and a New Relic One user model record. This may result in the user being logged in to New Relic and not being able to find an account they're looking for. For more on that, see Factors affecting access. If a user's email is associated with more than one login, they'll see a \"multiple accounts found\" note when logging in. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Enable SAML SSO and/or SCIM For an introduction to using SAML SSO and/or SCIM provisioning, see Get started with SAML SSO or SCIM. View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorers Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard edition includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 267.31293,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Users</em>, roles, permissions (<em>original</em> <em>user</em> model)",
        "sections": "<em>Users</em>, roles, permissions (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " than one login, they&#x27;ll see a &quot;multiple <em>accounts</em> found&quot; note when logging in. View and manage <em>users</em> in UI If your New Relic <em>account</em> has <em>users</em> on our <em>original</em> <em>user</em> model, you can use the <em>Users</em> and roles UI. To access this UI: select the <em>account</em> dropdown, select <em>Account</em> settings, and select <em>Users</em>"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    }
  ],
  "/docs/adduserattribute-python-agent-api": [
    {
      "sections": [
        "Update the Python agent",
        "Update with Python package index (PyPi)",
        "Tip",
        "Download package manually",
        "Python agent versions not supported",
        "Update unsupported agent versions",
        "Important"
      ],
      "title": "Update the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "c588f21742d1c26983012738479f7184343794ac",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/update-python-agent/",
      "published_at": "2021-06-09T05:39:42Z",
      "updated_at": "2021-05-28T03:18:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your Python agent to the latest version. For additional information about specific agent updates, refer to the Python agent release notes. Update with Python package index (PyPi) The Python agent package is listed on PyPi at http://pypi.python.org/pypi/newrelic. To update with a specific package, follow the corresponding instructions: Python package Installation procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you have New Relic in your requirements.txt file, you can do a mass update of all required packages by running: pip install -r requirements.txt Copy easy_install To update using easy_install, run: easy_install --upgrade newrelic Copy Tip We recommend using pip rather than using easy_install, because pip will correctly remove old versions when updating the agent software. buildout Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Download package manually To manually download the New Relic Python package: Remove the current New Relic package. Download the new package, then follow the Python agent installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the agent software. Python agent versions not supported End of life notification: As of January 26, 2015, we will no longer accept data from Python agent versions earlier than 2.42.0. These agent versions use an out-of-date protocol when communicating with our data collection services. In addition, many of these versions contain a potential security issue where they may incorrectly send sensitive data to our data collector. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 4.2.0.100 and higher Release notes: Python agent 4.2.0.100 Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Set with the Python agent config file. 4.0.0.99 Release notes: Python agent 4.0.0.99 Previously deprecated APIs removed: Transaction.add_user_attribute (use Transaction.add_custom_parameter) Transaction.add_user_attributes (use Transaction.add_custom_parameters) wrap_callable (use FunctionWrapper) Removed support for Python 2.6 and Python 3.3: Python 2.6 and Python 3.3 are no longer supported. Recommendation: Update your application to a supported version of Python in order to continue to receive updates to the Python agent. Python versions 2.6 and 3.3: These are supported only by Python agent versions 3.4.0.95 or lower. 3.0.0.89 Release notes: Python agent 3.0.0.89 Previously deprecated APIs removed: transaction (use current_transaction) name_transaction (use set_transaction_name) Application.record_metric (use Application.record_custom_metric) Application.record_metrics (use Application.record_custom_metrics) Transaction.record_metric (use Transaction.record_custom_metric) Transaction.name_transaction (use Transaction.set_transaction_name) Deprecated APIs: Transaction.add_user_attribute has been deprecated in favor of Transaction.add_custom_parameter. Transaction.add_user_attribute will be removed in a future release. Transaction.add_user_attributes has been deprecated in favor of Transaction.add_custom_parameters. Transaction.add_user_attributes will be removed in a future release. wrap_callable has been deprecated in favor of FunctionWrapper. wrap_callable will be removed in a future release. data-source admin command: The platform API (used by newrelic-admin data-source) has been removed. Please use data sources in place of the platform API. 2.104.0.86 Release notes: Python agent 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: Python agent 2.56.0.42 Deprecated config settings: Several configuration settings have been deprecated. The most commonly used of the deprecated settings are capture_params and ignored_params. To achieve the same functionality as the old settings, use the new attributes.include and attributes.exclude settings. 2.10.0.8 Release notes: Python agent 2.10.0.8 Deprecated API: Do not use the agent API function add_user_attribute(), which is now deprecated. Instead, use the add_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes agent configuration setting. At or below 2.0.0 Proxy settings: Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending on whether SSL is disabled or enabled. If you are updating from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the SSL setting for backwards compatibility. Proxies are usually only configured to accept proxy requests via the http protocol scheme. If you do not set proxy_scheme, this may result in a failure. 1.11.0.55 Release notes: Python agent 1.11.0.55 Thread profiling for WSGI servers: We have disabled the ability to get thread profiling information when a WSGI server uses coroutine libraries such as gevent or eventlet. This is because, due to the nature of how coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: Python agent 1.0.3.138 Attributes from WSGI requests: Attributes captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_AGENT now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 277.21658,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Python</em> <em>agent</em>",
        "sections": "Update the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> 2.10.0.8 Deprecated <em>API</em>: Do not use the <em>agent</em> <em>API</em> function <em>add_user_attribute</em>(), which is now deprecated. Instead, use the <em>add</em>_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes <em>agent</em> configuration setting"
      },
      "id": "6043ff58196a67822f960f94"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-06-09T07:47:35Z",
      "updated_at": "2021-06-03T16:54:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Tip Owner or Admins Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Enabling distributed tracing disables cross application tracing and has other effects on APM features. Before enabling, read the transition guide. Requires Python agent version 4.2.0.100 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default true Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.04047,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ", this disables automatic insertion of the JavaScript header&#x2F;footer for page load timing (sometimes referred to as real <em>user</em> monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the <em>Python</em> <em>agent</em>&#x27;s own"
      },
      "id": "604454a1e7b9d25e645799ff"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/python-release-notes/python-agent-21008/",
      "sections": [
        "Python agent v2.10.0.8",
        "Important",
        "Notes",
        "New Features:",
        "Features Changed:",
        "Bug fixes/Improvements:"
      ],
      "published_at": "2021-06-09T09:40:16Z",
      "title": "Python agent v2.10.0.8",
      "updated_at": "2021-03-11T01:03:25Z",
      "type": "docs",
      "external_id": "cff17f0ed339feac171a304dc5f05361981555c4",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "Important The end-of-life date for this agent version is July 29, 2019. To update to the latest agent version, see Update the agent. For more information, see End-of-life policy. Notes This release of the Python agent includes various improvements and bug fixes related to instrumentation for database client modules, as well as a notable fix to our 'newrelic-admin' script affecting some users who referenced Python virtual environments via a symbolic link. The agent can be installed using easy_install/pip/distribute via the Python Package Index or can be downloaded directly from our download site. For a list of known issues with the Python agent see our online help article on the status of the Python agent. New Features: Instrumentation of the WSGI application entry point will now add a new breakdown metric to web transactions corresponding to the finalization of the WSGI request. Within the workings of the interaction between the WSGI server and the WSGI application, this is the point at which the WSGI server will call any close() method on the iterable returned by the WSGI application. The name of this new breakdown metric is 'WSGI/Finalize'. In the case where there was actually a 'close()' method, a further breakdown metric will also appear corresponding to that method. Added support to instrumentation for MySQL and PostgreSQL database client modules for monitoring database queries when the database connection object is used as a context manager. Such context manager features are outside of the scope of the Python DBAPI2 (PEP 249) specification, not all database client modules support it and nor do they all work the same. Although supported, we would suggest consideration should be given to not using these context manager features if you need your code to be portable between databases. Added support to instrumentation for MySQL database client modules for monitoring database queries when the database connection object was created using the Connect() function. The Connect() function falls outside of the scope of the Python DBAPI2 (PEP 249) specification. Although supported, we would suggest consideration should be given to not using this Connect() function if you need your code to be portable between databases. Added database instrumentation support for the mysql-connector-python database client module. Custom parameters for a transaction which are a string or numeric value will now be added to and reported with analytic events reported to our analytics system code named Rubicon. This can be disabled using the agent configuration setting 'analytics_events.capture_attributes'. The capture of custom parameters against a transaction trace can now be disabled using the agent configuration setting 'transaction_tracer.capture_attributes'. The capture of custom parameters against error details can now be disabled using the agent configuration setting 'error_collector.capture_attributes'. Features Changed: The agent API function add_user_attribute() is now deprecated and functionality merged with the add_custom_parameter() function. The latter function should now be used instead. The display of such parameters in browser traces is now optionally enabled with the agent configuration setting 'browser_monitoring.capture_attributes'. Bug fixes/Improvements: If the 'newrelic' package was installed into a Python virtual environment, but the 'newrelic-admin' script was executed via a path that traversed a symlink to the virtual environment, the protections within the agent bootstrapping procedure was detecting that the agent was trying to be used with an application running against a different virtual environment when it was actually the same. This would result in the application not being monitored. This issue was introduced in version 2.8.0 of the agent when additional protections were added against mixing application/modules from different Python virtual environments. Explain plans were not being performed on SQL queries made via the executemany() method of a database cursor object. When explain plans are now done, the data inputs from the first row of input data for the executemany() call will be used. When using Python 2, if strings were supplied for the web transaction name, custom parameters, in error details etc, and that string contained a series of characters which could not be decoded as valid UTF-8, then an exception would occur. In the case of a web transaction name, this could result in the exception affecting the current web transaction and result in an error response being sent back to a user. For the case of a transaction trace or error details, the exception would prevent the sending of the captured data up to our data collector and it would be discarded. This was a regression within the agent behaviour introduced when Python 3 support was added to the agent. Fixed instrumentation for sqlite database modules which could result in instrumentation not being applied correctly, and so no database metrics collected, if the sqlite module had been imported prior to the agent being initialized. Limits being applied to the length of the SQL for a slow SQL query when being sent up to our data collector were being applied at the wrong time, resulting in the truncated SQL being used when performing an explain plan. This didn't affect the operation of the web application, but database logs could contain an error about the malformed SQL query. Explain plans could be attempted for an SQL query even where the SQL query failed. Under most circumstances a SQL query would fail immediately and so the duration would fall below the threshold for collecting an explain plan, but the changes now made will protect against a long running SQL query which failed in the database and ensure that no additional problem is caused by issuing an explain plan for it. If a monitored web application is started up using our newrelic-admin wrapper script, and it executes a separate Python script and that Python script used a Python version older than Python 2.6, the script could output the error message \"'import site' failed; use -v for traceback\". The execution of the script was not affected, but the message obviously could cause concern. The equivalent functions from the 'urllib2' module from Python 2 were not being instrumented when Python 3 was being used. This was missed when Python 3 support was added to the agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.46588,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> v2.10.0.8",
        "sections": "<em>Python</em> <em>agent</em> v2.10.0.8",
        "body": " be disabled using the <em>agent</em> configuration setting &#x27;transaction_tracer.capture_attributes&#x27;. The capture of custom parameters against error details can now be disabled using the <em>agent</em> configuration setting &#x27;error_collector.capture_attributes&#x27;. Features Changed: The <em>agent</em> <em>API</em> function <em>add_user_attribute</em>"
      },
      "id": "6044f45e196a671e94960f2f"
    }
  ],
  "/docs/agents/c-sdk/get-started/apm-security-c-sdk": [
    {
      "sections": [
        "C SDK compatibility and requirements",
        "Language versions",
        "Operating environments",
        "License key",
        "Processor type",
        "Security requirements",
        "Database and instance-level performance"
      ],
      "title": " C SDK compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Get started"
      ],
      "external_id": "392f9c149f762eb3d6bed020199c0dd6e3985a59",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/get-started/c-sdk-compatibility-requirements/",
      "published_at": "2021-06-09T01:24:07Z",
      "updated_at": "2021-03-16T14:45:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's C SDK provides a generic library you can customize to communicate with New Relic. Before you install New Relic's C SDK, make sure your system meets these requirements. Also refer to the C SDK licenses documentation. Language versions The C SDK allows you to instrument any application on Linux, provided: You must have access to the source code. The target language must be able to import C libraries. You can use the C SDK to create instrumentation for applications written in C and C++. You can also use it in languages like Perl, which are implemented in C or C++, and in any language that has a foreign function interface with C. Operating environments The C SDK works in 64-bit Linux operating systems with: gcc 4.8 or higher glibc 2.17 or higher Kernel version 2.6.26 or higher libpcre 8.20 or higher libpthread cmake 2.8 or higher Compiling the New Relic daemon requires Go 1.7 or higher. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Database and instance-level performance You can collect instance details for a variety of databases and database drivers. You can also view slow query trace details for the following SQL-based database platforms: Firebird Informix Microsoft SQL Server MySQL Oracle Postgres SQLite Sybase",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.38336,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": " <em>C</em> <em>SDK</em> <em>compatibility</em> and requirements",
        "sections": "<em>C</em> <em>SDK</em> <em>compatibility</em> and requirements",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "New Relic&#x27;s <em>C</em> <em>SDK</em> provides a generic library you can customize to communicate with New Relic. Before you install New Relic&#x27;s <em>C</em> <em>SDK</em>, make sure your system meets these requirements. Also refer to the <em>C</em> <em>SDK</em> licenses documentation. Language versions The <em>C</em> <em>SDK</em> allows you to instrument any application"
      },
      "id": "603e83e2e7b9d228112a07e4"
    },
    {
      "sections": [
        "Introduction to the C SDK",
        "Tip",
        "Monitor app performance",
        "Architecture: C library and daemon",
        "Get started with the C SDK",
        "Check the source code"
      ],
      "title": "Introduction to the C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Get started"
      ],
      "external_id": "2d78c020e6e048a9e2fca7eb1f27e0041f8a5112",
      "image": "https://docs.newrelic.com/static/5e14d39d4bf4ef8132f32a5beb5b8970/8c557/c-sdk-daemon-architecture0430.png",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/get-started/introduction-c-sdk/",
      "published_at": "2021-06-09T01:25:09Z",
      "updated_at": "2021-03-13T03:55:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The C SDK is designed to support the often complex, multi-threaded nature of C/C++ applications. You can gain a new level of visibility to help you identify and solve performance issues. You can also collect and analyze data to help you improve the customer experience and make data-driven business decisions. The C SDK can be used to instrument a wide range of applications beyond C or C++. If your application does not use other languages supported by New Relic and can import C libraries, then you can use the New Relic C SDK to take advantage of our monitoring capabilities and features. Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Monitor app performance one.newrelic.com > APM > (select an app): Here is an example of some of the data you can view in New Relic after you deploy the C SDK for your app. If your app meets the C SDK's compatibility and requirements in Linux environments, you can customize the generic library to communicate with New Relic, then start with APM to monitor your app's performance. What you can do How to do it See the big picture Start with the APM Summary page to monitor the throughput, response times, errors, memory and CPU usage transactions in your applications and services, then explore other details with additional APM dashboards. With deployment markers, see how code changes impact application performance and health. Use infrastructure monitoring to view detailed host and server data. When you install the infrastructure agent and APM on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by app in the Infrastructure UI. Identify and fix errors Use error analytics tools to find bottlenecks by seeing time spent on database calls, external system calls, and key blocks of code. Get alert notifications for problems or errors before they affect users. Create custom dashboards for important metrics. Analyze business data Query user-related data and improve business processes. Send your own custom data to New Relic. Create custom queries of your application data. Create and share visual, interactive displays of your data. And more! Monitor and troubleshoot your application users' desktop experience with your application, including page load timing problems, JavaScript errors, session trace timelines, etc., by using browser monitoring. Use automated, scriptable tools to monitor your websites, critical business transactions, and API endpoints with synthetic monitoring. Analyze and fine-tune your Android and iOS application performance, troubleshoot crashes, compare multiple versions, and examine the performance of HTTP and other network components with mobile monitoring. Architecture: C library and daemon The C SDK relies on two components to send data from your application to New Relic: The lC SDK calls: You download this library, then add the calls and instrumentation to your application's code. This allows you to identify and customize the kinds of data that matters the most to you. The C SDK daemon: This is a separate binary that accumulates data from the C SDK calls, and sends it to New Relic. This acts as a proxy between the SDK and New Relic. C SDK architecture: To send data from your application to New Relic, the daemon must be invoked before making calls to your application's C SDK instrumentation library. Working together, the C SDK instrumentation and the daemon forward data on to New Relic where you can view and query data about transactions. The workflow between your application and New Relic must occur in this order: An HTTPS link is established between the daemon and New Relic. The daemon must be invoked first, before your instrumented application is invoked. Next, socket communication is established between your instrumented application and the daemon. This occurs after successful calls to newrelic_new_app_config() and newrelic_create_app(). The call to newrelic_create_app() is non-blocking. Its second parameter allows you to specify an amount of time for your instrumented application to wait so that the socket communication is adequately established. For example: newrelic_app_t* app = newrelic_create_app(config, 10000); Copy If your instrumented application sends transactions before both the daemon connection and your application's socket communication are established, data reported from your application will be lost. Get started with the C SDK To use our C SDK agent: Make sure your application meets the compatibility and requirements for the C SDK. If you do not already have one, sign up for a free New Relic account. Use our launcher, or follow the installation and instrumentation procedures to install the agent. Within a few minutes, you will be able to view data from your application in your New Relic account's UI. Read the install docs Add C data Check the source code The C SDK is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.906494,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to the <em>C</em> <em>SDK</em>",
        "sections": "<em>Get</em> <em>started</em> with the <em>C</em> <em>SDK</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": " connection and your application&#x27;s socket communication are established, data reported from your application will be lost. <em>Get</em> <em>started</em> with the <em>C</em> <em>SDK</em> To use our <em>C</em> <em>SDK</em> <em>agent</em>: Make sure your application meets the compatibility and requirements for the <em>C</em> <em>SDK</em>. If you do not already have one, sign up for a free"
      },
      "id": "6043f78fe7b9d2ae4e5799fc"
    },
    {
      "sections": [
        "APM agent data security",
        "Disclosure and audit",
        "Data collection",
        "Security settings",
        "Default security settings",
        "High security mode",
        "Custom security settings",
        "Data received by New Relic",
        "Important",
        "TLS and SSL",
        "Data transmission",
        "Proxies"
      ],
      "title": "APM agent data security",
      "type": "docs",
      "tags": [
        "APM",
        "New Relic APM",
        "Getting started"
      ],
      "external_id": "13a81c4a9a04e42bd4493768be3bfc42f769e1e5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/getting-started/apm-agent-data-security/",
      "published_at": "2021-06-09T04:16:57Z",
      "updated_at": "2021-05-05T01:45:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM agent that you installed receives data from your applications. The default data retention is based on your pricing edition. New Relic's default security settings automatically work to ensure data privacy and to limit the kind of information New Relic receives. You can also change these settings. Disclosure and audit Our APM agent is a publicly accessible plugin for web applications. The agent does not do any dynamic code generation while communicating with your app, so using the agent will not introduce any code into your application without your knowledge. Most of our agents are open source, so you can see what our code does: C SDK Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the agent receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the agent, indicating if the data was correctly received or if there was an error. New Relic collects the following aggregate metric data: Database activity External web service calls Controller and dispatch activity View activity Uncaught exceptions and counts Process memory and CPU usage This aggregate metric data summarizes calls to specific methods in your application: how many times each one was called and various response time statistics (average, minimum, maximum, and standard deviation). In New Relic, you will see the class and method names along with their aggregate numbers. New Relic optionally collects: Data collection Comments Uncaught errors New Relic captures the error as well as a runtime stack trace of the offending code. Transaction traces These are snapshots of a single transaction. As an option, the agent can also collect the query statements called within the transaction. The default collection uses obfuscation to hide any strings or numbers from the query. For transactions slower than a threshold you set, New Relic also collects data from SQL EXPLAIN. For database calls slower than a configured threshold, New Relic optionally collects runtime stack traces, which are helpful to pinpoint where in the code a database call is made. Custom parameters You can add custom parameters to your application code and record them with transaction traces to provide additional context while you are examining profiling information. Optional: For both errors and transaction traces, the HTTP request parameters can also be recorded. Security settings If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. Default security settings Depending on the agent, the default settings provide security for request parameters, HTTPS usage, and SQL: C SDK default security settings Go default security settings Java default security settings .NET default security settings Node.js default security settings PHP default security settings Python default security settings Ruby default security settings High security mode When the agent is in high security mode, default settings are locked so that users cannot change them. In addition, high security mode applies restrictions to custom events, custom instrumentation, user attributes, exception messages, or message queue parameters, depending on the agent: C SDK: n/a Go high security mode settings Java high security mode settings .NET high security mode settings Node.js high security mode settings PHP high security mode settings Python high security mode settings Ruby high security mode settings Custom security settings If you want custom security settings, you can customize the configuration file, change custom attribute settings, or use the API, depending on your agent: C SDK custom security settings Go custom security settings Java custom security settings .NET custom security mode settings Node.js custom security settings PHP custom security settings Python custom security settings Ruby custom security settings Data received by New Relic This information applies to all APM agents no matter what security settings you have applied. Important Other data that New Relic receives is specific to the security settings for each agent. Data Captured? APM agent language version OS type and version System properties Average response time of transactions in your app URL hits Client IP address Not captured TLS and SSL Our preferred protocol for all domains is TLS 1.2. APM agents enable SSL by default. To verify which release includes SSL by default and to ensure that you have the most up-to-date version, refer to your agent's release notes: C SDK Go Java .NET Node.js PHP Python Ruby The configuration file also includes an optional flag (ssl) to enable or disable SSL using HTTPS. New Relic does not do host authentication with HTTPS, just communication encryption. Exception: You cannot disable SSL for the C SDK. The C SDK daemon can only connect with SSL. New Relic requires HTTPS for all traffic to APM and the REST API. This includes both inbound and outbound traffic. If your REST API call uses HTTP, or if you have disabled SSL in your configuration file, change your script or program to HTTPS. Data transmission Under Java, .NET and PHP, New Relic uses JSON to serialize data. The Ruby agent uses either Ruby marshaling or JSON serialization to send data to New Relic, depending on whether a native JSON encoder is available in under the Ruby version the agent is running on. For required changes when you want to create firewall rules to allow the agent to communicate, see Networks. For more information about security measures for your data in transit to New Relic or at rest in our storage, see Data encryption. Proxies Optional settings are available so that you can configure the agent to communicate through a proxy. To define proxy settings for host, port, domain, user, or password, refer to your agent's configuration file documentation: Agent Proxy settings C SDK -proxy at daemon startup Go transport Java Use proxy settings, including: proxy_host proxy_password proxy_port proxy_user .NET proxy element Node.js proxy PHP newrelic.daemon.proxy or the daemon's proxy setting Python proxy settings Ruby Use proxy settings, including: proxy_host proxy_port proxy_user proxy_pass",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.29678,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> data security",
        "sections": "APM <em>agent</em> data security",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " source, so you can see what our code does: <em>C</em> <em>SDK</em> Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the <em>agent</em> receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the <em>agent</em>, indicating if the data"
      },
      "id": "6043ffe7196a67cdd1960f67"
    }
  ],
  "/docs/agents/c-sdk/get-started/c-sdk-compatibility-requirements": [
    {
      "sections": [
        "APM security: C SDK",
        "Default security settings",
        "Tip",
        "Customize security settings",
        "Caution"
      ],
      "title": "APM security: C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Get started"
      ],
      "external_id": "37fa2254b01e742ac8c0488efaff485b57411358",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/get-started/apm-security-c-sdk/",
      "published_at": "2021-06-09T01:24:05Z",
      "updated_at": "2021-03-16T14:49:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Due of the nature of the C SDK, you have direct control over what data is reported to New Relic. To ensure data privacy and to limit the types of information New Relic receives, no customer data is captured except what you supply in your API calls. In addition, the C SDK reports all data to New Relic over HTTPS. For more information about our security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, this is how the C SDK handles the following potentially sensitive data. For more information, including code values and examples, see the C SDK documentation about data structures on GitHub. Type of information C SDK data security Datastore instance name or database name The newrelic_datastore_segment_config_t is a struct that configures whether a datastore's instance name and table name are captured for datastore segment instrumentation. Instance names: By default, the configuration returned by newrelic_new_config() enables datastore segments with instance_reporting set to true. Database names: By default, the configuration returned by newrelic_new_config() enables datastore segments with database_name_reporting set to true. SQL The record_sql setting in the newrelic_transaction_tracer_config_t controls the SQL format in transaction traces for supported SQL-like products. The default setting, NEWRELIC_SQL_OBFUSCATED, sets alphanumeric characters to ?. Audit mode The audit log is a plain text logging of all data sent to New Relic by the C SDK. When starting the C SDK daemon, add -auditlog <file> to the daemon configuration file. For example: ./newrelic-daemon -f -logfile stdout -loglevel debug -auditlog audit.log Copy Tip To see all of the available options for the C daemon: At the command line, type: ./newrelic-daemon --help Copy Customize security settings If the default settings do not work for your business needs, you can customize how information is sent to New Relic by altering the newrelic_datastore_segment_config_t and the newrelic_transaction_tracer_config_t. Caution If you customize your configuration, it may impact the security of your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.38376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM security: <em>C</em> <em>SDK</em>",
        "sections": "APM security: <em>C</em> <em>SDK</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "Due of the nature of the <em>C</em> <em>SDK</em>, you have direct control over what data is reported to New Relic. To ensure data privacy and to limit the types of information New Relic receives, no customer data is captured except what you supply in your API calls. In addition, the <em>C</em> <em>SDK</em> reports all data to New"
      },
      "id": "603e881564441f04f14e8854"
    },
    {
      "sections": [
        "Introduction to the C SDK",
        "Tip",
        "Monitor app performance",
        "Architecture: C library and daemon",
        "Get started with the C SDK",
        "Check the source code"
      ],
      "title": "Introduction to the C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Get started"
      ],
      "external_id": "2d78c020e6e048a9e2fca7eb1f27e0041f8a5112",
      "image": "https://docs.newrelic.com/static/5e14d39d4bf4ef8132f32a5beb5b8970/8c557/c-sdk-daemon-architecture0430.png",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/get-started/introduction-c-sdk/",
      "published_at": "2021-06-09T01:25:09Z",
      "updated_at": "2021-03-13T03:55:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The C SDK is designed to support the often complex, multi-threaded nature of C/C++ applications. You can gain a new level of visibility to help you identify and solve performance issues. You can also collect and analyze data to help you improve the customer experience and make data-driven business decisions. The C SDK can be used to instrument a wide range of applications beyond C or C++. If your application does not use other languages supported by New Relic and can import C libraries, then you can use the New Relic C SDK to take advantage of our monitoring capabilities and features. Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Monitor app performance one.newrelic.com > APM > (select an app): Here is an example of some of the data you can view in New Relic after you deploy the C SDK for your app. If your app meets the C SDK's compatibility and requirements in Linux environments, you can customize the generic library to communicate with New Relic, then start with APM to monitor your app's performance. What you can do How to do it See the big picture Start with the APM Summary page to monitor the throughput, response times, errors, memory and CPU usage transactions in your applications and services, then explore other details with additional APM dashboards. With deployment markers, see how code changes impact application performance and health. Use infrastructure monitoring to view detailed host and server data. When you install the infrastructure agent and APM on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by app in the Infrastructure UI. Identify and fix errors Use error analytics tools to find bottlenecks by seeing time spent on database calls, external system calls, and key blocks of code. Get alert notifications for problems or errors before they affect users. Create custom dashboards for important metrics. Analyze business data Query user-related data and improve business processes. Send your own custom data to New Relic. Create custom queries of your application data. Create and share visual, interactive displays of your data. And more! Monitor and troubleshoot your application users' desktop experience with your application, including page load timing problems, JavaScript errors, session trace timelines, etc., by using browser monitoring. Use automated, scriptable tools to monitor your websites, critical business transactions, and API endpoints with synthetic monitoring. Analyze and fine-tune your Android and iOS application performance, troubleshoot crashes, compare multiple versions, and examine the performance of HTTP and other network components with mobile monitoring. Architecture: C library and daemon The C SDK relies on two components to send data from your application to New Relic: The lC SDK calls: You download this library, then add the calls and instrumentation to your application's code. This allows you to identify and customize the kinds of data that matters the most to you. The C SDK daemon: This is a separate binary that accumulates data from the C SDK calls, and sends it to New Relic. This acts as a proxy between the SDK and New Relic. C SDK architecture: To send data from your application to New Relic, the daemon must be invoked before making calls to your application's C SDK instrumentation library. Working together, the C SDK instrumentation and the daemon forward data on to New Relic where you can view and query data about transactions. The workflow between your application and New Relic must occur in this order: An HTTPS link is established between the daemon and New Relic. The daemon must be invoked first, before your instrumented application is invoked. Next, socket communication is established between your instrumented application and the daemon. This occurs after successful calls to newrelic_new_app_config() and newrelic_create_app(). The call to newrelic_create_app() is non-blocking. Its second parameter allows you to specify an amount of time for your instrumented application to wait so that the socket communication is adequately established. For example: newrelic_app_t* app = newrelic_create_app(config, 10000); Copy If your instrumented application sends transactions before both the daemon connection and your application's socket communication are established, data reported from your application will be lost. Get started with the C SDK To use our C SDK agent: Make sure your application meets the compatibility and requirements for the C SDK. If you do not already have one, sign up for a free New Relic account. Use our launcher, or follow the installation and instrumentation procedures to install the agent. Within a few minutes, you will be able to view data from your application in your New Relic account's UI. Read the install docs Add C data Check the source code The C SDK is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.906494,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to the <em>C</em> <em>SDK</em>",
        "sections": "<em>Get</em> <em>started</em> with the <em>C</em> <em>SDK</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": " connection and your application&#x27;s socket communication are established, data reported from your application will be lost. <em>Get</em> <em>started</em> with the <em>C</em> <em>SDK</em> To use our <em>C</em> <em>SDK</em> <em>agent</em>: Make sure your application meets the compatibility and requirements for the <em>C</em> <em>SDK</em>. If you do not already have one, sign up for a free"
      },
      "id": "6043f78fe7b9d2ae4e5799fc"
    },
    {
      "sections": [
        "APM agent data security",
        "Disclosure and audit",
        "Data collection",
        "Security settings",
        "Default security settings",
        "High security mode",
        "Custom security settings",
        "Data received by New Relic",
        "Important",
        "TLS and SSL",
        "Data transmission",
        "Proxies"
      ],
      "title": "APM agent data security",
      "type": "docs",
      "tags": [
        "APM",
        "New Relic APM",
        "Getting started"
      ],
      "external_id": "13a81c4a9a04e42bd4493768be3bfc42f769e1e5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/getting-started/apm-agent-data-security/",
      "published_at": "2021-06-09T04:16:57Z",
      "updated_at": "2021-05-05T01:45:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM agent that you installed receives data from your applications. The default data retention is based on your pricing edition. New Relic's default security settings automatically work to ensure data privacy and to limit the kind of information New Relic receives. You can also change these settings. Disclosure and audit Our APM agent is a publicly accessible plugin for web applications. The agent does not do any dynamic code generation while communicating with your app, so using the agent will not introduce any code into your application without your knowledge. Most of our agents are open source, so you can see what our code does: C SDK Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the agent receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the agent, indicating if the data was correctly received or if there was an error. New Relic collects the following aggregate metric data: Database activity External web service calls Controller and dispatch activity View activity Uncaught exceptions and counts Process memory and CPU usage This aggregate metric data summarizes calls to specific methods in your application: how many times each one was called and various response time statistics (average, minimum, maximum, and standard deviation). In New Relic, you will see the class and method names along with their aggregate numbers. New Relic optionally collects: Data collection Comments Uncaught errors New Relic captures the error as well as a runtime stack trace of the offending code. Transaction traces These are snapshots of a single transaction. As an option, the agent can also collect the query statements called within the transaction. The default collection uses obfuscation to hide any strings or numbers from the query. For transactions slower than a threshold you set, New Relic also collects data from SQL EXPLAIN. For database calls slower than a configured threshold, New Relic optionally collects runtime stack traces, which are helpful to pinpoint where in the code a database call is made. Custom parameters You can add custom parameters to your application code and record them with transaction traces to provide additional context while you are examining profiling information. Optional: For both errors and transaction traces, the HTTP request parameters can also be recorded. Security settings If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. Default security settings Depending on the agent, the default settings provide security for request parameters, HTTPS usage, and SQL: C SDK default security settings Go default security settings Java default security settings .NET default security settings Node.js default security settings PHP default security settings Python default security settings Ruby default security settings High security mode When the agent is in high security mode, default settings are locked so that users cannot change them. In addition, high security mode applies restrictions to custom events, custom instrumentation, user attributes, exception messages, or message queue parameters, depending on the agent: C SDK: n/a Go high security mode settings Java high security mode settings .NET high security mode settings Node.js high security mode settings PHP high security mode settings Python high security mode settings Ruby high security mode settings Custom security settings If you want custom security settings, you can customize the configuration file, change custom attribute settings, or use the API, depending on your agent: C SDK custom security settings Go custom security settings Java custom security settings .NET custom security mode settings Node.js custom security settings PHP custom security settings Python custom security settings Ruby custom security settings Data received by New Relic This information applies to all APM agents no matter what security settings you have applied. Important Other data that New Relic receives is specific to the security settings for each agent. Data Captured? APM agent language version OS type and version System properties Average response time of transactions in your app URL hits Client IP address Not captured TLS and SSL Our preferred protocol for all domains is TLS 1.2. APM agents enable SSL by default. To verify which release includes SSL by default and to ensure that you have the most up-to-date version, refer to your agent's release notes: C SDK Go Java .NET Node.js PHP Python Ruby The configuration file also includes an optional flag (ssl) to enable or disable SSL using HTTPS. New Relic does not do host authentication with HTTPS, just communication encryption. Exception: You cannot disable SSL for the C SDK. The C SDK daemon can only connect with SSL. New Relic requires HTTPS for all traffic to APM and the REST API. This includes both inbound and outbound traffic. If your REST API call uses HTTP, or if you have disabled SSL in your configuration file, change your script or program to HTTPS. Data transmission Under Java, .NET and PHP, New Relic uses JSON to serialize data. The Ruby agent uses either Ruby marshaling or JSON serialization to send data to New Relic, depending on whether a native JSON encoder is available in under the Ruby version the agent is running on. For required changes when you want to create firewall rules to allow the agent to communicate, see Networks. For more information about security measures for your data in transit to New Relic or at rest in our storage, see Data encryption. Proxies Optional settings are available so that you can configure the agent to communicate through a proxy. To define proxy settings for host, port, domain, user, or password, refer to your agent's configuration file documentation: Agent Proxy settings C SDK -proxy at daemon startup Go transport Java Use proxy settings, including: proxy_host proxy_password proxy_port proxy_user .NET proxy element Node.js proxy PHP newrelic.daemon.proxy or the daemon's proxy setting Python proxy settings Ruby Use proxy settings, including: proxy_host proxy_port proxy_user proxy_pass",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.29678,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> data security",
        "sections": "APM <em>agent</em> data security",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " source, so you can see what our code does: <em>C</em> <em>SDK</em> Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the <em>agent</em> receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the <em>agent</em>, indicating if the data"
      },
      "id": "6043ffe7196a67cdd1960f67"
    }
  ],
  "/docs/agents/c-sdk/get-started/introduction-c-sdk": [
    {
      "sections": [
        "APM security: C SDK",
        "Default security settings",
        "Tip",
        "Customize security settings",
        "Caution"
      ],
      "title": "APM security: C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Get started"
      ],
      "external_id": "37fa2254b01e742ac8c0488efaff485b57411358",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/get-started/apm-security-c-sdk/",
      "published_at": "2021-06-09T01:24:05Z",
      "updated_at": "2021-03-16T14:49:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Due of the nature of the C SDK, you have direct control over what data is reported to New Relic. To ensure data privacy and to limit the types of information New Relic receives, no customer data is captured except what you supply in your API calls. In addition, the C SDK reports all data to New Relic over HTTPS. For more information about our security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, this is how the C SDK handles the following potentially sensitive data. For more information, including code values and examples, see the C SDK documentation about data structures on GitHub. Type of information C SDK data security Datastore instance name or database name The newrelic_datastore_segment_config_t is a struct that configures whether a datastore's instance name and table name are captured for datastore segment instrumentation. Instance names: By default, the configuration returned by newrelic_new_config() enables datastore segments with instance_reporting set to true. Database names: By default, the configuration returned by newrelic_new_config() enables datastore segments with database_name_reporting set to true. SQL The record_sql setting in the newrelic_transaction_tracer_config_t controls the SQL format in transaction traces for supported SQL-like products. The default setting, NEWRELIC_SQL_OBFUSCATED, sets alphanumeric characters to ?. Audit mode The audit log is a plain text logging of all data sent to New Relic by the C SDK. When starting the C SDK daemon, add -auditlog <file> to the daemon configuration file. For example: ./newrelic-daemon -f -logfile stdout -loglevel debug -auditlog audit.log Copy Tip To see all of the available options for the C daemon: At the command line, type: ./newrelic-daemon --help Copy Customize security settings If the default settings do not work for your business needs, you can customize how information is sent to New Relic by altering the newrelic_datastore_segment_config_t and the newrelic_transaction_tracer_config_t. Caution If you customize your configuration, it may impact the security of your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.38376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM security: <em>C</em> <em>SDK</em>",
        "sections": "APM security: <em>C</em> <em>SDK</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "Due of the nature of the <em>C</em> <em>SDK</em>, you have direct control over what data is reported to New Relic. To ensure data privacy and to limit the types of information New Relic receives, no customer data is captured except what you supply in your API calls. In addition, the <em>C</em> <em>SDK</em> reports all data to New"
      },
      "id": "603e881564441f04f14e8854"
    },
    {
      "sections": [
        "C SDK compatibility and requirements",
        "Language versions",
        "Operating environments",
        "License key",
        "Processor type",
        "Security requirements",
        "Database and instance-level performance"
      ],
      "title": " C SDK compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Get started"
      ],
      "external_id": "392f9c149f762eb3d6bed020199c0dd6e3985a59",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/get-started/c-sdk-compatibility-requirements/",
      "published_at": "2021-06-09T01:24:07Z",
      "updated_at": "2021-03-16T14:45:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's C SDK provides a generic library you can customize to communicate with New Relic. Before you install New Relic's C SDK, make sure your system meets these requirements. Also refer to the C SDK licenses documentation. Language versions The C SDK allows you to instrument any application on Linux, provided: You must have access to the source code. The target language must be able to import C libraries. You can use the C SDK to create instrumentation for applications written in C and C++. You can also use it in languages like Perl, which are implemented in C or C++, and in any language that has a foreign function interface with C. Operating environments The C SDK works in 64-bit Linux operating systems with: gcc 4.8 or higher glibc 2.17 or higher Kernel version 2.6.26 or higher libpcre 8.20 or higher libpthread cmake 2.8 or higher Compiling the New Relic daemon requires Go 1.7 or higher. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Database and instance-level performance You can collect instance details for a variety of databases and database drivers. You can also view slow query trace details for the following SQL-based database platforms: Firebird Informix Microsoft SQL Server MySQL Oracle Postgres SQLite Sybase",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.38336,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": " <em>C</em> <em>SDK</em> <em>compatibility</em> and requirements",
        "sections": "<em>C</em> <em>SDK</em> <em>compatibility</em> and requirements",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "New Relic&#x27;s <em>C</em> <em>SDK</em> provides a generic library you can customize to communicate with New Relic. Before you install New Relic&#x27;s <em>C</em> <em>SDK</em>, make sure your system meets these requirements. Also refer to the <em>C</em> <em>SDK</em> licenses documentation. Language versions The <em>C</em> <em>SDK</em> allows you to instrument any application"
      },
      "id": "603e83e2e7b9d228112a07e4"
    },
    {
      "sections": [
        "APM agent data security",
        "Disclosure and audit",
        "Data collection",
        "Security settings",
        "Default security settings",
        "High security mode",
        "Custom security settings",
        "Data received by New Relic",
        "Important",
        "TLS and SSL",
        "Data transmission",
        "Proxies"
      ],
      "title": "APM agent data security",
      "type": "docs",
      "tags": [
        "APM",
        "New Relic APM",
        "Getting started"
      ],
      "external_id": "13a81c4a9a04e42bd4493768be3bfc42f769e1e5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/getting-started/apm-agent-data-security/",
      "published_at": "2021-06-09T04:16:57Z",
      "updated_at": "2021-05-05T01:45:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM agent that you installed receives data from your applications. The default data retention is based on your pricing edition. New Relic's default security settings automatically work to ensure data privacy and to limit the kind of information New Relic receives. You can also change these settings. Disclosure and audit Our APM agent is a publicly accessible plugin for web applications. The agent does not do any dynamic code generation while communicating with your app, so using the agent will not introduce any code into your application without your knowledge. Most of our agents are open source, so you can see what our code does: C SDK Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the agent receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the agent, indicating if the data was correctly received or if there was an error. New Relic collects the following aggregate metric data: Database activity External web service calls Controller and dispatch activity View activity Uncaught exceptions and counts Process memory and CPU usage This aggregate metric data summarizes calls to specific methods in your application: how many times each one was called and various response time statistics (average, minimum, maximum, and standard deviation). In New Relic, you will see the class and method names along with their aggregate numbers. New Relic optionally collects: Data collection Comments Uncaught errors New Relic captures the error as well as a runtime stack trace of the offending code. Transaction traces These are snapshots of a single transaction. As an option, the agent can also collect the query statements called within the transaction. The default collection uses obfuscation to hide any strings or numbers from the query. For transactions slower than a threshold you set, New Relic also collects data from SQL EXPLAIN. For database calls slower than a configured threshold, New Relic optionally collects runtime stack traces, which are helpful to pinpoint where in the code a database call is made. Custom parameters You can add custom parameters to your application code and record them with transaction traces to provide additional context while you are examining profiling information. Optional: For both errors and transaction traces, the HTTP request parameters can also be recorded. Security settings If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. Default security settings Depending on the agent, the default settings provide security for request parameters, HTTPS usage, and SQL: C SDK default security settings Go default security settings Java default security settings .NET default security settings Node.js default security settings PHP default security settings Python default security settings Ruby default security settings High security mode When the agent is in high security mode, default settings are locked so that users cannot change them. In addition, high security mode applies restrictions to custom events, custom instrumentation, user attributes, exception messages, or message queue parameters, depending on the agent: C SDK: n/a Go high security mode settings Java high security mode settings .NET high security mode settings Node.js high security mode settings PHP high security mode settings Python high security mode settings Ruby high security mode settings Custom security settings If you want custom security settings, you can customize the configuration file, change custom attribute settings, or use the API, depending on your agent: C SDK custom security settings Go custom security settings Java custom security settings .NET custom security mode settings Node.js custom security settings PHP custom security settings Python custom security settings Ruby custom security settings Data received by New Relic This information applies to all APM agents no matter what security settings you have applied. Important Other data that New Relic receives is specific to the security settings for each agent. Data Captured? APM agent language version OS type and version System properties Average response time of transactions in your app URL hits Client IP address Not captured TLS and SSL Our preferred protocol for all domains is TLS 1.2. APM agents enable SSL by default. To verify which release includes SSL by default and to ensure that you have the most up-to-date version, refer to your agent's release notes: C SDK Go Java .NET Node.js PHP Python Ruby The configuration file also includes an optional flag (ssl) to enable or disable SSL using HTTPS. New Relic does not do host authentication with HTTPS, just communication encryption. Exception: You cannot disable SSL for the C SDK. The C SDK daemon can only connect with SSL. New Relic requires HTTPS for all traffic to APM and the REST API. This includes both inbound and outbound traffic. If your REST API call uses HTTP, or if you have disabled SSL in your configuration file, change your script or program to HTTPS. Data transmission Under Java, .NET and PHP, New Relic uses JSON to serialize data. The Ruby agent uses either Ruby marshaling or JSON serialization to send data to New Relic, depending on whether a native JSON encoder is available in under the Ruby version the agent is running on. For required changes when you want to create firewall rules to allow the agent to communicate, see Networks. For more information about security measures for your data in transit to New Relic or at rest in our storage, see Data encryption. Proxies Optional settings are available so that you can configure the agent to communicate through a proxy. To define proxy settings for host, port, domain, user, or password, refer to your agent's configuration file documentation: Agent Proxy settings C SDK -proxy at daemon startup Go transport Java Use proxy settings, including: proxy_host proxy_password proxy_port proxy_user .NET proxy element Node.js proxy PHP newrelic.daemon.proxy or the daemon's proxy setting Python proxy settings Ruby Use proxy settings, including: proxy_host proxy_port proxy_user proxy_pass",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.296776,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> data security",
        "sections": "APM <em>agent</em> data security",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " source, so you can see what our code does: <em>C</em> <em>SDK</em> Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the <em>agent</em> receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the <em>agent</em>, indicating if the data"
      },
      "id": "6043ffe7196a67cdd1960f67"
    }
  ],
  "/docs/agents/c-sdk/index": [
    {
      "sections": [
        "Generate logs for troubleshooting (C SDK)",
        "Problem",
        "Solution",
        "Caution",
        "C SDK logs",
        "Daemon logs"
      ],
      "title": "Generate logs for troubleshooting (C SDK)",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Troubleshooting"
      ],
      "external_id": "10921dbb38eaaebe2d9f1595402a82d2f3503841",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/troubleshooting/generate-logs-troubleshooting-c-sdk/",
      "published_at": "2021-06-08T17:55:26Z",
      "updated_at": "2021-03-16T13:45:08Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You encounter problems sending data to New Relic with an application instrumented with the C SDK, but you are not sure what the cause is. Solution The New Relic C SDK and its daemon have their own logs: C SDK logs: These logs are generated due to errors in how you've instrumented your code using the New Relic C SDK API calls. Daemon logs: These are logs related to transmission of data to New Relic. To help troubleshoot an issue, we recommend generating logs at their highest level: Set the C SDK log to verbose level and the daemon log to debug level. Run both logs for 5-10 minutes. After generating logs for troubleshooting, return logging for both the C SDK and daemon to their default levels. Caution Elevated logging levels can create large log files and have a performance impact. Generate logs at this level only as long as necessary for troubleshooting. C SDK logs The C SDK has four log levels, as defined by the enum _newrelic_loglevel_t in libnewrelic.h. By default, logs are set to NEWRELIC_LOG_INFO and output to standard error. Log levels include: NEWRELIC_LOG_ERROR NEWRELIC_LOG_WARNING NEWRELIC_LOG_INFO (default) NEWRELIC_LOG_DEBUG Copy To set a different log level for troubleshooting purposes: Call newrelic_configure_log() in your application code, and set a log level. For example: newrelic_configure_log(\"./c_sdk.log\", NEWRELIC_LOG_INFO); Copy Daemon logs The C SDK daemon has four log levels. By default, logs are set to info and output to standard error. Log levels include: error warning info (default) debug Copy These log levels are invoked using flags from the command line: --logfile <DAEMON_FILE_NAME>. Sets the path to the log file. --loglevel <LOG_LEVEL>. Sets the log level. Default: info. Copy To set a different log level for troubleshooting purposes: From the command line, set a different log level flag. For example: ./newrelic-daemon -f -logfile stdout -loglevel debug Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.01994,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate logs for troubleshooting (<em>C</em> <em>SDK</em>)",
        "sections": "Generate logs for troubleshooting (<em>C</em> <em>SDK</em>)",
        "tags": "<em>Agents</em>",
        "body": "Problem You encounter problems sending data to New Relic with an application instrumented with the <em>C</em> <em>SDK</em>, but you are not sure what the cause is. Solution The New Relic <em>C</em> <em>SDK</em> and its daemon have their own logs: <em>C</em> <em>SDK</em> logs: These logs are generated due to errors in how you&#x27;ve instrumented your code"
      },
      "id": "603e884c28ccbc41e5eba784"
    },
    {
      "sections": [
        "Instrument your app with the C SDK",
        "Instrument a transaction",
        "Instrument segments",
        "Instrument calls to external services",
        "Instrument calls to arbitrary code (custom segments)",
        "Instrument calls to datastores",
        "Tip",
        "Report slow query traces for datastore segments (SQL only)",
        "Important",
        "Instrument errors",
        "Avoid metric grouping issues"
      ],
      "title": "Instrument your app with the C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "dc21642bac9d779820a40eea8601434c4242f425",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/instrument-your-app-c-sdk/",
      "published_at": "2021-06-08T17:21:51Z",
      "updated_at": "2021-03-16T13:43:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In order to monitor any application on Linux using a language that can import C libraries, you must: Create a config using newrelic_new_app_config(), connect to the daemon using newrelic_init(), and connect your application using newrelic_create_app(). For more information, see the C SDK installation procedures. Manually instrument transactions using the C SDK, as described in this document. New Relic defines a web or non-web transaction as one logical unit of work in a software application. After you manually instrument transactions in your source code by adding New Relic functions, you can view the data on the Transactions page in New Relic. You can also instrument segments of a transaction and errors. Instrument a transaction To instrument a transaction so you can monitor it, wrap the New Relic functions that start and stop instrumentation around the transaction. The function that you use depends on whether you want to instrument a web or non-web transaction. In the following example, the app is created after a call to newrelic_create_app(). For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Add the following code immediately before the transaction that you want to monitor, supplying the required parameters. For web transactions: // Example code: newrelic_txn_t *txn; /* ... */ txn = newrelic_start_web_transaction(app, \"NAME_YOUR_TRANSACTION\"); Copy For non-web transactions: // Example code: newrelic_txn_t *txn; /* ... */ txn = newrelic_start_non_web_transaction(app, \"NAME_YOUR_TRANSACTION\"); Copy Add newrelic_end_transaction() immediately after the web or non-web transaction that you want to monitor, supplying a pointer the transaction, &txn, as a parameter. Instrument segments Once you instrument a transaction using the C SDK, you can instrument segments in it. By instrumenting segments, you can monitor the individual functions and calls inside a transaction. Segments example You have a transaction associated with a checkout process, which processes both shipping information and credit card information. You can instrument your application to break that transaction up into two segments: one segment for shipping and one segment for payment. You can instrument segments to monitor the following kinds of calls: External services using external segments Custom segments for arbitrary code Datastores using datastore segments Slow query traces (SQL databases only) For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to external services To monitor calls to external services, instrument external segments that are within an instrumented transaction. External segments appear in the Transactions page's Breakdown table and the External services page. To instrument an external segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Create a newrelic_external_segment_params_t that describes the external segment, supplying the required parameters. Add newrelic_start_external_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to arbitrary code (custom segments) To monitor calls to arbitrary code, instrument custom segments that are within an instrumented transaction. Custom segments appear in the Breakdown table on the Transactions page. To instrument a custom segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Add newrelic_start_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to datastores To monitor calls to datastores, instrument the datastore segments within an instrumented transaction. Datastore segments appear in the Breakdown table and Databases tab on the Transactions page in New Relic. You can also view datastore segments as a databaseDuration attribute of APM Transaction events. To instrument a datastore segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Create a newrelic_datastore_segment_params_t that describes the datastore segment. Add newrelic_start_datastore_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Tip To configure how the database name and database instance are reported, use the newrelic_datastore_segment_config_t. Report slow query traces for datastore segments (SQL only) Important You can report slow query traces for SQL databases only. To report slow query trace data for datastore segments that take longer than the time you specify, enable these settings in your newrelic_app_config_t: Enable slow query tracing by setting transaction_tracer.datastore_reporting.enabled to true. To set the threshold, add a length of time in microseconds to transaction_tracer.datastore_reporting.threshold_us. Then, if a datastore call takes longer than the threshold, the C SDK reports it as a slow query. To view slow query trace details, use the Databases and Slow queries pages in New Relic. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument errors In order to use the C SDK to monitor errors in transactions, you must manually instrument your source code by adding the newrelic_notice_error() function to it. Transaction errors and error traces appear on the Error analytics page in New Relic. The C SDK reports the total number of errors and up to 100 error traces per minute. You can also view, query, and visualize transaction errors as APM TransactionError events. Tip To include function calls in error traces, use GNU's -rdynamic linker flag to link your apps when compiling. The -rdynamic linker flag gives you more meaningful error traces. To instrument errors in transactions: Start a transaction. Record an error with newrelic_notice_error(), supplying the required parameters. End the transaction, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Avoid metric grouping issues When an account or application sends many individual metrics that could be better managed in groups, New Relic uses the term metric grouping issue or MGI to describe this situation. If your application sends unnecessarily large amounts of data to New Relic, this reduces the effectiveness of charts, tables, and reports. Metric grouping issues occur most commonly with web transactions, especially if the name is based on URLs. To help prevent this situation, see Metric grouping issues.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.01985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Instrument your app with the <em>C</em> <em>SDK</em>",
        "sections": "Instrument your app with the <em>C</em> <em>SDK</em>",
        "tags": "<em>Agents</em>",
        "body": "In order to monitor any application on Linux using a language that can import <em>C</em> libraries, you must: Create a config using newrelic_new_app_config(), connect to the daemon using newrelic_init(), and connect your application using newrelic_create_app(). For more information, see the <em>C</em> <em>SDK</em>"
      },
      "id": "603ec08fe7b9d229232a0810"
    },
    {
      "sections": [
        "Guide to using the C SDK API",
        "Ensure your customization is thread-safe",
        "Monitor transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "Instrument calls to external services",
        "Collect or log errors",
        "Send custom data from your app",
        "Custom events",
        "Tip",
        "Custom event attributes",
        "Custom metrics",
        "Important",
        "Monitor desktop browser performance",
        "Change configuration settings"
      ],
      "title": "Guide to using the C SDK API",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "fd96697be408715e6330a91b237c5fb6b5042bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/guide-using-c-sdk-api/",
      "published_at": "2021-06-08T19:09:11Z",
      "updated_at": "2021-03-16T09:07:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's C SDK monitors your applications and microservices to help you identify and solve performance issues. C applications run from a compiled, native binary file. In order to monitor transactions, you must manually instrument your code by adding New Relic methods to it. This guide helps you to decide which method to use. The method's code, required parameters, and examples reside in New Relic's C SDK documentation on GitHub. Ensure your customization is thread-safe The C SDK supports instrumentation of multi-threaded applications, but it must be initialized before instrumenting multiple threads. When calling any of the following functions, ensure that they are called on the main thread before any other C SDK functions are called: newrelic_configure_log newrelic_init Monitor transactions Before you manually instrument your code to monitor transactions: Check the C SDK compatibility and requirements for your app. Make sure you are using the latest version of the C SDK library, and update as needed. If you want to... Use this method... Start timing a web transaction newrelic_start_web_transaction() Start timing a non-web transaction newrelic_start_non_web_transaction() Stop timing a transaction newrelic_end_transaction() Prevent a transaction from reporting to New Relic newrelic_ignore_transaction() Time specific methods using segments If a transaction is already visible in New Relic, but you do not have enough data about a particular method that was called during that transaction, you can instrument segments. For example, if you want to time a method that has complex logic, you can create a segment for each of the methods in the transaction. To instrument a method within an existing transaction, create segments for any of the following: External services Functions or other arbitrary blocks of code (using custom segments) Datastores Slow query traces (SQL datastores only) If you want to... Use this method... Start timing a segment newrelic_start_datastore_segment()newrelic_start_external_segment()newrelic_start_segment() Stop timing a segment newrelic_end_segment() Manually parent segments newrelic_set_segment_parent() and newrelic_set_segment_parent_root() This is useful, for example, with an asynchronous process when you want to visualize a segment as a child of the transaction's top-level call. For more information, see the manual segment parenting documentation on GitHub. Segments are recorded on the active transaction. When adding a segment to an active transaction, you need access to the newrelic_txn_t* or transaction pointer, returned by newrelic_start_web_transaction() or newrelic_start_non_web_transaction(). Enhance the metadata of a transaction You can manage the metadata that New Relic reports for transactions. This is useful when you want a different level of detail for your transactions. For example: If you are experiencing a metric grouping issue, you can change the default names for your transactions to make them more identifiable. If you want to create dashboards for your transactions, you can add custom attributes. If you want to... Use this method... Add metadata (such as your customer's account name or subscription level) to your transaction Add custom attributes to your transaction based on their type: newrelic_add_attribute_int() newrelic_add_attribute_string() newrelic_add_attribute_long() newrelic_add_attribute_double() Instrument calls to external services Use these methods to collect data about your app's connections to other apps or databases: If you want to... Use this method... See the path that a request takes as it travels through a distributed system Follow the procedures to enable and instrument distributed tracing. Time a call to an external resource (such as an external service, database server, or message queue) Follow the procedures to Instrument calls to external segments. Collect or log errors The C SDK detects errors automatically. If you want to change the way it reports errors to New Relic, change the error collector configuration. If you want to... Use this method... Set logging levels for your app Use newrelic_configure_log() to configure the C SDK logs and command-line flags to configure the C daemon logs. For more information, see the C SDK logging documentation. Report an error newrelic_notice_error() Send custom data from your app To record custom data with the C SDK, you can use any of the following methods: Custom events: At New Relic, event data is a fundamental data type. Event data represents a record of a single event at a particular moment in time. This is useful to view or query specific details. Custom event attributes: To include additional metadata about the event, you can add key/value pairs (custom-attributes) to your custom event. Custom metrics: Metric timeslice data is the statistical measure of data that New Relic aggregates so that you can view it in the UI and chart it. Typically metric data has a longer retention period than event data. Custom events The C SDK provides a custom events API that allows you to send custom events to New Relic. To send an event, start a transaction and use the newrelic_create_custom_event and newrelic_record_custom_event functions. For example: // txn is a newrelic_txn_t*, created via newrelic_start_web_transaction newrelic_custom_event_t* custom_event=0; custom_event = newrelic_create_custom_event(\"aTypeForYourEvent\"); newrelic_record_custom_event(txn, &custom_event); Copy Be sure to review the custom data requirements and limits for guidance on what values are and are not allowed inside your custom event. For more information, see Custom events in APM. Tip If you created a custom event but need to remove it before the transaction has ended, use newrelic_discard_custom_event(&custom_event);. Custom event attributes You can also add int, long, double, and char* (string) attributes to your custom event by using the newrelic_custom_event_add_* family of functions. For example: // Example custom attributes: newrelic_custom_event_t* custom_event=0; custom_event = newrelic_create_custom_event(\"aTypeForYourEvent\"); newrelic_custom_event_add_attribute_int(custom_event, \"keya\", 42); newrelic_custom_event_add_attribute_long(custom_event, \"keyb\", 84); newrelic_custom_event_add_attribute_double(custom_event, \"keyc\", 42.42); newrelic_custom_event_add_attribute_string(custom_event, \"keyd\", \"A string\"); newrelic_record_custom_event(txn, &custom_event); Copy For more information, see the documentation about custom attributes. Custom metrics The C SDK provides the newrelic_record_custom_metric() function. This allows you to record time-based performance data using an API call, such as: Transaction timing data Computer resource data Subscription or purchasing data To create a custom metric, provide a name or other identifier and an amount of time in milliseconds to the function, along with the active transaction. Important Always prefix custom metric names with Custom/. For example: // txn is a newrelic_txn_t*, created via newrelic_start_web_transaction // Record a metric value of 100ms in the transaction txn newrelic_record_custom_metric(txn, \"Custom/MyMetric/My_label\", 100); Copy For more information, see Collect custom metrics. Here are some ways to use your custom data. For code details and examples for these options, see the New Relic globals documentation on GitHub. If you want to... Use this method... Create a custom event to populate with a timestamp and attributes. newrelic_create_custom_event() Timestamp and add the custom event to the current transaction so you can query or visualize it. newrelic_record_custom_event() Enhance your custom event with additional metadata. Add custom event attributes to your custom event based on type: newrelic_custom_event_add_attribute_double() newrelic_custom_event_add_attribute_int() newrelic_custom_event_add_attribute_long() newrelic_custom_event_add_attribute_string() Discard a custom event after it was created, but before its transaction has ended, to avoid reporting it to New Relic. newrelic_discard_custom_event This is necessary to free the allocated memory for your unwanted custom event in order to avoid leaks in your program. Report a custom performance duration that you can search or chart. newrelic_record_custom_metric() Monitor desktop browser performance To monitor desktop browser performance for your application, install the browser agent using the copy/paste method. Change configuration settings Typically the default settings for your application's configuration do not need to be changed. However, when necessary, you can adjust some of the settings. For more information, see the C SDK configuration documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.99974,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>C</em> <em>SDK</em> API",
        "sections": "Guide to using the <em>C</em> <em>SDK</em> API",
        "tags": "<em>Agents</em>",
        "body": " application, install the browser <em>agent</em> using the copy&#x2F;paste method. Change configuration settings Typically the default settings for your application&#x27;s configuration do not need to be changed. However, when necessary, you can adjust some of the settings. For more information, see the <em>C</em> <em>SDK</em> configuration documentation."
      },
      "id": "603ec04928ccbc252beba785"
    }
  ],
  "/docs/agents/c-sdk/install-configure/c-sdk-configuration": [
    {
      "sections": [
        "Install the C SDK: Compile and link your code",
        "Tip",
        "Add the C SDK to your code",
        "1. Verify requirements.",
        "2. Include the provided header file.",
        "3. Configure logging.",
        "4. Be ready to provide a meaningful app name.",
        "5. Finish instrumenting your code.",
        "6. Compile and link your app.",
        "7. Start the daemon and check logs.",
        "View app performance in New Relic"
      ],
      "title": "Install the C SDK: Compile and link your code",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "c764f1c209bc5c5cd23cecf0d57d84a293325c98",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/install-c-sdk-compile-link-your-code/",
      "published_at": "2021-06-09T01:26:07Z",
      "updated_at": "2021-03-16T13:43:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our C SDK auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic C SDK installation. Add C data Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add the C SDK to your code To monitor your application with New Relic's C SDK, instrument the features you want to use: Web transactions, transaction events, non-web transactions Segments (for additional levels of timing details) Attributes Errors Then compile and link your app against the C SDK static library. To install the C SDK into your application's code library, follow this procedure. 1. Verify requirements. Make sure your application meets New Relic's compatibility and requirements for the C SDK. Make sure you have a New Relic license key. 2. Include the provided header file. #include \"libnewrelic.h\" Copy 3. Configure logging. Follow the procedures to configure logging for both the C SDK and the daemon. For example: if (!newrelic_configure_log(\"./c_sdk.log\", NEWRELIC_LOG_INFO)) { printf(\"Error configuring logging.\\n\"); return -1; } Copy 4. Be ready to provide a meaningful app name. Be prepared to provide a meaningful app name in your initial application configuration; for example: newrelic_app_config_t* config; /* ... */ config = newrelic_create_app_config(\"Your Application Name\", \"LICENSE_KEY_HERE\"); Copy You may give your application up to three different names, separated by ;. Giving your application multiple names allows you to aggregate metrics for multiple agents across an entire app or service; for example: config = newrelic_create_app_config(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\", \"LICENSE_KEY_HERE\"); Copy With the application configured, you can create a new application to connect to the daemon. newrelic_app_t* app; /* ... */ if (!newrelic_init(NULL, 0)) { printf(\"Error connecting to daemon.\\n\"); return -1; } /* Wait up to 10 seconds for the SDK to connect to the daemon */ app = newrelic_create_app(config, 10000); newrelic_destroy_app_config(&config); Copy 5. Finish instrumenting your code. To finish instrumenting your code, refer to the example programs in the C SDK Examples documentation on GitHub. For more information about source code and features, see the C SDK's source documentation for libnewrelic.h on GitHub. 6. Compile and link your app. The C SDK's libnewrelic.a is a static library that is already linked with the libpcre and libpthread libraries. To avoid symbol collisions in this linking step, be sure to link against each of these libraries. In addition, to take full advantage of error traces in APM's Error analytics page, link your application using GNU's -rdynamic linker flag. This will allow more meaningful information to appear in the stack trace for the error recording on a transaction using the C SDK's newrelic_notice_error API call. For example: gcc -o test_app test_app.c -L. -lnewrelic -lpcre -lm -pthread -rdynamic Copy 7. Start the daemon and check logs. Start the C SDK's daemon. For example: ./newrelic-daemon -f -logfile newrelic-daemon.log -loglevel debug Copy Check the output in the c_sdk.log and newrelic-daemon.log files. The C SDK's architecture requires that the daemon must be invoked first before your instrumented application is invoked. Tip To see all of the available options for the C daemon: At the command line, type: ./newrelic-daemon --help Copy For more information, see the C SDK GUIDE.md. View app performance in New Relic To view your app's performance with APM: Generate some traffic for your app, then wait a few minutes for your app to send data to New Relic. Explore your app's data in the APM UI. If no data appears within a few minutes, check your c_sdk.log and newrelic-daemon.log files for errors. If you still have problems, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.28285,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>C</em> <em>SDK</em>: <em>Compile</em> <em>and</em> link your <em>code</em>",
        "sections": "<em>Install</em> the <em>C</em> <em>SDK</em>: <em>Compile</em> <em>and</em> link your <em>code</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "Our <em>C</em> <em>SDK</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>C</em> <em>SDK</em> installation. Add <em>C</em> data Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join"
      },
      "id": "603e87e528ccbc3e4aeba787"
    },
    {
      "sections": [
        "Docker and other container environments: Install C SDK",
        "Tip",
        "Install C SDK in container environment",
        "Caution"
      ],
      "title": "Docker and other container environments: Install C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "a025a4626e688903bdfae375fd92ef325f09b810",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/docker-other-container-environments-install-c-sdk/",
      "published_at": "2021-06-09T01:26:08Z",
      "updated_at": "2021-03-16T04:35:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the New Relic C SDK on a Docker container (or other container) to monitor one or more of your C applications. Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install C SDK in container environment Requirements: Meet C SDK requirements C SDK version 1.2 or higher Caution Data transmitted from the agent to the daemon is not encrypted. We recommend only using a private network connection between the agent and daemon. This only applies when the agent and daemon are running on different hosts. To install C SDK for a container environment, we recommend installing the C SDK daemon on a separate docker container: Install the daemon by cloning the C SDK repository and building the daemon. This is done most effectively via the command make daemon. See the README.md for further details. If you are using Docker, you can use the C SDK daemon image on Dockerhub. Start the daemon using --address and --watchdog-foreground arguments. The --address argument is used to set a port where the daemon is accepting connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Then, use the C SDK in your containerized application: Follow the steps to add the C SDK to your code. Point the C SDK to the daemon by adding a newrelic_init call and passing a valid address argument. The value for this argument must be HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.2151,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker <em>and</em> other <em>container</em> environments: <em>Install</em> <em>C</em> <em>SDK</em>",
        "sections": "Docker <em>and</em> other <em>container</em> environments: <em>Install</em> <em>C</em> <em>SDK</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "You can <em>install</em> the New Relic <em>C</em> <em>SDK</em> on a Docker container (or other container) to monitor one or more of your <em>C</em> applications. Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few"
      },
      "id": "603ead4628ccbcbecfeba77e"
    },
    {
      "sections": [
        "Uninstall (remove) the C SDK",
        "Write instrumentation you can disable",
        "Using #ifdef macros to disable C SDK instrumentation",
        "Uninstall completely"
      ],
      "title": "Uninstall (remove) the C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "6241507b2d3446af6d8b865679a9584479dc7ace",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/uninstall-remove-c-sdk/",
      "published_at": "2021-06-09T01:26:07Z",
      "updated_at": "2021-03-11T07:01:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Follow these procedures as appropriate to temporarily disable the C SDK in your app's code library or to remove it completely. Write instrumentation you can disable As a C library that provides direct access to the New Relic API, the C SDK cannot be turned on or off directly. However, you can write your code for the SDK so that a quick recompile and deploy can enable or disable your instrumentation. One approach is to use an #ifdef macro. By surrounding all your instrumentation in #ifdef macros and setting the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system, you will be able to quickly enable or disable New Relic's instrumentation in your C/C++ based programs by recompiling them and then redeploying the application. Using #ifdef macros to disable C SDK instrumentation // replace `YOURNAMESPACE` with something that's unique to // your company/project to ensure a unique name #ifdef YOURNAMESPACE_NEWRELIC_ENABLED int priority = 50; newrelic_txn_t* txn = newrelic_start_non_web_transaction(app, transaction_name); ... if (err) { newrelic_notice_error(txn, priority, \"Meaningful error message\", \"Error.class\"); } ... newrelic_end_transaction(&txn); #endif Copy Uninstall completely To remove the New Relic's C SDK completely from your app's code library: Remove the linking to libnewrelic.a in your build system. Remove all New Relic API calls from your application code. Recompile and redeploy your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.39143,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall (remove) the <em>C</em> <em>SDK</em>",
        "sections": "Uninstall (remove) the <em>C</em> <em>SDK</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "Follow these procedures as appropriate to temporarily disable the <em>C</em> <em>SDK</em> in your app&#x27;s code library or to remove it completely. Write instrumentation you can disable As a <em>C</em> library that provides direct access to the New Relic API, the <em>C</em> <em>SDK</em> cannot be turned on or off directly. However, you can write"
      },
      "id": "6043f20328ccbce9712c60b4"
    }
  ],
  "/docs/agents/c-sdk/install-configure/docker-other-container-environments-install-c-sdk": [
    {
      "sections": [
        "Install the C SDK: Compile and link your code",
        "Tip",
        "Add the C SDK to your code",
        "1. Verify requirements.",
        "2. Include the provided header file.",
        "3. Configure logging.",
        "4. Be ready to provide a meaningful app name.",
        "5. Finish instrumenting your code.",
        "6. Compile and link your app.",
        "7. Start the daemon and check logs.",
        "View app performance in New Relic"
      ],
      "title": "Install the C SDK: Compile and link your code",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "c764f1c209bc5c5cd23cecf0d57d84a293325c98",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/install-c-sdk-compile-link-your-code/",
      "published_at": "2021-06-09T01:26:07Z",
      "updated_at": "2021-03-16T13:43:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our C SDK auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic C SDK installation. Add C data Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add the C SDK to your code To monitor your application with New Relic's C SDK, instrument the features you want to use: Web transactions, transaction events, non-web transactions Segments (for additional levels of timing details) Attributes Errors Then compile and link your app against the C SDK static library. To install the C SDK into your application's code library, follow this procedure. 1. Verify requirements. Make sure your application meets New Relic's compatibility and requirements for the C SDK. Make sure you have a New Relic license key. 2. Include the provided header file. #include \"libnewrelic.h\" Copy 3. Configure logging. Follow the procedures to configure logging for both the C SDK and the daemon. For example: if (!newrelic_configure_log(\"./c_sdk.log\", NEWRELIC_LOG_INFO)) { printf(\"Error configuring logging.\\n\"); return -1; } Copy 4. Be ready to provide a meaningful app name. Be prepared to provide a meaningful app name in your initial application configuration; for example: newrelic_app_config_t* config; /* ... */ config = newrelic_create_app_config(\"Your Application Name\", \"LICENSE_KEY_HERE\"); Copy You may give your application up to three different names, separated by ;. Giving your application multiple names allows you to aggregate metrics for multiple agents across an entire app or service; for example: config = newrelic_create_app_config(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\", \"LICENSE_KEY_HERE\"); Copy With the application configured, you can create a new application to connect to the daemon. newrelic_app_t* app; /* ... */ if (!newrelic_init(NULL, 0)) { printf(\"Error connecting to daemon.\\n\"); return -1; } /* Wait up to 10 seconds for the SDK to connect to the daemon */ app = newrelic_create_app(config, 10000); newrelic_destroy_app_config(&config); Copy 5. Finish instrumenting your code. To finish instrumenting your code, refer to the example programs in the C SDK Examples documentation on GitHub. For more information about source code and features, see the C SDK's source documentation for libnewrelic.h on GitHub. 6. Compile and link your app. The C SDK's libnewrelic.a is a static library that is already linked with the libpcre and libpthread libraries. To avoid symbol collisions in this linking step, be sure to link against each of these libraries. In addition, to take full advantage of error traces in APM's Error analytics page, link your application using GNU's -rdynamic linker flag. This will allow more meaningful information to appear in the stack trace for the error recording on a transaction using the C SDK's newrelic_notice_error API call. For example: gcc -o test_app test_app.c -L. -lnewrelic -lpcre -lm -pthread -rdynamic Copy 7. Start the daemon and check logs. Start the C SDK's daemon. For example: ./newrelic-daemon -f -logfile newrelic-daemon.log -loglevel debug Copy Check the output in the c_sdk.log and newrelic-daemon.log files. The C SDK's architecture requires that the daemon must be invoked first before your instrumented application is invoked. Tip To see all of the available options for the C daemon: At the command line, type: ./newrelic-daemon --help Copy For more information, see the C SDK GUIDE.md. View app performance in New Relic To view your app's performance with APM: Generate some traffic for your app, then wait a few minutes for your app to send data to New Relic. Explore your app's data in the APM UI. If no data appears within a few minutes, check your c_sdk.log and newrelic-daemon.log files for errors. If you still have problems, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.28285,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>C</em> <em>SDK</em>: <em>Compile</em> <em>and</em> link your <em>code</em>",
        "sections": "<em>Install</em> the <em>C</em> <em>SDK</em>: <em>Compile</em> <em>and</em> link your <em>code</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "Our <em>C</em> <em>SDK</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>C</em> <em>SDK</em> installation. Add <em>C</em> data Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join"
      },
      "id": "603e87e528ccbc3e4aeba787"
    },
    {
      "sections": [
        "Uninstall (remove) the C SDK",
        "Write instrumentation you can disable",
        "Using #ifdef macros to disable C SDK instrumentation",
        "Uninstall completely"
      ],
      "title": "Uninstall (remove) the C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "6241507b2d3446af6d8b865679a9584479dc7ace",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/uninstall-remove-c-sdk/",
      "published_at": "2021-06-09T01:26:07Z",
      "updated_at": "2021-03-11T07:01:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Follow these procedures as appropriate to temporarily disable the C SDK in your app's code library or to remove it completely. Write instrumentation you can disable As a C library that provides direct access to the New Relic API, the C SDK cannot be turned on or off directly. However, you can write your code for the SDK so that a quick recompile and deploy can enable or disable your instrumentation. One approach is to use an #ifdef macro. By surrounding all your instrumentation in #ifdef macros and setting the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system, you will be able to quickly enable or disable New Relic's instrumentation in your C/C++ based programs by recompiling them and then redeploying the application. Using #ifdef macros to disable C SDK instrumentation // replace `YOURNAMESPACE` with something that's unique to // your company/project to ensure a unique name #ifdef YOURNAMESPACE_NEWRELIC_ENABLED int priority = 50; newrelic_txn_t* txn = newrelic_start_non_web_transaction(app, transaction_name); ... if (err) { newrelic_notice_error(txn, priority, \"Meaningful error message\", \"Error.class\"); } ... newrelic_end_transaction(&txn); #endif Copy Uninstall completely To remove the New Relic's C SDK completely from your app's code library: Remove the linking to libnewrelic.a in your build system. Remove all New Relic API calls from your application code. Recompile and redeploy your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.39143,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall (remove) the <em>C</em> <em>SDK</em>",
        "sections": "Uninstall (remove) the <em>C</em> <em>SDK</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "Follow these procedures as appropriate to temporarily disable the <em>C</em> <em>SDK</em> in your app&#x27;s code library or to remove it completely. Write instrumentation you can disable As a <em>C</em> library that provides direct access to the New Relic API, the <em>C</em> <em>SDK</em> cannot be turned on or off directly. However, you can write"
      },
      "id": "6043f20328ccbce9712c60b4"
    },
    {
      "sections": [
        "Update your C SDK library",
        "Update your C SDK code library"
      ],
      "title": "Update your C SDK library",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "3fb14c2fbe0c15f6499f5ec50bbcfcb05081b3bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/update-your-c-sdk-library/",
      "published_at": "2021-06-08T17:12:14Z",
      "updated_at": "2021-03-11T06:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To ensure you have the most up-to-date version of the New Relic C SDK for your application's code library, check the release notes. Update your C SDK code library To update your application's code library to the latest version of New Relic's C SDK: Review the C SDK library changes to verify your code is compatible. Manually update the code for your app as applicable. Compile the C SDK code, using the make command, to create the latest version of the libnewrelic.a and link it into your application or service. If applicable, redeploy your application to your test environment. Generate traffic for your application, then check your its c_sdk.log file and newrelic-daemon.log output for any errors. Redeploy your application to your production environment. Wait a few minutes for your application to send data to New Relic. Then, check your application's performance in New Relic. If no data appears within a few minutes, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.38956,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update your <em>C</em> <em>SDK</em> library",
        "sections": "Update your <em>C</em> <em>SDK</em> library",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "To ensure you have the most up-to-date version of the New Relic <em>C</em> <em>SDK</em> for your application&#x27;s code library, check the release notes. Update your <em>C</em> <em>SDK</em> code library To update your application&#x27;s code library to the latest version of New Relic&#x27;s <em>C</em> <em>SDK</em>: Review the <em>C</em> <em>SDK</em> library changes to verify your"
      },
      "id": "6043ed05e7b9d282805799d2"
    }
  ],
  "/docs/agents/c-sdk/install-configure/install-c-sdk-compile-link-your-code": [
    {
      "sections": [
        "Docker and other container environments: Install C SDK",
        "Tip",
        "Install C SDK in container environment",
        "Caution"
      ],
      "title": "Docker and other container environments: Install C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "a025a4626e688903bdfae375fd92ef325f09b810",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/docker-other-container-environments-install-c-sdk/",
      "published_at": "2021-06-09T01:26:08Z",
      "updated_at": "2021-03-16T04:35:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the New Relic C SDK on a Docker container (or other container) to monitor one or more of your C applications. Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install C SDK in container environment Requirements: Meet C SDK requirements C SDK version 1.2 or higher Caution Data transmitted from the agent to the daemon is not encrypted. We recommend only using a private network connection between the agent and daemon. This only applies when the agent and daemon are running on different hosts. To install C SDK for a container environment, we recommend installing the C SDK daemon on a separate docker container: Install the daemon by cloning the C SDK repository and building the daemon. This is done most effectively via the command make daemon. See the README.md for further details. If you are using Docker, you can use the C SDK daemon image on Dockerhub. Start the daemon using --address and --watchdog-foreground arguments. The --address argument is used to set a port where the daemon is accepting connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Then, use the C SDK in your containerized application: Follow the steps to add the C SDK to your code. Point the C SDK to the daemon by adding a newrelic_init call and passing a valid address argument. The value for this argument must be HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.2151,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker <em>and</em> other <em>container</em> environments: <em>Install</em> <em>C</em> <em>SDK</em>",
        "sections": "Docker <em>and</em> other <em>container</em> environments: <em>Install</em> <em>C</em> <em>SDK</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "You can <em>install</em> the New Relic <em>C</em> <em>SDK</em> on a Docker container (or other container) to monitor one or more of your <em>C</em> applications. Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few"
      },
      "id": "603ead4628ccbcbecfeba77e"
    },
    {
      "sections": [
        "Uninstall (remove) the C SDK",
        "Write instrumentation you can disable",
        "Using #ifdef macros to disable C SDK instrumentation",
        "Uninstall completely"
      ],
      "title": "Uninstall (remove) the C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "6241507b2d3446af6d8b865679a9584479dc7ace",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/uninstall-remove-c-sdk/",
      "published_at": "2021-06-09T01:26:07Z",
      "updated_at": "2021-03-11T07:01:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Follow these procedures as appropriate to temporarily disable the C SDK in your app's code library or to remove it completely. Write instrumentation you can disable As a C library that provides direct access to the New Relic API, the C SDK cannot be turned on or off directly. However, you can write your code for the SDK so that a quick recompile and deploy can enable or disable your instrumentation. One approach is to use an #ifdef macro. By surrounding all your instrumentation in #ifdef macros and setting the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system, you will be able to quickly enable or disable New Relic's instrumentation in your C/C++ based programs by recompiling them and then redeploying the application. Using #ifdef macros to disable C SDK instrumentation // replace `YOURNAMESPACE` with something that's unique to // your company/project to ensure a unique name #ifdef YOURNAMESPACE_NEWRELIC_ENABLED int priority = 50; newrelic_txn_t* txn = newrelic_start_non_web_transaction(app, transaction_name); ... if (err) { newrelic_notice_error(txn, priority, \"Meaningful error message\", \"Error.class\"); } ... newrelic_end_transaction(&txn); #endif Copy Uninstall completely To remove the New Relic's C SDK completely from your app's code library: Remove the linking to libnewrelic.a in your build system. Remove all New Relic API calls from your application code. Recompile and redeploy your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.39143,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall (remove) the <em>C</em> <em>SDK</em>",
        "sections": "Uninstall (remove) the <em>C</em> <em>SDK</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "Follow these procedures as appropriate to temporarily disable the <em>C</em> <em>SDK</em> in your app&#x27;s code library or to remove it completely. Write instrumentation you can disable As a <em>C</em> library that provides direct access to the New Relic API, the <em>C</em> <em>SDK</em> cannot be turned on or off directly. However, you can write"
      },
      "id": "6043f20328ccbce9712c60b4"
    },
    {
      "sections": [
        "Update your C SDK library",
        "Update your C SDK code library"
      ],
      "title": "Update your C SDK library",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "3fb14c2fbe0c15f6499f5ec50bbcfcb05081b3bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/update-your-c-sdk-library/",
      "published_at": "2021-06-08T17:12:14Z",
      "updated_at": "2021-03-11T06:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To ensure you have the most up-to-date version of the New Relic C SDK for your application's code library, check the release notes. Update your C SDK code library To update your application's code library to the latest version of New Relic's C SDK: Review the C SDK library changes to verify your code is compatible. Manually update the code for your app as applicable. Compile the C SDK code, using the make command, to create the latest version of the libnewrelic.a and link it into your application or service. If applicable, redeploy your application to your test environment. Generate traffic for your application, then check your its c_sdk.log file and newrelic-daemon.log output for any errors. Redeploy your application to your production environment. Wait a few minutes for your application to send data to New Relic. Then, check your application's performance in New Relic. If no data appears within a few minutes, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.38956,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update your <em>C</em> <em>SDK</em> library",
        "sections": "Update your <em>C</em> <em>SDK</em> library",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "To ensure you have the most up-to-date version of the New Relic <em>C</em> <em>SDK</em> for your application&#x27;s code library, check the release notes. Update your <em>C</em> <em>SDK</em> code library To update your application&#x27;s code library to the latest version of New Relic&#x27;s <em>C</em> <em>SDK</em>: Review the <em>C</em> <em>SDK</em> library changes to verify your"
      },
      "id": "6043ed05e7b9d282805799d2"
    }
  ],
  "/docs/agents/c-sdk/install-configure/uninstall-remove-c-sdk": [
    {
      "sections": [
        "Install the C SDK: Compile and link your code",
        "Tip",
        "Add the C SDK to your code",
        "1. Verify requirements.",
        "2. Include the provided header file.",
        "3. Configure logging.",
        "4. Be ready to provide a meaningful app name.",
        "5. Finish instrumenting your code.",
        "6. Compile and link your app.",
        "7. Start the daemon and check logs.",
        "View app performance in New Relic"
      ],
      "title": "Install the C SDK: Compile and link your code",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "c764f1c209bc5c5cd23cecf0d57d84a293325c98",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/install-c-sdk-compile-link-your-code/",
      "published_at": "2021-06-09T01:26:07Z",
      "updated_at": "2021-03-16T13:43:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our C SDK auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic C SDK installation. Add C data Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add the C SDK to your code To monitor your application with New Relic's C SDK, instrument the features you want to use: Web transactions, transaction events, non-web transactions Segments (for additional levels of timing details) Attributes Errors Then compile and link your app against the C SDK static library. To install the C SDK into your application's code library, follow this procedure. 1. Verify requirements. Make sure your application meets New Relic's compatibility and requirements for the C SDK. Make sure you have a New Relic license key. 2. Include the provided header file. #include \"libnewrelic.h\" Copy 3. Configure logging. Follow the procedures to configure logging for both the C SDK and the daemon. For example: if (!newrelic_configure_log(\"./c_sdk.log\", NEWRELIC_LOG_INFO)) { printf(\"Error configuring logging.\\n\"); return -1; } Copy 4. Be ready to provide a meaningful app name. Be prepared to provide a meaningful app name in your initial application configuration; for example: newrelic_app_config_t* config; /* ... */ config = newrelic_create_app_config(\"Your Application Name\", \"LICENSE_KEY_HERE\"); Copy You may give your application up to three different names, separated by ;. Giving your application multiple names allows you to aggregate metrics for multiple agents across an entire app or service; for example: config = newrelic_create_app_config(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\", \"LICENSE_KEY_HERE\"); Copy With the application configured, you can create a new application to connect to the daemon. newrelic_app_t* app; /* ... */ if (!newrelic_init(NULL, 0)) { printf(\"Error connecting to daemon.\\n\"); return -1; } /* Wait up to 10 seconds for the SDK to connect to the daemon */ app = newrelic_create_app(config, 10000); newrelic_destroy_app_config(&config); Copy 5. Finish instrumenting your code. To finish instrumenting your code, refer to the example programs in the C SDK Examples documentation on GitHub. For more information about source code and features, see the C SDK's source documentation for libnewrelic.h on GitHub. 6. Compile and link your app. The C SDK's libnewrelic.a is a static library that is already linked with the libpcre and libpthread libraries. To avoid symbol collisions in this linking step, be sure to link against each of these libraries. In addition, to take full advantage of error traces in APM's Error analytics page, link your application using GNU's -rdynamic linker flag. This will allow more meaningful information to appear in the stack trace for the error recording on a transaction using the C SDK's newrelic_notice_error API call. For example: gcc -o test_app test_app.c -L. -lnewrelic -lpcre -lm -pthread -rdynamic Copy 7. Start the daemon and check logs. Start the C SDK's daemon. For example: ./newrelic-daemon -f -logfile newrelic-daemon.log -loglevel debug Copy Check the output in the c_sdk.log and newrelic-daemon.log files. The C SDK's architecture requires that the daemon must be invoked first before your instrumented application is invoked. Tip To see all of the available options for the C daemon: At the command line, type: ./newrelic-daemon --help Copy For more information, see the C SDK GUIDE.md. View app performance in New Relic To view your app's performance with APM: Generate some traffic for your app, then wait a few minutes for your app to send data to New Relic. Explore your app's data in the APM UI. If no data appears within a few minutes, check your c_sdk.log and newrelic-daemon.log files for errors. If you still have problems, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.28285,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>C</em> <em>SDK</em>: <em>Compile</em> <em>and</em> link your <em>code</em>",
        "sections": "<em>Install</em> the <em>C</em> <em>SDK</em>: <em>Compile</em> <em>and</em> link your <em>code</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "Our <em>C</em> <em>SDK</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>C</em> <em>SDK</em> installation. Add <em>C</em> data Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join"
      },
      "id": "603e87e528ccbc3e4aeba787"
    },
    {
      "sections": [
        "Docker and other container environments: Install C SDK",
        "Tip",
        "Install C SDK in container environment",
        "Caution"
      ],
      "title": "Docker and other container environments: Install C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "a025a4626e688903bdfae375fd92ef325f09b810",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/docker-other-container-environments-install-c-sdk/",
      "published_at": "2021-06-09T01:26:08Z",
      "updated_at": "2021-03-16T04:35:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the New Relic C SDK on a Docker container (or other container) to monitor one or more of your C applications. Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install C SDK in container environment Requirements: Meet C SDK requirements C SDK version 1.2 or higher Caution Data transmitted from the agent to the daemon is not encrypted. We recommend only using a private network connection between the agent and daemon. This only applies when the agent and daemon are running on different hosts. To install C SDK for a container environment, we recommend installing the C SDK daemon on a separate docker container: Install the daemon by cloning the C SDK repository and building the daemon. This is done most effectively via the command make daemon. See the README.md for further details. If you are using Docker, you can use the C SDK daemon image on Dockerhub. Start the daemon using --address and --watchdog-foreground arguments. The --address argument is used to set a port where the daemon is accepting connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Then, use the C SDK in your containerized application: Follow the steps to add the C SDK to your code. Point the C SDK to the daemon by adding a newrelic_init call and passing a valid address argument. The value for this argument must be HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.2151,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker <em>and</em> other <em>container</em> environments: <em>Install</em> <em>C</em> <em>SDK</em>",
        "sections": "Docker <em>and</em> other <em>container</em> environments: <em>Install</em> <em>C</em> <em>SDK</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "You can <em>install</em> the New Relic <em>C</em> <em>SDK</em> on a Docker container (or other container) to monitor one or more of your <em>C</em> applications. Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few"
      },
      "id": "603ead4628ccbcbecfeba77e"
    },
    {
      "sections": [
        "Update your C SDK library",
        "Update your C SDK code library"
      ],
      "title": "Update your C SDK library",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "3fb14c2fbe0c15f6499f5ec50bbcfcb05081b3bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/update-your-c-sdk-library/",
      "published_at": "2021-06-08T17:12:14Z",
      "updated_at": "2021-03-11T06:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To ensure you have the most up-to-date version of the New Relic C SDK for your application's code library, check the release notes. Update your C SDK code library To update your application's code library to the latest version of New Relic's C SDK: Review the C SDK library changes to verify your code is compatible. Manually update the code for your app as applicable. Compile the C SDK code, using the make command, to create the latest version of the libnewrelic.a and link it into your application or service. If applicable, redeploy your application to your test environment. Generate traffic for your application, then check your its c_sdk.log file and newrelic-daemon.log output for any errors. Redeploy your application to your production environment. Wait a few minutes for your application to send data to New Relic. Then, check your application's performance in New Relic. If no data appears within a few minutes, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.38956,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update your <em>C</em> <em>SDK</em> library",
        "sections": "Update your <em>C</em> <em>SDK</em> library",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "To ensure you have the most up-to-date version of the New Relic <em>C</em> <em>SDK</em> for your application&#x27;s code library, check the release notes. Update your <em>C</em> <em>SDK</em> code library To update your application&#x27;s code library to the latest version of New Relic&#x27;s <em>C</em> <em>SDK</em>: Review the <em>C</em> <em>SDK</em> library changes to verify your"
      },
      "id": "6043ed05e7b9d282805799d2"
    }
  ],
  "/docs/agents/c-sdk/install-configure/update-your-c-sdk-library": [
    {
      "sections": [
        "Install the C SDK: Compile and link your code",
        "Tip",
        "Add the C SDK to your code",
        "1. Verify requirements.",
        "2. Include the provided header file.",
        "3. Configure logging.",
        "4. Be ready to provide a meaningful app name.",
        "5. Finish instrumenting your code.",
        "6. Compile and link your app.",
        "7. Start the daemon and check logs.",
        "View app performance in New Relic"
      ],
      "title": "Install the C SDK: Compile and link your code",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "c764f1c209bc5c5cd23cecf0d57d84a293325c98",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/install-c-sdk-compile-link-your-code/",
      "published_at": "2021-06-09T01:26:07Z",
      "updated_at": "2021-03-16T13:43:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our C SDK auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic C SDK installation. Add C data Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add the C SDK to your code To monitor your application with New Relic's C SDK, instrument the features you want to use: Web transactions, transaction events, non-web transactions Segments (for additional levels of timing details) Attributes Errors Then compile and link your app against the C SDK static library. To install the C SDK into your application's code library, follow this procedure. 1. Verify requirements. Make sure your application meets New Relic's compatibility and requirements for the C SDK. Make sure you have a New Relic license key. 2. Include the provided header file. #include \"libnewrelic.h\" Copy 3. Configure logging. Follow the procedures to configure logging for both the C SDK and the daemon. For example: if (!newrelic_configure_log(\"./c_sdk.log\", NEWRELIC_LOG_INFO)) { printf(\"Error configuring logging.\\n\"); return -1; } Copy 4. Be ready to provide a meaningful app name. Be prepared to provide a meaningful app name in your initial application configuration; for example: newrelic_app_config_t* config; /* ... */ config = newrelic_create_app_config(\"Your Application Name\", \"LICENSE_KEY_HERE\"); Copy You may give your application up to three different names, separated by ;. Giving your application multiple names allows you to aggregate metrics for multiple agents across an entire app or service; for example: config = newrelic_create_app_config(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\", \"LICENSE_KEY_HERE\"); Copy With the application configured, you can create a new application to connect to the daemon. newrelic_app_t* app; /* ... */ if (!newrelic_init(NULL, 0)) { printf(\"Error connecting to daemon.\\n\"); return -1; } /* Wait up to 10 seconds for the SDK to connect to the daemon */ app = newrelic_create_app(config, 10000); newrelic_destroy_app_config(&config); Copy 5. Finish instrumenting your code. To finish instrumenting your code, refer to the example programs in the C SDK Examples documentation on GitHub. For more information about source code and features, see the C SDK's source documentation for libnewrelic.h on GitHub. 6. Compile and link your app. The C SDK's libnewrelic.a is a static library that is already linked with the libpcre and libpthread libraries. To avoid symbol collisions in this linking step, be sure to link against each of these libraries. In addition, to take full advantage of error traces in APM's Error analytics page, link your application using GNU's -rdynamic linker flag. This will allow more meaningful information to appear in the stack trace for the error recording on a transaction using the C SDK's newrelic_notice_error API call. For example: gcc -o test_app test_app.c -L. -lnewrelic -lpcre -lm -pthread -rdynamic Copy 7. Start the daemon and check logs. Start the C SDK's daemon. For example: ./newrelic-daemon -f -logfile newrelic-daemon.log -loglevel debug Copy Check the output in the c_sdk.log and newrelic-daemon.log files. The C SDK's architecture requires that the daemon must be invoked first before your instrumented application is invoked. Tip To see all of the available options for the C daemon: At the command line, type: ./newrelic-daemon --help Copy For more information, see the C SDK GUIDE.md. View app performance in New Relic To view your app's performance with APM: Generate some traffic for your app, then wait a few minutes for your app to send data to New Relic. Explore your app's data in the APM UI. If no data appears within a few minutes, check your c_sdk.log and newrelic-daemon.log files for errors. If you still have problems, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.28284,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>C</em> <em>SDK</em>: <em>Compile</em> <em>and</em> link your <em>code</em>",
        "sections": "<em>Install</em> the <em>C</em> <em>SDK</em>: <em>Compile</em> <em>and</em> link your <em>code</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "Our <em>C</em> <em>SDK</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>C</em> <em>SDK</em> installation. Add <em>C</em> data Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join"
      },
      "id": "603e87e528ccbc3e4aeba787"
    },
    {
      "sections": [
        "Docker and other container environments: Install C SDK",
        "Tip",
        "Install C SDK in container environment",
        "Caution"
      ],
      "title": "Docker and other container environments: Install C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "a025a4626e688903bdfae375fd92ef325f09b810",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/docker-other-container-environments-install-c-sdk/",
      "published_at": "2021-06-09T01:26:08Z",
      "updated_at": "2021-03-16T04:35:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the New Relic C SDK on a Docker container (or other container) to monitor one or more of your C applications. Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install C SDK in container environment Requirements: Meet C SDK requirements C SDK version 1.2 or higher Caution Data transmitted from the agent to the daemon is not encrypted. We recommend only using a private network connection between the agent and daemon. This only applies when the agent and daemon are running on different hosts. To install C SDK for a container environment, we recommend installing the C SDK daemon on a separate docker container: Install the daemon by cloning the C SDK repository and building the daemon. This is done most effectively via the command make daemon. See the README.md for further details. If you are using Docker, you can use the C SDK daemon image on Dockerhub. Start the daemon using --address and --watchdog-foreground arguments. The --address argument is used to set a port where the daemon is accepting connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Then, use the C SDK in your containerized application: Follow the steps to add the C SDK to your code. Point the C SDK to the daemon by adding a newrelic_init call and passing a valid address argument. The value for this argument must be HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.2151,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker <em>and</em> other <em>container</em> environments: <em>Install</em> <em>C</em> <em>SDK</em>",
        "sections": "Docker <em>and</em> other <em>container</em> environments: <em>Install</em> <em>C</em> <em>SDK</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "You can <em>install</em> the New Relic <em>C</em> <em>SDK</em> on a Docker container (or other container) to monitor one or more of your <em>C</em> applications. Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few"
      },
      "id": "603ead4628ccbcbecfeba77e"
    },
    {
      "sections": [
        "Uninstall (remove) the C SDK",
        "Write instrumentation you can disable",
        "Using #ifdef macros to disable C SDK instrumentation",
        "Uninstall completely"
      ],
      "title": "Uninstall (remove) the C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "6241507b2d3446af6d8b865679a9584479dc7ace",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/uninstall-remove-c-sdk/",
      "published_at": "2021-06-09T01:26:07Z",
      "updated_at": "2021-03-11T07:01:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Follow these procedures as appropriate to temporarily disable the C SDK in your app's code library or to remove it completely. Write instrumentation you can disable As a C library that provides direct access to the New Relic API, the C SDK cannot be turned on or off directly. However, you can write your code for the SDK so that a quick recompile and deploy can enable or disable your instrumentation. One approach is to use an #ifdef macro. By surrounding all your instrumentation in #ifdef macros and setting the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system, you will be able to quickly enable or disable New Relic's instrumentation in your C/C++ based programs by recompiling them and then redeploying the application. Using #ifdef macros to disable C SDK instrumentation // replace `YOURNAMESPACE` with something that's unique to // your company/project to ensure a unique name #ifdef YOURNAMESPACE_NEWRELIC_ENABLED int priority = 50; newrelic_txn_t* txn = newrelic_start_non_web_transaction(app, transaction_name); ... if (err) { newrelic_notice_error(txn, priority, \"Meaningful error message\", \"Error.class\"); } ... newrelic_end_transaction(&txn); #endif Copy Uninstall completely To remove the New Relic's C SDK completely from your app's code library: Remove the linking to libnewrelic.a in your build system. Remove all New Relic API calls from your application code. Recompile and redeploy your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.39143,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall (remove) the <em>C</em> <em>SDK</em>",
        "sections": "Uninstall (remove) the <em>C</em> <em>SDK</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "Follow these procedures as appropriate to temporarily disable the <em>C</em> <em>SDK</em> in your app&#x27;s code library or to remove it completely. Write instrumentation you can disable As a <em>C</em> library that provides direct access to the New Relic API, the <em>C</em> <em>SDK</em> cannot be turned on or off directly. However, you can write"
      },
      "id": "6043f20328ccbce9712c60b4"
    }
  ],
  "/docs/agents/c-sdk/instrumentation/enable-distributed-tracing-your-c-applications": [
    {
      "sections": [
        "Instrument your app with the C SDK",
        "Instrument a transaction",
        "Instrument segments",
        "Instrument calls to external services",
        "Instrument calls to arbitrary code (custom segments)",
        "Instrument calls to datastores",
        "Tip",
        "Report slow query traces for datastore segments (SQL only)",
        "Important",
        "Instrument errors",
        "Avoid metric grouping issues"
      ],
      "title": "Instrument your app with the C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "dc21642bac9d779820a40eea8601434c4242f425",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/instrument-your-app-c-sdk/",
      "published_at": "2021-06-08T17:21:51Z",
      "updated_at": "2021-03-16T13:43:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In order to monitor any application on Linux using a language that can import C libraries, you must: Create a config using newrelic_new_app_config(), connect to the daemon using newrelic_init(), and connect your application using newrelic_create_app(). For more information, see the C SDK installation procedures. Manually instrument transactions using the C SDK, as described in this document. New Relic defines a web or non-web transaction as one logical unit of work in a software application. After you manually instrument transactions in your source code by adding New Relic functions, you can view the data on the Transactions page in New Relic. You can also instrument segments of a transaction and errors. Instrument a transaction To instrument a transaction so you can monitor it, wrap the New Relic functions that start and stop instrumentation around the transaction. The function that you use depends on whether you want to instrument a web or non-web transaction. In the following example, the app is created after a call to newrelic_create_app(). For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Add the following code immediately before the transaction that you want to monitor, supplying the required parameters. For web transactions: // Example code: newrelic_txn_t *txn; /* ... */ txn = newrelic_start_web_transaction(app, \"NAME_YOUR_TRANSACTION\"); Copy For non-web transactions: // Example code: newrelic_txn_t *txn; /* ... */ txn = newrelic_start_non_web_transaction(app, \"NAME_YOUR_TRANSACTION\"); Copy Add newrelic_end_transaction() immediately after the web or non-web transaction that you want to monitor, supplying a pointer the transaction, &txn, as a parameter. Instrument segments Once you instrument a transaction using the C SDK, you can instrument segments in it. By instrumenting segments, you can monitor the individual functions and calls inside a transaction. Segments example You have a transaction associated with a checkout process, which processes both shipping information and credit card information. You can instrument your application to break that transaction up into two segments: one segment for shipping and one segment for payment. You can instrument segments to monitor the following kinds of calls: External services using external segments Custom segments for arbitrary code Datastores using datastore segments Slow query traces (SQL databases only) For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to external services To monitor calls to external services, instrument external segments that are within an instrumented transaction. External segments appear in the Transactions page's Breakdown table and the External services page. To instrument an external segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Create a newrelic_external_segment_params_t that describes the external segment, supplying the required parameters. Add newrelic_start_external_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to arbitrary code (custom segments) To monitor calls to arbitrary code, instrument custom segments that are within an instrumented transaction. Custom segments appear in the Breakdown table on the Transactions page. To instrument a custom segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Add newrelic_start_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to datastores To monitor calls to datastores, instrument the datastore segments within an instrumented transaction. Datastore segments appear in the Breakdown table and Databases tab on the Transactions page in New Relic. You can also view datastore segments as a databaseDuration attribute of APM Transaction events. To instrument a datastore segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Create a newrelic_datastore_segment_params_t that describes the datastore segment. Add newrelic_start_datastore_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Tip To configure how the database name and database instance are reported, use the newrelic_datastore_segment_config_t. Report slow query traces for datastore segments (SQL only) Important You can report slow query traces for SQL databases only. To report slow query trace data for datastore segments that take longer than the time you specify, enable these settings in your newrelic_app_config_t: Enable slow query tracing by setting transaction_tracer.datastore_reporting.enabled to true. To set the threshold, add a length of time in microseconds to transaction_tracer.datastore_reporting.threshold_us. Then, if a datastore call takes longer than the threshold, the C SDK reports it as a slow query. To view slow query trace details, use the Databases and Slow queries pages in New Relic. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument errors In order to use the C SDK to monitor errors in transactions, you must manually instrument your source code by adding the newrelic_notice_error() function to it. Transaction errors and error traces appear on the Error analytics page in New Relic. The C SDK reports the total number of errors and up to 100 error traces per minute. You can also view, query, and visualize transaction errors as APM TransactionError events. Tip To include function calls in error traces, use GNU's -rdynamic linker flag to link your apps when compiling. The -rdynamic linker flag gives you more meaningful error traces. To instrument errors in transactions: Start a transaction. Record an error with newrelic_notice_error(), supplying the required parameters. End the transaction, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Avoid metric grouping issues When an account or application sends many individual metrics that could be better managed in groups, New Relic uses the term metric grouping issue or MGI to describe this situation. If your application sends unnecessarily large amounts of data to New Relic, this reduces the effectiveness of charts, tables, and reports. Metric grouping issues occur most commonly with web transactions, especially if the name is based on URLs. To help prevent this situation, see Metric grouping issues.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.16058,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Instrument</em> your app with the <em>C</em> <em>SDK</em>",
        "sections": "<em>Instrument</em> your app with the <em>C</em> <em>SDK</em>",
        "tags": "<em>Agents</em>",
        "body": " installation procedures. Manually <em>instrument</em> transactions using the <em>C</em> <em>SDK</em>, as described in this document. New Relic defines a web or non-web transaction as one logical unit of work in a software application. After you manually <em>instrument</em> transactions in your source code by adding New Relic functions, you can"
      },
      "id": "603ec08fe7b9d229232a0810"
    },
    {
      "sections": [
        "Guide to using the C SDK API",
        "Ensure your customization is thread-safe",
        "Monitor transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "Instrument calls to external services",
        "Collect or log errors",
        "Send custom data from your app",
        "Custom events",
        "Tip",
        "Custom event attributes",
        "Custom metrics",
        "Important",
        "Monitor desktop browser performance",
        "Change configuration settings"
      ],
      "title": "Guide to using the C SDK API",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "fd96697be408715e6330a91b237c5fb6b5042bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/guide-using-c-sdk-api/",
      "published_at": "2021-06-08T19:09:11Z",
      "updated_at": "2021-03-16T09:07:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's C SDK monitors your applications and microservices to help you identify and solve performance issues. C applications run from a compiled, native binary file. In order to monitor transactions, you must manually instrument your code by adding New Relic methods to it. This guide helps you to decide which method to use. The method's code, required parameters, and examples reside in New Relic's C SDK documentation on GitHub. Ensure your customization is thread-safe The C SDK supports instrumentation of multi-threaded applications, but it must be initialized before instrumenting multiple threads. When calling any of the following functions, ensure that they are called on the main thread before any other C SDK functions are called: newrelic_configure_log newrelic_init Monitor transactions Before you manually instrument your code to monitor transactions: Check the C SDK compatibility and requirements for your app. Make sure you are using the latest version of the C SDK library, and update as needed. If you want to... Use this method... Start timing a web transaction newrelic_start_web_transaction() Start timing a non-web transaction newrelic_start_non_web_transaction() Stop timing a transaction newrelic_end_transaction() Prevent a transaction from reporting to New Relic newrelic_ignore_transaction() Time specific methods using segments If a transaction is already visible in New Relic, but you do not have enough data about a particular method that was called during that transaction, you can instrument segments. For example, if you want to time a method that has complex logic, you can create a segment for each of the methods in the transaction. To instrument a method within an existing transaction, create segments for any of the following: External services Functions or other arbitrary blocks of code (using custom segments) Datastores Slow query traces (SQL datastores only) If you want to... Use this method... Start timing a segment newrelic_start_datastore_segment()newrelic_start_external_segment()newrelic_start_segment() Stop timing a segment newrelic_end_segment() Manually parent segments newrelic_set_segment_parent() and newrelic_set_segment_parent_root() This is useful, for example, with an asynchronous process when you want to visualize a segment as a child of the transaction's top-level call. For more information, see the manual segment parenting documentation on GitHub. Segments are recorded on the active transaction. When adding a segment to an active transaction, you need access to the newrelic_txn_t* or transaction pointer, returned by newrelic_start_web_transaction() or newrelic_start_non_web_transaction(). Enhance the metadata of a transaction You can manage the metadata that New Relic reports for transactions. This is useful when you want a different level of detail for your transactions. For example: If you are experiencing a metric grouping issue, you can change the default names for your transactions to make them more identifiable. If you want to create dashboards for your transactions, you can add custom attributes. If you want to... Use this method... Add metadata (such as your customer's account name or subscription level) to your transaction Add custom attributes to your transaction based on their type: newrelic_add_attribute_int() newrelic_add_attribute_string() newrelic_add_attribute_long() newrelic_add_attribute_double() Instrument calls to external services Use these methods to collect data about your app's connections to other apps or databases: If you want to... Use this method... See the path that a request takes as it travels through a distributed system Follow the procedures to enable and instrument distributed tracing. Time a call to an external resource (such as an external service, database server, or message queue) Follow the procedures to Instrument calls to external segments. Collect or log errors The C SDK detects errors automatically. If you want to change the way it reports errors to New Relic, change the error collector configuration. If you want to... Use this method... Set logging levels for your app Use newrelic_configure_log() to configure the C SDK logs and command-line flags to configure the C daemon logs. For more information, see the C SDK logging documentation. Report an error newrelic_notice_error() Send custom data from your app To record custom data with the C SDK, you can use any of the following methods: Custom events: At New Relic, event data is a fundamental data type. Event data represents a record of a single event at a particular moment in time. This is useful to view or query specific details. Custom event attributes: To include additional metadata about the event, you can add key/value pairs (custom-attributes) to your custom event. Custom metrics: Metric timeslice data is the statistical measure of data that New Relic aggregates so that you can view it in the UI and chart it. Typically metric data has a longer retention period than event data. Custom events The C SDK provides a custom events API that allows you to send custom events to New Relic. To send an event, start a transaction and use the newrelic_create_custom_event and newrelic_record_custom_event functions. For example: // txn is a newrelic_txn_t*, created via newrelic_start_web_transaction newrelic_custom_event_t* custom_event=0; custom_event = newrelic_create_custom_event(\"aTypeForYourEvent\"); newrelic_record_custom_event(txn, &custom_event); Copy Be sure to review the custom data requirements and limits for guidance on what values are and are not allowed inside your custom event. For more information, see Custom events in APM. Tip If you created a custom event but need to remove it before the transaction has ended, use newrelic_discard_custom_event(&custom_event);. Custom event attributes You can also add int, long, double, and char* (string) attributes to your custom event by using the newrelic_custom_event_add_* family of functions. For example: // Example custom attributes: newrelic_custom_event_t* custom_event=0; custom_event = newrelic_create_custom_event(\"aTypeForYourEvent\"); newrelic_custom_event_add_attribute_int(custom_event, \"keya\", 42); newrelic_custom_event_add_attribute_long(custom_event, \"keyb\", 84); newrelic_custom_event_add_attribute_double(custom_event, \"keyc\", 42.42); newrelic_custom_event_add_attribute_string(custom_event, \"keyd\", \"A string\"); newrelic_record_custom_event(txn, &custom_event); Copy For more information, see the documentation about custom attributes. Custom metrics The C SDK provides the newrelic_record_custom_metric() function. This allows you to record time-based performance data using an API call, such as: Transaction timing data Computer resource data Subscription or purchasing data To create a custom metric, provide a name or other identifier and an amount of time in milliseconds to the function, along with the active transaction. Important Always prefix custom metric names with Custom/. For example: // txn is a newrelic_txn_t*, created via newrelic_start_web_transaction // Record a metric value of 100ms in the transaction txn newrelic_record_custom_metric(txn, \"Custom/MyMetric/My_label\", 100); Copy For more information, see Collect custom metrics. Here are some ways to use your custom data. For code details and examples for these options, see the New Relic globals documentation on GitHub. If you want to... Use this method... Create a custom event to populate with a timestamp and attributes. newrelic_create_custom_event() Timestamp and add the custom event to the current transaction so you can query or visualize it. newrelic_record_custom_event() Enhance your custom event with additional metadata. Add custom event attributes to your custom event based on type: newrelic_custom_event_add_attribute_double() newrelic_custom_event_add_attribute_int() newrelic_custom_event_add_attribute_long() newrelic_custom_event_add_attribute_string() Discard a custom event after it was created, but before its transaction has ended, to avoid reporting it to New Relic. newrelic_discard_custom_event This is necessary to free the allocated memory for your unwanted custom event in order to avoid leaks in your program. Report a custom performance duration that you can search or chart. newrelic_record_custom_metric() Monitor desktop browser performance To monitor desktop browser performance for your application, install the browser agent using the copy/paste method. Change configuration settings Typically the default settings for your application's configuration do not need to be changed. However, when necessary, you can adjust some of the settings. For more information, see the C SDK configuration documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.13148,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>C</em> <em>SDK</em> API",
        "sections": "Guide to using the <em>C</em> <em>SDK</em> API",
        "tags": "<em>Agents</em>",
        "body": "New Relic&#x27;s <em>C</em> <em>SDK</em> monitors your applications and microservices to help you identify and solve performance issues. <em>C</em> applications run from a compiled, native binary file. In order to monitor transactions, you must manually <em>instrument</em> your code by adding New Relic methods to it. This guide helps you"
      },
      "id": "603ec04928ccbc252beba785"
    },
    {
      "sections": [
        "Use default or custom attributes (C SDK)",
        "View and use attributes",
        "C-specific attributes",
        "Important"
      ],
      "title": "Use default or custom attributes (C SDK)",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "7fb0ceea8c4be2c78e12a226ccf00fbd175f13da",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/use-default-or-custom-attributes-c-sdk/",
      "published_at": "2021-06-08T17:55:26Z",
      "updated_at": "2021-03-13T02:57:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic, attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can help you gain greater insight into your application and query your data. View and use attributes Both default APM attributes and custom attributes for your C application appear in: APM transaction traces and error analytics APM events C-specific attributes Important Before creating custom attributes, review New Relic's list of reserved terms used by NRQL. Otherwise unexpected results may occur. To add custom attributes to your C application, call one of the attribute functions in the C SDK API; for example, newrelic_add_attribute_double(). The key name for your custom attribute depends on what you specify when you call the function.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.65497,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use default or <em>custom</em> attributes (<em>C</em> <em>SDK</em>)",
        "sections": "Use default or <em>custom</em> attributes (<em>C</em> <em>SDK</em>)",
        "tags": "<em>Agents</em>",
        "body": ", call one of the attribute functions in the <em>C</em> <em>SDK</em> API; for example, newrelic_add_attribute_double(). The key name for your custom attribute depends on what you specify when you call the function."
      },
      "id": "6043f203196a673dd2960f37"
    }
  ],
  "/docs/agents/c-sdk/instrumentation/guide-using-c-sdk-api": [
    {
      "sections": [
        "Instrument your app with the C SDK",
        "Instrument a transaction",
        "Instrument segments",
        "Instrument calls to external services",
        "Instrument calls to arbitrary code (custom segments)",
        "Instrument calls to datastores",
        "Tip",
        "Report slow query traces for datastore segments (SQL only)",
        "Important",
        "Instrument errors",
        "Avoid metric grouping issues"
      ],
      "title": "Instrument your app with the C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "dc21642bac9d779820a40eea8601434c4242f425",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/instrument-your-app-c-sdk/",
      "published_at": "2021-06-08T17:21:51Z",
      "updated_at": "2021-03-16T13:43:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In order to monitor any application on Linux using a language that can import C libraries, you must: Create a config using newrelic_new_app_config(), connect to the daemon using newrelic_init(), and connect your application using newrelic_create_app(). For more information, see the C SDK installation procedures. Manually instrument transactions using the C SDK, as described in this document. New Relic defines a web or non-web transaction as one logical unit of work in a software application. After you manually instrument transactions in your source code by adding New Relic functions, you can view the data on the Transactions page in New Relic. You can also instrument segments of a transaction and errors. Instrument a transaction To instrument a transaction so you can monitor it, wrap the New Relic functions that start and stop instrumentation around the transaction. The function that you use depends on whether you want to instrument a web or non-web transaction. In the following example, the app is created after a call to newrelic_create_app(). For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Add the following code immediately before the transaction that you want to monitor, supplying the required parameters. For web transactions: // Example code: newrelic_txn_t *txn; /* ... */ txn = newrelic_start_web_transaction(app, \"NAME_YOUR_TRANSACTION\"); Copy For non-web transactions: // Example code: newrelic_txn_t *txn; /* ... */ txn = newrelic_start_non_web_transaction(app, \"NAME_YOUR_TRANSACTION\"); Copy Add newrelic_end_transaction() immediately after the web or non-web transaction that you want to monitor, supplying a pointer the transaction, &txn, as a parameter. Instrument segments Once you instrument a transaction using the C SDK, you can instrument segments in it. By instrumenting segments, you can monitor the individual functions and calls inside a transaction. Segments example You have a transaction associated with a checkout process, which processes both shipping information and credit card information. You can instrument your application to break that transaction up into two segments: one segment for shipping and one segment for payment. You can instrument segments to monitor the following kinds of calls: External services using external segments Custom segments for arbitrary code Datastores using datastore segments Slow query traces (SQL databases only) For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to external services To monitor calls to external services, instrument external segments that are within an instrumented transaction. External segments appear in the Transactions page's Breakdown table and the External services page. To instrument an external segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Create a newrelic_external_segment_params_t that describes the external segment, supplying the required parameters. Add newrelic_start_external_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to arbitrary code (custom segments) To monitor calls to arbitrary code, instrument custom segments that are within an instrumented transaction. Custom segments appear in the Breakdown table on the Transactions page. To instrument a custom segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Add newrelic_start_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to datastores To monitor calls to datastores, instrument the datastore segments within an instrumented transaction. Datastore segments appear in the Breakdown table and Databases tab on the Transactions page in New Relic. You can also view datastore segments as a databaseDuration attribute of APM Transaction events. To instrument a datastore segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Create a newrelic_datastore_segment_params_t that describes the datastore segment. Add newrelic_start_datastore_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Tip To configure how the database name and database instance are reported, use the newrelic_datastore_segment_config_t. Report slow query traces for datastore segments (SQL only) Important You can report slow query traces for SQL databases only. To report slow query trace data for datastore segments that take longer than the time you specify, enable these settings in your newrelic_app_config_t: Enable slow query tracing by setting transaction_tracer.datastore_reporting.enabled to true. To set the threshold, add a length of time in microseconds to transaction_tracer.datastore_reporting.threshold_us. Then, if a datastore call takes longer than the threshold, the C SDK reports it as a slow query. To view slow query trace details, use the Databases and Slow queries pages in New Relic. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument errors In order to use the C SDK to monitor errors in transactions, you must manually instrument your source code by adding the newrelic_notice_error() function to it. Transaction errors and error traces appear on the Error analytics page in New Relic. The C SDK reports the total number of errors and up to 100 error traces per minute. You can also view, query, and visualize transaction errors as APM TransactionError events. Tip To include function calls in error traces, use GNU's -rdynamic linker flag to link your apps when compiling. The -rdynamic linker flag gives you more meaningful error traces. To instrument errors in transactions: Start a transaction. Record an error with newrelic_notice_error(), supplying the required parameters. End the transaction, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Avoid metric grouping issues When an account or application sends many individual metrics that could be better managed in groups, New Relic uses the term metric grouping issue or MGI to describe this situation. If your application sends unnecessarily large amounts of data to New Relic, this reduces the effectiveness of charts, tables, and reports. Metric grouping issues occur most commonly with web transactions, especially if the name is based on URLs. To help prevent this situation, see Metric grouping issues.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.16058,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Instrument</em> your app with the <em>C</em> <em>SDK</em>",
        "sections": "<em>Instrument</em> your app with the <em>C</em> <em>SDK</em>",
        "tags": "<em>Agents</em>",
        "body": " installation procedures. Manually <em>instrument</em> transactions using the <em>C</em> <em>SDK</em>, as described in this document. New Relic defines a web or non-web transaction as one logical unit of work in a software application. After you manually <em>instrument</em> transactions in your source code by adding New Relic functions, you can"
      },
      "id": "603ec08fe7b9d229232a0810"
    },
    {
      "sections": [
        "Enable distributed tracing for your C applications",
        "Enable distributed tracing",
        "Important",
        "Instrument transactions and HTTP requests"
      ],
      "title": "Enable distributed tracing for your C applications ",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "028724e00f733d612f6226d5fd574c392992dc08",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/enable-distributed-tracing-your-c-applications/",
      "published_at": "2021-06-08T17:12:12Z",
      "updated_at": "2021-03-16T02:40:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to enable and instrument distributed tracing for the New Relic's C SDK. Enable distributed tracing To enable distributed tracing for a New Relic-monitored C application: Create a default newrelic_app_config_t and set the distributed_tracing.enabled field to true. newrelic_app_config_t* config = newrelic_create_app_config(app_name, license_key); config->distributed_tracing.enabled = true; Copy Continue with the procedures to instrument transactions and HTTP requests. Important Span events can be enabled/disabled separately from distributed tracing. Instrument transactions and HTTP requests For transactions that occur in multiple services, the distributed trace payload contains information that allows New Relic to stitch them together into a complete transaction trace. However, if New Relic-monitored services are not sending trace context to each other, it will result in incomplete trace details. For more information, see the documentation about passing the distributed tracing API header and the C SDK's distributed tracing documentation on GitHub. If you want to... Use this Create and return a payload to be sent to the called service newrelic_create_distributed_trace_payload() Copy Accept a payload sent from the first service newrelic_accept_distributed_trace_payload() Copy This will link these services together in a trace. Return a base64-encoded JSON string representation of the payload newrelic_create_distributed_trace_payload_httpsafe() Copy This offers the same behavior as newrelic_create_distributed_trace_payload(). Accept a base64-encoded string for the payload newrelic_accept_distributed_trace_payload_httpsafe() Copy This offers the same behavior as newrelic_accept_distributed_trace_payload().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.09091,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable distributed tracing for your <em>C</em> applications ",
        "sections": "Enable distributed tracing for your <em>C</em> applications",
        "tags": "<em>Agents</em>",
        "body": "Read on to learn how to enable and <em>instrument</em> distributed tracing for the New Relic&#x27;s <em>C</em> <em>SDK</em>. Enable distributed tracing To enable distributed tracing for a New Relic-monitored <em>C</em> application: Create a default newrelic_app_config_t and set the distributed_tracing.enabled field to true"
      },
      "id": "603ec26f28ccbcb2d9eba78e"
    },
    {
      "sections": [
        "Use default or custom attributes (C SDK)",
        "View and use attributes",
        "C-specific attributes",
        "Important"
      ],
      "title": "Use default or custom attributes (C SDK)",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "7fb0ceea8c4be2c78e12a226ccf00fbd175f13da",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/use-default-or-custom-attributes-c-sdk/",
      "published_at": "2021-06-08T17:55:26Z",
      "updated_at": "2021-03-13T02:57:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic, attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can help you gain greater insight into your application and query your data. View and use attributes Both default APM attributes and custom attributes for your C application appear in: APM transaction traces and error analytics APM events C-specific attributes Important Before creating custom attributes, review New Relic's list of reserved terms used by NRQL. Otherwise unexpected results may occur. To add custom attributes to your C application, call one of the attribute functions in the C SDK API; for example, newrelic_add_attribute_double(). The key name for your custom attribute depends on what you specify when you call the function.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.65497,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use default or <em>custom</em> attributes (<em>C</em> <em>SDK</em>)",
        "sections": "Use default or <em>custom</em> attributes (<em>C</em> <em>SDK</em>)",
        "tags": "<em>Agents</em>",
        "body": ", call one of the attribute functions in the <em>C</em> <em>SDK</em> API; for example, newrelic_add_attribute_double(). The key name for your custom attribute depends on what you specify when you call the function."
      },
      "id": "6043f203196a673dd2960f37"
    }
  ],
  "/docs/agents/c-sdk/instrumentation/instrument-your-app-c-sdk": [
    {
      "sections": [
        "Guide to using the C SDK API",
        "Ensure your customization is thread-safe",
        "Monitor transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "Instrument calls to external services",
        "Collect or log errors",
        "Send custom data from your app",
        "Custom events",
        "Tip",
        "Custom event attributes",
        "Custom metrics",
        "Important",
        "Monitor desktop browser performance",
        "Change configuration settings"
      ],
      "title": "Guide to using the C SDK API",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "fd96697be408715e6330a91b237c5fb6b5042bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/guide-using-c-sdk-api/",
      "published_at": "2021-06-08T19:09:11Z",
      "updated_at": "2021-03-16T09:07:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's C SDK monitors your applications and microservices to help you identify and solve performance issues. C applications run from a compiled, native binary file. In order to monitor transactions, you must manually instrument your code by adding New Relic methods to it. This guide helps you to decide which method to use. The method's code, required parameters, and examples reside in New Relic's C SDK documentation on GitHub. Ensure your customization is thread-safe The C SDK supports instrumentation of multi-threaded applications, but it must be initialized before instrumenting multiple threads. When calling any of the following functions, ensure that they are called on the main thread before any other C SDK functions are called: newrelic_configure_log newrelic_init Monitor transactions Before you manually instrument your code to monitor transactions: Check the C SDK compatibility and requirements for your app. Make sure you are using the latest version of the C SDK library, and update as needed. If you want to... Use this method... Start timing a web transaction newrelic_start_web_transaction() Start timing a non-web transaction newrelic_start_non_web_transaction() Stop timing a transaction newrelic_end_transaction() Prevent a transaction from reporting to New Relic newrelic_ignore_transaction() Time specific methods using segments If a transaction is already visible in New Relic, but you do not have enough data about a particular method that was called during that transaction, you can instrument segments. For example, if you want to time a method that has complex logic, you can create a segment for each of the methods in the transaction. To instrument a method within an existing transaction, create segments for any of the following: External services Functions or other arbitrary blocks of code (using custom segments) Datastores Slow query traces (SQL datastores only) If you want to... Use this method... Start timing a segment newrelic_start_datastore_segment()newrelic_start_external_segment()newrelic_start_segment() Stop timing a segment newrelic_end_segment() Manually parent segments newrelic_set_segment_parent() and newrelic_set_segment_parent_root() This is useful, for example, with an asynchronous process when you want to visualize a segment as a child of the transaction's top-level call. For more information, see the manual segment parenting documentation on GitHub. Segments are recorded on the active transaction. When adding a segment to an active transaction, you need access to the newrelic_txn_t* or transaction pointer, returned by newrelic_start_web_transaction() or newrelic_start_non_web_transaction(). Enhance the metadata of a transaction You can manage the metadata that New Relic reports for transactions. This is useful when you want a different level of detail for your transactions. For example: If you are experiencing a metric grouping issue, you can change the default names for your transactions to make them more identifiable. If you want to create dashboards for your transactions, you can add custom attributes. If you want to... Use this method... Add metadata (such as your customer's account name or subscription level) to your transaction Add custom attributes to your transaction based on their type: newrelic_add_attribute_int() newrelic_add_attribute_string() newrelic_add_attribute_long() newrelic_add_attribute_double() Instrument calls to external services Use these methods to collect data about your app's connections to other apps or databases: If you want to... Use this method... See the path that a request takes as it travels through a distributed system Follow the procedures to enable and instrument distributed tracing. Time a call to an external resource (such as an external service, database server, or message queue) Follow the procedures to Instrument calls to external segments. Collect or log errors The C SDK detects errors automatically. If you want to change the way it reports errors to New Relic, change the error collector configuration. If you want to... Use this method... Set logging levels for your app Use newrelic_configure_log() to configure the C SDK logs and command-line flags to configure the C daemon logs. For more information, see the C SDK logging documentation. Report an error newrelic_notice_error() Send custom data from your app To record custom data with the C SDK, you can use any of the following methods: Custom events: At New Relic, event data is a fundamental data type. Event data represents a record of a single event at a particular moment in time. This is useful to view or query specific details. Custom event attributes: To include additional metadata about the event, you can add key/value pairs (custom-attributes) to your custom event. Custom metrics: Metric timeslice data is the statistical measure of data that New Relic aggregates so that you can view it in the UI and chart it. Typically metric data has a longer retention period than event data. Custom events The C SDK provides a custom events API that allows you to send custom events to New Relic. To send an event, start a transaction and use the newrelic_create_custom_event and newrelic_record_custom_event functions. For example: // txn is a newrelic_txn_t*, created via newrelic_start_web_transaction newrelic_custom_event_t* custom_event=0; custom_event = newrelic_create_custom_event(\"aTypeForYourEvent\"); newrelic_record_custom_event(txn, &custom_event); Copy Be sure to review the custom data requirements and limits for guidance on what values are and are not allowed inside your custom event. For more information, see Custom events in APM. Tip If you created a custom event but need to remove it before the transaction has ended, use newrelic_discard_custom_event(&custom_event);. Custom event attributes You can also add int, long, double, and char* (string) attributes to your custom event by using the newrelic_custom_event_add_* family of functions. For example: // Example custom attributes: newrelic_custom_event_t* custom_event=0; custom_event = newrelic_create_custom_event(\"aTypeForYourEvent\"); newrelic_custom_event_add_attribute_int(custom_event, \"keya\", 42); newrelic_custom_event_add_attribute_long(custom_event, \"keyb\", 84); newrelic_custom_event_add_attribute_double(custom_event, \"keyc\", 42.42); newrelic_custom_event_add_attribute_string(custom_event, \"keyd\", \"A string\"); newrelic_record_custom_event(txn, &custom_event); Copy For more information, see the documentation about custom attributes. Custom metrics The C SDK provides the newrelic_record_custom_metric() function. This allows you to record time-based performance data using an API call, such as: Transaction timing data Computer resource data Subscription or purchasing data To create a custom metric, provide a name or other identifier and an amount of time in milliseconds to the function, along with the active transaction. Important Always prefix custom metric names with Custom/. For example: // txn is a newrelic_txn_t*, created via newrelic_start_web_transaction // Record a metric value of 100ms in the transaction txn newrelic_record_custom_metric(txn, \"Custom/MyMetric/My_label\", 100); Copy For more information, see Collect custom metrics. Here are some ways to use your custom data. For code details and examples for these options, see the New Relic globals documentation on GitHub. If you want to... Use this method... Create a custom event to populate with a timestamp and attributes. newrelic_create_custom_event() Timestamp and add the custom event to the current transaction so you can query or visualize it. newrelic_record_custom_event() Enhance your custom event with additional metadata. Add custom event attributes to your custom event based on type: newrelic_custom_event_add_attribute_double() newrelic_custom_event_add_attribute_int() newrelic_custom_event_add_attribute_long() newrelic_custom_event_add_attribute_string() Discard a custom event after it was created, but before its transaction has ended, to avoid reporting it to New Relic. newrelic_discard_custom_event This is necessary to free the allocated memory for your unwanted custom event in order to avoid leaks in your program. Report a custom performance duration that you can search or chart. newrelic_record_custom_metric() Monitor desktop browser performance To monitor desktop browser performance for your application, install the browser agent using the copy/paste method. Change configuration settings Typically the default settings for your application's configuration do not need to be changed. However, when necessary, you can adjust some of the settings. For more information, see the C SDK configuration documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.13148,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>C</em> <em>SDK</em> API",
        "sections": "Guide to using the <em>C</em> <em>SDK</em> API",
        "tags": "<em>Agents</em>",
        "body": "New Relic&#x27;s <em>C</em> <em>SDK</em> monitors your applications and microservices to help you identify and solve performance issues. <em>C</em> applications run from a compiled, native binary file. In order to monitor transactions, you must manually <em>instrument</em> your code by adding New Relic methods to it. This guide helps you"
      },
      "id": "603ec04928ccbc252beba785"
    },
    {
      "sections": [
        "Enable distributed tracing for your C applications",
        "Enable distributed tracing",
        "Important",
        "Instrument transactions and HTTP requests"
      ],
      "title": "Enable distributed tracing for your C applications ",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "028724e00f733d612f6226d5fd574c392992dc08",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/enable-distributed-tracing-your-c-applications/",
      "published_at": "2021-06-08T17:12:12Z",
      "updated_at": "2021-03-16T02:40:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to enable and instrument distributed tracing for the New Relic's C SDK. Enable distributed tracing To enable distributed tracing for a New Relic-monitored C application: Create a default newrelic_app_config_t and set the distributed_tracing.enabled field to true. newrelic_app_config_t* config = newrelic_create_app_config(app_name, license_key); config->distributed_tracing.enabled = true; Copy Continue with the procedures to instrument transactions and HTTP requests. Important Span events can be enabled/disabled separately from distributed tracing. Instrument transactions and HTTP requests For transactions that occur in multiple services, the distributed trace payload contains information that allows New Relic to stitch them together into a complete transaction trace. However, if New Relic-monitored services are not sending trace context to each other, it will result in incomplete trace details. For more information, see the documentation about passing the distributed tracing API header and the C SDK's distributed tracing documentation on GitHub. If you want to... Use this Create and return a payload to be sent to the called service newrelic_create_distributed_trace_payload() Copy Accept a payload sent from the first service newrelic_accept_distributed_trace_payload() Copy This will link these services together in a trace. Return a base64-encoded JSON string representation of the payload newrelic_create_distributed_trace_payload_httpsafe() Copy This offers the same behavior as newrelic_create_distributed_trace_payload(). Accept a base64-encoded string for the payload newrelic_accept_distributed_trace_payload_httpsafe() Copy This offers the same behavior as newrelic_accept_distributed_trace_payload().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.09091,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable distributed tracing for your <em>C</em> applications ",
        "sections": "Enable distributed tracing for your <em>C</em> applications",
        "tags": "<em>Agents</em>",
        "body": "Read on to learn how to enable and <em>instrument</em> distributed tracing for the New Relic&#x27;s <em>C</em> <em>SDK</em>. Enable distributed tracing To enable distributed tracing for a New Relic-monitored <em>C</em> application: Create a default newrelic_app_config_t and set the distributed_tracing.enabled field to true"
      },
      "id": "603ec26f28ccbcb2d9eba78e"
    },
    {
      "sections": [
        "Use default or custom attributes (C SDK)",
        "View and use attributes",
        "C-specific attributes",
        "Important"
      ],
      "title": "Use default or custom attributes (C SDK)",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "7fb0ceea8c4be2c78e12a226ccf00fbd175f13da",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/use-default-or-custom-attributes-c-sdk/",
      "published_at": "2021-06-08T17:55:26Z",
      "updated_at": "2021-03-13T02:57:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic, attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can help you gain greater insight into your application and query your data. View and use attributes Both default APM attributes and custom attributes for your C application appear in: APM transaction traces and error analytics APM events C-specific attributes Important Before creating custom attributes, review New Relic's list of reserved terms used by NRQL. Otherwise unexpected results may occur. To add custom attributes to your C application, call one of the attribute functions in the C SDK API; for example, newrelic_add_attribute_double(). The key name for your custom attribute depends on what you specify when you call the function.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.65497,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use default or <em>custom</em> attributes (<em>C</em> <em>SDK</em>)",
        "sections": "Use default or <em>custom</em> attributes (<em>C</em> <em>SDK</em>)",
        "tags": "<em>Agents</em>",
        "body": ", call one of the attribute functions in the <em>C</em> <em>SDK</em> API; for example, newrelic_add_attribute_double(). The key name for your custom attribute depends on what you specify when you call the function."
      },
      "id": "6043f203196a673dd2960f37"
    }
  ],
  "/docs/agents/c-sdk/instrumentation/use-default-or-custom-attributes-c-sdk": [
    {
      "sections": [
        "Instrument your app with the C SDK",
        "Instrument a transaction",
        "Instrument segments",
        "Instrument calls to external services",
        "Instrument calls to arbitrary code (custom segments)",
        "Instrument calls to datastores",
        "Tip",
        "Report slow query traces for datastore segments (SQL only)",
        "Important",
        "Instrument errors",
        "Avoid metric grouping issues"
      ],
      "title": "Instrument your app with the C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "dc21642bac9d779820a40eea8601434c4242f425",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/instrument-your-app-c-sdk/",
      "published_at": "2021-06-08T17:21:51Z",
      "updated_at": "2021-03-16T13:43:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In order to monitor any application on Linux using a language that can import C libraries, you must: Create a config using newrelic_new_app_config(), connect to the daemon using newrelic_init(), and connect your application using newrelic_create_app(). For more information, see the C SDK installation procedures. Manually instrument transactions using the C SDK, as described in this document. New Relic defines a web or non-web transaction as one logical unit of work in a software application. After you manually instrument transactions in your source code by adding New Relic functions, you can view the data on the Transactions page in New Relic. You can also instrument segments of a transaction and errors. Instrument a transaction To instrument a transaction so you can monitor it, wrap the New Relic functions that start and stop instrumentation around the transaction. The function that you use depends on whether you want to instrument a web or non-web transaction. In the following example, the app is created after a call to newrelic_create_app(). For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Add the following code immediately before the transaction that you want to monitor, supplying the required parameters. For web transactions: // Example code: newrelic_txn_t *txn; /* ... */ txn = newrelic_start_web_transaction(app, \"NAME_YOUR_TRANSACTION\"); Copy For non-web transactions: // Example code: newrelic_txn_t *txn; /* ... */ txn = newrelic_start_non_web_transaction(app, \"NAME_YOUR_TRANSACTION\"); Copy Add newrelic_end_transaction() immediately after the web or non-web transaction that you want to monitor, supplying a pointer the transaction, &txn, as a parameter. Instrument segments Once you instrument a transaction using the C SDK, you can instrument segments in it. By instrumenting segments, you can monitor the individual functions and calls inside a transaction. Segments example You have a transaction associated with a checkout process, which processes both shipping information and credit card information. You can instrument your application to break that transaction up into two segments: one segment for shipping and one segment for payment. You can instrument segments to monitor the following kinds of calls: External services using external segments Custom segments for arbitrary code Datastores using datastore segments Slow query traces (SQL databases only) For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to external services To monitor calls to external services, instrument external segments that are within an instrumented transaction. External segments appear in the Transactions page's Breakdown table and the External services page. To instrument an external segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Create a newrelic_external_segment_params_t that describes the external segment, supplying the required parameters. Add newrelic_start_external_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to arbitrary code (custom segments) To monitor calls to arbitrary code, instrument custom segments that are within an instrumented transaction. Custom segments appear in the Breakdown table on the Transactions page. To instrument a custom segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Add newrelic_start_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to datastores To monitor calls to datastores, instrument the datastore segments within an instrumented transaction. Datastore segments appear in the Breakdown table and Databases tab on the Transactions page in New Relic. You can also view datastore segments as a databaseDuration attribute of APM Transaction events. To instrument a datastore segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Create a newrelic_datastore_segment_params_t that describes the datastore segment. Add newrelic_start_datastore_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Tip To configure how the database name and database instance are reported, use the newrelic_datastore_segment_config_t. Report slow query traces for datastore segments (SQL only) Important You can report slow query traces for SQL databases only. To report slow query trace data for datastore segments that take longer than the time you specify, enable these settings in your newrelic_app_config_t: Enable slow query tracing by setting transaction_tracer.datastore_reporting.enabled to true. To set the threshold, add a length of time in microseconds to transaction_tracer.datastore_reporting.threshold_us. Then, if a datastore call takes longer than the threshold, the C SDK reports it as a slow query. To view slow query trace details, use the Databases and Slow queries pages in New Relic. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument errors In order to use the C SDK to monitor errors in transactions, you must manually instrument your source code by adding the newrelic_notice_error() function to it. Transaction errors and error traces appear on the Error analytics page in New Relic. The C SDK reports the total number of errors and up to 100 error traces per minute. You can also view, query, and visualize transaction errors as APM TransactionError events. Tip To include function calls in error traces, use GNU's -rdynamic linker flag to link your apps when compiling. The -rdynamic linker flag gives you more meaningful error traces. To instrument errors in transactions: Start a transaction. Record an error with newrelic_notice_error(), supplying the required parameters. End the transaction, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Avoid metric grouping issues When an account or application sends many individual metrics that could be better managed in groups, New Relic uses the term metric grouping issue or MGI to describe this situation. If your application sends unnecessarily large amounts of data to New Relic, this reduces the effectiveness of charts, tables, and reports. Metric grouping issues occur most commonly with web transactions, especially if the name is based on URLs. To help prevent this situation, see Metric grouping issues.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.16058,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Instrument</em> your app with the <em>C</em> <em>SDK</em>",
        "sections": "<em>Instrument</em> your app with the <em>C</em> <em>SDK</em>",
        "tags": "<em>Agents</em>",
        "body": " installation procedures. Manually <em>instrument</em> transactions using the <em>C</em> <em>SDK</em>, as described in this document. New Relic defines a web or non-web transaction as one logical unit of work in a software application. After you manually <em>instrument</em> transactions in your source code by adding New Relic functions, you can"
      },
      "id": "603ec08fe7b9d229232a0810"
    },
    {
      "sections": [
        "Guide to using the C SDK API",
        "Ensure your customization is thread-safe",
        "Monitor transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "Instrument calls to external services",
        "Collect or log errors",
        "Send custom data from your app",
        "Custom events",
        "Tip",
        "Custom event attributes",
        "Custom metrics",
        "Important",
        "Monitor desktop browser performance",
        "Change configuration settings"
      ],
      "title": "Guide to using the C SDK API",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "fd96697be408715e6330a91b237c5fb6b5042bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/guide-using-c-sdk-api/",
      "published_at": "2021-06-08T19:09:11Z",
      "updated_at": "2021-03-16T09:07:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's C SDK monitors your applications and microservices to help you identify and solve performance issues. C applications run from a compiled, native binary file. In order to monitor transactions, you must manually instrument your code by adding New Relic methods to it. This guide helps you to decide which method to use. The method's code, required parameters, and examples reside in New Relic's C SDK documentation on GitHub. Ensure your customization is thread-safe The C SDK supports instrumentation of multi-threaded applications, but it must be initialized before instrumenting multiple threads. When calling any of the following functions, ensure that they are called on the main thread before any other C SDK functions are called: newrelic_configure_log newrelic_init Monitor transactions Before you manually instrument your code to monitor transactions: Check the C SDK compatibility and requirements for your app. Make sure you are using the latest version of the C SDK library, and update as needed. If you want to... Use this method... Start timing a web transaction newrelic_start_web_transaction() Start timing a non-web transaction newrelic_start_non_web_transaction() Stop timing a transaction newrelic_end_transaction() Prevent a transaction from reporting to New Relic newrelic_ignore_transaction() Time specific methods using segments If a transaction is already visible in New Relic, but you do not have enough data about a particular method that was called during that transaction, you can instrument segments. For example, if you want to time a method that has complex logic, you can create a segment for each of the methods in the transaction. To instrument a method within an existing transaction, create segments for any of the following: External services Functions or other arbitrary blocks of code (using custom segments) Datastores Slow query traces (SQL datastores only) If you want to... Use this method... Start timing a segment newrelic_start_datastore_segment()newrelic_start_external_segment()newrelic_start_segment() Stop timing a segment newrelic_end_segment() Manually parent segments newrelic_set_segment_parent() and newrelic_set_segment_parent_root() This is useful, for example, with an asynchronous process when you want to visualize a segment as a child of the transaction's top-level call. For more information, see the manual segment parenting documentation on GitHub. Segments are recorded on the active transaction. When adding a segment to an active transaction, you need access to the newrelic_txn_t* or transaction pointer, returned by newrelic_start_web_transaction() or newrelic_start_non_web_transaction(). Enhance the metadata of a transaction You can manage the metadata that New Relic reports for transactions. This is useful when you want a different level of detail for your transactions. For example: If you are experiencing a metric grouping issue, you can change the default names for your transactions to make them more identifiable. If you want to create dashboards for your transactions, you can add custom attributes. If you want to... Use this method... Add metadata (such as your customer's account name or subscription level) to your transaction Add custom attributes to your transaction based on their type: newrelic_add_attribute_int() newrelic_add_attribute_string() newrelic_add_attribute_long() newrelic_add_attribute_double() Instrument calls to external services Use these methods to collect data about your app's connections to other apps or databases: If you want to... Use this method... See the path that a request takes as it travels through a distributed system Follow the procedures to enable and instrument distributed tracing. Time a call to an external resource (such as an external service, database server, or message queue) Follow the procedures to Instrument calls to external segments. Collect or log errors The C SDK detects errors automatically. If you want to change the way it reports errors to New Relic, change the error collector configuration. If you want to... Use this method... Set logging levels for your app Use newrelic_configure_log() to configure the C SDK logs and command-line flags to configure the C daemon logs. For more information, see the C SDK logging documentation. Report an error newrelic_notice_error() Send custom data from your app To record custom data with the C SDK, you can use any of the following methods: Custom events: At New Relic, event data is a fundamental data type. Event data represents a record of a single event at a particular moment in time. This is useful to view or query specific details. Custom event attributes: To include additional metadata about the event, you can add key/value pairs (custom-attributes) to your custom event. Custom metrics: Metric timeslice data is the statistical measure of data that New Relic aggregates so that you can view it in the UI and chart it. Typically metric data has a longer retention period than event data. Custom events The C SDK provides a custom events API that allows you to send custom events to New Relic. To send an event, start a transaction and use the newrelic_create_custom_event and newrelic_record_custom_event functions. For example: // txn is a newrelic_txn_t*, created via newrelic_start_web_transaction newrelic_custom_event_t* custom_event=0; custom_event = newrelic_create_custom_event(\"aTypeForYourEvent\"); newrelic_record_custom_event(txn, &custom_event); Copy Be sure to review the custom data requirements and limits for guidance on what values are and are not allowed inside your custom event. For more information, see Custom events in APM. Tip If you created a custom event but need to remove it before the transaction has ended, use newrelic_discard_custom_event(&custom_event);. Custom event attributes You can also add int, long, double, and char* (string) attributes to your custom event by using the newrelic_custom_event_add_* family of functions. For example: // Example custom attributes: newrelic_custom_event_t* custom_event=0; custom_event = newrelic_create_custom_event(\"aTypeForYourEvent\"); newrelic_custom_event_add_attribute_int(custom_event, \"keya\", 42); newrelic_custom_event_add_attribute_long(custom_event, \"keyb\", 84); newrelic_custom_event_add_attribute_double(custom_event, \"keyc\", 42.42); newrelic_custom_event_add_attribute_string(custom_event, \"keyd\", \"A string\"); newrelic_record_custom_event(txn, &custom_event); Copy For more information, see the documentation about custom attributes. Custom metrics The C SDK provides the newrelic_record_custom_metric() function. This allows you to record time-based performance data using an API call, such as: Transaction timing data Computer resource data Subscription or purchasing data To create a custom metric, provide a name or other identifier and an amount of time in milliseconds to the function, along with the active transaction. Important Always prefix custom metric names with Custom/. For example: // txn is a newrelic_txn_t*, created via newrelic_start_web_transaction // Record a metric value of 100ms in the transaction txn newrelic_record_custom_metric(txn, \"Custom/MyMetric/My_label\", 100); Copy For more information, see Collect custom metrics. Here are some ways to use your custom data. For code details and examples for these options, see the New Relic globals documentation on GitHub. If you want to... Use this method... Create a custom event to populate with a timestamp and attributes. newrelic_create_custom_event() Timestamp and add the custom event to the current transaction so you can query or visualize it. newrelic_record_custom_event() Enhance your custom event with additional metadata. Add custom event attributes to your custom event based on type: newrelic_custom_event_add_attribute_double() newrelic_custom_event_add_attribute_int() newrelic_custom_event_add_attribute_long() newrelic_custom_event_add_attribute_string() Discard a custom event after it was created, but before its transaction has ended, to avoid reporting it to New Relic. newrelic_discard_custom_event This is necessary to free the allocated memory for your unwanted custom event in order to avoid leaks in your program. Report a custom performance duration that you can search or chart. newrelic_record_custom_metric() Monitor desktop browser performance To monitor desktop browser performance for your application, install the browser agent using the copy/paste method. Change configuration settings Typically the default settings for your application's configuration do not need to be changed. However, when necessary, you can adjust some of the settings. For more information, see the C SDK configuration documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.13148,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>C</em> <em>SDK</em> API",
        "sections": "Guide to using the <em>C</em> <em>SDK</em> API",
        "tags": "<em>Agents</em>",
        "body": "New Relic&#x27;s <em>C</em> <em>SDK</em> monitors your applications and microservices to help you identify and solve performance issues. <em>C</em> applications run from a compiled, native binary file. In order to monitor transactions, you must manually <em>instrument</em> your code by adding New Relic methods to it. This guide helps you"
      },
      "id": "603ec04928ccbc252beba785"
    },
    {
      "sections": [
        "Enable distributed tracing for your C applications",
        "Enable distributed tracing",
        "Important",
        "Instrument transactions and HTTP requests"
      ],
      "title": "Enable distributed tracing for your C applications ",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "028724e00f733d612f6226d5fd574c392992dc08",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/enable-distributed-tracing-your-c-applications/",
      "published_at": "2021-06-08T17:12:12Z",
      "updated_at": "2021-03-16T02:40:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to enable and instrument distributed tracing for the New Relic's C SDK. Enable distributed tracing To enable distributed tracing for a New Relic-monitored C application: Create a default newrelic_app_config_t and set the distributed_tracing.enabled field to true. newrelic_app_config_t* config = newrelic_create_app_config(app_name, license_key); config->distributed_tracing.enabled = true; Copy Continue with the procedures to instrument transactions and HTTP requests. Important Span events can be enabled/disabled separately from distributed tracing. Instrument transactions and HTTP requests For transactions that occur in multiple services, the distributed trace payload contains information that allows New Relic to stitch them together into a complete transaction trace. However, if New Relic-monitored services are not sending trace context to each other, it will result in incomplete trace details. For more information, see the documentation about passing the distributed tracing API header and the C SDK's distributed tracing documentation on GitHub. If you want to... Use this Create and return a payload to be sent to the called service newrelic_create_distributed_trace_payload() Copy Accept a payload sent from the first service newrelic_accept_distributed_trace_payload() Copy This will link these services together in a trace. Return a base64-encoded JSON string representation of the payload newrelic_create_distributed_trace_payload_httpsafe() Copy This offers the same behavior as newrelic_create_distributed_trace_payload(). Accept a base64-encoded string for the payload newrelic_accept_distributed_trace_payload_httpsafe() Copy This offers the same behavior as newrelic_accept_distributed_trace_payload().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.09091,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable distributed tracing for your <em>C</em> applications ",
        "sections": "Enable distributed tracing for your <em>C</em> applications",
        "tags": "<em>Agents</em>",
        "body": "Read on to learn how to enable and <em>instrument</em> distributed tracing for the New Relic&#x27;s <em>C</em> <em>SDK</em>. Enable distributed tracing To enable distributed tracing for a New Relic-monitored <em>C</em> application: Create a default newrelic_app_config_t and set the distributed_tracing.enabled field to true"
      },
      "id": "603ec26f28ccbcb2d9eba78e"
    }
  ],
  "/docs/agents/c-sdk/troubleshooting/generate-logs-troubleshooting-c-sdk": [
    {
      "sections": [
        "No data appears (C SDK)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (C SDK)",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Troubleshooting"
      ],
      "external_id": "90e3980f888309fa51fc8d8629b56bacca55db7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/troubleshooting/no-data-appears-c-sdk/",
      "published_at": "2021-06-09T02:18:31Z",
      "updated_at": "2021-03-16T04:28:24Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You installed the New Relic C SDK, generated traffic for your app, and waited a few minutes, but you still do not see data reporting in APM. Solution These troubleshooting tips are approximately ordered from the most common to least common issue. Check the output in the C SDK and daemon log files for errors. Make sure the daemon process (newrelic-daemon) is up and running so that it is invoked before starting your instrumented application. Verify your app's name and license key in your C SDK configuration. Make sure you call: newrelic_create_app() newrelic_start_web_transaction() or newrelic_start_non_web_transaction() as applicable newrelic_end_transaction() Also make sure none of these calls returns false or NULL. If necessary, check the C SDK version using newrelic_version(), and update your C SDK library to the latest release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.998055,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>C</em> <em>SDK</em>)",
        "sections": "No data appears (<em>C</em> <em>SDK</em>)",
        "tags": "<em>Agents</em>",
        "body": "Problem You installed the New Relic <em>C</em> <em>SDK</em>, generated traffic for your app, and waited a few minutes, but you still do not see data reporting in APM. Solution These <em>troubleshooting</em> tips are approximately ordered from the most common to least common issue. Check the output in the <em>C</em> <em>SDK</em> and daemon log"
      },
      "id": "603e8815e7b9d264312a07de"
    },
    {
      "sections": [
        "Update your C SDK library",
        "Update your C SDK code library"
      ],
      "title": "Update your C SDK library",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "3fb14c2fbe0c15f6499f5ec50bbcfcb05081b3bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/update-your-c-sdk-library/",
      "published_at": "2021-06-08T17:12:14Z",
      "updated_at": "2021-03-11T06:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To ensure you have the most up-to-date version of the New Relic C SDK for your application's code library, check the release notes. Update your C SDK code library To update your application's code library to the latest version of New Relic's C SDK: Review the C SDK library changes to verify your code is compatible. Manually update the code for your app as applicable. Compile the C SDK code, using the make command, to create the latest version of the libnewrelic.a and link it into your application or service. If applicable, redeploy your application to your test environment. Generate traffic for your application, then check your its c_sdk.log file and newrelic-daemon.log output for any errors. Redeploy your application to your production environment. Wait a few minutes for your application to send data to New Relic. Then, check your application's performance in New Relic. If no data appears within a few minutes, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.822975,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update your <em>C</em> <em>SDK</em> library",
        "sections": "Update your <em>C</em> <em>SDK</em> library",
        "tags": "<em>Agents</em>",
        "body": " for your application, then check your its <em>c_sdk</em>.log file and newrelic-daemon.log output for any errors. Redeploy your application to your production environment. Wait a few minutes for your application to send data to New Relic. Then, check your application&#x27;s performance in New Relic. If no data appears within a few minutes, follow the <em>troubleshooting</em> tips."
      },
      "id": "6043ed05e7b9d282805799d2"
    },
    {
      "sections": [
        "Install the C SDK: Compile and link your code",
        "Tip",
        "Add the C SDK to your code",
        "1. Verify requirements.",
        "2. Include the provided header file.",
        "3. Configure logging.",
        "4. Be ready to provide a meaningful app name.",
        "5. Finish instrumenting your code.",
        "6. Compile and link your app.",
        "7. Start the daemon and check logs.",
        "View app performance in New Relic"
      ],
      "title": "Install the C SDK: Compile and link your code",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "c764f1c209bc5c5cd23cecf0d57d84a293325c98",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/install-c-sdk-compile-link-your-code/",
      "published_at": "2021-06-09T01:26:07Z",
      "updated_at": "2021-03-16T13:43:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our C SDK auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic C SDK installation. Add C data Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add the C SDK to your code To monitor your application with New Relic's C SDK, instrument the features you want to use: Web transactions, transaction events, non-web transactions Segments (for additional levels of timing details) Attributes Errors Then compile and link your app against the C SDK static library. To install the C SDK into your application's code library, follow this procedure. 1. Verify requirements. Make sure your application meets New Relic's compatibility and requirements for the C SDK. Make sure you have a New Relic license key. 2. Include the provided header file. #include \"libnewrelic.h\" Copy 3. Configure logging. Follow the procedures to configure logging for both the C SDK and the daemon. For example: if (!newrelic_configure_log(\"./c_sdk.log\", NEWRELIC_LOG_INFO)) { printf(\"Error configuring logging.\\n\"); return -1; } Copy 4. Be ready to provide a meaningful app name. Be prepared to provide a meaningful app name in your initial application configuration; for example: newrelic_app_config_t* config; /* ... */ config = newrelic_create_app_config(\"Your Application Name\", \"LICENSE_KEY_HERE\"); Copy You may give your application up to three different names, separated by ;. Giving your application multiple names allows you to aggregate metrics for multiple agents across an entire app or service; for example: config = newrelic_create_app_config(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\", \"LICENSE_KEY_HERE\"); Copy With the application configured, you can create a new application to connect to the daemon. newrelic_app_t* app; /* ... */ if (!newrelic_init(NULL, 0)) { printf(\"Error connecting to daemon.\\n\"); return -1; } /* Wait up to 10 seconds for the SDK to connect to the daemon */ app = newrelic_create_app(config, 10000); newrelic_destroy_app_config(&config); Copy 5. Finish instrumenting your code. To finish instrumenting your code, refer to the example programs in the C SDK Examples documentation on GitHub. For more information about source code and features, see the C SDK's source documentation for libnewrelic.h on GitHub. 6. Compile and link your app. The C SDK's libnewrelic.a is a static library that is already linked with the libpcre and libpthread libraries. To avoid symbol collisions in this linking step, be sure to link against each of these libraries. In addition, to take full advantage of error traces in APM's Error analytics page, link your application using GNU's -rdynamic linker flag. This will allow more meaningful information to appear in the stack trace for the error recording on a transaction using the C SDK's newrelic_notice_error API call. For example: gcc -o test_app test_app.c -L. -lnewrelic -lpcre -lm -pthread -rdynamic Copy 7. Start the daemon and check logs. Start the C SDK's daemon. For example: ./newrelic-daemon -f -logfile newrelic-daemon.log -loglevel debug Copy Check the output in the c_sdk.log and newrelic-daemon.log files. The C SDK's architecture requires that the daemon must be invoked first before your instrumented application is invoked. Tip To see all of the available options for the C daemon: At the command line, type: ./newrelic-daemon --help Copy For more information, see the C SDK GUIDE.md. View app performance in New Relic To view your app's performance with APM: Generate some traffic for your app, then wait a few minutes for your app to send data to New Relic. Explore your app's data in the APM UI. If no data appears within a few minutes, check your c_sdk.log and newrelic-daemon.log files for errors. If you still have problems, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 97.78794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the <em>C</em> <em>SDK</em>: <em>Compile</em> and link your <em>code</em>",
        "sections": "Install the <em>C</em> <em>SDK</em>: <em>Compile</em> and link your <em>code</em>",
        "tags": "<em>Agents</em>",
        "body": "Our <em>C</em> <em>SDK</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>C</em> <em>SDK</em> installation. Add <em>C</em> data Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join"
      },
      "id": "603e87e528ccbc3e4aeba787"
    }
  ],
  "/docs/agents/c-sdk/troubleshooting/no-data-appears-c-sdk": [
    {
      "sections": [
        "Generate logs for troubleshooting (C SDK)",
        "Problem",
        "Solution",
        "Caution",
        "C SDK logs",
        "Daemon logs"
      ],
      "title": "Generate logs for troubleshooting (C SDK)",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Troubleshooting"
      ],
      "external_id": "10921dbb38eaaebe2d9f1595402a82d2f3503841",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/troubleshooting/generate-logs-troubleshooting-c-sdk/",
      "published_at": "2021-06-08T17:55:26Z",
      "updated_at": "2021-03-16T13:45:08Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You encounter problems sending data to New Relic with an application instrumented with the C SDK, but you are not sure what the cause is. Solution The New Relic C SDK and its daemon have their own logs: C SDK logs: These logs are generated due to errors in how you've instrumented your code using the New Relic C SDK API calls. Daemon logs: These are logs related to transmission of data to New Relic. To help troubleshoot an issue, we recommend generating logs at their highest level: Set the C SDK log to verbose level and the daemon log to debug level. Run both logs for 5-10 minutes. After generating logs for troubleshooting, return logging for both the C SDK and daemon to their default levels. Caution Elevated logging levels can create large log files and have a performance impact. Generate logs at this level only as long as necessary for troubleshooting. C SDK logs The C SDK has four log levels, as defined by the enum _newrelic_loglevel_t in libnewrelic.h. By default, logs are set to NEWRELIC_LOG_INFO and output to standard error. Log levels include: NEWRELIC_LOG_ERROR NEWRELIC_LOG_WARNING NEWRELIC_LOG_INFO (default) NEWRELIC_LOG_DEBUG Copy To set a different log level for troubleshooting purposes: Call newrelic_configure_log() in your application code, and set a log level. For example: newrelic_configure_log(\"./c_sdk.log\", NEWRELIC_LOG_INFO); Copy Daemon logs The C SDK daemon has four log levels. By default, logs are set to info and output to standard error. Log levels include: error warning info (default) debug Copy These log levels are invoked using flags from the command line: --logfile <DAEMON_FILE_NAME>. Sets the path to the log file. --loglevel <LOG_LEVEL>. Sets the log level. Default: info. Copy To set a different log level for troubleshooting purposes: From the command line, set a different log level flag. For example: ./newrelic-daemon -f -logfile stdout -loglevel debug Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.69708,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate logs for <em>troubleshooting</em> (<em>C</em> <em>SDK</em>)",
        "sections": "Generate logs for <em>troubleshooting</em> (<em>C</em> <em>SDK</em>)",
        "tags": "<em>Agents</em>",
        "body": " using the New Relic <em>C</em> <em>SDK</em> API calls. Daemon logs: These are logs related to transmission of data to New Relic. To help <em>troubleshoot</em> an issue, we recommend generating logs at their highest level: Set the <em>C</em> <em>SDK</em> log to verbose level and the daemon log to debug level. Run both logs for 5-10 minutes"
      },
      "id": "603e884c28ccbc41e5eba784"
    },
    {
      "sections": [
        "Update your C SDK library",
        "Update your C SDK code library"
      ],
      "title": "Update your C SDK library",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "3fb14c2fbe0c15f6499f5ec50bbcfcb05081b3bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/update-your-c-sdk-library/",
      "published_at": "2021-06-08T17:12:14Z",
      "updated_at": "2021-03-11T06:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To ensure you have the most up-to-date version of the New Relic C SDK for your application's code library, check the release notes. Update your C SDK code library To update your application's code library to the latest version of New Relic's C SDK: Review the C SDK library changes to verify your code is compatible. Manually update the code for your app as applicable. Compile the C SDK code, using the make command, to create the latest version of the libnewrelic.a and link it into your application or service. If applicable, redeploy your application to your test environment. Generate traffic for your application, then check your its c_sdk.log file and newrelic-daemon.log output for any errors. Redeploy your application to your production environment. Wait a few minutes for your application to send data to New Relic. Then, check your application's performance in New Relic. If no data appears within a few minutes, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.822975,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update your <em>C</em> <em>SDK</em> library",
        "sections": "Update your <em>C</em> <em>SDK</em> library",
        "tags": "<em>Agents</em>",
        "body": " for your application, then check your its <em>c_sdk</em>.log file and newrelic-daemon.log output for any errors. Redeploy your application to your production environment. Wait a few minutes for your application to send data to New Relic. Then, check your application&#x27;s performance in New Relic. If no data appears within a few minutes, follow the <em>troubleshooting</em> tips."
      },
      "id": "6043ed05e7b9d282805799d2"
    },
    {
      "sections": [
        "Install the C SDK: Compile and link your code",
        "Tip",
        "Add the C SDK to your code",
        "1. Verify requirements.",
        "2. Include the provided header file.",
        "3. Configure logging.",
        "4. Be ready to provide a meaningful app name.",
        "5. Finish instrumenting your code.",
        "6. Compile and link your app.",
        "7. Start the daemon and check logs.",
        "View app performance in New Relic"
      ],
      "title": "Install the C SDK: Compile and link your code",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "c764f1c209bc5c5cd23cecf0d57d84a293325c98",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/install-c-sdk-compile-link-your-code/",
      "published_at": "2021-06-09T01:26:07Z",
      "updated_at": "2021-03-16T13:43:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our C SDK auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic C SDK installation. Add C data Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add the C SDK to your code To monitor your application with New Relic's C SDK, instrument the features you want to use: Web transactions, transaction events, non-web transactions Segments (for additional levels of timing details) Attributes Errors Then compile and link your app against the C SDK static library. To install the C SDK into your application's code library, follow this procedure. 1. Verify requirements. Make sure your application meets New Relic's compatibility and requirements for the C SDK. Make sure you have a New Relic license key. 2. Include the provided header file. #include \"libnewrelic.h\" Copy 3. Configure logging. Follow the procedures to configure logging for both the C SDK and the daemon. For example: if (!newrelic_configure_log(\"./c_sdk.log\", NEWRELIC_LOG_INFO)) { printf(\"Error configuring logging.\\n\"); return -1; } Copy 4. Be ready to provide a meaningful app name. Be prepared to provide a meaningful app name in your initial application configuration; for example: newrelic_app_config_t* config; /* ... */ config = newrelic_create_app_config(\"Your Application Name\", \"LICENSE_KEY_HERE\"); Copy You may give your application up to three different names, separated by ;. Giving your application multiple names allows you to aggregate metrics for multiple agents across an entire app or service; for example: config = newrelic_create_app_config(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\", \"LICENSE_KEY_HERE\"); Copy With the application configured, you can create a new application to connect to the daemon. newrelic_app_t* app; /* ... */ if (!newrelic_init(NULL, 0)) { printf(\"Error connecting to daemon.\\n\"); return -1; } /* Wait up to 10 seconds for the SDK to connect to the daemon */ app = newrelic_create_app(config, 10000); newrelic_destroy_app_config(&config); Copy 5. Finish instrumenting your code. To finish instrumenting your code, refer to the example programs in the C SDK Examples documentation on GitHub. For more information about source code and features, see the C SDK's source documentation for libnewrelic.h on GitHub. 6. Compile and link your app. The C SDK's libnewrelic.a is a static library that is already linked with the libpcre and libpthread libraries. To avoid symbol collisions in this linking step, be sure to link against each of these libraries. In addition, to take full advantage of error traces in APM's Error analytics page, link your application using GNU's -rdynamic linker flag. This will allow more meaningful information to appear in the stack trace for the error recording on a transaction using the C SDK's newrelic_notice_error API call. For example: gcc -o test_app test_app.c -L. -lnewrelic -lpcre -lm -pthread -rdynamic Copy 7. Start the daemon and check logs. Start the C SDK's daemon. For example: ./newrelic-daemon -f -logfile newrelic-daemon.log -loglevel debug Copy Check the output in the c_sdk.log and newrelic-daemon.log files. The C SDK's architecture requires that the daemon must be invoked first before your instrumented application is invoked. Tip To see all of the available options for the C daemon: At the command line, type: ./newrelic-daemon --help Copy For more information, see the C SDK GUIDE.md. View app performance in New Relic To view your app's performance with APM: Generate some traffic for your app, then wait a few minutes for your app to send data to New Relic. Explore your app's data in the APM UI. If no data appears within a few minutes, check your c_sdk.log and newrelic-daemon.log files for errors. If you still have problems, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 97.78794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the <em>C</em> <em>SDK</em>: <em>Compile</em> and link your <em>code</em>",
        "sections": "Install the <em>C</em> <em>SDK</em>: <em>Compile</em> and link your <em>code</em>",
        "tags": "<em>Agents</em>",
        "body": "Our <em>C</em> <em>SDK</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>C</em> <em>SDK</em> installation. Add <em>C</em> data Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join"
      },
      "id": "603e87e528ccbc3e4aeba787"
    }
  ],
  "/docs/agents/go-agent/api-guides/guide-using-go-agent-api": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.70583,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.3907,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    },
    {
      "sections": [
        "APM agent security: Go",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution"
      ],
      "title": "APM agent security: Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Get started"
      ],
      "external_id": "dd627ef60861ddfad5b611a3282145d093ea654c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/get-started/apm-agent-security-go/",
      "published_at": "2021-06-08T14:45:01Z",
      "updated_at": "2021-06-02T14:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Go agent default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the New Relic Go agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. HTTPS: The agent communicates with New Relic using HTTPS. High security mode settings When you enable high security mode, the default security settings are locked so that users cannot change them. In addition: You cannot create custom events. The agent strips exception messages from errors. The agent strips QueryParameters from database segments. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Setting Effects on data security HighSecurity boolean Default: false To enable high security mode, set this to true and enable high security (V2). This restricts the information you can send to New Relic. Attributes.Enabled boolean Default: true By default, you are sending some attributes to New Relic. If you do not want to send these default attributes to New Relic, set Attributes.Enabled to false. Attributes.Exclude string Default: (none) If there are specific attribute keys that you do not want to send to New Relic in transaction traces, identify them using Attributes.Exclude. This restricts the information sent to New Relic. For examples of how to disable the recording of each attribute, see their descriptions on the Go agent attributes page. CustomInsightsEvents.Enabled boolean Default: true By default, the agent records events sent to the Event API using RecordCustomEvent. If you enable high security mode, this is automatically set to false.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.52089,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>Go</em>",
        "sections": "APM <em>agent</em> security: <em>Go</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "The New Relic <em>Go</em> <em>agent</em> default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives"
      },
      "id": "603e8fa9196a67337ca83dc5"
    }
  ],
  "/docs/agents/go-agent/configuration/go-agent-configuration": [
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.08017,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    },
    {
      "sections": [
        "Go agent logging",
        "Write log files",
        "Logrus integration example",
        "For more help"
      ],
      "title": "Go agent logging",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "3eca4ea8f4b58b64841e4c465cbacde5c897de10",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-logging/",
      "published_at": "2021-06-09T01:27:09Z",
      "updated_at": "2021-03-11T12:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Go logging uses the standard Go log package and a New Relic Logger package. Logging is useful for troubleshooting your New Relic integration; for example, with installation or configuration problems. Write log files To use the Go agent methods for writing log and audit files, see log.go on the agent GitHub repo. Logrus integration example New Relic offers an integration for the Logrus logging system. Here is an example of using the New Relic Logrus integration in an application: Import both github.com/sirupsen/logrus and github.com/newrelic/go-agent/v3/integrations/nrlogrus. Set the log level and assign the Logger output to Logrus. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { logrus.SetLevel(logrus.DebugLevel) config.Logger = nrlogrus.StandardLogger() }, ) Copy For more help For logging on all New Relic agents, see New Relic agent logs and troubleshooting.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.16616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> logging",
        "sections": "<em>Go</em> <em>agent</em> logging",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "New Relic for <em>Go</em> logging uses the standard <em>Go</em> log package and a New Relic Logger package. Logging is useful for troubleshooting your New Relic integration; for example, with installation or <em>configuration</em> problems. Write log files To use the <em>Go</em> <em>agent</em> methods for writing log and audit files, see"
      },
      "id": "6043f284196a67c735960f7f"
    },
    {
      "sections": [
        "Java agent configuration: Config file",
        "Configuration file structure",
        "Tip",
        "Configuration settings precedence",
        "Configuring the Java extensions directory",
        "Create an extensions directory",
        "Specify an existing extensions directory",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (REQUIRED)",
        "agent_enabled",
        "apdex_t (DEPRECATED)",
        "appserver_port",
        "Important",
        "audit_mode",
        "ca_bundle_path",
        "use_private_ssl",
        "enable_auto_app_naming",
        "enable_auto_transaction_naming",
        "Caution",
        "enable_custom_tracing",
        "extensions.dir",
        "high_security",
        "insert_api_key",
        "labels",
        "max_stack_trace_lines",
        "proxy_host",
        "proxy_password",
        "proxy_port",
        "proxy_user",
        "proxy_scheme",
        "reactor-netty.errors.enabled",
        "send_data_on_exit",
        "send_data_on_exit_threshold",
        "send_environment_info",
        "send_jvm_props",
        "ssl (DEPRECATED)",
        "sync_startup",
        "scala_futures_as_segments",
        "Logging configuration",
        "log_daily",
        "log_file_count",
        "log_file_name",
        "log_file_path",
        "log_level",
        "log_limit_in_kbytes",
        "JMX",
        "enabled",
        "linkingMetadataMBean",
        "Attributes",
        "include",
        "exclude",
        "Transaction tracer",
        "explain_enabled",
        "explain_threshold",
        "insert_sql_max_length",
        "log_sql",
        "record_sql",
        "stack_based_naming (Play 2.x+ only)",
        "stack_trace_threshold",
        "top_n",
        "transaction_threshold",
        "slow_query_whitelist (DEPRECATED)",
        "collect_slow_queries_from",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "token_limit",
        "segment_limit",
        "Transaction segments",
        "Browser monitoring",
        "auto_instrument",
        "disabled_auto_pages",
        "External tracer",
        "exclude_request_uri",
        "Cross application tracer",
        "Error collector",
        "ignore_classes",
        "ignore_messages",
        "ignore_status_codes",
        "ignoreErrorPriority",
        "expected_classes",
        "expected_messages",
        "expected_status_codes",
        "ignore_errors (DEPRECATED)",
        "Strip exceptions",
        "whitelist (DEPRECATED)",
        "allowed_classes",
        "Thread profiler",
        "Transaction events",
        "max_samples_stored",
        "custom_request_headers",
        "Custom events",
        "Hostname configuration",
        "display_name",
        "ipv_preference",
        "Custom instrumentation",
        "trace_annotation_class_name",
        "com.newrelic.instrumentation.servlet-user",
        "System properties",
        "newrelic.config.process_host.display_name",
        "newrelic.config.file",
        "newrelic.debug",
        "newrelic.environment",
        "newrelic.home",
        "newrelic.logfile",
        "Environment variables",
        "NEW_RELIC_APP_NAME (REQUIRED)",
        "NEW_RELIC_DISTRIBUTED_TRACING_ENABLED",
        "NEW_RELIC_PROCESS_HOST_DISPLAY_NAME",
        "NEW_RELIC_LICENSE_KEY (REQUIRED)",
        "NEW_RELIC_LOG",
        "Cloud platform utilization",
        "detect_aws",
        "detect_docker",
        "Async instrumentation",
        "token_timeout",
        "segment_timeout",
        "Circuit breaker",
        "memory_threshold",
        "gc_cpu_threshold",
        "Message tracer",
        "segment_parameters.enabled",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Infinite Tracing",
        "trace_observer.host",
        "Span events",
        "Jar collector",
        "skip_temp_jars",
        "jars_per_second"
      ],
      "title": "Java agent configuration: Config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "1d61f848fa192438225eae269421b8d384915c8b",
      "image": "https://docs.newrelic.com/static/60ca967eab99ca225186310913ae2de6/8c557/java-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file/",
      "published_at": "2021-06-09T07:43:58Z",
      "updated_at": "2021-06-09T07:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent reads its configuration from the newrelic.yml file. By default the agent looks for this file in the directory that contains newrelic.jar. You can override the config file's location by setting the newrelic.config.file system property to a fully qualified file name. Configuration file structure The newrelic.yml file is split into stanzas corresponding to different environments: Test Development Staging Production (default) New Relic applies settings in the common stanza to each of these environments. You can select other environments as the default by setting the newrelic.environment system property to the environment name. Tip A newrelic.yml template is available. If you edit newrelic.yml, be careful to conform to the YAML format. Use a YAML validator to ensure the syntax is accurate before using the file with New Relic's Java agent, and follow these rules: Java agent newrelic.yml Requirements Format YML files are case sensitive. Indentations All indentations must be in increments of two characters. Other indentations will result in an Unable to parse configuration file error upon agent startup. Use the same level of indentation for data in the same stanza of the file. Indent any sub-stanzas by an additional two spaces. Changes to file You must restart your JVM host process for changes to take effect. Exception: Property changes to log_level and audit_mode do not require a restart. Property changes under circuit breaker don't require a restart. Configuration settings precedence To override any setting in the config file, use a system property override. In certain environments, environment variables can also be used to override both the config file and the system properties. The environment variables primarily exist to support Heroku. When used, server-side configuration overrides all other configuration settings. With the Java agent, server-side configuration overrides all other settings. Environment variables override Java system properties. Java properties override user configuration settings in your newrelic.yml file. User settings override the newrelic.yml default settings. Configuring the Java extensions directory The Java agent reads the configuration files on process startup. To identify the directory where the files are located, either create a new or specify an existing extensions directory: Create an extensions directory To create the extensions directory: Navigate to the directory where newrelic.jar and newrelic.yml are located. Create a directory named extensions. In newrelic.yml, check that the property extensions.dir is not set. Specify an existing extensions directory To use an existing Java extensions directory: In your newrelic.yml file, locate the common section. Use the property extensions.dir to specify the location of the file. General configuration settings Set these options in the common stanza. To override any of these options, use a newrelic.config prefixed system property. license_key (REQUIRED) Type String Default (none) This setting is required. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. app_name (REQUIRED) Type String Default (none) This setting is required. Defines the application name used to report data to New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon. For example, to report data to My Application and My Application 2 use this: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. agent_enabled Type Boolean Default true Flag to enable the agent. Use this setting to force the agent to run or not run. apdex_t (DEPRECATED) Type Float Default 1.0 The apdex_t threshold in seconds for the application's Apdex score. For Java agent versions 1.2.008 or higher, the apdex_t value is set in the UI and the value in newrelic.yml is ignored. appserver_port Type Integer Default (none) Number to differentiate JVMs for the same app on the same machine. New Relic uses host/port for uniqueness, so you can distinguish the JVMs by putting a switch like this into the startup arguments for each JVM: -Dnewrelic.config.appserver_port=8081 Copy Once you have used appserver_port to name the JVMs and restart them, you should be able to see them individually in the dropdown and in the profiling interface. Important This is only a change for New Relic; it doesn't actually affect the port on which the host communicates in any way. audit_mode Type Boolean Default false Enables plain text logging of all data sent to New Relic to the agent logfile. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. ca_bundle_path Type String Value Format /path/to/ca/cert/bundle.pem Specifies a path to a custom SSL certificate bundle that will be used by the agent to establish a secure connection to New Relic. If your custom SSL certificate bundle doesn't include certificates that are sufficient to connect to New Relic then you'll need to merge the required certs into your custom certificate bundle. use_private_ssl Type Boolean Default false The following SSL certificates are bundled into the agent jar: META-INF/certs/eu-newrelic-com.pem META-INF/certs/eu01-nr-data-net.pem META-INF/certs/newrelic-com.pem Copy By default (use_private_ssl: false) the agent will use the SSL certificates bundled into the JDK to establish a secure connection to New Relic or the custom SSL certificates bundle specified by ca_bundle_path. If you want to use the SSL certificates bundled with the agent, set use_private_ssl: true. Note: use_private_ssl will be ignored if ca_bundle_path is set. enable_auto_app_naming Type Boolean Default false Enables the reporting of data separately for each web app. Set to true to enable support for auto app naming. The name of each web app is detected automatically and the agent reports data separately for each one. This provides a finer-grained performance breakdown for web apps in New Relic. For more information, see Automatic application naming. For more methods of naming your application, see Name your Java application. enable_auto_transaction_naming Type Boolean Default true Enables component-based transaction naming. Set to true to enable component-based transaction naming. Set to false to use the URI of a web request as the name of the transaction. For more information, see Naming web transactions. Caution Unless you implement API calls to name your transactions, disabling auto-transaction naming is very likely to cause Metric grouping issues. enable_custom_tracing Type Boolean Default true Enables all instrumentation using an @Trace annotation. Disabling this causes @Trace annotations to be ignored. extensions.dir Type String Default (none) Defines the location of the optional extensions directory. If this property is not set, the agent will look for a subdirectory named extensions in the same directory as newrelic.jar and newrelic.yml. high_security Type Boolean Default false In order for high security to be enabled, this property must be set to true and the high security property in the New Relic user interface must be enabled. Enabling high security means SSL is turned on, request and message queue parameters are not collected, and queries cannot be sent to New Relic in their raw form. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. insert_api_key Type String Default (none) A valid Insert API Key for your account. This is only required for Real-time Java profiling using JFR metrics. labels Type String Default \"\" Attach tags to this app. Note that this option now enables tags, which replaced the label feature. You can still query your historical labels. max_stack_trace_lines Type Integer Default 30 Limits the number of lines the agent collects from each stack trace. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. proxy_host Type String Default (none) The proxy host through which to connect to the New Relic collector. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_password Type String Default (none) The password for proxy authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. Important The Java agent supports Basic (clear text) authentication. proxy_port Type String Default 8080 The proxy host port number. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_user Type String Default (none) The username for proxy authentication, such as Basic (clear text) authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. proxy_scheme Type String Default (none) The proxy scheme used. Setting proxy_scheme: \"https\" will allow the agent to connect through proxies using the HTTPS scheme. reactor-netty.errors.enabled Type Boolean Default true Whether errors are reported for reactor netty. If set to false, errors will be ignored. Important Only available in Java agent 6.3.0 and above. send_data_on_exit Type Boolean Default false Enable delayed JVM shutdown to give the agent a chance to send latest metric data to New Relic before JVM shutdown. send_data_on_exit_threshold Type Integer Default 60 The number of seconds after which the agent will use the send_data_on_exit setting. send_environment_info Type Boolean Default true Enable reporting of JVM settings to New Relic. send_jvm_props Type Boolean Default true When set to true, JVM properties will be sent to New Relic. ssl (DEPRECATED) Type Boolean Default true Requires connections to the New Relic collector to go over SSL. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. This work is done asynchronously to the threads that process your application code, so response times will not be directly affected by this change. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. sync_startup Type Boolean Default false Enable the agent to connect the New Relic collector immediately upon app startup. scala_futures_as_segments Important This applies to Java agent version 3.44.0 or higher. Type Boolean Default false For more concise transaction trace details, the agent does not report Scala Futures as transaction segments, and those Futures do not contribute to the transaction’s total time. Enabling scala_futures_as_segments increases your overhead. If you want Scala Futures to report as transaction segments so you can view them in a transaction trace, you can enable it: scala_futures_as_segments: enabled: true Copy Logging configuration These are part of the general configuration variables. They are broken out here because they are frequently tweaked for debugging. Some of the logging configuration variables are dynamic and do not need a host restart for them to take effect. For instance, if log files are growing too quickly, log_level can be set to a less verbose setting to reduce the reporting rate. Here is the order of precedence for configuration variables affecting log rotation. If log_daily is true, other log rotation settings are ignored. If log_file_count is 1 or 0, the size limit is ignored. Finally, the agent applies log_limit_in_kbytes. Depending on the growth rate, it is possible for the log file size to exceed the configured value by a small amount. log_daily Type Boolean Default false Set to true to roll the logs daily. Overrides the other configuration variables that affect log rotation. log_file_count Type Integer Default 1 The maximum number of log files to keep when using log rotation. log_file_name Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. log_file_path Type String Default logs subdirectory where newrelic.jar is located The log file path. Tip If log_file_path is specified, the directory must already exist. If the default value is used, the agent will attempt to create the directory. log_level Type String Default info The log verbosity level. The agent uses its own log file to keep its logging separate from that of your application. Valid options, in order of verboseness, are: off severe warning info fine finer finest This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. log_limit_in_kbytes Type Integer Default 0 The log file size in kilobytes at which log files are rotated. Set to 0 for no limit. JMX To set these options, use the jmx stanza. To override them, use a newrelic.config.jmx prefixed system property. The Java agent uses JMX to collect JVM data as well as to communicate with the JFR (Java Flight Recorder) daemon for Real-time Java profiling. enabled Type Boolean Default true This setting can be used to turn on or off all JMX functionality. linkingMetadataMBean Type Boolean Default false This setting can be enabled to allow the Java agent to expose linking metadata to the JFR daemon. Doing so allows the JFR daemon to obtain the entity GUID generated by the Java agent and link JFR data with the same APM application that is being monitored by the agent instead of as a separate entity. Important This applies to Java agent version 6.1.0 or higher. Attributes To set these options, use the attributes stanza. To override them, use a newrelic.config.attributes prefixed system property. Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. There is also an attribute stanza under each destination. For more information, see Java agent attributes, Enabling and disabling attributes and Attribute examples. enabled Type Boolean Default true This setting can be used to turn on or off all attributes. Important For security reasons, capturing custom attributes using the Custom Instrumentation Editor is set to false by default. include Type List of Strings Default (none) If attributes are enabled, attribute keys found in this list will be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. Transaction tracer These options are set in the transaction_tracer stanza and can be overridden by using a newrelic.config.transaction_tracer prefixed system property. Transaction tracing captures deep information about slow transactions and sends this to the New Relic service. The transaction includes the exact call sequence of the transactions, including any query statements issued. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true The transaction tracer is enabled by default. Set this to false to turn it off. explain_enabled Type Boolean Default true Determines whether the agent will capture the EXPLAIN plan for slow queries. Only supported for MySQL and PostgreSQL. explain_threshold Type Float Default 0.5 Threshold in seconds for query execution time below which the slow query and the EXPLAIN plan (if supported) will not be captured. Relevant to slow queries only when record_sql is set to raw or obfuscated. Relevant to EXPLAIN plans only when explain_enabled is set to true. insert_sql_max_length Type Integer Default 2000 The character limit for the SQL query string. If you have many slow SQL queries with large chunks of information, this could negatively affect performance or how quickly you see your data in New Relic. Increase the value gradually until you find the right balance of information and performance. log_sql Type Boolean Default false Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode. record_sql Type String Default obfuscated When the transaction tracer is on, query statements can optionally be recorded. The recorder has three modes: off: Send no queries. raw: Send the query statement in its original form. obfuscated: Strips out numeric and string literals. stack_based_naming (Play 2.x+ only) Type Boolean Default False Defaulted to true until Java agent version 3.12.1, when it was changed to false. This option is for Play 2.x+ only. Play/Scala instrumentation can use Thread.getStackTrace() to improve tracer naming, but at the cost of increased overhead. stack_trace_threshold Type Integer Default 0.5 Defines a threshold (in seconds) for collecting stack traces from an SQL call. When SQL statements exceed this threshold, the agent will capture the current stack trace. This is useful for pinpointing where long SQL calls originate from. top_n Type Integer Default 20 Use this setting to control the variety of your transaction traces. top_n is an integer that represents the number of unique, slow transactions that traces will be created for. If you want transaction traces to more accurately reflect the actual slowest transactions in your app, make this value lower. If you want to sample a more diverse array of transactions, make the value higher. A value of 0 would mean that only the slowest transaction is always traced. This is considered not to be optimal, though, because you may have one or two transactions that are always the slowest, and repeatedly seeing those same transaction traces will probably not give you much value. If the same transaction is often the slowest, the top_n setting allows the Java agent (over time) to sample the slowest n transactions. This gives you greater variety and more insight into your application. transaction_threshold Type String (float) Default apdex_f The time threshold used to determine when a transaction is eligible to be traced. When the transaction's response time exceeds this threshold, a transaction trace will be recorded and sent to New Relic. The default is apdex_f (default), which sets the threshold to be the \"Frustrated\" Apdex level (four times the apdex_t value). You can also set a specific time threshold by entering a float value that represents a number of seconds. slow_query_whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use collect_slow_queries_from. By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy collect_slow_queries_from Type String Default (none) By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this property (transaction_tracer.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to New Relic in transaction traces. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction traces. For more information, see the agent attribute rules. token_limit Type Integer Default 3000 Limits the number of Tokens that can be created per Transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. segment_limit Type Integer Default 3000 Limits the number of segments that can be created per transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. Transaction segments These options are set in the transaction_segments stanza and can be overridden by using a newrelic.config.transaction_segments prefixed system property. Transaction segments represent discrete pieces of work (generally method calls) and are displayed within transaction traces. Important Transaction segment attribute filtering requires Java agent version 4.10.0 or higher. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction segments. If attributes.enabled at the root level is false, no attributes will be sent to transaction segments regardless on how this property (transaction_segments.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction segments, all attribute keys found in this list will be sent to New Relic in transaction segments. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction segments. For more information, see the agent attribute rules. Browser monitoring These options are set in the browser_monitoring stanza and can be overridden by using a newrelic.config.browser_monitoring prefixed system property. Browser monitoring gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. auto_instrument Type Boolean Default true By default the agent automatically inserts API calls in compiled JSPs to inject the monitoring JavaScript into web pages. Set this attribute to false to turn off this behavior. disabled_auto_pages Type Comma-separated list of strings Default (none) When auto_instrument is true, by default all pages are instrumented. List all pages that you want the auto instrumentation to skip here. You can still use manual instrumentation on these pages. For example: browser_monitoring: disabled_auto_pages: /WEB-INF/jsp/testpage_1.jsp, /WEB-INF/jsp/testpage_2.jsp Copy attributes.enabled Type Boolean Default false This setting can be used to turn on or off all attributes for browser monitoring. This is the data you can query. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how this property under browser_monitoring is set. attributes.include Type List of Strings Default (none) If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent to New Relic in page views. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in page views. For more information, see the agent attribute rules. External tracer The external tracing options are set in the external_tracer stanza and can be overridden by using a newrelic.config.external_tracer prefixed system property. exclude_request_uri Type Boolean Default false This setting can be used to control the collection of outgoing request URIs for errors and transaction traces. Set this to true to disable collecting this information. Cross application tracer The cross application tracing options are set in the cross_application_tracer stanza and can be overridden by using a newrelic.config.cross_application_tracer prefixed system property. Cross application tracing adds request and response headers to external calls using the Apache HttpClient libraries. This provides better performance data when calling applications monitored by other New Relic Agents. enabled Type Boolean Default true Cross application tracing is enabled by default. Set this to false to turn it off. Error collector These options are set in the error_collector stanza and unless noted otherwise can be overridden by using a newrelic.config.error_collector prefixed system property. The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. Tip For how to configure errors for the Java agent, including how to configure errors via the UI, see Java agent error configuration. enabled Type Boolean Default true Enable error collection. ignore_classes Type Stanza containing a list of fully qualified class_name strings Default (none) Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy ignore_messages Type Stanza containing a fully qualified class_name and a list of messages per error class Default (none) Specify exception class names the agent should ignore. Ignored messages will not affect error rate or Apdex score, or be reported to APM. Contains yaml pairs consisting of: A fully qualified exception class name that should not be reported to APM AND A list of exception messages to match against (at least one is required) If the exception class name matches an error but the message does not, then that error will not be ignored. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_messages: com.example.MyException: - \"Some error message to ignore\" - \"Some other error message to ignore\" com.example.DifferentException: - \"Some different error message to ignore\" Copy ignore_status_codes Type Comma-separated list of strings and ranges Default 404 A comma-separated list comprised of individual and dashed ranges of HTTP status codes that should not be treated as errors. If this property is commented out in the newrelic.yml configuration file, then the 404 status code will automatically be ignored. When using server-side configuration, the status code 404 must be specified in order for it to be ignored. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_status_codes: 404,507-511 Copy ignoreErrorPriority Type Boolean Default false With default ignoreErrorPriority as false, the agent reports the last error noticed if noticeError() is called multiple times in a transaction. If set to true, the agent reports the first error noticed if noticeError() is called multiple times in a transaction. For example: error_collector: ignoreErrorPriority: true Copy expected_classes Type Stanza containing a List of fully qualified class_name strings Default (none) Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy expected_messages Type Stanza containing a fully qualified class_name and a List of messages per error class Default (none) Contains yaml pairs consisting of a fully qualified exception class name that should be marked as expected and thus prevented from affecting error rate or Apdex score and a List of exception messages to match against, the latter of which at least one is required. If the exception class name matches an error but the message does not, then that error will not be marked as expected and therefore will affect error rate and Apdex score. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_messages: com.example.MyException: - \"Some expected error message\" - \"Some other expected error message\" com.example.DifferentException: - \"Some different expected error message\"​ Copy expected_status_codes Type Comma-separated list of strings and ranges Default (none) A comma-separated list comprised of individual and dashed ranges of HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_status_codes: 415,500-506 Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless of how this property is set under error_collector. attributes.include Type List of strings Default (none) If attributes are enabled for traced errors, all attribute keys found in this list will be sent to New Relic in traced errors. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) Attribute keys found in this list will not be sent to New Relic in traced errors. For more information, see the agent attribute rules. ignoreErrorPriority Type Boolean Default true When multiple errors are noticed in a transaction, only the last error will be reported by default. Setting this property to false will instead report only the first error that is noticed. For more information, see the noticeError API. For example: error_collector: ignoreErrorPriority: false Copy ignore_errors (DEPRECATED) Type Comma-separated list of Strings Default (none) All specified exception class names specified will not be treated as errors. Deprecated as of Java agent 3.40.0 and replaced by ignore_classes. For example: error_collector: ignore_errors: some.other.MyException Copy Strip exceptions These options are set in the strip_exception_messages stanza and unless noted otherwise can be overridden by using a newrelic.config.strip_exception_messages​prefixed system property. This configuration can be enabled to control whether Java exception messages are reported to New Relic. enabled Type Boolean Default false By default, this is set to false, which means that the agent sends messages from all exceptions to the New Relic collector. If you set this to true, the agent strips the messages from exceptions in order to prevent it from inadvertently capturing sensitive information. If you enable high security mode, this is automatically set to true. If you set enabled to true but you want the agent to capture messages from specific exceptions, add the exceptions to your allow list. whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use allowed_classes. If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to the whitelist, separated by a comma. allowed_classes Type String Default (none) If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to allowed_classes, separated by a comma. Thread profiler These options are set in the thread_profiler stanza and can be overridden by using a newrelic.config.thread_profiler prefixed system property. Thread profiler measures wall clock time, CPU time, and method call counts in your application's threads as they run. enabled Type Boolean Default true Enable the thread profiler. Transaction events These options are set in the transaction_events stanza and can be overridden by using a newrelic.config.transaction_events prefixed system property. Transaction events provide the data for displaying histograms and percentiles in the UI. Important Previously this stanza was called analytics_events. If your configuration file still uses analytics_events, update your agent to use transaction_events. enabled Type Boolean Default true Enable the transaction events service. max_samples_stored Type Integer Default 2000 Max 10000 The maximum number of sampled transaction events reported every 60 seconds. custom_request_headers Type List of maps Default None Important Unlike other settings, custom_request_headers have to be paired together and must be set in the newrelic.yml file. They can't be overwritten by Java virtual machine arguments (system property) or environment variables. A list of maps with the paired keys header_name and the optional header_alias. Choose one or more custom HTTP request headers to add as transaction attributes. You can list multiple header configurations: transaction_events: custom_request_headers: - header_name: \"X-Custom-Header-1\" - header_name: \"X-Custom-Header-2\" header_alias: \"CustomHeader2alias\" Copy In the first map set, X-Custom-Header-1 is captured and reported by the agent as the header name for a corresponding value from the request object. The header_name will also be the name of the attribute sent to New Relic. In the second map set, the request header is X-Custom-Header-2, but the CustomHeader2alias is the name sent to New Relic. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless of how this property is set under transaction_events. attributes.include Type List of Strings Default (none) If attributes are enabled for transaction events, all attribute keys found in this list will be sent to New Relic in transaction events. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction events. For more information, see the agent attribute rules. Custom events Custom events are set in the custom_insights_events stanza and can be overridden by using a newrelic.config.custom_insights_events prefixed system property. APM lets you record custom event data via the New Relic language agent APIs, which you can then query. Important For Java agent versions prior to 4.1.0, the following YAML configuration is recognized: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy For agent versions 4.1.0 and above, the YAML configuration uses the nested stanza formatting: custom_insights_events: enabled: false max_samples_stored: 5000 Copy enabled Type Boolean Default true This enables the custom event service. max_samples_stored Type Integer Default/Max 10000 The maximum number of sampled custom events reported every 60 seconds. Hostname configuration These options are set in the process_host stanza and can be overridden by using a newrelic.config.process_host prefixed system property. These properties are used for configuring the hostname displayed in the UI: display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. ipv_preference Type String Default 4 If the hostname cannot be determined, then the IP address of the host will be used. This property determines whether the IPv4 or IPv6 address should be used. The default is IPv4. Custom instrumentation These options set in the class_transformer stanza and can be overridden by using a newrelic.config.class_transformer prefixed system property. trace_annotation_class_name Type String Default (none) String containing the full class name of the annotation class the agent uses to determine which user-specified methods to instrument. For more information about custom annotations, see Java custom metric collection. com.newrelic.instrumentation.servlet-user Type Boolean Default false Enable this option to capture the userPrincipal name. This name is included as a transaction trace attribute, and can be queried. System properties You can override any setting in the newrelic.yml file by setting a system property. The system property corresponding to a given setting in the config file is the setting name prefixed by newrelic.config. For example, the system property for the log_level setting is newrelic.config.log_level. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the system property for the enabled setting in the transaction_tracer stanza is newrelic.config.transaction_tracer.enabled. In addition to overriding configuration settings, the following system properties are recognized by the agent: newrelic.config.process_host.display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. Requires Java agent 3.17 or higher. newrelic.config.file Type String Default (none) String containing a fully qualified path to the newrelic configuration file. If empty, the agent assumes newrelic.yml is in the same directory as newrelic.jar. newrelic.debug Type Boolean Default (none) Enable debug logging. newrelic.environment Type String Default (none) String containing the environment configuration for the agent to use. newrelic.home Type String Default (none) String containing the home directory of agent. This defaults to the same directory as the agent jarfile. newrelic.logfile Type String Default newrelic_agent.log String containing the name of the agent log file. Environment variables Environment variables take the highest precedence and override the system properties and yml config settings. To set environment variables, use the export VARNAME=value command. To permanently set environment variables, add the export line to a file such as ~/.bashrc or ~/.bash_profile. You can override any setting from a system property or in the newrelic.yml by setting an environment variable. The environment variable corresponding to a given setting in the config file is the setting name prefixed by NEW_RELIC with all dots (.) and dashes (-) replaced by underscores (_). For example, the environment variable for the log_level setting is NEW_RELIC_LOG_LEVEL. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the environment variable for the enabled setting in the transaction_tracer stanza is NEW_RELIC_TRANSACTION_TRACER_ENABLED. Important Agent configuration via environment variables requires Java agent version 4.10.0 or higher. For agent versions older than 4.10.0 the following environment variables are available: NEW_RELIC_APP_NAME (REQUIRED) Type String Default (none) This setting is required. Contains the application name under which to report data to New Relic. Set the name of your application as you want it to appear in New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon ;. For example, to report data to My Application and My Application 2: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Type String Default false Enables distributed tracing. Case sensitive: use true or false. For more information, see the distributed tracing section. NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. NEW_RELIC_LICENSE_KEY (REQUIRED) Type String Default (none) This setting is required. Contains your New Relic account license. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. NEW_RELIC_LOG Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. Cloud platform utilization These options are set in the utilization stanza and can be overridden by using a newrelic.config.utilization prefixed system property. The agent collects utilization information and sends it to the New Relic service. The agent can collect information from Amazon Web Services (AWS) EC2 instances and Docker containers. detect_aws Type Boolean Default true Determines whether the agent polls AWS metadata API. detect_docker Type Boolean Default true Determines whether the agent reads Docker information from the file system. Async instrumentation These options are set directly in the common stanza and can be overridden by using a prefixed system property. token_timeout Type Integer Default (seconds) 180 The number of seconds after which the agent will automatically expire an async token that has not been explicitly expired with token.expire(). For usage instructions, see Tokens: Connect async threads. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to unexpired tokens. segment_timeout Type Integer Default (seconds) 600 The number of seconds after which the agent will automatically end a segment that has not been explicitly ended with segment.end() or segment.ignore(). For usage instructions, see Segments: Time arbitrary async activity. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to un-ended segments. Circuit breaker These settings customize the behavior of the Java circuit breaker. These settings are not included in newrelic.yml by default. You do not need to restart your JVM after changing them. If you want to customize the circuit breaker, add the stanza under the common stanza: common: &default_settings​ ​ OTHER_CONFIG_SETTINGS circuitbreaker: enabled: true memory_threshold: 20 gc_cpu_threshold: 10 Copy enabled Type Boolean Default true If your application is behaving as expected, you may want to disable the circuit breaker. memory_threshold Type Integer (0 to 100) Default 20 Customize the precentage of free heap memory below which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. gc_cpu_threshold Type Integer (0 to 100) Default 10 Customize the precentage of garbage collection CPU time above which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. Message tracer These options are set in the message_tracer stanza and can be overridden by using a newrelic.config.message_tracer prefixed system property. segment_parameters.enabled Type Boolean Default true Adds message properties to tracer attributes. Set this to false to turn it off. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has other effects on APM features. Before enabling, read the transition guide. Requires Java agent version 4.3.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. In the config file, it can be set in the distributed_tracing stanza. It can be overridden using a newrelic.config.distributed_tracing prefixed system property. enabled Type Boolean Default false Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: enabled: true Copy To enable this using a system property, you would use: -Dnewrelic.config.distributed_tracing.enabled=true Copy exclude_newrelic_header Type Boolean Default false By default, supported versions of the agent utilize both the newrelic header and W3C Trace Context headers for distributed tracing. The newrelic distributed tracing header allows interoperability with older agents that don't support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over newrelic headers for distributed tracing. If you do not want to utilize the newrelic header, setting this to true will result in the agent excluding the newrelic header and only using W3C Trace Context headers for distributed tracing. For example, to exclude newrelic headers in the config file, you would use: distributed_tracing: exclude_newrelic_header: true Copy To exclude newrelic headers using a system property, you would use: -Dnewrelic.config.distributed_tracing.exclude_newrelic_header=true Copy Infinite Tracing Important Requirements: Java Agent 5.12.1 or higher. Infinite Tracing does not work if enable_auto_app_naming is enabled. To turn on Infinite Tracing, enable distributed tracing and add the additional setting below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default None For help getting a valid Infinite Tracing trace observer host entry, see find or create a Trace Observer. You can configure this via YAML: infinite_tracing: trace_observer: host: YOUR_TRACE_OBSERVER_HOST Copy You can also use the system property newrelic.config.infinite_tracing.trace_observer.host or the environment variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST. Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza and can be overridden by using a newrelic.config.span_events prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable span event reporting. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this property (span_events.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for span events, all attribute keys found in this list will be sent to New Relic in span_events. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) All attribute keys found in this list will not be sent to New Relic in span events. For more information, see the agent attribute rules. Important Span event attribute filtering requires Java agent version 4.10.0 or higher. Jar collector The Java agent collects and information about jars and their versions on the application classpath. Jar collection configuration is set in the jar_collector stanza and can be overridden by using a newrelic.config.jar_collector prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable jar collection and reporting. skip_temp_jars Type Boolean Default true Used to enable/disable collection of temporary jars. Temporary jars are those residing in the directory specified by the system property java.io.tmpdir. jars_per_second Type Integer Default 10 The maximum number of jars to process per second. Must be positive.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.009094,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Java <em>agent</em> <em>configuration</em>: Config file",
        "sections": "Java <em>agent</em> <em>configuration</em>: Config file",
        "tags": "<em>Agents</em>",
        "body": "The New Relic Java <em>agent</em> reads its <em>configuration</em> from the newrelic.yml file. By default the <em>agent</em> looks for this file in the directory that contains newrelic.jar. You can override the config file&#x27;s location by setting the newrelic.config.file system property to a fully qualified file name"
      },
      "id": "603eb739e7b9d2a2432a07e0"
    }
  ],
  "/docs/agents/go-agent/configuration/go-agent-logging": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.73987,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> <em>configuration</em>",
        "sections": "<em>Go</em> <em>agent</em> <em>configuration</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "You can edit <em>configuration</em> settings for the <em>Go</em> <em>agent</em> to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.08014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    },
    {
      "sections": [
        "Java agent configuration: Config file",
        "Configuration file structure",
        "Tip",
        "Configuration settings precedence",
        "Configuring the Java extensions directory",
        "Create an extensions directory",
        "Specify an existing extensions directory",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (REQUIRED)",
        "agent_enabled",
        "apdex_t (DEPRECATED)",
        "appserver_port",
        "Important",
        "audit_mode",
        "ca_bundle_path",
        "use_private_ssl",
        "enable_auto_app_naming",
        "enable_auto_transaction_naming",
        "Caution",
        "enable_custom_tracing",
        "extensions.dir",
        "high_security",
        "insert_api_key",
        "labels",
        "max_stack_trace_lines",
        "proxy_host",
        "proxy_password",
        "proxy_port",
        "proxy_user",
        "proxy_scheme",
        "reactor-netty.errors.enabled",
        "send_data_on_exit",
        "send_data_on_exit_threshold",
        "send_environment_info",
        "send_jvm_props",
        "ssl (DEPRECATED)",
        "sync_startup",
        "scala_futures_as_segments",
        "Logging configuration",
        "log_daily",
        "log_file_count",
        "log_file_name",
        "log_file_path",
        "log_level",
        "log_limit_in_kbytes",
        "JMX",
        "enabled",
        "linkingMetadataMBean",
        "Attributes",
        "include",
        "exclude",
        "Transaction tracer",
        "explain_enabled",
        "explain_threshold",
        "insert_sql_max_length",
        "log_sql",
        "record_sql",
        "stack_based_naming (Play 2.x+ only)",
        "stack_trace_threshold",
        "top_n",
        "transaction_threshold",
        "slow_query_whitelist (DEPRECATED)",
        "collect_slow_queries_from",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "token_limit",
        "segment_limit",
        "Transaction segments",
        "Browser monitoring",
        "auto_instrument",
        "disabled_auto_pages",
        "External tracer",
        "exclude_request_uri",
        "Cross application tracer",
        "Error collector",
        "ignore_classes",
        "ignore_messages",
        "ignore_status_codes",
        "ignoreErrorPriority",
        "expected_classes",
        "expected_messages",
        "expected_status_codes",
        "ignore_errors (DEPRECATED)",
        "Strip exceptions",
        "whitelist (DEPRECATED)",
        "allowed_classes",
        "Thread profiler",
        "Transaction events",
        "max_samples_stored",
        "custom_request_headers",
        "Custom events",
        "Hostname configuration",
        "display_name",
        "ipv_preference",
        "Custom instrumentation",
        "trace_annotation_class_name",
        "com.newrelic.instrumentation.servlet-user",
        "System properties",
        "newrelic.config.process_host.display_name",
        "newrelic.config.file",
        "newrelic.debug",
        "newrelic.environment",
        "newrelic.home",
        "newrelic.logfile",
        "Environment variables",
        "NEW_RELIC_APP_NAME (REQUIRED)",
        "NEW_RELIC_DISTRIBUTED_TRACING_ENABLED",
        "NEW_RELIC_PROCESS_HOST_DISPLAY_NAME",
        "NEW_RELIC_LICENSE_KEY (REQUIRED)",
        "NEW_RELIC_LOG",
        "Cloud platform utilization",
        "detect_aws",
        "detect_docker",
        "Async instrumentation",
        "token_timeout",
        "segment_timeout",
        "Circuit breaker",
        "memory_threshold",
        "gc_cpu_threshold",
        "Message tracer",
        "segment_parameters.enabled",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Infinite Tracing",
        "trace_observer.host",
        "Span events",
        "Jar collector",
        "skip_temp_jars",
        "jars_per_second"
      ],
      "title": "Java agent configuration: Config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "1d61f848fa192438225eae269421b8d384915c8b",
      "image": "https://docs.newrelic.com/static/60ca967eab99ca225186310913ae2de6/8c557/java-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file/",
      "published_at": "2021-06-09T07:43:58Z",
      "updated_at": "2021-06-09T07:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent reads its configuration from the newrelic.yml file. By default the agent looks for this file in the directory that contains newrelic.jar. You can override the config file's location by setting the newrelic.config.file system property to a fully qualified file name. Configuration file structure The newrelic.yml file is split into stanzas corresponding to different environments: Test Development Staging Production (default) New Relic applies settings in the common stanza to each of these environments. You can select other environments as the default by setting the newrelic.environment system property to the environment name. Tip A newrelic.yml template is available. If you edit newrelic.yml, be careful to conform to the YAML format. Use a YAML validator to ensure the syntax is accurate before using the file with New Relic's Java agent, and follow these rules: Java agent newrelic.yml Requirements Format YML files are case sensitive. Indentations All indentations must be in increments of two characters. Other indentations will result in an Unable to parse configuration file error upon agent startup. Use the same level of indentation for data in the same stanza of the file. Indent any sub-stanzas by an additional two spaces. Changes to file You must restart your JVM host process for changes to take effect. Exception: Property changes to log_level and audit_mode do not require a restart. Property changes under circuit breaker don't require a restart. Configuration settings precedence To override any setting in the config file, use a system property override. In certain environments, environment variables can also be used to override both the config file and the system properties. The environment variables primarily exist to support Heroku. When used, server-side configuration overrides all other configuration settings. With the Java agent, server-side configuration overrides all other settings. Environment variables override Java system properties. Java properties override user configuration settings in your newrelic.yml file. User settings override the newrelic.yml default settings. Configuring the Java extensions directory The Java agent reads the configuration files on process startup. To identify the directory where the files are located, either create a new or specify an existing extensions directory: Create an extensions directory To create the extensions directory: Navigate to the directory where newrelic.jar and newrelic.yml are located. Create a directory named extensions. In newrelic.yml, check that the property extensions.dir is not set. Specify an existing extensions directory To use an existing Java extensions directory: In your newrelic.yml file, locate the common section. Use the property extensions.dir to specify the location of the file. General configuration settings Set these options in the common stanza. To override any of these options, use a newrelic.config prefixed system property. license_key (REQUIRED) Type String Default (none) This setting is required. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. app_name (REQUIRED) Type String Default (none) This setting is required. Defines the application name used to report data to New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon. For example, to report data to My Application and My Application 2 use this: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. agent_enabled Type Boolean Default true Flag to enable the agent. Use this setting to force the agent to run or not run. apdex_t (DEPRECATED) Type Float Default 1.0 The apdex_t threshold in seconds for the application's Apdex score. For Java agent versions 1.2.008 or higher, the apdex_t value is set in the UI and the value in newrelic.yml is ignored. appserver_port Type Integer Default (none) Number to differentiate JVMs for the same app on the same machine. New Relic uses host/port for uniqueness, so you can distinguish the JVMs by putting a switch like this into the startup arguments for each JVM: -Dnewrelic.config.appserver_port=8081 Copy Once you have used appserver_port to name the JVMs and restart them, you should be able to see them individually in the dropdown and in the profiling interface. Important This is only a change for New Relic; it doesn't actually affect the port on which the host communicates in any way. audit_mode Type Boolean Default false Enables plain text logging of all data sent to New Relic to the agent logfile. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. ca_bundle_path Type String Value Format /path/to/ca/cert/bundle.pem Specifies a path to a custom SSL certificate bundle that will be used by the agent to establish a secure connection to New Relic. If your custom SSL certificate bundle doesn't include certificates that are sufficient to connect to New Relic then you'll need to merge the required certs into your custom certificate bundle. use_private_ssl Type Boolean Default false The following SSL certificates are bundled into the agent jar: META-INF/certs/eu-newrelic-com.pem META-INF/certs/eu01-nr-data-net.pem META-INF/certs/newrelic-com.pem Copy By default (use_private_ssl: false) the agent will use the SSL certificates bundled into the JDK to establish a secure connection to New Relic or the custom SSL certificates bundle specified by ca_bundle_path. If you want to use the SSL certificates bundled with the agent, set use_private_ssl: true. Note: use_private_ssl will be ignored if ca_bundle_path is set. enable_auto_app_naming Type Boolean Default false Enables the reporting of data separately for each web app. Set to true to enable support for auto app naming. The name of each web app is detected automatically and the agent reports data separately for each one. This provides a finer-grained performance breakdown for web apps in New Relic. For more information, see Automatic application naming. For more methods of naming your application, see Name your Java application. enable_auto_transaction_naming Type Boolean Default true Enables component-based transaction naming. Set to true to enable component-based transaction naming. Set to false to use the URI of a web request as the name of the transaction. For more information, see Naming web transactions. Caution Unless you implement API calls to name your transactions, disabling auto-transaction naming is very likely to cause Metric grouping issues. enable_custom_tracing Type Boolean Default true Enables all instrumentation using an @Trace annotation. Disabling this causes @Trace annotations to be ignored. extensions.dir Type String Default (none) Defines the location of the optional extensions directory. If this property is not set, the agent will look for a subdirectory named extensions in the same directory as newrelic.jar and newrelic.yml. high_security Type Boolean Default false In order for high security to be enabled, this property must be set to true and the high security property in the New Relic user interface must be enabled. Enabling high security means SSL is turned on, request and message queue parameters are not collected, and queries cannot be sent to New Relic in their raw form. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. insert_api_key Type String Default (none) A valid Insert API Key for your account. This is only required for Real-time Java profiling using JFR metrics. labels Type String Default \"\" Attach tags to this app. Note that this option now enables tags, which replaced the label feature. You can still query your historical labels. max_stack_trace_lines Type Integer Default 30 Limits the number of lines the agent collects from each stack trace. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. proxy_host Type String Default (none) The proxy host through which to connect to the New Relic collector. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_password Type String Default (none) The password for proxy authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. Important The Java agent supports Basic (clear text) authentication. proxy_port Type String Default 8080 The proxy host port number. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_user Type String Default (none) The username for proxy authentication, such as Basic (clear text) authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. proxy_scheme Type String Default (none) The proxy scheme used. Setting proxy_scheme: \"https\" will allow the agent to connect through proxies using the HTTPS scheme. reactor-netty.errors.enabled Type Boolean Default true Whether errors are reported for reactor netty. If set to false, errors will be ignored. Important Only available in Java agent 6.3.0 and above. send_data_on_exit Type Boolean Default false Enable delayed JVM shutdown to give the agent a chance to send latest metric data to New Relic before JVM shutdown. send_data_on_exit_threshold Type Integer Default 60 The number of seconds after which the agent will use the send_data_on_exit setting. send_environment_info Type Boolean Default true Enable reporting of JVM settings to New Relic. send_jvm_props Type Boolean Default true When set to true, JVM properties will be sent to New Relic. ssl (DEPRECATED) Type Boolean Default true Requires connections to the New Relic collector to go over SSL. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. This work is done asynchronously to the threads that process your application code, so response times will not be directly affected by this change. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. sync_startup Type Boolean Default false Enable the agent to connect the New Relic collector immediately upon app startup. scala_futures_as_segments Important This applies to Java agent version 3.44.0 or higher. Type Boolean Default false For more concise transaction trace details, the agent does not report Scala Futures as transaction segments, and those Futures do not contribute to the transaction’s total time. Enabling scala_futures_as_segments increases your overhead. If you want Scala Futures to report as transaction segments so you can view them in a transaction trace, you can enable it: scala_futures_as_segments: enabled: true Copy Logging configuration These are part of the general configuration variables. They are broken out here because they are frequently tweaked for debugging. Some of the logging configuration variables are dynamic and do not need a host restart for them to take effect. For instance, if log files are growing too quickly, log_level can be set to a less verbose setting to reduce the reporting rate. Here is the order of precedence for configuration variables affecting log rotation. If log_daily is true, other log rotation settings are ignored. If log_file_count is 1 or 0, the size limit is ignored. Finally, the agent applies log_limit_in_kbytes. Depending on the growth rate, it is possible for the log file size to exceed the configured value by a small amount. log_daily Type Boolean Default false Set to true to roll the logs daily. Overrides the other configuration variables that affect log rotation. log_file_count Type Integer Default 1 The maximum number of log files to keep when using log rotation. log_file_name Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. log_file_path Type String Default logs subdirectory where newrelic.jar is located The log file path. Tip If log_file_path is specified, the directory must already exist. If the default value is used, the agent will attempt to create the directory. log_level Type String Default info The log verbosity level. The agent uses its own log file to keep its logging separate from that of your application. Valid options, in order of verboseness, are: off severe warning info fine finer finest This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. log_limit_in_kbytes Type Integer Default 0 The log file size in kilobytes at which log files are rotated. Set to 0 for no limit. JMX To set these options, use the jmx stanza. To override them, use a newrelic.config.jmx prefixed system property. The Java agent uses JMX to collect JVM data as well as to communicate with the JFR (Java Flight Recorder) daemon for Real-time Java profiling. enabled Type Boolean Default true This setting can be used to turn on or off all JMX functionality. linkingMetadataMBean Type Boolean Default false This setting can be enabled to allow the Java agent to expose linking metadata to the JFR daemon. Doing so allows the JFR daemon to obtain the entity GUID generated by the Java agent and link JFR data with the same APM application that is being monitored by the agent instead of as a separate entity. Important This applies to Java agent version 6.1.0 or higher. Attributes To set these options, use the attributes stanza. To override them, use a newrelic.config.attributes prefixed system property. Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. There is also an attribute stanza under each destination. For more information, see Java agent attributes, Enabling and disabling attributes and Attribute examples. enabled Type Boolean Default true This setting can be used to turn on or off all attributes. Important For security reasons, capturing custom attributes using the Custom Instrumentation Editor is set to false by default. include Type List of Strings Default (none) If attributes are enabled, attribute keys found in this list will be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. Transaction tracer These options are set in the transaction_tracer stanza and can be overridden by using a newrelic.config.transaction_tracer prefixed system property. Transaction tracing captures deep information about slow transactions and sends this to the New Relic service. The transaction includes the exact call sequence of the transactions, including any query statements issued. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true The transaction tracer is enabled by default. Set this to false to turn it off. explain_enabled Type Boolean Default true Determines whether the agent will capture the EXPLAIN plan for slow queries. Only supported for MySQL and PostgreSQL. explain_threshold Type Float Default 0.5 Threshold in seconds for query execution time below which the slow query and the EXPLAIN plan (if supported) will not be captured. Relevant to slow queries only when record_sql is set to raw or obfuscated. Relevant to EXPLAIN plans only when explain_enabled is set to true. insert_sql_max_length Type Integer Default 2000 The character limit for the SQL query string. If you have many slow SQL queries with large chunks of information, this could negatively affect performance or how quickly you see your data in New Relic. Increase the value gradually until you find the right balance of information and performance. log_sql Type Boolean Default false Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode. record_sql Type String Default obfuscated When the transaction tracer is on, query statements can optionally be recorded. The recorder has three modes: off: Send no queries. raw: Send the query statement in its original form. obfuscated: Strips out numeric and string literals. stack_based_naming (Play 2.x+ only) Type Boolean Default False Defaulted to true until Java agent version 3.12.1, when it was changed to false. This option is for Play 2.x+ only. Play/Scala instrumentation can use Thread.getStackTrace() to improve tracer naming, but at the cost of increased overhead. stack_trace_threshold Type Integer Default 0.5 Defines a threshold (in seconds) for collecting stack traces from an SQL call. When SQL statements exceed this threshold, the agent will capture the current stack trace. This is useful for pinpointing where long SQL calls originate from. top_n Type Integer Default 20 Use this setting to control the variety of your transaction traces. top_n is an integer that represents the number of unique, slow transactions that traces will be created for. If you want transaction traces to more accurately reflect the actual slowest transactions in your app, make this value lower. If you want to sample a more diverse array of transactions, make the value higher. A value of 0 would mean that only the slowest transaction is always traced. This is considered not to be optimal, though, because you may have one or two transactions that are always the slowest, and repeatedly seeing those same transaction traces will probably not give you much value. If the same transaction is often the slowest, the top_n setting allows the Java agent (over time) to sample the slowest n transactions. This gives you greater variety and more insight into your application. transaction_threshold Type String (float) Default apdex_f The time threshold used to determine when a transaction is eligible to be traced. When the transaction's response time exceeds this threshold, a transaction trace will be recorded and sent to New Relic. The default is apdex_f (default), which sets the threshold to be the \"Frustrated\" Apdex level (four times the apdex_t value). You can also set a specific time threshold by entering a float value that represents a number of seconds. slow_query_whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use collect_slow_queries_from. By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy collect_slow_queries_from Type String Default (none) By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this property (transaction_tracer.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to New Relic in transaction traces. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction traces. For more information, see the agent attribute rules. token_limit Type Integer Default 3000 Limits the number of Tokens that can be created per Transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. segment_limit Type Integer Default 3000 Limits the number of segments that can be created per transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. Transaction segments These options are set in the transaction_segments stanza and can be overridden by using a newrelic.config.transaction_segments prefixed system property. Transaction segments represent discrete pieces of work (generally method calls) and are displayed within transaction traces. Important Transaction segment attribute filtering requires Java agent version 4.10.0 or higher. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction segments. If attributes.enabled at the root level is false, no attributes will be sent to transaction segments regardless on how this property (transaction_segments.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction segments, all attribute keys found in this list will be sent to New Relic in transaction segments. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction segments. For more information, see the agent attribute rules. Browser monitoring These options are set in the browser_monitoring stanza and can be overridden by using a newrelic.config.browser_monitoring prefixed system property. Browser monitoring gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. auto_instrument Type Boolean Default true By default the agent automatically inserts API calls in compiled JSPs to inject the monitoring JavaScript into web pages. Set this attribute to false to turn off this behavior. disabled_auto_pages Type Comma-separated list of strings Default (none) When auto_instrument is true, by default all pages are instrumented. List all pages that you want the auto instrumentation to skip here. You can still use manual instrumentation on these pages. For example: browser_monitoring: disabled_auto_pages: /WEB-INF/jsp/testpage_1.jsp, /WEB-INF/jsp/testpage_2.jsp Copy attributes.enabled Type Boolean Default false This setting can be used to turn on or off all attributes for browser monitoring. This is the data you can query. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how this property under browser_monitoring is set. attributes.include Type List of Strings Default (none) If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent to New Relic in page views. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in page views. For more information, see the agent attribute rules. External tracer The external tracing options are set in the external_tracer stanza and can be overridden by using a newrelic.config.external_tracer prefixed system property. exclude_request_uri Type Boolean Default false This setting can be used to control the collection of outgoing request URIs for errors and transaction traces. Set this to true to disable collecting this information. Cross application tracer The cross application tracing options are set in the cross_application_tracer stanza and can be overridden by using a newrelic.config.cross_application_tracer prefixed system property. Cross application tracing adds request and response headers to external calls using the Apache HttpClient libraries. This provides better performance data when calling applications monitored by other New Relic Agents. enabled Type Boolean Default true Cross application tracing is enabled by default. Set this to false to turn it off. Error collector These options are set in the error_collector stanza and unless noted otherwise can be overridden by using a newrelic.config.error_collector prefixed system property. The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. Tip For how to configure errors for the Java agent, including how to configure errors via the UI, see Java agent error configuration. enabled Type Boolean Default true Enable error collection. ignore_classes Type Stanza containing a list of fully qualified class_name strings Default (none) Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy ignore_messages Type Stanza containing a fully qualified class_name and a list of messages per error class Default (none) Specify exception class names the agent should ignore. Ignored messages will not affect error rate or Apdex score, or be reported to APM. Contains yaml pairs consisting of: A fully qualified exception class name that should not be reported to APM AND A list of exception messages to match against (at least one is required) If the exception class name matches an error but the message does not, then that error will not be ignored. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_messages: com.example.MyException: - \"Some error message to ignore\" - \"Some other error message to ignore\" com.example.DifferentException: - \"Some different error message to ignore\" Copy ignore_status_codes Type Comma-separated list of strings and ranges Default 404 A comma-separated list comprised of individual and dashed ranges of HTTP status codes that should not be treated as errors. If this property is commented out in the newrelic.yml configuration file, then the 404 status code will automatically be ignored. When using server-side configuration, the status code 404 must be specified in order for it to be ignored. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_status_codes: 404,507-511 Copy ignoreErrorPriority Type Boolean Default false With default ignoreErrorPriority as false, the agent reports the last error noticed if noticeError() is called multiple times in a transaction. If set to true, the agent reports the first error noticed if noticeError() is called multiple times in a transaction. For example: error_collector: ignoreErrorPriority: true Copy expected_classes Type Stanza containing a List of fully qualified class_name strings Default (none) Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy expected_messages Type Stanza containing a fully qualified class_name and a List of messages per error class Default (none) Contains yaml pairs consisting of a fully qualified exception class name that should be marked as expected and thus prevented from affecting error rate or Apdex score and a List of exception messages to match against, the latter of which at least one is required. If the exception class name matches an error but the message does not, then that error will not be marked as expected and therefore will affect error rate and Apdex score. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_messages: com.example.MyException: - \"Some expected error message\" - \"Some other expected error message\" com.example.DifferentException: - \"Some different expected error message\"​ Copy expected_status_codes Type Comma-separated list of strings and ranges Default (none) A comma-separated list comprised of individual and dashed ranges of HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_status_codes: 415,500-506 Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless of how this property is set under error_collector. attributes.include Type List of strings Default (none) If attributes are enabled for traced errors, all attribute keys found in this list will be sent to New Relic in traced errors. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) Attribute keys found in this list will not be sent to New Relic in traced errors. For more information, see the agent attribute rules. ignoreErrorPriority Type Boolean Default true When multiple errors are noticed in a transaction, only the last error will be reported by default. Setting this property to false will instead report only the first error that is noticed. For more information, see the noticeError API. For example: error_collector: ignoreErrorPriority: false Copy ignore_errors (DEPRECATED) Type Comma-separated list of Strings Default (none) All specified exception class names specified will not be treated as errors. Deprecated as of Java agent 3.40.0 and replaced by ignore_classes. For example: error_collector: ignore_errors: some.other.MyException Copy Strip exceptions These options are set in the strip_exception_messages stanza and unless noted otherwise can be overridden by using a newrelic.config.strip_exception_messages​prefixed system property. This configuration can be enabled to control whether Java exception messages are reported to New Relic. enabled Type Boolean Default false By default, this is set to false, which means that the agent sends messages from all exceptions to the New Relic collector. If you set this to true, the agent strips the messages from exceptions in order to prevent it from inadvertently capturing sensitive information. If you enable high security mode, this is automatically set to true. If you set enabled to true but you want the agent to capture messages from specific exceptions, add the exceptions to your allow list. whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use allowed_classes. If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to the whitelist, separated by a comma. allowed_classes Type String Default (none) If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to allowed_classes, separated by a comma. Thread profiler These options are set in the thread_profiler stanza and can be overridden by using a newrelic.config.thread_profiler prefixed system property. Thread profiler measures wall clock time, CPU time, and method call counts in your application's threads as they run. enabled Type Boolean Default true Enable the thread profiler. Transaction events These options are set in the transaction_events stanza and can be overridden by using a newrelic.config.transaction_events prefixed system property. Transaction events provide the data for displaying histograms and percentiles in the UI. Important Previously this stanza was called analytics_events. If your configuration file still uses analytics_events, update your agent to use transaction_events. enabled Type Boolean Default true Enable the transaction events service. max_samples_stored Type Integer Default 2000 Max 10000 The maximum number of sampled transaction events reported every 60 seconds. custom_request_headers Type List of maps Default None Important Unlike other settings, custom_request_headers have to be paired together and must be set in the newrelic.yml file. They can't be overwritten by Java virtual machine arguments (system property) or environment variables. A list of maps with the paired keys header_name and the optional header_alias. Choose one or more custom HTTP request headers to add as transaction attributes. You can list multiple header configurations: transaction_events: custom_request_headers: - header_name: \"X-Custom-Header-1\" - header_name: \"X-Custom-Header-2\" header_alias: \"CustomHeader2alias\" Copy In the first map set, X-Custom-Header-1 is captured and reported by the agent as the header name for a corresponding value from the request object. The header_name will also be the name of the attribute sent to New Relic. In the second map set, the request header is X-Custom-Header-2, but the CustomHeader2alias is the name sent to New Relic. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless of how this property is set under transaction_events. attributes.include Type List of Strings Default (none) If attributes are enabled for transaction events, all attribute keys found in this list will be sent to New Relic in transaction events. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction events. For more information, see the agent attribute rules. Custom events Custom events are set in the custom_insights_events stanza and can be overridden by using a newrelic.config.custom_insights_events prefixed system property. APM lets you record custom event data via the New Relic language agent APIs, which you can then query. Important For Java agent versions prior to 4.1.0, the following YAML configuration is recognized: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy For agent versions 4.1.0 and above, the YAML configuration uses the nested stanza formatting: custom_insights_events: enabled: false max_samples_stored: 5000 Copy enabled Type Boolean Default true This enables the custom event service. max_samples_stored Type Integer Default/Max 10000 The maximum number of sampled custom events reported every 60 seconds. Hostname configuration These options are set in the process_host stanza and can be overridden by using a newrelic.config.process_host prefixed system property. These properties are used for configuring the hostname displayed in the UI: display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. ipv_preference Type String Default 4 If the hostname cannot be determined, then the IP address of the host will be used. This property determines whether the IPv4 or IPv6 address should be used. The default is IPv4. Custom instrumentation These options set in the class_transformer stanza and can be overridden by using a newrelic.config.class_transformer prefixed system property. trace_annotation_class_name Type String Default (none) String containing the full class name of the annotation class the agent uses to determine which user-specified methods to instrument. For more information about custom annotations, see Java custom metric collection. com.newrelic.instrumentation.servlet-user Type Boolean Default false Enable this option to capture the userPrincipal name. This name is included as a transaction trace attribute, and can be queried. System properties You can override any setting in the newrelic.yml file by setting a system property. The system property corresponding to a given setting in the config file is the setting name prefixed by newrelic.config. For example, the system property for the log_level setting is newrelic.config.log_level. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the system property for the enabled setting in the transaction_tracer stanza is newrelic.config.transaction_tracer.enabled. In addition to overriding configuration settings, the following system properties are recognized by the agent: newrelic.config.process_host.display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. Requires Java agent 3.17 or higher. newrelic.config.file Type String Default (none) String containing a fully qualified path to the newrelic configuration file. If empty, the agent assumes newrelic.yml is in the same directory as newrelic.jar. newrelic.debug Type Boolean Default (none) Enable debug logging. newrelic.environment Type String Default (none) String containing the environment configuration for the agent to use. newrelic.home Type String Default (none) String containing the home directory of agent. This defaults to the same directory as the agent jarfile. newrelic.logfile Type String Default newrelic_agent.log String containing the name of the agent log file. Environment variables Environment variables take the highest precedence and override the system properties and yml config settings. To set environment variables, use the export VARNAME=value command. To permanently set environment variables, add the export line to a file such as ~/.bashrc or ~/.bash_profile. You can override any setting from a system property or in the newrelic.yml by setting an environment variable. The environment variable corresponding to a given setting in the config file is the setting name prefixed by NEW_RELIC with all dots (.) and dashes (-) replaced by underscores (_). For example, the environment variable for the log_level setting is NEW_RELIC_LOG_LEVEL. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the environment variable for the enabled setting in the transaction_tracer stanza is NEW_RELIC_TRANSACTION_TRACER_ENABLED. Important Agent configuration via environment variables requires Java agent version 4.10.0 or higher. For agent versions older than 4.10.0 the following environment variables are available: NEW_RELIC_APP_NAME (REQUIRED) Type String Default (none) This setting is required. Contains the application name under which to report data to New Relic. Set the name of your application as you want it to appear in New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon ;. For example, to report data to My Application and My Application 2: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Type String Default false Enables distributed tracing. Case sensitive: use true or false. For more information, see the distributed tracing section. NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. NEW_RELIC_LICENSE_KEY (REQUIRED) Type String Default (none) This setting is required. Contains your New Relic account license. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. NEW_RELIC_LOG Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. Cloud platform utilization These options are set in the utilization stanza and can be overridden by using a newrelic.config.utilization prefixed system property. The agent collects utilization information and sends it to the New Relic service. The agent can collect information from Amazon Web Services (AWS) EC2 instances and Docker containers. detect_aws Type Boolean Default true Determines whether the agent polls AWS metadata API. detect_docker Type Boolean Default true Determines whether the agent reads Docker information from the file system. Async instrumentation These options are set directly in the common stanza and can be overridden by using a prefixed system property. token_timeout Type Integer Default (seconds) 180 The number of seconds after which the agent will automatically expire an async token that has not been explicitly expired with token.expire(). For usage instructions, see Tokens: Connect async threads. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to unexpired tokens. segment_timeout Type Integer Default (seconds) 600 The number of seconds after which the agent will automatically end a segment that has not been explicitly ended with segment.end() or segment.ignore(). For usage instructions, see Segments: Time arbitrary async activity. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to un-ended segments. Circuit breaker These settings customize the behavior of the Java circuit breaker. These settings are not included in newrelic.yml by default. You do not need to restart your JVM after changing them. If you want to customize the circuit breaker, add the stanza under the common stanza: common: &default_settings​ ​ OTHER_CONFIG_SETTINGS circuitbreaker: enabled: true memory_threshold: 20 gc_cpu_threshold: 10 Copy enabled Type Boolean Default true If your application is behaving as expected, you may want to disable the circuit breaker. memory_threshold Type Integer (0 to 100) Default 20 Customize the precentage of free heap memory below which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. gc_cpu_threshold Type Integer (0 to 100) Default 10 Customize the precentage of garbage collection CPU time above which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. Message tracer These options are set in the message_tracer stanza and can be overridden by using a newrelic.config.message_tracer prefixed system property. segment_parameters.enabled Type Boolean Default true Adds message properties to tracer attributes. Set this to false to turn it off. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has other effects on APM features. Before enabling, read the transition guide. Requires Java agent version 4.3.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. In the config file, it can be set in the distributed_tracing stanza. It can be overridden using a newrelic.config.distributed_tracing prefixed system property. enabled Type Boolean Default false Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: enabled: true Copy To enable this using a system property, you would use: -Dnewrelic.config.distributed_tracing.enabled=true Copy exclude_newrelic_header Type Boolean Default false By default, supported versions of the agent utilize both the newrelic header and W3C Trace Context headers for distributed tracing. The newrelic distributed tracing header allows interoperability with older agents that don't support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over newrelic headers for distributed tracing. If you do not want to utilize the newrelic header, setting this to true will result in the agent excluding the newrelic header and only using W3C Trace Context headers for distributed tracing. For example, to exclude newrelic headers in the config file, you would use: distributed_tracing: exclude_newrelic_header: true Copy To exclude newrelic headers using a system property, you would use: -Dnewrelic.config.distributed_tracing.exclude_newrelic_header=true Copy Infinite Tracing Important Requirements: Java Agent 5.12.1 or higher. Infinite Tracing does not work if enable_auto_app_naming is enabled. To turn on Infinite Tracing, enable distributed tracing and add the additional setting below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default None For help getting a valid Infinite Tracing trace observer host entry, see find or create a Trace Observer. You can configure this via YAML: infinite_tracing: trace_observer: host: YOUR_TRACE_OBSERVER_HOST Copy You can also use the system property newrelic.config.infinite_tracing.trace_observer.host or the environment variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST. Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza and can be overridden by using a newrelic.config.span_events prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable span event reporting. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this property (span_events.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for span events, all attribute keys found in this list will be sent to New Relic in span_events. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) All attribute keys found in this list will not be sent to New Relic in span events. For more information, see the agent attribute rules. Important Span event attribute filtering requires Java agent version 4.10.0 or higher. Jar collector The Java agent collects and information about jars and their versions on the application classpath. Jar collection configuration is set in the jar_collector stanza and can be overridden by using a newrelic.config.jar_collector prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable jar collection and reporting. skip_temp_jars Type Boolean Default true Used to enable/disable collection of temporary jars. Temporary jars are those residing in the directory specified by the system property java.io.tmpdir. jars_per_second Type Integer Default 10 The maximum number of jars to process per second. Must be positive.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.009,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Java <em>agent</em> <em>configuration</em>: Config file",
        "sections": "Java <em>agent</em> <em>configuration</em>: Config file",
        "tags": "<em>Agents</em>",
        "body": "The New Relic Java <em>agent</em> reads its <em>configuration</em> from the newrelic.yml file. By default the <em>agent</em> looks for this file in the directory that contains newrelic.jar. You can override the config file&#x27;s location by setting the newrelic.config.file system property to a fully qualified file name"
      },
      "id": "603eb739e7b9d2a2432a07e0"
    }
  ],
  "/docs/agents/go-agent/features/add-browser-monitoring-your-go-apps": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.02551,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "New Relic Browser and the Ruby agent",
        "Requirements",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "CSP Nonce support",
        "Troubleshooting",
        "Disable auto-instrumentation"
      ],
      "title": "New Relic Browser and the Ruby agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "c7381e06d48fe877cdbcc935d51c88dd858d3673",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/new-relic-browser-ruby-agent/",
      "published_at": "2021-06-09T06:24:31Z",
      "updated_at": "2021-06-09T06:24:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Ruby agent, you can add New Relic Browser instrumentation to your webpages either automatically or manually. To enable Browser in the user interface, follow the procedures to install the Browser agent. Then follow the procedures in this section to set up the Ruby agent. Requirements In order to use New Relic Browser with your Ruby agent, make sure you meet these requirements: New Relic Ruby agent (version 3.0.1 or higher) For automatic instrumentation: Rails 2.3 or higher For manual instrumentation: Rails 2.0 to 2.2 Use auto-instrumentation Automatic instrumentation works with Rack, and requires Rails 2.3 or higher. Configure the agent to automatically instrument pages with end user monitoring scripts, by adding or editing the following flag in newrelic.yml. browser_monitoring: auto_instrument: true Copy This is the simplest way to monitor end users. The Ruby agent examines each page from your application and automatically injects the Browser JavaScript in the header. Auto-instrumentation works for environments that support Rack. For performance reasons the agent scans only the first 50k of your application's response for the header instrumentation point. In cases where a X-UA-Compatible meta tag is present and the <head> tag is longer than 50k, auto-instrumentation will fail gracefully. Auto-instrumentation will look for an X-UA-Compatible meta tag and insert the JavaScript directly after it. If the auto-instrumentation cannot find an X-UA-Compatible meta tag, it will insert after the opening head tag, and failing that it will insert after the opening body tag. If any of these tags are wrapped in conditionals or comments, the automatic instrumentation will likely fail. If auto-instrumentation fails to correctly instrument your application’s pages, then you must manually instrument via agent API. Manually instrument via agent API If you are using Rails 2.1 to 2.2 or cannot use auto-instrumentation, you can still set up end user monitoring manually by including appropriate scripts in your pages. Use the New Relic Ruby agent's API to generate the script to be inserted into your pages. For example, to modify your application's template to call the agent, use: <head> <%= ::NewRelic::Agent.browser_timing_header rescue \"\" %> ... existing template code ... </head> Copy CSP Nonce support CSP Nonce usage in our browser instrumentation is supported in version 7.1.0+ of the Ruby agent. To use a nonce with the Browser instrumentation, you must disable browser monitoring auto instrumentation and use the manual instrumentation via the agent API. You may now pass a nonce as an argument into the API method to allow the agent to insert the nonce into the browser instrumentation. For example, NewRelic::Agent.browser_timing_header(nonce). Troubleshooting If you do not see any browser data being reported, view the HTML source and confirm two blocks of script similar to this in your HTML head: <script type=\"text/javascript\">window.NREUM||(NREUM={});...</script> Copy If these are not present, check the auto-instrumentation settings or the placement of manual instrumentation in your template files. In versions of the Ruby agent prior to 3.7.0, <%=::NewRelic::Agent.browser_timing_footer rescue \"\" %> also needed to be called as close to the bottom of the document as possible. With 3.7.0, all the required script is included by browser_timing_header. browser_timing_footer returns an empty string for compatibility. Disable auto-instrumentation The default value of auto-instrument is true (even when unspecified). To disable auto-instrumentation, set this flag to false. To disable auto-instrumentation only for certain controllers or controller actions, use newrelic_ignore_enduser. Server-side instrumentation will be unaffected by this call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.653534,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic Browser and the Ruby <em>agent</em>",
        "sections": "New Relic Browser and the Ruby <em>agent</em>",
        "tags": "<em>Agents</em>",
        "body": "With the Ruby <em>agent</em>, you can add New Relic Browser instrumentation to your webpages either automatically or manually. To enable Browser in the user interface, follow the procedures to install the Browser <em>agent</em>. Then follow the procedures in this section to set up the Ruby <em>agent</em>. Requirements"
      },
      "id": "603eb812e7b9d247a82a07dc"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.390625,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    }
  ],
  "/docs/agents/go-agent/features/create-custom-events-go": [
    {
      "sections": [
        "Go agent attributes",
        "host.displayName",
        "httpResponseCode",
        "Important",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.User-Agent",
        "request.headers.userAgent",
        "request.method",
        "response.headers.contentLength",
        "response.headers.contentType",
        "http.statusCode",
        "Span and segment attributes",
        "db.collection",
        "db.instance",
        "db.statement",
        "http.method",
        "http.url",
        "peer.address",
        "peer.hostname",
        "Change attribute destination",
        "Turn destinations on or off",
        "Turn attributes on or off",
        "Create custom attributes",
        "For more help"
      ],
      "title": "Go agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "f6e6d25a949481b15a5beb78c962303857d713a4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/go-agent-attributes/",
      "published_at": "2021-06-08T15:06:05Z",
      "updated_at": "2021-03-16T13:46:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic's Go language agent, including: Error traces Transaction events Page views For an extra level of monitoring detail, create custom attributes. Go agent attributes The Go agent receives the following default attributes from your app. You can adjust these default settings and turn attributes on or off for certain destinations. host.displayName The name of the server host under which the current script is executing, called with newrelic.AttributeHostDisplayName. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeHostDisplayName) Copy httpResponseCode The response status code for a web request, called with newrelic.AttributeResponseCodeDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCodeDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to http.statusCode. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.accept The type as read from the HTTP request's Accept header, called with newrelic.AttributeRequestAccept Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestAccept) Copy request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header, called with newrelic.AttributeRequestContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentLength) Copy request.headers.contentType The incoming request content type as read from the Content-Type request header, called with newrelic.AttributeRequestContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentType) Copy request.headers.host The name from the HTTP host request header, called with newrelic.AttributeRequestHost. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestHost) Copy request.headers.referer The incoming request referer as read from the Referer request header, called with newrelic.AttributeRequestReferer. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestReferer) Copy request.headers.User-Agent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgentDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgentDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to request.headers.userAgent. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.userAgent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgent Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent) Copy Important This attribute was added in v3.0.0 of the agent and the original request.headers.User-Agent will eventually be removed. Therefore the v3.x agents will produce two attributes representing the the contents of the User-Agent HTTP header. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent, newrelic.AttributeRequestUserAgentDeprecated, ) Copy request.method The HTTP method of the incoming request, called with newrelic.AttributeRequestMethod Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestMethod) Copy response.headers.contentLength The outgoing response size in bytes as read from the Content-Length response header, called with newrelic.AttributeResponseContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentLength) Copy response.headers.contentType The outgoing response content-type as read from the Content-Type response header, called with newrelic.AttributeResponseContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentType) Copy http.statusCode The response status code for a web request, called with newrelic.AttributeResponseCode Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Important This attribute was added in v3.0.0 of the agent and the original httpResponseCode will eventually be removed. Therefore the v3.x agents will produce two attributes representing the response status code for a web request. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode, newrelic.AttributeResponseCodeDeprecated, ) Copy Span and segment attributes If you have Go agent v2.6.0 or higher, you can configure attributes on spans and segments. The Go agent receives the following default attributes from your app. These attributes are only found on span events and transaction trace segments. You can adjust these default settings and turn attributes on or off for certain destinations. db.collection For datastore segments, this is the collection used and represents the table or group, called with newrelic.SpanAttributeDBCollection. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBCollection) Copy db.instance For datastore segments this is the database name and represents the name of the database where the query is being executed, called with newrelic.SpanAttributeDBInstance. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBInstance) Copy db.statement For datastore segments this is the parameterized query being executed and represents the query being performed, called with newrelic.SpanAttributeDBStatement. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBStatement) Copy http.method For external segments this is the http method of the outgoing request, called with newrelic.SpanAttributeHTTPMethod. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPMethod) Copy http.url For external segments this is the url of the outgoing request, called with newrelic.SpanAttributeHTTPURL. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPURL) Copy peer.address For datastore segments this is the hostname plus port of the database being queried, called with newrelic.SpanAttributePeerAddress. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerAddress) Copy peer.hostname For datastore segments this is the hostname of the database being queried, called with newrelic.SpanAttributePeerHostname. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerHostname) Copy Change attribute destination Use these options to change attribute destinations: Turn destinations on or off To open or close an entire destination to attributes, set the .Enabled flag to true or false. For example, to turn off APM error collection: After the config, add: config.ErrorCollector.Attributes.Enabled = false Copy Turn attributes on or off To turn specific attributes on or off, use the .Include or .Exclude methods. For example, to disable AttributeResponseCode: After the config, add: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Create custom attributes Add custom attributes by using this method in a transaction: txn.AddAttribute(\"key\", \"value\") Copy The txn variable is the one instrumented for the Go transaction. For example: txn.AddAttribute(\"product\", \"widget\") txn.AddAttribute(\"price\", 19.99) txn.AddAttribute(\"importantCustomer\", true) Copy Default settings for custom attribute destinations: Error collector (traced errors): Enabled Transaction events: Enabled For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.495,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> attributes",
        "sections": "<em>Go</em> <em>agent</em> attributes",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic&#x27;s <em>Go</em> language <em>agent</em>, including: Error traces Transaction events"
      },
      "id": "603e9f8028ccbcaa6ceba76d"
    },
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.40585,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Create custom metrics in Go",
        "Create a custom metric",
        "Name a custom metric",
        "For more help"
      ],
      "title": "Create custom metrics in Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "9336bef71f0cac25636bfe0b4392864f3605c6a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/create-custom-metrics-go/",
      "published_at": "2021-06-08T14:39:30Z",
      "updated_at": "2021-03-11T08:14:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics allow you to report any metric that passes through your code. For example, with New Relic's Go monitoring, you can create custom metrics to time a component of your app that may not captured by default. Once you capture a custom metric, you can: Unify your monitoring inside New Relic through the data explorer. Use our REST API to programmatically retrieve and use custom metric data outside of the UI. Create custom metric alert conditions to notify you or your team when your custom metric exceeds specific values. Create a custom metric Instantiate your application by running the following: cfg := newrelic.NewConfig(\"Your App Name\", mustGetEnv(\"NEW_RELIC_LICENSE_KEY\")) cfg.Logger = newrelic.NewDebugLogger(os.Stdout) var err error app, err = newrelic.NewApplication(cfg) Copy After instantiating your app, create a custom metric with the following code: app.RecordCustomMetric( \"CustomMetricName\", //name of your metric 132, //time in ms ); Copy RecordCustomMetric's first parameter is a string that names your custom metric. The RecordCustomMetric method will automatically prepend the string Custom/ to your metric name. This means the above code will generate a metric named Custom/CustomMetricName. RecordCustomMetric's second parameter is the time, in milliseconds, that you want to record for your custom transaction. This means the above code will produce a metric of .132 seconds in New Relic's systems. To use a custom metric as a counter, it can be incremented by making the call as described above, and the count value for that metric will be incremented by 1. The value you use for the second parameter (time in ms) is irrelevant if you are only using the metric as a counter, and thus you can use a static number, such as 0 or 1. To increment a counter by a number greater than 1, call app.RecordCustomMetric multiple times - each call will only increment the metric by 1 no matter what the value of the second parameter is. Name a custom metric Carefully consider how you name your custom metrics. If your program creates too many uniquely-named metrics, you may end up with a metric grouping issue (MGI). MGIs occur when the granularity of metric names is too fine, resulting in hundreds or thousands of different metric names. One common cause of MGIs is relying on the full URL name for metric naming in web transactions. A few major code paths may generate many different full URL paths to unique documents, articles, page, etc. If the unique element of the URL path is included in the metric name, each of these common paths will have its own unique metric name. If metric grouping issues occur, follow the troubleshooting procedures. For more help Additional documentation resources include: New Relic for Go segment documentation on GitHub (more details about instrumenting segments on New Relic GitHub) Instrument Go transactions (how to create New Relic transactions in your Go app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.85328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom metrics in <em>Go</em>",
        "sections": "Create custom metrics in <em>Go</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " Additional documentation resources include: New Relic for <em>Go</em> segment documentation on GitHub (more details about instrumenting segments on New Relic GitHub) <em>Instrument</em> <em>Go</em> transactions (how to create New Relic transactions in your <em>Go</em> app)"
      },
      "id": "6043b8f628ccbc48692c609c"
    }
  ],
  "/docs/agents/go-agent/features/cross-application-tracing-go": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.02551,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "New Relic Browser and the Ruby agent",
        "Requirements",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "CSP Nonce support",
        "Troubleshooting",
        "Disable auto-instrumentation"
      ],
      "title": "New Relic Browser and the Ruby agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "c7381e06d48fe877cdbcc935d51c88dd858d3673",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/new-relic-browser-ruby-agent/",
      "published_at": "2021-06-09T06:24:31Z",
      "updated_at": "2021-06-09T06:24:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Ruby agent, you can add New Relic Browser instrumentation to your webpages either automatically or manually. To enable Browser in the user interface, follow the procedures to install the Browser agent. Then follow the procedures in this section to set up the Ruby agent. Requirements In order to use New Relic Browser with your Ruby agent, make sure you meet these requirements: New Relic Ruby agent (version 3.0.1 or higher) For automatic instrumentation: Rails 2.3 or higher For manual instrumentation: Rails 2.0 to 2.2 Use auto-instrumentation Automatic instrumentation works with Rack, and requires Rails 2.3 or higher. Configure the agent to automatically instrument pages with end user monitoring scripts, by adding or editing the following flag in newrelic.yml. browser_monitoring: auto_instrument: true Copy This is the simplest way to monitor end users. The Ruby agent examines each page from your application and automatically injects the Browser JavaScript in the header. Auto-instrumentation works for environments that support Rack. For performance reasons the agent scans only the first 50k of your application's response for the header instrumentation point. In cases where a X-UA-Compatible meta tag is present and the <head> tag is longer than 50k, auto-instrumentation will fail gracefully. Auto-instrumentation will look for an X-UA-Compatible meta tag and insert the JavaScript directly after it. If the auto-instrumentation cannot find an X-UA-Compatible meta tag, it will insert after the opening head tag, and failing that it will insert after the opening body tag. If any of these tags are wrapped in conditionals or comments, the automatic instrumentation will likely fail. If auto-instrumentation fails to correctly instrument your application’s pages, then you must manually instrument via agent API. Manually instrument via agent API If you are using Rails 2.1 to 2.2 or cannot use auto-instrumentation, you can still set up end user monitoring manually by including appropriate scripts in your pages. Use the New Relic Ruby agent's API to generate the script to be inserted into your pages. For example, to modify your application's template to call the agent, use: <head> <%= ::NewRelic::Agent.browser_timing_header rescue \"\" %> ... existing template code ... </head> Copy CSP Nonce support CSP Nonce usage in our browser instrumentation is supported in version 7.1.0+ of the Ruby agent. To use a nonce with the Browser instrumentation, you must disable browser monitoring auto instrumentation and use the manual instrumentation via the agent API. You may now pass a nonce as an argument into the API method to allow the agent to insert the nonce into the browser instrumentation. For example, NewRelic::Agent.browser_timing_header(nonce). Troubleshooting If you do not see any browser data being reported, view the HTML source and confirm two blocks of script similar to this in your HTML head: <script type=\"text/javascript\">window.NREUM||(NREUM={});...</script> Copy If these are not present, check the auto-instrumentation settings or the placement of manual instrumentation in your template files. In versions of the Ruby agent prior to 3.7.0, <%=::NewRelic::Agent.browser_timing_footer rescue \"\" %> also needed to be called as close to the bottom of the document as possible. With 3.7.0, all the required script is included by browser_timing_header. browser_timing_footer returns an empty string for compatibility. Disable auto-instrumentation The default value of auto-instrument is true (even when unspecified). To disable auto-instrumentation, set this flag to false. To disable auto-instrumentation only for certain controllers or controller actions, use newrelic_ignore_enduser. Server-side instrumentation will be unaffected by this call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.653534,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic Browser and the Ruby <em>agent</em>",
        "sections": "New Relic Browser and the Ruby <em>agent</em>",
        "tags": "<em>Agents</em>",
        "body": "With the Ruby <em>agent</em>, you can add New Relic Browser instrumentation to your webpages either automatically or manually. To enable Browser in the user interface, follow the procedures to install the Browser <em>agent</em>. Then follow the procedures in this section to set up the Ruby <em>agent</em>. Requirements"
      },
      "id": "603eb812e7b9d247a82a07dc"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.390625,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    }
  ],
  "/docs/agents/go-agent/features/enable-distributed-tracing-your-go-applications": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.025475,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "New Relic Browser and the Ruby agent",
        "Requirements",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "CSP Nonce support",
        "Troubleshooting",
        "Disable auto-instrumentation"
      ],
      "title": "New Relic Browser and the Ruby agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "c7381e06d48fe877cdbcc935d51c88dd858d3673",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/new-relic-browser-ruby-agent/",
      "published_at": "2021-06-09T06:24:31Z",
      "updated_at": "2021-06-09T06:24:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Ruby agent, you can add New Relic Browser instrumentation to your webpages either automatically or manually. To enable Browser in the user interface, follow the procedures to install the Browser agent. Then follow the procedures in this section to set up the Ruby agent. Requirements In order to use New Relic Browser with your Ruby agent, make sure you meet these requirements: New Relic Ruby agent (version 3.0.1 or higher) For automatic instrumentation: Rails 2.3 or higher For manual instrumentation: Rails 2.0 to 2.2 Use auto-instrumentation Automatic instrumentation works with Rack, and requires Rails 2.3 or higher. Configure the agent to automatically instrument pages with end user monitoring scripts, by adding or editing the following flag in newrelic.yml. browser_monitoring: auto_instrument: true Copy This is the simplest way to monitor end users. The Ruby agent examines each page from your application and automatically injects the Browser JavaScript in the header. Auto-instrumentation works for environments that support Rack. For performance reasons the agent scans only the first 50k of your application's response for the header instrumentation point. In cases where a X-UA-Compatible meta tag is present and the <head> tag is longer than 50k, auto-instrumentation will fail gracefully. Auto-instrumentation will look for an X-UA-Compatible meta tag and insert the JavaScript directly after it. If the auto-instrumentation cannot find an X-UA-Compatible meta tag, it will insert after the opening head tag, and failing that it will insert after the opening body tag. If any of these tags are wrapped in conditionals or comments, the automatic instrumentation will likely fail. If auto-instrumentation fails to correctly instrument your application’s pages, then you must manually instrument via agent API. Manually instrument via agent API If you are using Rails 2.1 to 2.2 or cannot use auto-instrumentation, you can still set up end user monitoring manually by including appropriate scripts in your pages. Use the New Relic Ruby agent's API to generate the script to be inserted into your pages. For example, to modify your application's template to call the agent, use: <head> <%= ::NewRelic::Agent.browser_timing_header rescue \"\" %> ... existing template code ... </head> Copy CSP Nonce support CSP Nonce usage in our browser instrumentation is supported in version 7.1.0+ of the Ruby agent. To use a nonce with the Browser instrumentation, you must disable browser monitoring auto instrumentation and use the manual instrumentation via the agent API. You may now pass a nonce as an argument into the API method to allow the agent to insert the nonce into the browser instrumentation. For example, NewRelic::Agent.browser_timing_header(nonce). Troubleshooting If you do not see any browser data being reported, view the HTML source and confirm two blocks of script similar to this in your HTML head: <script type=\"text/javascript\">window.NREUM||(NREUM={});...</script> Copy If these are not present, check the auto-instrumentation settings or the placement of manual instrumentation in your template files. In versions of the Ruby agent prior to 3.7.0, <%=::NewRelic::Agent.browser_timing_footer rescue \"\" %> also needed to be called as close to the bottom of the document as possible. With 3.7.0, all the required script is included by browser_timing_header. browser_timing_footer returns an empty string for compatibility. Disable auto-instrumentation The default value of auto-instrument is true (even when unspecified). To disable auto-instrumentation, set this flag to false. To disable auto-instrumentation only for certain controllers or controller actions, use newrelic_ignore_enduser. Server-side instrumentation will be unaffected by this call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.65344,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic Browser and the Ruby <em>agent</em>",
        "sections": "New Relic Browser and the Ruby <em>agent</em>",
        "tags": "<em>Agents</em>",
        "body": "With the Ruby <em>agent</em>, you can add New Relic Browser instrumentation to your webpages either automatically or manually. To enable Browser in the user interface, follow the procedures to install the Browser <em>agent</em>. Then follow the procedures in this section to set up the Ruby <em>agent</em>. Requirements"
      },
      "id": "603eb812e7b9d247a82a07dc"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.390594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    }
  ],
  "/docs/agents/go-agent/features/go-runtime-page-troubleshoot-performance-problems": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.025475,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "New Relic Browser and the Ruby agent",
        "Requirements",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "CSP Nonce support",
        "Troubleshooting",
        "Disable auto-instrumentation"
      ],
      "title": "New Relic Browser and the Ruby agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "c7381e06d48fe877cdbcc935d51c88dd858d3673",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/new-relic-browser-ruby-agent/",
      "published_at": "2021-06-09T06:24:31Z",
      "updated_at": "2021-06-09T06:24:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Ruby agent, you can add New Relic Browser instrumentation to your webpages either automatically or manually. To enable Browser in the user interface, follow the procedures to install the Browser agent. Then follow the procedures in this section to set up the Ruby agent. Requirements In order to use New Relic Browser with your Ruby agent, make sure you meet these requirements: New Relic Ruby agent (version 3.0.1 or higher) For automatic instrumentation: Rails 2.3 or higher For manual instrumentation: Rails 2.0 to 2.2 Use auto-instrumentation Automatic instrumentation works with Rack, and requires Rails 2.3 or higher. Configure the agent to automatically instrument pages with end user monitoring scripts, by adding or editing the following flag in newrelic.yml. browser_monitoring: auto_instrument: true Copy This is the simplest way to monitor end users. The Ruby agent examines each page from your application and automatically injects the Browser JavaScript in the header. Auto-instrumentation works for environments that support Rack. For performance reasons the agent scans only the first 50k of your application's response for the header instrumentation point. In cases where a X-UA-Compatible meta tag is present and the <head> tag is longer than 50k, auto-instrumentation will fail gracefully. Auto-instrumentation will look for an X-UA-Compatible meta tag and insert the JavaScript directly after it. If the auto-instrumentation cannot find an X-UA-Compatible meta tag, it will insert after the opening head tag, and failing that it will insert after the opening body tag. If any of these tags are wrapped in conditionals or comments, the automatic instrumentation will likely fail. If auto-instrumentation fails to correctly instrument your application’s pages, then you must manually instrument via agent API. Manually instrument via agent API If you are using Rails 2.1 to 2.2 or cannot use auto-instrumentation, you can still set up end user monitoring manually by including appropriate scripts in your pages. Use the New Relic Ruby agent's API to generate the script to be inserted into your pages. For example, to modify your application's template to call the agent, use: <head> <%= ::NewRelic::Agent.browser_timing_header rescue \"\" %> ... existing template code ... </head> Copy CSP Nonce support CSP Nonce usage in our browser instrumentation is supported in version 7.1.0+ of the Ruby agent. To use a nonce with the Browser instrumentation, you must disable browser monitoring auto instrumentation and use the manual instrumentation via the agent API. You may now pass a nonce as an argument into the API method to allow the agent to insert the nonce into the browser instrumentation. For example, NewRelic::Agent.browser_timing_header(nonce). Troubleshooting If you do not see any browser data being reported, view the HTML source and confirm two blocks of script similar to this in your HTML head: <script type=\"text/javascript\">window.NREUM||(NREUM={});...</script> Copy If these are not present, check the auto-instrumentation settings or the placement of manual instrumentation in your template files. In versions of the Ruby agent prior to 3.7.0, <%=::NewRelic::Agent.browser_timing_footer rescue \"\" %> also needed to be called as close to the bottom of the document as possible. With 3.7.0, all the required script is included by browser_timing_header. browser_timing_footer returns an empty string for compatibility. Disable auto-instrumentation The default value of auto-instrument is true (even when unspecified). To disable auto-instrumentation, set this flag to false. To disable auto-instrumentation only for certain controllers or controller actions, use newrelic_ignore_enduser. Server-side instrumentation will be unaffected by this call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.65344,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic Browser and the Ruby <em>agent</em>",
        "sections": "New Relic Browser and the Ruby <em>agent</em>",
        "tags": "<em>Agents</em>",
        "body": "With the Ruby <em>agent</em>, you can add New Relic Browser instrumentation to your webpages either automatically or manually. To enable Browser in the user interface, follow the procedures to install the Browser <em>agent</em>. Then follow the procedures in this section to set up the Ruby <em>agent</em>. Requirements"
      },
      "id": "603eb812e7b9d247a82a07dc"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.390594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    }
  ],
  "/docs/agents/go-agent/features/trace-asynchronous-applications": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.02544,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "New Relic Browser and the Ruby agent",
        "Requirements",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "CSP Nonce support",
        "Troubleshooting",
        "Disable auto-instrumentation"
      ],
      "title": "New Relic Browser and the Ruby agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "c7381e06d48fe877cdbcc935d51c88dd858d3673",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/new-relic-browser-ruby-agent/",
      "published_at": "2021-06-09T06:24:31Z",
      "updated_at": "2021-06-09T06:24:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Ruby agent, you can add New Relic Browser instrumentation to your webpages either automatically or manually. To enable Browser in the user interface, follow the procedures to install the Browser agent. Then follow the procedures in this section to set up the Ruby agent. Requirements In order to use New Relic Browser with your Ruby agent, make sure you meet these requirements: New Relic Ruby agent (version 3.0.1 or higher) For automatic instrumentation: Rails 2.3 or higher For manual instrumentation: Rails 2.0 to 2.2 Use auto-instrumentation Automatic instrumentation works with Rack, and requires Rails 2.3 or higher. Configure the agent to automatically instrument pages with end user monitoring scripts, by adding or editing the following flag in newrelic.yml. browser_monitoring: auto_instrument: true Copy This is the simplest way to monitor end users. The Ruby agent examines each page from your application and automatically injects the Browser JavaScript in the header. Auto-instrumentation works for environments that support Rack. For performance reasons the agent scans only the first 50k of your application's response for the header instrumentation point. In cases where a X-UA-Compatible meta tag is present and the <head> tag is longer than 50k, auto-instrumentation will fail gracefully. Auto-instrumentation will look for an X-UA-Compatible meta tag and insert the JavaScript directly after it. If the auto-instrumentation cannot find an X-UA-Compatible meta tag, it will insert after the opening head tag, and failing that it will insert after the opening body tag. If any of these tags are wrapped in conditionals or comments, the automatic instrumentation will likely fail. If auto-instrumentation fails to correctly instrument your application’s pages, then you must manually instrument via agent API. Manually instrument via agent API If you are using Rails 2.1 to 2.2 or cannot use auto-instrumentation, you can still set up end user monitoring manually by including appropriate scripts in your pages. Use the New Relic Ruby agent's API to generate the script to be inserted into your pages. For example, to modify your application's template to call the agent, use: <head> <%= ::NewRelic::Agent.browser_timing_header rescue \"\" %> ... existing template code ... </head> Copy CSP Nonce support CSP Nonce usage in our browser instrumentation is supported in version 7.1.0+ of the Ruby agent. To use a nonce with the Browser instrumentation, you must disable browser monitoring auto instrumentation and use the manual instrumentation via the agent API. You may now pass a nonce as an argument into the API method to allow the agent to insert the nonce into the browser instrumentation. For example, NewRelic::Agent.browser_timing_header(nonce). Troubleshooting If you do not see any browser data being reported, view the HTML source and confirm two blocks of script similar to this in your HTML head: <script type=\"text/javascript\">window.NREUM||(NREUM={});...</script> Copy If these are not present, check the auto-instrumentation settings or the placement of manual instrumentation in your template files. In versions of the Ruby agent prior to 3.7.0, <%=::NewRelic::Agent.browser_timing_footer rescue \"\" %> also needed to be called as close to the bottom of the document as possible. With 3.7.0, all the required script is included by browser_timing_header. browser_timing_footer returns an empty string for compatibility. Disable auto-instrumentation The default value of auto-instrument is true (even when unspecified). To disable auto-instrumentation, set this flag to false. To disable auto-instrumentation only for certain controllers or controller actions, use newrelic_ignore_enduser. Server-side instrumentation will be unaffected by this call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.65335,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic Browser and the Ruby <em>agent</em>",
        "sections": "New Relic Browser and the Ruby <em>agent</em>",
        "tags": "<em>Agents</em>",
        "body": "With the Ruby <em>agent</em>, you can add New Relic Browser instrumentation to your webpages either automatically or manually. To enable Browser in the user interface, follow the procedures to install the Browser <em>agent</em>. Then follow the procedures in this section to set up the Ruby <em>agent</em>. Requirements"
      },
      "id": "603eb812e7b9d247a82a07dc"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.39055,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    }
  ],
  "/docs/agents/go-agent/get-started/apm-agent-security-go": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.70569,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.39055,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    },
    {
      "sections": [
        "Go agent compatibility and requirements",
        "Golang versions",
        "Operating environments",
        "Integrations",
        "Database and instance-level performance",
        "Connect the agent to other features"
      ],
      "title": "Go agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Get started"
      ],
      "external_id": "551e784873adba059e7b6112fc75199dce0e3f28",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/get-started/go-agent-compatibility-requirements/",
      "published_at": "2021-06-08T17:14:18Z",
      "updated_at": "2021-03-30T15:50:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for Go, ensure your system meets these requirements. Golang versions New Relic supports Golang 1.7 or higher. Operating environments The agent supports Linux, macOS, and Windows. You can also use the Go agent in a Google App Engine (GAE) flexible environment. Integrations The following integration packages extend the base newrelic package to support other frameworks and libraries. If frameworks and databases don't have an integration package, you can still instrument them using the newrelic package primitives. For more information about instrumenting your database using these primitives, see the Go agent's datastore segments documentation on GitHub. The following integration packages must be imported along with the newrelic package, as shown in the nrgin example on GitHub. Project Integration package Purpose aws/aws-sdk-go v3/integrations/nrawssdk-v1 Instrument outbound calls made using Go AWS SDK aws/aws-sdk-go-v2 v3/integrations/nrawssdk-v2 Instrument outbound calls made using Go AWS SDK v2 labstack/echo v3/integrations/nrecho-v3 Instrument inbound requests through version 3 of the Echo framework labstack/echo v3/integrations/nrecho-v4 Instrument inbound requests through version 4 of the Echo framework gin-gonic/gin v3/integrations/nrgin Instrument inbound requests through the Gin framework gorilla/mux v3/integrations/nrgorilla Instrument inbound requests through the Gorilla framework julienschmidt/httprouter v3/integrations/nrhttprouter Instrument inbound requests through the HttpRouter framework aws/aws-lambda-go v3/integrations/nrlambda Instrument AWS Lambda applications sirupsen/logrus v3/integrations/nrlogrus Send agent log messages to Logrus mgutz/logxi v3/integrations/nrlogxi Send agent log messages to Logxi uber-go/zap v3/integrations/nrzap Send agent log messages to Zap pkg/errors v3/integrations/nrpkgerrors Wrap pkg/errors errors to improve stack traces and error class information openzipkin/b3-propagation v3/integrations/nrb3 Add B3 headers to outgoing requests database/sql Use a supported database driver or builtin instrumentation Instrument database calls with SQL jmoiron/sqlx Use a supported database driver or builtin instrumentation Instrument database calls with SQLx go-sql-driver/mysql v3/integrations/nrmysql Instrument database calls to MySQL lib/pq v3/integrations/nrpq Instrument database calls to Postgres snowflakedb/gosnowflake v3/integrations/nrsnowflake Instrument database calls to Snowflake go-redis/redis v3/integrations/nrredis-v7 Instrument calls to Redis Version 7 go-redis/redis v3/integrations/nrredis-v8 Instrument calls to Redis Version 8 mattn/go-sqlite3 v3/integrations/nrsqlite3 Instrument database calls to SQLite mongodb/mongo-go-driver v3/integrations/nrmongo Instrument MongoDB calls google.golang.org/grpc v3/integrations/nrgrpc Instrument gRPC servers and clients micro/go-micro v3/integrations/nrmicro Instrument servers, clients, publishers, and subscribers through the Micro framework nats-io/nats.go v3/integrations/nrnats Instrument publishers and subscribers using the NATS client nats-io/stan.go v3/integrations/nrstan Instrument publishers and subscribers using the NATS streaming client graphql-go/graphql v3/integrations/nrgraphqlgo Instrument inbound requests using graphql-go/graphql graph-gophers/graphql-go v3/integrations/nrgraphgophers Instrument inbound requests using graph-gophers/graphql-go Database and instance-level performance New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. The New Relic Go agent version 1.4 or higher supports instance details for all database drivers. Connect the agent to other features The Go agent integrates with other features to give you full-stack observability: Product Integration Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Go agent sends default events and attributes to New Relic for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. Browser monitoring The Go agent has an API for returning the browser agent's JavaScript. After using this API method on each request, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.557945,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>Go</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "Before you install New Relic for <em>Go</em>, ensure your system meets these requirements. Golang versions New Relic supports Golang 1.7 or higher. Operating environments The <em>agent</em> supports Linux, macOS, and Windows. You can also use the <em>Go</em> <em>agent</em> in a Google App Engine (GAE) flexible environment"
      },
      "id": "603e848a196a677702a83d8a"
    }
  ],
  "/docs/agents/go-agent/get-started/go-agent-compatibility-requirements": [
    {
      "sections": [
        "APM agent security: Go",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution"
      ],
      "title": "APM agent security: Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Get started"
      ],
      "external_id": "dd627ef60861ddfad5b611a3282145d093ea654c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/get-started/apm-agent-security-go/",
      "published_at": "2021-06-08T14:45:01Z",
      "updated_at": "2021-06-02T14:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Go agent default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the New Relic Go agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. HTTPS: The agent communicates with New Relic using HTTPS. High security mode settings When you enable high security mode, the default security settings are locked so that users cannot change them. In addition: You cannot create custom events. The agent strips exception messages from errors. The agent strips QueryParameters from database segments. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Setting Effects on data security HighSecurity boolean Default: false To enable high security mode, set this to true and enable high security (V2). This restricts the information you can send to New Relic. Attributes.Enabled boolean Default: true By default, you are sending some attributes to New Relic. If you do not want to send these default attributes to New Relic, set Attributes.Enabled to false. Attributes.Exclude string Default: (none) If there are specific attribute keys that you do not want to send to New Relic in transaction traces, identify them using Attributes.Exclude. This restricts the information sent to New Relic. For examples of how to disable the recording of each attribute, see their descriptions on the Go agent attributes page. CustomInsightsEvents.Enabled boolean Default: true By default, the agent records events sent to the Event API using RecordCustomEvent. If you enable high security mode, this is automatically set to false.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.30667,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>Go</em>",
        "sections": "APM <em>agent</em> security: <em>Go</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "The New Relic <em>Go</em> <em>agent</em> default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives"
      },
      "id": "603e8fa9196a67337ca83dc5"
    },
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.70564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.39052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    }
  ],
  "/docs/agents/go-agent/get-started/introduction-new-relic-go": [
    {
      "sections": [
        "APM agent security: Go",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution"
      ],
      "title": "APM agent security: Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Get started"
      ],
      "external_id": "dd627ef60861ddfad5b611a3282145d093ea654c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/get-started/apm-agent-security-go/",
      "published_at": "2021-06-08T14:45:01Z",
      "updated_at": "2021-06-02T14:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Go agent default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the New Relic Go agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. HTTPS: The agent communicates with New Relic using HTTPS. High security mode settings When you enable high security mode, the default security settings are locked so that users cannot change them. In addition: You cannot create custom events. The agent strips exception messages from errors. The agent strips QueryParameters from database segments. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Setting Effects on data security HighSecurity boolean Default: false To enable high security mode, set this to true and enable high security (V2). This restricts the information you can send to New Relic. Attributes.Enabled boolean Default: true By default, you are sending some attributes to New Relic. If you do not want to send these default attributes to New Relic, set Attributes.Enabled to false. Attributes.Exclude string Default: (none) If there are specific attribute keys that you do not want to send to New Relic in transaction traces, identify them using Attributes.Exclude. This restricts the information sent to New Relic. For examples of how to disable the recording of each attribute, see their descriptions on the Go agent attributes page. CustomInsightsEvents.Enabled boolean Default: true By default, the agent records events sent to the Event API using RecordCustomEvent. If you enable high security mode, this is automatically set to false.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.30667,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>Go</em>",
        "sections": "APM <em>agent</em> security: <em>Go</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "The New Relic <em>Go</em> <em>agent</em> default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives"
      },
      "id": "603e8fa9196a67337ca83dc5"
    },
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.70564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.39052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    }
  ],
  "/docs/agents/go-agent/index": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.70561,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.39048,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    },
    {
      "sections": [
        "APM agent security: Go",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution"
      ],
      "title": "APM agent security: Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Get started"
      ],
      "external_id": "dd627ef60861ddfad5b611a3282145d093ea654c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/get-started/apm-agent-security-go/",
      "published_at": "2021-06-08T14:45:01Z",
      "updated_at": "2021-06-02T14:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Go agent default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the New Relic Go agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. HTTPS: The agent communicates with New Relic using HTTPS. High security mode settings When you enable high security mode, the default security settings are locked so that users cannot change them. In addition: You cannot create custom events. The agent strips exception messages from errors. The agent strips QueryParameters from database segments. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Setting Effects on data security HighSecurity boolean Default: false To enable high security mode, set this to true and enable high security (V2). This restricts the information you can send to New Relic. Attributes.Enabled boolean Default: true By default, you are sending some attributes to New Relic. If you do not want to send these default attributes to New Relic, set Attributes.Enabled to false. Attributes.Exclude string Default: (none) If there are specific attribute keys that you do not want to send to New Relic in transaction traces, identify them using Attributes.Exclude. This restricts the information sent to New Relic. For examples of how to disable the recording of each attribute, see their descriptions on the Go agent attributes page. CustomInsightsEvents.Enabled boolean Default: true By default, the agent records events sent to the Event API using RecordCustomEvent. If you enable high security mode, this is automatically set to false.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.52068,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>Go</em>",
        "sections": "APM <em>agent</em> security: <em>Go</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "The New Relic <em>Go</em> <em>agent</em> default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives"
      },
      "id": "603e8fa9196a67337ca83dc5"
    }
  ],
  "/docs/agents/go-agent/installation/install-go-agent-gae-flexible-environment": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.14246,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": ". Configuration methods and precedence The primary way to configure the <em>Go</em> <em>agent</em> is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard <em>installation</em> process. With <em>Go</em> <em>agent</em> versions 2.7.0 or higher, you can also set a limited number"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Install New Relic for Go",
        "Tip",
        "Compatibility and requirements",
        "Install the Go agent",
        "View your app's data in New Relic",
        "Keep your agent up to date"
      ],
      "title": "Install New Relic for Go ",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Installation"
      ],
      "external_id": "1fe1294fee3ba819e696f667f6a4eebaba8f9221",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/installation/install-new-relic-go/",
      "published_at": "2021-06-09T01:04:53Z",
      "updated_at": "2021-05-15T18:21:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Go agent auto-instruments your code so you can start monitoring your Go language apps and microservices. You can use our launcher, or follow the instructions in this document to complete a basic Go agent installation. Tip To use Go or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add Go data Compatibility and requirements The Go agent requires Golang 1.7 or higher on Linux, macOS, or Windows. For more information, see Go agent compatibility and requirements. Install the Go agent In order to install the Go agent, you need a New Relic license key. Then, to install the agent: From github.com/newrelic/go-agent, use your preferred process; for example: go get github.com/newrelic/go-agent Copy Import the github.com/newrelic/go-agent/v3/newrelic package in your application. Initialize the Go agent by adding the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Instrument web transactions by wrapping standard HTTP requests in your app code. For example: http.HandleFunc(newrelic.WrapHandleFunc(app, \"/users\", usersHandler)) Copy Instrument other transactions you want to monitor. Optional: Instrument segments for an extra level of timing detail. Compile and deploy your application. View your app's data in New Relic Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the APM UI. If no data appears within a few minutes, follow the troubleshooting tips. Keep your agent up to date To take full advantage of New Relic's latest features, enhancements, and important security patches, keep your app's Go agent up to date.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.90538,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic for <em>Go</em> ",
        "sections": "<em>Install</em> the <em>Go</em> <em>agent</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Our <em>Go</em> <em>agent</em> auto-instruments your code so you can start monitoring your <em>Go</em> language apps and microservices. You can use our launcher, or follow the instructions in this document to complete a basic <em>Go</em> <em>agent</em> <em>installation</em>. Tip To use <em>Go</em> or any other <em>agent</em>, as well as the rest of our observability"
      },
      "id": "6043cf6428ccbc98632c60c6"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.07994,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    }
  ],
  "/docs/agents/go-agent/installation/install-new-relic-go": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.1424,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": ". Configuration methods and precedence The primary way to configure the <em>Go</em> <em>agent</em> is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard <em>installation</em> process. With <em>Go</em> <em>agent</em> versions 2.7.0 or higher, you can also set a limited number"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.07991,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    },
    {
      "sections": [
        "APM agent security: Go",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution"
      ],
      "title": "APM agent security: Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Get started"
      ],
      "external_id": "dd627ef60861ddfad5b611a3282145d093ea654c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/get-started/apm-agent-security-go/",
      "published_at": "2021-06-08T14:45:01Z",
      "updated_at": "2021-06-02T14:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Go agent default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the New Relic Go agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. HTTPS: The agent communicates with New Relic using HTTPS. High security mode settings When you enable high security mode, the default security settings are locked so that users cannot change them. In addition: You cannot create custom events. The agent strips exception messages from errors. The agent strips QueryParameters from database segments. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Setting Effects on data security HighSecurity boolean Default: false To enable high security mode, set this to true and enable high security (V2). This restricts the information you can send to New Relic. Attributes.Enabled boolean Default: true By default, you are sending some attributes to New Relic. If you do not want to send these default attributes to New Relic, set Attributes.Enabled to false. Attributes.Exclude string Default: (none) If there are specific attribute keys that you do not want to send to New Relic in transaction traces, identify them using Attributes.Exclude. This restricts the information sent to New Relic. For examples of how to disable the recording of each attribute, see their descriptions on the Go agent attributes page. CustomInsightsEvents.Enabled boolean Default: true By default, the agent records events sent to the Event API using RecordCustomEvent. If you enable high security mode, this is automatically set to false.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.83913,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>Go</em>",
        "sections": "APM <em>agent</em> security: <em>Go</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "The New Relic <em>Go</em> <em>agent</em> default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives"
      },
      "id": "603e8fa9196a67337ca83dc5"
    }
  ],
  "/docs/agents/go-agent/installation/uninstall-go-agent": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.1424,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": ". Configuration methods and precedence The primary way to configure the <em>Go</em> <em>agent</em> is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard <em>installation</em> process. With <em>Go</em> <em>agent</em> versions 2.7.0 or higher, you can also set a limited number"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Install New Relic for Go",
        "Tip",
        "Compatibility and requirements",
        "Install the Go agent",
        "View your app's data in New Relic",
        "Keep your agent up to date"
      ],
      "title": "Install New Relic for Go ",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Installation"
      ],
      "external_id": "1fe1294fee3ba819e696f667f6a4eebaba8f9221",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/installation/install-new-relic-go/",
      "published_at": "2021-06-09T01:04:53Z",
      "updated_at": "2021-05-15T18:21:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Go agent auto-instruments your code so you can start monitoring your Go language apps and microservices. You can use our launcher, or follow the instructions in this document to complete a basic Go agent installation. Tip To use Go or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add Go data Compatibility and requirements The Go agent requires Golang 1.7 or higher on Linux, macOS, or Windows. For more information, see Go agent compatibility and requirements. Install the Go agent In order to install the Go agent, you need a New Relic license key. Then, to install the agent: From github.com/newrelic/go-agent, use your preferred process; for example: go get github.com/newrelic/go-agent Copy Import the github.com/newrelic/go-agent/v3/newrelic package in your application. Initialize the Go agent by adding the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Instrument web transactions by wrapping standard HTTP requests in your app code. For example: http.HandleFunc(newrelic.WrapHandleFunc(app, \"/users\", usersHandler)) Copy Instrument other transactions you want to monitor. Optional: Instrument segments for an extra level of timing detail. Compile and deploy your application. View your app's data in New Relic Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the APM UI. If no data appears within a few minutes, follow the troubleshooting tips. Keep your agent up to date To take full advantage of New Relic's latest features, enhancements, and important security patches, keep your app's Go agent up to date.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.905365,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic for <em>Go</em> ",
        "sections": "<em>Install</em> the <em>Go</em> <em>agent</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Our <em>Go</em> <em>agent</em> auto-instruments your code so you can start monitoring your <em>Go</em> language apps and microservices. You can use our launcher, or follow the instructions in this document to complete a basic <em>Go</em> <em>agent</em> <em>installation</em>. Tip To use <em>Go</em> or any other <em>agent</em>, as well as the rest of our observability"
      },
      "id": "6043cf6428ccbc98632c60c6"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.07991,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    }
  ],
  "/docs/agents/go-agent/installation/update-go-agent": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.14236,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": ". Configuration methods and precedence The primary way to configure the <em>Go</em> <em>agent</em> is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard <em>installation</em> process. With <em>Go</em> <em>agent</em> versions 2.7.0 or higher, you can also set a limited number"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Install New Relic for Go",
        "Tip",
        "Compatibility and requirements",
        "Install the Go agent",
        "View your app's data in New Relic",
        "Keep your agent up to date"
      ],
      "title": "Install New Relic for Go ",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Installation"
      ],
      "external_id": "1fe1294fee3ba819e696f667f6a4eebaba8f9221",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/installation/install-new-relic-go/",
      "published_at": "2021-06-09T01:04:53Z",
      "updated_at": "2021-05-15T18:21:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Go agent auto-instruments your code so you can start monitoring your Go language apps and microservices. You can use our launcher, or follow the instructions in this document to complete a basic Go agent installation. Tip To use Go or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add Go data Compatibility and requirements The Go agent requires Golang 1.7 or higher on Linux, macOS, or Windows. For more information, see Go agent compatibility and requirements. Install the Go agent In order to install the Go agent, you need a New Relic license key. Then, to install the agent: From github.com/newrelic/go-agent, use your preferred process; for example: go get github.com/newrelic/go-agent Copy Import the github.com/newrelic/go-agent/v3/newrelic package in your application. Initialize the Go agent by adding the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Instrument web transactions by wrapping standard HTTP requests in your app code. For example: http.HandleFunc(newrelic.WrapHandleFunc(app, \"/users\", usersHandler)) Copy Instrument other transactions you want to monitor. Optional: Instrument segments for an extra level of timing detail. Compile and deploy your application. View your app's data in New Relic Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the APM UI. If no data appears within a few minutes, follow the troubleshooting tips. Keep your agent up to date To take full advantage of New Relic's latest features, enhancements, and important security patches, keep your app's Go agent up to date.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.90535,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic for <em>Go</em> ",
        "sections": "<em>Install</em> the <em>Go</em> <em>agent</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Our <em>Go</em> <em>agent</em> auto-instruments your code so you can start monitoring your <em>Go</em> language apps and microservices. You can use our launcher, or follow the instructions in this document to complete a basic <em>Go</em> <em>agent</em> <em>installation</em>. Tip To use <em>Go</em> or any other <em>agent</em>, as well as the rest of our observability"
      },
      "id": "6043cf6428ccbc98632c60c6"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.079865,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    }
  ],
  "/docs/agents/go-agent/instrumentation/create-custom-metrics-go": [
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 177.37747,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    },
    {
      "sections": [
        "Go agent attributes",
        "host.displayName",
        "httpResponseCode",
        "Important",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.User-Agent",
        "request.headers.userAgent",
        "request.method",
        "response.headers.contentLength",
        "response.headers.contentType",
        "http.statusCode",
        "Span and segment attributes",
        "db.collection",
        "db.instance",
        "db.statement",
        "http.method",
        "http.url",
        "peer.address",
        "peer.hostname",
        "Change attribute destination",
        "Turn destinations on or off",
        "Turn attributes on or off",
        "Create custom attributes",
        "For more help"
      ],
      "title": "Go agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "f6e6d25a949481b15a5beb78c962303857d713a4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/go-agent-attributes/",
      "published_at": "2021-06-08T15:06:05Z",
      "updated_at": "2021-03-16T13:46:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic's Go language agent, including: Error traces Transaction events Page views For an extra level of monitoring detail, create custom attributes. Go agent attributes The Go agent receives the following default attributes from your app. You can adjust these default settings and turn attributes on or off for certain destinations. host.displayName The name of the server host under which the current script is executing, called with newrelic.AttributeHostDisplayName. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeHostDisplayName) Copy httpResponseCode The response status code for a web request, called with newrelic.AttributeResponseCodeDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCodeDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to http.statusCode. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.accept The type as read from the HTTP request's Accept header, called with newrelic.AttributeRequestAccept Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestAccept) Copy request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header, called with newrelic.AttributeRequestContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentLength) Copy request.headers.contentType The incoming request content type as read from the Content-Type request header, called with newrelic.AttributeRequestContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentType) Copy request.headers.host The name from the HTTP host request header, called with newrelic.AttributeRequestHost. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestHost) Copy request.headers.referer The incoming request referer as read from the Referer request header, called with newrelic.AttributeRequestReferer. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestReferer) Copy request.headers.User-Agent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgentDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgentDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to request.headers.userAgent. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.userAgent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgent Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent) Copy Important This attribute was added in v3.0.0 of the agent and the original request.headers.User-Agent will eventually be removed. Therefore the v3.x agents will produce two attributes representing the the contents of the User-Agent HTTP header. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent, newrelic.AttributeRequestUserAgentDeprecated, ) Copy request.method The HTTP method of the incoming request, called with newrelic.AttributeRequestMethod Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestMethod) Copy response.headers.contentLength The outgoing response size in bytes as read from the Content-Length response header, called with newrelic.AttributeResponseContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentLength) Copy response.headers.contentType The outgoing response content-type as read from the Content-Type response header, called with newrelic.AttributeResponseContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentType) Copy http.statusCode The response status code for a web request, called with newrelic.AttributeResponseCode Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Important This attribute was added in v3.0.0 of the agent and the original httpResponseCode will eventually be removed. Therefore the v3.x agents will produce two attributes representing the response status code for a web request. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode, newrelic.AttributeResponseCodeDeprecated, ) Copy Span and segment attributes If you have Go agent v2.6.0 or higher, you can configure attributes on spans and segments. The Go agent receives the following default attributes from your app. These attributes are only found on span events and transaction trace segments. You can adjust these default settings and turn attributes on or off for certain destinations. db.collection For datastore segments, this is the collection used and represents the table or group, called with newrelic.SpanAttributeDBCollection. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBCollection) Copy db.instance For datastore segments this is the database name and represents the name of the database where the query is being executed, called with newrelic.SpanAttributeDBInstance. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBInstance) Copy db.statement For datastore segments this is the parameterized query being executed and represents the query being performed, called with newrelic.SpanAttributeDBStatement. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBStatement) Copy http.method For external segments this is the http method of the outgoing request, called with newrelic.SpanAttributeHTTPMethod. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPMethod) Copy http.url For external segments this is the url of the outgoing request, called with newrelic.SpanAttributeHTTPURL. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPURL) Copy peer.address For datastore segments this is the hostname plus port of the database being queried, called with newrelic.SpanAttributePeerAddress. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerAddress) Copy peer.hostname For datastore segments this is the hostname of the database being queried, called with newrelic.SpanAttributePeerHostname. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerHostname) Copy Change attribute destination Use these options to change attribute destinations: Turn destinations on or off To open or close an entire destination to attributes, set the .Enabled flag to true or false. For example, to turn off APM error collection: After the config, add: config.ErrorCollector.Attributes.Enabled = false Copy Turn attributes on or off To turn specific attributes on or off, use the .Include or .Exclude methods. For example, to disable AttributeResponseCode: After the config, add: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Create custom attributes Add custom attributes by using this method in a transaction: txn.AddAttribute(\"key\", \"value\") Copy The txn variable is the one instrumented for the Go transaction. For example: txn.AddAttribute(\"product\", \"widget\") txn.AddAttribute(\"price\", 19.99) txn.AddAttribute(\"importantCustomer\", true) Copy Default settings for custom attribute destinations: Error collector (traced errors): Enabled Transaction events: Enabled For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.494995,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> attributes",
        "sections": "<em>Go</em> <em>agent</em> attributes",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic&#x27;s <em>Go</em> language <em>agent</em>, including: Error traces Transaction events"
      },
      "id": "603e9f8028ccbcaa6ceba76d"
    },
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.405624,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    }
  ],
  "/docs/agents/go-agent/instrumentation/go-agent-attributes": [
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 177.37741,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    },
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.40559,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Create custom metrics in Go",
        "Create a custom metric",
        "Name a custom metric",
        "For more help"
      ],
      "title": "Create custom metrics in Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "9336bef71f0cac25636bfe0b4392864f3605c6a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/create-custom-metrics-go/",
      "published_at": "2021-06-08T14:39:30Z",
      "updated_at": "2021-03-11T08:14:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics allow you to report any metric that passes through your code. For example, with New Relic's Go monitoring, you can create custom metrics to time a component of your app that may not captured by default. Once you capture a custom metric, you can: Unify your monitoring inside New Relic through the data explorer. Use our REST API to programmatically retrieve and use custom metric data outside of the UI. Create custom metric alert conditions to notify you or your team when your custom metric exceeds specific values. Create a custom metric Instantiate your application by running the following: cfg := newrelic.NewConfig(\"Your App Name\", mustGetEnv(\"NEW_RELIC_LICENSE_KEY\")) cfg.Logger = newrelic.NewDebugLogger(os.Stdout) var err error app, err = newrelic.NewApplication(cfg) Copy After instantiating your app, create a custom metric with the following code: app.RecordCustomMetric( \"CustomMetricName\", //name of your metric 132, //time in ms ); Copy RecordCustomMetric's first parameter is a string that names your custom metric. The RecordCustomMetric method will automatically prepend the string Custom/ to your metric name. This means the above code will generate a metric named Custom/CustomMetricName. RecordCustomMetric's second parameter is the time, in milliseconds, that you want to record for your custom transaction. This means the above code will produce a metric of .132 seconds in New Relic's systems. To use a custom metric as a counter, it can be incremented by making the call as described above, and the count value for that metric will be incremented by 1. The value you use for the second parameter (time in ms) is irrelevant if you are only using the metric as a counter, and thus you can use a static number, such as 0 or 1. To increment a counter by a number greater than 1, call app.RecordCustomMetric multiple times - each call will only increment the metric by 1 no matter what the value of the second parameter is. Name a custom metric Carefully consider how you name your custom metrics. If your program creates too many uniquely-named metrics, you may end up with a metric grouping issue (MGI). MGIs occur when the granularity of metric names is too fine, resulting in hundreds or thousands of different metric names. One common cause of MGIs is relying on the full URL name for metric naming in web transactions. A few major code paths may generate many different full URL paths to unique documents, articles, page, etc. If the unique element of the URL path is included in the metric name, each of these common paths will have its own unique metric name. If metric grouping issues occur, follow the troubleshooting procedures. For more help Additional documentation resources include: New Relic for Go segment documentation on GitHub (more details about instrumenting segments on New Relic GitHub) Instrument Go transactions (how to create New Relic transactions in your Go app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.85327,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom metrics in <em>Go</em>",
        "sections": "Create custom metrics in <em>Go</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " Additional documentation resources include: New Relic for <em>Go</em> segment documentation on GitHub (more details about instrumenting segments on New Relic GitHub) <em>Instrument</em> <em>Go</em> transactions (how to create New Relic transactions in your <em>Go</em> app)"
      },
      "id": "6043b8f628ccbc48692c609c"
    }
  ],
  "/docs/agents/go-agent/instrumentation/instrument-go-segments": [
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 177.37741,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    },
    {
      "sections": [
        "Go agent attributes",
        "host.displayName",
        "httpResponseCode",
        "Important",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.User-Agent",
        "request.headers.userAgent",
        "request.method",
        "response.headers.contentLength",
        "response.headers.contentType",
        "http.statusCode",
        "Span and segment attributes",
        "db.collection",
        "db.instance",
        "db.statement",
        "http.method",
        "http.url",
        "peer.address",
        "peer.hostname",
        "Change attribute destination",
        "Turn destinations on or off",
        "Turn attributes on or off",
        "Create custom attributes",
        "For more help"
      ],
      "title": "Go agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "f6e6d25a949481b15a5beb78c962303857d713a4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/go-agent-attributes/",
      "published_at": "2021-06-08T15:06:05Z",
      "updated_at": "2021-03-16T13:46:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic's Go language agent, including: Error traces Transaction events Page views For an extra level of monitoring detail, create custom attributes. Go agent attributes The Go agent receives the following default attributes from your app. You can adjust these default settings and turn attributes on or off for certain destinations. host.displayName The name of the server host under which the current script is executing, called with newrelic.AttributeHostDisplayName. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeHostDisplayName) Copy httpResponseCode The response status code for a web request, called with newrelic.AttributeResponseCodeDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCodeDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to http.statusCode. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.accept The type as read from the HTTP request's Accept header, called with newrelic.AttributeRequestAccept Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestAccept) Copy request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header, called with newrelic.AttributeRequestContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentLength) Copy request.headers.contentType The incoming request content type as read from the Content-Type request header, called with newrelic.AttributeRequestContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentType) Copy request.headers.host The name from the HTTP host request header, called with newrelic.AttributeRequestHost. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestHost) Copy request.headers.referer The incoming request referer as read from the Referer request header, called with newrelic.AttributeRequestReferer. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestReferer) Copy request.headers.User-Agent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgentDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgentDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to request.headers.userAgent. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.userAgent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgent Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent) Copy Important This attribute was added in v3.0.0 of the agent and the original request.headers.User-Agent will eventually be removed. Therefore the v3.x agents will produce two attributes representing the the contents of the User-Agent HTTP header. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent, newrelic.AttributeRequestUserAgentDeprecated, ) Copy request.method The HTTP method of the incoming request, called with newrelic.AttributeRequestMethod Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestMethod) Copy response.headers.contentLength The outgoing response size in bytes as read from the Content-Length response header, called with newrelic.AttributeResponseContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentLength) Copy response.headers.contentType The outgoing response content-type as read from the Content-Type response header, called with newrelic.AttributeResponseContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentType) Copy http.statusCode The response status code for a web request, called with newrelic.AttributeResponseCode Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Important This attribute was added in v3.0.0 of the agent and the original httpResponseCode will eventually be removed. Therefore the v3.x agents will produce two attributes representing the response status code for a web request. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode, newrelic.AttributeResponseCodeDeprecated, ) Copy Span and segment attributes If you have Go agent v2.6.0 or higher, you can configure attributes on spans and segments. The Go agent receives the following default attributes from your app. These attributes are only found on span events and transaction trace segments. You can adjust these default settings and turn attributes on or off for certain destinations. db.collection For datastore segments, this is the collection used and represents the table or group, called with newrelic.SpanAttributeDBCollection. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBCollection) Copy db.instance For datastore segments this is the database name and represents the name of the database where the query is being executed, called with newrelic.SpanAttributeDBInstance. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBInstance) Copy db.statement For datastore segments this is the parameterized query being executed and represents the query being performed, called with newrelic.SpanAttributeDBStatement. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBStatement) Copy http.method For external segments this is the http method of the outgoing request, called with newrelic.SpanAttributeHTTPMethod. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPMethod) Copy http.url For external segments this is the url of the outgoing request, called with newrelic.SpanAttributeHTTPURL. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPURL) Copy peer.address For datastore segments this is the hostname plus port of the database being queried, called with newrelic.SpanAttributePeerAddress. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerAddress) Copy peer.hostname For datastore segments this is the hostname of the database being queried, called with newrelic.SpanAttributePeerHostname. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerHostname) Copy Change attribute destination Use these options to change attribute destinations: Turn destinations on or off To open or close an entire destination to attributes, set the .Enabled flag to true or false. For example, to turn off APM error collection: After the config, add: config.ErrorCollector.Attributes.Enabled = false Copy Turn attributes on or off To turn specific attributes on or off, use the .Include or .Exclude methods. For example, to disable AttributeResponseCode: After the config, add: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Create custom attributes Add custom attributes by using this method in a transaction: txn.AddAttribute(\"key\", \"value\") Copy The txn variable is the one instrumented for the Go transaction. For example: txn.AddAttribute(\"product\", \"widget\") txn.AddAttribute(\"price\", 19.99) txn.AddAttribute(\"importantCustomer\", true) Copy Default settings for custom attribute destinations: Error collector (traced errors): Enabled Transaction events: Enabled For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.494995,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> attributes",
        "sections": "<em>Go</em> <em>agent</em> attributes",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic&#x27;s <em>Go</em> language <em>agent</em>, including: Error traces Transaction events"
      },
      "id": "603e9f8028ccbcaa6ceba76d"
    },
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.40559,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    }
  ],
  "/docs/agents/go-agent/instrumentation/instrument-go-transactions": [
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 177.37741,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    },
    {
      "sections": [
        "Go agent attributes",
        "host.displayName",
        "httpResponseCode",
        "Important",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.User-Agent",
        "request.headers.userAgent",
        "request.method",
        "response.headers.contentLength",
        "response.headers.contentType",
        "http.statusCode",
        "Span and segment attributes",
        "db.collection",
        "db.instance",
        "db.statement",
        "http.method",
        "http.url",
        "peer.address",
        "peer.hostname",
        "Change attribute destination",
        "Turn destinations on or off",
        "Turn attributes on or off",
        "Create custom attributes",
        "For more help"
      ],
      "title": "Go agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "f6e6d25a949481b15a5beb78c962303857d713a4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/go-agent-attributes/",
      "published_at": "2021-06-08T15:06:05Z",
      "updated_at": "2021-03-16T13:46:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic's Go language agent, including: Error traces Transaction events Page views For an extra level of monitoring detail, create custom attributes. Go agent attributes The Go agent receives the following default attributes from your app. You can adjust these default settings and turn attributes on or off for certain destinations. host.displayName The name of the server host under which the current script is executing, called with newrelic.AttributeHostDisplayName. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeHostDisplayName) Copy httpResponseCode The response status code for a web request, called with newrelic.AttributeResponseCodeDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCodeDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to http.statusCode. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.accept The type as read from the HTTP request's Accept header, called with newrelic.AttributeRequestAccept Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestAccept) Copy request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header, called with newrelic.AttributeRequestContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentLength) Copy request.headers.contentType The incoming request content type as read from the Content-Type request header, called with newrelic.AttributeRequestContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentType) Copy request.headers.host The name from the HTTP host request header, called with newrelic.AttributeRequestHost. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestHost) Copy request.headers.referer The incoming request referer as read from the Referer request header, called with newrelic.AttributeRequestReferer. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestReferer) Copy request.headers.User-Agent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgentDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgentDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to request.headers.userAgent. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.userAgent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgent Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent) Copy Important This attribute was added in v3.0.0 of the agent and the original request.headers.User-Agent will eventually be removed. Therefore the v3.x agents will produce two attributes representing the the contents of the User-Agent HTTP header. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent, newrelic.AttributeRequestUserAgentDeprecated, ) Copy request.method The HTTP method of the incoming request, called with newrelic.AttributeRequestMethod Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestMethod) Copy response.headers.contentLength The outgoing response size in bytes as read from the Content-Length response header, called with newrelic.AttributeResponseContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentLength) Copy response.headers.contentType The outgoing response content-type as read from the Content-Type response header, called with newrelic.AttributeResponseContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentType) Copy http.statusCode The response status code for a web request, called with newrelic.AttributeResponseCode Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Important This attribute was added in v3.0.0 of the agent and the original httpResponseCode will eventually be removed. Therefore the v3.x agents will produce two attributes representing the response status code for a web request. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode, newrelic.AttributeResponseCodeDeprecated, ) Copy Span and segment attributes If you have Go agent v2.6.0 or higher, you can configure attributes on spans and segments. The Go agent receives the following default attributes from your app. These attributes are only found on span events and transaction trace segments. You can adjust these default settings and turn attributes on or off for certain destinations. db.collection For datastore segments, this is the collection used and represents the table or group, called with newrelic.SpanAttributeDBCollection. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBCollection) Copy db.instance For datastore segments this is the database name and represents the name of the database where the query is being executed, called with newrelic.SpanAttributeDBInstance. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBInstance) Copy db.statement For datastore segments this is the parameterized query being executed and represents the query being performed, called with newrelic.SpanAttributeDBStatement. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBStatement) Copy http.method For external segments this is the http method of the outgoing request, called with newrelic.SpanAttributeHTTPMethod. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPMethod) Copy http.url For external segments this is the url of the outgoing request, called with newrelic.SpanAttributeHTTPURL. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPURL) Copy peer.address For datastore segments this is the hostname plus port of the database being queried, called with newrelic.SpanAttributePeerAddress. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerAddress) Copy peer.hostname For datastore segments this is the hostname of the database being queried, called with newrelic.SpanAttributePeerHostname. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerHostname) Copy Change attribute destination Use these options to change attribute destinations: Turn destinations on or off To open or close an entire destination to attributes, set the .Enabled flag to true or false. For example, to turn off APM error collection: After the config, add: config.ErrorCollector.Attributes.Enabled = false Copy Turn attributes on or off To turn specific attributes on or off, use the .Include or .Exclude methods. For example, to disable AttributeResponseCode: After the config, add: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Create custom attributes Add custom attributes by using this method in a transaction: txn.AddAttribute(\"key\", \"value\") Copy The txn variable is the one instrumented for the Go transaction. For example: txn.AddAttribute(\"product\", \"widget\") txn.AddAttribute(\"price\", 19.99) txn.AddAttribute(\"importantCustomer\", true) Copy Default settings for custom attribute destinations: Error collector (traced errors): Enabled Transaction events: Enabled For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.494995,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> attributes",
        "sections": "<em>Go</em> <em>agent</em> attributes",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic&#x27;s <em>Go</em> language <em>agent</em>, including: Error traces Transaction events"
      },
      "id": "603e9f8028ccbcaa6ceba76d"
    },
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.40559,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    }
  ],
  "/docs/agents/go-agent/troubleshooting/no-data-appears-go": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-06-08T17:13:22Z",
      "updated_at": "2021-06-02T17:38:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.95468,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-06-08T20:20:01Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.390335,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    },
    {
      "sections": [
        "Install New Relic for Go",
        "Tip",
        "Compatibility and requirements",
        "Install the Go agent",
        "View your app's data in New Relic",
        "Keep your agent up to date"
      ],
      "title": "Install New Relic for Go ",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Installation"
      ],
      "external_id": "1fe1294fee3ba819e696f667f6a4eebaba8f9221",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/installation/install-new-relic-go/",
      "published_at": "2021-06-09T01:04:53Z",
      "updated_at": "2021-05-15T18:21:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Go agent auto-instruments your code so you can start monitoring your Go language apps and microservices. You can use our launcher, or follow the instructions in this document to complete a basic Go agent installation. Tip To use Go or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add Go data Compatibility and requirements The Go agent requires Golang 1.7 or higher on Linux, macOS, or Windows. For more information, see Go agent compatibility and requirements. Install the Go agent In order to install the Go agent, you need a New Relic license key. Then, to install the agent: From github.com/newrelic/go-agent, use your preferred process; for example: go get github.com/newrelic/go-agent Copy Import the github.com/newrelic/go-agent/v3/newrelic package in your application. Initialize the Go agent by adding the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Instrument web transactions by wrapping standard HTTP requests in your app code. For example: http.HandleFunc(newrelic.WrapHandleFunc(app, \"/users\", usersHandler)) Copy Instrument other transactions you want to monitor. Optional: Instrument segments for an extra level of timing detail. Compile and deploy your application. View your app's data in New Relic Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the APM UI. If no data appears within a few minutes, follow the troubleshooting tips. Keep your agent up to date To take full advantage of New Relic's latest features, enhancements, and important security patches, keep your app's Go agent up to date.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.78642,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic for <em>Go</em> ",
        "sections": "Install the <em>Go</em> <em>agent</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " your application. View your app&#x27;s data in New Relic Wait a few minutes for your application to send data to New Relic. Then, check your app&#x27;s performance in the APM UI. If no data appears within a few minutes, follow the <em>troubleshooting</em> tips. Keep your <em>agent</em> up to date To take full advantage of New Relic&#x27;s latest features, enhancements, and important security patches, keep your app&#x27;s <em>Go</em> <em>agent</em> up to date."
      },
      "id": "6043cf6428ccbc98632c60c6"
    }
  ],
  "/docs/agents/index": [
    {
      "sections": [
        "Agent attributes",
        "Attribute destination flow",
        "Types of attributes",
        "Destinations for attributes",
        "Viewing request attributes",
        "Limits",
        "Agent-specific attributes"
      ],
      "title": "Agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "088fa6cfe4cd8dd8f6ee9462a0181497904caf42",
      "image": "https://docs.newrelic.com/static/28e38366587e506dc64423df1bff8073/8c557/screen-tx-trace-attributes.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/agent-attributes/",
      "published_at": "2021-06-08T17:58:52Z",
      "updated_at": "2021-06-02T17:50:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can view these key-value pairs in some places in the UI, or by querying that data using NRQL. New Relic gives users the ability to customize exactly which attributes will be sent to each of these destinations. You can also collect custom attributes to send additional data to New Relic. Attribute destination flow This diagram illustrates how an agent decides to send attributes to each destination. Agent attribute collection: An agent makes three different decisions when sending an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by agent. (The properties in this diagram are specific to the PHP agent, but the general flow is the same for all agents. Property names and syntax vary by agent.) Types of attributes Attributes can be collected in a variety of ways: Message property attributes: These are the properties set on a message received from a queue or topic. HTTP request attributes: These are the parameters for an HTTP request. User attributes: These are attributes provided by the user through each agent's API. Agent attributes: These are attributes captured by the agent; for example, httpResponseCode and httpResponseMessage. Destinations for attributes Collected attributes appear in these locations: Collected attributes Location Transaction traces Each minute transaction traces collect data for your slowest individual HTTP requests. These traces will report attributes collected during the transaction. Traced errors If a transaction results in an error, these traced errors will be reported to New Relic APM. A traced error will contain attributes collected during the transaction. Transaction events APM transactions will contain attributes collected during the transaction. Insights page views Browser page views will contain attributes collected during the transaction. However, attributes collected at the end of a transaction may not appear on PageView events. This destination is also called browser monitoring. Span events Span events collected for distributed tracing will contain attributes collected during the span. The following agents support the addition of custom user attributes to span events: Java agent 5.13.0 and above Go agent 3.6.0 and above .NET agent 8.25 and above Node agent 6.10.0 and above PHP agent 9.12.0.268 and above Python agent 5.8.0.136 and above Ruby agent 6.8.0 and above Transaction segments Each segment in a transaction trace will contain attributes recorded for that segment. Viewing request attributes Request attributes are associated with specific transaction traces, browser traces, and errors in New Relic APM and New Relic Insights. You can see the attributes recorded with a request when viewing the individual trace or error. Custom attributes can be queried via NRQL exactly like any other attribute. APM > (select an app) > Monitoring > Transactions > (select a transaction) > (select a trace): Here is an example from the Ruby agent of the Request attributes and Custom attributes for a transaction trace. Exact attributes depend on your agent and on your attribute configuration. Limits User attributes, request attributes, and message queue parameters are limited by count and size. Parameter Limitations Transaction Limited to 64 user attributes Attribute key Limited to 256 bytes each If the key is more than 256 bytes, then the attribute will not be recorded. Attribute value Limited to 256 bytes each If the value is greater than 256 bytes, then the attribute value will be truncated. Agent-specific attributes Each New Relic APM agent collects custom attributes. The supported attributes depend on the specific agent: C SDK Go Java .NET Node.js PHP Python Ruby",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 455.83484,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Agent</em> attributes",
        "sections": "<em>Agent</em> attributes",
        "tags": "Manage <em>APM</em> <em>agents</em>",
        "body": " an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by <em>agent</em>. (The properties in this diagram are specific to the PHP <em>agent</em>, but the general flow is the same for all <em>agents</em>. Property names and syntax vary by <em>agent</em>.) Types of attributes"
      },
      "id": "603eb9db28ccbc127aeba79e"
    },
    {
      "sections": [
        "Real time streaming",
        "Why it matters",
        "Agent version to automatically enable",
        "Caution",
        "Query real time streaming data",
        "Create real time streaming charts"
      ],
      "title": "Real time streaming",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "ead7b5f2e74d1096a9ba796f3001be0b663941e0",
      "image": "https://docs.newrelic.com/static/5edbc3948f29fe9b1202aa05c9645b6a/c1b63/RTS.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/real-time-streaming/",
      "published_at": "2021-06-08T20:25:31Z",
      "updated_at": "2021-06-02T17:39:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With real time streaming, your APM event data is sent to New Relic every five seconds. You can query and visualize your data for transactions, errors, and custom events in near real time. The smaller payloads result in faster chart refreshes and faster queries of data that is the most important to you. No configuration is needed to take advantage of real time streaming. All you need to do is ensure your APM agent version is up to date. Why it matters Real time streaming doesn't result in more events being sent. The combination of more frequent posts, with a smaller number of events per post, results in approximately the same number of events per minute as there would be without real time streaming. The following image shows a comparison between data sent to New Relic with and without real time streaming. Note that 10,000 is an example number of events; some agents have lower default limits. The overall limits on how many events can be sent per minute haven't changed. Also, non-event data (spans, traces, and metrics) are unaffected; they're still sent every minute. Use real time streaming to quickly understand the impact when something has changed, such as deploying a new app version. Examine key performance indicators (throughput, error rates, charting, etc.) in near real time. Respond quickly to failure conditions and anomalies. Get the most out of New Relic One dashboards. Reduce mean time to detection with APM events reporting every five seconds. Agent version to automatically enable To enable real time streaming, update to the latest New Relic APM agent. You don't need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all APM agents. Here are the minimum agent versions: C SDK: v1.3.0 or higher Go: v2.8.0 or higher Java: v5.5.0 or higher .NET: v8.23.107.0 or higher Node.js: v5.13.0 or higher PHP: v9.5.0.252 or higher Python: v5.2.0.127 or higher Ruby: v6.7.0.359 or higher Caution If Transaction event reporting is disabled, this can affect some UI elements throughout New Relic. You may see some empty charts on some UI pages that rely on this data. Query real time streaming data When building charts, include the following in your NRQL query: NRQL clause Comments SINCE 5 minutes ago Be sure to add a SINCE 5 minutes ago clause to your NRQL query in order to take advantage of the 5 second chart refresh interval. This is because the chart's refresh interval is based on the time window. TIMESERIES bucket To set the refresh interval for time series charts, you can also specify the bucket size as an optional argument to the TIMESERIES clause. For example, SINCE 30 minutes ago TIMESERIES 5 seconds will display a 30 minute window at a 5 second resolution. You can have a maximum of 366 buckets. Create real time streaming charts You can visualize the results of your NRQL query in New Relic One: Go to one.newrelic.com, and at the top of the page, select Query your data. Use the query builder to start building a chart. Select the advanced (NRQL) mode. (If you start with basic mode, switch to advanced mode to complete the next step.) In your NRQL query, adjust the SINCE and TIMESERIES clauses to take advantage of the 5 second refresh intervals.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 455.7284,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Agent</em> version to automatically enable",
        "tags": "Manage <em>APM</em> <em>agents</em>",
        "body": " to automatically enable To enable real time streaming, update to the latest New Relic <em>APM</em> <em>agent</em>. You don&#x27;t need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all <em>APM</em> <em>agents</em>. Here are the minimum <em>agent</em> versions: C SDK: v1.3.0"
      },
      "id": "603e9d27196a678e41a83db1"
    },
    {
      "sections": [
        "Use multiple names for an app",
        "Important",
        "Roll up app data",
        "Prevent duplicate transaction events",
        "Roll up browser data",
        "Define app names from most to least specific",
        "Name app instances via agent config file",
        "Examples",
        "One app, three clusters",
        "Two instances of one app",
        "Other options to organize your apps"
      ],
      "title": "Use multiple names for an app",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "App naming"
      ],
      "external_id": "af78a44c170729aac326233d6468b0b61b6cdff2",
      "image": "https://docs.newrelic.com/static/67c256b1f08164be39b8eeb2ca8ff4e6/8c557/Insights-ToggleOnOff.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/app-naming/use-multiple-names-app/",
      "published_at": "2021-06-08T20:26:31Z",
      "updated_at": "2021-06-02T17:23:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When working with your data in New Relic, you may want to view aggregated data for an application across clusters, environments, or data centers, while at the same time be able to view each of your application instance's data individually. Important If you use multiple names for an app, the last name assigned is the least specific name New Relic uses to roll up the data. For best results to view both instance-level and aggregated data, set the order of your app's rollup names from most specific to least specific in your configuration file. Roll up app data Normally, when two instances report with the same app name, agent language, and license key, New Relic aggregates their data into a single app within the New Relic user interface. You can also view data for the individual hosts and instances from the app's New Relic APM Overview page. To segment your app in a different way, or to work with each instance as an individual app while maintaining the overall view of the data, use your New Relic agent's config file to give an app up to three different rollup names. New Relic will then report the app's data separately to each app listed in the config file. For example, you might want to separate the data collected for your app running in development, staging, and production environments, but also have a common view of the app in every environment. Or, if you have two data centers running the same code, you could name one app EastCoastApp;AggregateApp and the second app WestCoastApp;AggregateApp. Prevent duplicate transaction events By default, an app with multiple names will generate multiple events for transactions (a duplicate transaction for each name). For example, if you give your app three names, that's three times the number of events for transactions. To avoid duplicate events, disable collection for each of the duplicate app names: Go to one.newrelic.com or one.eu.newrelic.com > More > Manage Insights Data. Toggle data collection on/off for duplicate app names, then save. Roll up browser data When you use multiple names to report application data, any Browser monitoring data from that application will also be grouped into multiple applications using the same configuration. Important Session trace data will only report to the first application listed. Other Browser data will populate into each of the up to three applications, but session trace data will be limited to the most specific application. Define app names from most to least specific You can give each app up to three names, which New Relic uses to aggregate data from most to least specific. You can then use the New Relic UI to view data for each app name individually, as well as in aggregate for overall application performance. When doing so, the order in which you specify the app names is important. Using multiple names Comments Most specific A unique rollup name. Less specific A shared rollup name to aggregate data in the New Relic UI. This provides more general organization. Optional, least specific An additional, shared rollup name. If used, this is the most general name New Relic uses to aggregate data into a single app. Name app instances via agent config file The naming convention you use in your configuration file depends on your New Relic agent. Set the order of your app's names so that the first rollup name is the most unique. The second and third names can be unique, or they can be the same. The second name is more general for aggregate data, and the third name (if used) is the most general. Agent Configuration file value C Identify a maximum of three names separated by a semicolon ; in your newrelic_app_config_t * config;. Go Set AppName to a maximum of three names separated by a semicolon. Java Set app_name to a maximum of three names separated by a semicolon. .NET Use any of the available options to name your .NET app. Node.js Set app_name to a maximum of three names separated by a comma. Enclose the string of names with single or double quotes. (Or, change the environment variable NEW_RELIC_APP_NAME.) PHP Use any of the available options to name your PHP application. Use three names separated by a semicolon. Python Set app_name to a maximum of three names separated by a semicolon. Do not add a space after the semicolon, or the next name will be interpreted as a comment. Ruby Set app_name to a maximum of three names separated by a semicolon. For more information, refer to the configuration file documentation for your agent. Examples Here are examples of how you could use multiple rollup names for a single app. One app, three clusters A Java app collecting survey data runs on three clusters. Change the value for the app name in your agent config file by giving it three different names, one for each cluster. Cluster 1: app_name: SurveyCluster1;Survey Data Copy Cluster 2: app_name: SurveyCluster2;Survey Data Copy Cluster 3: app_name: SurveyCluster3;Survey Data Copy This will report four applications in New Relic APM: The app name for aggregate data from all three clusters is Survey Data. Three individual applications named SurveyCluster1, SurveyCluster2, and SurveyCluster3. Two instances of one app A PHP agent is monitoring an e-commerce application running on two clusters in each of two data centers, and you want to view data for each subgroup as well as the overall aggregated data. Cluster A: newrelic.appname=\"EcomClusterA;EcomEast;EcomAll\" Copy Cluster B: newrelic.appname=\"EcomClusterB;EcomEast;EcomAll\" Copy Cluster C: newrelic.appname=\"EcomClusterC;EcomWest;EcomAll\" Copy Cluster D: newrelic.appname=\"EcomClusterD;EcomWest;EcomAll\" Copy This example configuration will report seven applications in the New Relic APM UI: Four apps: One for each of the four clusters (A B C D) Two apps: One for each datacenter (East and West) One app for the overall data across clusters and data centers (EcomAll) Other options to organize your apps If you do not want to apply multiple names to your apps, you can organize them with labels and categories. This allows you to easily sort, filter, and page through them from their product index pages in the New Relic UI. You can also set distinct performance thresholds for each environment with alert conditions and key transactions. These thresholds will apply to the individual apps, while the overall app will not have its own thresholds. The overall app will treat incoming data according to the threshold for the relevant enviroment.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 455.57568,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Name app instances via <em>agent</em> config file",
        "tags": "Manage <em>APM</em> <em>agents</em>",
        "body": " with the same app name, <em>agent</em> language, and license key, New Relic aggregates their data into a single app within the New Relic user interface. You can also view data for the individual hosts and instances from the app&#x27;s New Relic <em>APM</em> Overview page. To segment your app in a different way, or to work"
      },
      "id": "603ebde1196a677dbaa83dec"
    }
  ],
  "/docs/agents/java-agent/additional-installation/aws-elastic-beanstalk-installation-java": [
    {
      "sections": [
        "Java agent configuration: Config file",
        "Configuration file structure",
        "Tip",
        "Configuration settings precedence",
        "Configuring the Java extensions directory",
        "Create an extensions directory",
        "Specify an existing extensions directory",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (REQUIRED)",
        "agent_enabled",
        "apdex_t (DEPRECATED)",
        "appserver_port",
        "Important",
        "audit_mode",
        "ca_bundle_path",
        "use_private_ssl",
        "enable_auto_app_naming",
        "enable_auto_transaction_naming",
        "Caution",
        "enable_custom_tracing",
        "extensions.dir",
        "high_security",
        "insert_api_key",
        "labels",
        "max_stack_trace_lines",
        "proxy_host",
        "proxy_password",
        "proxy_port",
        "proxy_user",
        "proxy_scheme",
        "reactor-netty.errors.enabled",
        "send_data_on_exit",
        "send_data_on_exit_threshold",
        "send_environment_info",
        "send_jvm_props",
        "ssl (DEPRECATED)",
        "sync_startup",
        "scala_futures_as_segments",
        "Logging configuration",
        "log_daily",
        "log_file_count",
        "log_file_name",
        "log_file_path",
        "log_level",
        "log_limit_in_kbytes",
        "JMX",
        "enabled",
        "linkingMetadataMBean",
        "Attributes",
        "include",
        "exclude",
        "Transaction tracer",
        "explain_enabled",
        "explain_threshold",
        "insert_sql_max_length",
        "log_sql",
        "record_sql",
        "stack_based_naming (Play 2.x+ only)",
        "stack_trace_threshold",
        "top_n",
        "transaction_threshold",
        "slow_query_whitelist (DEPRECATED)",
        "collect_slow_queries_from",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "token_limit",
        "segment_limit",
        "Transaction segments",
        "Browser monitoring",
        "auto_instrument",
        "disabled_auto_pages",
        "External tracer",
        "exclude_request_uri",
        "Cross application tracer",
        "Error collector",
        "ignore_classes",
        "ignore_messages",
        "ignore_status_codes",
        "ignoreErrorPriority",
        "expected_classes",
        "expected_messages",
        "expected_status_codes",
        "ignore_errors (DEPRECATED)",
        "Strip exceptions",
        "whitelist (DEPRECATED)",
        "allowed_classes",
        "Thread profiler",
        "Transaction events",
        "max_samples_stored",
        "custom_request_headers",
        "Custom events",
        "Hostname configuration",
        "display_name",
        "ipv_preference",
        "Custom instrumentation",
        "trace_annotation_class_name",
        "com.newrelic.instrumentation.servlet-user",
        "System properties",
        "newrelic.config.process_host.display_name",
        "newrelic.config.file",
        "newrelic.debug",
        "newrelic.environment",
        "newrelic.home",
        "newrelic.logfile",
        "Environment variables",
        "NEW_RELIC_APP_NAME (REQUIRED)",
        "NEW_RELIC_DISTRIBUTED_TRACING_ENABLED",
        "NEW_RELIC_PROCESS_HOST_DISPLAY_NAME",
        "NEW_RELIC_LICENSE_KEY (REQUIRED)",
        "NEW_RELIC_LOG",
        "Cloud platform utilization",
        "detect_aws",
        "detect_docker",
        "Async instrumentation",
        "token_timeout",
        "segment_timeout",
        "Circuit breaker",
        "memory_threshold",
        "gc_cpu_threshold",
        "Message tracer",
        "segment_parameters.enabled",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Infinite Tracing",
        "trace_observer.host",
        "Span events",
        "Jar collector",
        "skip_temp_jars",
        "jars_per_second"
      ],
      "title": "Java agent configuration: Config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "1d61f848fa192438225eae269421b8d384915c8b",
      "image": "https://docs.newrelic.com/static/60ca967eab99ca225186310913ae2de6/8c557/java-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file/",
      "published_at": "2021-06-09T07:43:58Z",
      "updated_at": "2021-06-09T07:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent reads its configuration from the newrelic.yml file. By default the agent looks for this file in the directory that contains newrelic.jar. You can override the config file's location by setting the newrelic.config.file system property to a fully qualified file name. Configuration file structure The newrelic.yml file is split into stanzas corresponding to different environments: Test Development Staging Production (default) New Relic applies settings in the common stanza to each of these environments. You can select other environments as the default by setting the newrelic.environment system property to the environment name. Tip A newrelic.yml template is available. If you edit newrelic.yml, be careful to conform to the YAML format. Use a YAML validator to ensure the syntax is accurate before using the file with New Relic's Java agent, and follow these rules: Java agent newrelic.yml Requirements Format YML files are case sensitive. Indentations All indentations must be in increments of two characters. Other indentations will result in an Unable to parse configuration file error upon agent startup. Use the same level of indentation for data in the same stanza of the file. Indent any sub-stanzas by an additional two spaces. Changes to file You must restart your JVM host process for changes to take effect. Exception: Property changes to log_level and audit_mode do not require a restart. Property changes under circuit breaker don't require a restart. Configuration settings precedence To override any setting in the config file, use a system property override. In certain environments, environment variables can also be used to override both the config file and the system properties. The environment variables primarily exist to support Heroku. When used, server-side configuration overrides all other configuration settings. With the Java agent, server-side configuration overrides all other settings. Environment variables override Java system properties. Java properties override user configuration settings in your newrelic.yml file. User settings override the newrelic.yml default settings. Configuring the Java extensions directory The Java agent reads the configuration files on process startup. To identify the directory where the files are located, either create a new or specify an existing extensions directory: Create an extensions directory To create the extensions directory: Navigate to the directory where newrelic.jar and newrelic.yml are located. Create a directory named extensions. In newrelic.yml, check that the property extensions.dir is not set. Specify an existing extensions directory To use an existing Java extensions directory: In your newrelic.yml file, locate the common section. Use the property extensions.dir to specify the location of the file. General configuration settings Set these options in the common stanza. To override any of these options, use a newrelic.config prefixed system property. license_key (REQUIRED) Type String Default (none) This setting is required. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. app_name (REQUIRED) Type String Default (none) This setting is required. Defines the application name used to report data to New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon. For example, to report data to My Application and My Application 2 use this: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. agent_enabled Type Boolean Default true Flag to enable the agent. Use this setting to force the agent to run or not run. apdex_t (DEPRECATED) Type Float Default 1.0 The apdex_t threshold in seconds for the application's Apdex score. For Java agent versions 1.2.008 or higher, the apdex_t value is set in the UI and the value in newrelic.yml is ignored. appserver_port Type Integer Default (none) Number to differentiate JVMs for the same app on the same machine. New Relic uses host/port for uniqueness, so you can distinguish the JVMs by putting a switch like this into the startup arguments for each JVM: -Dnewrelic.config.appserver_port=8081 Copy Once you have used appserver_port to name the JVMs and restart them, you should be able to see them individually in the dropdown and in the profiling interface. Important This is only a change for New Relic; it doesn't actually affect the port on which the host communicates in any way. audit_mode Type Boolean Default false Enables plain text logging of all data sent to New Relic to the agent logfile. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. ca_bundle_path Type String Value Format /path/to/ca/cert/bundle.pem Specifies a path to a custom SSL certificate bundle that will be used by the agent to establish a secure connection to New Relic. If your custom SSL certificate bundle doesn't include certificates that are sufficient to connect to New Relic then you'll need to merge the required certs into your custom certificate bundle. use_private_ssl Type Boolean Default false The following SSL certificates are bundled into the agent jar: META-INF/certs/eu-newrelic-com.pem META-INF/certs/eu01-nr-data-net.pem META-INF/certs/newrelic-com.pem Copy By default (use_private_ssl: false) the agent will use the SSL certificates bundled into the JDK to establish a secure connection to New Relic or the custom SSL certificates bundle specified by ca_bundle_path. If you want to use the SSL certificates bundled with the agent, set use_private_ssl: true. Note: use_private_ssl will be ignored if ca_bundle_path is set. enable_auto_app_naming Type Boolean Default false Enables the reporting of data separately for each web app. Set to true to enable support for auto app naming. The name of each web app is detected automatically and the agent reports data separately for each one. This provides a finer-grained performance breakdown for web apps in New Relic. For more information, see Automatic application naming. For more methods of naming your application, see Name your Java application. enable_auto_transaction_naming Type Boolean Default true Enables component-based transaction naming. Set to true to enable component-based transaction naming. Set to false to use the URI of a web request as the name of the transaction. For more information, see Naming web transactions. Caution Unless you implement API calls to name your transactions, disabling auto-transaction naming is very likely to cause Metric grouping issues. enable_custom_tracing Type Boolean Default true Enables all instrumentation using an @Trace annotation. Disabling this causes @Trace annotations to be ignored. extensions.dir Type String Default (none) Defines the location of the optional extensions directory. If this property is not set, the agent will look for a subdirectory named extensions in the same directory as newrelic.jar and newrelic.yml. high_security Type Boolean Default false In order for high security to be enabled, this property must be set to true and the high security property in the New Relic user interface must be enabled. Enabling high security means SSL is turned on, request and message queue parameters are not collected, and queries cannot be sent to New Relic in their raw form. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. insert_api_key Type String Default (none) A valid Insert API Key for your account. This is only required for Real-time Java profiling using JFR metrics. labels Type String Default \"\" Attach tags to this app. Note that this option now enables tags, which replaced the label feature. You can still query your historical labels. max_stack_trace_lines Type Integer Default 30 Limits the number of lines the agent collects from each stack trace. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. proxy_host Type String Default (none) The proxy host through which to connect to the New Relic collector. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_password Type String Default (none) The password for proxy authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. Important The Java agent supports Basic (clear text) authentication. proxy_port Type String Default 8080 The proxy host port number. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_user Type String Default (none) The username for proxy authentication, such as Basic (clear text) authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. proxy_scheme Type String Default (none) The proxy scheme used. Setting proxy_scheme: \"https\" will allow the agent to connect through proxies using the HTTPS scheme. reactor-netty.errors.enabled Type Boolean Default true Whether errors are reported for reactor netty. If set to false, errors will be ignored. Important Only available in Java agent 6.3.0 and above. send_data_on_exit Type Boolean Default false Enable delayed JVM shutdown to give the agent a chance to send latest metric data to New Relic before JVM shutdown. send_data_on_exit_threshold Type Integer Default 60 The number of seconds after which the agent will use the send_data_on_exit setting. send_environment_info Type Boolean Default true Enable reporting of JVM settings to New Relic. send_jvm_props Type Boolean Default true When set to true, JVM properties will be sent to New Relic. ssl (DEPRECATED) Type Boolean Default true Requires connections to the New Relic collector to go over SSL. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. This work is done asynchronously to the threads that process your application code, so response times will not be directly affected by this change. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. sync_startup Type Boolean Default false Enable the agent to connect the New Relic collector immediately upon app startup. scala_futures_as_segments Important This applies to Java agent version 3.44.0 or higher. Type Boolean Default false For more concise transaction trace details, the agent does not report Scala Futures as transaction segments, and those Futures do not contribute to the transaction’s total time. Enabling scala_futures_as_segments increases your overhead. If you want Scala Futures to report as transaction segments so you can view them in a transaction trace, you can enable it: scala_futures_as_segments: enabled: true Copy Logging configuration These are part of the general configuration variables. They are broken out here because they are frequently tweaked for debugging. Some of the logging configuration variables are dynamic and do not need a host restart for them to take effect. For instance, if log files are growing too quickly, log_level can be set to a less verbose setting to reduce the reporting rate. Here is the order of precedence for configuration variables affecting log rotation. If log_daily is true, other log rotation settings are ignored. If log_file_count is 1 or 0, the size limit is ignored. Finally, the agent applies log_limit_in_kbytes. Depending on the growth rate, it is possible for the log file size to exceed the configured value by a small amount. log_daily Type Boolean Default false Set to true to roll the logs daily. Overrides the other configuration variables that affect log rotation. log_file_count Type Integer Default 1 The maximum number of log files to keep when using log rotation. log_file_name Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. log_file_path Type String Default logs subdirectory where newrelic.jar is located The log file path. Tip If log_file_path is specified, the directory must already exist. If the default value is used, the agent will attempt to create the directory. log_level Type String Default info The log verbosity level. The agent uses its own log file to keep its logging separate from that of your application. Valid options, in order of verboseness, are: off severe warning info fine finer finest This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. log_limit_in_kbytes Type Integer Default 0 The log file size in kilobytes at which log files are rotated. Set to 0 for no limit. JMX To set these options, use the jmx stanza. To override them, use a newrelic.config.jmx prefixed system property. The Java agent uses JMX to collect JVM data as well as to communicate with the JFR (Java Flight Recorder) daemon for Real-time Java profiling. enabled Type Boolean Default true This setting can be used to turn on or off all JMX functionality. linkingMetadataMBean Type Boolean Default false This setting can be enabled to allow the Java agent to expose linking metadata to the JFR daemon. Doing so allows the JFR daemon to obtain the entity GUID generated by the Java agent and link JFR data with the same APM application that is being monitored by the agent instead of as a separate entity. Important This applies to Java agent version 6.1.0 or higher. Attributes To set these options, use the attributes stanza. To override them, use a newrelic.config.attributes prefixed system property. Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. There is also an attribute stanza under each destination. For more information, see Java agent attributes, Enabling and disabling attributes and Attribute examples. enabled Type Boolean Default true This setting can be used to turn on or off all attributes. Important For security reasons, capturing custom attributes using the Custom Instrumentation Editor is set to false by default. include Type List of Strings Default (none) If attributes are enabled, attribute keys found in this list will be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. Transaction tracer These options are set in the transaction_tracer stanza and can be overridden by using a newrelic.config.transaction_tracer prefixed system property. Transaction tracing captures deep information about slow transactions and sends this to the New Relic service. The transaction includes the exact call sequence of the transactions, including any query statements issued. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true The transaction tracer is enabled by default. Set this to false to turn it off. explain_enabled Type Boolean Default true Determines whether the agent will capture the EXPLAIN plan for slow queries. Only supported for MySQL and PostgreSQL. explain_threshold Type Float Default 0.5 Threshold in seconds for query execution time below which the slow query and the EXPLAIN plan (if supported) will not be captured. Relevant to slow queries only when record_sql is set to raw or obfuscated. Relevant to EXPLAIN plans only when explain_enabled is set to true. insert_sql_max_length Type Integer Default 2000 The character limit for the SQL query string. If you have many slow SQL queries with large chunks of information, this could negatively affect performance or how quickly you see your data in New Relic. Increase the value gradually until you find the right balance of information and performance. log_sql Type Boolean Default false Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode. record_sql Type String Default obfuscated When the transaction tracer is on, query statements can optionally be recorded. The recorder has three modes: off: Send no queries. raw: Send the query statement in its original form. obfuscated: Strips out numeric and string literals. stack_based_naming (Play 2.x+ only) Type Boolean Default False Defaulted to true until Java agent version 3.12.1, when it was changed to false. This option is for Play 2.x+ only. Play/Scala instrumentation can use Thread.getStackTrace() to improve tracer naming, but at the cost of increased overhead. stack_trace_threshold Type Integer Default 0.5 Defines a threshold (in seconds) for collecting stack traces from an SQL call. When SQL statements exceed this threshold, the agent will capture the current stack trace. This is useful for pinpointing where long SQL calls originate from. top_n Type Integer Default 20 Use this setting to control the variety of your transaction traces. top_n is an integer that represents the number of unique, slow transactions that traces will be created for. If you want transaction traces to more accurately reflect the actual slowest transactions in your app, make this value lower. If you want to sample a more diverse array of transactions, make the value higher. A value of 0 would mean that only the slowest transaction is always traced. This is considered not to be optimal, though, because you may have one or two transactions that are always the slowest, and repeatedly seeing those same transaction traces will probably not give you much value. If the same transaction is often the slowest, the top_n setting allows the Java agent (over time) to sample the slowest n transactions. This gives you greater variety and more insight into your application. transaction_threshold Type String (float) Default apdex_f The time threshold used to determine when a transaction is eligible to be traced. When the transaction's response time exceeds this threshold, a transaction trace will be recorded and sent to New Relic. The default is apdex_f (default), which sets the threshold to be the \"Frustrated\" Apdex level (four times the apdex_t value). You can also set a specific time threshold by entering a float value that represents a number of seconds. slow_query_whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use collect_slow_queries_from. By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy collect_slow_queries_from Type String Default (none) By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this property (transaction_tracer.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to New Relic in transaction traces. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction traces. For more information, see the agent attribute rules. token_limit Type Integer Default 3000 Limits the number of Tokens that can be created per Transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. segment_limit Type Integer Default 3000 Limits the number of segments that can be created per transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. Transaction segments These options are set in the transaction_segments stanza and can be overridden by using a newrelic.config.transaction_segments prefixed system property. Transaction segments represent discrete pieces of work (generally method calls) and are displayed within transaction traces. Important Transaction segment attribute filtering requires Java agent version 4.10.0 or higher. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction segments. If attributes.enabled at the root level is false, no attributes will be sent to transaction segments regardless on how this property (transaction_segments.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction segments, all attribute keys found in this list will be sent to New Relic in transaction segments. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction segments. For more information, see the agent attribute rules. Browser monitoring These options are set in the browser_monitoring stanza and can be overridden by using a newrelic.config.browser_monitoring prefixed system property. Browser monitoring gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. auto_instrument Type Boolean Default true By default the agent automatically inserts API calls in compiled JSPs to inject the monitoring JavaScript into web pages. Set this attribute to false to turn off this behavior. disabled_auto_pages Type Comma-separated list of strings Default (none) When auto_instrument is true, by default all pages are instrumented. List all pages that you want the auto instrumentation to skip here. You can still use manual instrumentation on these pages. For example: browser_monitoring: disabled_auto_pages: /WEB-INF/jsp/testpage_1.jsp, /WEB-INF/jsp/testpage_2.jsp Copy attributes.enabled Type Boolean Default false This setting can be used to turn on or off all attributes for browser monitoring. This is the data you can query. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how this property under browser_monitoring is set. attributes.include Type List of Strings Default (none) If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent to New Relic in page views. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in page views. For more information, see the agent attribute rules. External tracer The external tracing options are set in the external_tracer stanza and can be overridden by using a newrelic.config.external_tracer prefixed system property. exclude_request_uri Type Boolean Default false This setting can be used to control the collection of outgoing request URIs for errors and transaction traces. Set this to true to disable collecting this information. Cross application tracer The cross application tracing options are set in the cross_application_tracer stanza and can be overridden by using a newrelic.config.cross_application_tracer prefixed system property. Cross application tracing adds request and response headers to external calls using the Apache HttpClient libraries. This provides better performance data when calling applications monitored by other New Relic Agents. enabled Type Boolean Default true Cross application tracing is enabled by default. Set this to false to turn it off. Error collector These options are set in the error_collector stanza and unless noted otherwise can be overridden by using a newrelic.config.error_collector prefixed system property. The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. Tip For how to configure errors for the Java agent, including how to configure errors via the UI, see Java agent error configuration. enabled Type Boolean Default true Enable error collection. ignore_classes Type Stanza containing a list of fully qualified class_name strings Default (none) Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy ignore_messages Type Stanza containing a fully qualified class_name and a list of messages per error class Default (none) Specify exception class names the agent should ignore. Ignored messages will not affect error rate or Apdex score, or be reported to APM. Contains yaml pairs consisting of: A fully qualified exception class name that should not be reported to APM AND A list of exception messages to match against (at least one is required) If the exception class name matches an error but the message does not, then that error will not be ignored. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_messages: com.example.MyException: - \"Some error message to ignore\" - \"Some other error message to ignore\" com.example.DifferentException: - \"Some different error message to ignore\" Copy ignore_status_codes Type Comma-separated list of strings and ranges Default 404 A comma-separated list comprised of individual and dashed ranges of HTTP status codes that should not be treated as errors. If this property is commented out in the newrelic.yml configuration file, then the 404 status code will automatically be ignored. When using server-side configuration, the status code 404 must be specified in order for it to be ignored. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_status_codes: 404,507-511 Copy ignoreErrorPriority Type Boolean Default false With default ignoreErrorPriority as false, the agent reports the last error noticed if noticeError() is called multiple times in a transaction. If set to true, the agent reports the first error noticed if noticeError() is called multiple times in a transaction. For example: error_collector: ignoreErrorPriority: true Copy expected_classes Type Stanza containing a List of fully qualified class_name strings Default (none) Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy expected_messages Type Stanza containing a fully qualified class_name and a List of messages per error class Default (none) Contains yaml pairs consisting of a fully qualified exception class name that should be marked as expected and thus prevented from affecting error rate or Apdex score and a List of exception messages to match against, the latter of which at least one is required. If the exception class name matches an error but the message does not, then that error will not be marked as expected and therefore will affect error rate and Apdex score. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_messages: com.example.MyException: - \"Some expected error message\" - \"Some other expected error message\" com.example.DifferentException: - \"Some different expected error message\"​ Copy expected_status_codes Type Comma-separated list of strings and ranges Default (none) A comma-separated list comprised of individual and dashed ranges of HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_status_codes: 415,500-506 Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless of how this property is set under error_collector. attributes.include Type List of strings Default (none) If attributes are enabled for traced errors, all attribute keys found in this list will be sent to New Relic in traced errors. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) Attribute keys found in this list will not be sent to New Relic in traced errors. For more information, see the agent attribute rules. ignoreErrorPriority Type Boolean Default true When multiple errors are noticed in a transaction, only the last error will be reported by default. Setting this property to false will instead report only the first error that is noticed. For more information, see the noticeError API. For example: error_collector: ignoreErrorPriority: false Copy ignore_errors (DEPRECATED) Type Comma-separated list of Strings Default (none) All specified exception class names specified will not be treated as errors. Deprecated as of Java agent 3.40.0 and replaced by ignore_classes. For example: error_collector: ignore_errors: some.other.MyException Copy Strip exceptions These options are set in the strip_exception_messages stanza and unless noted otherwise can be overridden by using a newrelic.config.strip_exception_messages​prefixed system property. This configuration can be enabled to control whether Java exception messages are reported to New Relic. enabled Type Boolean Default false By default, this is set to false, which means that the agent sends messages from all exceptions to the New Relic collector. If you set this to true, the agent strips the messages from exceptions in order to prevent it from inadvertently capturing sensitive information. If you enable high security mode, this is automatically set to true. If you set enabled to true but you want the agent to capture messages from specific exceptions, add the exceptions to your allow list. whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use allowed_classes. If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to the whitelist, separated by a comma. allowed_classes Type String Default (none) If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to allowed_classes, separated by a comma. Thread profiler These options are set in the thread_profiler stanza and can be overridden by using a newrelic.config.thread_profiler prefixed system property. Thread profiler measures wall clock time, CPU time, and method call counts in your application's threads as they run. enabled Type Boolean Default true Enable the thread profiler. Transaction events These options are set in the transaction_events stanza and can be overridden by using a newrelic.config.transaction_events prefixed system property. Transaction events provide the data for displaying histograms and percentiles in the UI. Important Previously this stanza was called analytics_events. If your configuration file still uses analytics_events, update your agent to use transaction_events. enabled Type Boolean Default true Enable the transaction events service. max_samples_stored Type Integer Default 2000 Max 10000 The maximum number of sampled transaction events reported every 60 seconds. custom_request_headers Type List of maps Default None Important Unlike other settings, custom_request_headers have to be paired together and must be set in the newrelic.yml file. They can't be overwritten by Java virtual machine arguments (system property) or environment variables. A list of maps with the paired keys header_name and the optional header_alias. Choose one or more custom HTTP request headers to add as transaction attributes. You can list multiple header configurations: transaction_events: custom_request_headers: - header_name: \"X-Custom-Header-1\" - header_name: \"X-Custom-Header-2\" header_alias: \"CustomHeader2alias\" Copy In the first map set, X-Custom-Header-1 is captured and reported by the agent as the header name for a corresponding value from the request object. The header_name will also be the name of the attribute sent to New Relic. In the second map set, the request header is X-Custom-Header-2, but the CustomHeader2alias is the name sent to New Relic. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless of how this property is set under transaction_events. attributes.include Type List of Strings Default (none) If attributes are enabled for transaction events, all attribute keys found in this list will be sent to New Relic in transaction events. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction events. For more information, see the agent attribute rules. Custom events Custom events are set in the custom_insights_events stanza and can be overridden by using a newrelic.config.custom_insights_events prefixed system property. APM lets you record custom event data via the New Relic language agent APIs, which you can then query. Important For Java agent versions prior to 4.1.0, the following YAML configuration is recognized: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy For agent versions 4.1.0 and above, the YAML configuration uses the nested stanza formatting: custom_insights_events: enabled: false max_samples_stored: 5000 Copy enabled Type Boolean Default true This enables the custom event service. max_samples_stored Type Integer Default/Max 10000 The maximum number of sampled custom events reported every 60 seconds. Hostname configuration These options are set in the process_host stanza and can be overridden by using a newrelic.config.process_host prefixed system property. These properties are used for configuring the hostname displayed in the UI: display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. ipv_preference Type String Default 4 If the hostname cannot be determined, then the IP address of the host will be used. This property determines whether the IPv4 or IPv6 address should be used. The default is IPv4. Custom instrumentation These options set in the class_transformer stanza and can be overridden by using a newrelic.config.class_transformer prefixed system property. trace_annotation_class_name Type String Default (none) String containing the full class name of the annotation class the agent uses to determine which user-specified methods to instrument. For more information about custom annotations, see Java custom metric collection. com.newrelic.instrumentation.servlet-user Type Boolean Default false Enable this option to capture the userPrincipal name. This name is included as a transaction trace attribute, and can be queried. System properties You can override any setting in the newrelic.yml file by setting a system property. The system property corresponding to a given setting in the config file is the setting name prefixed by newrelic.config. For example, the system property for the log_level setting is newrelic.config.log_level. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the system property for the enabled setting in the transaction_tracer stanza is newrelic.config.transaction_tracer.enabled. In addition to overriding configuration settings, the following system properties are recognized by the agent: newrelic.config.process_host.display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. Requires Java agent 3.17 or higher. newrelic.config.file Type String Default (none) String containing a fully qualified path to the newrelic configuration file. If empty, the agent assumes newrelic.yml is in the same directory as newrelic.jar. newrelic.debug Type Boolean Default (none) Enable debug logging. newrelic.environment Type String Default (none) String containing the environment configuration for the agent to use. newrelic.home Type String Default (none) String containing the home directory of agent. This defaults to the same directory as the agent jarfile. newrelic.logfile Type String Default newrelic_agent.log String containing the name of the agent log file. Environment variables Environment variables take the highest precedence and override the system properties and yml config settings. To set environment variables, use the export VARNAME=value command. To permanently set environment variables, add the export line to a file such as ~/.bashrc or ~/.bash_profile. You can override any setting from a system property or in the newrelic.yml by setting an environment variable. The environment variable corresponding to a given setting in the config file is the setting name prefixed by NEW_RELIC with all dots (.) and dashes (-) replaced by underscores (_). For example, the environment variable for the log_level setting is NEW_RELIC_LOG_LEVEL. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the environment variable for the enabled setting in the transaction_tracer stanza is NEW_RELIC_TRANSACTION_TRACER_ENABLED. Important Agent configuration via environment variables requires Java agent version 4.10.0 or higher. For agent versions older than 4.10.0 the following environment variables are available: NEW_RELIC_APP_NAME (REQUIRED) Type String Default (none) This setting is required. Contains the application name under which to report data to New Relic. Set the name of your application as you want it to appear in New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon ;. For example, to report data to My Application and My Application 2: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Type String Default false Enables distributed tracing. Case sensitive: use true or false. For more information, see the distributed tracing section. NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. NEW_RELIC_LICENSE_KEY (REQUIRED) Type String Default (none) This setting is required. Contains your New Relic account license. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. NEW_RELIC_LOG Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. Cloud platform utilization These options are set in the utilization stanza and can be overridden by using a newrelic.config.utilization prefixed system property. The agent collects utilization information and sends it to the New Relic service. The agent can collect information from Amazon Web Services (AWS) EC2 instances and Docker containers. detect_aws Type Boolean Default true Determines whether the agent polls AWS metadata API. detect_docker Type Boolean Default true Determines whether the agent reads Docker information from the file system. Async instrumentation These options are set directly in the common stanza and can be overridden by using a prefixed system property. token_timeout Type Integer Default (seconds) 180 The number of seconds after which the agent will automatically expire an async token that has not been explicitly expired with token.expire(). For usage instructions, see Tokens: Connect async threads. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to unexpired tokens. segment_timeout Type Integer Default (seconds) 600 The number of seconds after which the agent will automatically end a segment that has not been explicitly ended with segment.end() or segment.ignore(). For usage instructions, see Segments: Time arbitrary async activity. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to un-ended segments. Circuit breaker These settings customize the behavior of the Java circuit breaker. These settings are not included in newrelic.yml by default. You do not need to restart your JVM after changing them. If you want to customize the circuit breaker, add the stanza under the common stanza: common: &default_settings​ ​ OTHER_CONFIG_SETTINGS circuitbreaker: enabled: true memory_threshold: 20 gc_cpu_threshold: 10 Copy enabled Type Boolean Default true If your application is behaving as expected, you may want to disable the circuit breaker. memory_threshold Type Integer (0 to 100) Default 20 Customize the precentage of free heap memory below which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. gc_cpu_threshold Type Integer (0 to 100) Default 10 Customize the precentage of garbage collection CPU time above which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. Message tracer These options are set in the message_tracer stanza and can be overridden by using a newrelic.config.message_tracer prefixed system property. segment_parameters.enabled Type Boolean Default true Adds message properties to tracer attributes. Set this to false to turn it off. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has other effects on APM features. Before enabling, read the transition guide. Requires Java agent version 4.3.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. In the config file, it can be set in the distributed_tracing stanza. It can be overridden using a newrelic.config.distributed_tracing prefixed system property. enabled Type Boolean Default false Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: enabled: true Copy To enable this using a system property, you would use: -Dnewrelic.config.distributed_tracing.enabled=true Copy exclude_newrelic_header Type Boolean Default false By default, supported versions of the agent utilize both the newrelic header and W3C Trace Context headers for distributed tracing. The newrelic distributed tracing header allows interoperability with older agents that don't support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over newrelic headers for distributed tracing. If you do not want to utilize the newrelic header, setting this to true will result in the agent excluding the newrelic header and only using W3C Trace Context headers for distributed tracing. For example, to exclude newrelic headers in the config file, you would use: distributed_tracing: exclude_newrelic_header: true Copy To exclude newrelic headers using a system property, you would use: -Dnewrelic.config.distributed_tracing.exclude_newrelic_header=true Copy Infinite Tracing Important Requirements: Java Agent 5.12.1 or higher. Infinite Tracing does not work if enable_auto_app_naming is enabled. To turn on Infinite Tracing, enable distributed tracing and add the additional setting below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default None For help getting a valid Infinite Tracing trace observer host entry, see find or create a Trace Observer. You can configure this via YAML: infinite_tracing: trace_observer: host: YOUR_TRACE_OBSERVER_HOST Copy You can also use the system property newrelic.config.infinite_tracing.trace_observer.host or the environment variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST. Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza and can be overridden by using a newrelic.config.span_events prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable span event reporting. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this property (span_events.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for span events, all attribute keys found in this list will be sent to New Relic in span_events. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) All attribute keys found in this list will not be sent to New Relic in span events. For more information, see the agent attribute rules. Important Span event attribute filtering requires Java agent version 4.10.0 or higher. Jar collector The Java agent collects and information about jars and their versions on the application classpath. Jar collection configuration is set in the jar_collector stanza and can be overridden by using a newrelic.config.jar_collector prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable jar collection and reporting. skip_temp_jars Type Boolean Default true Used to enable/disable collection of temporary jars. Temporary jars are those residing in the directory specified by the system property java.io.tmpdir. jars_per_second Type Integer Default 10 The maximum number of jars to process per second. Must be positive.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.75791,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> configuration: Config file",
        "sections": "<em>Java</em> <em>agent</em> configuration: Config file",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ": -Dnewrelic.config.distributed_tracing.exclude_newrelic_header=true Copy Infinite Tracing Important Requirements: <em>Java</em> <em>Agent</em> 5.12.1 or higher. Infinite Tracing does not work if enable_auto_app_naming is enabled. To turn on Infinite Tracing, enable distributed tracing and add the <em>additional</em> setting below. For an example, see Language <em>Agents</em>"
      },
      "id": "603eb739e7b9d2a2432a07e0"
    },
    {
      "sections": [
        "WildFly installation for Java",
        "Install WildFly versions earlier than 11",
        "Install WildFly version 11 or higher"
      ],
      "title": "WildFly installation for Java",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "7f9259f3b77efb78cd4861a9d7b519fe44191e3c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/wildfly-installation-java/",
      "published_at": "2021-06-08T15:06:07Z",
      "updated_at": "2021-03-16T14:29:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Java agent, make sure your WildFly version is supported. Depending on which WildFly version your application uses, additional configuration steps may be required. Install WildFly versions earlier than 11 If your supported WildFly version is earlier than v11, follow standard Java installation procedures. You do not need to do any additional configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic's Java agent requires additional configuration after you install it. Install the Java agent. If you already have it installed, update to the latest Java agent version. Versions 5.0.0 and higher include fixes for later WildFly versions 11 and higher. Open the standalone configuration file appropriate for your operating system and add the -javaagent property to JAVA_OPTS. For example, if you use Linux, edit the /bin/standalone.conf file or /bin/standalone.conf.bat for Windows. Make sure the agent jar is visible to all JBoss modules by adding com.newrelic to the JBoss modules system packages using either of these options in the standalone script: Recommended: Option 1 (same as adding -javaagent property): JAVA_OPTS=\"$JAVA_OPTS -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS,com.newrelic Copy Option 2: if [ \"x$JBOSS_MODULES_SYSTEM_PKGS\" = \"x\" ]; then JBOSS_MODULES_SYSTEM_PKGS=\"org.jboss.byteman,com.newrelic\" fi Copy Restart your application server.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.18749,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "WildFly <em>installation</em> for <em>Java</em>",
        "sections": "WildFly <em>installation</em> for <em>Java</em>",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " standard <em>Java</em> <em>installation</em> procedures. You do not need to do any <em>additional</em> configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic&#x27;s <em>Java</em> <em>agent</em> requires <em>additional</em> configuration after you install it. Install the <em>Java</em> <em>agent</em>. If you already have"
      },
      "id": "603e791764441f18724e88ab"
    },
    {
      "sections": [
        "Install New Relic Java agent for Docker",
        "Tip",
        "Get the Java agent",
        "Download using curl",
        "Download using Invoke-WebRequest (PowerShell)",
        "Download from the New Relic UI",
        "Set up the installation directory",
        "Modify startup scripts",
        "Set agent configurations",
        "Application name",
        "License key",
        "Logs",
        "Environment (optional)",
        "Important",
        "Enabled (optional)",
        "Additional Tomcat Dockerfile examples",
        "Tomcat with environment and Java system properties",
        "How to start an application with the Java agent",
        "Next steps"
      ],
      "title": "Install New Relic Java agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "4de0ccd173c9851b045cfa036089e2f703b4a0f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-docker/",
      "published_at": "2021-06-08T20:22:14Z",
      "updated_at": "2021-03-16T14:29:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains a basic installation of the APM agent for Java applications in a Docker container. We discuss required configurations and also explore some optional configurations, including: How to use identical New Relic configuration files for each container, regardless of the environment where the containers are used How to use the Docker layer when every agent in every environment needs slightly different configuration data How to disable the New Relic agent in some environments and enable it in others Although we don't discuss advanced options here, you can install the Java agent in Docker volumes and use your Docker container image in other software such as Swarm, ECS, AKS, EKS, OpenShift, and Kubernetes. Our Docker examples refer to Tomcat, so if you are using another application server, refer to your vendor’s documentation. Tip To use Java or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Get the Java agent Download newrelic-java.zip using curl, Invoke-WebRequest (PowerShell), or the New Relic UI: Download using curl Complete the following: Start a command-line session. Change to a temporary directory where you can download the zip file. Execute this curl command: curl -O https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip Copy Unzip newrelic-java.zip Download using Invoke-WebRequest (PowerShell) Complete the following: Start a PowerShell session. Change to a temporary directory where you can download the zip file. Execute this PowerShell command: Invoke-WebRequest -Uri https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip -OutFile newrelic-java.zip Copy Unzip newrelic-java.zip: Expand-Archive -Path newrelic-java.zip -DestinationPath DESTINATION_PATH Copy Download from the New Relic UI Complete the following: Log in to New Relic. From the account dropdown in the New Relic UI, select Account settings. In the right sidebar under Most recent, select the Java agent, and save the newrelic-java.zip to a temporary directory. Unzip newrelic-java.zip. Set up the installation directory You can unzip the newrelic-java.zip file wherever it is convenient for you. In the subsequent sections we assume you extracted it in the current working directory, which puts the files we need in ./newrelic. Modify startup scripts The startup script that contains the command to start your application server must include Java’s built-in argument -javaagent. We recommend that you set this argument with the JAVA_OPTS environment variable. The value of that argument must contain the location where you ADD the Java APM agent’s jar file to the image. For example, with Tomcat, use commands like these in the Dockerfile: RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/newrelic.jar ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" Copy Set agent configurations By default, agent behavior is controlled by configuration entries in newrelic.yml, which is typically located in the same directory as the agent. This section explains how to override these newrelic.yml configurations by using environment variables or Java system properties in the Dockerfile. Before we look at some specific configurations, here’s how to load newrelic.yml using the Dockerfile: ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/newrelic.yml Copy For a basic Docker installation, complete these configurations: Application name License key Logs Environment (optional) Enabled (optional) Application name The application name is a configuration you set to identify your application in New Relic. Tip You can reuse an application name for multiple apps serving the same role so that all the data from those apps rolls up into the same logical application in New Relic. For more detail about additional grouping options, see Use multiple names for an app. Replace MY_APP_NAME with your application name in one of these Dockerfile commands: Option Command Environment variable ENV NEW_RELIC_APP_NAME=\"MY_APP_NAME\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='MY_APP_NAME'\" Copy After you boot the container, your application name appears in New Relic. License key This configuration is required for you to report on any data in your New Relic Account. To copy your license key: Go to one.newrelic.com > (account dropdown) > Account settings. Under Account information, copy the license key. In one of these Dockerfile commands, replace MY_LICENSE_KEY with your license key: Option Command Environment variable ENV NEW_RELIC_LICENSE_KEY=\"MY_LICENSE_KEY\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.license_key='MY_LICENSE_KEY'\" Copy Logs By default, logs are written into the logs directory relative to the location of newrelic.jar. Make sure that the user account that starts your application server also has the right to perform tasks such as: Creating the logs directory. Creating and appending to the log files in that directory. Here’s a Dockerfile example where tomcat is the user who starts Tomcat: RUN mkdir -p /usr/local/tomcat/newrelic/logs RUN chown -R tomcat:tomcat /usr/local/tomcat/newrelic/logs Copy You can also send the logs to STDOUT by adding one of the following to the Dockerfile: Option Command Environment Variable ENV NEW_RELIC_LOG_FILE_NAME=STDOUT Copy Java system property ENV JAVA_OPTS=-Dnewrelic.config.log_file_name=STDOUT Copy Environment (optional) You can pass either a Java property or an environment variable to determine which of the environment-specific stanzas the agent uses in newrelic.yml. Use this approach if you prefer to have the newrelic.yml file control environment-specific configurations instead of passing all the configurations via Docker. Here’s a Dockerfile example of passing the newrelic.environment Java system property via Docker to use the custom value dev in the environment stanza of newrelic.yml: Using the shell form of the CMD instruction, include a reference to a new environment variable you choose (for example, ENV): CMD java -Dnewrelic.environment=$ENV -jar myjar.jar Copy In your docker run command line, include an argument to set the environment variable in the container: docker run -it -e \"ENV=dev\" myDockerImage Copy Important If you don’t specify a value for newrelic.environment, the agent assumes it is running in your production environment and uses the values from the main body of the configuration file. Enabled (optional) This configuration controls whether the agent is enabled. Let’s say you want the same Docker image for every installation. However, you don’t want to run the New Relic agent every time an engineer spins up a test app because you don’t want to run up your instance count. This problem can be solved using the newrelic.environment Java system property. In the main body of newrelic.yml, disable the Java agent by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific agents by specifying the environment at runtime. Additional Tomcat Dockerfile examples Tomcat with environment and Java system properties FROM tomcat:9 # Add the newrelic.jar and -javaagent parameters RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/ ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" # Add the configuration file ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/ # An example of setting a system property config ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='My Application'\" # An example of setting an Environment variable config ENV NEW_RELIC_LICENSE_KEY=\"license_key\" # Config to include the agent logs in Docker's stdout logging ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.log_file_name=STDOUT\" EXPOSE 8080 CMD [\"catalina.sh\", \"run\"] Copy How to start an application with the Java agent FROM openjdk:8 ADD my-application.jar /app ADD newrelic.jar /app ADD newrelic.yml /app ENV NEW_RELIC_APP_NAME=\"My Application\" ENV NEW_RELIC_LICENSE_KEY=\"license_key\" ENV NEW_RELIC_LOG_FILE_NAME=\"STDOUT\" ENTRYPOINT [\"java\",\"-javaagent:/app/newrelic.jar\",\"-jar\",\"/app/my-application.jar\"] Copy Next steps Now that you have a basic agent installation in Docker, here are some additional steps to consider: Review other configurations for the agent. Read a detailed Explorers Hub post about Docker and New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.18749,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": "This document explains a basic <em>installation</em> of the APM <em>agent</em> for <em>Java</em> applications in a Docker container. We discuss required configurations and also explore some optional configurations, including: How to use identical New Relic configuration files for each container, regardless of the environment"
      },
      "id": "603ea3dc28ccbc8889eba765"
    }
  ]
}