{
  "/docs/new-relic-partnerships/partner-integration-guide/getting-started/co-branding-new-relic-partners": [
    {
      "sections": [
        "Partnership admin console",
        "Console components",
        "Partnership configuration settings",
        "Customer activity monitoring",
        "State-of-the-Partnership report",
        "Partner customer monitoring",
        "View an arbitrary customer",
        "Viewing detailed customer data"
      ],
      "title": "Partnership admin console",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "670e4d2e1db957100b23a7b8b0af6bf50cc8c996",
      "image": "https://docs.newrelic.com/static/43369c88523ebf526ae58fa5719d4efe/0abdd/crop-partnership-owner-account-settings.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partnership-admin-console/",
      "published_at": "2021-05-22T00:20:24Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Partnership Admin Console is the interface for managing your customers' accounts and integration with New Relic. To access the console, sign into the partnership owner account, and go to: https://partner-admin-console.newrelic.com/accounts/ACCOUNT_ID/admin_console/ Copy You can also access the console from the New Relic UI: Go to one.newrelic.com > (account dropdown) > Account settings. From the left menu bar, select Partnerships. one.newrelic.com > (account dropdown) > Account settings > Partnerships: Partnership owners can access the Partnership Admin Console from their account settings in the New Relic UI. Console components The Partnership Admin Console has two main components: Partnership configuration settings Customer activity monitoring If multiple partnerships are associated with the New Relic master account, the menu also includes an option to switch partnership accounts. Partnership configuration settings In developing your integration with New Relic, you must specify a number of settings. For your convenience these settings are grouped together in the partnership console, including URLs for header/footer and various redirects, SSO configuration, andÂ keys and the ability to manipulate them. Customer activity monitoring New Relic provides you with two tools for managing your customers: State-of-the-Partnership reports and live monitoring of all deployed New Relic agents in your partnership. Both of these tools provide insight into your customers who are using New Relic. They can be used to identify up-sale opportunities or to assist your support group in proactive support. State-of-the-Partnership report The State-of-the-Partnership report provides a summary of your customers with New Relic accounts and their activities. The report is broken down by language of the agents deployed, the agent version and the language version for each account. This report is run weekly for each partner. It is available on request from your New Relic Business Development contact. This report is an excellent way to see which of your customers with New Relic accounts are in fact using the service. Partner customer monitoring The Partner customer monitoring facility provides application performance data on the New Relic enabled applications that are running on your service. This facility allows you to easily identify customers experiencing performance problems. Where the performance problems are caused by under capacity, these customers are excellent sales opportunities. Alternatively your support or services organization will find this information useful in pre-emptively identifying customer issues or as good prospects for consulting services. View an arbitrary customer To view activity of a customer that does not appear in any of the filtered views: Go to one.newrelic.com > (account dropdown) > Switch accounts > Other accounts. New Relic will list all of the reporting accounts in the partnership. You can filter or search the list. Viewing detailed customer data Under normal circumstances a partner will be able to see only the summary level data in a customer's New Relic account. Through the Partnership Admin Console, partners will be permitted to drill down to the more detailed presentation. If you want to drill down from the Partnership Admin Console, add your user (typically support@partner.com or something similar) to the account. Typically this will be done at account creation. Avoid provisioning this user as the account Owner.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.7161,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> admin console",
        "sections": "<em>Partnership</em> admin console",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "The <em>Partnership</em> Admin Console is the interface for managing your customers&#x27; accounts and <em>integration</em> with <em>New</em> <em>Relic</em>. To access the console, sign into the <em>partnership</em> owner account, and go to: https:&#x2F;&#x2F;<em>partner</em>-admin-console.newrelic.com&#x2F;accounts&#x2F;ACCOUNT_ID&#x2F;admin_console&#x2F; Copy You can also access"
      },
      "id": "603ed3e3196a6735baa83dad"
    },
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-05-22T00:20:23Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.7161,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "This document is for <em>New</em> <em>Relic</em> partners. After you complete your <em>partnership</em> <em>integration</em>, you will be introduced to your technical contacts at <em>New</em> <em>Relic</em>. Use these channels for non-urgent escalations. Tip If you are not a <em>New</em> <em>Relic</em> <em>partner</em>, see <em>New</em> <em>Relic</em>&#x27;s resources for finding help or filing"
      },
      "id": "60450ecf28ccbc45632c6095"
    },
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-05-22T08:28:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.42226,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> products, pricing, and billing",
        "sections": "Customized <em>partnership</em> pricing",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " by <em>partnership</em>--the actual pricing model used is subject to the contractual terms of the <em>partner</em>&#x27;s agreement with <em>New</em> <em>Relic</em>. Contact your Alliance &amp; Channels representative at <em>New</em> <em>Relic</em> to learn more. <em>Partnership</em> billing options <em>New</em> <em>Relic</em> supports the following billing options for <em>partnerships</em>. All"
      },
      "id": "603ece55e7b9d254192a080c"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/getting-started/partner-integration-requirements": [
    {
      "sections": [
        "Partnership admin console",
        "Console components",
        "Partnership configuration settings",
        "Customer activity monitoring",
        "State-of-the-Partnership report",
        "Partner customer monitoring",
        "View an arbitrary customer",
        "Viewing detailed customer data"
      ],
      "title": "Partnership admin console",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "670e4d2e1db957100b23a7b8b0af6bf50cc8c996",
      "image": "https://docs.newrelic.com/static/43369c88523ebf526ae58fa5719d4efe/0abdd/crop-partnership-owner-account-settings.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partnership-admin-console/",
      "published_at": "2021-05-22T00:20:24Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Partnership Admin Console is the interface for managing your customers' accounts and integration with New Relic. To access the console, sign into the partnership owner account, and go to: https://partner-admin-console.newrelic.com/accounts/ACCOUNT_ID/admin_console/ Copy You can also access the console from the New Relic UI: Go to one.newrelic.com > (account dropdown) > Account settings. From the left menu bar, select Partnerships. one.newrelic.com > (account dropdown) > Account settings > Partnerships: Partnership owners can access the Partnership Admin Console from their account settings in the New Relic UI. Console components The Partnership Admin Console has two main components: Partnership configuration settings Customer activity monitoring If multiple partnerships are associated with the New Relic master account, the menu also includes an option to switch partnership accounts. Partnership configuration settings In developing your integration with New Relic, you must specify a number of settings. For your convenience these settings are grouped together in the partnership console, including URLs for header/footer and various redirects, SSO configuration, andÂ keys and the ability to manipulate them. Customer activity monitoring New Relic provides you with two tools for managing your customers: State-of-the-Partnership reports and live monitoring of all deployed New Relic agents in your partnership. Both of these tools provide insight into your customers who are using New Relic. They can be used to identify up-sale opportunities or to assist your support group in proactive support. State-of-the-Partnership report The State-of-the-Partnership report provides a summary of your customers with New Relic accounts and their activities. The report is broken down by language of the agents deployed, the agent version and the language version for each account. This report is run weekly for each partner. It is available on request from your New Relic Business Development contact. This report is an excellent way to see which of your customers with New Relic accounts are in fact using the service. Partner customer monitoring The Partner customer monitoring facility provides application performance data on the New Relic enabled applications that are running on your service. This facility allows you to easily identify customers experiencing performance problems. Where the performance problems are caused by under capacity, these customers are excellent sales opportunities. Alternatively your support or services organization will find this information useful in pre-emptively identifying customer issues or as good prospects for consulting services. View an arbitrary customer To view activity of a customer that does not appear in any of the filtered views: Go to one.newrelic.com > (account dropdown) > Switch accounts > Other accounts. New Relic will list all of the reporting accounts in the partnership. You can filter or search the list. Viewing detailed customer data Under normal circumstances a partner will be able to see only the summary level data in a customer's New Relic account. Through the Partnership Admin Console, partners will be permitted to drill down to the more detailed presentation. If you want to drill down from the Partnership Admin Console, add your user (typically support@partner.com or something similar) to the account. Typically this will be done at account creation. Avoid provisioning this user as the account Owner.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.71602,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> admin console",
        "sections": "<em>Partnership</em> admin console",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "The <em>Partnership</em> Admin Console is the interface for managing your customers&#x27; accounts and <em>integration</em> with <em>New</em> <em>Relic</em>. To access the console, sign into the <em>partnership</em> owner account, and go to: https:&#x2F;&#x2F;<em>partner</em>-admin-console.newrelic.com&#x2F;accounts&#x2F;ACCOUNT_ID&#x2F;admin_console&#x2F; Copy You can also access"
      },
      "id": "603ed3e3196a6735baa83dad"
    },
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-05-22T00:20:23Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.71602,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "This document is for <em>New</em> <em>Relic</em> partners. After you complete your <em>partnership</em> <em>integration</em>, you will be introduced to your technical contacts at <em>New</em> <em>Relic</em>. Use these channels for non-urgent escalations. Tip If you are not a <em>New</em> <em>Relic</em> <em>partner</em>, see <em>New</em> <em>Relic</em>&#x27;s resources for finding help or filing"
      },
      "id": "60450ecf28ccbc45632c6095"
    },
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-05-22T08:28:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.42221,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> products, pricing, and billing",
        "sections": "Customized <em>partnership</em> pricing",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " by <em>partnership</em>--the actual pricing model used is subject to the contractual terms of the <em>partner</em>&#x27;s agreement with <em>New</em> <em>Relic</em>. Contact your Alliance &amp; Channels representative at <em>New</em> <em>Relic</em> to learn more. <em>Partnership</em> billing options <em>New</em> <em>Relic</em> supports the following billing options for <em>partnerships</em>. All"
      },
      "id": "603ece55e7b9d254192a080c"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/getting-started/partners-contact-new-relic": [
    {
      "sections": [
        "Partnership admin console",
        "Console components",
        "Partnership configuration settings",
        "Customer activity monitoring",
        "State-of-the-Partnership report",
        "Partner customer monitoring",
        "View an arbitrary customer",
        "Viewing detailed customer data"
      ],
      "title": "Partnership admin console",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "670e4d2e1db957100b23a7b8b0af6bf50cc8c996",
      "image": "https://docs.newrelic.com/static/43369c88523ebf526ae58fa5719d4efe/0abdd/crop-partnership-owner-account-settings.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partnership-admin-console/",
      "published_at": "2021-05-22T00:20:24Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Partnership Admin Console is the interface for managing your customers' accounts and integration with New Relic. To access the console, sign into the partnership owner account, and go to: https://partner-admin-console.newrelic.com/accounts/ACCOUNT_ID/admin_console/ Copy You can also access the console from the New Relic UI: Go to one.newrelic.com > (account dropdown) > Account settings. From the left menu bar, select Partnerships. one.newrelic.com > (account dropdown) > Account settings > Partnerships: Partnership owners can access the Partnership Admin Console from their account settings in the New Relic UI. Console components The Partnership Admin Console has two main components: Partnership configuration settings Customer activity monitoring If multiple partnerships are associated with the New Relic master account, the menu also includes an option to switch partnership accounts. Partnership configuration settings In developing your integration with New Relic, you must specify a number of settings. For your convenience these settings are grouped together in the partnership console, including URLs for header/footer and various redirects, SSO configuration, andÂ keys and the ability to manipulate them. Customer activity monitoring New Relic provides you with two tools for managing your customers: State-of-the-Partnership reports and live monitoring of all deployed New Relic agents in your partnership. Both of these tools provide insight into your customers who are using New Relic. They can be used to identify up-sale opportunities or to assist your support group in proactive support. State-of-the-Partnership report The State-of-the-Partnership report provides a summary of your customers with New Relic accounts and their activities. The report is broken down by language of the agents deployed, the agent version and the language version for each account. This report is run weekly for each partner. It is available on request from your New Relic Business Development contact. This report is an excellent way to see which of your customers with New Relic accounts are in fact using the service. Partner customer monitoring The Partner customer monitoring facility provides application performance data on the New Relic enabled applications that are running on your service. This facility allows you to easily identify customers experiencing performance problems. Where the performance problems are caused by under capacity, these customers are excellent sales opportunities. Alternatively your support or services organization will find this information useful in pre-emptively identifying customer issues or as good prospects for consulting services. View an arbitrary customer To view activity of a customer that does not appear in any of the filtered views: Go to one.newrelic.com > (account dropdown) > Switch accounts > Other accounts. New Relic will list all of the reporting accounts in the partnership. You can filter or search the list. Viewing detailed customer data Under normal circumstances a partner will be able to see only the summary level data in a customer's New Relic account. Through the Partnership Admin Console, partners will be permitted to drill down to the more detailed presentation. If you want to drill down from the Partnership Admin Console, add your user (typically support@partner.com or something similar) to the account. Typically this will be done at account creation. Avoid provisioning this user as the account Owner.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.71602,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> admin console",
        "sections": "<em>Partnership</em> admin console",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "The <em>Partnership</em> Admin Console is the interface for managing your customers&#x27; accounts and <em>integration</em> with <em>New</em> <em>Relic</em>. To access the console, sign into the <em>partnership</em> owner account, and go to: https:&#x2F;&#x2F;<em>partner</em>-admin-console.newrelic.com&#x2F;accounts&#x2F;ACCOUNT_ID&#x2F;admin_console&#x2F; Copy You can also access"
      },
      "id": "603ed3e3196a6735baa83dad"
    },
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-05-22T00:20:23Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.71602,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "This document is for <em>New</em> <em>Relic</em> partners. After you complete your <em>partnership</em> <em>integration</em>, you will be introduced to your technical contacts at <em>New</em> <em>Relic</em>. Use these channels for non-urgent escalations. Tip If you are not a <em>New</em> <em>Relic</em> <em>partner</em>, see <em>New</em> <em>Relic</em>&#x27;s resources for finding help or filing"
      },
      "id": "60450ecf28ccbc45632c6095"
    },
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-05-22T08:28:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.42221,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> products, pricing, and billing",
        "sections": "Customized <em>partnership</em> pricing",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " by <em>partnership</em>--the actual pricing model used is subject to the contractual terms of the <em>partner</em>&#x27;s agreement with <em>New</em> <em>Relic</em>. Contact your Alliance &amp; Channels representative at <em>New</em> <em>Relic</em> to learn more. <em>Partnership</em> billing options <em>New</em> <em>Relic</em> supports the following billing options for <em>partnerships</em>. All"
      },
      "id": "603ece55e7b9d254192a080c"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/getting-started/partnership-admin-console": [
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-05-22T00:20:23Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.71594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "This document is for <em>New</em> <em>Relic</em> partners. After you complete your <em>partnership</em> <em>integration</em>, you will be introduced to your technical contacts at <em>New</em> <em>Relic</em>. Use these channels for non-urgent escalations. Tip If you are not a <em>New</em> <em>Relic</em> <em>partner</em>, see <em>New</em> <em>Relic</em>&#x27;s resources for finding help or filing"
      },
      "id": "60450ecf28ccbc45632c6095"
    },
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-05-22T08:28:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.42215,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> products, pricing, and billing",
        "sections": "Customized <em>partnership</em> pricing",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " by <em>partnership</em>--the actual pricing model used is subject to the contractual terms of the <em>partner</em>&#x27;s agreement with <em>New</em> <em>Relic</em>. Contact your Alliance &amp; Channels representative at <em>New</em> <em>Relic</em> to learn more. <em>Partnership</em> billing options <em>New</em> <em>Relic</em> supports the following billing options for <em>partnerships</em>. All"
      },
      "id": "603ece55e7b9d254192a080c"
    },
    {
      "sections": [
        "Partner integration requirements",
        "Process",
        "Accelerated process",
        "Typical component tasks"
      ],
      "title": "Partner integration requirements",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "5df8f0dc281afba95823d8896a55ceec56cd4a8a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partner-integration-requirements/",
      "published_at": "2021-05-22T00:19:17Z",
      "updated_at": "2021-03-16T10:06:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Thank you for your interest in partnering with New Relic. We look forward to providing your customers with powerful, easy-to-use application performance monitoring. This guide explains how to bundle New Relic services with yours. An effective bundling includes technical tasks (such as agent provisioning and console integration) as well as marketing and promotional activities (such as branding and awareness generation). Process To achieve a full and productive integration with New Relic you will need to: What How Integrate your user console with New Relic. Update your user portal to automatically create New Relic accounts and make them available to your customers in a convenient, compelling, co-branded way. Provision the New Relic agent. For your customers to benefit from New Relic, they will need our monitoring agent installed into their apps. Update your provisioning systems to install New Relic automatically. Generate awareness. Integrate and deploy New Relic facilities for displaying sample application reporting data to customers. Establish support and sustaining engineering processes. Agree on a process for support coordination and refresh of New Relic software. Set up communication. Tip: We've found that partners typically complete integration with one to two developer weeks of effort. For more information, see Typical component tasks. Accelerated process Where circumstances and/or proximity permit, we have found that bringing your developers on site to New Relic's San Francisco offices can dramatically accelerate development of your integration. At New Relic's offices your developers will work in close proximity to the engineering team that is responsible for the development and maintenance of New Relic's APIs. Development issues that would under other circumstances require hours or days to resolve can be addressed in minutes. Typically development time for an integration can be cut in half. Should you elect to pursue this option, please talk to your New Relic technical contact. Typical component tasks The checklist for creating a successful integration will vary with each partner and specific circumstances. As a general guide, here's a typical outline of the components and rough sequencing of tasks involved in creating an integration with New Relic. Done Component tasks of a typical partner integration Finalize business relationship. Have introductory conference call or meeting for technical team. Review partner integration documentation and other integration materials. Review roles and responsibilities. Develop integration plan with timeline. Plan account and agent provisioning. Create and deploy account provisioning system. Determine which agents and how to provision. Create and deploy webpages to support provisioning and deployment. Set up test partnership and accounts on New Relic's staging server. Plan for co-branding. Create and deploy CSS. Create and deploy header and footer. Create branded URL (cname). Drive adoption through creating awareness. Add the New Relic widget to the user console. Use data API integration. Test integration on staging. Set up partnership on New Relic's production server. Modify integration to point to production server. Test integration on production. Establish a support plan. Designate support contacts. Introduce New Relic Support to your technical support team. Create sustaining engineering plans. Get test account. Prepare for launch. Walk through integration review and signoff (conference call). Document final signup flow. Coordinate on launch co-marketing and PR. Go live!",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.335,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>integration</em> requirements",
        "sections": "<em>Partner</em> <em>integration</em> requirements",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " will vary with each <em>partner</em> and specific circumstances. As a general <em>guide</em>, here&#x27;s a typical outline of the components and rough sequencing of tasks involved in creating an <em>integration</em> with <em>New</em> <em>Relic</em>. Done Component tasks of a typical <em>partner</em> <em>integration</em> Finalize business relationship. Have"
      },
      "id": "603ed3e728ccbcba09eba7b7"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners": [
    {
      "sections": [
        "Partnership admin console",
        "Console components",
        "Partnership configuration settings",
        "Customer activity monitoring",
        "State-of-the-Partnership report",
        "Partner customer monitoring",
        "View an arbitrary customer",
        "Viewing detailed customer data"
      ],
      "title": "Partnership admin console",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "670e4d2e1db957100b23a7b8b0af6bf50cc8c996",
      "image": "https://docs.newrelic.com/static/43369c88523ebf526ae58fa5719d4efe/0abdd/crop-partnership-owner-account-settings.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partnership-admin-console/",
      "published_at": "2021-05-22T00:20:24Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Partnership Admin Console is the interface for managing your customers' accounts and integration with New Relic. To access the console, sign into the partnership owner account, and go to: https://partner-admin-console.newrelic.com/accounts/ACCOUNT_ID/admin_console/ Copy You can also access the console from the New Relic UI: Go to one.newrelic.com > (account dropdown) > Account settings. From the left menu bar, select Partnerships. one.newrelic.com > (account dropdown) > Account settings > Partnerships: Partnership owners can access the Partnership Admin Console from their account settings in the New Relic UI. Console components The Partnership Admin Console has two main components: Partnership configuration settings Customer activity monitoring If multiple partnerships are associated with the New Relic master account, the menu also includes an option to switch partnership accounts. Partnership configuration settings In developing your integration with New Relic, you must specify a number of settings. For your convenience these settings are grouped together in the partnership console, including URLs for header/footer and various redirects, SSO configuration, andÂ keys and the ability to manipulate them. Customer activity monitoring New Relic provides you with two tools for managing your customers: State-of-the-Partnership reports and live monitoring of all deployed New Relic agents in your partnership. Both of these tools provide insight into your customers who are using New Relic. They can be used to identify up-sale opportunities or to assist your support group in proactive support. State-of-the-Partnership report The State-of-the-Partnership report provides a summary of your customers with New Relic accounts and their activities. The report is broken down by language of the agents deployed, the agent version and the language version for each account. This report is run weekly for each partner. It is available on request from your New Relic Business Development contact. This report is an excellent way to see which of your customers with New Relic accounts are in fact using the service. Partner customer monitoring The Partner customer monitoring facility provides application performance data on the New Relic enabled applications that are running on your service. This facility allows you to easily identify customers experiencing performance problems. Where the performance problems are caused by under capacity, these customers are excellent sales opportunities. Alternatively your support or services organization will find this information useful in pre-emptively identifying customer issues or as good prospects for consulting services. View an arbitrary customer To view activity of a customer that does not appear in any of the filtered views: Go to one.newrelic.com > (account dropdown) > Switch accounts > Other accounts. New Relic will list all of the reporting accounts in the partnership. You can filter or search the list. Viewing detailed customer data Under normal circumstances a partner will be able to see only the summary level data in a customer's New Relic account. Through the Partnership Admin Console, partners will be permitted to drill down to the more detailed presentation. If you want to drill down from the Partnership Admin Console, add your user (typically support@partner.com or something similar) to the account. Typically this will be done at account creation. Avoid provisioning this user as the account Owner.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.71594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> admin console",
        "sections": "<em>Partnership</em> admin console",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "The <em>Partnership</em> Admin Console is the interface for managing your customers&#x27; accounts and <em>integration</em> with <em>New</em> <em>Relic</em>. To access the console, sign into the <em>partnership</em> owner account, and go to: https:&#x2F;&#x2F;<em>partner</em>-admin-console.newrelic.com&#x2F;accounts&#x2F;ACCOUNT_ID&#x2F;admin_console&#x2F; Copy You can also access"
      },
      "id": "603ed3e3196a6735baa83dad"
    },
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-05-22T08:28:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.42215,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> products, pricing, and billing",
        "sections": "Customized <em>partnership</em> pricing",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " by <em>partnership</em>--the actual pricing model used is subject to the contractual terms of the <em>partner</em>&#x27;s agreement with <em>New</em> <em>Relic</em>. Contact your Alliance &amp; Channels representative at <em>New</em> <em>Relic</em> to learn more. <em>Partnership</em> billing options <em>New</em> <em>Relic</em> supports the following billing options for <em>partnerships</em>. All"
      },
      "id": "603ece55e7b9d254192a080c"
    },
    {
      "sections": [
        "Partner integration requirements",
        "Process",
        "Accelerated process",
        "Typical component tasks"
      ],
      "title": "Partner integration requirements",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "5df8f0dc281afba95823d8896a55ceec56cd4a8a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partner-integration-requirements/",
      "published_at": "2021-05-22T00:19:17Z",
      "updated_at": "2021-03-16T10:06:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Thank you for your interest in partnering with New Relic. We look forward to providing your customers with powerful, easy-to-use application performance monitoring. This guide explains how to bundle New Relic services with yours. An effective bundling includes technical tasks (such as agent provisioning and console integration) as well as marketing and promotional activities (such as branding and awareness generation). Process To achieve a full and productive integration with New Relic you will need to: What How Integrate your user console with New Relic. Update your user portal to automatically create New Relic accounts and make them available to your customers in a convenient, compelling, co-branded way. Provision the New Relic agent. For your customers to benefit from New Relic, they will need our monitoring agent installed into their apps. Update your provisioning systems to install New Relic automatically. Generate awareness. Integrate and deploy New Relic facilities for displaying sample application reporting data to customers. Establish support and sustaining engineering processes. Agree on a process for support coordination and refresh of New Relic software. Set up communication. Tip: We've found that partners typically complete integration with one to two developer weeks of effort. For more information, see Typical component tasks. Accelerated process Where circumstances and/or proximity permit, we have found that bringing your developers on site to New Relic's San Francisco offices can dramatically accelerate development of your integration. At New Relic's offices your developers will work in close proximity to the engineering team that is responsible for the development and maintenance of New Relic's APIs. Development issues that would under other circumstances require hours or days to resolve can be addressed in minutes. Typically development time for an integration can be cut in half. Should you elect to pursue this option, please talk to your New Relic technical contact. Typical component tasks The checklist for creating a successful integration will vary with each partner and specific circumstances. As a general guide, here's a typical outline of the components and rough sequencing of tasks involved in creating an integration with New Relic. Done Component tasks of a typical partner integration Finalize business relationship. Have introductory conference call or meeting for technical team. Review partner integration documentation and other integration materials. Review roles and responsibilities. Develop integration plan with timeline. Plan account and agent provisioning. Create and deploy account provisioning system. Determine which agents and how to provision. Create and deploy webpages to support provisioning and deployment. Set up test partnership and accounts on New Relic's staging server. Plan for co-branding. Create and deploy CSS. Create and deploy header and footer. Create branded URL (cname). Drive adoption through creating awareness. Add the New Relic widget to the user console. Use data API integration. Test integration on staging. Set up partnership on New Relic's production server. Modify integration to point to production server. Test integration on production. Establish a support plan. Designate support contacts. Introduce New Relic Support to your technical support team. Create sustaining engineering plans. Get test account. Prepare for launch. Walk through integration review and signoff (conference call). Document final signup flow. Coordinate on launch co-marketing and PR. Go live!",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.335,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>integration</em> requirements",
        "sections": "<em>Partner</em> <em>integration</em> requirements",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " will vary with each <em>partner</em> and specific circumstances. As a general <em>guide</em>, here&#x27;s a typical outline of the components and rough sequencing of tasks involved in creating an <em>integration</em> with <em>New</em> <em>Relic</em>. Done Component tasks of a typical <em>partner</em> <em>integration</em> Finalize business relationship. Have"
      },
      "id": "603ed3e728ccbcba09eba7b7"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/getting-started/walkthrough-signoff": [
    {
      "sections": [
        "Partnership admin console",
        "Console components",
        "Partnership configuration settings",
        "Customer activity monitoring",
        "State-of-the-Partnership report",
        "Partner customer monitoring",
        "View an arbitrary customer",
        "Viewing detailed customer data"
      ],
      "title": "Partnership admin console",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "670e4d2e1db957100b23a7b8b0af6bf50cc8c996",
      "image": "https://docs.newrelic.com/static/43369c88523ebf526ae58fa5719d4efe/0abdd/crop-partnership-owner-account-settings.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partnership-admin-console/",
      "published_at": "2021-05-22T00:20:24Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Partnership Admin Console is the interface for managing your customers' accounts and integration with New Relic. To access the console, sign into the partnership owner account, and go to: https://partner-admin-console.newrelic.com/accounts/ACCOUNT_ID/admin_console/ Copy You can also access the console from the New Relic UI: Go to one.newrelic.com > (account dropdown) > Account settings. From the left menu bar, select Partnerships. one.newrelic.com > (account dropdown) > Account settings > Partnerships: Partnership owners can access the Partnership Admin Console from their account settings in the New Relic UI. Console components The Partnership Admin Console has two main components: Partnership configuration settings Customer activity monitoring If multiple partnerships are associated with the New Relic master account, the menu also includes an option to switch partnership accounts. Partnership configuration settings In developing your integration with New Relic, you must specify a number of settings. For your convenience these settings are grouped together in the partnership console, including URLs for header/footer and various redirects, SSO configuration, andÂ keys and the ability to manipulate them. Customer activity monitoring New Relic provides you with two tools for managing your customers: State-of-the-Partnership reports and live monitoring of all deployed New Relic agents in your partnership. Both of these tools provide insight into your customers who are using New Relic. They can be used to identify up-sale opportunities or to assist your support group in proactive support. State-of-the-Partnership report The State-of-the-Partnership report provides a summary of your customers with New Relic accounts and their activities. The report is broken down by language of the agents deployed, the agent version and the language version for each account. This report is run weekly for each partner. It is available on request from your New Relic Business Development contact. This report is an excellent way to see which of your customers with New Relic accounts are in fact using the service. Partner customer monitoring The Partner customer monitoring facility provides application performance data on the New Relic enabled applications that are running on your service. This facility allows you to easily identify customers experiencing performance problems. Where the performance problems are caused by under capacity, these customers are excellent sales opportunities. Alternatively your support or services organization will find this information useful in pre-emptively identifying customer issues or as good prospects for consulting services. View an arbitrary customer To view activity of a customer that does not appear in any of the filtered views: Go to one.newrelic.com > (account dropdown) > Switch accounts > Other accounts. New Relic will list all of the reporting accounts in the partnership. You can filter or search the list. Viewing detailed customer data Under normal circumstances a partner will be able to see only the summary level data in a customer's New Relic account. Through the Partnership Admin Console, partners will be permitted to drill down to the more detailed presentation. If you want to drill down from the Partnership Admin Console, add your user (typically support@partner.com or something similar) to the account. Typically this will be done at account creation. Avoid provisioning this user as the account Owner.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.71588,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> admin console",
        "sections": "<em>Partnership</em> admin console",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "The <em>Partnership</em> Admin Console is the interface for managing your customers&#x27; accounts and <em>integration</em> with <em>New</em> <em>Relic</em>. To access the console, sign into the <em>partnership</em> owner account, and go to: https:&#x2F;&#x2F;<em>partner</em>-admin-console.newrelic.com&#x2F;accounts&#x2F;ACCOUNT_ID&#x2F;admin_console&#x2F; Copy You can also access"
      },
      "id": "603ed3e3196a6735baa83dad"
    },
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-05-22T00:20:23Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.71588,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "This document is for <em>New</em> <em>Relic</em> partners. After you complete your <em>partnership</em> <em>integration</em>, you will be introduced to your technical contacts at <em>New</em> <em>Relic</em>. Use these channels for non-urgent escalations. Tip If you are not a <em>New</em> <em>Relic</em> <em>partner</em>, see <em>New</em> <em>Relic</em>&#x27;s resources for finding help or filing"
      },
      "id": "60450ecf28ccbc45632c6095"
    },
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-05-22T08:28:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.4221,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> products, pricing, and billing",
        "sections": "Customized <em>partnership</em> pricing",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " by <em>partnership</em>--the actual pricing model used is subject to the contractual terms of the <em>partner</em>&#x27;s agreement with <em>New</em> <em>Relic</em>. Contact your Alliance &amp; Channels representative at <em>New</em> <em>Relic</em> to learn more. <em>Partnership</em> billing options <em>New</em> <em>Relic</em> supports the following billing options for <em>partnerships</em>. All"
      },
      "id": "603ece55e7b9d254192a080c"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/other-partnership-settings": [
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-05-22T08:28:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 302.96524,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>products</em>, pricing, and billing",
        "sections": "<em>Partner</em> <em>products</em>, pricing, and billing",
        "tags": "<em>New</em> <em>Relic</em> <em>products</em> <em>features</em>",
        "body": " API user object (defined as an array within the account object) <em>Partnership</em> API subscription object (the level of service a customer purchases for one or more <em>New</em> <em>Relic</em> <em>products</em>) Billing <em>integration</em> API (functions to replace a customer&#x27;s existing subscription with a <em>new</em> one, or to update invoice information for <em>New</em> <em>Relic</em> <em>partner</em> accounts)"
      },
      "id": "603ece55e7b9d254192a080c"
    },
    {
      "sections": [
        "Partnership accounts: Single sign on and access control",
        "Implement Single Sign On",
        "Use shared secret method",
        "SSO API",
        "Description",
        "Method",
        "URI",
        "Parameters",
        "**cURL examples**",
        "For more help"
      ],
      "title": "Partnership accounts: Single sign on and access control",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "7054f72ececf6692e3abdcc1573276559be841ca",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/single-sign-access-control/",
      "published_at": "2021-05-22T15:31:39Z",
      "updated_at": "2021-03-13T02:45:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic supports Single Sign On (SSO) as a convenience for partner customers. Partners implementing SSO also have the option to restrict access by requiring customers to access New Relic via the partner's management site or product login. Single Sign On is a convenience for your customers, eliminating the requirement of entering sign on credentials multiple times, and it creates a more unified experience for the user. In situations where this distinction is desired, SSO is recommended. Where it is desirable to maintain a distinction between the services or where technical considerations preclude implementing SSO, a fully functioning integration is still achievable. Implement Single Sign On Two methods for SSO are supported by New Relic. New Relic upgraded its single sign on system during 2011. If you implemented single sign on with New Relic prior to September 2011, you will have used the old system. That method of implementing SSO has been deprecated. All new integrations must use the new system. Existing implementations using the old system will continue to work indefinitely. However, we encourage all partners using the old system to upgrade to the new model. Use shared secret method The upgraded shared secret version of New Relic's SSO implementation offers several improvements over the old handshake version. Most important, the system is more secure. Security is enhanced by the use of passing a SHA1 digest of a shared secret, a timestamp, and request specific data in the authentication SSO request. The shared secret can be any string. Whatever shared secret is chosen, enter it in the appropriate field in the New Relic Partner console. To edit the SSO settings: Log in to the partnership owner account. From the account dropdown in the New Relic UI, select Account settings > Partnerships > Edit settings. For SSO type, select signature. For SSO data, type the shared secret. Select Save. In addition to enhanced security, the new SSO method supports a session cookie. Nav data may be stored in the session cookie to support enhanced functionality of headers and footers. The name of the cookie is specified through the Partner console. If unspecified the cookie name defaults to nav_data. To successfully use this SSO method, the SSO URI must be invoked from the user's browser. On success the browser will be automatically logged into New Relic and the redirect URL to that account returned. The SSO URI however should not be generated on the browser, as this would expose the shared secret and allow the login to be spoofed. The URI should be generated on a host and passed to the user's browser. SSO API Description SSO authentication request Method POST or GET URI https://rpm.newrelic.com/accounts/sso_access Copy Parameters Name Required Description id Yes ID of the New Relic account. email No Email address of user logging in (optional). If given, the user must already have been added to the account. By default, the account Owner role is used. Account Owners have full privileges on accounts. If some lesser degree of account privileges or a different user is desired, the email must be provided. timestamp Yes Timestamp used to generate token, in seconds since the epoch. Only timestamps within five minutes (300 seconds) of the New Relic system clock are accepted. nav-data OR nav_data No Partner navigation data. This data will be set in the session cookie using the name as specified in the partnership configuration, or nav_data by default. token Yes Signed token. The signature token is generated by applying a SHA1 hex digest on a seed string, which is composed as Account_id:secret:timestamp or Account_id:secret:timestamp:email. Each component is separated by a colon (:). Example without email: \"12345:MySecret:0987654321\" Using Ruby syntax: \"#{account_id}:#{secret}:#{timestamp}\" Example with email: \"12345:MySecret:0987654321:user@host.com\" Using Ruby syntax: \"#{account_id}:#{secret}:#{timestamp}:#{email}\" remote_url No Relative path of a New Relic page to which the users will be directed. ** cURL examples * * curl -X POST -d \"id=63790\" -d \"timestamp=1319659982\" -d \"token=a4d30d6f1f1a5b6c2872ab\" https://rpm.newrelic.com/accounts/sso_access Copy curl -X POST -d \"id=63790\" -d \"timestamp=1319659982\" -d \"token=a4d30d6f1f1a5b6c2872ab\" -d \"remote_url=/account/63790/servers\" https://rpm.newrelic.com/accounts/sso_access Copy On success returns: <html><body>You are being redirected.</body></html> Copy For more help Additional documentation resources include: SAML service providers (overview of New Relic's SSO feature, providers supported by New Relic) New Relic Partners and SAML SSO (additional options for partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 200.7112,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> accounts: Single sign on and access control",
        "sections": "<em>Partnership</em> accounts: Single sign on and access control",
        "tags": "<em>New</em> <em>Relic</em> <em>products</em> <em>features</em>",
        "body": "<em>New</em> <em>Relic</em> supports Single Sign On (SSO) as a convenience for <em>partner</em> customers. Partners implementing SSO also have the option to restrict access by requiring customers to access <em>New</em> <em>Relic</em> via the <em>partner</em>&#x27;s management site or <em>product</em> login. Single Sign On is a convenience for your customers"
      },
      "id": "6044175564441fd3fa378f1f"
    },
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-05-22T00:20:23Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 196.52556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>New</em> <em>Relic</em> <em>products</em> and <em>features</em> by category. Tip The Docs site includes a <em>Partnerships</em> category with information for <em>New</em> <em>Relic</em> partners and some <em>partnership</em> customers. Here are the five most commonly consulted articles on the <em>New</em> <em>Relic</em> Docs site. Providing easily found and direct links"
      },
      "id": "60450ecf28ccbc45632c6095"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing": [
    {
      "sections": [
        "Other partnership settings",
        "Types of settings",
        "For more help"
      ],
      "title": "Other partnership settings",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "df23328a14acab54c7f100c723f6feee68927c6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/other-partnership-settings/",
      "published_at": "2021-05-22T12:05:16Z",
      "updated_at": "2021-03-16T10:07:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There are a number of miscellaneous settings that are available to partners for customization of their partnership integration. Most of these settings enable or disable the presentation of New Relic features. These settings must be set by New Relic and are not configurable through the Partnership Console. Types of settings Contact your partnership technical contact to have any of these settings modified. Download links: Show agent link Show configuration file link Welcome messages: Signup message: A customized welcome message Hide or show banner welcome message Hide or show invoice message Email control: Send deploy reminders Send trial emails Billing email: This is for partnerships where the billing method is \"Reseller\" and invoices should be directed to the attention of a specific party. Feature access: Server monitoring User administration For more help Additional documentation resources include: Partnership console (overview of how to use the Partnership Console to change account settings in New Relic) The New Relic user interface (overview of how to use the UI)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.77632,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Other <em>partnership</em> settings",
        "sections": "Other <em>partnership</em> settings",
        "tags": "<em>New</em> <em>Relic</em> <em>products</em> <em>features</em>",
        "body": "There are a number of miscellaneous settings that are available to partners for customization of their <em>partnership</em> <em>integration</em>. Most of these settings enable or disable the presentation of <em>New</em> <em>Relic</em> <em>features</em>. These settings must be set by <em>New</em> <em>Relic</em> and are not configurable through the <em>Partnership</em>"
      },
      "id": "603ed42364441fb51f4e88a9"
    },
    {
      "sections": [
        "Partnership accounts: Single sign on and access control",
        "Implement Single Sign On",
        "Use shared secret method",
        "SSO API",
        "Description",
        "Method",
        "URI",
        "Parameters",
        "**cURL examples**",
        "For more help"
      ],
      "title": "Partnership accounts: Single sign on and access control",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "7054f72ececf6692e3abdcc1573276559be841ca",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/single-sign-access-control/",
      "published_at": "2021-05-22T15:31:39Z",
      "updated_at": "2021-03-13T02:45:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic supports Single Sign On (SSO) as a convenience for partner customers. Partners implementing SSO also have the option to restrict access by requiring customers to access New Relic via the partner's management site or product login. Single Sign On is a convenience for your customers, eliminating the requirement of entering sign on credentials multiple times, and it creates a more unified experience for the user. In situations where this distinction is desired, SSO is recommended. Where it is desirable to maintain a distinction between the services or where technical considerations preclude implementing SSO, a fully functioning integration is still achievable. Implement Single Sign On Two methods for SSO are supported by New Relic. New Relic upgraded its single sign on system during 2011. If you implemented single sign on with New Relic prior to September 2011, you will have used the old system. That method of implementing SSO has been deprecated. All new integrations must use the new system. Existing implementations using the old system will continue to work indefinitely. However, we encourage all partners using the old system to upgrade to the new model. Use shared secret method The upgraded shared secret version of New Relic's SSO implementation offers several improvements over the old handshake version. Most important, the system is more secure. Security is enhanced by the use of passing a SHA1 digest of a shared secret, a timestamp, and request specific data in the authentication SSO request. The shared secret can be any string. Whatever shared secret is chosen, enter it in the appropriate field in the New Relic Partner console. To edit the SSO settings: Log in to the partnership owner account. From the account dropdown in the New Relic UI, select Account settings > Partnerships > Edit settings. For SSO type, select signature. For SSO data, type the shared secret. Select Save. In addition to enhanced security, the new SSO method supports a session cookie. Nav data may be stored in the session cookie to support enhanced functionality of headers and footers. The name of the cookie is specified through the Partner console. If unspecified the cookie name defaults to nav_data. To successfully use this SSO method, the SSO URI must be invoked from the user's browser. On success the browser will be automatically logged into New Relic and the redirect URL to that account returned. The SSO URI however should not be generated on the browser, as this would expose the shared secret and allow the login to be spoofed. The URI should be generated on a host and passed to the user's browser. SSO API Description SSO authentication request Method POST or GET URI https://rpm.newrelic.com/accounts/sso_access Copy Parameters Name Required Description id Yes ID of the New Relic account. email No Email address of user logging in (optional). If given, the user must already have been added to the account. By default, the account Owner role is used. Account Owners have full privileges on accounts. If some lesser degree of account privileges or a different user is desired, the email must be provided. timestamp Yes Timestamp used to generate token, in seconds since the epoch. Only timestamps within five minutes (300 seconds) of the New Relic system clock are accepted. nav-data OR nav_data No Partner navigation data. This data will be set in the session cookie using the name as specified in the partnership configuration, or nav_data by default. token Yes Signed token. The signature token is generated by applying a SHA1 hex digest on a seed string, which is composed as Account_id:secret:timestamp or Account_id:secret:timestamp:email. Each component is separated by a colon (:). Example without email: \"12345:MySecret:0987654321\" Using Ruby syntax: \"#{account_id}:#{secret}:#{timestamp}\" Example with email: \"12345:MySecret:0987654321:user@host.com\" Using Ruby syntax: \"#{account_id}:#{secret}:#{timestamp}:#{email}\" remote_url No Relative path of a New Relic page to which the users will be directed. ** cURL examples * * curl -X POST -d \"id=63790\" -d \"timestamp=1319659982\" -d \"token=a4d30d6f1f1a5b6c2872ab\" https://rpm.newrelic.com/accounts/sso_access Copy curl -X POST -d \"id=63790\" -d \"timestamp=1319659982\" -d \"token=a4d30d6f1f1a5b6c2872ab\" -d \"remote_url=/account/63790/servers\" https://rpm.newrelic.com/accounts/sso_access Copy On success returns: <html><body>You are being redirected.</body></html> Copy For more help Additional documentation resources include: SAML service providers (overview of New Relic's SSO feature, providers supported by New Relic) New Relic Partners and SAML SSO (additional options for partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 200.7112,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> accounts: Single sign on and access control",
        "sections": "<em>Partnership</em> accounts: Single sign on and access control",
        "tags": "<em>New</em> <em>Relic</em> <em>products</em> <em>features</em>",
        "body": "<em>New</em> <em>Relic</em> supports Single Sign On (SSO) as a convenience for <em>partner</em> customers. Partners implementing SSO also have the option to restrict access by requiring customers to access <em>New</em> <em>Relic</em> via the <em>partner</em>&#x27;s management site or <em>product</em> login. Single Sign On is a convenience for your customers"
      },
      "id": "6044175564441fd3fa378f1f"
    },
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-05-22T00:20:23Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 196.52548,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>New</em> <em>Relic</em> <em>products</em> and <em>features</em> by category. Tip The Docs site includes a <em>Partnerships</em> category with information for <em>New</em> <em>Relic</em> partners and some <em>partnership</em> customers. Here are the five most commonly consulted articles on the <em>New</em> <em>Relic</em> Docs site. Providing easily found and direct links"
      },
      "id": "60450ecf28ccbc45632c6095"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/single-sign-access-control": [
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-05-22T08:28:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 302.96515,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>products</em>, pricing, and billing",
        "sections": "<em>Partner</em> <em>products</em>, pricing, and billing",
        "tags": "<em>New</em> <em>Relic</em> <em>products</em> <em>features</em>",
        "body": " API user object (defined as an array within the account object) <em>Partnership</em> API subscription object (the level of service a customer purchases for one or more <em>New</em> <em>Relic</em> <em>products</em>) Billing <em>integration</em> API (functions to replace a customer&#x27;s existing subscription with a <em>new</em> one, or to update invoice information for <em>New</em> <em>Relic</em> <em>partner</em> accounts)"
      },
      "id": "603ece55e7b9d254192a080c"
    },
    {
      "sections": [
        "Other partnership settings",
        "Types of settings",
        "For more help"
      ],
      "title": "Other partnership settings",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "df23328a14acab54c7f100c723f6feee68927c6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/other-partnership-settings/",
      "published_at": "2021-05-22T12:05:16Z",
      "updated_at": "2021-03-16T10:07:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There are a number of miscellaneous settings that are available to partners for customization of their partnership integration. Most of these settings enable or disable the presentation of New Relic features. These settings must be set by New Relic and are not configurable through the Partnership Console. Types of settings Contact your partnership technical contact to have any of these settings modified. Download links: Show agent link Show configuration file link Welcome messages: Signup message: A customized welcome message Hide or show banner welcome message Hide or show invoice message Email control: Send deploy reminders Send trial emails Billing email: This is for partnerships where the billing method is \"Reseller\" and invoices should be directed to the attention of a specific party. Feature access: Server monitoring User administration For more help Additional documentation resources include: Partnership console (overview of how to use the Partnership Console to change account settings in New Relic) The New Relic user interface (overview of how to use the UI)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.77632,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Other <em>partnership</em> settings",
        "sections": "Other <em>partnership</em> settings",
        "tags": "<em>New</em> <em>Relic</em> <em>products</em> <em>features</em>",
        "body": "There are a number of miscellaneous settings that are available to partners for customization of their <em>partnership</em> <em>integration</em>. Most of these settings enable or disable the presentation of <em>New</em> <em>Relic</em> <em>features</em>. These settings must be set by <em>New</em> <em>Relic</em> and are not configurable through the <em>Partnership</em>"
      },
      "id": "603ed42364441fb51f4e88a9"
    },
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-05-22T00:20:23Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 196.52548,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>New</em> <em>Relic</em> <em>products</em> and <em>features</em> by category. Tip The Docs site includes a <em>Partnerships</em> category with information for <em>New</em> <em>Relic</em> partners and some <em>partnership</em> customers. Here are the five most commonly consulted articles on the <em>New</em> <em>Relic</em> Docs site. Providing easily found and direct links"
      },
      "id": "60450ecf28ccbc45632c6095"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-account-access-administrators": [
    {
      "sections": [
        "Intro to Partnership API",
        "Requirements",
        "Customer partnership restrictions",
        "Password requirements",
        "Things you can do",
        "Get started"
      ],
      "title": "Intro to Partnership API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "074cf4e7c590dfa2332284a7b7f394e2f7ba45ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-api/",
      "published_at": "2021-05-22T15:33:08Z",
      "updated_at": "2021-03-29T20:10:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Partnership API allows New Relic partners, and New Relic accounts set up as customer partnerships, to manage accounts, users, and subscription-related settings. Requirements The Partnership API can be used by two types of New Relic accounts: partners (managed service providers, resellers) and customer partnerships (larger customers who have been given access to our partnership account structure). These docs are for version 2 of the Partner API. Earlier versions have been deprecated. If you have problems with an older integration, upgrade to version 2. Access to the partnership account structure and the Partnership API requires prior setup and approval by New Relic. Partnership API calls require authentication with both your partnership owner account's REST API key and your Partner ID. Accounts that are genuine New Relic partners (managed service providers, resellers) have no restrictions on using the API. Accounts set up as customer partnerships have restrictions that follow. Customer partnership restrictions If your New Relic organization is set up as a customer partnership, there are some restrictions in place if your organization is on our newer pricing plan or our newer account/user model. Details: Pricing plan. If youâre on New Relic One pricing, you can't use API calls that govern our original pricing plan. The API impacts are: You can't use the subscription object You can't use the NerdGraph Provisioning API. User model. If your New Relic account has been converted to be entirely on the New Relic One account/user model, you can no longer use API calls that create or govern users on our original user model. The API impacts are: You can't use the user object. Instead, you'd manage users with these user management docs. For the account object: you can't add users via the users field. Instead, you'd manage users with these user management docs. To determine your pricing plan or account/user model, see Overview of pricing and user model changes. Password requirements Passwords passed for account creation have these requirements: 8 to 50 characters in length Only contain letters, numbers, or special characters Cannot contain spaces Must contain at least 1 letter Must contain at least 1 number or special character Things you can do Here is an overview of the API's functionality. Account: The account object is what you use to create and update accounts. You can do the following with it: Create new Show Update Cancel Show usage Set primary admin (some accounts) Set subscription (some accounts) There is also a sub-account object for creating sub-accounts. Users: Some organizations that meet the requirements can use the user object to: Add user access to account Remove user access from account Subscription: Organizations that meet the requirements and are on our original product pricing plan can use the subscription object to configure various subscription-related traits. Get started To start using the Partnership API, see the Partner API reference docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.95786,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to <em>Partnership</em> API",
        "sections": "Intro to <em>Partnership</em> API",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": ") and customer <em>partnerships</em> (larger customers who have been given access to our <em>partnership</em> <em>account</em> structure). These docs are for version 2 of the <em>Partner</em> API. Earlier versions have been deprecated. If you have problems with an older <em>integration</em>, upgrade to version 2. Access to the <em>partnership</em> <em>account</em>"
      },
      "id": "603ed42328ccbcd4b3eba7ca"
    },
    {
      "sections": [
        "Partnership accounts, users, and subscriptions",
        "Partnerships with New Relic",
        "Account hierarchy",
        "Tip",
        "Partnership owner accounts (POA)",
        "Sub-accounts with partnerships",
        "Account users",
        "Partnership pricing"
      ],
      "title": "Partnership accounts, users, and subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ae2f39a8ff0395815b3e31a9d8ad9361beca2c4e",
      "image": "https://docs.newrelic.com/static/acecf0ec89c448506faef0e4eeff87e6/db3a5/partnership-hierarchy.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partnership-accounts-users-subscriptions/",
      "published_at": "2021-05-22T15:35:19Z",
      "updated_at": "2021-03-29T16:17:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic organizations set up as partnership accounts have access to an enhanced hierarchical way of organizing their account structure. Partnerships with New Relic There are two types of New Relic organizations that are able to use our partnership account structure and the Partnership API: An actual partnership: A partnership refers to managed service providers or resellers, who offer New Relic products to their customers. Heroku is one example of such a New Relic partner. A customer partnership: some of our larger organizations also make use of our partnership account structure. We call these customers \"customer partnerships.\" Use of our partnership account structure requires prior approval and set up by New Relic representatives. For customer partnerships, New Relic contacts organizations that would benefit from such a structure. Partnerships are identified by a numeric PARTNER_ID. In some cases, a New Relic customer may have more than one partnership; for example, when one section of New Relic users must be managed differently from another. Partnerships are administered by a partnership owner account. The account that owns a partnership functions differently from a regular account. If multiple partnerships have been set up, each has a unique PARTNER_ID. Account hierarchy New Relic partnership organizations consist of the partnership owning account, partnerships, master accounts, and sub-accounts. A partnership can have multiple master accounts and sub-accounts. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you do not have a partnership organization, you can only have one master account. For more information, see Manage apps or users with sub-accounts. All master accounts and sub-accounts roll up to your partnership account. Partnership owner accounts (POA) The partnership owner account (POA) is the entity that is used to administer a partnership. It controls which users manage accounts under partnerships, have access to the partner API, and manage other aspects of the partnership. Do not monitor your own applications from the partnership owner account. Instead, create an account within the partnership and monitor apps from that account. Users on the partnership owner account can access accounts under their partnerships and enjoy User level privileges. Admins on the POA can access accounts under their partnerships and enjoy Admin level privileges, including permission to manage users. The Owner of the partnership owner account will still only have Admin level access on accounts under the partnership. That means that the owner cannot enable SAML SSO, change the account owner, cancel the account via the UI, etc. The partnership owner account enjoys special privileges, and it lets you exercise the capabilities defined in your partnership agreement with New Relic. For example, you may use your partnership owner account with the New Relic Partnership API to set up and manage users on your accounts or to view your customers' performance data in the New Relic UI. Tip Many of the Partnership API calls return an account status as part of the XML. Sub-accounts with partnerships Sub-accounts behave differently than other New Relic accounts provisioned through your partnership: Sub-accounts Comments Account creation Sub-accounts can be created through the Partnership API or New Relic user interface. In order to group accounts through the New Relic user interface, your partnership must have Admin privileges, and the account must have the appropriate subscription level. If you have any questions about partnership privileges or subscription levels, contact your New Relic account representative. Sub-accounts do not have a New Relic subscription of their own. They inherit the master account's subscription. Billing Billing is applied at the master account level. Exception: Reseller partnerships receive consolidated billing for all accounts under the partnership. Permissions Admin-level users on a master account have the ability to create, modify, and delete sub-accounts for the master account. Users that have been granted access permissions on a master account automatically inherit the same level of access for all sub-accounts. This is also true for add-on roles. Exception: Sub-account users will not receive alert emails or weekly report emails unless they are explicitly granted permission on these sub-accounts. Account users You can use the Partnership user API to add and maintain your customer users. An account must always have at least one person (the Owner) associated with it. For security purposes, you cannot change an account Owner with the Partnership user API. Instead, you must change the account Owner from the Users page in the New Relic UI. In addition, a specific user may be associated with multiple accounts. For example, many New Relic users have accounts through a partnership, and they also have accounts they created directly with New Relic. Partnership pricing Accounts within a partnership organization may have different levels of access to New Relic products. Tip Many of the Partnership API calls return a subscription status as part of the XML. For accounts set up through a partnership: An account can have multiple New Relic products associated with it. However, only one subscription per product may be active at any time. For example, a user may have both an Essentials subscription and a higher service level Pro Trial subscription. When the Pro Trial subscription expires, the service level returns to the Essentials subscription. Promotions may appear as a subscription change. Several factors affect starting and stopping subscriptions, including how New Relic handles pricing and billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.8838,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>accounts</em>, users, and subscriptions",
        "sections": "<em>Partnerships</em> with <em>New</em> <em>Relic</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " these customers &quot;customer <em>partnerships</em>.&quot; Use of our <em>partnership</em> <em>account</em> structure requires prior approval and set up by <em>New</em> <em>Relic</em> representatives. For customer <em>partnerships</em>, <em>New</em> <em>Relic</em> contacts organizations that would benefit from such a structure. <em>Partnerships</em> are identified by a numeric <em>PARTNER</em>"
      },
      "id": "603ece55e7b9d273782a0804"
    },
    {
      "sections": [
        "Tips and tricks",
        "Account creation and deletion",
        "Partnership owner account"
      ],
      "title": "Tips and tricks",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ba123e58f5acafea5b65e09350eba65abf430b2e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/tips-tricks/",
      "published_at": "2021-05-22T15:36:05Z",
      "updated_at": "2021-03-13T03:11:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some tips and tricks for creating and deleting New Relic partner accounts. Account creation and deletion When you create an account through the New Relic Partner API, the system checks the string submitted as the account name to ensure it is unique. If it is not unique, the system will append a number to the submitted string to ensure uniqueness; for example, account-name_1. When an account is canceled, it is not deleted from the New Relic database. Rather, it is made inactive by removing all subscriptions from the account. If you attempt to reinstate an account by calling the Account Creation API using the same account name, the system will check for uniqueness, determine that the name is not unique and create a new account with an appended number. This is in most cases not what is desired. To avoid this problem, as part of account creation, store the numeric account_id with the account name. When re-creating an account, check for the existence of this ID. If detected, rather than using the Account Creation API, use the Change Subscription API to add a new subscription to the account. Adding an active subscription to the account will re-activate the account. Partnership owner account The Partnership Owner Account is not part of the partnership. It owns the partnership. Attempts to treat it as if it were in the partnership will fail. This includes but is not limited to: Attempting to SSO into the partnership owner account using the partnership shared secret Expecting the partnership pricing to apply to the partnership owner account",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 185.90288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Partnership</em> owner <em>account</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Here are some tips and tricks for creating and deleting <em>New</em> <em>Relic</em> <em>partner</em> accounts. <em>Account</em> creation and deletion When you create an <em>account</em> through the <em>New</em> <em>Relic</em> <em>Partner</em> API, the system checks the string submitted as the <em>account</em> name to ensure it is unique. If it is not unique, the system"
      },
      "id": "60441785196a676aed960f46"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-api": [
    {
      "sections": [
        "Partnership accounts, users, and subscriptions",
        "Partnerships with New Relic",
        "Account hierarchy",
        "Tip",
        "Partnership owner accounts (POA)",
        "Sub-accounts with partnerships",
        "Account users",
        "Partnership pricing"
      ],
      "title": "Partnership accounts, users, and subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ae2f39a8ff0395815b3e31a9d8ad9361beca2c4e",
      "image": "https://docs.newrelic.com/static/acecf0ec89c448506faef0e4eeff87e6/db3a5/partnership-hierarchy.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partnership-accounts-users-subscriptions/",
      "published_at": "2021-05-22T15:35:19Z",
      "updated_at": "2021-03-29T16:17:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic organizations set up as partnership accounts have access to an enhanced hierarchical way of organizing their account structure. Partnerships with New Relic There are two types of New Relic organizations that are able to use our partnership account structure and the Partnership API: An actual partnership: A partnership refers to managed service providers or resellers, who offer New Relic products to their customers. Heroku is one example of such a New Relic partner. A customer partnership: some of our larger organizations also make use of our partnership account structure. We call these customers \"customer partnerships.\" Use of our partnership account structure requires prior approval and set up by New Relic representatives. For customer partnerships, New Relic contacts organizations that would benefit from such a structure. Partnerships are identified by a numeric PARTNER_ID. In some cases, a New Relic customer may have more than one partnership; for example, when one section of New Relic users must be managed differently from another. Partnerships are administered by a partnership owner account. The account that owns a partnership functions differently from a regular account. If multiple partnerships have been set up, each has a unique PARTNER_ID. Account hierarchy New Relic partnership organizations consist of the partnership owning account, partnerships, master accounts, and sub-accounts. A partnership can have multiple master accounts and sub-accounts. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you do not have a partnership organization, you can only have one master account. For more information, see Manage apps or users with sub-accounts. All master accounts and sub-accounts roll up to your partnership account. Partnership owner accounts (POA) The partnership owner account (POA) is the entity that is used to administer a partnership. It controls which users manage accounts under partnerships, have access to the partner API, and manage other aspects of the partnership. Do not monitor your own applications from the partnership owner account. Instead, create an account within the partnership and monitor apps from that account. Users on the partnership owner account can access accounts under their partnerships and enjoy User level privileges. Admins on the POA can access accounts under their partnerships and enjoy Admin level privileges, including permission to manage users. The Owner of the partnership owner account will still only have Admin level access on accounts under the partnership. That means that the owner cannot enable SAML SSO, change the account owner, cancel the account via the UI, etc. The partnership owner account enjoys special privileges, and it lets you exercise the capabilities defined in your partnership agreement with New Relic. For example, you may use your partnership owner account with the New Relic Partnership API to set up and manage users on your accounts or to view your customers' performance data in the New Relic UI. Tip Many of the Partnership API calls return an account status as part of the XML. Sub-accounts with partnerships Sub-accounts behave differently than other New Relic accounts provisioned through your partnership: Sub-accounts Comments Account creation Sub-accounts can be created through the Partnership API or New Relic user interface. In order to group accounts through the New Relic user interface, your partnership must have Admin privileges, and the account must have the appropriate subscription level. If you have any questions about partnership privileges or subscription levels, contact your New Relic account representative. Sub-accounts do not have a New Relic subscription of their own. They inherit the master account's subscription. Billing Billing is applied at the master account level. Exception: Reseller partnerships receive consolidated billing for all accounts under the partnership. Permissions Admin-level users on a master account have the ability to create, modify, and delete sub-accounts for the master account. Users that have been granted access permissions on a master account automatically inherit the same level of access for all sub-accounts. This is also true for add-on roles. Exception: Sub-account users will not receive alert emails or weekly report emails unless they are explicitly granted permission on these sub-accounts. Account users You can use the Partnership user API to add and maintain your customer users. An account must always have at least one person (the Owner) associated with it. For security purposes, you cannot change an account Owner with the Partnership user API. Instead, you must change the account Owner from the Users page in the New Relic UI. In addition, a specific user may be associated with multiple accounts. For example, many New Relic users have accounts through a partnership, and they also have accounts they created directly with New Relic. Partnership pricing Accounts within a partnership organization may have different levels of access to New Relic products. Tip Many of the Partnership API calls return a subscription status as part of the XML. For accounts set up through a partnership: An account can have multiple New Relic products associated with it. However, only one subscription per product may be active at any time. For example, a user may have both an Essentials subscription and a higher service level Pro Trial subscription. When the Pro Trial subscription expires, the service level returns to the Essentials subscription. Promotions may appear as a subscription change. Several factors affect starting and stopping subscriptions, including how New Relic handles pricing and billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.8838,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>accounts</em>, users, and subscriptions",
        "sections": "<em>Partnerships</em> with <em>New</em> <em>Relic</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " these customers &quot;customer <em>partnerships</em>.&quot; Use of our <em>partnership</em> <em>account</em> structure requires prior approval and set up by <em>New</em> <em>Relic</em> representatives. For customer <em>partnerships</em>, <em>New</em> <em>Relic</em> contacts organizations that would benefit from such a structure. <em>Partnerships</em> are identified by a numeric <em>PARTNER</em>"
      },
      "id": "603ece55e7b9d273782a0804"
    },
    {
      "sections": [
        "Partner account access for administrators",
        "Guest level access",
        "Administrative level access"
      ],
      "title": "Partner account access for administrators",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "619eaa0ec75341c74c05afc0b888d2cc46d08767",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-account-access-administrators/",
      "published_at": "2021-05-22T15:32:32Z",
      "updated_at": "2021-03-16T10:08:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers the option for partner administrators to access their customers' accounts, subject to the contractual terms of the partnership agreement. These settings are controlled by a New Relic admin. For permissions for non-partner accounts, see Users and roles. Guest level access Guest level access allows administrators to view application data on their customers' accounts. This is particularly useful for troubleshooting customer issues related to performance. Administrative level access Administrative level access, in addition to viewing application data, allows partner administrators to modify the account and subscription terms, and add or remove users from an account. This access level is required for partners who will remotely administer customer accounts using the API or who enable Restricted access on their accounts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 186.88437,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>account</em> access for administrators",
        "sections": "<em>Partner</em> <em>account</em> access for administrators",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em> offers the option for <em>partner</em> administrators to access their customers&#x27; accounts, subject to the contractual terms of the <em>partnership</em> agreement. These settings are controlled by a <em>New</em> <em>Relic</em> admin. For permissions for non-<em>partner</em> accounts, see Users and roles. Guest level access Guest"
      },
      "id": "603ec86ee7b9d2756c2a07c7"
    },
    {
      "sections": [
        "Tips and tricks",
        "Account creation and deletion",
        "Partnership owner account"
      ],
      "title": "Tips and tricks",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ba123e58f5acafea5b65e09350eba65abf430b2e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/tips-tricks/",
      "published_at": "2021-05-22T15:36:05Z",
      "updated_at": "2021-03-13T03:11:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some tips and tricks for creating and deleting New Relic partner accounts. Account creation and deletion When you create an account through the New Relic Partner API, the system checks the string submitted as the account name to ensure it is unique. If it is not unique, the system will append a number to the submitted string to ensure uniqueness; for example, account-name_1. When an account is canceled, it is not deleted from the New Relic database. Rather, it is made inactive by removing all subscriptions from the account. If you attempt to reinstate an account by calling the Account Creation API using the same account name, the system will check for uniqueness, determine that the name is not unique and create a new account with an appended number. This is in most cases not what is desired. To avoid this problem, as part of account creation, store the numeric account_id with the account name. When re-creating an account, check for the existence of this ID. If detected, rather than using the Account Creation API, use the Change Subscription API to add a new subscription to the account. Adding an active subscription to the account will re-activate the account. Partnership owner account The Partnership Owner Account is not part of the partnership. It owns the partnership. Attempts to treat it as if it were in the partnership will fail. This includes but is not limited to: Attempting to SSO into the partnership owner account using the partnership shared secret Expecting the partnership pricing to apply to the partnership owner account",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 185.90288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Partnership</em> owner <em>account</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Here are some tips and tricks for creating and deleting <em>New</em> <em>Relic</em> <em>partner</em> accounts. <em>Account</em> creation and deletion When you create an <em>account</em> through the <em>New</em> <em>Relic</em> <em>Partner</em> API, the system checks the string submitted as the <em>account</em> name to ensure it is unique. If it is not unique, the system"
      },
      "id": "60441785196a676aed960f46"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partnership-accounts-users-subscriptions": [
    {
      "sections": [
        "Intro to Partnership API",
        "Requirements",
        "Customer partnership restrictions",
        "Password requirements",
        "Things you can do",
        "Get started"
      ],
      "title": "Intro to Partnership API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "074cf4e7c590dfa2332284a7b7f394e2f7ba45ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-api/",
      "published_at": "2021-05-22T15:33:08Z",
      "updated_at": "2021-03-29T20:10:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Partnership API allows New Relic partners, and New Relic accounts set up as customer partnerships, to manage accounts, users, and subscription-related settings. Requirements The Partnership API can be used by two types of New Relic accounts: partners (managed service providers, resellers) and customer partnerships (larger customers who have been given access to our partnership account structure). These docs are for version 2 of the Partner API. Earlier versions have been deprecated. If you have problems with an older integration, upgrade to version 2. Access to the partnership account structure and the Partnership API requires prior setup and approval by New Relic. Partnership API calls require authentication with both your partnership owner account's REST API key and your Partner ID. Accounts that are genuine New Relic partners (managed service providers, resellers) have no restrictions on using the API. Accounts set up as customer partnerships have restrictions that follow. Customer partnership restrictions If your New Relic organization is set up as a customer partnership, there are some restrictions in place if your organization is on our newer pricing plan or our newer account/user model. Details: Pricing plan. If youâre on New Relic One pricing, you can't use API calls that govern our original pricing plan. The API impacts are: You can't use the subscription object You can't use the NerdGraph Provisioning API. User model. If your New Relic account has been converted to be entirely on the New Relic One account/user model, you can no longer use API calls that create or govern users on our original user model. The API impacts are: You can't use the user object. Instead, you'd manage users with these user management docs. For the account object: you can't add users via the users field. Instead, you'd manage users with these user management docs. To determine your pricing plan or account/user model, see Overview of pricing and user model changes. Password requirements Passwords passed for account creation have these requirements: 8 to 50 characters in length Only contain letters, numbers, or special characters Cannot contain spaces Must contain at least 1 letter Must contain at least 1 number or special character Things you can do Here is an overview of the API's functionality. Account: The account object is what you use to create and update accounts. You can do the following with it: Create new Show Update Cancel Show usage Set primary admin (some accounts) Set subscription (some accounts) There is also a sub-account object for creating sub-accounts. Users: Some organizations that meet the requirements can use the user object to: Add user access to account Remove user access from account Subscription: Organizations that meet the requirements and are on our original product pricing plan can use the subscription object to configure various subscription-related traits. Get started To start using the Partnership API, see the Partner API reference docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.95786,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to <em>Partnership</em> API",
        "sections": "Intro to <em>Partnership</em> API",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": ") and customer <em>partnerships</em> (larger customers who have been given access to our <em>partnership</em> <em>account</em> structure). These docs are for version 2 of the <em>Partner</em> API. Earlier versions have been deprecated. If you have problems with an older <em>integration</em>, upgrade to version 2. Access to the <em>partnership</em> <em>account</em>"
      },
      "id": "603ed42328ccbcd4b3eba7ca"
    },
    {
      "sections": [
        "Partner account access for administrators",
        "Guest level access",
        "Administrative level access"
      ],
      "title": "Partner account access for administrators",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "619eaa0ec75341c74c05afc0b888d2cc46d08767",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-account-access-administrators/",
      "published_at": "2021-05-22T15:32:32Z",
      "updated_at": "2021-03-16T10:08:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers the option for partner administrators to access their customers' accounts, subject to the contractual terms of the partnership agreement. These settings are controlled by a New Relic admin. For permissions for non-partner accounts, see Users and roles. Guest level access Guest level access allows administrators to view application data on their customers' accounts. This is particularly useful for troubleshooting customer issues related to performance. Administrative level access Administrative level access, in addition to viewing application data, allows partner administrators to modify the account and subscription terms, and add or remove users from an account. This access level is required for partners who will remotely administer customer accounts using the API or who enable Restricted access on their accounts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 186.88437,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>account</em> access for administrators",
        "sections": "<em>Partner</em> <em>account</em> access for administrators",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em> offers the option for <em>partner</em> administrators to access their customers&#x27; accounts, subject to the contractual terms of the <em>partnership</em> agreement. These settings are controlled by a <em>New</em> <em>Relic</em> admin. For permissions for non-<em>partner</em> accounts, see Users and roles. Guest level access Guest"
      },
      "id": "603ec86ee7b9d2756c2a07c7"
    },
    {
      "sections": [
        "Tips and tricks",
        "Account creation and deletion",
        "Partnership owner account"
      ],
      "title": "Tips and tricks",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ba123e58f5acafea5b65e09350eba65abf430b2e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/tips-tricks/",
      "published_at": "2021-05-22T15:36:05Z",
      "updated_at": "2021-03-13T03:11:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some tips and tricks for creating and deleting New Relic partner accounts. Account creation and deletion When you create an account through the New Relic Partner API, the system checks the string submitted as the account name to ensure it is unique. If it is not unique, the system will append a number to the submitted string to ensure uniqueness; for example, account-name_1. When an account is canceled, it is not deleted from the New Relic database. Rather, it is made inactive by removing all subscriptions from the account. If you attempt to reinstate an account by calling the Account Creation API using the same account name, the system will check for uniqueness, determine that the name is not unique and create a new account with an appended number. This is in most cases not what is desired. To avoid this problem, as part of account creation, store the numeric account_id with the account name. When re-creating an account, check for the existence of this ID. If detected, rather than using the Account Creation API, use the Change Subscription API to add a new subscription to the account. Adding an active subscription to the account will re-activate the account. Partnership owner account The Partnership Owner Account is not part of the partnership. It owns the partnership. Attempts to treat it as if it were in the partnership will fail. This includes but is not limited to: Attempting to SSO into the partnership owner account using the partnership shared secret Expecting the partnership pricing to apply to the partnership owner account",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 185.90288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Partnership</em> owner <em>account</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Here are some tips and tricks for creating and deleting <em>New</em> <em>Relic</em> <em>partner</em> accounts. <em>Account</em> creation and deletion When you create an <em>account</em> through the <em>New</em> <em>Relic</em> <em>Partner</em> API, the system checks the string submitted as the <em>account</em> name to ensure it is unique. If it is not unique, the system"
      },
      "id": "60441785196a676aed960f46"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/restricted-access-partnerships": [
    {
      "sections": [
        "Intro to Partnership API",
        "Requirements",
        "Customer partnership restrictions",
        "Password requirements",
        "Things you can do",
        "Get started"
      ],
      "title": "Intro to Partnership API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "074cf4e7c590dfa2332284a7b7f394e2f7ba45ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-api/",
      "published_at": "2021-05-22T15:33:08Z",
      "updated_at": "2021-03-29T20:10:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Partnership API allows New Relic partners, and New Relic accounts set up as customer partnerships, to manage accounts, users, and subscription-related settings. Requirements The Partnership API can be used by two types of New Relic accounts: partners (managed service providers, resellers) and customer partnerships (larger customers who have been given access to our partnership account structure). These docs are for version 2 of the Partner API. Earlier versions have been deprecated. If you have problems with an older integration, upgrade to version 2. Access to the partnership account structure and the Partnership API requires prior setup and approval by New Relic. Partnership API calls require authentication with both your partnership owner account's REST API key and your Partner ID. Accounts that are genuine New Relic partners (managed service providers, resellers) have no restrictions on using the API. Accounts set up as customer partnerships have restrictions that follow. Customer partnership restrictions If your New Relic organization is set up as a customer partnership, there are some restrictions in place if your organization is on our newer pricing plan or our newer account/user model. Details: Pricing plan. If youâre on New Relic One pricing, you can't use API calls that govern our original pricing plan. The API impacts are: You can't use the subscription object You can't use the NerdGraph Provisioning API. User model. If your New Relic account has been converted to be entirely on the New Relic One account/user model, you can no longer use API calls that create or govern users on our original user model. The API impacts are: You can't use the user object. Instead, you'd manage users with these user management docs. For the account object: you can't add users via the users field. Instead, you'd manage users with these user management docs. To determine your pricing plan or account/user model, see Overview of pricing and user model changes. Password requirements Passwords passed for account creation have these requirements: 8 to 50 characters in length Only contain letters, numbers, or special characters Cannot contain spaces Must contain at least 1 letter Must contain at least 1 number or special character Things you can do Here is an overview of the API's functionality. Account: The account object is what you use to create and update accounts. You can do the following with it: Create new Show Update Cancel Show usage Set primary admin (some accounts) Set subscription (some accounts) There is also a sub-account object for creating sub-accounts. Users: Some organizations that meet the requirements can use the user object to: Add user access to account Remove user access from account Subscription: Organizations that meet the requirements and are on our original product pricing plan can use the subscription object to configure various subscription-related traits. Get started To start using the Partnership API, see the Partner API reference docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.95786,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to <em>Partnership</em> API",
        "sections": "Intro to <em>Partnership</em> API",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": ") and customer <em>partnerships</em> (larger customers who have been given access to our <em>partnership</em> <em>account</em> structure). These docs are for version 2 of the <em>Partner</em> API. Earlier versions have been deprecated. If you have problems with an older <em>integration</em>, upgrade to version 2. Access to the <em>partnership</em> <em>account</em>"
      },
      "id": "603ed42328ccbcd4b3eba7ca"
    },
    {
      "sections": [
        "Partnership accounts, users, and subscriptions",
        "Partnerships with New Relic",
        "Account hierarchy",
        "Tip",
        "Partnership owner accounts (POA)",
        "Sub-accounts with partnerships",
        "Account users",
        "Partnership pricing"
      ],
      "title": "Partnership accounts, users, and subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ae2f39a8ff0395815b3e31a9d8ad9361beca2c4e",
      "image": "https://docs.newrelic.com/static/acecf0ec89c448506faef0e4eeff87e6/db3a5/partnership-hierarchy.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partnership-accounts-users-subscriptions/",
      "published_at": "2021-05-22T15:35:19Z",
      "updated_at": "2021-03-29T16:17:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic organizations set up as partnership accounts have access to an enhanced hierarchical way of organizing their account structure. Partnerships with New Relic There are two types of New Relic organizations that are able to use our partnership account structure and the Partnership API: An actual partnership: A partnership refers to managed service providers or resellers, who offer New Relic products to their customers. Heroku is one example of such a New Relic partner. A customer partnership: some of our larger organizations also make use of our partnership account structure. We call these customers \"customer partnerships.\" Use of our partnership account structure requires prior approval and set up by New Relic representatives. For customer partnerships, New Relic contacts organizations that would benefit from such a structure. Partnerships are identified by a numeric PARTNER_ID. In some cases, a New Relic customer may have more than one partnership; for example, when one section of New Relic users must be managed differently from another. Partnerships are administered by a partnership owner account. The account that owns a partnership functions differently from a regular account. If multiple partnerships have been set up, each has a unique PARTNER_ID. Account hierarchy New Relic partnership organizations consist of the partnership owning account, partnerships, master accounts, and sub-accounts. A partnership can have multiple master accounts and sub-accounts. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you do not have a partnership organization, you can only have one master account. For more information, see Manage apps or users with sub-accounts. All master accounts and sub-accounts roll up to your partnership account. Partnership owner accounts (POA) The partnership owner account (POA) is the entity that is used to administer a partnership. It controls which users manage accounts under partnerships, have access to the partner API, and manage other aspects of the partnership. Do not monitor your own applications from the partnership owner account. Instead, create an account within the partnership and monitor apps from that account. Users on the partnership owner account can access accounts under their partnerships and enjoy User level privileges. Admins on the POA can access accounts under their partnerships and enjoy Admin level privileges, including permission to manage users. The Owner of the partnership owner account will still only have Admin level access on accounts under the partnership. That means that the owner cannot enable SAML SSO, change the account owner, cancel the account via the UI, etc. The partnership owner account enjoys special privileges, and it lets you exercise the capabilities defined in your partnership agreement with New Relic. For example, you may use your partnership owner account with the New Relic Partnership API to set up and manage users on your accounts or to view your customers' performance data in the New Relic UI. Tip Many of the Partnership API calls return an account status as part of the XML. Sub-accounts with partnerships Sub-accounts behave differently than other New Relic accounts provisioned through your partnership: Sub-accounts Comments Account creation Sub-accounts can be created through the Partnership API or New Relic user interface. In order to group accounts through the New Relic user interface, your partnership must have Admin privileges, and the account must have the appropriate subscription level. If you have any questions about partnership privileges or subscription levels, contact your New Relic account representative. Sub-accounts do not have a New Relic subscription of their own. They inherit the master account's subscription. Billing Billing is applied at the master account level. Exception: Reseller partnerships receive consolidated billing for all accounts under the partnership. Permissions Admin-level users on a master account have the ability to create, modify, and delete sub-accounts for the master account. Users that have been granted access permissions on a master account automatically inherit the same level of access for all sub-accounts. This is also true for add-on roles. Exception: Sub-account users will not receive alert emails or weekly report emails unless they are explicitly granted permission on these sub-accounts. Account users You can use the Partnership user API to add and maintain your customer users. An account must always have at least one person (the Owner) associated with it. For security purposes, you cannot change an account Owner with the Partnership user API. Instead, you must change the account Owner from the Users page in the New Relic UI. In addition, a specific user may be associated with multiple accounts. For example, many New Relic users have accounts through a partnership, and they also have accounts they created directly with New Relic. Partnership pricing Accounts within a partnership organization may have different levels of access to New Relic products. Tip Many of the Partnership API calls return a subscription status as part of the XML. For accounts set up through a partnership: An account can have multiple New Relic products associated with it. However, only one subscription per product may be active at any time. For example, a user may have both an Essentials subscription and a higher service level Pro Trial subscription. When the Pro Trial subscription expires, the service level returns to the Essentials subscription. Promotions may appear as a subscription change. Several factors affect starting and stopping subscriptions, including how New Relic handles pricing and billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.8838,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>accounts</em>, users, and subscriptions",
        "sections": "<em>Partnerships</em> with <em>New</em> <em>Relic</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " these customers &quot;customer <em>partnerships</em>.&quot; Use of our <em>partnership</em> <em>account</em> structure requires prior approval and set up by <em>New</em> <em>Relic</em> representatives. For customer <em>partnerships</em>, <em>New</em> <em>Relic</em> contacts organizations that would benefit from such a structure. <em>Partnerships</em> are identified by a numeric <em>PARTNER</em>"
      },
      "id": "603ece55e7b9d273782a0804"
    },
    {
      "sections": [
        "Partner account access for administrators",
        "Guest level access",
        "Administrative level access"
      ],
      "title": "Partner account access for administrators",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "619eaa0ec75341c74c05afc0b888d2cc46d08767",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-account-access-administrators/",
      "published_at": "2021-05-22T15:32:32Z",
      "updated_at": "2021-03-16T10:08:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers the option for partner administrators to access their customers' accounts, subject to the contractual terms of the partnership agreement. These settings are controlled by a New Relic admin. For permissions for non-partner accounts, see Users and roles. Guest level access Guest level access allows administrators to view application data on their customers' accounts. This is particularly useful for troubleshooting customer issues related to performance. Administrative level access Administrative level access, in addition to viewing application data, allows partner administrators to modify the account and subscription terms, and add or remove users from an account. This access level is required for partners who will remotely administer customer accounts using the API or who enable Restricted access on their accounts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 186.88437,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>account</em> access for administrators",
        "sections": "<em>Partner</em> <em>account</em> access for administrators",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em> offers the option for <em>partner</em> administrators to access their customers&#x27; accounts, subject to the contractual terms of the <em>partnership</em> agreement. These settings are controlled by a <em>New</em> <em>Relic</em> admin. For permissions for non-<em>partner</em> accounts, see Users and roles. Guest level access Guest"
      },
      "id": "603ec86ee7b9d2756c2a07c7"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/staging-production": [
    {
      "sections": [
        "Intro to Partnership API",
        "Requirements",
        "Customer partnership restrictions",
        "Password requirements",
        "Things you can do",
        "Get started"
      ],
      "title": "Intro to Partnership API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "074cf4e7c590dfa2332284a7b7f394e2f7ba45ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-api/",
      "published_at": "2021-05-22T15:33:08Z",
      "updated_at": "2021-03-29T20:10:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Partnership API allows New Relic partners, and New Relic accounts set up as customer partnerships, to manage accounts, users, and subscription-related settings. Requirements The Partnership API can be used by two types of New Relic accounts: partners (managed service providers, resellers) and customer partnerships (larger customers who have been given access to our partnership account structure). These docs are for version 2 of the Partner API. Earlier versions have been deprecated. If you have problems with an older integration, upgrade to version 2. Access to the partnership account structure and the Partnership API requires prior setup and approval by New Relic. Partnership API calls require authentication with both your partnership owner account's REST API key and your Partner ID. Accounts that are genuine New Relic partners (managed service providers, resellers) have no restrictions on using the API. Accounts set up as customer partnerships have restrictions that follow. Customer partnership restrictions If your New Relic organization is set up as a customer partnership, there are some restrictions in place if your organization is on our newer pricing plan or our newer account/user model. Details: Pricing plan. If youâre on New Relic One pricing, you can't use API calls that govern our original pricing plan. The API impacts are: You can't use the subscription object You can't use the NerdGraph Provisioning API. User model. If your New Relic account has been converted to be entirely on the New Relic One account/user model, you can no longer use API calls that create or govern users on our original user model. The API impacts are: You can't use the user object. Instead, you'd manage users with these user management docs. For the account object: you can't add users via the users field. Instead, you'd manage users with these user management docs. To determine your pricing plan or account/user model, see Overview of pricing and user model changes. Password requirements Passwords passed for account creation have these requirements: 8 to 50 characters in length Only contain letters, numbers, or special characters Cannot contain spaces Must contain at least 1 letter Must contain at least 1 number or special character Things you can do Here is an overview of the API's functionality. Account: The account object is what you use to create and update accounts. You can do the following with it: Create new Show Update Cancel Show usage Set primary admin (some accounts) Set subscription (some accounts) There is also a sub-account object for creating sub-accounts. Users: Some organizations that meet the requirements can use the user object to: Add user access to account Remove user access from account Subscription: Organizations that meet the requirements and are on our original product pricing plan can use the subscription object to configure various subscription-related traits. Get started To start using the Partnership API, see the Partner API reference docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.95786,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to <em>Partnership</em> API",
        "sections": "Intro to <em>Partnership</em> API",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": ") and customer <em>partnerships</em> (larger customers who have been given access to our <em>partnership</em> <em>account</em> structure). These docs are for version 2 of the <em>Partner</em> API. Earlier versions have been deprecated. If you have problems with an older <em>integration</em>, upgrade to version 2. Access to the <em>partnership</em> <em>account</em>"
      },
      "id": "603ed42328ccbcd4b3eba7ca"
    },
    {
      "sections": [
        "Partnership accounts, users, and subscriptions",
        "Partnerships with New Relic",
        "Account hierarchy",
        "Tip",
        "Partnership owner accounts (POA)",
        "Sub-accounts with partnerships",
        "Account users",
        "Partnership pricing"
      ],
      "title": "Partnership accounts, users, and subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ae2f39a8ff0395815b3e31a9d8ad9361beca2c4e",
      "image": "https://docs.newrelic.com/static/acecf0ec89c448506faef0e4eeff87e6/db3a5/partnership-hierarchy.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partnership-accounts-users-subscriptions/",
      "published_at": "2021-05-22T15:35:19Z",
      "updated_at": "2021-03-29T16:17:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic organizations set up as partnership accounts have access to an enhanced hierarchical way of organizing their account structure. Partnerships with New Relic There are two types of New Relic organizations that are able to use our partnership account structure and the Partnership API: An actual partnership: A partnership refers to managed service providers or resellers, who offer New Relic products to their customers. Heroku is one example of such a New Relic partner. A customer partnership: some of our larger organizations also make use of our partnership account structure. We call these customers \"customer partnerships.\" Use of our partnership account structure requires prior approval and set up by New Relic representatives. For customer partnerships, New Relic contacts organizations that would benefit from such a structure. Partnerships are identified by a numeric PARTNER_ID. In some cases, a New Relic customer may have more than one partnership; for example, when one section of New Relic users must be managed differently from another. Partnerships are administered by a partnership owner account. The account that owns a partnership functions differently from a regular account. If multiple partnerships have been set up, each has a unique PARTNER_ID. Account hierarchy New Relic partnership organizations consist of the partnership owning account, partnerships, master accounts, and sub-accounts. A partnership can have multiple master accounts and sub-accounts. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you do not have a partnership organization, you can only have one master account. For more information, see Manage apps or users with sub-accounts. All master accounts and sub-accounts roll up to your partnership account. Partnership owner accounts (POA) The partnership owner account (POA) is the entity that is used to administer a partnership. It controls which users manage accounts under partnerships, have access to the partner API, and manage other aspects of the partnership. Do not monitor your own applications from the partnership owner account. Instead, create an account within the partnership and monitor apps from that account. Users on the partnership owner account can access accounts under their partnerships and enjoy User level privileges. Admins on the POA can access accounts under their partnerships and enjoy Admin level privileges, including permission to manage users. The Owner of the partnership owner account will still only have Admin level access on accounts under the partnership. That means that the owner cannot enable SAML SSO, change the account owner, cancel the account via the UI, etc. The partnership owner account enjoys special privileges, and it lets you exercise the capabilities defined in your partnership agreement with New Relic. For example, you may use your partnership owner account with the New Relic Partnership API to set up and manage users on your accounts or to view your customers' performance data in the New Relic UI. Tip Many of the Partnership API calls return an account status as part of the XML. Sub-accounts with partnerships Sub-accounts behave differently than other New Relic accounts provisioned through your partnership: Sub-accounts Comments Account creation Sub-accounts can be created through the Partnership API or New Relic user interface. In order to group accounts through the New Relic user interface, your partnership must have Admin privileges, and the account must have the appropriate subscription level. If you have any questions about partnership privileges or subscription levels, contact your New Relic account representative. Sub-accounts do not have a New Relic subscription of their own. They inherit the master account's subscription. Billing Billing is applied at the master account level. Exception: Reseller partnerships receive consolidated billing for all accounts under the partnership. Permissions Admin-level users on a master account have the ability to create, modify, and delete sub-accounts for the master account. Users that have been granted access permissions on a master account automatically inherit the same level of access for all sub-accounts. This is also true for add-on roles. Exception: Sub-account users will not receive alert emails or weekly report emails unless they are explicitly granted permission on these sub-accounts. Account users You can use the Partnership user API to add and maintain your customer users. An account must always have at least one person (the Owner) associated with it. For security purposes, you cannot change an account Owner with the Partnership user API. Instead, you must change the account Owner from the Users page in the New Relic UI. In addition, a specific user may be associated with multiple accounts. For example, many New Relic users have accounts through a partnership, and they also have accounts they created directly with New Relic. Partnership pricing Accounts within a partnership organization may have different levels of access to New Relic products. Tip Many of the Partnership API calls return a subscription status as part of the XML. For accounts set up through a partnership: An account can have multiple New Relic products associated with it. However, only one subscription per product may be active at any time. For example, a user may have both an Essentials subscription and a higher service level Pro Trial subscription. When the Pro Trial subscription expires, the service level returns to the Essentials subscription. Promotions may appear as a subscription change. Several factors affect starting and stopping subscriptions, including how New Relic handles pricing and billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.88379,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>accounts</em>, users, and subscriptions",
        "sections": "<em>Partnerships</em> with <em>New</em> <em>Relic</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " these customers &quot;customer <em>partnerships</em>.&quot; Use of our <em>partnership</em> <em>account</em> structure requires prior approval and set up by <em>New</em> <em>Relic</em> representatives. For customer <em>partnerships</em>, <em>New</em> <em>Relic</em> contacts organizations that would benefit from such a structure. <em>Partnerships</em> are identified by a numeric <em>PARTNER</em>"
      },
      "id": "603ece55e7b9d273782a0804"
    },
    {
      "sections": [
        "Partner account access for administrators",
        "Guest level access",
        "Administrative level access"
      ],
      "title": "Partner account access for administrators",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "619eaa0ec75341c74c05afc0b888d2cc46d08767",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-account-access-administrators/",
      "published_at": "2021-05-22T15:32:32Z",
      "updated_at": "2021-03-16T10:08:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers the option for partner administrators to access their customers' accounts, subject to the contractual terms of the partnership agreement. These settings are controlled by a New Relic admin. For permissions for non-partner accounts, see Users and roles. Guest level access Guest level access allows administrators to view application data on their customers' accounts. This is particularly useful for troubleshooting customer issues related to performance. Administrative level access Administrative level access, in addition to viewing application data, allows partner administrators to modify the account and subscription terms, and add or remove users from an account. This access level is required for partners who will remotely administer customer accounts using the API or who enable Restricted access on their accounts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 186.88437,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>account</em> access for administrators",
        "sections": "<em>Partner</em> <em>account</em> access for administrators",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em> offers the option for <em>partner</em> administrators to access their customers&#x27; accounts, subject to the contractual terms of the <em>partnership</em> agreement. These settings are controlled by a <em>New</em> <em>Relic</em> admin. For permissions for non-<em>partner</em> accounts, see Users and roles. Guest level access Guest"
      },
      "id": "603ec86ee7b9d2756c2a07c7"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/tips-tricks": [
    {
      "sections": [
        "Intro to Partnership API",
        "Requirements",
        "Customer partnership restrictions",
        "Password requirements",
        "Things you can do",
        "Get started"
      ],
      "title": "Intro to Partnership API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "074cf4e7c590dfa2332284a7b7f394e2f7ba45ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-api/",
      "published_at": "2021-05-22T15:33:08Z",
      "updated_at": "2021-03-29T20:10:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Partnership API allows New Relic partners, and New Relic accounts set up as customer partnerships, to manage accounts, users, and subscription-related settings. Requirements The Partnership API can be used by two types of New Relic accounts: partners (managed service providers, resellers) and customer partnerships (larger customers who have been given access to our partnership account structure). These docs are for version 2 of the Partner API. Earlier versions have been deprecated. If you have problems with an older integration, upgrade to version 2. Access to the partnership account structure and the Partnership API requires prior setup and approval by New Relic. Partnership API calls require authentication with both your partnership owner account's REST API key and your Partner ID. Accounts that are genuine New Relic partners (managed service providers, resellers) have no restrictions on using the API. Accounts set up as customer partnerships have restrictions that follow. Customer partnership restrictions If your New Relic organization is set up as a customer partnership, there are some restrictions in place if your organization is on our newer pricing plan or our newer account/user model. Details: Pricing plan. If youâre on New Relic One pricing, you can't use API calls that govern our original pricing plan. The API impacts are: You can't use the subscription object You can't use the NerdGraph Provisioning API. User model. If your New Relic account has been converted to be entirely on the New Relic One account/user model, you can no longer use API calls that create or govern users on our original user model. The API impacts are: You can't use the user object. Instead, you'd manage users with these user management docs. For the account object: you can't add users via the users field. Instead, you'd manage users with these user management docs. To determine your pricing plan or account/user model, see Overview of pricing and user model changes. Password requirements Passwords passed for account creation have these requirements: 8 to 50 characters in length Only contain letters, numbers, or special characters Cannot contain spaces Must contain at least 1 letter Must contain at least 1 number or special character Things you can do Here is an overview of the API's functionality. Account: The account object is what you use to create and update accounts. You can do the following with it: Create new Show Update Cancel Show usage Set primary admin (some accounts) Set subscription (some accounts) There is also a sub-account object for creating sub-accounts. Users: Some organizations that meet the requirements can use the user object to: Add user access to account Remove user access from account Subscription: Organizations that meet the requirements and are on our original product pricing plan can use the subscription object to configure various subscription-related traits. Get started To start using the Partnership API, see the Partner API reference docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.95786,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to <em>Partnership</em> API",
        "sections": "Intro to <em>Partnership</em> API",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": ") and customer <em>partnerships</em> (larger customers who have been given access to our <em>partnership</em> <em>account</em> structure). These docs are for version 2 of the <em>Partner</em> API. Earlier versions have been deprecated. If you have problems with an older <em>integration</em>, upgrade to version 2. Access to the <em>partnership</em> <em>account</em>"
      },
      "id": "603ed42328ccbcd4b3eba7ca"
    },
    {
      "sections": [
        "Partnership accounts, users, and subscriptions",
        "Partnerships with New Relic",
        "Account hierarchy",
        "Tip",
        "Partnership owner accounts (POA)",
        "Sub-accounts with partnerships",
        "Account users",
        "Partnership pricing"
      ],
      "title": "Partnership accounts, users, and subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ae2f39a8ff0395815b3e31a9d8ad9361beca2c4e",
      "image": "https://docs.newrelic.com/static/acecf0ec89c448506faef0e4eeff87e6/db3a5/partnership-hierarchy.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partnership-accounts-users-subscriptions/",
      "published_at": "2021-05-22T15:35:19Z",
      "updated_at": "2021-03-29T16:17:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic organizations set up as partnership accounts have access to an enhanced hierarchical way of organizing their account structure. Partnerships with New Relic There are two types of New Relic organizations that are able to use our partnership account structure and the Partnership API: An actual partnership: A partnership refers to managed service providers or resellers, who offer New Relic products to their customers. Heroku is one example of such a New Relic partner. A customer partnership: some of our larger organizations also make use of our partnership account structure. We call these customers \"customer partnerships.\" Use of our partnership account structure requires prior approval and set up by New Relic representatives. For customer partnerships, New Relic contacts organizations that would benefit from such a structure. Partnerships are identified by a numeric PARTNER_ID. In some cases, a New Relic customer may have more than one partnership; for example, when one section of New Relic users must be managed differently from another. Partnerships are administered by a partnership owner account. The account that owns a partnership functions differently from a regular account. If multiple partnerships have been set up, each has a unique PARTNER_ID. Account hierarchy New Relic partnership organizations consist of the partnership owning account, partnerships, master accounts, and sub-accounts. A partnership can have multiple master accounts and sub-accounts. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you do not have a partnership organization, you can only have one master account. For more information, see Manage apps or users with sub-accounts. All master accounts and sub-accounts roll up to your partnership account. Partnership owner accounts (POA) The partnership owner account (POA) is the entity that is used to administer a partnership. It controls which users manage accounts under partnerships, have access to the partner API, and manage other aspects of the partnership. Do not monitor your own applications from the partnership owner account. Instead, create an account within the partnership and monitor apps from that account. Users on the partnership owner account can access accounts under their partnerships and enjoy User level privileges. Admins on the POA can access accounts under their partnerships and enjoy Admin level privileges, including permission to manage users. The Owner of the partnership owner account will still only have Admin level access on accounts under the partnership. That means that the owner cannot enable SAML SSO, change the account owner, cancel the account via the UI, etc. The partnership owner account enjoys special privileges, and it lets you exercise the capabilities defined in your partnership agreement with New Relic. For example, you may use your partnership owner account with the New Relic Partnership API to set up and manage users on your accounts or to view your customers' performance data in the New Relic UI. Tip Many of the Partnership API calls return an account status as part of the XML. Sub-accounts with partnerships Sub-accounts behave differently than other New Relic accounts provisioned through your partnership: Sub-accounts Comments Account creation Sub-accounts can be created through the Partnership API or New Relic user interface. In order to group accounts through the New Relic user interface, your partnership must have Admin privileges, and the account must have the appropriate subscription level. If you have any questions about partnership privileges or subscription levels, contact your New Relic account representative. Sub-accounts do not have a New Relic subscription of their own. They inherit the master account's subscription. Billing Billing is applied at the master account level. Exception: Reseller partnerships receive consolidated billing for all accounts under the partnership. Permissions Admin-level users on a master account have the ability to create, modify, and delete sub-accounts for the master account. Users that have been granted access permissions on a master account automatically inherit the same level of access for all sub-accounts. This is also true for add-on roles. Exception: Sub-account users will not receive alert emails or weekly report emails unless they are explicitly granted permission on these sub-accounts. Account users You can use the Partnership user API to add and maintain your customer users. An account must always have at least one person (the Owner) associated with it. For security purposes, you cannot change an account Owner with the Partnership user API. Instead, you must change the account Owner from the Users page in the New Relic UI. In addition, a specific user may be associated with multiple accounts. For example, many New Relic users have accounts through a partnership, and they also have accounts they created directly with New Relic. Partnership pricing Accounts within a partnership organization may have different levels of access to New Relic products. Tip Many of the Partnership API calls return a subscription status as part of the XML. For accounts set up through a partnership: An account can have multiple New Relic products associated with it. However, only one subscription per product may be active at any time. For example, a user may have both an Essentials subscription and a higher service level Pro Trial subscription. When the Pro Trial subscription expires, the service level returns to the Essentials subscription. Promotions may appear as a subscription change. Several factors affect starting and stopping subscriptions, including how New Relic handles pricing and billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.88379,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>accounts</em>, users, and subscriptions",
        "sections": "<em>Partnerships</em> with <em>New</em> <em>Relic</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " these customers &quot;customer <em>partnerships</em>.&quot; Use of our <em>partnership</em> <em>account</em> structure requires prior approval and set up by <em>New</em> <em>Relic</em> representatives. For customer <em>partnerships</em>, <em>New</em> <em>Relic</em> contacts organizations that would benefit from such a structure. <em>Partnerships</em> are identified by a numeric <em>PARTNER</em>"
      },
      "id": "603ece55e7b9d273782a0804"
    },
    {
      "sections": [
        "Partner account access for administrators",
        "Guest level access",
        "Administrative level access"
      ],
      "title": "Partner account access for administrators",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "619eaa0ec75341c74c05afc0b888d2cc46d08767",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-account-access-administrators/",
      "published_at": "2021-05-22T15:32:32Z",
      "updated_at": "2021-03-16T10:08:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers the option for partner administrators to access their customers' accounts, subject to the contractual terms of the partnership agreement. These settings are controlled by a New Relic admin. For permissions for non-partner accounts, see Users and roles. Guest level access Guest level access allows administrators to view application data on their customers' accounts. This is particularly useful for troubleshooting customer issues related to performance. Administrative level access Administrative level access, in addition to viewing application data, allows partner administrators to modify the account and subscription terms, and add or remove users from an account. This access level is required for partners who will remotely administer customer accounts using the API or who enable Restricted access on their accounts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 186.88437,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>account</em> access for administrators",
        "sections": "<em>Partner</em> <em>account</em> access for administrators",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em> offers the option for <em>partner</em> administrators to access their customers&#x27; accounts, subject to the contractual terms of the <em>partnership</em> agreement. These settings are controlled by a <em>New</em> <em>Relic</em> admin. For permissions for non-<em>partner</em> accounts, see Users and roles. Guest level access Guest"
      },
      "id": "603ec86ee7b9d2756c2a07c7"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/welcome-messages-partnerships": [
    {
      "sections": [
        "Intro to Partnership API",
        "Requirements",
        "Customer partnership restrictions",
        "Password requirements",
        "Things you can do",
        "Get started"
      ],
      "title": "Intro to Partnership API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "074cf4e7c590dfa2332284a7b7f394e2f7ba45ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-api/",
      "published_at": "2021-05-22T15:33:08Z",
      "updated_at": "2021-03-29T20:10:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Partnership API allows New Relic partners, and New Relic accounts set up as customer partnerships, to manage accounts, users, and subscription-related settings. Requirements The Partnership API can be used by two types of New Relic accounts: partners (managed service providers, resellers) and customer partnerships (larger customers who have been given access to our partnership account structure). These docs are for version 2 of the Partner API. Earlier versions have been deprecated. If you have problems with an older integration, upgrade to version 2. Access to the partnership account structure and the Partnership API requires prior setup and approval by New Relic. Partnership API calls require authentication with both your partnership owner account's REST API key and your Partner ID. Accounts that are genuine New Relic partners (managed service providers, resellers) have no restrictions on using the API. Accounts set up as customer partnerships have restrictions that follow. Customer partnership restrictions If your New Relic organization is set up as a customer partnership, there are some restrictions in place if your organization is on our newer pricing plan or our newer account/user model. Details: Pricing plan. If youâre on New Relic One pricing, you can't use API calls that govern our original pricing plan. The API impacts are: You can't use the subscription object You can't use the NerdGraph Provisioning API. User model. If your New Relic account has been converted to be entirely on the New Relic One account/user model, you can no longer use API calls that create or govern users on our original user model. The API impacts are: You can't use the user object. Instead, you'd manage users with these user management docs. For the account object: you can't add users via the users field. Instead, you'd manage users with these user management docs. To determine your pricing plan or account/user model, see Overview of pricing and user model changes. Password requirements Passwords passed for account creation have these requirements: 8 to 50 characters in length Only contain letters, numbers, or special characters Cannot contain spaces Must contain at least 1 letter Must contain at least 1 number or special character Things you can do Here is an overview of the API's functionality. Account: The account object is what you use to create and update accounts. You can do the following with it: Create new Show Update Cancel Show usage Set primary admin (some accounts) Set subscription (some accounts) There is also a sub-account object for creating sub-accounts. Users: Some organizations that meet the requirements can use the user object to: Add user access to account Remove user access from account Subscription: Organizations that meet the requirements and are on our original product pricing plan can use the subscription object to configure various subscription-related traits. Get started To start using the Partnership API, see the Partner API reference docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.95784,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to <em>Partnership</em> API",
        "sections": "Intro to <em>Partnership</em> API",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": ") and customer <em>partnerships</em> (larger customers who have been given access to our <em>partnership</em> <em>account</em> structure). These docs are for version 2 of the <em>Partner</em> API. Earlier versions have been deprecated. If you have problems with an older <em>integration</em>, upgrade to version 2. Access to the <em>partnership</em> <em>account</em>"
      },
      "id": "603ed42328ccbcd4b3eba7ca"
    },
    {
      "sections": [
        "Partnership accounts, users, and subscriptions",
        "Partnerships with New Relic",
        "Account hierarchy",
        "Tip",
        "Partnership owner accounts (POA)",
        "Sub-accounts with partnerships",
        "Account users",
        "Partnership pricing"
      ],
      "title": "Partnership accounts, users, and subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ae2f39a8ff0395815b3e31a9d8ad9361beca2c4e",
      "image": "https://docs.newrelic.com/static/acecf0ec89c448506faef0e4eeff87e6/db3a5/partnership-hierarchy.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partnership-accounts-users-subscriptions/",
      "published_at": "2021-05-22T15:35:19Z",
      "updated_at": "2021-03-29T16:17:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic organizations set up as partnership accounts have access to an enhanced hierarchical way of organizing their account structure. Partnerships with New Relic There are two types of New Relic organizations that are able to use our partnership account structure and the Partnership API: An actual partnership: A partnership refers to managed service providers or resellers, who offer New Relic products to their customers. Heroku is one example of such a New Relic partner. A customer partnership: some of our larger organizations also make use of our partnership account structure. We call these customers \"customer partnerships.\" Use of our partnership account structure requires prior approval and set up by New Relic representatives. For customer partnerships, New Relic contacts organizations that would benefit from such a structure. Partnerships are identified by a numeric PARTNER_ID. In some cases, a New Relic customer may have more than one partnership; for example, when one section of New Relic users must be managed differently from another. Partnerships are administered by a partnership owner account. The account that owns a partnership functions differently from a regular account. If multiple partnerships have been set up, each has a unique PARTNER_ID. Account hierarchy New Relic partnership organizations consist of the partnership owning account, partnerships, master accounts, and sub-accounts. A partnership can have multiple master accounts and sub-accounts. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you do not have a partnership organization, you can only have one master account. For more information, see Manage apps or users with sub-accounts. All master accounts and sub-accounts roll up to your partnership account. Partnership owner accounts (POA) The partnership owner account (POA) is the entity that is used to administer a partnership. It controls which users manage accounts under partnerships, have access to the partner API, and manage other aspects of the partnership. Do not monitor your own applications from the partnership owner account. Instead, create an account within the partnership and monitor apps from that account. Users on the partnership owner account can access accounts under their partnerships and enjoy User level privileges. Admins on the POA can access accounts under their partnerships and enjoy Admin level privileges, including permission to manage users. The Owner of the partnership owner account will still only have Admin level access on accounts under the partnership. That means that the owner cannot enable SAML SSO, change the account owner, cancel the account via the UI, etc. The partnership owner account enjoys special privileges, and it lets you exercise the capabilities defined in your partnership agreement with New Relic. For example, you may use your partnership owner account with the New Relic Partnership API to set up and manage users on your accounts or to view your customers' performance data in the New Relic UI. Tip Many of the Partnership API calls return an account status as part of the XML. Sub-accounts with partnerships Sub-accounts behave differently than other New Relic accounts provisioned through your partnership: Sub-accounts Comments Account creation Sub-accounts can be created through the Partnership API or New Relic user interface. In order to group accounts through the New Relic user interface, your partnership must have Admin privileges, and the account must have the appropriate subscription level. If you have any questions about partnership privileges or subscription levels, contact your New Relic account representative. Sub-accounts do not have a New Relic subscription of their own. They inherit the master account's subscription. Billing Billing is applied at the master account level. Exception: Reseller partnerships receive consolidated billing for all accounts under the partnership. Permissions Admin-level users on a master account have the ability to create, modify, and delete sub-accounts for the master account. Users that have been granted access permissions on a master account automatically inherit the same level of access for all sub-accounts. This is also true for add-on roles. Exception: Sub-account users will not receive alert emails or weekly report emails unless they are explicitly granted permission on these sub-accounts. Account users You can use the Partnership user API to add and maintain your customer users. An account must always have at least one person (the Owner) associated with it. For security purposes, you cannot change an account Owner with the Partnership user API. Instead, you must change the account Owner from the Users page in the New Relic UI. In addition, a specific user may be associated with multiple accounts. For example, many New Relic users have accounts through a partnership, and they also have accounts they created directly with New Relic. Partnership pricing Accounts within a partnership organization may have different levels of access to New Relic products. Tip Many of the Partnership API calls return a subscription status as part of the XML. For accounts set up through a partnership: An account can have multiple New Relic products associated with it. However, only one subscription per product may be active at any time. For example, a user may have both an Essentials subscription and a higher service level Pro Trial subscription. When the Pro Trial subscription expires, the service level returns to the Essentials subscription. Promotions may appear as a subscription change. Several factors affect starting and stopping subscriptions, including how New Relic handles pricing and billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.88379,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>accounts</em>, users, and subscriptions",
        "sections": "<em>Partnerships</em> with <em>New</em> <em>Relic</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " these customers &quot;customer <em>partnerships</em>.&quot; Use of our <em>partnership</em> <em>account</em> structure requires prior approval and set up by <em>New</em> <em>Relic</em> representatives. For customer <em>partnerships</em>, <em>New</em> <em>Relic</em> contacts organizations that would benefit from such a structure. <em>Partnerships</em> are identified by a numeric <em>PARTNER</em>"
      },
      "id": "603ece55e7b9d273782a0804"
    },
    {
      "sections": [
        "Partner account access for administrators",
        "Guest level access",
        "Administrative level access"
      ],
      "title": "Partner account access for administrators",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "619eaa0ec75341c74c05afc0b888d2cc46d08767",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-account-access-administrators/",
      "published_at": "2021-05-22T15:32:32Z",
      "updated_at": "2021-03-16T10:08:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers the option for partner administrators to access their customers' accounts, subject to the contractual terms of the partnership agreement. These settings are controlled by a New Relic admin. For permissions for non-partner accounts, see Users and roles. Guest level access Guest level access allows administrators to view application data on their customers' accounts. This is particularly useful for troubleshooting customer issues related to performance. Administrative level access Administrative level access, in addition to viewing application data, allows partner administrators to modify the account and subscription terms, and add or remove users from an account. This access level is required for partners who will remotely administer customer accounts using the API or who enable Restricted access on their accounts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 186.88435,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>account</em> access for administrators",
        "sections": "<em>Partner</em> <em>account</em> access for administrators",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em> offers the option for <em>partner</em> administrators to access their customers&#x27; accounts, subject to the contractual terms of the <em>partnership</em> agreement. These settings are controlled by a <em>New</em> <em>Relic</em> admin. For permissions for non-<em>partner</em> accounts, see Users and roles. Guest level access Guest"
      },
      "id": "603ec86ee7b9d2756c2a07c7"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/getting-started/partner-marketing": [
    {
      "sections": [
        "Partnership admin console",
        "Console components",
        "Partnership configuration settings",
        "Customer activity monitoring",
        "State-of-the-Partnership report",
        "Partner customer monitoring",
        "View an arbitrary customer",
        "Viewing detailed customer data"
      ],
      "title": "Partnership admin console",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "670e4d2e1db957100b23a7b8b0af6bf50cc8c996",
      "image": "https://docs.newrelic.com/static/43369c88523ebf526ae58fa5719d4efe/0abdd/crop-partnership-owner-account-settings.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partnership-admin-console/",
      "published_at": "2021-05-22T00:20:24Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Partnership Admin Console is the interface for managing your customers' accounts and integration with New Relic. To access the console, sign into the partnership owner account, and go to: https://partner-admin-console.newrelic.com/accounts/ACCOUNT_ID/admin_console/ Copy You can also access the console from the New Relic UI: Go to one.newrelic.com > (account dropdown) > Account settings. From the left menu bar, select Partnerships. one.newrelic.com > (account dropdown) > Account settings > Partnerships: Partnership owners can access the Partnership Admin Console from their account settings in the New Relic UI. Console components The Partnership Admin Console has two main components: Partnership configuration settings Customer activity monitoring If multiple partnerships are associated with the New Relic master account, the menu also includes an option to switch partnership accounts. Partnership configuration settings In developing your integration with New Relic, you must specify a number of settings. For your convenience these settings are grouped together in the partnership console, including URLs for header/footer and various redirects, SSO configuration, andÂ keys and the ability to manipulate them. Customer activity monitoring New Relic provides you with two tools for managing your customers: State-of-the-Partnership reports and live monitoring of all deployed New Relic agents in your partnership. Both of these tools provide insight into your customers who are using New Relic. They can be used to identify up-sale opportunities or to assist your support group in proactive support. State-of-the-Partnership report The State-of-the-Partnership report provides a summary of your customers with New Relic accounts and their activities. The report is broken down by language of the agents deployed, the agent version and the language version for each account. This report is run weekly for each partner. It is available on request from your New Relic Business Development contact. This report is an excellent way to see which of your customers with New Relic accounts are in fact using the service. Partner customer monitoring The Partner customer monitoring facility provides application performance data on the New Relic enabled applications that are running on your service. This facility allows you to easily identify customers experiencing performance problems. Where the performance problems are caused by under capacity, these customers are excellent sales opportunities. Alternatively your support or services organization will find this information useful in pre-emptively identifying customer issues or as good prospects for consulting services. View an arbitrary customer To view activity of a customer that does not appear in any of the filtered views: Go to one.newrelic.com > (account dropdown) > Switch accounts > Other accounts. New Relic will list all of the reporting accounts in the partnership. You can filter or search the list. Viewing detailed customer data Under normal circumstances a partner will be able to see only the summary level data in a customer's New Relic account. Through the Partnership Admin Console, partners will be permitted to drill down to the more detailed presentation. If you want to drill down from the Partnership Admin Console, add your user (typically support@partner.com or something similar) to the account. Typically this will be done at account creation. Avoid provisioning this user as the account Owner.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 192.52094,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> admin console",
        "sections": "<em>Partnership</em> admin console",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " the console from the <em>New</em> <em>Relic</em> UI: Go to one.newrelic.com &gt; (account dropdown) &gt; Account settings. From the left menu bar, select <em>Partnerships</em>. one.newrelic.com &gt; (account dropdown) &gt; Account settings &gt; <em>Partnerships</em>: <em>Partnership</em> owners can access the <em>Partnership</em> Admin Console from their account settings"
      },
      "id": "603ed3e3196a6735baa83dad"
    },
    {
      "sections": [
        "NerdGraph tutorial: Partner and reseller subscriptions",
        "Important",
        "Get started: endpoint and API key",
        "Product subscriptions for an account",
        "Tip",
        "Mapping for products (productId)",
        "APM",
        "Example Requests",
        "Mobile",
        "Example Request",
        "Insights",
        "Browser",
        "Synthetics",
        "Infrastructure",
        "Serverless for Lambda",
        "Traces",
        "Logs",
        "Metrics",
        "GraphQL Types",
        "Subscription",
        "Product",
        "Unit of measure",
        "Examples",
        "Create (replace existing) subscription with many products",
        "Create (replace existing) subscription with one product - Logs",
        "Variations from the Partnership API"
      ],
      "title": "NerdGraph tutorial: Partner and reseller subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Getting started"
      ],
      "external_id": "b5831e3798a6356482988d72fc3b5dc2d39c6aad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/provisions-your-subscriptions-nerdgraph/",
      "published_at": "2021-05-21T22:58:20Z",
      "updated_at": "2021-05-11T05:05:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The Provisioning API is only available for Partner accounts. The Provisioning NerdGraph API allows you, as a New Relic partner to create subscriptions for your accounts containing a more extensive range of New Relic products than the Partner API. The Provisioning API and Partnership API are compatible when it comes to the products supported by both (APM, Mobile, Insights, Browser, Synthetics, and Infrastructure). If you use the Provisioning API to create a subscription for any of the newer products, you will no longer be able to update the account using the Partnership API V2. The Provisioning API is a GraphQL mutation field named organizationProvisioningUpdatePartnerSubscription. To learn more about how to use this mutation, see Introduction to NerdGraph. Get started: endpoint and API key The provisioning API uses your user key. The endpoint for the Provisioning API is: https://api.newrelic.com/graphql Copy To get started, run the following command: curl -v -d'{\"query\": \"mutation { organizationProvisioningUpdatePartnerSubscription(accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [{id: 9200, name: \\\"Traces\\\", unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 40}]}]) {enqueued errors {message path } } }\"}' -H'Content-type: application/json' -H'Api-key: PERSONAL_API_KEY' https://api.newrelic.com/graphql Copy Product subscriptions for an account The Provisioning API does not allow you to upgrade or downgrade individual product subscriptions for an account. Instead, the API requires you to replace (add) the configuration for all product subscriptions for the account. Tip If any product configurations are not included, the Provisioning API automatically provisions the account with a free product (when available). Mapping for products (productId) With each account creation call, you must supply at least one New Relic product type. The mutation query only accepts the numeric productId for the type. APM The number of allowable hosts per account and the data retention period vary by subscription level within New Relic APMâs pricing structure. For example, New Relic APM allows an unlimited number of allowable hosts for Lite accounts, but only a 24-hour data retention period. In addition, pricing and data retention depend on whether you select pricing plans based on hosts or compute units (CU). Use the product IDâs integer format to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Lite 18 Not applicable Standard 41 HOSTS Standard Annual 38 HOSTS Pro (Host) 42 HOSTS Pro Annual (Host) 39 HOSTS Enterprise 43 HOSTS Enterprise Annual 40 HOSTS If you select pricing plans based on compute units (CU), use these product ID integer formats to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Pro CU 126 COMPUTE_UNIT Pro Annual CU 127 COMPUTE_UNIT APM Essentials CU 128 COMPUTE_UNIT APM Essentials Annual CU 129 COMPUTE_UNIT Example Requests APM Pro with 5 hosts mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: HOSTS, quantity: 5 } ] } ] ) { enqueued errors { message path } } } Copy APM Pro CU with 3000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 126, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Mobile New Relic Mobileâs pricing structure allows 100,000 monthly active users per account at the Enterprise subscription level. Data retention varies by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Lite 49 Not applicable Not applicable Enterprise 54 APPS USERS Enterprise Annual 55 APPS USERS Example Request Mobile Enterprise with 1 App and 100,000 Monthly Active user mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 54, unitsOfMeasure: [ { unit: APPS, quantity: 1 }, { unit: USERS, quantity: 100000 } ] } ] ) { enqueued errors { message path } } } Copy Insights New Relic Insights bases the pricing structure on the number of allowable events stored and the associated data retention policy. For example, data retention for Insights Free is one day. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Free 67 Not applicable Not applicable None 65 Not applicable Not applicable Pro 66 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Pro Annual 69 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Example Request Insights Pro with 7 days data retention and 25 million events mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 66, unitsOfMeasure: [ { unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, { unit: EVENTS_IN_MILLIONS, quantity: 25 } ] } ] ) { enqueued errors { message path } } } Copy Browser New Relic Browserâs pricing structure allows an unlimited number of app users, regardless of subscription level. However, the number of allowable page views per month and the data retention period vary by subscription level. For example: Lite accounts include an unlimited number of page views per month and 24-hour data retention. Pro account pricing starts at 500,000 page views per month and three months data retention. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Lite 76 Not applicable Pro 72 PAGE_VIEWS Pro Annual 73 PAGE_VIEWS Example Request Browser Pro with 500,000 page views mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: PAGE_VIEWS, quantity: 500000 } ] } ] ) { enqueued errors { message path } } } Copy Synthetics With New Relic Synthetics' pricing structure, the default number of allowable monitoring checks and the data retention period vary by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 Lite 81 Not applicable Pro 77 CHECKS Pro Annual 78 CHECKS Example Request Synthetics Pro with 10,000 checks mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 77, unitsOfMeasure: [ { unit: CHECKS, quantity: 10000 } ] } ] ) { enqueued errors { message path } } } Copy Infrastructure With New Relic Infrastructureâs pricing structure, the default number of instances and the data retention period vary by subscription level. Infrastructure events do not count against your New Relic Insights quota, even though you can query them in Insights. New Relic Infrastructure offers pricing plans based on Compute Units (CU) only. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Infrastructure None 142 Not applicable Infrastructure Pro (CU) 134 COMPUTE_UNIT Infrastructure Pro Annual (CU) 135 COMPUTE_UNIT Infrastructure Essentials (CU) 136 COMPUTE_UNIT Infrastructure Essentials Annual (CU) 137 COMPUTE_UNIT Example Request Infrastructure Pro with 5,000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 134, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 5000 } ] } ] ) { enqueued errors { message path } } } Copy Serverless for Lambda Subscription level products.id unitsOfMeasure.unit.1 Serverless Annual 9010 INGESTED_EVENTS Serverless Monthly 9000 INGESTED_EVENTS Example Request Serverless Monthly with 3,000 ingested events in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9000, unitsOfMeasure: [ { unit: INGESTED_EVENTS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Traces Subscription level products.id unitsOfMeasure.unit.1 Traces Annual 9200 SPANS_IN_MILLIONS Traces Monthly 9210 SPANS_IN_MILLIONS Example Request Traces Annual with 3,000 spans in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9200, unitsOfMeasure: [ { unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Logs Subscription level products.id unitsOfMeasure.unit.1 Logs Annual Commit - 8 Days 9110 GB_PER_DAY Logs Annual Commit - 15 Days 9111 GB_PER_DAY Logs Annual Commit - 30 Days 9112 GB_PER_DAY Logs Monthly Commit - 8 Days 9100 GB_PER_DAY Logs Monthly Commit - 15 Days 9101 GB_PER_DAY Logs Monthly Commit - 30 Days 9102 GB_PER_DAY Example Request Logs with 8 days data retention and 100 Gigabytes per day mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9100, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 } ] } ] ) { enqueued errors { message path } } } Copy Metrics Subscription level products.id unitsOfMeasure.unit.1 Metrics Annual Commit 9310 DPM Metrics Monthly Commit 9300 DPM Example Request Metrics Monthly Commitment with 50 Data Points Per Minute mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9300, unitsOfMeasure: [ { unit: DPM, quantity: 50 } ] } ] ) { enqueued errors { message path } } } Copy GraphQL Types The Provisioning API uses the following GraphQL types: Subscription Name Type Description account_id Integer Numeric ID of the partner account for the partnership to which the affected account belongs. affected_account_id Integer Numeric ID of the account to which the changes described in the products field will be applied. products Array of Product Collection of type Product representing the values that will compose the new Subscription for the Affected Account. Product Name Type Description Id Integer Numeric ID for the Product to be added to the Subscription. Name String Name of the Product to be added to the Subscription. Unit of Measure Array of Unit of Measure Collection of type Unit of Measure for this single product. Unit of measure Name Type Description quantity Integer Numeric value for the amount of units to be applied to the Subscription. unit String Name of the unit to be applied to the product (varies by product line). Examples Here are examples of an API call to create a subscription and the JSON response. Create (replace existing) subscription with many products mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9410, unitsOfMeasure: [{unit: INCIDENT_EVENTS, quantity: 50}] }, { id: 42, unitsOfMeasure: [{unit: HOSTS, quantity: 5 }] }, { id: 42, unitsOfMeasure: [{unit: PAGE_VIEWS, quantity: 500000}] }, { id: 134, unitsOfMeasure: [{unit: COMPUTE_UNIT, quantity: 5000}] }, { id: 66, unitsOfMeasure: [ {unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, {unit: EVENTS_IN_MILLIONS, quantity: 25 } ] }, { id: 9100, unitsOfMeasure: [{unit: GB_PER_DAY, quantity: 100 } ] }, { id: 9300, unitsOfMeasure: [{unit: DPM, quantity: 50 } ] }, { id: 54, unitsOfMeasure: [ {unit: APPS, quantity: 1 }, {unit: USERS, quantity: 100000 } ] }, { id: 9000, unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] }, { id: 77, unitsOfMeasure: [{unit: CHECKS, quantity: 10000 } ] }, { id: 9200, unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Create (replace existing) subscription with one product - Logs mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 9110, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 }, { unit: DATA_RETENTION_IN_DAYS, quantity: 8 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Response: Once the Provisioning API has received your request and has validated it is in the right format it will respond with a message like this. This does not mean that your message has been successfully processed or applied; but it has been validated to be in the right format and it enqueued for processing. { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Variations from the Partnership API These are some key differences between the Provisioning API and the Partner API that frequent Partner API users should know: Feature Description API keys The Provisioning API uses a Personal API key. The Partner API uses the Partnership API key. productId and product_id The product idâs used for the Provisioning API are different than the ones documented for the Partner API. Curl request format To make a curl request to the Provisioning API, the format will be different than the Partner API: The url endpoint is different The required api key is your personal API key Provisioning API responds only to HTTP POST requests Serverless INGESTED_EVENTS units are in millions sending unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] will be interpreted by the Provisioning API as 3,000 million events. Insights and Mobile require 2 units of measure Insights requires DATA_RETENTION_IN_DAYS and EVENTS_IN_MILLIONS Mobile requires APPS and USERS. Logs data retention unit of measure is determined by productID This is specified in the product name: Logs Annual Commit - 8 Days | product ID: 9110 Logs Annual Commit - 15 Days | product ID: 9111 Logs Annual Commit - 30 Days | product ID: 9112 Logs Monthly Commit - 8 Days | product ID: 9100 Logs Monthly Commit - 15 Days | product ID: 9101 Logs Monthly Commit - 30 Days | product ID: 9102",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.91943,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Get</em> <em>started</em>: endpoint and API key",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Important The Provisioning API is only available for Partner accounts. The Provisioning NerdGraph API allows you, as a <em>New</em> <em>Relic</em> partner to create subscriptions for your accounts containing a more extensive range of <em>New</em> <em>Relic</em> products than the Partner API. The Provisioning API and <em>Partnership</em> API"
      },
      "id": "6043ff97e7b9d25a6f5799c1"
    },
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-05-22T00:20:23Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.35965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> partners",
        "sections": "Support resources for <em>New</em> <em>Relic</em> partners",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>New</em> <em>Relic</em> products and features by category. Tip The Docs site includes a <em>Partnerships</em> category with information for <em>New</em> <em>Relic</em> partners and some <em>partnership</em> customers. Here are the five most commonly consulted articles on the <em>New</em> <em>Relic</em> Docs site. Providing easily found and direct links"
      },
      "id": "60450ecf28ccbc45632c6095"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/getting-started/using-partner-portal": [
    {
      "sections": [
        "Partnership admin console",
        "Console components",
        "Partnership configuration settings",
        "Customer activity monitoring",
        "State-of-the-Partnership report",
        "Partner customer monitoring",
        "View an arbitrary customer",
        "Viewing detailed customer data"
      ],
      "title": "Partnership admin console",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "670e4d2e1db957100b23a7b8b0af6bf50cc8c996",
      "image": "https://docs.newrelic.com/static/43369c88523ebf526ae58fa5719d4efe/0abdd/crop-partnership-owner-account-settings.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partnership-admin-console/",
      "published_at": "2021-05-22T00:20:24Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Partnership Admin Console is the interface for managing your customers' accounts and integration with New Relic. To access the console, sign into the partnership owner account, and go to: https://partner-admin-console.newrelic.com/accounts/ACCOUNT_ID/admin_console/ Copy You can also access the console from the New Relic UI: Go to one.newrelic.com > (account dropdown) > Account settings. From the left menu bar, select Partnerships. one.newrelic.com > (account dropdown) > Account settings > Partnerships: Partnership owners can access the Partnership Admin Console from their account settings in the New Relic UI. Console components The Partnership Admin Console has two main components: Partnership configuration settings Customer activity monitoring If multiple partnerships are associated with the New Relic master account, the menu also includes an option to switch partnership accounts. Partnership configuration settings In developing your integration with New Relic, you must specify a number of settings. For your convenience these settings are grouped together in the partnership console, including URLs for header/footer and various redirects, SSO configuration, andÂ keys and the ability to manipulate them. Customer activity monitoring New Relic provides you with two tools for managing your customers: State-of-the-Partnership reports and live monitoring of all deployed New Relic agents in your partnership. Both of these tools provide insight into your customers who are using New Relic. They can be used to identify up-sale opportunities or to assist your support group in proactive support. State-of-the-Partnership report The State-of-the-Partnership report provides a summary of your customers with New Relic accounts and their activities. The report is broken down by language of the agents deployed, the agent version and the language version for each account. This report is run weekly for each partner. It is available on request from your New Relic Business Development contact. This report is an excellent way to see which of your customers with New Relic accounts are in fact using the service. Partner customer monitoring The Partner customer monitoring facility provides application performance data on the New Relic enabled applications that are running on your service. This facility allows you to easily identify customers experiencing performance problems. Where the performance problems are caused by under capacity, these customers are excellent sales opportunities. Alternatively your support or services organization will find this information useful in pre-emptively identifying customer issues or as good prospects for consulting services. View an arbitrary customer To view activity of a customer that does not appear in any of the filtered views: Go to one.newrelic.com > (account dropdown) > Switch accounts > Other accounts. New Relic will list all of the reporting accounts in the partnership. You can filter or search the list. Viewing detailed customer data Under normal circumstances a partner will be able to see only the summary level data in a customer's New Relic account. Through the Partnership Admin Console, partners will be permitted to drill down to the more detailed presentation. If you want to drill down from the Partnership Admin Console, add your user (typically support@partner.com or something similar) to the account. Typically this will be done at account creation. Avoid provisioning this user as the account Owner.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 192.52087,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> admin console",
        "sections": "<em>Partnership</em> admin console",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " the console from the <em>New</em> <em>Relic</em> UI: Go to one.newrelic.com &gt; (account dropdown) &gt; Account settings. From the left menu bar, select <em>Partnerships</em>. one.newrelic.com &gt; (account dropdown) &gt; Account settings &gt; <em>Partnerships</em>: <em>Partnership</em> owners can access the <em>Partnership</em> Admin Console from their account settings"
      },
      "id": "603ed3e3196a6735baa83dad"
    },
    {
      "sections": [
        "NerdGraph tutorial: Partner and reseller subscriptions",
        "Important",
        "Get started: endpoint and API key",
        "Product subscriptions for an account",
        "Tip",
        "Mapping for products (productId)",
        "APM",
        "Example Requests",
        "Mobile",
        "Example Request",
        "Insights",
        "Browser",
        "Synthetics",
        "Infrastructure",
        "Serverless for Lambda",
        "Traces",
        "Logs",
        "Metrics",
        "GraphQL Types",
        "Subscription",
        "Product",
        "Unit of measure",
        "Examples",
        "Create (replace existing) subscription with many products",
        "Create (replace existing) subscription with one product - Logs",
        "Variations from the Partnership API"
      ],
      "title": "NerdGraph tutorial: Partner and reseller subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Getting started"
      ],
      "external_id": "b5831e3798a6356482988d72fc3b5dc2d39c6aad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/provisions-your-subscriptions-nerdgraph/",
      "published_at": "2021-05-21T22:58:20Z",
      "updated_at": "2021-05-11T05:05:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The Provisioning API is only available for Partner accounts. The Provisioning NerdGraph API allows you, as a New Relic partner to create subscriptions for your accounts containing a more extensive range of New Relic products than the Partner API. The Provisioning API and Partnership API are compatible when it comes to the products supported by both (APM, Mobile, Insights, Browser, Synthetics, and Infrastructure). If you use the Provisioning API to create a subscription for any of the newer products, you will no longer be able to update the account using the Partnership API V2. The Provisioning API is a GraphQL mutation field named organizationProvisioningUpdatePartnerSubscription. To learn more about how to use this mutation, see Introduction to NerdGraph. Get started: endpoint and API key The provisioning API uses your user key. The endpoint for the Provisioning API is: https://api.newrelic.com/graphql Copy To get started, run the following command: curl -v -d'{\"query\": \"mutation { organizationProvisioningUpdatePartnerSubscription(accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [{id: 9200, name: \\\"Traces\\\", unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 40}]}]) {enqueued errors {message path } } }\"}' -H'Content-type: application/json' -H'Api-key: PERSONAL_API_KEY' https://api.newrelic.com/graphql Copy Product subscriptions for an account The Provisioning API does not allow you to upgrade or downgrade individual product subscriptions for an account. Instead, the API requires you to replace (add) the configuration for all product subscriptions for the account. Tip If any product configurations are not included, the Provisioning API automatically provisions the account with a free product (when available). Mapping for products (productId) With each account creation call, you must supply at least one New Relic product type. The mutation query only accepts the numeric productId for the type. APM The number of allowable hosts per account and the data retention period vary by subscription level within New Relic APMâs pricing structure. For example, New Relic APM allows an unlimited number of allowable hosts for Lite accounts, but only a 24-hour data retention period. In addition, pricing and data retention depend on whether you select pricing plans based on hosts or compute units (CU). Use the product IDâs integer format to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Lite 18 Not applicable Standard 41 HOSTS Standard Annual 38 HOSTS Pro (Host) 42 HOSTS Pro Annual (Host) 39 HOSTS Enterprise 43 HOSTS Enterprise Annual 40 HOSTS If you select pricing plans based on compute units (CU), use these product ID integer formats to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Pro CU 126 COMPUTE_UNIT Pro Annual CU 127 COMPUTE_UNIT APM Essentials CU 128 COMPUTE_UNIT APM Essentials Annual CU 129 COMPUTE_UNIT Example Requests APM Pro with 5 hosts mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: HOSTS, quantity: 5 } ] } ] ) { enqueued errors { message path } } } Copy APM Pro CU with 3000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 126, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Mobile New Relic Mobileâs pricing structure allows 100,000 monthly active users per account at the Enterprise subscription level. Data retention varies by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Lite 49 Not applicable Not applicable Enterprise 54 APPS USERS Enterprise Annual 55 APPS USERS Example Request Mobile Enterprise with 1 App and 100,000 Monthly Active user mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 54, unitsOfMeasure: [ { unit: APPS, quantity: 1 }, { unit: USERS, quantity: 100000 } ] } ] ) { enqueued errors { message path } } } Copy Insights New Relic Insights bases the pricing structure on the number of allowable events stored and the associated data retention policy. For example, data retention for Insights Free is one day. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Free 67 Not applicable Not applicable None 65 Not applicable Not applicable Pro 66 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Pro Annual 69 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Example Request Insights Pro with 7 days data retention and 25 million events mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 66, unitsOfMeasure: [ { unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, { unit: EVENTS_IN_MILLIONS, quantity: 25 } ] } ] ) { enqueued errors { message path } } } Copy Browser New Relic Browserâs pricing structure allows an unlimited number of app users, regardless of subscription level. However, the number of allowable page views per month and the data retention period vary by subscription level. For example: Lite accounts include an unlimited number of page views per month and 24-hour data retention. Pro account pricing starts at 500,000 page views per month and three months data retention. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Lite 76 Not applicable Pro 72 PAGE_VIEWS Pro Annual 73 PAGE_VIEWS Example Request Browser Pro with 500,000 page views mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: PAGE_VIEWS, quantity: 500000 } ] } ] ) { enqueued errors { message path } } } Copy Synthetics With New Relic Synthetics' pricing structure, the default number of allowable monitoring checks and the data retention period vary by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 Lite 81 Not applicable Pro 77 CHECKS Pro Annual 78 CHECKS Example Request Synthetics Pro with 10,000 checks mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 77, unitsOfMeasure: [ { unit: CHECKS, quantity: 10000 } ] } ] ) { enqueued errors { message path } } } Copy Infrastructure With New Relic Infrastructureâs pricing structure, the default number of instances and the data retention period vary by subscription level. Infrastructure events do not count against your New Relic Insights quota, even though you can query them in Insights. New Relic Infrastructure offers pricing plans based on Compute Units (CU) only. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Infrastructure None 142 Not applicable Infrastructure Pro (CU) 134 COMPUTE_UNIT Infrastructure Pro Annual (CU) 135 COMPUTE_UNIT Infrastructure Essentials (CU) 136 COMPUTE_UNIT Infrastructure Essentials Annual (CU) 137 COMPUTE_UNIT Example Request Infrastructure Pro with 5,000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 134, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 5000 } ] } ] ) { enqueued errors { message path } } } Copy Serverless for Lambda Subscription level products.id unitsOfMeasure.unit.1 Serverless Annual 9010 INGESTED_EVENTS Serverless Monthly 9000 INGESTED_EVENTS Example Request Serverless Monthly with 3,000 ingested events in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9000, unitsOfMeasure: [ { unit: INGESTED_EVENTS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Traces Subscription level products.id unitsOfMeasure.unit.1 Traces Annual 9200 SPANS_IN_MILLIONS Traces Monthly 9210 SPANS_IN_MILLIONS Example Request Traces Annual with 3,000 spans in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9200, unitsOfMeasure: [ { unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Logs Subscription level products.id unitsOfMeasure.unit.1 Logs Annual Commit - 8 Days 9110 GB_PER_DAY Logs Annual Commit - 15 Days 9111 GB_PER_DAY Logs Annual Commit - 30 Days 9112 GB_PER_DAY Logs Monthly Commit - 8 Days 9100 GB_PER_DAY Logs Monthly Commit - 15 Days 9101 GB_PER_DAY Logs Monthly Commit - 30 Days 9102 GB_PER_DAY Example Request Logs with 8 days data retention and 100 Gigabytes per day mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9100, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 } ] } ] ) { enqueued errors { message path } } } Copy Metrics Subscription level products.id unitsOfMeasure.unit.1 Metrics Annual Commit 9310 DPM Metrics Monthly Commit 9300 DPM Example Request Metrics Monthly Commitment with 50 Data Points Per Minute mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9300, unitsOfMeasure: [ { unit: DPM, quantity: 50 } ] } ] ) { enqueued errors { message path } } } Copy GraphQL Types The Provisioning API uses the following GraphQL types: Subscription Name Type Description account_id Integer Numeric ID of the partner account for the partnership to which the affected account belongs. affected_account_id Integer Numeric ID of the account to which the changes described in the products field will be applied. products Array of Product Collection of type Product representing the values that will compose the new Subscription for the Affected Account. Product Name Type Description Id Integer Numeric ID for the Product to be added to the Subscription. Name String Name of the Product to be added to the Subscription. Unit of Measure Array of Unit of Measure Collection of type Unit of Measure for this single product. Unit of measure Name Type Description quantity Integer Numeric value for the amount of units to be applied to the Subscription. unit String Name of the unit to be applied to the product (varies by product line). Examples Here are examples of an API call to create a subscription and the JSON response. Create (replace existing) subscription with many products mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9410, unitsOfMeasure: [{unit: INCIDENT_EVENTS, quantity: 50}] }, { id: 42, unitsOfMeasure: [{unit: HOSTS, quantity: 5 }] }, { id: 42, unitsOfMeasure: [{unit: PAGE_VIEWS, quantity: 500000}] }, { id: 134, unitsOfMeasure: [{unit: COMPUTE_UNIT, quantity: 5000}] }, { id: 66, unitsOfMeasure: [ {unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, {unit: EVENTS_IN_MILLIONS, quantity: 25 } ] }, { id: 9100, unitsOfMeasure: [{unit: GB_PER_DAY, quantity: 100 } ] }, { id: 9300, unitsOfMeasure: [{unit: DPM, quantity: 50 } ] }, { id: 54, unitsOfMeasure: [ {unit: APPS, quantity: 1 }, {unit: USERS, quantity: 100000 } ] }, { id: 9000, unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] }, { id: 77, unitsOfMeasure: [{unit: CHECKS, quantity: 10000 } ] }, { id: 9200, unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Create (replace existing) subscription with one product - Logs mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 9110, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 }, { unit: DATA_RETENTION_IN_DAYS, quantity: 8 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Response: Once the Provisioning API has received your request and has validated it is in the right format it will respond with a message like this. This does not mean that your message has been successfully processed or applied; but it has been validated to be in the right format and it enqueued for processing. { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Variations from the Partnership API These are some key differences between the Provisioning API and the Partner API that frequent Partner API users should know: Feature Description API keys The Provisioning API uses a Personal API key. The Partner API uses the Partnership API key. productId and product_id The product idâs used for the Provisioning API are different than the ones documented for the Partner API. Curl request format To make a curl request to the Provisioning API, the format will be different than the Partner API: The url endpoint is different The required api key is your personal API key Provisioning API responds only to HTTP POST requests Serverless INGESTED_EVENTS units are in millions sending unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] will be interpreted by the Provisioning API as 3,000 million events. Insights and Mobile require 2 units of measure Insights requires DATA_RETENTION_IN_DAYS and EVENTS_IN_MILLIONS Mobile requires APPS and USERS. Logs data retention unit of measure is determined by productID This is specified in the product name: Logs Annual Commit - 8 Days | product ID: 9110 Logs Annual Commit - 15 Days | product ID: 9111 Logs Annual Commit - 30 Days | product ID: 9112 Logs Monthly Commit - 8 Days | product ID: 9100 Logs Monthly Commit - 15 Days | product ID: 9101 Logs Monthly Commit - 30 Days | product ID: 9102",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.91939,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Get</em> <em>started</em>: endpoint and API key",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Important The Provisioning API is only available for Partner accounts. The Provisioning NerdGraph API allows you, as a <em>New</em> <em>Relic</em> partner to create subscriptions for your accounts containing a more extensive range of <em>New</em> <em>Relic</em> products than the Partner API. The Provisioning API and <em>Partnership</em> API"
      },
      "id": "6043ff97e7b9d25a6f5799c1"
    },
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-05-22T00:20:23Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.35959,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> partners",
        "sections": "Support resources for <em>New</em> <em>Relic</em> partners",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>New</em> <em>Relic</em> products and features by category. Tip The Docs site includes a <em>Partnerships</em> category with information for <em>New</em> <em>Relic</em> partners and some <em>partnership</em> customers. Here are the five most commonly consulted articles on the <em>New</em> <em>Relic</em> Docs site. Providing easily found and direct links"
      },
      "id": "60450ecf28ccbc45632c6095"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference": [
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-05-22T08:28:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.25203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> products, pricing, and billing",
        "sections": "Customized <em>partnership</em> pricing",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " by <em>partnership</em>--the actual pricing model used is subject to the contractual terms of the <em>partner</em>&#x27;s agreement with <em>New</em> <em>Relic</em>. Contact your Alliance &amp; Channels representative at <em>New</em> <em>Relic</em> to learn more. <em>Partnership</em> billing options <em>New</em> <em>Relic</em> supports the following billing options for <em>partnerships</em>. All"
      },
      "id": "603ece55e7b9d254192a080c"
    },
    {
      "sections": [
        "NerdGraph tutorial: Partner and reseller subscriptions",
        "Important",
        "Get started: endpoint and API key",
        "Product subscriptions for an account",
        "Tip",
        "Mapping for products (productId)",
        "APM",
        "Example Requests",
        "Mobile",
        "Example Request",
        "Insights",
        "Browser",
        "Synthetics",
        "Infrastructure",
        "Serverless for Lambda",
        "Traces",
        "Logs",
        "Metrics",
        "GraphQL Types",
        "Subscription",
        "Product",
        "Unit of measure",
        "Examples",
        "Create (replace existing) subscription with many products",
        "Create (replace existing) subscription with one product - Logs",
        "Variations from the Partnership API"
      ],
      "title": "NerdGraph tutorial: Partner and reseller subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Getting started"
      ],
      "external_id": "b5831e3798a6356482988d72fc3b5dc2d39c6aad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/provisions-your-subscriptions-nerdgraph/",
      "published_at": "2021-05-21T22:58:20Z",
      "updated_at": "2021-05-11T05:05:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The Provisioning API is only available for Partner accounts. The Provisioning NerdGraph API allows you, as a New Relic partner to create subscriptions for your accounts containing a more extensive range of New Relic products than the Partner API. The Provisioning API and Partnership API are compatible when it comes to the products supported by both (APM, Mobile, Insights, Browser, Synthetics, and Infrastructure). If you use the Provisioning API to create a subscription for any of the newer products, you will no longer be able to update the account using the Partnership API V2. The Provisioning API is a GraphQL mutation field named organizationProvisioningUpdatePartnerSubscription. To learn more about how to use this mutation, see Introduction to NerdGraph. Get started: endpoint and API key The provisioning API uses your user key. The endpoint for the Provisioning API is: https://api.newrelic.com/graphql Copy To get started, run the following command: curl -v -d'{\"query\": \"mutation { organizationProvisioningUpdatePartnerSubscription(accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [{id: 9200, name: \\\"Traces\\\", unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 40}]}]) {enqueued errors {message path } } }\"}' -H'Content-type: application/json' -H'Api-key: PERSONAL_API_KEY' https://api.newrelic.com/graphql Copy Product subscriptions for an account The Provisioning API does not allow you to upgrade or downgrade individual product subscriptions for an account. Instead, the API requires you to replace (add) the configuration for all product subscriptions for the account. Tip If any product configurations are not included, the Provisioning API automatically provisions the account with a free product (when available). Mapping for products (productId) With each account creation call, you must supply at least one New Relic product type. The mutation query only accepts the numeric productId for the type. APM The number of allowable hosts per account and the data retention period vary by subscription level within New Relic APMâs pricing structure. For example, New Relic APM allows an unlimited number of allowable hosts for Lite accounts, but only a 24-hour data retention period. In addition, pricing and data retention depend on whether you select pricing plans based on hosts or compute units (CU). Use the product IDâs integer format to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Lite 18 Not applicable Standard 41 HOSTS Standard Annual 38 HOSTS Pro (Host) 42 HOSTS Pro Annual (Host) 39 HOSTS Enterprise 43 HOSTS Enterprise Annual 40 HOSTS If you select pricing plans based on compute units (CU), use these product ID integer formats to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Pro CU 126 COMPUTE_UNIT Pro Annual CU 127 COMPUTE_UNIT APM Essentials CU 128 COMPUTE_UNIT APM Essentials Annual CU 129 COMPUTE_UNIT Example Requests APM Pro with 5 hosts mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: HOSTS, quantity: 5 } ] } ] ) { enqueued errors { message path } } } Copy APM Pro CU with 3000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 126, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Mobile New Relic Mobileâs pricing structure allows 100,000 monthly active users per account at the Enterprise subscription level. Data retention varies by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Lite 49 Not applicable Not applicable Enterprise 54 APPS USERS Enterprise Annual 55 APPS USERS Example Request Mobile Enterprise with 1 App and 100,000 Monthly Active user mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 54, unitsOfMeasure: [ { unit: APPS, quantity: 1 }, { unit: USERS, quantity: 100000 } ] } ] ) { enqueued errors { message path } } } Copy Insights New Relic Insights bases the pricing structure on the number of allowable events stored and the associated data retention policy. For example, data retention for Insights Free is one day. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Free 67 Not applicable Not applicable None 65 Not applicable Not applicable Pro 66 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Pro Annual 69 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Example Request Insights Pro with 7 days data retention and 25 million events mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 66, unitsOfMeasure: [ { unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, { unit: EVENTS_IN_MILLIONS, quantity: 25 } ] } ] ) { enqueued errors { message path } } } Copy Browser New Relic Browserâs pricing structure allows an unlimited number of app users, regardless of subscription level. However, the number of allowable page views per month and the data retention period vary by subscription level. For example: Lite accounts include an unlimited number of page views per month and 24-hour data retention. Pro account pricing starts at 500,000 page views per month and three months data retention. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Lite 76 Not applicable Pro 72 PAGE_VIEWS Pro Annual 73 PAGE_VIEWS Example Request Browser Pro with 500,000 page views mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: PAGE_VIEWS, quantity: 500000 } ] } ] ) { enqueued errors { message path } } } Copy Synthetics With New Relic Synthetics' pricing structure, the default number of allowable monitoring checks and the data retention period vary by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 Lite 81 Not applicable Pro 77 CHECKS Pro Annual 78 CHECKS Example Request Synthetics Pro with 10,000 checks mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 77, unitsOfMeasure: [ { unit: CHECKS, quantity: 10000 } ] } ] ) { enqueued errors { message path } } } Copy Infrastructure With New Relic Infrastructureâs pricing structure, the default number of instances and the data retention period vary by subscription level. Infrastructure events do not count against your New Relic Insights quota, even though you can query them in Insights. New Relic Infrastructure offers pricing plans based on Compute Units (CU) only. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Infrastructure None 142 Not applicable Infrastructure Pro (CU) 134 COMPUTE_UNIT Infrastructure Pro Annual (CU) 135 COMPUTE_UNIT Infrastructure Essentials (CU) 136 COMPUTE_UNIT Infrastructure Essentials Annual (CU) 137 COMPUTE_UNIT Example Request Infrastructure Pro with 5,000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 134, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 5000 } ] } ] ) { enqueued errors { message path } } } Copy Serverless for Lambda Subscription level products.id unitsOfMeasure.unit.1 Serverless Annual 9010 INGESTED_EVENTS Serverless Monthly 9000 INGESTED_EVENTS Example Request Serverless Monthly with 3,000 ingested events in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9000, unitsOfMeasure: [ { unit: INGESTED_EVENTS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Traces Subscription level products.id unitsOfMeasure.unit.1 Traces Annual 9200 SPANS_IN_MILLIONS Traces Monthly 9210 SPANS_IN_MILLIONS Example Request Traces Annual with 3,000 spans in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9200, unitsOfMeasure: [ { unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Logs Subscription level products.id unitsOfMeasure.unit.1 Logs Annual Commit - 8 Days 9110 GB_PER_DAY Logs Annual Commit - 15 Days 9111 GB_PER_DAY Logs Annual Commit - 30 Days 9112 GB_PER_DAY Logs Monthly Commit - 8 Days 9100 GB_PER_DAY Logs Monthly Commit - 15 Days 9101 GB_PER_DAY Logs Monthly Commit - 30 Days 9102 GB_PER_DAY Example Request Logs with 8 days data retention and 100 Gigabytes per day mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9100, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 } ] } ] ) { enqueued errors { message path } } } Copy Metrics Subscription level products.id unitsOfMeasure.unit.1 Metrics Annual Commit 9310 DPM Metrics Monthly Commit 9300 DPM Example Request Metrics Monthly Commitment with 50 Data Points Per Minute mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9300, unitsOfMeasure: [ { unit: DPM, quantity: 50 } ] } ] ) { enqueued errors { message path } } } Copy GraphQL Types The Provisioning API uses the following GraphQL types: Subscription Name Type Description account_id Integer Numeric ID of the partner account for the partnership to which the affected account belongs. affected_account_id Integer Numeric ID of the account to which the changes described in the products field will be applied. products Array of Product Collection of type Product representing the values that will compose the new Subscription for the Affected Account. Product Name Type Description Id Integer Numeric ID for the Product to be added to the Subscription. Name String Name of the Product to be added to the Subscription. Unit of Measure Array of Unit of Measure Collection of type Unit of Measure for this single product. Unit of measure Name Type Description quantity Integer Numeric value for the amount of units to be applied to the Subscription. unit String Name of the unit to be applied to the product (varies by product line). Examples Here are examples of an API call to create a subscription and the JSON response. Create (replace existing) subscription with many products mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9410, unitsOfMeasure: [{unit: INCIDENT_EVENTS, quantity: 50}] }, { id: 42, unitsOfMeasure: [{unit: HOSTS, quantity: 5 }] }, { id: 42, unitsOfMeasure: [{unit: PAGE_VIEWS, quantity: 500000}] }, { id: 134, unitsOfMeasure: [{unit: COMPUTE_UNIT, quantity: 5000}] }, { id: 66, unitsOfMeasure: [ {unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, {unit: EVENTS_IN_MILLIONS, quantity: 25 } ] }, { id: 9100, unitsOfMeasure: [{unit: GB_PER_DAY, quantity: 100 } ] }, { id: 9300, unitsOfMeasure: [{unit: DPM, quantity: 50 } ] }, { id: 54, unitsOfMeasure: [ {unit: APPS, quantity: 1 }, {unit: USERS, quantity: 100000 } ] }, { id: 9000, unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] }, { id: 77, unitsOfMeasure: [{unit: CHECKS, quantity: 10000 } ] }, { id: 9200, unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Create (replace existing) subscription with one product - Logs mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 9110, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 }, { unit: DATA_RETENTION_IN_DAYS, quantity: 8 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Response: Once the Provisioning API has received your request and has validated it is in the right format it will respond with a message like this. This does not mean that your message has been successfully processed or applied; but it has been validated to be in the right format and it enqueued for processing. { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Variations from the Partnership API These are some key differences between the Provisioning API and the Partner API that frequent Partner API users should know: Feature Description API keys The Provisioning API uses a Personal API key. The Partner API uses the Partnership API key. productId and product_id The product idâs used for the Provisioning API are different than the ones documented for the Partner API. Curl request format To make a curl request to the Provisioning API, the format will be different than the Partner API: The url endpoint is different The required api key is your personal API key Provisioning API responds only to HTTP POST requests Serverless INGESTED_EVENTS units are in millions sending unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] will be interpreted by the Provisioning API as 3,000 million events. Insights and Mobile require 2 units of measure Insights requires DATA_RETENTION_IN_DAYS and EVENTS_IN_MILLIONS Mobile requires APPS and USERS. Logs data retention unit of measure is determined by productID This is specified in the product name: Logs Annual Commit - 8 Days | product ID: 9110 Logs Annual Commit - 15 Days | product ID: 9111 Logs Annual Commit - 30 Days | product ID: 9112 Logs Monthly Commit - 8 Days | product ID: 9100 Logs Monthly Commit - 15 Days | product ID: 9101 Logs Monthly Commit - 30 Days | product ID: 9102",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.99251,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NerdGraph tutorial: <em>Partner</em> and reseller subscriptions",
        "sections": "Variations from the <em>Partnership</em> <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Important The Provisioning <em>API</em> is only available for <em>Partner</em> accounts. The Provisioning NerdGraph <em>API</em> allows you, as a <em>New</em> <em>Relic</em> <em>partner</em> to create subscriptions for your accounts containing a more extensive range of <em>New</em> <em>Relic</em> products than the <em>Partner</em> <em>API</em>. The Provisioning <em>API</em> and <em>Partnership</em> <em>API</em>"
      },
      "id": "6043ff97e7b9d25a6f5799c1"
    },
    {
      "sections": [
        "Partnership billing integration API",
        "Requirements",
        "Communication endpoint",
        "Billing API",
        "Customer subscription notification API",
        "Invoice notification API"
      ],
      "title": "Partnership billing integration API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "73da7e096ce56bb45e39bb95a1c2e0a0011be597",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partnership-billing-integration-api/",
      "published_at": "2021-05-22T03:27:16Z",
      "updated_at": "2021-03-30T21:12:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Partnership API includes functionality for partners to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts. This is particularly useful for partners acting as resellers or managed service providers of New Relic accounts. For example, when customers of a New Relic reseller partner purchase a higher subscription level from New Relic's Sales team, New Relic replaces the old subscription with a new subscription. New Relic then uses the API to communicate this information to the partner. Requirements Before using this object, please read the Partnership API requirements. Communication endpoint Partners must implement a billing communication endpoint that identifies the partner's URL and PARTNER_ID. New Relic uses this endpoint to notify the partner that New Relic has made a change to a partner account's subscription or invoice information. The endpoint must support HTTPS. The partner-specified portion of the URL is identified from the Settings tab of New Relic's Partner Portal. The PARTNER_ID is the partner's external ID for this account. This value must be passed when the account is created by using the partner_external_identifier parameter. Billing API Supported functionality for the Partnership billing API includes: Customer subscription notification Invoice information notification Customer subscription notification API To communicate changes to a partner about a customer's subscription, New Relic uses the POST method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy Authentication is done via headers with the partner's REST API key or Admin user's API key. The Partnership API returns the results as JSON. Parameters: Name Type Description id String The customer's New Relic account ID subscription_id Integer Subscription's numeric ID subscription_string String Description of subscription for display price Integer Monthly price of subscription in cents number_of_hosts Integer Number of hosts starts Date Subscription's start date (yyyymmdd) expires Date Subscription's end date (yyyymmdd) Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed. Invoice notification API New Relic uses this endpoint to notify the partner of changes to a partner account's subscription level and invoice information. New Relic uses the PUT method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy OR https://partner-specified/partner-specified/PARTNER_ID.xml Copy The Partnership API returns the results as JSON or XML. Parameters: Name Type Description id string The customer's New Relic account ID subscription_id integer Subscription's numeric ID subscription_string string Description of subscription for display price integer Monthly price of subscription in cents Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.3878,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> billing integration <em>API</em>",
        "sections": "<em>Partnership</em> billing integration <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s <em>Partnership</em> <em>API</em> includes functionality for partners to replace a customer&#x27;s existing subscription with a <em>new</em> one, or to update invoice information for <em>New</em> <em>Relic</em> <em>partner</em> accounts. This is particularly useful for partners acting as resellers or managed service providers of <em>New</em> <em>Relic</em>"
      },
      "id": "603ec86e64441f09e44e8871"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-account-object": [
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-05-22T08:28:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.25198,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> products, pricing, and billing",
        "sections": "Customized <em>partnership</em> pricing",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " by <em>partnership</em>--the actual pricing model used is subject to the contractual terms of the <em>partner</em>&#x27;s agreement with <em>New</em> <em>Relic</em>. Contact your Alliance &amp; Channels representative at <em>New</em> <em>Relic</em> to learn more. <em>Partnership</em> billing options <em>New</em> <em>Relic</em> supports the following billing options for <em>partnerships</em>. All"
      },
      "id": "603ece55e7b9d254192a080c"
    },
    {
      "sections": [
        "Partnership API reference",
        "Requirements",
        "Find your Partnership API key",
        "Find your Partner ID",
        "Authenticate the API call",
        "Notes for partners who manage New Relic accounts",
        "Errors"
      ],
      "title": "Partnership API reference",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7bc374ae0e6f6917aa82a70e582606ea4a9878ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference/",
      "published_at": "2021-05-22T15:40:26Z",
      "updated_at": "2021-03-30T03:04:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains technical details about using the Partnership API. For an introduction and requirements, first read Intro to Partnership API. Requirements For requirements, see Intro to Partnership API. Find your Partnership API key The Partnership API requires that you authenticate with the REST API key that is specific to your partnership owner account (you cannot use the other REST API keys). When using your Partnership API key with calls to REST API (v2) endpoints that require the use of an Admin user's API key, see Admin user's API Key and partnerships. Find your Partner ID The Partnership API also requires that you authenticate by providing a Partner ID specific to your partnership. This is unique from the account ID for your partnership owner account. To obtain your Partner ID, go to your partner admin console and retrieve the partner ID number that is listed in your URL: https://partner-admin-console.newrelic.com/accounts/â$ACCOUNT_ID/admin_console/partnerships/$PARTNER_ID Copy You must include the Partner ID as part of the base URL for the Partner API. URL component URL pattern Partner API endpoint https://rpm.newrelic.com/api/v2/partners/PARTNER_ID Copy Resource URL patterns /accounts /accounts/ACCOUNT_ID /accounts/ACCOUNT_ID/users /accounts/ACCOUNT_ID/users/USER_ID /accounts/ACCOUNT_ID/subscriptions /accounts/ACCOUNT_ID/subscriptions/SUBSCRIPTION_ID Copy Example https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/ACCOUNT_ID Copy Authenticate the API call To authenticate to the Partner API when making an API call: Add a request header labeled x-api-key and set its value to your Partner API key. Include your Partner ID at the specified point in the request URI. Notes for partners who manage New Relic accounts For partners who manage New Relic accounts for their customers, the initial API call for all account-level interactions is to \"create account.\" This call returns an xml record of the newly created account. Part of this record is the account_id. All of the other calls in the Partnership API require the account_id as a parameter. Provision will need to be made by the partner to parse the returned xml extract, store the account_id, and associate it with the users' partner account record. Errors New Relic uses conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success and codes in the 4xx range indicate an error that resulted from the provided information (for example, a required parameter was missing). Error Probable cause 400 Bad Request Most commonly the call is missing a required parameter. 401 Unauthorized A valid API key was not provided. 402 Request Failed Parameters were valid but request failed for some reason. 404 Not Found The requested item doesn't exist. 422 Unprocessable Entity Your account has special terms and cannot be changed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.43861,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> reference",
        "sections": "Notes for <em>partners</em> who manage <em>New</em> <em>Relic</em> accounts",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>API</em> key that is specific to your <em>partnership</em> owner account (you cannot use the other REST <em>API</em> keys). When using your <em>Partnership</em> <em>API</em> key with calls to REST <em>API</em> (v2) endpoints that require the use of an Admin user&#x27;s <em>API</em> key, see Admin user&#x27;s <em>API</em> Key and <em>partnerships</em>. Find your <em>Partner</em> ID"
      },
      "id": "603ebc5f28ccbc22b6eba780"
    },
    {
      "sections": [
        "NerdGraph tutorial: Partner and reseller subscriptions",
        "Important",
        "Get started: endpoint and API key",
        "Product subscriptions for an account",
        "Tip",
        "Mapping for products (productId)",
        "APM",
        "Example Requests",
        "Mobile",
        "Example Request",
        "Insights",
        "Browser",
        "Synthetics",
        "Infrastructure",
        "Serverless for Lambda",
        "Traces",
        "Logs",
        "Metrics",
        "GraphQL Types",
        "Subscription",
        "Product",
        "Unit of measure",
        "Examples",
        "Create (replace existing) subscription with many products",
        "Create (replace existing) subscription with one product - Logs",
        "Variations from the Partnership API"
      ],
      "title": "NerdGraph tutorial: Partner and reseller subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Getting started"
      ],
      "external_id": "b5831e3798a6356482988d72fc3b5dc2d39c6aad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/provisions-your-subscriptions-nerdgraph/",
      "published_at": "2021-05-21T22:58:20Z",
      "updated_at": "2021-05-11T05:05:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The Provisioning API is only available for Partner accounts. The Provisioning NerdGraph API allows you, as a New Relic partner to create subscriptions for your accounts containing a more extensive range of New Relic products than the Partner API. The Provisioning API and Partnership API are compatible when it comes to the products supported by both (APM, Mobile, Insights, Browser, Synthetics, and Infrastructure). If you use the Provisioning API to create a subscription for any of the newer products, you will no longer be able to update the account using the Partnership API V2. The Provisioning API is a GraphQL mutation field named organizationProvisioningUpdatePartnerSubscription. To learn more about how to use this mutation, see Introduction to NerdGraph. Get started: endpoint and API key The provisioning API uses your user key. The endpoint for the Provisioning API is: https://api.newrelic.com/graphql Copy To get started, run the following command: curl -v -d'{\"query\": \"mutation { organizationProvisioningUpdatePartnerSubscription(accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [{id: 9200, name: \\\"Traces\\\", unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 40}]}]) {enqueued errors {message path } } }\"}' -H'Content-type: application/json' -H'Api-key: PERSONAL_API_KEY' https://api.newrelic.com/graphql Copy Product subscriptions for an account The Provisioning API does not allow you to upgrade or downgrade individual product subscriptions for an account. Instead, the API requires you to replace (add) the configuration for all product subscriptions for the account. Tip If any product configurations are not included, the Provisioning API automatically provisions the account with a free product (when available). Mapping for products (productId) With each account creation call, you must supply at least one New Relic product type. The mutation query only accepts the numeric productId for the type. APM The number of allowable hosts per account and the data retention period vary by subscription level within New Relic APMâs pricing structure. For example, New Relic APM allows an unlimited number of allowable hosts for Lite accounts, but only a 24-hour data retention period. In addition, pricing and data retention depend on whether you select pricing plans based on hosts or compute units (CU). Use the product IDâs integer format to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Lite 18 Not applicable Standard 41 HOSTS Standard Annual 38 HOSTS Pro (Host) 42 HOSTS Pro Annual (Host) 39 HOSTS Enterprise 43 HOSTS Enterprise Annual 40 HOSTS If you select pricing plans based on compute units (CU), use these product ID integer formats to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Pro CU 126 COMPUTE_UNIT Pro Annual CU 127 COMPUTE_UNIT APM Essentials CU 128 COMPUTE_UNIT APM Essentials Annual CU 129 COMPUTE_UNIT Example Requests APM Pro with 5 hosts mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: HOSTS, quantity: 5 } ] } ] ) { enqueued errors { message path } } } Copy APM Pro CU with 3000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 126, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Mobile New Relic Mobileâs pricing structure allows 100,000 monthly active users per account at the Enterprise subscription level. Data retention varies by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Lite 49 Not applicable Not applicable Enterprise 54 APPS USERS Enterprise Annual 55 APPS USERS Example Request Mobile Enterprise with 1 App and 100,000 Monthly Active user mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 54, unitsOfMeasure: [ { unit: APPS, quantity: 1 }, { unit: USERS, quantity: 100000 } ] } ] ) { enqueued errors { message path } } } Copy Insights New Relic Insights bases the pricing structure on the number of allowable events stored and the associated data retention policy. For example, data retention for Insights Free is one day. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Free 67 Not applicable Not applicable None 65 Not applicable Not applicable Pro 66 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Pro Annual 69 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Example Request Insights Pro with 7 days data retention and 25 million events mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 66, unitsOfMeasure: [ { unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, { unit: EVENTS_IN_MILLIONS, quantity: 25 } ] } ] ) { enqueued errors { message path } } } Copy Browser New Relic Browserâs pricing structure allows an unlimited number of app users, regardless of subscription level. However, the number of allowable page views per month and the data retention period vary by subscription level. For example: Lite accounts include an unlimited number of page views per month and 24-hour data retention. Pro account pricing starts at 500,000 page views per month and three months data retention. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Lite 76 Not applicable Pro 72 PAGE_VIEWS Pro Annual 73 PAGE_VIEWS Example Request Browser Pro with 500,000 page views mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: PAGE_VIEWS, quantity: 500000 } ] } ] ) { enqueued errors { message path } } } Copy Synthetics With New Relic Synthetics' pricing structure, the default number of allowable monitoring checks and the data retention period vary by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 Lite 81 Not applicable Pro 77 CHECKS Pro Annual 78 CHECKS Example Request Synthetics Pro with 10,000 checks mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 77, unitsOfMeasure: [ { unit: CHECKS, quantity: 10000 } ] } ] ) { enqueued errors { message path } } } Copy Infrastructure With New Relic Infrastructureâs pricing structure, the default number of instances and the data retention period vary by subscription level. Infrastructure events do not count against your New Relic Insights quota, even though you can query them in Insights. New Relic Infrastructure offers pricing plans based on Compute Units (CU) only. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Infrastructure None 142 Not applicable Infrastructure Pro (CU) 134 COMPUTE_UNIT Infrastructure Pro Annual (CU) 135 COMPUTE_UNIT Infrastructure Essentials (CU) 136 COMPUTE_UNIT Infrastructure Essentials Annual (CU) 137 COMPUTE_UNIT Example Request Infrastructure Pro with 5,000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 134, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 5000 } ] } ] ) { enqueued errors { message path } } } Copy Serverless for Lambda Subscription level products.id unitsOfMeasure.unit.1 Serverless Annual 9010 INGESTED_EVENTS Serverless Monthly 9000 INGESTED_EVENTS Example Request Serverless Monthly with 3,000 ingested events in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9000, unitsOfMeasure: [ { unit: INGESTED_EVENTS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Traces Subscription level products.id unitsOfMeasure.unit.1 Traces Annual 9200 SPANS_IN_MILLIONS Traces Monthly 9210 SPANS_IN_MILLIONS Example Request Traces Annual with 3,000 spans in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9200, unitsOfMeasure: [ { unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Logs Subscription level products.id unitsOfMeasure.unit.1 Logs Annual Commit - 8 Days 9110 GB_PER_DAY Logs Annual Commit - 15 Days 9111 GB_PER_DAY Logs Annual Commit - 30 Days 9112 GB_PER_DAY Logs Monthly Commit - 8 Days 9100 GB_PER_DAY Logs Monthly Commit - 15 Days 9101 GB_PER_DAY Logs Monthly Commit - 30 Days 9102 GB_PER_DAY Example Request Logs with 8 days data retention and 100 Gigabytes per day mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9100, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 } ] } ] ) { enqueued errors { message path } } } Copy Metrics Subscription level products.id unitsOfMeasure.unit.1 Metrics Annual Commit 9310 DPM Metrics Monthly Commit 9300 DPM Example Request Metrics Monthly Commitment with 50 Data Points Per Minute mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9300, unitsOfMeasure: [ { unit: DPM, quantity: 50 } ] } ] ) { enqueued errors { message path } } } Copy GraphQL Types The Provisioning API uses the following GraphQL types: Subscription Name Type Description account_id Integer Numeric ID of the partner account for the partnership to which the affected account belongs. affected_account_id Integer Numeric ID of the account to which the changes described in the products field will be applied. products Array of Product Collection of type Product representing the values that will compose the new Subscription for the Affected Account. Product Name Type Description Id Integer Numeric ID for the Product to be added to the Subscription. Name String Name of the Product to be added to the Subscription. Unit of Measure Array of Unit of Measure Collection of type Unit of Measure for this single product. Unit of measure Name Type Description quantity Integer Numeric value for the amount of units to be applied to the Subscription. unit String Name of the unit to be applied to the product (varies by product line). Examples Here are examples of an API call to create a subscription and the JSON response. Create (replace existing) subscription with many products mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9410, unitsOfMeasure: [{unit: INCIDENT_EVENTS, quantity: 50}] }, { id: 42, unitsOfMeasure: [{unit: HOSTS, quantity: 5 }] }, { id: 42, unitsOfMeasure: [{unit: PAGE_VIEWS, quantity: 500000}] }, { id: 134, unitsOfMeasure: [{unit: COMPUTE_UNIT, quantity: 5000}] }, { id: 66, unitsOfMeasure: [ {unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, {unit: EVENTS_IN_MILLIONS, quantity: 25 } ] }, { id: 9100, unitsOfMeasure: [{unit: GB_PER_DAY, quantity: 100 } ] }, { id: 9300, unitsOfMeasure: [{unit: DPM, quantity: 50 } ] }, { id: 54, unitsOfMeasure: [ {unit: APPS, quantity: 1 }, {unit: USERS, quantity: 100000 } ] }, { id: 9000, unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] }, { id: 77, unitsOfMeasure: [{unit: CHECKS, quantity: 10000 } ] }, { id: 9200, unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Create (replace existing) subscription with one product - Logs mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 9110, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 }, { unit: DATA_RETENTION_IN_DAYS, quantity: 8 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Response: Once the Provisioning API has received your request and has validated it is in the right format it will respond with a message like this. This does not mean that your message has been successfully processed or applied; but it has been validated to be in the right format and it enqueued for processing. { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Variations from the Partnership API These are some key differences between the Provisioning API and the Partner API that frequent Partner API users should know: Feature Description API keys The Provisioning API uses a Personal API key. The Partner API uses the Partnership API key. productId and product_id The product idâs used for the Provisioning API are different than the ones documented for the Partner API. Curl request format To make a curl request to the Provisioning API, the format will be different than the Partner API: The url endpoint is different The required api key is your personal API key Provisioning API responds only to HTTP POST requests Serverless INGESTED_EVENTS units are in millions sending unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] will be interpreted by the Provisioning API as 3,000 million events. Insights and Mobile require 2 units of measure Insights requires DATA_RETENTION_IN_DAYS and EVENTS_IN_MILLIONS Mobile requires APPS and USERS. Logs data retention unit of measure is determined by productID This is specified in the product name: Logs Annual Commit - 8 Days | product ID: 9110 Logs Annual Commit - 15 Days | product ID: 9111 Logs Annual Commit - 30 Days | product ID: 9112 Logs Monthly Commit - 8 Days | product ID: 9100 Logs Monthly Commit - 15 Days | product ID: 9101 Logs Monthly Commit - 30 Days | product ID: 9102",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.99248,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NerdGraph tutorial: <em>Partner</em> and reseller subscriptions",
        "sections": "Variations from the <em>Partnership</em> <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Important The Provisioning <em>API</em> is only available for <em>Partner</em> accounts. The Provisioning NerdGraph <em>API</em> allows you, as a <em>New</em> <em>Relic</em> <em>partner</em> to create subscriptions for your accounts containing a more extensive range of <em>New</em> <em>Relic</em> products than the <em>Partner</em> <em>API</em>. The Provisioning <em>API</em> and <em>Partnership</em> <em>API</em>"
      },
      "id": "6043ff97e7b9d25a6f5799c1"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-keys": [
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-05-22T08:28:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.25198,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> products, pricing, and billing",
        "sections": "Customized <em>partnership</em> pricing",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " by <em>partnership</em>--the actual pricing model used is subject to the contractual terms of the <em>partner</em>&#x27;s agreement with <em>New</em> <em>Relic</em>. Contact your Alliance &amp; Channels representative at <em>New</em> <em>Relic</em> to learn more. <em>Partnership</em> billing options <em>New</em> <em>Relic</em> supports the following billing options for <em>partnerships</em>. All"
      },
      "id": "603ece55e7b9d254192a080c"
    },
    {
      "sections": [
        "Partnership API reference",
        "Requirements",
        "Find your Partnership API key",
        "Find your Partner ID",
        "Authenticate the API call",
        "Notes for partners who manage New Relic accounts",
        "Errors"
      ],
      "title": "Partnership API reference",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7bc374ae0e6f6917aa82a70e582606ea4a9878ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference/",
      "published_at": "2021-05-22T15:40:26Z",
      "updated_at": "2021-03-30T03:04:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains technical details about using the Partnership API. For an introduction and requirements, first read Intro to Partnership API. Requirements For requirements, see Intro to Partnership API. Find your Partnership API key The Partnership API requires that you authenticate with the REST API key that is specific to your partnership owner account (you cannot use the other REST API keys). When using your Partnership API key with calls to REST API (v2) endpoints that require the use of an Admin user's API key, see Admin user's API Key and partnerships. Find your Partner ID The Partnership API also requires that you authenticate by providing a Partner ID specific to your partnership. This is unique from the account ID for your partnership owner account. To obtain your Partner ID, go to your partner admin console and retrieve the partner ID number that is listed in your URL: https://partner-admin-console.newrelic.com/accounts/â$ACCOUNT_ID/admin_console/partnerships/$PARTNER_ID Copy You must include the Partner ID as part of the base URL for the Partner API. URL component URL pattern Partner API endpoint https://rpm.newrelic.com/api/v2/partners/PARTNER_ID Copy Resource URL patterns /accounts /accounts/ACCOUNT_ID /accounts/ACCOUNT_ID/users /accounts/ACCOUNT_ID/users/USER_ID /accounts/ACCOUNT_ID/subscriptions /accounts/ACCOUNT_ID/subscriptions/SUBSCRIPTION_ID Copy Example https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/ACCOUNT_ID Copy Authenticate the API call To authenticate to the Partner API when making an API call: Add a request header labeled x-api-key and set its value to your Partner API key. Include your Partner ID at the specified point in the request URI. Notes for partners who manage New Relic accounts For partners who manage New Relic accounts for their customers, the initial API call for all account-level interactions is to \"create account.\" This call returns an xml record of the newly created account. Part of this record is the account_id. All of the other calls in the Partnership API require the account_id as a parameter. Provision will need to be made by the partner to parse the returned xml extract, store the account_id, and associate it with the users' partner account record. Errors New Relic uses conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success and codes in the 4xx range indicate an error that resulted from the provided information (for example, a required parameter was missing). Error Probable cause 400 Bad Request Most commonly the call is missing a required parameter. 401 Unauthorized A valid API key was not provided. 402 Request Failed Parameters were valid but request failed for some reason. 404 Not Found The requested item doesn't exist. 422 Unprocessable Entity Your account has special terms and cannot be changed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.43861,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> reference",
        "sections": "Notes for <em>partners</em> who manage <em>New</em> <em>Relic</em> accounts",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>API</em> key that is specific to your <em>partnership</em> owner account (you cannot use the other REST <em>API</em> keys). When using your <em>Partnership</em> <em>API</em> key with calls to REST <em>API</em> (v2) endpoints that require the use of an Admin user&#x27;s <em>API</em> key, see Admin user&#x27;s <em>API</em> Key and <em>partnerships</em>. Find your <em>Partner</em> ID"
      },
      "id": "603ebc5f28ccbc22b6eba780"
    },
    {
      "sections": [
        "NerdGraph tutorial: Partner and reseller subscriptions",
        "Important",
        "Get started: endpoint and API key",
        "Product subscriptions for an account",
        "Tip",
        "Mapping for products (productId)",
        "APM",
        "Example Requests",
        "Mobile",
        "Example Request",
        "Insights",
        "Browser",
        "Synthetics",
        "Infrastructure",
        "Serverless for Lambda",
        "Traces",
        "Logs",
        "Metrics",
        "GraphQL Types",
        "Subscription",
        "Product",
        "Unit of measure",
        "Examples",
        "Create (replace existing) subscription with many products",
        "Create (replace existing) subscription with one product - Logs",
        "Variations from the Partnership API"
      ],
      "title": "NerdGraph tutorial: Partner and reseller subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Getting started"
      ],
      "external_id": "b5831e3798a6356482988d72fc3b5dc2d39c6aad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/provisions-your-subscriptions-nerdgraph/",
      "published_at": "2021-05-21T22:58:20Z",
      "updated_at": "2021-05-11T05:05:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The Provisioning API is only available for Partner accounts. The Provisioning NerdGraph API allows you, as a New Relic partner to create subscriptions for your accounts containing a more extensive range of New Relic products than the Partner API. The Provisioning API and Partnership API are compatible when it comes to the products supported by both (APM, Mobile, Insights, Browser, Synthetics, and Infrastructure). If you use the Provisioning API to create a subscription for any of the newer products, you will no longer be able to update the account using the Partnership API V2. The Provisioning API is a GraphQL mutation field named organizationProvisioningUpdatePartnerSubscription. To learn more about how to use this mutation, see Introduction to NerdGraph. Get started: endpoint and API key The provisioning API uses your user key. The endpoint for the Provisioning API is: https://api.newrelic.com/graphql Copy To get started, run the following command: curl -v -d'{\"query\": \"mutation { organizationProvisioningUpdatePartnerSubscription(accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [{id: 9200, name: \\\"Traces\\\", unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 40}]}]) {enqueued errors {message path } } }\"}' -H'Content-type: application/json' -H'Api-key: PERSONAL_API_KEY' https://api.newrelic.com/graphql Copy Product subscriptions for an account The Provisioning API does not allow you to upgrade or downgrade individual product subscriptions for an account. Instead, the API requires you to replace (add) the configuration for all product subscriptions for the account. Tip If any product configurations are not included, the Provisioning API automatically provisions the account with a free product (when available). Mapping for products (productId) With each account creation call, you must supply at least one New Relic product type. The mutation query only accepts the numeric productId for the type. APM The number of allowable hosts per account and the data retention period vary by subscription level within New Relic APMâs pricing structure. For example, New Relic APM allows an unlimited number of allowable hosts for Lite accounts, but only a 24-hour data retention period. In addition, pricing and data retention depend on whether you select pricing plans based on hosts or compute units (CU). Use the product IDâs integer format to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Lite 18 Not applicable Standard 41 HOSTS Standard Annual 38 HOSTS Pro (Host) 42 HOSTS Pro Annual (Host) 39 HOSTS Enterprise 43 HOSTS Enterprise Annual 40 HOSTS If you select pricing plans based on compute units (CU), use these product ID integer formats to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Pro CU 126 COMPUTE_UNIT Pro Annual CU 127 COMPUTE_UNIT APM Essentials CU 128 COMPUTE_UNIT APM Essentials Annual CU 129 COMPUTE_UNIT Example Requests APM Pro with 5 hosts mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: HOSTS, quantity: 5 } ] } ] ) { enqueued errors { message path } } } Copy APM Pro CU with 3000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 126, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Mobile New Relic Mobileâs pricing structure allows 100,000 monthly active users per account at the Enterprise subscription level. Data retention varies by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Lite 49 Not applicable Not applicable Enterprise 54 APPS USERS Enterprise Annual 55 APPS USERS Example Request Mobile Enterprise with 1 App and 100,000 Monthly Active user mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 54, unitsOfMeasure: [ { unit: APPS, quantity: 1 }, { unit: USERS, quantity: 100000 } ] } ] ) { enqueued errors { message path } } } Copy Insights New Relic Insights bases the pricing structure on the number of allowable events stored and the associated data retention policy. For example, data retention for Insights Free is one day. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Free 67 Not applicable Not applicable None 65 Not applicable Not applicable Pro 66 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Pro Annual 69 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Example Request Insights Pro with 7 days data retention and 25 million events mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 66, unitsOfMeasure: [ { unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, { unit: EVENTS_IN_MILLIONS, quantity: 25 } ] } ] ) { enqueued errors { message path } } } Copy Browser New Relic Browserâs pricing structure allows an unlimited number of app users, regardless of subscription level. However, the number of allowable page views per month and the data retention period vary by subscription level. For example: Lite accounts include an unlimited number of page views per month and 24-hour data retention. Pro account pricing starts at 500,000 page views per month and three months data retention. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Lite 76 Not applicable Pro 72 PAGE_VIEWS Pro Annual 73 PAGE_VIEWS Example Request Browser Pro with 500,000 page views mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: PAGE_VIEWS, quantity: 500000 } ] } ] ) { enqueued errors { message path } } } Copy Synthetics With New Relic Synthetics' pricing structure, the default number of allowable monitoring checks and the data retention period vary by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 Lite 81 Not applicable Pro 77 CHECKS Pro Annual 78 CHECKS Example Request Synthetics Pro with 10,000 checks mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 77, unitsOfMeasure: [ { unit: CHECKS, quantity: 10000 } ] } ] ) { enqueued errors { message path } } } Copy Infrastructure With New Relic Infrastructureâs pricing structure, the default number of instances and the data retention period vary by subscription level. Infrastructure events do not count against your New Relic Insights quota, even though you can query them in Insights. New Relic Infrastructure offers pricing plans based on Compute Units (CU) only. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Infrastructure None 142 Not applicable Infrastructure Pro (CU) 134 COMPUTE_UNIT Infrastructure Pro Annual (CU) 135 COMPUTE_UNIT Infrastructure Essentials (CU) 136 COMPUTE_UNIT Infrastructure Essentials Annual (CU) 137 COMPUTE_UNIT Example Request Infrastructure Pro with 5,000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 134, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 5000 } ] } ] ) { enqueued errors { message path } } } Copy Serverless for Lambda Subscription level products.id unitsOfMeasure.unit.1 Serverless Annual 9010 INGESTED_EVENTS Serverless Monthly 9000 INGESTED_EVENTS Example Request Serverless Monthly with 3,000 ingested events in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9000, unitsOfMeasure: [ { unit: INGESTED_EVENTS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Traces Subscription level products.id unitsOfMeasure.unit.1 Traces Annual 9200 SPANS_IN_MILLIONS Traces Monthly 9210 SPANS_IN_MILLIONS Example Request Traces Annual with 3,000 spans in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9200, unitsOfMeasure: [ { unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Logs Subscription level products.id unitsOfMeasure.unit.1 Logs Annual Commit - 8 Days 9110 GB_PER_DAY Logs Annual Commit - 15 Days 9111 GB_PER_DAY Logs Annual Commit - 30 Days 9112 GB_PER_DAY Logs Monthly Commit - 8 Days 9100 GB_PER_DAY Logs Monthly Commit - 15 Days 9101 GB_PER_DAY Logs Monthly Commit - 30 Days 9102 GB_PER_DAY Example Request Logs with 8 days data retention and 100 Gigabytes per day mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9100, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 } ] } ] ) { enqueued errors { message path } } } Copy Metrics Subscription level products.id unitsOfMeasure.unit.1 Metrics Annual Commit 9310 DPM Metrics Monthly Commit 9300 DPM Example Request Metrics Monthly Commitment with 50 Data Points Per Minute mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9300, unitsOfMeasure: [ { unit: DPM, quantity: 50 } ] } ] ) { enqueued errors { message path } } } Copy GraphQL Types The Provisioning API uses the following GraphQL types: Subscription Name Type Description account_id Integer Numeric ID of the partner account for the partnership to which the affected account belongs. affected_account_id Integer Numeric ID of the account to which the changes described in the products field will be applied. products Array of Product Collection of type Product representing the values that will compose the new Subscription for the Affected Account. Product Name Type Description Id Integer Numeric ID for the Product to be added to the Subscription. Name String Name of the Product to be added to the Subscription. Unit of Measure Array of Unit of Measure Collection of type Unit of Measure for this single product. Unit of measure Name Type Description quantity Integer Numeric value for the amount of units to be applied to the Subscription. unit String Name of the unit to be applied to the product (varies by product line). Examples Here are examples of an API call to create a subscription and the JSON response. Create (replace existing) subscription with many products mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9410, unitsOfMeasure: [{unit: INCIDENT_EVENTS, quantity: 50}] }, { id: 42, unitsOfMeasure: [{unit: HOSTS, quantity: 5 }] }, { id: 42, unitsOfMeasure: [{unit: PAGE_VIEWS, quantity: 500000}] }, { id: 134, unitsOfMeasure: [{unit: COMPUTE_UNIT, quantity: 5000}] }, { id: 66, unitsOfMeasure: [ {unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, {unit: EVENTS_IN_MILLIONS, quantity: 25 } ] }, { id: 9100, unitsOfMeasure: [{unit: GB_PER_DAY, quantity: 100 } ] }, { id: 9300, unitsOfMeasure: [{unit: DPM, quantity: 50 } ] }, { id: 54, unitsOfMeasure: [ {unit: APPS, quantity: 1 }, {unit: USERS, quantity: 100000 } ] }, { id: 9000, unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] }, { id: 77, unitsOfMeasure: [{unit: CHECKS, quantity: 10000 } ] }, { id: 9200, unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Create (replace existing) subscription with one product - Logs mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 9110, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 }, { unit: DATA_RETENTION_IN_DAYS, quantity: 8 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Response: Once the Provisioning API has received your request and has validated it is in the right format it will respond with a message like this. This does not mean that your message has been successfully processed or applied; but it has been validated to be in the right format and it enqueued for processing. { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Variations from the Partnership API These are some key differences between the Provisioning API and the Partner API that frequent Partner API users should know: Feature Description API keys The Provisioning API uses a Personal API key. The Partner API uses the Partnership API key. productId and product_id The product idâs used for the Provisioning API are different than the ones documented for the Partner API. Curl request format To make a curl request to the Provisioning API, the format will be different than the Partner API: The url endpoint is different The required api key is your personal API key Provisioning API responds only to HTTP POST requests Serverless INGESTED_EVENTS units are in millions sending unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] will be interpreted by the Provisioning API as 3,000 million events. Insights and Mobile require 2 units of measure Insights requires DATA_RETENTION_IN_DAYS and EVENTS_IN_MILLIONS Mobile requires APPS and USERS. Logs data retention unit of measure is determined by productID This is specified in the product name: Logs Annual Commit - 8 Days | product ID: 9110 Logs Annual Commit - 15 Days | product ID: 9111 Logs Annual Commit - 30 Days | product ID: 9112 Logs Monthly Commit - 8 Days | product ID: 9100 Logs Monthly Commit - 15 Days | product ID: 9101 Logs Monthly Commit - 30 Days | product ID: 9102",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.99248,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NerdGraph tutorial: <em>Partner</em> and reseller subscriptions",
        "sections": "Variations from the <em>Partnership</em> <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Important The Provisioning <em>API</em> is only available for <em>Partner</em> accounts. The Provisioning NerdGraph <em>API</em> allows you, as a <em>New</em> <em>Relic</em> <em>partner</em> to create subscriptions for your accounts containing a more extensive range of <em>New</em> <em>Relic</em> products than the <em>Partner</em> <em>API</em>. The Provisioning <em>API</em> and <em>Partnership</em> <em>API</em>"
      },
      "id": "6043ff97e7b9d25a6f5799c1"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-sub-account-object": [
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-05-22T08:28:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.25192,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> products, pricing, and billing",
        "sections": "Customized <em>partnership</em> pricing",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " by <em>partnership</em>--the actual pricing model used is subject to the contractual terms of the <em>partner</em>&#x27;s agreement with <em>New</em> <em>Relic</em>. Contact your Alliance &amp; Channels representative at <em>New</em> <em>Relic</em> to learn more. <em>Partnership</em> billing options <em>New</em> <em>Relic</em> supports the following billing options for <em>partnerships</em>. All"
      },
      "id": "603ece55e7b9d254192a080c"
    },
    {
      "sections": [
        "Partnership API reference",
        "Requirements",
        "Find your Partnership API key",
        "Find your Partner ID",
        "Authenticate the API call",
        "Notes for partners who manage New Relic accounts",
        "Errors"
      ],
      "title": "Partnership API reference",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7bc374ae0e6f6917aa82a70e582606ea4a9878ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference/",
      "published_at": "2021-05-22T15:40:26Z",
      "updated_at": "2021-03-30T03:04:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains technical details about using the Partnership API. For an introduction and requirements, first read Intro to Partnership API. Requirements For requirements, see Intro to Partnership API. Find your Partnership API key The Partnership API requires that you authenticate with the REST API key that is specific to your partnership owner account (you cannot use the other REST API keys). When using your Partnership API key with calls to REST API (v2) endpoints that require the use of an Admin user's API key, see Admin user's API Key and partnerships. Find your Partner ID The Partnership API also requires that you authenticate by providing a Partner ID specific to your partnership. This is unique from the account ID for your partnership owner account. To obtain your Partner ID, go to your partner admin console and retrieve the partner ID number that is listed in your URL: https://partner-admin-console.newrelic.com/accounts/â$ACCOUNT_ID/admin_console/partnerships/$PARTNER_ID Copy You must include the Partner ID as part of the base URL for the Partner API. URL component URL pattern Partner API endpoint https://rpm.newrelic.com/api/v2/partners/PARTNER_ID Copy Resource URL patterns /accounts /accounts/ACCOUNT_ID /accounts/ACCOUNT_ID/users /accounts/ACCOUNT_ID/users/USER_ID /accounts/ACCOUNT_ID/subscriptions /accounts/ACCOUNT_ID/subscriptions/SUBSCRIPTION_ID Copy Example https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/ACCOUNT_ID Copy Authenticate the API call To authenticate to the Partner API when making an API call: Add a request header labeled x-api-key and set its value to your Partner API key. Include your Partner ID at the specified point in the request URI. Notes for partners who manage New Relic accounts For partners who manage New Relic accounts for their customers, the initial API call for all account-level interactions is to \"create account.\" This call returns an xml record of the newly created account. Part of this record is the account_id. All of the other calls in the Partnership API require the account_id as a parameter. Provision will need to be made by the partner to parse the returned xml extract, store the account_id, and associate it with the users' partner account record. Errors New Relic uses conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success and codes in the 4xx range indicate an error that resulted from the provided information (for example, a required parameter was missing). Error Probable cause 400 Bad Request Most commonly the call is missing a required parameter. 401 Unauthorized A valid API key was not provided. 402 Request Failed Parameters were valid but request failed for some reason. 404 Not Found The requested item doesn't exist. 422 Unprocessable Entity Your account has special terms and cannot be changed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.43861,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> reference",
        "sections": "Notes for <em>partners</em> who manage <em>New</em> <em>Relic</em> accounts",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>API</em> key that is specific to your <em>partnership</em> owner account (you cannot use the other REST <em>API</em> keys). When using your <em>Partnership</em> <em>API</em> key with calls to REST <em>API</em> (v2) endpoints that require the use of an Admin user&#x27;s <em>API</em> key, see Admin user&#x27;s <em>API</em> Key and <em>partnerships</em>. Find your <em>Partner</em> ID"
      },
      "id": "603ebc5f28ccbc22b6eba780"
    },
    {
      "sections": [
        "NerdGraph tutorial: Partner and reseller subscriptions",
        "Important",
        "Get started: endpoint and API key",
        "Product subscriptions for an account",
        "Tip",
        "Mapping for products (productId)",
        "APM",
        "Example Requests",
        "Mobile",
        "Example Request",
        "Insights",
        "Browser",
        "Synthetics",
        "Infrastructure",
        "Serverless for Lambda",
        "Traces",
        "Logs",
        "Metrics",
        "GraphQL Types",
        "Subscription",
        "Product",
        "Unit of measure",
        "Examples",
        "Create (replace existing) subscription with many products",
        "Create (replace existing) subscription with one product - Logs",
        "Variations from the Partnership API"
      ],
      "title": "NerdGraph tutorial: Partner and reseller subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Getting started"
      ],
      "external_id": "b5831e3798a6356482988d72fc3b5dc2d39c6aad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/provisions-your-subscriptions-nerdgraph/",
      "published_at": "2021-05-21T22:58:20Z",
      "updated_at": "2021-05-11T05:05:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The Provisioning API is only available for Partner accounts. The Provisioning NerdGraph API allows you, as a New Relic partner to create subscriptions for your accounts containing a more extensive range of New Relic products than the Partner API. The Provisioning API and Partnership API are compatible when it comes to the products supported by both (APM, Mobile, Insights, Browser, Synthetics, and Infrastructure). If you use the Provisioning API to create a subscription for any of the newer products, you will no longer be able to update the account using the Partnership API V2. The Provisioning API is a GraphQL mutation field named organizationProvisioningUpdatePartnerSubscription. To learn more about how to use this mutation, see Introduction to NerdGraph. Get started: endpoint and API key The provisioning API uses your user key. The endpoint for the Provisioning API is: https://api.newrelic.com/graphql Copy To get started, run the following command: curl -v -d'{\"query\": \"mutation { organizationProvisioningUpdatePartnerSubscription(accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [{id: 9200, name: \\\"Traces\\\", unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 40}]}]) {enqueued errors {message path } } }\"}' -H'Content-type: application/json' -H'Api-key: PERSONAL_API_KEY' https://api.newrelic.com/graphql Copy Product subscriptions for an account The Provisioning API does not allow you to upgrade or downgrade individual product subscriptions for an account. Instead, the API requires you to replace (add) the configuration for all product subscriptions for the account. Tip If any product configurations are not included, the Provisioning API automatically provisions the account with a free product (when available). Mapping for products (productId) With each account creation call, you must supply at least one New Relic product type. The mutation query only accepts the numeric productId for the type. APM The number of allowable hosts per account and the data retention period vary by subscription level within New Relic APMâs pricing structure. For example, New Relic APM allows an unlimited number of allowable hosts for Lite accounts, but only a 24-hour data retention period. In addition, pricing and data retention depend on whether you select pricing plans based on hosts or compute units (CU). Use the product IDâs integer format to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Lite 18 Not applicable Standard 41 HOSTS Standard Annual 38 HOSTS Pro (Host) 42 HOSTS Pro Annual (Host) 39 HOSTS Enterprise 43 HOSTS Enterprise Annual 40 HOSTS If you select pricing plans based on compute units (CU), use these product ID integer formats to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Pro CU 126 COMPUTE_UNIT Pro Annual CU 127 COMPUTE_UNIT APM Essentials CU 128 COMPUTE_UNIT APM Essentials Annual CU 129 COMPUTE_UNIT Example Requests APM Pro with 5 hosts mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: HOSTS, quantity: 5 } ] } ] ) { enqueued errors { message path } } } Copy APM Pro CU with 3000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 126, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Mobile New Relic Mobileâs pricing structure allows 100,000 monthly active users per account at the Enterprise subscription level. Data retention varies by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Lite 49 Not applicable Not applicable Enterprise 54 APPS USERS Enterprise Annual 55 APPS USERS Example Request Mobile Enterprise with 1 App and 100,000 Monthly Active user mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 54, unitsOfMeasure: [ { unit: APPS, quantity: 1 }, { unit: USERS, quantity: 100000 } ] } ] ) { enqueued errors { message path } } } Copy Insights New Relic Insights bases the pricing structure on the number of allowable events stored and the associated data retention policy. For example, data retention for Insights Free is one day. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Free 67 Not applicable Not applicable None 65 Not applicable Not applicable Pro 66 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Pro Annual 69 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Example Request Insights Pro with 7 days data retention and 25 million events mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 66, unitsOfMeasure: [ { unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, { unit: EVENTS_IN_MILLIONS, quantity: 25 } ] } ] ) { enqueued errors { message path } } } Copy Browser New Relic Browserâs pricing structure allows an unlimited number of app users, regardless of subscription level. However, the number of allowable page views per month and the data retention period vary by subscription level. For example: Lite accounts include an unlimited number of page views per month and 24-hour data retention. Pro account pricing starts at 500,000 page views per month and three months data retention. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Lite 76 Not applicable Pro 72 PAGE_VIEWS Pro Annual 73 PAGE_VIEWS Example Request Browser Pro with 500,000 page views mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: PAGE_VIEWS, quantity: 500000 } ] } ] ) { enqueued errors { message path } } } Copy Synthetics With New Relic Synthetics' pricing structure, the default number of allowable monitoring checks and the data retention period vary by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 Lite 81 Not applicable Pro 77 CHECKS Pro Annual 78 CHECKS Example Request Synthetics Pro with 10,000 checks mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 77, unitsOfMeasure: [ { unit: CHECKS, quantity: 10000 } ] } ] ) { enqueued errors { message path } } } Copy Infrastructure With New Relic Infrastructureâs pricing structure, the default number of instances and the data retention period vary by subscription level. Infrastructure events do not count against your New Relic Insights quota, even though you can query them in Insights. New Relic Infrastructure offers pricing plans based on Compute Units (CU) only. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Infrastructure None 142 Not applicable Infrastructure Pro (CU) 134 COMPUTE_UNIT Infrastructure Pro Annual (CU) 135 COMPUTE_UNIT Infrastructure Essentials (CU) 136 COMPUTE_UNIT Infrastructure Essentials Annual (CU) 137 COMPUTE_UNIT Example Request Infrastructure Pro with 5,000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 134, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 5000 } ] } ] ) { enqueued errors { message path } } } Copy Serverless for Lambda Subscription level products.id unitsOfMeasure.unit.1 Serverless Annual 9010 INGESTED_EVENTS Serverless Monthly 9000 INGESTED_EVENTS Example Request Serverless Monthly with 3,000 ingested events in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9000, unitsOfMeasure: [ { unit: INGESTED_EVENTS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Traces Subscription level products.id unitsOfMeasure.unit.1 Traces Annual 9200 SPANS_IN_MILLIONS Traces Monthly 9210 SPANS_IN_MILLIONS Example Request Traces Annual with 3,000 spans in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9200, unitsOfMeasure: [ { unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Logs Subscription level products.id unitsOfMeasure.unit.1 Logs Annual Commit - 8 Days 9110 GB_PER_DAY Logs Annual Commit - 15 Days 9111 GB_PER_DAY Logs Annual Commit - 30 Days 9112 GB_PER_DAY Logs Monthly Commit - 8 Days 9100 GB_PER_DAY Logs Monthly Commit - 15 Days 9101 GB_PER_DAY Logs Monthly Commit - 30 Days 9102 GB_PER_DAY Example Request Logs with 8 days data retention and 100 Gigabytes per day mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9100, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 } ] } ] ) { enqueued errors { message path } } } Copy Metrics Subscription level products.id unitsOfMeasure.unit.1 Metrics Annual Commit 9310 DPM Metrics Monthly Commit 9300 DPM Example Request Metrics Monthly Commitment with 50 Data Points Per Minute mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9300, unitsOfMeasure: [ { unit: DPM, quantity: 50 } ] } ] ) { enqueued errors { message path } } } Copy GraphQL Types The Provisioning API uses the following GraphQL types: Subscription Name Type Description account_id Integer Numeric ID of the partner account for the partnership to which the affected account belongs. affected_account_id Integer Numeric ID of the account to which the changes described in the products field will be applied. products Array of Product Collection of type Product representing the values that will compose the new Subscription for the Affected Account. Product Name Type Description Id Integer Numeric ID for the Product to be added to the Subscription. Name String Name of the Product to be added to the Subscription. Unit of Measure Array of Unit of Measure Collection of type Unit of Measure for this single product. Unit of measure Name Type Description quantity Integer Numeric value for the amount of units to be applied to the Subscription. unit String Name of the unit to be applied to the product (varies by product line). Examples Here are examples of an API call to create a subscription and the JSON response. Create (replace existing) subscription with many products mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9410, unitsOfMeasure: [{unit: INCIDENT_EVENTS, quantity: 50}] }, { id: 42, unitsOfMeasure: [{unit: HOSTS, quantity: 5 }] }, { id: 42, unitsOfMeasure: [{unit: PAGE_VIEWS, quantity: 500000}] }, { id: 134, unitsOfMeasure: [{unit: COMPUTE_UNIT, quantity: 5000}] }, { id: 66, unitsOfMeasure: [ {unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, {unit: EVENTS_IN_MILLIONS, quantity: 25 } ] }, { id: 9100, unitsOfMeasure: [{unit: GB_PER_DAY, quantity: 100 } ] }, { id: 9300, unitsOfMeasure: [{unit: DPM, quantity: 50 } ] }, { id: 54, unitsOfMeasure: [ {unit: APPS, quantity: 1 }, {unit: USERS, quantity: 100000 } ] }, { id: 9000, unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] }, { id: 77, unitsOfMeasure: [{unit: CHECKS, quantity: 10000 } ] }, { id: 9200, unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Create (replace existing) subscription with one product - Logs mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 9110, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 }, { unit: DATA_RETENTION_IN_DAYS, quantity: 8 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Response: Once the Provisioning API has received your request and has validated it is in the right format it will respond with a message like this. This does not mean that your message has been successfully processed or applied; but it has been validated to be in the right format and it enqueued for processing. { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Variations from the Partnership API These are some key differences between the Provisioning API and the Partner API that frequent Partner API users should know: Feature Description API keys The Provisioning API uses a Personal API key. The Partner API uses the Partnership API key. productId and product_id The product idâs used for the Provisioning API are different than the ones documented for the Partner API. Curl request format To make a curl request to the Provisioning API, the format will be different than the Partner API: The url endpoint is different The required api key is your personal API key Provisioning API responds only to HTTP POST requests Serverless INGESTED_EVENTS units are in millions sending unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] will be interpreted by the Provisioning API as 3,000 million events. Insights and Mobile require 2 units of measure Insights requires DATA_RETENTION_IN_DAYS and EVENTS_IN_MILLIONS Mobile requires APPS and USERS. Logs data retention unit of measure is determined by productID This is specified in the product name: Logs Annual Commit - 8 Days | product ID: 9110 Logs Annual Commit - 15 Days | product ID: 9111 Logs Annual Commit - 30 Days | product ID: 9112 Logs Monthly Commit - 8 Days | product ID: 9100 Logs Monthly Commit - 15 Days | product ID: 9101 Logs Monthly Commit - 30 Days | product ID: 9102",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.99245,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NerdGraph tutorial: <em>Partner</em> and reseller subscriptions",
        "sections": "Variations from the <em>Partnership</em> <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Important The Provisioning <em>API</em> is only available for <em>Partner</em> accounts. The Provisioning NerdGraph <em>API</em> allows you, as a <em>New</em> <em>Relic</em> <em>partner</em> to create subscriptions for your accounts containing a more extensive range of <em>New</em> <em>Relic</em> products than the <em>Partner</em> <em>API</em>. The Provisioning <em>API</em> and <em>Partnership</em> <em>API</em>"
      },
      "id": "6043ff97e7b9d25a6f5799c1"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-subscription-object": [
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-05-22T08:28:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.25192,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> products, pricing, and billing",
        "sections": "Customized <em>partnership</em> pricing",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " by <em>partnership</em>--the actual pricing model used is subject to the contractual terms of the <em>partner</em>&#x27;s agreement with <em>New</em> <em>Relic</em>. Contact your Alliance &amp; Channels representative at <em>New</em> <em>Relic</em> to learn more. <em>Partnership</em> billing options <em>New</em> <em>Relic</em> supports the following billing options for <em>partnerships</em>. All"
      },
      "id": "603ece55e7b9d254192a080c"
    },
    {
      "sections": [
        "Partnership API reference",
        "Requirements",
        "Find your Partnership API key",
        "Find your Partner ID",
        "Authenticate the API call",
        "Notes for partners who manage New Relic accounts",
        "Errors"
      ],
      "title": "Partnership API reference",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7bc374ae0e6f6917aa82a70e582606ea4a9878ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference/",
      "published_at": "2021-05-22T15:40:26Z",
      "updated_at": "2021-03-30T03:04:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains technical details about using the Partnership API. For an introduction and requirements, first read Intro to Partnership API. Requirements For requirements, see Intro to Partnership API. Find your Partnership API key The Partnership API requires that you authenticate with the REST API key that is specific to your partnership owner account (you cannot use the other REST API keys). When using your Partnership API key with calls to REST API (v2) endpoints that require the use of an Admin user's API key, see Admin user's API Key and partnerships. Find your Partner ID The Partnership API also requires that you authenticate by providing a Partner ID specific to your partnership. This is unique from the account ID for your partnership owner account. To obtain your Partner ID, go to your partner admin console and retrieve the partner ID number that is listed in your URL: https://partner-admin-console.newrelic.com/accounts/â$ACCOUNT_ID/admin_console/partnerships/$PARTNER_ID Copy You must include the Partner ID as part of the base URL for the Partner API. URL component URL pattern Partner API endpoint https://rpm.newrelic.com/api/v2/partners/PARTNER_ID Copy Resource URL patterns /accounts /accounts/ACCOUNT_ID /accounts/ACCOUNT_ID/users /accounts/ACCOUNT_ID/users/USER_ID /accounts/ACCOUNT_ID/subscriptions /accounts/ACCOUNT_ID/subscriptions/SUBSCRIPTION_ID Copy Example https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/ACCOUNT_ID Copy Authenticate the API call To authenticate to the Partner API when making an API call: Add a request header labeled x-api-key and set its value to your Partner API key. Include your Partner ID at the specified point in the request URI. Notes for partners who manage New Relic accounts For partners who manage New Relic accounts for their customers, the initial API call for all account-level interactions is to \"create account.\" This call returns an xml record of the newly created account. Part of this record is the account_id. All of the other calls in the Partnership API require the account_id as a parameter. Provision will need to be made by the partner to parse the returned xml extract, store the account_id, and associate it with the users' partner account record. Errors New Relic uses conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success and codes in the 4xx range indicate an error that resulted from the provided information (for example, a required parameter was missing). Error Probable cause 400 Bad Request Most commonly the call is missing a required parameter. 401 Unauthorized A valid API key was not provided. 402 Request Failed Parameters were valid but request failed for some reason. 404 Not Found The requested item doesn't exist. 422 Unprocessable Entity Your account has special terms and cannot be changed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.43861,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> reference",
        "sections": "Notes for <em>partners</em> who manage <em>New</em> <em>Relic</em> accounts",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>API</em> key that is specific to your <em>partnership</em> owner account (you cannot use the other REST <em>API</em> keys). When using your <em>Partnership</em> <em>API</em> key with calls to REST <em>API</em> (v2) endpoints that require the use of an Admin user&#x27;s <em>API</em> key, see Admin user&#x27;s <em>API</em> Key and <em>partnerships</em>. Find your <em>Partner</em> ID"
      },
      "id": "603ebc5f28ccbc22b6eba780"
    },
    {
      "sections": [
        "NerdGraph tutorial: Partner and reseller subscriptions",
        "Important",
        "Get started: endpoint and API key",
        "Product subscriptions for an account",
        "Tip",
        "Mapping for products (productId)",
        "APM",
        "Example Requests",
        "Mobile",
        "Example Request",
        "Insights",
        "Browser",
        "Synthetics",
        "Infrastructure",
        "Serverless for Lambda",
        "Traces",
        "Logs",
        "Metrics",
        "GraphQL Types",
        "Subscription",
        "Product",
        "Unit of measure",
        "Examples",
        "Create (replace existing) subscription with many products",
        "Create (replace existing) subscription with one product - Logs",
        "Variations from the Partnership API"
      ],
      "title": "NerdGraph tutorial: Partner and reseller subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Getting started"
      ],
      "external_id": "b5831e3798a6356482988d72fc3b5dc2d39c6aad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/provisions-your-subscriptions-nerdgraph/",
      "published_at": "2021-05-21T22:58:20Z",
      "updated_at": "2021-05-11T05:05:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The Provisioning API is only available for Partner accounts. The Provisioning NerdGraph API allows you, as a New Relic partner to create subscriptions for your accounts containing a more extensive range of New Relic products than the Partner API. The Provisioning API and Partnership API are compatible when it comes to the products supported by both (APM, Mobile, Insights, Browser, Synthetics, and Infrastructure). If you use the Provisioning API to create a subscription for any of the newer products, you will no longer be able to update the account using the Partnership API V2. The Provisioning API is a GraphQL mutation field named organizationProvisioningUpdatePartnerSubscription. To learn more about how to use this mutation, see Introduction to NerdGraph. Get started: endpoint and API key The provisioning API uses your user key. The endpoint for the Provisioning API is: https://api.newrelic.com/graphql Copy To get started, run the following command: curl -v -d'{\"query\": \"mutation { organizationProvisioningUpdatePartnerSubscription(accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [{id: 9200, name: \\\"Traces\\\", unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 40}]}]) {enqueued errors {message path } } }\"}' -H'Content-type: application/json' -H'Api-key: PERSONAL_API_KEY' https://api.newrelic.com/graphql Copy Product subscriptions for an account The Provisioning API does not allow you to upgrade or downgrade individual product subscriptions for an account. Instead, the API requires you to replace (add) the configuration for all product subscriptions for the account. Tip If any product configurations are not included, the Provisioning API automatically provisions the account with a free product (when available). Mapping for products (productId) With each account creation call, you must supply at least one New Relic product type. The mutation query only accepts the numeric productId for the type. APM The number of allowable hosts per account and the data retention period vary by subscription level within New Relic APMâs pricing structure. For example, New Relic APM allows an unlimited number of allowable hosts for Lite accounts, but only a 24-hour data retention period. In addition, pricing and data retention depend on whether you select pricing plans based on hosts or compute units (CU). Use the product IDâs integer format to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Lite 18 Not applicable Standard 41 HOSTS Standard Annual 38 HOSTS Pro (Host) 42 HOSTS Pro Annual (Host) 39 HOSTS Enterprise 43 HOSTS Enterprise Annual 40 HOSTS If you select pricing plans based on compute units (CU), use these product ID integer formats to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Pro CU 126 COMPUTE_UNIT Pro Annual CU 127 COMPUTE_UNIT APM Essentials CU 128 COMPUTE_UNIT APM Essentials Annual CU 129 COMPUTE_UNIT Example Requests APM Pro with 5 hosts mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: HOSTS, quantity: 5 } ] } ] ) { enqueued errors { message path } } } Copy APM Pro CU with 3000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 126, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Mobile New Relic Mobileâs pricing structure allows 100,000 monthly active users per account at the Enterprise subscription level. Data retention varies by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Lite 49 Not applicable Not applicable Enterprise 54 APPS USERS Enterprise Annual 55 APPS USERS Example Request Mobile Enterprise with 1 App and 100,000 Monthly Active user mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 54, unitsOfMeasure: [ { unit: APPS, quantity: 1 }, { unit: USERS, quantity: 100000 } ] } ] ) { enqueued errors { message path } } } Copy Insights New Relic Insights bases the pricing structure on the number of allowable events stored and the associated data retention policy. For example, data retention for Insights Free is one day. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Free 67 Not applicable Not applicable None 65 Not applicable Not applicable Pro 66 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Pro Annual 69 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Example Request Insights Pro with 7 days data retention and 25 million events mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 66, unitsOfMeasure: [ { unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, { unit: EVENTS_IN_MILLIONS, quantity: 25 } ] } ] ) { enqueued errors { message path } } } Copy Browser New Relic Browserâs pricing structure allows an unlimited number of app users, regardless of subscription level. However, the number of allowable page views per month and the data retention period vary by subscription level. For example: Lite accounts include an unlimited number of page views per month and 24-hour data retention. Pro account pricing starts at 500,000 page views per month and three months data retention. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Lite 76 Not applicable Pro 72 PAGE_VIEWS Pro Annual 73 PAGE_VIEWS Example Request Browser Pro with 500,000 page views mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: PAGE_VIEWS, quantity: 500000 } ] } ] ) { enqueued errors { message path } } } Copy Synthetics With New Relic Synthetics' pricing structure, the default number of allowable monitoring checks and the data retention period vary by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 Lite 81 Not applicable Pro 77 CHECKS Pro Annual 78 CHECKS Example Request Synthetics Pro with 10,000 checks mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 77, unitsOfMeasure: [ { unit: CHECKS, quantity: 10000 } ] } ] ) { enqueued errors { message path } } } Copy Infrastructure With New Relic Infrastructureâs pricing structure, the default number of instances and the data retention period vary by subscription level. Infrastructure events do not count against your New Relic Insights quota, even though you can query them in Insights. New Relic Infrastructure offers pricing plans based on Compute Units (CU) only. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Infrastructure None 142 Not applicable Infrastructure Pro (CU) 134 COMPUTE_UNIT Infrastructure Pro Annual (CU) 135 COMPUTE_UNIT Infrastructure Essentials (CU) 136 COMPUTE_UNIT Infrastructure Essentials Annual (CU) 137 COMPUTE_UNIT Example Request Infrastructure Pro with 5,000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 134, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 5000 } ] } ] ) { enqueued errors { message path } } } Copy Serverless for Lambda Subscription level products.id unitsOfMeasure.unit.1 Serverless Annual 9010 INGESTED_EVENTS Serverless Monthly 9000 INGESTED_EVENTS Example Request Serverless Monthly with 3,000 ingested events in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9000, unitsOfMeasure: [ { unit: INGESTED_EVENTS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Traces Subscription level products.id unitsOfMeasure.unit.1 Traces Annual 9200 SPANS_IN_MILLIONS Traces Monthly 9210 SPANS_IN_MILLIONS Example Request Traces Annual with 3,000 spans in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9200, unitsOfMeasure: [ { unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Logs Subscription level products.id unitsOfMeasure.unit.1 Logs Annual Commit - 8 Days 9110 GB_PER_DAY Logs Annual Commit - 15 Days 9111 GB_PER_DAY Logs Annual Commit - 30 Days 9112 GB_PER_DAY Logs Monthly Commit - 8 Days 9100 GB_PER_DAY Logs Monthly Commit - 15 Days 9101 GB_PER_DAY Logs Monthly Commit - 30 Days 9102 GB_PER_DAY Example Request Logs with 8 days data retention and 100 Gigabytes per day mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9100, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 } ] } ] ) { enqueued errors { message path } } } Copy Metrics Subscription level products.id unitsOfMeasure.unit.1 Metrics Annual Commit 9310 DPM Metrics Monthly Commit 9300 DPM Example Request Metrics Monthly Commitment with 50 Data Points Per Minute mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9300, unitsOfMeasure: [ { unit: DPM, quantity: 50 } ] } ] ) { enqueued errors { message path } } } Copy GraphQL Types The Provisioning API uses the following GraphQL types: Subscription Name Type Description account_id Integer Numeric ID of the partner account for the partnership to which the affected account belongs. affected_account_id Integer Numeric ID of the account to which the changes described in the products field will be applied. products Array of Product Collection of type Product representing the values that will compose the new Subscription for the Affected Account. Product Name Type Description Id Integer Numeric ID for the Product to be added to the Subscription. Name String Name of the Product to be added to the Subscription. Unit of Measure Array of Unit of Measure Collection of type Unit of Measure for this single product. Unit of measure Name Type Description quantity Integer Numeric value for the amount of units to be applied to the Subscription. unit String Name of the unit to be applied to the product (varies by product line). Examples Here are examples of an API call to create a subscription and the JSON response. Create (replace existing) subscription with many products mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9410, unitsOfMeasure: [{unit: INCIDENT_EVENTS, quantity: 50}] }, { id: 42, unitsOfMeasure: [{unit: HOSTS, quantity: 5 }] }, { id: 42, unitsOfMeasure: [{unit: PAGE_VIEWS, quantity: 500000}] }, { id: 134, unitsOfMeasure: [{unit: COMPUTE_UNIT, quantity: 5000}] }, { id: 66, unitsOfMeasure: [ {unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, {unit: EVENTS_IN_MILLIONS, quantity: 25 } ] }, { id: 9100, unitsOfMeasure: [{unit: GB_PER_DAY, quantity: 100 } ] }, { id: 9300, unitsOfMeasure: [{unit: DPM, quantity: 50 } ] }, { id: 54, unitsOfMeasure: [ {unit: APPS, quantity: 1 }, {unit: USERS, quantity: 100000 } ] }, { id: 9000, unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] }, { id: 77, unitsOfMeasure: [{unit: CHECKS, quantity: 10000 } ] }, { id: 9200, unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Create (replace existing) subscription with one product - Logs mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 9110, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 }, { unit: DATA_RETENTION_IN_DAYS, quantity: 8 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Response: Once the Provisioning API has received your request and has validated it is in the right format it will respond with a message like this. This does not mean that your message has been successfully processed or applied; but it has been validated to be in the right format and it enqueued for processing. { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Variations from the Partnership API These are some key differences between the Provisioning API and the Partner API that frequent Partner API users should know: Feature Description API keys The Provisioning API uses a Personal API key. The Partner API uses the Partnership API key. productId and product_id The product idâs used for the Provisioning API are different than the ones documented for the Partner API. Curl request format To make a curl request to the Provisioning API, the format will be different than the Partner API: The url endpoint is different The required api key is your personal API key Provisioning API responds only to HTTP POST requests Serverless INGESTED_EVENTS units are in millions sending unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] will be interpreted by the Provisioning API as 3,000 million events. Insights and Mobile require 2 units of measure Insights requires DATA_RETENTION_IN_DAYS and EVENTS_IN_MILLIONS Mobile requires APPS and USERS. Logs data retention unit of measure is determined by productID This is specified in the product name: Logs Annual Commit - 8 Days | product ID: 9110 Logs Annual Commit - 15 Days | product ID: 9111 Logs Annual Commit - 30 Days | product ID: 9112 Logs Monthly Commit - 8 Days | product ID: 9100 Logs Monthly Commit - 15 Days | product ID: 9101 Logs Monthly Commit - 30 Days | product ID: 9102",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.99245,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NerdGraph tutorial: <em>Partner</em> and reseller subscriptions",
        "sections": "Variations from the <em>Partnership</em> <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Important The Provisioning <em>API</em> is only available for <em>Partner</em> accounts. The Provisioning NerdGraph <em>API</em> allows you, as a <em>New</em> <em>Relic</em> <em>partner</em> to create subscriptions for your accounts containing a more extensive range of <em>New</em> <em>Relic</em> products than the <em>Partner</em> <em>API</em>. The Provisioning <em>API</em> and <em>Partnership</em> <em>API</em>"
      },
      "id": "6043ff97e7b9d25a6f5799c1"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-user-object": [
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-05-22T08:28:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.25192,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> products, pricing, and billing",
        "sections": "Customized <em>partnership</em> pricing",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " by <em>partnership</em>--the actual pricing model used is subject to the contractual terms of the <em>partner</em>&#x27;s agreement with <em>New</em> <em>Relic</em>. Contact your Alliance &amp; Channels representative at <em>New</em> <em>Relic</em> to learn more. <em>Partnership</em> billing options <em>New</em> <em>Relic</em> supports the following billing options for <em>partnerships</em>. All"
      },
      "id": "603ece55e7b9d254192a080c"
    },
    {
      "sections": [
        "Partnership API reference",
        "Requirements",
        "Find your Partnership API key",
        "Find your Partner ID",
        "Authenticate the API call",
        "Notes for partners who manage New Relic accounts",
        "Errors"
      ],
      "title": "Partnership API reference",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7bc374ae0e6f6917aa82a70e582606ea4a9878ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference/",
      "published_at": "2021-05-22T15:40:26Z",
      "updated_at": "2021-03-30T03:04:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains technical details about using the Partnership API. For an introduction and requirements, first read Intro to Partnership API. Requirements For requirements, see Intro to Partnership API. Find your Partnership API key The Partnership API requires that you authenticate with the REST API key that is specific to your partnership owner account (you cannot use the other REST API keys). When using your Partnership API key with calls to REST API (v2) endpoints that require the use of an Admin user's API key, see Admin user's API Key and partnerships. Find your Partner ID The Partnership API also requires that you authenticate by providing a Partner ID specific to your partnership. This is unique from the account ID for your partnership owner account. To obtain your Partner ID, go to your partner admin console and retrieve the partner ID number that is listed in your URL: https://partner-admin-console.newrelic.com/accounts/â$ACCOUNT_ID/admin_console/partnerships/$PARTNER_ID Copy You must include the Partner ID as part of the base URL for the Partner API. URL component URL pattern Partner API endpoint https://rpm.newrelic.com/api/v2/partners/PARTNER_ID Copy Resource URL patterns /accounts /accounts/ACCOUNT_ID /accounts/ACCOUNT_ID/users /accounts/ACCOUNT_ID/users/USER_ID /accounts/ACCOUNT_ID/subscriptions /accounts/ACCOUNT_ID/subscriptions/SUBSCRIPTION_ID Copy Example https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/ACCOUNT_ID Copy Authenticate the API call To authenticate to the Partner API when making an API call: Add a request header labeled x-api-key and set its value to your Partner API key. Include your Partner ID at the specified point in the request URI. Notes for partners who manage New Relic accounts For partners who manage New Relic accounts for their customers, the initial API call for all account-level interactions is to \"create account.\" This call returns an xml record of the newly created account. Part of this record is the account_id. All of the other calls in the Partnership API require the account_id as a parameter. Provision will need to be made by the partner to parse the returned xml extract, store the account_id, and associate it with the users' partner account record. Errors New Relic uses conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success and codes in the 4xx range indicate an error that resulted from the provided information (for example, a required parameter was missing). Error Probable cause 400 Bad Request Most commonly the call is missing a required parameter. 401 Unauthorized A valid API key was not provided. 402 Request Failed Parameters were valid but request failed for some reason. 404 Not Found The requested item doesn't exist. 422 Unprocessable Entity Your account has special terms and cannot be changed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.43861,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> reference",
        "sections": "Notes for <em>partners</em> who manage <em>New</em> <em>Relic</em> accounts",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>API</em> key that is specific to your <em>partnership</em> owner account (you cannot use the other REST <em>API</em> keys). When using your <em>Partnership</em> <em>API</em> key with calls to REST <em>API</em> (v2) endpoints that require the use of an Admin user&#x27;s <em>API</em> key, see Admin user&#x27;s <em>API</em> Key and <em>partnerships</em>. Find your <em>Partner</em> ID"
      },
      "id": "603ebc5f28ccbc22b6eba780"
    },
    {
      "sections": [
        "NerdGraph tutorial: Partner and reseller subscriptions",
        "Important",
        "Get started: endpoint and API key",
        "Product subscriptions for an account",
        "Tip",
        "Mapping for products (productId)",
        "APM",
        "Example Requests",
        "Mobile",
        "Example Request",
        "Insights",
        "Browser",
        "Synthetics",
        "Infrastructure",
        "Serverless for Lambda",
        "Traces",
        "Logs",
        "Metrics",
        "GraphQL Types",
        "Subscription",
        "Product",
        "Unit of measure",
        "Examples",
        "Create (replace existing) subscription with many products",
        "Create (replace existing) subscription with one product - Logs",
        "Variations from the Partnership API"
      ],
      "title": "NerdGraph tutorial: Partner and reseller subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Getting started"
      ],
      "external_id": "b5831e3798a6356482988d72fc3b5dc2d39c6aad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/provisions-your-subscriptions-nerdgraph/",
      "published_at": "2021-05-21T22:58:20Z",
      "updated_at": "2021-05-11T05:05:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The Provisioning API is only available for Partner accounts. The Provisioning NerdGraph API allows you, as a New Relic partner to create subscriptions for your accounts containing a more extensive range of New Relic products than the Partner API. The Provisioning API and Partnership API are compatible when it comes to the products supported by both (APM, Mobile, Insights, Browser, Synthetics, and Infrastructure). If you use the Provisioning API to create a subscription for any of the newer products, you will no longer be able to update the account using the Partnership API V2. The Provisioning API is a GraphQL mutation field named organizationProvisioningUpdatePartnerSubscription. To learn more about how to use this mutation, see Introduction to NerdGraph. Get started: endpoint and API key The provisioning API uses your user key. The endpoint for the Provisioning API is: https://api.newrelic.com/graphql Copy To get started, run the following command: curl -v -d'{\"query\": \"mutation { organizationProvisioningUpdatePartnerSubscription(accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [{id: 9200, name: \\\"Traces\\\", unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 40}]}]) {enqueued errors {message path } } }\"}' -H'Content-type: application/json' -H'Api-key: PERSONAL_API_KEY' https://api.newrelic.com/graphql Copy Product subscriptions for an account The Provisioning API does not allow you to upgrade or downgrade individual product subscriptions for an account. Instead, the API requires you to replace (add) the configuration for all product subscriptions for the account. Tip If any product configurations are not included, the Provisioning API automatically provisions the account with a free product (when available). Mapping for products (productId) With each account creation call, you must supply at least one New Relic product type. The mutation query only accepts the numeric productId for the type. APM The number of allowable hosts per account and the data retention period vary by subscription level within New Relic APMâs pricing structure. For example, New Relic APM allows an unlimited number of allowable hosts for Lite accounts, but only a 24-hour data retention period. In addition, pricing and data retention depend on whether you select pricing plans based on hosts or compute units (CU). Use the product IDâs integer format to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Lite 18 Not applicable Standard 41 HOSTS Standard Annual 38 HOSTS Pro (Host) 42 HOSTS Pro Annual (Host) 39 HOSTS Enterprise 43 HOSTS Enterprise Annual 40 HOSTS If you select pricing plans based on compute units (CU), use these product ID integer formats to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Pro CU 126 COMPUTE_UNIT Pro Annual CU 127 COMPUTE_UNIT APM Essentials CU 128 COMPUTE_UNIT APM Essentials Annual CU 129 COMPUTE_UNIT Example Requests APM Pro with 5 hosts mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: HOSTS, quantity: 5 } ] } ] ) { enqueued errors { message path } } } Copy APM Pro CU with 3000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 126, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Mobile New Relic Mobileâs pricing structure allows 100,000 monthly active users per account at the Enterprise subscription level. Data retention varies by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Lite 49 Not applicable Not applicable Enterprise 54 APPS USERS Enterprise Annual 55 APPS USERS Example Request Mobile Enterprise with 1 App and 100,000 Monthly Active user mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 54, unitsOfMeasure: [ { unit: APPS, quantity: 1 }, { unit: USERS, quantity: 100000 } ] } ] ) { enqueued errors { message path } } } Copy Insights New Relic Insights bases the pricing structure on the number of allowable events stored and the associated data retention policy. For example, data retention for Insights Free is one day. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Free 67 Not applicable Not applicable None 65 Not applicable Not applicable Pro 66 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Pro Annual 69 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Example Request Insights Pro with 7 days data retention and 25 million events mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 66, unitsOfMeasure: [ { unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, { unit: EVENTS_IN_MILLIONS, quantity: 25 } ] } ] ) { enqueued errors { message path } } } Copy Browser New Relic Browserâs pricing structure allows an unlimited number of app users, regardless of subscription level. However, the number of allowable page views per month and the data retention period vary by subscription level. For example: Lite accounts include an unlimited number of page views per month and 24-hour data retention. Pro account pricing starts at 500,000 page views per month and three months data retention. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Lite 76 Not applicable Pro 72 PAGE_VIEWS Pro Annual 73 PAGE_VIEWS Example Request Browser Pro with 500,000 page views mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: PAGE_VIEWS, quantity: 500000 } ] } ] ) { enqueued errors { message path } } } Copy Synthetics With New Relic Synthetics' pricing structure, the default number of allowable monitoring checks and the data retention period vary by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 Lite 81 Not applicable Pro 77 CHECKS Pro Annual 78 CHECKS Example Request Synthetics Pro with 10,000 checks mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 77, unitsOfMeasure: [ { unit: CHECKS, quantity: 10000 } ] } ] ) { enqueued errors { message path } } } Copy Infrastructure With New Relic Infrastructureâs pricing structure, the default number of instances and the data retention period vary by subscription level. Infrastructure events do not count against your New Relic Insights quota, even though you can query them in Insights. New Relic Infrastructure offers pricing plans based on Compute Units (CU) only. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Infrastructure None 142 Not applicable Infrastructure Pro (CU) 134 COMPUTE_UNIT Infrastructure Pro Annual (CU) 135 COMPUTE_UNIT Infrastructure Essentials (CU) 136 COMPUTE_UNIT Infrastructure Essentials Annual (CU) 137 COMPUTE_UNIT Example Request Infrastructure Pro with 5,000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 134, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 5000 } ] } ] ) { enqueued errors { message path } } } Copy Serverless for Lambda Subscription level products.id unitsOfMeasure.unit.1 Serverless Annual 9010 INGESTED_EVENTS Serverless Monthly 9000 INGESTED_EVENTS Example Request Serverless Monthly with 3,000 ingested events in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9000, unitsOfMeasure: [ { unit: INGESTED_EVENTS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Traces Subscription level products.id unitsOfMeasure.unit.1 Traces Annual 9200 SPANS_IN_MILLIONS Traces Monthly 9210 SPANS_IN_MILLIONS Example Request Traces Annual with 3,000 spans in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9200, unitsOfMeasure: [ { unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Logs Subscription level products.id unitsOfMeasure.unit.1 Logs Annual Commit - 8 Days 9110 GB_PER_DAY Logs Annual Commit - 15 Days 9111 GB_PER_DAY Logs Annual Commit - 30 Days 9112 GB_PER_DAY Logs Monthly Commit - 8 Days 9100 GB_PER_DAY Logs Monthly Commit - 15 Days 9101 GB_PER_DAY Logs Monthly Commit - 30 Days 9102 GB_PER_DAY Example Request Logs with 8 days data retention and 100 Gigabytes per day mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9100, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 } ] } ] ) { enqueued errors { message path } } } Copy Metrics Subscription level products.id unitsOfMeasure.unit.1 Metrics Annual Commit 9310 DPM Metrics Monthly Commit 9300 DPM Example Request Metrics Monthly Commitment with 50 Data Points Per Minute mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9300, unitsOfMeasure: [ { unit: DPM, quantity: 50 } ] } ] ) { enqueued errors { message path } } } Copy GraphQL Types The Provisioning API uses the following GraphQL types: Subscription Name Type Description account_id Integer Numeric ID of the partner account for the partnership to which the affected account belongs. affected_account_id Integer Numeric ID of the account to which the changes described in the products field will be applied. products Array of Product Collection of type Product representing the values that will compose the new Subscription for the Affected Account. Product Name Type Description Id Integer Numeric ID for the Product to be added to the Subscription. Name String Name of the Product to be added to the Subscription. Unit of Measure Array of Unit of Measure Collection of type Unit of Measure for this single product. Unit of measure Name Type Description quantity Integer Numeric value for the amount of units to be applied to the Subscription. unit String Name of the unit to be applied to the product (varies by product line). Examples Here are examples of an API call to create a subscription and the JSON response. Create (replace existing) subscription with many products mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9410, unitsOfMeasure: [{unit: INCIDENT_EVENTS, quantity: 50}] }, { id: 42, unitsOfMeasure: [{unit: HOSTS, quantity: 5 }] }, { id: 42, unitsOfMeasure: [{unit: PAGE_VIEWS, quantity: 500000}] }, { id: 134, unitsOfMeasure: [{unit: COMPUTE_UNIT, quantity: 5000}] }, { id: 66, unitsOfMeasure: [ {unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, {unit: EVENTS_IN_MILLIONS, quantity: 25 } ] }, { id: 9100, unitsOfMeasure: [{unit: GB_PER_DAY, quantity: 100 } ] }, { id: 9300, unitsOfMeasure: [{unit: DPM, quantity: 50 } ] }, { id: 54, unitsOfMeasure: [ {unit: APPS, quantity: 1 }, {unit: USERS, quantity: 100000 } ] }, { id: 9000, unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] }, { id: 77, unitsOfMeasure: [{unit: CHECKS, quantity: 10000 } ] }, { id: 9200, unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Create (replace existing) subscription with one product - Logs mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 9110, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 }, { unit: DATA_RETENTION_IN_DAYS, quantity: 8 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Response: Once the Provisioning API has received your request and has validated it is in the right format it will respond with a message like this. This does not mean that your message has been successfully processed or applied; but it has been validated to be in the right format and it enqueued for processing. { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Variations from the Partnership API These are some key differences between the Provisioning API and the Partner API that frequent Partner API users should know: Feature Description API keys The Provisioning API uses a Personal API key. The Partner API uses the Partnership API key. productId and product_id The product idâs used for the Provisioning API are different than the ones documented for the Partner API. Curl request format To make a curl request to the Provisioning API, the format will be different than the Partner API: The url endpoint is different The required api key is your personal API key Provisioning API responds only to HTTP POST requests Serverless INGESTED_EVENTS units are in millions sending unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] will be interpreted by the Provisioning API as 3,000 million events. Insights and Mobile require 2 units of measure Insights requires DATA_RETENTION_IN_DAYS and EVENTS_IN_MILLIONS Mobile requires APPS and USERS. Logs data retention unit of measure is determined by productID This is specified in the product name: Logs Annual Commit - 8 Days | product ID: 9110 Logs Annual Commit - 15 Days | product ID: 9111 Logs Annual Commit - 30 Days | product ID: 9112 Logs Monthly Commit - 8 Days | product ID: 9100 Logs Monthly Commit - 15 Days | product ID: 9101 Logs Monthly Commit - 30 Days | product ID: 9102",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.99245,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NerdGraph tutorial: <em>Partner</em> and reseller subscriptions",
        "sections": "Variations from the <em>Partnership</em> <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Important The Provisioning <em>API</em> is only available for <em>Partner</em> accounts. The Provisioning NerdGraph <em>API</em> allows you, as a <em>New</em> <em>Relic</em> <em>partner</em> to create subscriptions for your accounts containing a more extensive range of <em>New</em> <em>Relic</em> products than the <em>Partner</em> <em>API</em>. The Provisioning <em>API</em> and <em>Partnership</em> <em>API</em>"
      },
      "id": "6043ff97e7b9d25a6f5799c1"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/partnership-billing-integration-api": [
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-05-22T08:28:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.25188,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> products, pricing, and billing",
        "sections": "Customized <em>partnership</em> pricing",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " by <em>partnership</em>--the actual pricing model used is subject to the contractual terms of the <em>partner</em>&#x27;s agreement with <em>New</em> <em>Relic</em>. Contact your Alliance &amp; Channels representative at <em>New</em> <em>Relic</em> to learn more. <em>Partnership</em> billing options <em>New</em> <em>Relic</em> supports the following billing options for <em>partnerships</em>. All"
      },
      "id": "603ece55e7b9d254192a080c"
    },
    {
      "sections": [
        "Partnership API reference",
        "Requirements",
        "Find your Partnership API key",
        "Find your Partner ID",
        "Authenticate the API call",
        "Notes for partners who manage New Relic accounts",
        "Errors"
      ],
      "title": "Partnership API reference",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7bc374ae0e6f6917aa82a70e582606ea4a9878ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference/",
      "published_at": "2021-05-22T15:40:26Z",
      "updated_at": "2021-03-30T03:04:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains technical details about using the Partnership API. For an introduction and requirements, first read Intro to Partnership API. Requirements For requirements, see Intro to Partnership API. Find your Partnership API key The Partnership API requires that you authenticate with the REST API key that is specific to your partnership owner account (you cannot use the other REST API keys). When using your Partnership API key with calls to REST API (v2) endpoints that require the use of an Admin user's API key, see Admin user's API Key and partnerships. Find your Partner ID The Partnership API also requires that you authenticate by providing a Partner ID specific to your partnership. This is unique from the account ID for your partnership owner account. To obtain your Partner ID, go to your partner admin console and retrieve the partner ID number that is listed in your URL: https://partner-admin-console.newrelic.com/accounts/â$ACCOUNT_ID/admin_console/partnerships/$PARTNER_ID Copy You must include the Partner ID as part of the base URL for the Partner API. URL component URL pattern Partner API endpoint https://rpm.newrelic.com/api/v2/partners/PARTNER_ID Copy Resource URL patterns /accounts /accounts/ACCOUNT_ID /accounts/ACCOUNT_ID/users /accounts/ACCOUNT_ID/users/USER_ID /accounts/ACCOUNT_ID/subscriptions /accounts/ACCOUNT_ID/subscriptions/SUBSCRIPTION_ID Copy Example https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/ACCOUNT_ID Copy Authenticate the API call To authenticate to the Partner API when making an API call: Add a request header labeled x-api-key and set its value to your Partner API key. Include your Partner ID at the specified point in the request URI. Notes for partners who manage New Relic accounts For partners who manage New Relic accounts for their customers, the initial API call for all account-level interactions is to \"create account.\" This call returns an xml record of the newly created account. Part of this record is the account_id. All of the other calls in the Partnership API require the account_id as a parameter. Provision will need to be made by the partner to parse the returned xml extract, store the account_id, and associate it with the users' partner account record. Errors New Relic uses conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success and codes in the 4xx range indicate an error that resulted from the provided information (for example, a required parameter was missing). Error Probable cause 400 Bad Request Most commonly the call is missing a required parameter. 401 Unauthorized A valid API key was not provided. 402 Request Failed Parameters were valid but request failed for some reason. 404 Not Found The requested item doesn't exist. 422 Unprocessable Entity Your account has special terms and cannot be changed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.43861,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> reference",
        "sections": "Notes for <em>partners</em> who manage <em>New</em> <em>Relic</em> accounts",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>API</em> key that is specific to your <em>partnership</em> owner account (you cannot use the other REST <em>API</em> keys). When using your <em>Partnership</em> <em>API</em> key with calls to REST <em>API</em> (v2) endpoints that require the use of an Admin user&#x27;s <em>API</em> key, see Admin user&#x27;s <em>API</em> Key and <em>partnerships</em>. Find your <em>Partner</em> ID"
      },
      "id": "603ebc5f28ccbc22b6eba780"
    },
    {
      "sections": [
        "NerdGraph tutorial: Partner and reseller subscriptions",
        "Important",
        "Get started: endpoint and API key",
        "Product subscriptions for an account",
        "Tip",
        "Mapping for products (productId)",
        "APM",
        "Example Requests",
        "Mobile",
        "Example Request",
        "Insights",
        "Browser",
        "Synthetics",
        "Infrastructure",
        "Serverless for Lambda",
        "Traces",
        "Logs",
        "Metrics",
        "GraphQL Types",
        "Subscription",
        "Product",
        "Unit of measure",
        "Examples",
        "Create (replace existing) subscription with many products",
        "Create (replace existing) subscription with one product - Logs",
        "Variations from the Partnership API"
      ],
      "title": "NerdGraph tutorial: Partner and reseller subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Getting started"
      ],
      "external_id": "b5831e3798a6356482988d72fc3b5dc2d39c6aad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/provisions-your-subscriptions-nerdgraph/",
      "published_at": "2021-05-21T22:58:20Z",
      "updated_at": "2021-05-11T05:05:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The Provisioning API is only available for Partner accounts. The Provisioning NerdGraph API allows you, as a New Relic partner to create subscriptions for your accounts containing a more extensive range of New Relic products than the Partner API. The Provisioning API and Partnership API are compatible when it comes to the products supported by both (APM, Mobile, Insights, Browser, Synthetics, and Infrastructure). If you use the Provisioning API to create a subscription for any of the newer products, you will no longer be able to update the account using the Partnership API V2. The Provisioning API is a GraphQL mutation field named organizationProvisioningUpdatePartnerSubscription. To learn more about how to use this mutation, see Introduction to NerdGraph. Get started: endpoint and API key The provisioning API uses your user key. The endpoint for the Provisioning API is: https://api.newrelic.com/graphql Copy To get started, run the following command: curl -v -d'{\"query\": \"mutation { organizationProvisioningUpdatePartnerSubscription(accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [{id: 9200, name: \\\"Traces\\\", unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 40}]}]) {enqueued errors {message path } } }\"}' -H'Content-type: application/json' -H'Api-key: PERSONAL_API_KEY' https://api.newrelic.com/graphql Copy Product subscriptions for an account The Provisioning API does not allow you to upgrade or downgrade individual product subscriptions for an account. Instead, the API requires you to replace (add) the configuration for all product subscriptions for the account. Tip If any product configurations are not included, the Provisioning API automatically provisions the account with a free product (when available). Mapping for products (productId) With each account creation call, you must supply at least one New Relic product type. The mutation query only accepts the numeric productId for the type. APM The number of allowable hosts per account and the data retention period vary by subscription level within New Relic APMâs pricing structure. For example, New Relic APM allows an unlimited number of allowable hosts for Lite accounts, but only a 24-hour data retention period. In addition, pricing and data retention depend on whether you select pricing plans based on hosts or compute units (CU). Use the product IDâs integer format to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Lite 18 Not applicable Standard 41 HOSTS Standard Annual 38 HOSTS Pro (Host) 42 HOSTS Pro Annual (Host) 39 HOSTS Enterprise 43 HOSTS Enterprise Annual 40 HOSTS If you select pricing plans based on compute units (CU), use these product ID integer formats to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Pro CU 126 COMPUTE_UNIT Pro Annual CU 127 COMPUTE_UNIT APM Essentials CU 128 COMPUTE_UNIT APM Essentials Annual CU 129 COMPUTE_UNIT Example Requests APM Pro with 5 hosts mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: HOSTS, quantity: 5 } ] } ] ) { enqueued errors { message path } } } Copy APM Pro CU with 3000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 126, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Mobile New Relic Mobileâs pricing structure allows 100,000 monthly active users per account at the Enterprise subscription level. Data retention varies by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Lite 49 Not applicable Not applicable Enterprise 54 APPS USERS Enterprise Annual 55 APPS USERS Example Request Mobile Enterprise with 1 App and 100,000 Monthly Active user mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 54, unitsOfMeasure: [ { unit: APPS, quantity: 1 }, { unit: USERS, quantity: 100000 } ] } ] ) { enqueued errors { message path } } } Copy Insights New Relic Insights bases the pricing structure on the number of allowable events stored and the associated data retention policy. For example, data retention for Insights Free is one day. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Free 67 Not applicable Not applicable None 65 Not applicable Not applicable Pro 66 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Pro Annual 69 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Example Request Insights Pro with 7 days data retention and 25 million events mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 66, unitsOfMeasure: [ { unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, { unit: EVENTS_IN_MILLIONS, quantity: 25 } ] } ] ) { enqueued errors { message path } } } Copy Browser New Relic Browserâs pricing structure allows an unlimited number of app users, regardless of subscription level. However, the number of allowable page views per month and the data retention period vary by subscription level. For example: Lite accounts include an unlimited number of page views per month and 24-hour data retention. Pro account pricing starts at 500,000 page views per month and three months data retention. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Lite 76 Not applicable Pro 72 PAGE_VIEWS Pro Annual 73 PAGE_VIEWS Example Request Browser Pro with 500,000 page views mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: PAGE_VIEWS, quantity: 500000 } ] } ] ) { enqueued errors { message path } } } Copy Synthetics With New Relic Synthetics' pricing structure, the default number of allowable monitoring checks and the data retention period vary by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 Lite 81 Not applicable Pro 77 CHECKS Pro Annual 78 CHECKS Example Request Synthetics Pro with 10,000 checks mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 77, unitsOfMeasure: [ { unit: CHECKS, quantity: 10000 } ] } ] ) { enqueued errors { message path } } } Copy Infrastructure With New Relic Infrastructureâs pricing structure, the default number of instances and the data retention period vary by subscription level. Infrastructure events do not count against your New Relic Insights quota, even though you can query them in Insights. New Relic Infrastructure offers pricing plans based on Compute Units (CU) only. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Infrastructure None 142 Not applicable Infrastructure Pro (CU) 134 COMPUTE_UNIT Infrastructure Pro Annual (CU) 135 COMPUTE_UNIT Infrastructure Essentials (CU) 136 COMPUTE_UNIT Infrastructure Essentials Annual (CU) 137 COMPUTE_UNIT Example Request Infrastructure Pro with 5,000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 134, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 5000 } ] } ] ) { enqueued errors { message path } } } Copy Serverless for Lambda Subscription level products.id unitsOfMeasure.unit.1 Serverless Annual 9010 INGESTED_EVENTS Serverless Monthly 9000 INGESTED_EVENTS Example Request Serverless Monthly with 3,000 ingested events in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9000, unitsOfMeasure: [ { unit: INGESTED_EVENTS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Traces Subscription level products.id unitsOfMeasure.unit.1 Traces Annual 9200 SPANS_IN_MILLIONS Traces Monthly 9210 SPANS_IN_MILLIONS Example Request Traces Annual with 3,000 spans in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9200, unitsOfMeasure: [ { unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Logs Subscription level products.id unitsOfMeasure.unit.1 Logs Annual Commit - 8 Days 9110 GB_PER_DAY Logs Annual Commit - 15 Days 9111 GB_PER_DAY Logs Annual Commit - 30 Days 9112 GB_PER_DAY Logs Monthly Commit - 8 Days 9100 GB_PER_DAY Logs Monthly Commit - 15 Days 9101 GB_PER_DAY Logs Monthly Commit - 30 Days 9102 GB_PER_DAY Example Request Logs with 8 days data retention and 100 Gigabytes per day mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9100, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 } ] } ] ) { enqueued errors { message path } } } Copy Metrics Subscription level products.id unitsOfMeasure.unit.1 Metrics Annual Commit 9310 DPM Metrics Monthly Commit 9300 DPM Example Request Metrics Monthly Commitment with 50 Data Points Per Minute mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9300, unitsOfMeasure: [ { unit: DPM, quantity: 50 } ] } ] ) { enqueued errors { message path } } } Copy GraphQL Types The Provisioning API uses the following GraphQL types: Subscription Name Type Description account_id Integer Numeric ID of the partner account for the partnership to which the affected account belongs. affected_account_id Integer Numeric ID of the account to which the changes described in the products field will be applied. products Array of Product Collection of type Product representing the values that will compose the new Subscription for the Affected Account. Product Name Type Description Id Integer Numeric ID for the Product to be added to the Subscription. Name String Name of the Product to be added to the Subscription. Unit of Measure Array of Unit of Measure Collection of type Unit of Measure for this single product. Unit of measure Name Type Description quantity Integer Numeric value for the amount of units to be applied to the Subscription. unit String Name of the unit to be applied to the product (varies by product line). Examples Here are examples of an API call to create a subscription and the JSON response. Create (replace existing) subscription with many products mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9410, unitsOfMeasure: [{unit: INCIDENT_EVENTS, quantity: 50}] }, { id: 42, unitsOfMeasure: [{unit: HOSTS, quantity: 5 }] }, { id: 42, unitsOfMeasure: [{unit: PAGE_VIEWS, quantity: 500000}] }, { id: 134, unitsOfMeasure: [{unit: COMPUTE_UNIT, quantity: 5000}] }, { id: 66, unitsOfMeasure: [ {unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, {unit: EVENTS_IN_MILLIONS, quantity: 25 } ] }, { id: 9100, unitsOfMeasure: [{unit: GB_PER_DAY, quantity: 100 } ] }, { id: 9300, unitsOfMeasure: [{unit: DPM, quantity: 50 } ] }, { id: 54, unitsOfMeasure: [ {unit: APPS, quantity: 1 }, {unit: USERS, quantity: 100000 } ] }, { id: 9000, unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] }, { id: 77, unitsOfMeasure: [{unit: CHECKS, quantity: 10000 } ] }, { id: 9200, unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Create (replace existing) subscription with one product - Logs mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 9110, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 }, { unit: DATA_RETENTION_IN_DAYS, quantity: 8 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Response: Once the Provisioning API has received your request and has validated it is in the right format it will respond with a message like this. This does not mean that your message has been successfully processed or applied; but it has been validated to be in the right format and it enqueued for processing. { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Variations from the Partnership API These are some key differences between the Provisioning API and the Partner API that frequent Partner API users should know: Feature Description API keys The Provisioning API uses a Personal API key. The Partner API uses the Partnership API key. productId and product_id The product idâs used for the Provisioning API are different than the ones documented for the Partner API. Curl request format To make a curl request to the Provisioning API, the format will be different than the Partner API: The url endpoint is different The required api key is your personal API key Provisioning API responds only to HTTP POST requests Serverless INGESTED_EVENTS units are in millions sending unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] will be interpreted by the Provisioning API as 3,000 million events. Insights and Mobile require 2 units of measure Insights requires DATA_RETENTION_IN_DAYS and EVENTS_IN_MILLIONS Mobile requires APPS and USERS. Logs data retention unit of measure is determined by productID This is specified in the product name: Logs Annual Commit - 8 Days | product ID: 9110 Logs Annual Commit - 15 Days | product ID: 9111 Logs Annual Commit - 30 Days | product ID: 9112 Logs Monthly Commit - 8 Days | product ID: 9100 Logs Monthly Commit - 15 Days | product ID: 9101 Logs Monthly Commit - 30 Days | product ID: 9102",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.99242,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NerdGraph tutorial: <em>Partner</em> and reseller subscriptions",
        "sections": "Variations from the <em>Partnership</em> <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Important The Provisioning <em>API</em> is only available for <em>Partner</em> accounts. The Provisioning NerdGraph <em>API</em> allows you, as a <em>New</em> <em>Relic</em> <em>partner</em> to create subscriptions for your accounts containing a more extensive range of <em>New</em> <em>Relic</em> products than the <em>Partner</em> <em>API</em>. The Provisioning <em>API</em> and <em>Partnership</em> <em>API</em>"
      },
      "id": "6043ff97e7b9d25a6f5799c1"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/product-buckets": [
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-05-22T08:28:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.25183,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> products, pricing, and billing",
        "sections": "Customized <em>partnership</em> pricing",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " by <em>partnership</em>--the actual pricing model used is subject to the contractual terms of the <em>partner</em>&#x27;s agreement with <em>New</em> <em>Relic</em>. Contact your Alliance &amp; Channels representative at <em>New</em> <em>Relic</em> to learn more. <em>Partnership</em> billing options <em>New</em> <em>Relic</em> supports the following billing options for <em>partnerships</em>. All"
      },
      "id": "603ece55e7b9d254192a080c"
    },
    {
      "sections": [
        "Partnership API reference",
        "Requirements",
        "Find your Partnership API key",
        "Find your Partner ID",
        "Authenticate the API call",
        "Notes for partners who manage New Relic accounts",
        "Errors"
      ],
      "title": "Partnership API reference",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7bc374ae0e6f6917aa82a70e582606ea4a9878ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference/",
      "published_at": "2021-05-22T15:40:26Z",
      "updated_at": "2021-03-30T03:04:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains technical details about using the Partnership API. For an introduction and requirements, first read Intro to Partnership API. Requirements For requirements, see Intro to Partnership API. Find your Partnership API key The Partnership API requires that you authenticate with the REST API key that is specific to your partnership owner account (you cannot use the other REST API keys). When using your Partnership API key with calls to REST API (v2) endpoints that require the use of an Admin user's API key, see Admin user's API Key and partnerships. Find your Partner ID The Partnership API also requires that you authenticate by providing a Partner ID specific to your partnership. This is unique from the account ID for your partnership owner account. To obtain your Partner ID, go to your partner admin console and retrieve the partner ID number that is listed in your URL: https://partner-admin-console.newrelic.com/accounts/â$ACCOUNT_ID/admin_console/partnerships/$PARTNER_ID Copy You must include the Partner ID as part of the base URL for the Partner API. URL component URL pattern Partner API endpoint https://rpm.newrelic.com/api/v2/partners/PARTNER_ID Copy Resource URL patterns /accounts /accounts/ACCOUNT_ID /accounts/ACCOUNT_ID/users /accounts/ACCOUNT_ID/users/USER_ID /accounts/ACCOUNT_ID/subscriptions /accounts/ACCOUNT_ID/subscriptions/SUBSCRIPTION_ID Copy Example https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/ACCOUNT_ID Copy Authenticate the API call To authenticate to the Partner API when making an API call: Add a request header labeled x-api-key and set its value to your Partner API key. Include your Partner ID at the specified point in the request URI. Notes for partners who manage New Relic accounts For partners who manage New Relic accounts for their customers, the initial API call for all account-level interactions is to \"create account.\" This call returns an xml record of the newly created account. Part of this record is the account_id. All of the other calls in the Partnership API require the account_id as a parameter. Provision will need to be made by the partner to parse the returned xml extract, store the account_id, and associate it with the users' partner account record. Errors New Relic uses conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success and codes in the 4xx range indicate an error that resulted from the provided information (for example, a required parameter was missing). Error Probable cause 400 Bad Request Most commonly the call is missing a required parameter. 401 Unauthorized A valid API key was not provided. 402 Request Failed Parameters were valid but request failed for some reason. 404 Not Found The requested item doesn't exist. 422 Unprocessable Entity Your account has special terms and cannot be changed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.43861,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> reference",
        "sections": "Notes for <em>partners</em> who manage <em>New</em> <em>Relic</em> accounts",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>API</em> key that is specific to your <em>partnership</em> owner account (you cannot use the other REST <em>API</em> keys). When using your <em>Partnership</em> <em>API</em> key with calls to REST <em>API</em> (v2) endpoints that require the use of an Admin user&#x27;s <em>API</em> key, see Admin user&#x27;s <em>API</em> Key and <em>partnerships</em>. Find your <em>Partner</em> ID"
      },
      "id": "603ebc5f28ccbc22b6eba780"
    },
    {
      "sections": [
        "NerdGraph tutorial: Partner and reseller subscriptions",
        "Important",
        "Get started: endpoint and API key",
        "Product subscriptions for an account",
        "Tip",
        "Mapping for products (productId)",
        "APM",
        "Example Requests",
        "Mobile",
        "Example Request",
        "Insights",
        "Browser",
        "Synthetics",
        "Infrastructure",
        "Serverless for Lambda",
        "Traces",
        "Logs",
        "Metrics",
        "GraphQL Types",
        "Subscription",
        "Product",
        "Unit of measure",
        "Examples",
        "Create (replace existing) subscription with many products",
        "Create (replace existing) subscription with one product - Logs",
        "Variations from the Partnership API"
      ],
      "title": "NerdGraph tutorial: Partner and reseller subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Getting started"
      ],
      "external_id": "b5831e3798a6356482988d72fc3b5dc2d39c6aad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/provisions-your-subscriptions-nerdgraph/",
      "published_at": "2021-05-21T22:58:20Z",
      "updated_at": "2021-05-11T05:05:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The Provisioning API is only available for Partner accounts. The Provisioning NerdGraph API allows you, as a New Relic partner to create subscriptions for your accounts containing a more extensive range of New Relic products than the Partner API. The Provisioning API and Partnership API are compatible when it comes to the products supported by both (APM, Mobile, Insights, Browser, Synthetics, and Infrastructure). If you use the Provisioning API to create a subscription for any of the newer products, you will no longer be able to update the account using the Partnership API V2. The Provisioning API is a GraphQL mutation field named organizationProvisioningUpdatePartnerSubscription. To learn more about how to use this mutation, see Introduction to NerdGraph. Get started: endpoint and API key The provisioning API uses your user key. The endpoint for the Provisioning API is: https://api.newrelic.com/graphql Copy To get started, run the following command: curl -v -d'{\"query\": \"mutation { organizationProvisioningUpdatePartnerSubscription(accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [{id: 9200, name: \\\"Traces\\\", unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 40}]}]) {enqueued errors {message path } } }\"}' -H'Content-type: application/json' -H'Api-key: PERSONAL_API_KEY' https://api.newrelic.com/graphql Copy Product subscriptions for an account The Provisioning API does not allow you to upgrade or downgrade individual product subscriptions for an account. Instead, the API requires you to replace (add) the configuration for all product subscriptions for the account. Tip If any product configurations are not included, the Provisioning API automatically provisions the account with a free product (when available). Mapping for products (productId) With each account creation call, you must supply at least one New Relic product type. The mutation query only accepts the numeric productId for the type. APM The number of allowable hosts per account and the data retention period vary by subscription level within New Relic APMâs pricing structure. For example, New Relic APM allows an unlimited number of allowable hosts for Lite accounts, but only a 24-hour data retention period. In addition, pricing and data retention depend on whether you select pricing plans based on hosts or compute units (CU). Use the product IDâs integer format to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Lite 18 Not applicable Standard 41 HOSTS Standard Annual 38 HOSTS Pro (Host) 42 HOSTS Pro Annual (Host) 39 HOSTS Enterprise 43 HOSTS Enterprise Annual 40 HOSTS If you select pricing plans based on compute units (CU), use these product ID integer formats to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Pro CU 126 COMPUTE_UNIT Pro Annual CU 127 COMPUTE_UNIT APM Essentials CU 128 COMPUTE_UNIT APM Essentials Annual CU 129 COMPUTE_UNIT Example Requests APM Pro with 5 hosts mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: HOSTS, quantity: 5 } ] } ] ) { enqueued errors { message path } } } Copy APM Pro CU with 3000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 126, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Mobile New Relic Mobileâs pricing structure allows 100,000 monthly active users per account at the Enterprise subscription level. Data retention varies by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Lite 49 Not applicable Not applicable Enterprise 54 APPS USERS Enterprise Annual 55 APPS USERS Example Request Mobile Enterprise with 1 App and 100,000 Monthly Active user mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 54, unitsOfMeasure: [ { unit: APPS, quantity: 1 }, { unit: USERS, quantity: 100000 } ] } ] ) { enqueued errors { message path } } } Copy Insights New Relic Insights bases the pricing structure on the number of allowable events stored and the associated data retention policy. For example, data retention for Insights Free is one day. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Free 67 Not applicable Not applicable None 65 Not applicable Not applicable Pro 66 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Pro Annual 69 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Example Request Insights Pro with 7 days data retention and 25 million events mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 66, unitsOfMeasure: [ { unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, { unit: EVENTS_IN_MILLIONS, quantity: 25 } ] } ] ) { enqueued errors { message path } } } Copy Browser New Relic Browserâs pricing structure allows an unlimited number of app users, regardless of subscription level. However, the number of allowable page views per month and the data retention period vary by subscription level. For example: Lite accounts include an unlimited number of page views per month and 24-hour data retention. Pro account pricing starts at 500,000 page views per month and three months data retention. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Lite 76 Not applicable Pro 72 PAGE_VIEWS Pro Annual 73 PAGE_VIEWS Example Request Browser Pro with 500,000 page views mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: PAGE_VIEWS, quantity: 500000 } ] } ] ) { enqueued errors { message path } } } Copy Synthetics With New Relic Synthetics' pricing structure, the default number of allowable monitoring checks and the data retention period vary by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 Lite 81 Not applicable Pro 77 CHECKS Pro Annual 78 CHECKS Example Request Synthetics Pro with 10,000 checks mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 77, unitsOfMeasure: [ { unit: CHECKS, quantity: 10000 } ] } ] ) { enqueued errors { message path } } } Copy Infrastructure With New Relic Infrastructureâs pricing structure, the default number of instances and the data retention period vary by subscription level. Infrastructure events do not count against your New Relic Insights quota, even though you can query them in Insights. New Relic Infrastructure offers pricing plans based on Compute Units (CU) only. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Infrastructure None 142 Not applicable Infrastructure Pro (CU) 134 COMPUTE_UNIT Infrastructure Pro Annual (CU) 135 COMPUTE_UNIT Infrastructure Essentials (CU) 136 COMPUTE_UNIT Infrastructure Essentials Annual (CU) 137 COMPUTE_UNIT Example Request Infrastructure Pro with 5,000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 134, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 5000 } ] } ] ) { enqueued errors { message path } } } Copy Serverless for Lambda Subscription level products.id unitsOfMeasure.unit.1 Serverless Annual 9010 INGESTED_EVENTS Serverless Monthly 9000 INGESTED_EVENTS Example Request Serverless Monthly with 3,000 ingested events in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9000, unitsOfMeasure: [ { unit: INGESTED_EVENTS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Traces Subscription level products.id unitsOfMeasure.unit.1 Traces Annual 9200 SPANS_IN_MILLIONS Traces Monthly 9210 SPANS_IN_MILLIONS Example Request Traces Annual with 3,000 spans in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9200, unitsOfMeasure: [ { unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Logs Subscription level products.id unitsOfMeasure.unit.1 Logs Annual Commit - 8 Days 9110 GB_PER_DAY Logs Annual Commit - 15 Days 9111 GB_PER_DAY Logs Annual Commit - 30 Days 9112 GB_PER_DAY Logs Monthly Commit - 8 Days 9100 GB_PER_DAY Logs Monthly Commit - 15 Days 9101 GB_PER_DAY Logs Monthly Commit - 30 Days 9102 GB_PER_DAY Example Request Logs with 8 days data retention and 100 Gigabytes per day mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9100, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 } ] } ] ) { enqueued errors { message path } } } Copy Metrics Subscription level products.id unitsOfMeasure.unit.1 Metrics Annual Commit 9310 DPM Metrics Monthly Commit 9300 DPM Example Request Metrics Monthly Commitment with 50 Data Points Per Minute mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9300, unitsOfMeasure: [ { unit: DPM, quantity: 50 } ] } ] ) { enqueued errors { message path } } } Copy GraphQL Types The Provisioning API uses the following GraphQL types: Subscription Name Type Description account_id Integer Numeric ID of the partner account for the partnership to which the affected account belongs. affected_account_id Integer Numeric ID of the account to which the changes described in the products field will be applied. products Array of Product Collection of type Product representing the values that will compose the new Subscription for the Affected Account. Product Name Type Description Id Integer Numeric ID for the Product to be added to the Subscription. Name String Name of the Product to be added to the Subscription. Unit of Measure Array of Unit of Measure Collection of type Unit of Measure for this single product. Unit of measure Name Type Description quantity Integer Numeric value for the amount of units to be applied to the Subscription. unit String Name of the unit to be applied to the product (varies by product line). Examples Here are examples of an API call to create a subscription and the JSON response. Create (replace existing) subscription with many products mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9410, unitsOfMeasure: [{unit: INCIDENT_EVENTS, quantity: 50}] }, { id: 42, unitsOfMeasure: [{unit: HOSTS, quantity: 5 }] }, { id: 42, unitsOfMeasure: [{unit: PAGE_VIEWS, quantity: 500000}] }, { id: 134, unitsOfMeasure: [{unit: COMPUTE_UNIT, quantity: 5000}] }, { id: 66, unitsOfMeasure: [ {unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, {unit: EVENTS_IN_MILLIONS, quantity: 25 } ] }, { id: 9100, unitsOfMeasure: [{unit: GB_PER_DAY, quantity: 100 } ] }, { id: 9300, unitsOfMeasure: [{unit: DPM, quantity: 50 } ] }, { id: 54, unitsOfMeasure: [ {unit: APPS, quantity: 1 }, {unit: USERS, quantity: 100000 } ] }, { id: 9000, unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] }, { id: 77, unitsOfMeasure: [{unit: CHECKS, quantity: 10000 } ] }, { id: 9200, unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Create (replace existing) subscription with one product - Logs mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 9110, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 }, { unit: DATA_RETENTION_IN_DAYS, quantity: 8 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Response: Once the Provisioning API has received your request and has validated it is in the right format it will respond with a message like this. This does not mean that your message has been successfully processed or applied; but it has been validated to be in the right format and it enqueued for processing. { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Variations from the Partnership API These are some key differences between the Provisioning API and the Partner API that frequent Partner API users should know: Feature Description API keys The Provisioning API uses a Personal API key. The Partner API uses the Partnership API key. productId and product_id The product idâs used for the Provisioning API are different than the ones documented for the Partner API. Curl request format To make a curl request to the Provisioning API, the format will be different than the Partner API: The url endpoint is different The required api key is your personal API key Provisioning API responds only to HTTP POST requests Serverless INGESTED_EVENTS units are in millions sending unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] will be interpreted by the Provisioning API as 3,000 million events. Insights and Mobile require 2 units of measure Insights requires DATA_RETENTION_IN_DAYS and EVENTS_IN_MILLIONS Mobile requires APPS and USERS. Logs data retention unit of measure is determined by productID This is specified in the product name: Logs Annual Commit - 8 Days | product ID: 9110 Logs Annual Commit - 15 Days | product ID: 9111 Logs Annual Commit - 30 Days | product ID: 9112 Logs Monthly Commit - 8 Days | product ID: 9100 Logs Monthly Commit - 15 Days | product ID: 9101 Logs Monthly Commit - 30 Days | product ID: 9102",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.99239,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NerdGraph tutorial: <em>Partner</em> and reseller subscriptions",
        "sections": "Variations from the <em>Partnership</em> <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Important The Provisioning <em>API</em> is only available for <em>Partner</em> accounts. The Provisioning NerdGraph <em>API</em> allows you, as a <em>New</em> <em>Relic</em> <em>partner</em> to create subscriptions for your accounts containing a more extensive range of <em>New</em> <em>Relic</em> products than the <em>Partner</em> <em>API</em>. The Provisioning <em>API</em> and <em>Partnership</em> <em>API</em>"
      },
      "id": "6043ff97e7b9d25a6f5799c1"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/typical-integration-example": [
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-05-22T08:28:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.25183,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> products, pricing, and billing",
        "sections": "Customized <em>partnership</em> pricing",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " by <em>partnership</em>--the actual pricing model used is subject to the contractual terms of the <em>partner</em>&#x27;s agreement with <em>New</em> <em>Relic</em>. Contact your Alliance &amp; Channels representative at <em>New</em> <em>Relic</em> to learn more. <em>Partnership</em> billing options <em>New</em> <em>Relic</em> supports the following billing options for <em>partnerships</em>. All"
      },
      "id": "603ece55e7b9d254192a080c"
    },
    {
      "sections": [
        "Partnership API reference",
        "Requirements",
        "Find your Partnership API key",
        "Find your Partner ID",
        "Authenticate the API call",
        "Notes for partners who manage New Relic accounts",
        "Errors"
      ],
      "title": "Partnership API reference",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7bc374ae0e6f6917aa82a70e582606ea4a9878ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference/",
      "published_at": "2021-05-22T15:40:26Z",
      "updated_at": "2021-03-30T03:04:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains technical details about using the Partnership API. For an introduction and requirements, first read Intro to Partnership API. Requirements For requirements, see Intro to Partnership API. Find your Partnership API key The Partnership API requires that you authenticate with the REST API key that is specific to your partnership owner account (you cannot use the other REST API keys). When using your Partnership API key with calls to REST API (v2) endpoints that require the use of an Admin user's API key, see Admin user's API Key and partnerships. Find your Partner ID The Partnership API also requires that you authenticate by providing a Partner ID specific to your partnership. This is unique from the account ID for your partnership owner account. To obtain your Partner ID, go to your partner admin console and retrieve the partner ID number that is listed in your URL: https://partner-admin-console.newrelic.com/accounts/â$ACCOUNT_ID/admin_console/partnerships/$PARTNER_ID Copy You must include the Partner ID as part of the base URL for the Partner API. URL component URL pattern Partner API endpoint https://rpm.newrelic.com/api/v2/partners/PARTNER_ID Copy Resource URL patterns /accounts /accounts/ACCOUNT_ID /accounts/ACCOUNT_ID/users /accounts/ACCOUNT_ID/users/USER_ID /accounts/ACCOUNT_ID/subscriptions /accounts/ACCOUNT_ID/subscriptions/SUBSCRIPTION_ID Copy Example https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/ACCOUNT_ID Copy Authenticate the API call To authenticate to the Partner API when making an API call: Add a request header labeled x-api-key and set its value to your Partner API key. Include your Partner ID at the specified point in the request URI. Notes for partners who manage New Relic accounts For partners who manage New Relic accounts for their customers, the initial API call for all account-level interactions is to \"create account.\" This call returns an xml record of the newly created account. Part of this record is the account_id. All of the other calls in the Partnership API require the account_id as a parameter. Provision will need to be made by the partner to parse the returned xml extract, store the account_id, and associate it with the users' partner account record. Errors New Relic uses conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success and codes in the 4xx range indicate an error that resulted from the provided information (for example, a required parameter was missing). Error Probable cause 400 Bad Request Most commonly the call is missing a required parameter. 401 Unauthorized A valid API key was not provided. 402 Request Failed Parameters were valid but request failed for some reason. 404 Not Found The requested item doesn't exist. 422 Unprocessable Entity Your account has special terms and cannot be changed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.43861,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> reference",
        "sections": "Notes for <em>partners</em> who manage <em>New</em> <em>Relic</em> accounts",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>API</em> key that is specific to your <em>partnership</em> owner account (you cannot use the other REST <em>API</em> keys). When using your <em>Partnership</em> <em>API</em> key with calls to REST <em>API</em> (v2) endpoints that require the use of an Admin user&#x27;s <em>API</em> key, see Admin user&#x27;s <em>API</em> Key and <em>partnerships</em>. Find your <em>Partner</em> ID"
      },
      "id": "603ebc5f28ccbc22b6eba780"
    },
    {
      "sections": [
        "NerdGraph tutorial: Partner and reseller subscriptions",
        "Important",
        "Get started: endpoint and API key",
        "Product subscriptions for an account",
        "Tip",
        "Mapping for products (productId)",
        "APM",
        "Example Requests",
        "Mobile",
        "Example Request",
        "Insights",
        "Browser",
        "Synthetics",
        "Infrastructure",
        "Serverless for Lambda",
        "Traces",
        "Logs",
        "Metrics",
        "GraphQL Types",
        "Subscription",
        "Product",
        "Unit of measure",
        "Examples",
        "Create (replace existing) subscription with many products",
        "Create (replace existing) subscription with one product - Logs",
        "Variations from the Partnership API"
      ],
      "title": "NerdGraph tutorial: Partner and reseller subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Getting started"
      ],
      "external_id": "b5831e3798a6356482988d72fc3b5dc2d39c6aad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/provisions-your-subscriptions-nerdgraph/",
      "published_at": "2021-05-21T22:58:20Z",
      "updated_at": "2021-05-11T05:05:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The Provisioning API is only available for Partner accounts. The Provisioning NerdGraph API allows you, as a New Relic partner to create subscriptions for your accounts containing a more extensive range of New Relic products than the Partner API. The Provisioning API and Partnership API are compatible when it comes to the products supported by both (APM, Mobile, Insights, Browser, Synthetics, and Infrastructure). If you use the Provisioning API to create a subscription for any of the newer products, you will no longer be able to update the account using the Partnership API V2. The Provisioning API is a GraphQL mutation field named organizationProvisioningUpdatePartnerSubscription. To learn more about how to use this mutation, see Introduction to NerdGraph. Get started: endpoint and API key The provisioning API uses your user key. The endpoint for the Provisioning API is: https://api.newrelic.com/graphql Copy To get started, run the following command: curl -v -d'{\"query\": \"mutation { organizationProvisioningUpdatePartnerSubscription(accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [{id: 9200, name: \\\"Traces\\\", unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 40}]}]) {enqueued errors {message path } } }\"}' -H'Content-type: application/json' -H'Api-key: PERSONAL_API_KEY' https://api.newrelic.com/graphql Copy Product subscriptions for an account The Provisioning API does not allow you to upgrade or downgrade individual product subscriptions for an account. Instead, the API requires you to replace (add) the configuration for all product subscriptions for the account. Tip If any product configurations are not included, the Provisioning API automatically provisions the account with a free product (when available). Mapping for products (productId) With each account creation call, you must supply at least one New Relic product type. The mutation query only accepts the numeric productId for the type. APM The number of allowable hosts per account and the data retention period vary by subscription level within New Relic APMâs pricing structure. For example, New Relic APM allows an unlimited number of allowable hosts for Lite accounts, but only a 24-hour data retention period. In addition, pricing and data retention depend on whether you select pricing plans based on hosts or compute units (CU). Use the product IDâs integer format to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Lite 18 Not applicable Standard 41 HOSTS Standard Annual 38 HOSTS Pro (Host) 42 HOSTS Pro Annual (Host) 39 HOSTS Enterprise 43 HOSTS Enterprise Annual 40 HOSTS If you select pricing plans based on compute units (CU), use these product ID integer formats to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Pro CU 126 COMPUTE_UNIT Pro Annual CU 127 COMPUTE_UNIT APM Essentials CU 128 COMPUTE_UNIT APM Essentials Annual CU 129 COMPUTE_UNIT Example Requests APM Pro with 5 hosts mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: HOSTS, quantity: 5 } ] } ] ) { enqueued errors { message path } } } Copy APM Pro CU with 3000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 126, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Mobile New Relic Mobileâs pricing structure allows 100,000 monthly active users per account at the Enterprise subscription level. Data retention varies by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Lite 49 Not applicable Not applicable Enterprise 54 APPS USERS Enterprise Annual 55 APPS USERS Example Request Mobile Enterprise with 1 App and 100,000 Monthly Active user mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 54, unitsOfMeasure: [ { unit: APPS, quantity: 1 }, { unit: USERS, quantity: 100000 } ] } ] ) { enqueued errors { message path } } } Copy Insights New Relic Insights bases the pricing structure on the number of allowable events stored and the associated data retention policy. For example, data retention for Insights Free is one day. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Free 67 Not applicable Not applicable None 65 Not applicable Not applicable Pro 66 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Pro Annual 69 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Example Request Insights Pro with 7 days data retention and 25 million events mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 66, unitsOfMeasure: [ { unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, { unit: EVENTS_IN_MILLIONS, quantity: 25 } ] } ] ) { enqueued errors { message path } } } Copy Browser New Relic Browserâs pricing structure allows an unlimited number of app users, regardless of subscription level. However, the number of allowable page views per month and the data retention period vary by subscription level. For example: Lite accounts include an unlimited number of page views per month and 24-hour data retention. Pro account pricing starts at 500,000 page views per month and three months data retention. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Lite 76 Not applicable Pro 72 PAGE_VIEWS Pro Annual 73 PAGE_VIEWS Example Request Browser Pro with 500,000 page views mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: PAGE_VIEWS, quantity: 500000 } ] } ] ) { enqueued errors { message path } } } Copy Synthetics With New Relic Synthetics' pricing structure, the default number of allowable monitoring checks and the data retention period vary by subscription level. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 Lite 81 Not applicable Pro 77 CHECKS Pro Annual 78 CHECKS Example Request Synthetics Pro with 10,000 checks mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 77, unitsOfMeasure: [ { unit: CHECKS, quantity: 10000 } ] } ] ) { enqueued errors { message path } } } Copy Infrastructure With New Relic Infrastructureâs pricing structure, the default number of instances and the data retention period vary by subscription level. Infrastructure events do not count against your New Relic Insights quota, even though you can query them in Insights. New Relic Infrastructure offers pricing plans based on Compute Units (CU) only. Use the product IDâs integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Infrastructure None 142 Not applicable Infrastructure Pro (CU) 134 COMPUTE_UNIT Infrastructure Pro Annual (CU) 135 COMPUTE_UNIT Infrastructure Essentials (CU) 136 COMPUTE_UNIT Infrastructure Essentials Annual (CU) 137 COMPUTE_UNIT Example Request Infrastructure Pro with 5,000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 134, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 5000 } ] } ] ) { enqueued errors { message path } } } Copy Serverless for Lambda Subscription level products.id unitsOfMeasure.unit.1 Serverless Annual 9010 INGESTED_EVENTS Serverless Monthly 9000 INGESTED_EVENTS Example Request Serverless Monthly with 3,000 ingested events in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9000, unitsOfMeasure: [ { unit: INGESTED_EVENTS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Traces Subscription level products.id unitsOfMeasure.unit.1 Traces Annual 9200 SPANS_IN_MILLIONS Traces Monthly 9210 SPANS_IN_MILLIONS Example Request Traces Annual with 3,000 spans in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9200, unitsOfMeasure: [ { unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Logs Subscription level products.id unitsOfMeasure.unit.1 Logs Annual Commit - 8 Days 9110 GB_PER_DAY Logs Annual Commit - 15 Days 9111 GB_PER_DAY Logs Annual Commit - 30 Days 9112 GB_PER_DAY Logs Monthly Commit - 8 Days 9100 GB_PER_DAY Logs Monthly Commit - 15 Days 9101 GB_PER_DAY Logs Monthly Commit - 30 Days 9102 GB_PER_DAY Example Request Logs with 8 days data retention and 100 Gigabytes per day mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9100, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 } ] } ] ) { enqueued errors { message path } } } Copy Metrics Subscription level products.id unitsOfMeasure.unit.1 Metrics Annual Commit 9310 DPM Metrics Monthly Commit 9300 DPM Example Request Metrics Monthly Commitment with 50 Data Points Per Minute mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9300, unitsOfMeasure: [ { unit: DPM, quantity: 50 } ] } ] ) { enqueued errors { message path } } } Copy GraphQL Types The Provisioning API uses the following GraphQL types: Subscription Name Type Description account_id Integer Numeric ID of the partner account for the partnership to which the affected account belongs. affected_account_id Integer Numeric ID of the account to which the changes described in the products field will be applied. products Array of Product Collection of type Product representing the values that will compose the new Subscription for the Affected Account. Product Name Type Description Id Integer Numeric ID for the Product to be added to the Subscription. Name String Name of the Product to be added to the Subscription. Unit of Measure Array of Unit of Measure Collection of type Unit of Measure for this single product. Unit of measure Name Type Description quantity Integer Numeric value for the amount of units to be applied to the Subscription. unit String Name of the unit to be applied to the product (varies by product line). Examples Here are examples of an API call to create a subscription and the JSON response. Create (replace existing) subscription with many products mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9410, unitsOfMeasure: [{unit: INCIDENT_EVENTS, quantity: 50}] }, { id: 42, unitsOfMeasure: [{unit: HOSTS, quantity: 5 }] }, { id: 42, unitsOfMeasure: [{unit: PAGE_VIEWS, quantity: 500000}] }, { id: 134, unitsOfMeasure: [{unit: COMPUTE_UNIT, quantity: 5000}] }, { id: 66, unitsOfMeasure: [ {unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, {unit: EVENTS_IN_MILLIONS, quantity: 25 } ] }, { id: 9100, unitsOfMeasure: [{unit: GB_PER_DAY, quantity: 100 } ] }, { id: 9300, unitsOfMeasure: [{unit: DPM, quantity: 50 } ] }, { id: 54, unitsOfMeasure: [ {unit: APPS, quantity: 1 }, {unit: USERS, quantity: 100000 } ] }, { id: 9000, unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] }, { id: 77, unitsOfMeasure: [{unit: CHECKS, quantity: 10000 } ] }, { id: 9200, unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Create (replace existing) subscription with one product - Logs mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 9110, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 }, { unit: DATA_RETENTION_IN_DAYS, quantity: 8 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Response: Once the Provisioning API has received your request and has validated it is in the right format it will respond with a message like this. This does not mean that your message has been successfully processed or applied; but it has been validated to be in the right format and it enqueued for processing. { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Variations from the Partnership API These are some key differences between the Provisioning API and the Partner API that frequent Partner API users should know: Feature Description API keys The Provisioning API uses a Personal API key. The Partner API uses the Partnership API key. productId and product_id The product idâs used for the Provisioning API are different than the ones documented for the Partner API. Curl request format To make a curl request to the Provisioning API, the format will be different than the Partner API: The url endpoint is different The required api key is your personal API key Provisioning API responds only to HTTP POST requests Serverless INGESTED_EVENTS units are in millions sending unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] will be interpreted by the Provisioning API as 3,000 million events. Insights and Mobile require 2 units of measure Insights requires DATA_RETENTION_IN_DAYS and EVENTS_IN_MILLIONS Mobile requires APPS and USERS. Logs data retention unit of measure is determined by productID This is specified in the product name: Logs Annual Commit - 8 Days | product ID: 9110 Logs Annual Commit - 15 Days | product ID: 9111 Logs Annual Commit - 30 Days | product ID: 9112 Logs Monthly Commit - 8 Days | product ID: 9100 Logs Monthly Commit - 15 Days | product ID: 9101 Logs Monthly Commit - 30 Days | product ID: 9102",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.99239,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NerdGraph tutorial: <em>Partner</em> and reseller subscriptions",
        "sections": "Variations from the <em>Partnership</em> <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Important The Provisioning <em>API</em> is only available for <em>Partner</em> accounts. The Provisioning NerdGraph <em>API</em> allows you, as a <em>New</em> <em>Relic</em> <em>partner</em> to create subscriptions for your accounts containing a more extensive range of <em>New</em> <em>Relic</em> products than the <em>Partner</em> <em>API</em>. The Provisioning <em>API</em> and <em>Partnership</em> <em>API</em>"
      },
      "id": "6043ff97e7b9d25a6f5799c1"
    }
  ],
  "/docs/new-relic-solutions/best-practices-guides/alerts-applied-intelligence/alerts-best-practices": [
    {
      "sections": [
        "Use Incident Intelligence",
        "Issue summary",
        "Use suggested responders",
        "Important",
        "Tip",
        "Root cause analysis",
        "Issue timeline",
        "Related activity",
        "Use decisions"
      ],
      "title": "Use Incident Intelligence",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "Applied intelligence",
        "Incident intelligence"
      ],
      "external_id": "f7b852fa406a6e9ff88b791e4cbccc2bd20a5962",
      "image": "https://docs.newrelic.com/static/6e37cc77304398121e1a0080a57e47bb/8c557/screenshot_incident_intelligence_timeline_event_detail.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/applied-intelligence/incident-intelligence/use-incident-intelligence/",
      "published_at": "2021-05-21T14:03:00Z",
      "updated_at": "2021-05-21T14:03:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "After you set up Incident Intelligence, our system will begin finding issues from your data sources. In the issue feed, you can find an overview of all your issues, along with helpful information about them. You can also click any individual issue for more detail, including its analysis summary, event log, and details about correlated issues. This screenshot shows an example issue feed, which describes your issues' statuses, correlations, and more. What's the difference between an issue, incident, and event? In short, these terms are like building blocks. Events are raw data from your sources. Incidents are made up of one or more events. Issues are composed of one or more incidents. In more detail: Events indicate a state change or trigger defined by your monitoring systems. An event contains information about the affected entity, and they are almost always triggered automatically by the system. Incidents are groups of events that describe the \"symptoms\" of your system over time. These symptoms are detected by your monitoring tools, which evaluate your data streams and events. Issues are groups of incidents that describe the underlying problem of your symptoms. When a new incident is created, Incident Intelligence opens an issue and evaluates other open issues for correlations. Issue summary The issue page is built to first provide you with bottom line insights to understand the problem, and to minimize the time you need to resolve it. The issue page is made of: The Analysis Summary: the analysis summary has two machine learning modules, the golden signals and the related components. The Suggested Responder: the suggested responder will tell you who to potentially reach out to on your team to solve a specific problem. The Impacted Entities: an entity is anything that has data you can monitor. Specifically, these are focused on incidents from New Relic sources, extracting the entities and providing a summary. Each entity is unique. The Label Sets: label sets are focused on incidents that come from 3rd party sources, such as PagerDuty, AWS Cloudwatch, REST APIs, etc., as well as for NRQL queries. They come in the form of key:value pairs. Depending on the data in an issue, all four of these sections can show up together for each issue, or separately. If you hover over an impacted entity application, youâll notice a few calls to action: relevant dashboards, anomaly overview, deployment events, and entity overview. Relevant dashboards helps users in your account look at and interact with dashboards you've created that are related to an entity. The queries you've run to power the various widgets are automatically mapped to entities whenever possible and are presented back to you here for quick access and discovery. Anomaly overview will open the application's anomalies page. This is only available for applications that are set up for Proactive Detection. There are two types of deployment events: deployments and related deployments. Click Show all deployments to see all your deployment events when they arrive, or click a specific deployment to see its APM deployments page. The APM deployment page lists recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors. This section will only show up if New Relic has identified applications under the impacted entities that have deployments. Use suggested responders If youâre using PagerDuty or New Relic alerts violations as your incident notification tools, Incident Intelligence suggests relevant team members that can help resolve your issues. Incident Intelligence learns from your PagerDuty and alerts violations data to provide suggestions for each new incident. Once you receive a suggestion, you can contact the responder or search for relevant documentation that person may have written. To get started, enable PagerDuty or alerts violations as a source for Incident Intelligence. Afterwards, you can view the suggestions in two places: The issue feed, where you can also provide feedback on the suggestions. Directly within PagerDuty (both UI and API.) If youâre also using PagerDuty as a destination, the suggestions will appear in your issue notifications payload. Important This feature doesn't account for on-call availability at the time of incident. Tip In order to train the model, we use the information PagerDuty provides about individuals. We ingest incident information only, not usersâ contact details. Root cause analysis Root cause analysis automatically finds potential causes for an issue and its impacted entities. It shows you why open issues occurred, which deployments contributed, and relevant error logs and attributes. With this, you can investigate the problem and reduce your mean time to resolution (MTTR). Tip Note that root cause analysis is dependent on other New Relic data sources and features. This is why root cause analysis information may not always be present for every issue. When you select an issue, you may see Root cause analysis information. Root cause analysis includes three main UI sections: Deployment events: When you set up deployments, we provide the deployment nearest to the issue creation. Changes, such as deployments, account for a high percentage of the root causes of incidents and having that information at hand can help diagnose and resolve issues. Error logs: You can explore millions of log messages with a single click and use manual querying to help you find anomalous patterns and hard-to-find problems. Attributes to investigate: We scan the distribution of attributes and surface possible causes by finding significant changes in the distribution. For example, for every single transaction event, we can scan to see if an individual user starts to take up an anomalous share of the requests sent to your app. You can also query interesting attributes. Issue timeline The issue timeline, as presented below, shows you a breakdown of: Incidents The trends taking place What incidents are active What incidents are resolved What is correlated to each other Various milestones at different issue levels In addition, youâll see a grey line at the top of the timeline. In comparison to the visual timeline that shows the changes to each incident, the grey line represents changes to the issue. Mouse over the grey line to see details of the event. Finally, mouse over the incident to see information on the location, timing, and level of importance of a specific incident. This figure shows a particular incident populated on January 11th with a level of Critical. To view the issues in a text format, in the right hand corner, click Switch to issue log view. Related activity The related activity section aggregates a set of incidents into a single issue, according to a rule-based system. This section will show you the Last Update, the Source location, its State, the number of Related Events, and where it Originated. You can also copy the Payload or click on Analyze for more information. Use decisions To further reduce noise or get improved incident correlation, you can change or customize your decisions. Decisions determine how Incident Intelligence groups incidents together. To get started, see Decisions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.30165,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use Incident <em>Intelligence</em>",
        "sections": "Use Incident <em>Intelligence</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " show up if <em>New</em> <em>Relic</em> has identified applications under the impacted entities that have deployments. Use suggested responders If youâre using PagerDuty or <em>New</em> <em>Relic</em> <em>alerts</em> violations as your incident notification tools, Incident <em>Intelligence</em> suggests relevant team members that can help resolve your"
      },
      "id": "6080293564441fd0669d8580"
    },
    {
      "sections": [
        "Update or disable policies and conditions",
        "Policy maintenance quick reference",
        "Add or remove policies assigned to a channel",
        "Change a policy name",
        "Check policy user assignment",
        "Check policy channel assignment",
        "Create a new policy",
        "Condition maintenance quick reference",
        "Add more conditions",
        "Copy a condition",
        "Change how threshold violations roll up into incidents",
        "Check for entities (targets) assigned to a policy",
        "Tip",
        "Change a condition",
        "Link to Incident Intelligence",
        "Disable or delete policies and conditions",
        "Disable or re-enable a condition",
        "Disable a policy",
        "Delete policy conditions",
        "Delete a policy"
      ],
      "title": "Update or disable policies and conditions",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert policies"
      ],
      "external_id": "4a6c5107cd6af696df6a3fb0651c6a1bde7daf36",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/update-or-disable-policies-conditions/",
      "published_at": "2021-05-21T15:35:07Z",
      "updated_at": "2021-05-21T15:35:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "After you create a policy, you can: Add more conditions to the policy. Edit the conditions' names, targets, or thresholds. Disable conditions. Continue the policy setup process by adding one or more notification channels to it. Rename or delete the policy. The user interface shows a Last modified timestamp for any changes to policies, including their conditions and notification channels. Policy maintenance quick reference Here is a quick reference which also includes links to more detailed information and procedures for maintaining your policies. Add or remove policies assigned to a channel To add or remove policies assigned to a channel: In the one.newrelic.com top nav, click Alerts & AI, click Notification channels, then (select a channel). Click Alert policies, then (select a policy). From the selected policy, use the windows to select, remove, or clear all. Change a policy name To rename a policy: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click the policy name to edit it, then type a meaningful name for the policy (maximum 64 characters). Check policy user assignment To check whether an account user has been assigned any policies: In the one.newrelic.com top nav, click Alerts & AI, click Policies, (select a policy), then click Notification channels. Select a user, and then click Alert policies. Check policy channel assignment To check whether a notification channel has any policies assigned to it: In the one.newrelic.com top nav, click Alerts & AI, click Notification channels. The Policy subscriptions column lists how many policies are assigned to the channel. Create a new policy To create a new alert policy: In the one.newrelic.com top nav, click Alerts & AI, click Policies. Click New alert policy. Follow standard procedures to complete the basic setup process. Condition maintenance quick reference Here's a quick reference for maintaining a policy conditions. This includes the condition's entities (targets), Warning (yellow) and Critical (red) thresholds, and runbook URL. Add more conditions To add more conditions to a policy: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, (select a policy), then click Add a condition. OR To copy a condition from any policy and add it to another policy: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, (select a policy), then click Copy. Copy a condition To copy an existing condition, including its targets and thresholds, and add it to another policy for the selected account: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). From the policy's list of one or more Alert conditions, click Copy. From the Copy alert condition list, search or scroll the list to select the policy where you want to add this condition. Optional: Change the condition's name if necessary. Select Save. By default, the copied condition will be added to the selected alert policy in a Disabled state. Follow standard procedures to add or copy additional conditions to the alert policy, and then Enable the condition as needed. Change how threshold violations roll up into incidents To select how violations to your thresholds are grouped into incident records (by policy, by condition, or by target and condition): In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click Incident preference. Check for entities (targets) assigned to a policy To check whether an entity (target) has any policies assigned: Go to the product (APM, Browser, etc.). From the selected product's index, check whether the entity's color-coded health status is light green with an icon. Tip Exception: Infrastructure does not use this feature. Change a condition To change a policy condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Then, from the list of Alert conditions for the selected policy: To change the condition's name, click Edit. To add, change, or remove targets (entities), select the name or number of targets for the condition, and then select Browse and select targets. To update the values for the required Critical (red) or optional Warning (yellow) thresholds, select the existing value. To update the condition's runbook URL, select the condition's Thresholds. Link to Incident Intelligence If you use Applied Intelligence, you can connect your conditions to Incident Intelligence. To do this, switch the Connect to Incident Intelligence to ON. Disable or delete policies and conditions If you disable or delete a policy, we'll continue to apply any other policies assigned to the product entity (target). If you remove all policies for the entity, its color-coded health status indicator will appear light green with an icon. Disable or re-enable a condition You can enable or disable any policy conditions, and the policy will continue to apply. To disable or re-enable a condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Then, from the list of Alert conditions, (select a condition). Click the On/Off switch to toggle it. Tip For Infrastructure conditions, use the checkbox at the bottom of the condition edit screen, then save the condition. If you copy a condition, it is automatically saved in the new policy as disabled (Off), even if the condition was enabled (On) in the original policy. Disable a policy You can't disable a policy directly. However, you can disable all of the policy's conditions. When you disable all of the conditions, the policy will continue to appear on the Alert policies index. The policy itself isn't disabled, and you can re-enable any or all of its conditions at any time. Delete policy conditions If a policy has multiple conditions, you can delete any or all of them, and the remaining conditions for the policy will continue to apply. To turn a condition off but keep it with the policy, disable it. To delete one or more conditions: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). From the list of Alert conditions, (select a condition), then click Delete. Tip If you don't see the delete button, your account admin may have disabled condition deletion for your organization. Delete a policy If you delete any of your account's policies, you can't restore them. Instead, you must re-create them if necessary. To delete a policy completely: In the one.newrelic.com top nav, click Alerts & AI, then click Alert policies. From the policy row, click the delete icon. Any notification channels associated with a deleted or disabled policy will remain. You must delete notification channels or remove them individually as necessary. You will still be able to view incidents and event violations related to the deleted policy. However, these records will be read only.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.01263,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update or disable policies <em>and</em> conditions",
        "sections": "Link to Incident <em>Intelligence</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " to it: In the one.newrelic.com top nav, click <em>Alerts</em> &amp; AI, click Notification channels. The Policy subscriptions column lists how many policies are assigned to the channel. Create a <em>new</em> policy To create a <em>new</em> <em>alert</em> policy: In the one.newrelic.com top nav, click <em>Alerts</em> &amp; AI, click Policies. Click <em>New</em> <em>alert</em> policy. Follow"
      },
      "id": "604404ec28ccbc62492c6098"
    },
    {
      "sections": [
        "Incident Intelligence destination examples",
        "Destination template examples",
        "Suggested OpsGenie template example",
        "Suggested ServiceNow template example",
        "Suggested Slack template example",
        "Suggested VictorOps template example",
        "Webhook and JSON format examples",
        "Webhook format and JSON example",
        "Jinja2 Default Payload",
        "Jinja2 Useful Syntax",
        "JSON schema",
        "JSON schema template"
      ],
      "title": "Incident Intelligence destination examples",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "Applied intelligence",
        "Incident intelligence"
      ],
      "external_id": "a516d04f8b75541a6dc9338fa3ce9645ba87d620",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/applied-intelligence/incident-intelligence/incident-intelligence-destination-examples/",
      "published_at": "2021-05-21T17:07:25Z",
      "updated_at": "2021-05-16T16:21:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Destinations are the data outputs to Applied Intelligence, where you can view your automatically correlated incidents. You can configure Incident Intelligence destinations to send data to PagerDuty or webhooks. This document gives examples of destination templates, webhook formats, and JSON schema. Destination template examples The following template example destinations are formatted in Jinja2. Suggested OpsGenie template example { \"alias\": {{ id }}, \"message\": {{ ui_name }}, \"source\": '{{ sources }}', \"priority\": {{ priority }}, \"details\": { \"self_url\": {{ url }}, \"state\": {{ state }}, \"is_correlated\": {{ is_correlated }}, \"created_on\": {{ created_on }}, \"modified_on\": {{ modified_on }}, \"activated_on\": {{ active_since }}, \"closed_on\": {% if closed_on is defined %} {{ closed_on }} {% else %} None {% endif %}, \"is_correlated\": {{ is_correlated }} }, \"description\": 'Incidents [ {% for incident in incidents %} { \"id\": {{ incident.id }}, \"events_count\": {{ incident.events_count }}, \"labels\": {{ incident.labels }}, \"title\": {{ incident.title }}, \"description\": {{ incident.description }}, \"state\": {{ incident.state }}, \"sources\": {{ incident.sources }}, \"modified_on\": {{ incident.modified_on }}, \"opened_on\": {{ incident.opened_on }}, \"closed_on\": {{ incident.closed_on }} } {% if not loop.last %},{% endif %}{% endfor %} ]' } Copy Suggested ServiceNow template example { \"short_description\": {{ ui_name }}, \"description\": 'Issue Id: {{ id }}, \\n Description: {{ description }}, \\n Sources: {{ sources }}, \\n Priority: {{ priority }}, \\n Details: { \\n self_url: {{ url }}, \\n state: {{ state }}, \\n is_correlated: {{ is_correlated }}, \\n created_on: {{ created_on }}, \\n modified_on: {{ modified_on }}, \\n activated_on: {{ active_since }}, \\n closed_on: {% if closed_on is defined %} {{ closed_on }} {% else %} None {% endif %}, \\n is_correlated: {{is_correlated}} }, \\n\\n incidents: {{ incidents }}, \\n\\n pathways: {{ pathways }}' } Copy Suggested Slack template example Go to Slack incoming WebHooks Choose the right Slack workspace and click \"Add to Slack\" Select the destination channel to receive the notifications to Click âAdd Incoming WebHooks Integrationâ Copy the WebHook URL In the next screen, click âSave settingsâ at the bottom. In New Relic Applied Intelligence, under Incident Intelligence click Destinations Add a WebHook In the end point paste the WebHook url from slack. In the custom payload, paste the following JSON: { \"blocks\": [ { \"type\": \"section\", \"text\": { \"type\": \"mrkdwn\", \"text\": \"*New Relic Incident Intelligence Alert*\" } }, { \"type\": \"divider\" }, { \"type\": \"section\", \"text\": { \"type\": \"mrkdwn\", \"text\": \"*CUSTOM FIELDS*:\" }, \"fields\": [ { \"type\": \"mrkdwn\", \"text\": \"*Issue ID*\" }, { \"type\": \"mrkdwn\", \"text\": \"*Issue Title*\" }, { \"type\": \"plain_text\", \"text\": {{ id }} }, { \"type\": \"plain_text\", \"text\": {{ ui_name }} } ] }, { \"type\": \"section\", \"fields\": [ { \"type\": \"mrkdwn\", \"text\": \"*Issue URL*\" }, { \"type\": \"mrkdwn\", \"text\": \"*Description*\" }, { \"type\": \"mrkdwn\", \"text\": {{ url }} }, { \"type\": \"plain_text\", \"text\": {{ description }} } ] }, { \"type\": \"section\", \"fields\": [ { \"type\": \"mrkdwn\", \"text\": \"*State*\" }, { \"type\": \"mrkdwn\", \"text\": \"*is_correlated*\" }, { \"type\": \"plain_text\", \"text\": {{ state }} }, { \"type\": \"plain_text\", \"text\": \"{{ is_correlated }}\" } ] }, { \"type\": \"section\", \"fields\": [ { \"type\": \"mrkdwn\", \"text\": \"*Created On*\" }, { \"type\": \"mrkdwn\", \"text\": \"*Modified On*\" }, { \"type\": \"plain_text\", \"text\": \"{{ created_on }}\" }, { \"type\": \"plain_text\", \"text\": \"{{ modified_on }}\" } ] }, { \"type\": \"section\", \"fields\": [ { \"type\": \"mrkdwn\", \"text\": \"*Activated On*\" }, { \"type\": \"mrkdwn\", \"text\": \"*Closed On*\" }, { \"type\": \"plain_text\", \"text\": \"{{ active_since }}\" }, { \"type\": \"plain_text\", \"text\": \"{% if closed_on is defined %} {{ closed_on }} {% else %} None {% endif %}\" } ] }, { \"type\": \"section\", \"fields\": [ { \"type\": \"mrkdwn\", \"text\": \"*Aggregated Incidents*\" }, { \"type\": \"mrkdwn\", \"text\": \"*Monitoring Tool*\" }, { \"type\": \"plain_text\", \"text\": \"{{ incident_count }}\" }, { \"type\": \"plain_text\", \"text\": {{ sources|join(', ') }} } ] } ] } Copy Suggested VictorOps template example { \"monitoring_tool\": {{ sources }}, {% if state == 'closed' %} \"message_type\": \"OK\", {% else %} \"message_type\": {{ priority }}, {% endif %} \"custom_fields\": { \"issue_url\": {{ url }}, \"description\": {{ description }}, \"state\": {{ state }}, \"is_correlated\": {{ is_correlated }}, \"created_on\": {{ created_on }}, \"modified_on\": {{ modified_on }}, \"activated_on\": {{ active_since }}, \"closed_on\": {% if closed_on is defined %} {{ closed_on }} {% else %} None {% endif %}, \"related_incidents\": [ {% for incident in incidents %} { \"id\": {{ incident.id }}, \"events_count\": {{ incident.events_count }}, \"labels\": {{ incident.labels }}, \"title\": {{ incident.title }}, \"description\": {{ incident.description }}, \"state\": {{ incident.state }}, \"sources\": {{ incident.sources }}, \"modified_on\": {{ incident.modified_on }}, \"opened_on\": {{ incident.opened_on }}, \"closed_on\": {{ incident.closed_on }} } {% if not loop.last %},{% endif %} {% endfor %} ] }, \"state_message\": {{ description }}, \"entity_id\": {{ id }}, \"entity_display_name\": {{ ui_name }}, \"vo_annotate.u.NRAI_Link\": {{ url }} } Copy Webhook and JSON format examples Applied Intelligence will send the event body in JSON format via HTTPS POST. The system expects the endpoint to return a successful HTTP code (2xx). If you use webhooks to configure Incident Intelligence destinations, use these examples of the webhook body format and JSON schema. Webhook format and JSON example Webhook format: Name Description url Href A link to the UI where the issue can be seen. id String Unique identifier for the issue. title String The issue title. description String The description of the issue. priority Enum The issue priority. Can be Critical, High, Medium, or Low. state Enum The issue status. Can be Active, Closed, or Acknowledged. is_correlated Boolean True if the issue is based on correlated data. created_on String The date and time the issue was created (in ISO format). modified_on String The date and time the issue was modified (in ISO format). active_since String The date and time the issue was activated (in ISO format). closed_on String The date and time the issue was closed (in ISO format). sources List(String) List of the different sources that were used to send the events into Applied Intelligence (for example: PagerDuty). pathways List(Pathways) List of pathways that are associated with the issue. Each pathway contains an id and name: [{âidâ: âpathway idâ, ânameâ: âpathway nameâ}]. pathways[].id String The pathway ID. pathways[].name String The pathway name. incidents List(Incident) List of incidents that are attached to the issue. The list contains only the latest 100 incidents. incidents[].id String The incident ID. incidents[].events_count Integer The number of events used to create the incident. incidents[].title String The incident title. incidents[].description String The incident description. incidents[].labels Dictionary (String) A string to string mapping of the incident labels. Labels represent the unique entities that are used to describe the incident. incidents[].priority Enum The incident priority. Can be Critical, High, Medium, or Low. incidents[].sources List(String) The incident source. incidents[].state Enum(open, closed) The incident state. incidents[].opened_on String The date and time the incident was opened (in ISO format). incidents[].closed_on String The date and time the incident was closed (in ISO format). ui_name String Issue title. accumulations['alert/signal'] String Issue analysis summary golden signal/s (if applicable). accumulations['alert/components'] String Issue analysis summary golden components (if applicable). Jinja2 Default Payload Applied Intelligence uses a templating framework called Jinja2 in the Webhook interface. Here is a default Jinja2 payload to use: { \"id\": {{ id }}, \"url\": {{ url }}, \"ui_name\": {{ ui_name }}, \"description\": {{ description }}, \"priority\": {{ priority }}, \"state\": {{ state }}, \"is_correlated\": {{ is_correlated }}, \"created_on\": {{ created_on }}, \"modified_on\": {{ modified_on }}, \"active_since\": {{ active_since }}, \"closed_on\": {% if closed_on is defined %} {{ closed_on }} {% else %} None {% endif %}, \"sources\": {{ sources }}, \"incidents\": {{ incidents }}, \"pathways\": {{ pathways }}, } Copy Jinja2 Useful Syntax Below are a few useful Jinja2 commands to help you format your output. Casting a value to integer Example: âseverityâ: {{ priority | int }} Copy If clause to check if an attributeâs value is set Example: \"golden_signals\": {% if accumulations['alert/signal'] is defined %} {{ accumulations['alert/signal'] }} {% else %} None {% endif %} Copy For loop to iterate of an array of values: Example: \"description\": 'Incidents [ {% for incident in incidents %} { \"id\": {{ incident.id }}, \"events_count\": {{ incident.events_count }}, \"labels\": {{ incident.labels }}, \"title\": {{ incident.title }}, \"description\": {{ incident.description }}, \"state\": {{ incident.state }}, \"sources\": {{ incident.sources }}, \"modified_on\": {{ incident.modified_on }}, \"opened_on\": {{ incident.opened_on }}, \"closed_on\": {{ incident.closed_on }} } {% if not loop.last %},{% endif %}{% endfor %} ]' Copy Check if an array attribute's value is set: Example: \"hostname_field\": {% if incidents[0].labels['newrelic/tag/hostname'] is defined %} {{ incidents[0].labels['newrelic/tag/hostname'] }} {% else %} None {% endif %} Copy JSON schema Applied Intelligence will send the event body in JSON format via HTTPS POST. The system expects the endpoint to return a successful HTTP code (2xx). JSON schema template JSON schema: { \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"definitions\": { \"Labels\": { \"type\": \"object\", \"properties\": {}, \"additionalProperties\": { \"type\": \"string\", \"maxLength\": 10000 } }, \"LabelsSet\": { \"type\": \"array\", \"properties\": {}, \"additionalProperties\": { \"type\": \"array\", \"items\": { \"$ref\": \"#/definitions/Labels\" }, \"uniqueItems\": true }, }, \"Annotations\": { \"type\": \"object\", \"title\": \"Additional contextual information about the Entity\", \"description\": \"Fields like title, description and priority can be described as annotations since\\nthey represent some additional information about the Incident.\\nFor example, the rule that creates the entity can have some logic that will create a title annotation field.\\nThe title will change according to the latest event received by the entity and as more\\nevent will keep coming the field may change, all this as a decision by the rule.\\nA different rule may decide not to populate the title at all.\\nSince a title can also be produced from the labels themselves.\", \"properties\": { \"title\": { \"type\": \"string\", \"maxLength\": 10000 }, \"description\": { \"type\": \"string\", \"maxLength\": 10000 } }, \"patternProperties\": { \".*\": { \"type\": \"string\", \"maxLength\": 10000 } }, \"additionalProperties\": { \"type\": \"string\", \"maxLength\": 10000 } }, \"Accumulations\": { \"type\": \"object\", \"title\": \"Accumulated data about the Incident\", \"description\": \"For example an entity with the label: host_name: foo will include a accumulated list of the\\nrelevant process names that are relevant to the entity. Accumulations will be derived from the events\", \"properties\": {}, \"additionalProperties\": { \"type\": \"array\", \"items\": { \"type\": \"string\", \"maxLength\": 10000 } } }, \"IssueState\": { \"type\": \"string\", \"enum\": [ \"created\", \"active\", \"acknowledged\", \"closed\" ], \"properties\": {}, \"additionalProperties\": false }, \"Priority\": { \"type\": \"string\", \"enum\": [ \"critical\", \"high\", \"medium\", \"low\" ], \"properties\": {}, \"additionalProperties\": false }, \"IssueClosingReason\": { \"type\": \"string\", \"enum\": [ \"nacked\", \"resolved\", \"system\" ], \"properties\": {}, \"additionalProperties\": false }, \"IssueAction\": { \"type\": \"string\", \"enum\": [ \"ack\", \"snooze\", \"nack\", \"end_snooze\", \"expire_snooze\", \"star\", \"un_snooze\", \"unstar\", \"archive\", \"unarchive\", \"resolve\", \"reopen\", \"open\", \"feedback\", \"feedback_file\", \"open_ticket\", \"merge_issues\", \"active\", \"create\", \"close\", \"incident_updated\", \"confidence_changed\", \"diagnoses_changed\", \"rule_properties_changed\", \"flapping\", \"notification\", \"incident_events_limit_reached\", \"follow\", \"unfollow\", \"priority_updated\", \"comment\", \"incident_appended\", \"diagnosis_feedback\", \"flapping_delay_close\" ], \"properties\": {}, \"additionalProperties\": false }, \"StringKeyValue\": { \"type\": \"object\", \"properties\": {}, \"additionalProperties\": { \"type\": \"string\" } }, \"JavaOptionalUuid\": { \"type\": \"string\", \"properties\": {}, \"additionalProperties\": false, \"format\": \"string-uuid\" } }, \"type\": \"object\", \"properties\": { \"id\": { \"type\": \"string\", \"format\": \"string-uuid\" }, \"customer_id\": { \"type\": \"integer\" }, \"labels_set\": { \"$ref\": \"#/definitions/LabelsSet\" }, \"annotations\": { \"$ref\": \"#/definitions/Annotations\" }, \"user_annotations\": { \"$ref\": \"#/definitions/Annotations\" }, \"user_annotations_version\": { \"type\": \"integer\" }, \"accumulations\": { \"$ref\": \"#/definitions/Accumulations\" }, \"state\": { \"$ref\": \"#/definitions/IssueState\" }, \"previous_state\": { \"$ref\": \"#/definitions/IssueState\" }, \"priority\": { \"$ref\": \"#/definitions/Priority\" }, \"closing_reason\": { \"oneOf\": [ { \"$ref\": \"#/definitions/IssueClosingReason\" }, { \"type\": \"null\" } ] }, \"modified_on\": { \"type\": \"integer\" }, \"created_on\": { \"type\": \"integer\" }, \"closed_on\": { \"oneOf\": [ { \"type\": \"integer\" }, { \"type\": \"null\" } ] }, \"acknowledged_on\": { \"oneOf\": [ { \"type\": \"integer\" }, { \"type\": \"null\" } ] }, \"active_since\": { \"oneOf\": [ { \"type\": \"integer\" }, { \"type\": \"null\" } ] }, \"assigned_to\": { \"oneOf\": [ { \"type\": \"array\", \"items\": { \"type\": \"string\", \"minLength\": 1 }, \"uniqueItems\": true }, { \"type\": \"null\" } ] }, \"created_by\": { \"oneOf\": [ { \"type\": \"array\", \"items\": { \"type\": \"string\", \"minLength\": 1 }, \"uniqueItems\": true }, { \"type\": \"null\" } ] }, \"progress_report\": { \"type\": \"array\", \"default\": [], \"items\": { \"type\": \"object\", \"properties\": { \"origin_id\": { \"oneOf\": [ { \"type\": \"string\", \"minLength\": 1 }, { \"type\": \"null\" } ] }, \"timestamp\": { \"type\": \"integer\" }, \"action_timestamp\": { \"oneOf\": [ { \"type\": \"integer\" }, { \"type\": \"null\" } ] }, \"origin_type\": { \"type\": \"string\", \"enum\": [ \"user\", \"system\" ] }, \"event_type\": { \"$ref\": \"#/definitions/IssueAction\" }, \"issue_id\": { \"oneOf\": [ { \"type\": \"string\", \"minLength\": 1, \"format\": \"string-uuid\" }, { \"type\": \"null\" } ] }, \"attributes\": { \"oneOf\": [ { \"$ref\": \"#/definitions/StringKeyValue\" }, { \"type\": \"null\" } ] }, \"team_id\": { \"$ref\": \"#/definitions/JavaOptionalUuid\" } }, \"required\": [ \"timestamp\", \"origin_type\", \"event_type\" ], \"additionalProperties\": false }, \"uniqueItems\": true }, \"rule_id\": { \"oneOf\": [ { \"type\": \"string\", \"minLength\": 1, \"maxLength\": 255 }, { \"type\": \"null\" } ] }, \"incident_ids\": { \"oneOf\": [ { \"type\": \"array\", \"items\": { \"type\": \"string\", \"format\": \"string-uuid\" }, \"uniqueItems\": true }, { \"type\": \"null\" } ] }, \"confidence\": { \"type\": \"number\", \"default\": 1.0, \"minimum\": 0.0, \"maximum\": 1.0 } }, \"required\": [ \"id\", \"customer_id\", \"labels_set\", \"annotations\", \"priority\", \"modified_on\", \"created_on\", \"confidence\" ], \"additionalProperties\": true } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.05414,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Incident <em>Intelligence</em> destination examples",
        "sections": "Incident <em>Intelligence</em> destination examples",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " channel to receive the notifications to Click âAdd Incoming WebHooks Integrationâ Copy the WebHook URL In the next screen, click âSave settingsâ at the bottom. In <em>New</em> <em>Relic</em> <em>Applied</em> <em>Intelligence</em>, under Incident <em>Intelligence</em> click Destinations Add a WebHook In the end point paste the WebHook url from"
      },
      "id": "6044280d64441f4af5378ed3"
    }
  ],
  "/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide": [
    {
      "sections": [
        "Synthetic monitoring best practices guide",
        "Tip",
        "1. Match your monitor type to monitoring need",
        "How to do it",
        "2. View all monitors with the Monitors index page",
        "How to view your monitors in the New Relic One:",
        "New Relic Explorer",
        "Monitors index page",
        "3. View individual monitor results",
        "How to do it:",
        "4. Understand the load-time impact of each resource",
        "5. Configure and develop a scripted browser test"
      ],
      "title": "Synthetic monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e76eb0669a1433bb9d0de70d90413e19749adf61",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/synthetic-monitoring-best-practices-guide/",
      "published_at": "2021-05-22T07:37:12Z",
      "updated_at": "2021-03-29T20:29:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's synthetic monitoringâpowered by a Selenium-driven Chrome browserâallows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its full power. Tip To use synthetic monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. 1. Match your monitor type to monitoring need Synthetic monitors are virtual browsers that measure the performance of your website, recording each check in detail. They also capture aggregate numbers for load time, uptime, and average download size, as well as an overview, detailed statistics for each page resource, and downtime incidents. There are four types of synthetic monitors; the ones you deploy will depend on the things you want to monitor: Ping monitorsâto ensure that your site is accessible. Simple browser monitorsâto ensure end-user performance. Scripted browsersâto ensure that particular resources are present. API monitorsâto ensure that your app server works as well as your website. How to do it To add a monitor, go to one.newrelic.com > Synthetics (or one.eu.newrelic.com if you have an EU-based account) and click Create monitor. Specify monitor type, name, and URL. Optional: Add a validation string (available for ping and simple browser) or advanced options, which enable substring monitoring for the following types of response validation: Verify SSL (for Ping and Simple Browser). This option verifies the validity of the SSL certificate chain. It can be duplicated by running the following syntax: openssl s_client -servername {YOUR_HOSTNAME} -connect {YOUR_HOSTNAME}:443 -CApath /etc/ssl/certs > /dev/null Copy Bypass HEAD request (for Ping). This option skips the default HEAD request and instead uses the GET verb with a ping check. Redirect is Failure (for Ping). If a redirect result occurs when Redirect is Failure is enabled, Synthetics categorizes it as a failure (rather than following the redirect and checking the resulting URL). Select the locations where you want your monitor to run. Choose a frequency to determine how often each location will run your monitor. Optional: Set up alert notifications. Select Create my monitor to confirm. Wait a few minutes; then from the Monitors index check your monitor. 2. View all monitors with the Monitors index page Continuous application performance monitoring is essential to ensure that web services are in place, working correctly, and error-free. Synthetic monitoring provides this type of assurance by performing automated tests on your web application for each selected locationânoting downtime instances (âviolationsâ) and collecting aggregate numbers, results, and detailed statistics for each page resource. Use the Monitors index page to get a high level view of this information, or select an individual monitor to view the Summary, for ping monitors, or Overview, for simple and scripted monitors, page and get a deeper insight into its performance over time. How to view your monitors in the New Relic One: New Relic Explorer To view a list of monitors using the New Relic One Monitors index page: Go to one.newrelic.com > Explorer > Synthetic monitors. For more information, see the documentation about navigating core UI components in New Relic One. Monitors index page To view a list of monitors using the Monitors index page: Go to one.newrelic.com > Synthetics. 3. View individual monitor results Itâs not enough to understand how your web apps are performing for your West Coast customers; you need to be able to view how theyâre performing across the country and around the globe. By taking advantage of synthetic monitors and visiting your Results page, you can see how everything from development to production affects user experience. You can locate interesting results by sorting the list to identify slow, fast, or other unusual results. Or filter by location to understand how monitor performance varies with geography. (The âNetwork timingsâ graph below provides a snapshot of webpage performance over a given period.) How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors tab, select your monitor. Select Monitor > Results. Gain an up-to-the-minute view of the slowest page loads for every monitored location. 4. Understand the load-time impact of each resource Visit the synthetics Resources page to see how each resource on your websiteâincluding CSS, JavaScript, images, HTML and moreâis affecting your overall load. You can drill into detailed metrics collected at run time, locate performance information for time spent by third-party resources, and identify HTTP response codes for each resource. How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors drop-down menu, select your monitor. Select Monitor > Resources. 5. Configure and develop a scripted browser test Using scripted browsers, you can build complex monitoring workflows using the Selenium JavaScript Webdriver bindings. For instance, you can log in to the application, navigate to a particular link, and wait for a page element to load and add an assertion. How to do it: Go to one.newrelic.com > Synthetics. Choose your monitor type (for example, Scripted Browser). Enter the name and details of your monitor (for example, Sitename.com Scripted Browser) Select the locations from which you want your monitor to run (for example, Mumbai, Seoul, Columbus, and Montreal). Choose a frequency to determine how often each location will run your monitor (for example, five minutes). Set a notification method to alert your team when performance violations occur. You are now ready to write your script. (Below is an example of a script used to test the performance of a main navigation page.) var assert = require('chai').assert; // script-wide timeout for all wait and waitandfind functions (in ms) var default_element_timeout = 190000; //3 mins var default_pageload_timeout = 240000; //4 mins var navlinks = [\"css-locator-1\",\"css-locator-2\"]; //sets element load timeout to 3 mins $browser.manage().timeouts().implicitlyWait(default_element_timeout); //sets page load timoeout to 4 mins $browser.manage().timeouts().pageloadTimeout(default_pageload_timeout); //test all the main nav page performances $browser.get(\"http://www.sitename.com\").then(function(){ return $browser.findelement($driver.by.classname(\"site-theme-example\")); }).then(function(){ //verifies the nav list has loaded return $browser.findelement($driver.by.classname(\"site-nav-list-example\")); }).then(function(){ //loops through the navlinks array navlinks.foreach(function(val, i, arr){ //finds and navigates to each navlink page return $browser.findelement($driver.by.classname(navlinks[i])).click().then(function(){ //verifies that the nav list loaded before moving on return $browser.findelement($driver.by.classname(\"site-nav-list-example\")).then(function(){ //verifies that the page logo footer at bottom of page has loaded return $browser.findelement($driver.by.classname(\"site-footer-logo\")); }) }) }) }); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.89311,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s synthetic monitoringâpowered by a Selenium-driven Chrome browserâallows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its <em>full</em> power. Tip To use synthetic monitoring and the rest of our"
      },
      "id": "603e84bb28ccbce555eba771"
    },
    {
      "sections": [
        "Infrastructure monitoring best practices guide",
        "1. Install the infrastructure agent across your entire environment",
        "How to do it",
        "Tip",
        "2. Configure the native EC2 integration",
        "3. Activate the integrations",
        "4. Create filter sets",
        "5. Create alert conditions",
        "6. View infrastructure data alongside APM data",
        "7. Access Infrastructure data using the Data explorer",
        "8. Update your agents regularly",
        "Want more user tips?"
      ],
      "title": "Infrastructure monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "931ea7767d73381ca0cb3502ec14f88d66ce5eaf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/infrastructure-monitoring-best-practices-guide/",
      "published_at": "2021-05-22T07:34:10Z",
      "updated_at": "2021-03-13T07:39:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Want even longer periods of uninterrupted sleep? Here are eight best practices to make dynamic infrastructure and server monitoring even easier with New Relic's infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution was designed to help enterprise customers monitor their large and dynamically changing environments at scale. In order to facilitate this, the UI is completely driven by tags that let you visualize aggregated metrics, events, and inventory for a large number of servers. To really get the most out of infrastructure monitoring, we recommend installing it across your entire environment, preferably even across multiple regions and clusters. This will provide a more accurate picture of the health of your host ecosystem and the impact your infrastructure has on your applications. Want to achieve faster Mean Time To Resolution (MTTR)? Install the infrastructure agent on database servers, web servers, and any other host that supports your applications. When deploying the agent, leverage custom attributes to tag your hosts so that you can use those for filtering the data presented in the UI and for setting alerts. This is in addition to any Amazon EC2 tags you may be using which will auto-import when you enable the EC2 integration. You may also prefer to keep the agent logs separate from the system logs, which you can do through the configuration. How to do it Leverage our install modules for config management tools such as Chef, Puppet and Ansible to easily deploy your agent across all your infrastructure. Read the instructions in the github repo for your config management tool referenced in the link above and define the custom_attributes you want to use to tag your hosts. Set the log_file attribute to your preferred location for the infrastructure agent logs. Tip If you are installing the agent on a single host, the process should only take a few minutes and you can find detailed instructions in our documentation. 2. Configure the native EC2 integration If you have an AWS environment, in addition to installing the infrastructure agent on your EC2 instances to monitor them, we also recommend configuring the EC2 integration so that New Relic can automatically import all the tags and metadata associated with your AWS instances. This allows you to filter down to a part of your infrastructure using the same AWS tags (example, ECTag_Role='Kafka'), and slice-and-dice your data in multiple ways. Additionally, our âAlertsâ and âSaved Filter Setsâ are completely tag-driven and dynamic, so they automatically add/remove instances matching these tags to give our users the most real-time views that scale with your cloud infrastructure. 3. Activate the integrations Monitoring your infrastructure extends beyond just CPU, memory, and storage utilization. Thatâs why New Relic has out-of-the-box integrations that allow you to monitor all the services that support your hosts as well. Activate any of our integrations, including AWS Billing, AWS ELB, Amazon S3, MySQL, NGINX, and more, to extend monitoring to your AWS or on-host applications, and access the pre-configured dashboards that appear for each of them. 4. Create filter sets With New Relic, users can create filter sets to organize hosts, cluster roles, and other resources based on criteria that matter the most to users. This allows you to optimize your resources by using a focused view to monitor, detect, and resolve any problems proactively. The attributes for filtering are populated from the auto-imported EC2 tags or custom tags that may be applied to hosts. You can combine as many filters as you want in a filter set, and save them to share with other people in your account. Youâll also be able to see the color-coded health status of each host inside the filter set, so you can quickly identify problematic areas of your infrastructure. Additionally, filter sets can be used in the health map to get an overview of your infrastructure performance at a glance based on the filters that matter to your teams. 5. Create alert conditions With New Relic, you can create alert conditions directly within the context of what you are currently monitoring with New Relic. For example, if you are viewing a filter set comprised of a large number of hosts and notice a problem, you donât need to create an individual alert condition for every host within. Instead, we recommend initiating the alert condition directly from the chart of the metric you are viewing and creating it based on the filter tags. This will create an alert condition for any hosts that match those tags, allowing our infrastructure monitoring to automatically remove hosts that go offline and add new hosts to the alert condition if they match those tags. Alerts configured once for the appropriate tags will scale correctly across all future hosts. And know that you can also leverage existing alert policies for infrastructure alert conditions. 6. View infrastructure data alongside APM data The integration between New Relic APM and infrastructure monitoring lets you see your APM data and infrastructure data side by side, so you can find the root cause of problems more quickly, no matter where they originate. This allows users to view the performance relationship of your hosts and the applications running on them, allowing for quicker diagnosis of the issue and impact on the businessâ health. Use health maps to quickly spot any issues or alerts related to the health of your applications and how that connects to the supporting infrastructure. The first boxes starting from the top left are those that require your attention. 7. Access Infrastructure data using the Data explorer Teams that use multiple New Relic capabilities find it useful to create a single dashboard to visually correlate the infrastructureâs health with application, browser and synthetics metrics. Thatâs where New Relic data exploration features comes in. All the granular metrics and events collected by infrastructure monitoring are stored in New Relic and are accessible to you immediately. Having access to the raw metrics means you can run more custom queries using NRQL, and also create dashboards to share infrastructure metrics with your team. 8. Update your agents regularly New Relicâs software engineering team is constantly pushing out improvements and new features to improve our customersâ overall monitoring experience. In order to take advantage of all the awesomeness theyâre delivering, we recommend regularly updating to the latest version of the infrastructure agent. Want more user tips? View training videos at New Relic University. Read the documentation. Check out our Tutorials. Ask a question in the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 225.60431,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Want even longer periods of uninterrupted sleep? Here are eight <em>best</em> <em>practices</em> to make dynamic infrastructure and server monitoring even easier with <em>New</em> <em>Relic</em>&#x27;s infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution"
      },
      "id": "6044151c28ccbc4b4f2c60af"
    },
    {
      "sections": [
        "Monitor apps and hosts with health maps",
        "Best practices",
        "Features",
        "Entities prioritized by health",
        "Tip",
        "Entity sort order criteria",
        "Views, filters, toggles",
        "View and use health maps",
        "Use cases",
        "The system's current health at a glance",
        "Scope of the problem: What else is broken?",
        "Scale of the problem: Use context to find a noisy neighbor",
        "Troubleshooting"
      ],
      "title": "Monitor apps and hosts with health maps",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e7d1c9a1f713b33c4aa42c2cb5e1b7a6ac23c2e3",
      "image": "https://docs.newrelic.com/static/2a20f997d494faa0658b6d93c6ab1fd3/c1b63/health-map-demo-ss_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/monitor-apps-hosts-health-maps/",
      "published_at": "2021-05-22T07:35:38Z",
      "updated_at": "2021-03-13T07:37:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The health map provides a single place to visually monitor the health of all your apps and their related hosts, prioritized by health status. You can customize the page by using different views, filters, and toggles to organize the map in a way most relevant to you or your team. Use your health map to monitor applications and hosts in real-time, and quickly track down problems as they occur. Best practices The health map pulls data together from several New Relic solutions. To get the most out of the health map, we recommend using the following features: Infrastructure monitoring: Create filter sets to meaningfully categorize hosts. APM: Create tags to meaningfully categorize your applications. Alerts: Create alert policies that cover all your alerting scenarios. The health map is also especially useful if you're using containerized apps on hosts, with many instances of apps per host. Features one.newrelic.com > More > Health maps: The health map combines data from APM, infrastructure monitoring, and alerts to display your applications and hosts prioritized by health status. Health map features include: Entities prioritized by health The health map organizes the page by primary entity boxes. Primary entity boxes contain current (refreshes every two minutes), at-a-glance health and performance data, secondary entities related to it, and links to relevant APM or Infrastructure UI pages for detailed performance data. Example of a health map primary entity box with secondary entities. The health map prioritizes entities based on the health status of primary then secondary entities. The health status is determined using data from Alerts. The health map prioritizes the entities by first sorting the primary entities by health status, then sorting those by the health status of their secondary entities (related apps or hosts). The health map supports red, yellow, green, light green (not targeted by any conditions), and gray (application stopped reporting data) statuses for applications. The health map supports red, yellow, and green statuses for hosts. Tip If you have a host not targeted by any conditions, it appears green on the health map. If a host is not reporting data, it does not display on the health map unless you create a host-not-reporting condition. Entities are prioritized to the top based on this order: Entity sort order criteria Primary entities that have critical (red) health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Primary entities that have warning (yellow) health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Primary entities that have green health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Count of secondary entities Name of entity Views, filters, toggles Use the Views dropdown to see the health of your system organized by your applications or your hosts. You can then filter those views by tags (apps) or filter set (hosts) to only see data most relevant to you or your team. Use the Show metrics/hosts toggles to show more/less information in the entity boxes. View Description Applications and related hosts Organizes the map by application entities to display for each app: Health status color Condition violation information, if any Summary metrics Health of related hosts the application is running on as reported by New Relic Infrastructure Map includes an optional app tag filter. Hosts and related applications Organizes the map by host entities to display for each host: Health status color Condition violation information, if any Summary metrics Health of related applications running on the host reported by New Relic APM Map includes an optional host filter. Filter sets and related hosts Uses data reported by our infrastructure monitoring to display: Health of the hosts in each filter set in Infrastructure View and use health maps Tip To get the most out of your health map, see health maps best practices. The health map represents the current state of your system. The map refreshes every two minutes. To view the health map: From one.newrelic.com, select More, then select Health maps. Select a view from the View dropdown to organize the map by application, host, or infrastructure filter sets. If using the views Applications and related hosts or Hosts and related applications, use the Filter dropdown to only display entities most interesting to you or your team. Optional: Toggle Show metrics or Show hosts to display more or less entity data. Optional: Display the health map on a TV / wallboard in your operations center to see your system's current health at a glance. If entities start showing critical (red) or warning (yellow) health statuses, hover over the entity or the Related hosts/apps tiles for violation information to quickly ascertain the scope and scale of the problem. Click through to the relevant APM or Infrastructure UI pages to get detailed information to start troubleshooting. Use cases The health map is designed to help operations and DevOps professionals, who are responsible for the health of large, complex environments, understand: The system's current health at a glance You like to have a view up on the TV wallboard in your network operations center (NOC) that represents the health of all systems. You may be focused on a task and not notice when an alert comes in. With a wallboard you can feel assured that you can always glance up to see if anything is on fire. Conversely, even though something is alerting, you like to see the applications and hosts that are healthy to help keep things in perspective. Scope of the problem: What else is broken? You are responsible for many applications at your company. At any point in time, something is alerting and because there are many applications deployed across many hosts, itâs difficult for you to keep track of everything and know what is experiencing problems. The health map gives you a single place to see the health and relationship between all applications and hosts. You can easily correlate the alerting host with applications deployed to it and easily answer the question: What else is broken right now? Scale of the problem: Use context to find a noisy neighbor With container orchestration deploying containerized applications across many hosts, itâs difficult for you to understand the scale of the problem when you receive an alert for a host or groups of hosts. By using the application view of the health map, you can see the alerting host along with all the other hosts serving the application. If the issue is isolated to a single host, you can change to the host view of the health map to see what other applications are deployed on that host. In that view, you see that the host has four applications running and one of the applications is alerting on higher than normal throughput. Troubleshooting If health map host boxes do not display their installed apps, or if application boxes do not display the Infrastructure-monitored hosts where they are running, see APM data missing from infrastructure monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 225.6039,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Best</em> <em>practices</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": " to monitor applications and hosts in real-time, and quickly track down problems as they occur. <em>Best</em> <em>practices</em> The health map pulls data together from several <em>New</em> <em>Relic</em> <em>solutions</em>. To get the most out of the health map, we recommend using the following features: Infrastructure monitoring: Create"
      },
      "id": "6044155e28ccbc6f972ea01c"
    }
  ],
  "/docs/new-relic-solutions/best-practices-guides/full-stack-observability/browser-monitoring-best-practices-guide": [
    {
      "sections": [
        "APM best practices guide",
        "Tip",
        "1. Standardize application names",
        "How to do it",
        "2. Add tags to your applications",
        "Caution",
        "3. Create and evaluate alert policies",
        "4. Identify and set up key transactions",
        "5. Track deployment history",
        "6. Review APM reports",
        "7. Review your environment with service maps",
        "8. Keep current",
        "9. Manage user access",
        "Important"
      ],
      "title": "APM best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "368a1a5688384d5bebf128604a9b8f190d335524",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide/",
      "published_at": "2021-05-22T14:44:24Z",
      "updated_at": "2021-03-30T13:08:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application Monitoring Tips You Need To Know It's one thing to know how to use APM, but it's another thing to know how to use New Relic's application performance monitoring software well. Here are some best practices designed to help you become an APM masterâand a key asset to your team! Tip To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. 1. Standardize application names Most New Relic agents provide a default application name, such as \"My Application\" or \"PHP Application,\" if you don't specify one in your New Relic configuration file. You don't want to end up with 20 identically named applications, be sure to select a descriptive identifier for your apps as soon you deploy them. To keep things consistent and easy to navigate, New Relic recommends standardizing your application naming (for example, all apps in Staging append [ Staging] or the like at the end of their names). Ideally, you want your new Java applications to be named automatically to reduce the chances of typographical errors and misnaming. How to do it For Java applications, automatic application naming can come from the following sources: Request attribute Servlet init parameter Filter init parameter Web app context parameter Web app context name (display name) Web app context path Choose the method that fits best your needs and follow these steps. For non-Java applications, there are no automatic naming methods, so refer to the documentation for your APM agent. 2. Add tags to your applications When several different applications use the same account, and each application spans multiple environments (for example, development, test, pre-production, production), it can be hard to find a specific application in your overview dashboard. That's why we recommend adding tags to your apps so that you can segment them into logical groups. The two most common tags that mature APM customers use are application name and environment. So, for example, if you wanted to view the billing application in Test, you could simply filter by \"billing app\" (name tag) and \"test\" (environment tag). Caution In the APM agent configuration settings files, use the labels field to add tags to your data. For example, see this description of the Python labels setting. APM is designed so that apps can roll up into an unlimited number of meaningful tag categories. How to do it Read the overview: Use tags to organize and group what you monitor. Follow these instructions for creating tags: NerdGraph tagging API tutorial. 3. Create and evaluate alert policies When key performance indicators spike or drop, individuals and teams in your organization need to be notified. Alerting in New Relic provides a set of tools including dynamic baselines that allow you to detect problems before they impact your end users. Alert policies can be set up in two primary ways: Static threshold alerts are great when you already know the nature of an application and its normal behaviors aren't likely to change anytime soon. Apdex score, response time, error rate, throughput are some of the static thresholds you can create alert policies on. Dynamic baseline alerts make it easy to determine and set dynamic alert thresholds for applications with varying seasonal patterns and growth trends (which make it difficult to set thresholds that define normal behavior). These alerts use baselines modeled from your applicationâs historical metric data. Each alert policy can contain as many conditions as you need, and each alert condition includes three components: Type of condition (metric, external service, and so on) Entities that the policy targets (for example, apps monitored by New Relic APM or New Relic Browser, hosts monitored by New Relic Infrastructure, and so on) Thresholds that escalate into alerting situations with increasing severity Once you have your alerting set up, you then want to make sure you're taking advantage of all viable notification channels. After all, what good are alerts if no one knows about them? You can manage alerts by creating specific user groups and by leveraging New Relic's integrated alert channels, including Slack, PagerDuty, webhooks, and email. Be sure to evaluate alert policies on a regular basis to ensure that they are always valid. How to do it See the detailed documentation: To set up dynamic baseline alerts and choose an application, follow standard procedures. You will see a preview of the metric with the predicted baseline You can select a metric for that application and see the corresponding baseline. Then, using the threshold sliders, you can set how closely you want your threshold to follow the baseline prediction. To set up static threshold alerts for your Apdex settings, follow standard procedures. To set up your alert notification channels, follow standard procedures. 4. Identify and set up key transactions Depending on the nature of your application, some transactions may be more important to you than others. New Relic's key transactions feature is designed to help you closely monitor what you consider to be your app's most business-critical transactions, whether that's end-user or app response time, call counts, error rates, or something else. You can also set alert threshold levels for notifications when your key transactions are performing poorly. How to do it In the menu bar, select More > Key transactions, and then select Add more. Then select the app and web transaction or, from the selected transaction, select Track as key transaction. Type a name for the key transaction, and select Track key transaction. Optional: If the agent for the selected app supports custom alerting, use the default values that New Relic automatically fills, or select Edit key alert transaction policy to set the Apdex and alert threshold values. To view the key transactions dashboard details, select View new key transaction. 5. Track deployment history When development teams are pushing new code out as frequently as possible, it can be hard to measure the impact that each deployment is having on performance. One way to stay in tune with how these changes are affecting your application is with deployment reports. These reports list recent deployments and their impact on end-users and app servers' Apdex scores, along with response times, throughput, and errors. You can also view and drill down into the details to catch errors related to recent deployments, or file a ticket and share details with your team. How to do it From the New Relic menu bar, select APM > (selected app) > Events > Deployments. To view performance after a deployment, go to the selected app's Overview dashboard in the Recent events section. A blue vertical bar on a chart indicates a deployment. To view summary information about the deployment, point to the blue bar. 6. Review APM reports From SLA, deployment, and capacity to scalability, host usage reports, and more, New Relic APM offers a variety of downloadable reporting tools surfacing historical trendsâall great ways to report to senior executive teams or customers. Take a look at the full list of reports and use them to your advantage. How to do it From the New Relic APM menu bar, select Applications > (selected app) > Reports. Select the report you'd like to see. If you want to save or export a report to share, select Download this report as .csv, which will create a report with comma-separated values. 7. Review your environment with service maps Use New Relic service maps, a feature included in APM, to understand how apps and services in your architecture connect and talk to each other. Service maps are visual, customizable representations of your application architecture. Maps automatically show you your app's connections and dependencies, including databases and external services. Health indicators and performance metrics show you the current operational status for every part of your architecture. How to do it Go to one.newrelic.com > More > service maps. To get started, read the instructions in Introduction to service maps. 8. Keep current With New Relicâs SaaS platform, getting new features is as easy as updating your agent. Most likely your organization already has a set of scripts for deploying application upgrades into your environment. In a similar fashion, you can also automate your New Relic agent deployment to ensure that your systems are up to date. Both Puppet and Chef scripts are great examples of deployment frameworks that make life easier by allowing you to automate your entire deployment and management process. How to do it Regularly review which version of the agent you're using so that you know when an update is needed. If the latest agent release contains a needed fix or added functionality, download it. To deploy the agent automatically (preferred as a method to avoid errors): Use existing deployment scripts, provided they can be adapted to handle the deployment. OR Create and maintain a script that specifically deploys and configures the New Relic agent. Ideally, the script would pull the agent files from a repository where the files are versioned (for rollback purposes). Once the script has been created, shut down the application (unless script handles this). Run the deployment script. Start the application (unless script handles this). If problems arise, run the script to roll back to the previous version. To deploy the agent manually: Back up the current agent directory. Deploy the updated agent into the existing agent directory. Modify configuration files by comparing new files with existing files. In particular, make sure things like license key and custom extensions are copied over to the new configuration. Restart the application. If problems arise, restore the old agent using the backup and restart. 9. Manage user access Important This is available only for accounts on our original product-based pricing plan. Enable role-based access control (RBAC) and single sign-on (SSO) New Relic allows authorized individuals to access the broadest possible amount of data, regardless of their assigned role. As an Owner or Administrator of your New Relic account, you can control the permissions of individual users or entire roles with RBAC. To find out what is possible and how to make changes, see Users and roles. Security is no doubt of utmost concern to your organization. To simplify password management for your employees and strengthen security, you may already be using SSO with your other systems. You should do the same with New Relic. Using New Relic's SSO integration feature, account administrators will be able to enforce strong passwords and restrict login via a corporate authentication mechanism. This way, New Relic users who have already authenticated using a corporate SSO system will be able to bypass the New Relic login prompt. How to do it Log in to New Relic as an admin and go to the SSO configuration page. From the New Relic title bar, select (your account name) > Account Settings > Integrations > Single Sign On. From the SAML Single Sign On page, review your New Relic SAML Service Provider details. To upload your SAML Identity Provider certificate, select Choose File, and then follow standard procedures to select and save the file. Copy and paste in (or type) the Remove login URL that your users will use for Single Sign-On. If your organizationâs SAML integration provides a redirect URL for logout, copy and paste in (or type) the Logout landing URL; otherwise leave blank. Save, test, and enable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.28435,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Application Monitoring Tips You Need To Know It&#x27;s one thing to know how to use APM, but it&#x27;s another thing to know how to use <em>New</em> <em>Relic</em>&#x27;s application performance monitoring software well. Here are some <em>best</em> <em>practices</em> designed to help you become an APM masterâand a key asset to your team! Tip To get"
      },
      "id": "6044186564441f1f94378ecc"
    },
    {
      "sections": [
        "Synthetic monitoring best practices guide",
        "Tip",
        "1. Match your monitor type to monitoring need",
        "How to do it",
        "2. View all monitors with the Monitors index page",
        "How to view your monitors in the New Relic One:",
        "New Relic Explorer",
        "Monitors index page",
        "3. View individual monitor results",
        "How to do it:",
        "4. Understand the load-time impact of each resource",
        "5. Configure and develop a scripted browser test"
      ],
      "title": "Synthetic monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e76eb0669a1433bb9d0de70d90413e19749adf61",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/synthetic-monitoring-best-practices-guide/",
      "published_at": "2021-05-22T07:37:12Z",
      "updated_at": "2021-03-29T20:29:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's synthetic monitoringâpowered by a Selenium-driven Chrome browserâallows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its full power. Tip To use synthetic monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. 1. Match your monitor type to monitoring need Synthetic monitors are virtual browsers that measure the performance of your website, recording each check in detail. They also capture aggregate numbers for load time, uptime, and average download size, as well as an overview, detailed statistics for each page resource, and downtime incidents. There are four types of synthetic monitors; the ones you deploy will depend on the things you want to monitor: Ping monitorsâto ensure that your site is accessible. Simple browser monitorsâto ensure end-user performance. Scripted browsersâto ensure that particular resources are present. API monitorsâto ensure that your app server works as well as your website. How to do it To add a monitor, go to one.newrelic.com > Synthetics (or one.eu.newrelic.com if you have an EU-based account) and click Create monitor. Specify monitor type, name, and URL. Optional: Add a validation string (available for ping and simple browser) or advanced options, which enable substring monitoring for the following types of response validation: Verify SSL (for Ping and Simple Browser). This option verifies the validity of the SSL certificate chain. It can be duplicated by running the following syntax: openssl s_client -servername {YOUR_HOSTNAME} -connect {YOUR_HOSTNAME}:443 -CApath /etc/ssl/certs > /dev/null Copy Bypass HEAD request (for Ping). This option skips the default HEAD request and instead uses the GET verb with a ping check. Redirect is Failure (for Ping). If a redirect result occurs when Redirect is Failure is enabled, Synthetics categorizes it as a failure (rather than following the redirect and checking the resulting URL). Select the locations where you want your monitor to run. Choose a frequency to determine how often each location will run your monitor. Optional: Set up alert notifications. Select Create my monitor to confirm. Wait a few minutes; then from the Monitors index check your monitor. 2. View all monitors with the Monitors index page Continuous application performance monitoring is essential to ensure that web services are in place, working correctly, and error-free. Synthetic monitoring provides this type of assurance by performing automated tests on your web application for each selected locationânoting downtime instances (âviolationsâ) and collecting aggregate numbers, results, and detailed statistics for each page resource. Use the Monitors index page to get a high level view of this information, or select an individual monitor to view the Summary, for ping monitors, or Overview, for simple and scripted monitors, page and get a deeper insight into its performance over time. How to view your monitors in the New Relic One: New Relic Explorer To view a list of monitors using the New Relic One Monitors index page: Go to one.newrelic.com > Explorer > Synthetic monitors. For more information, see the documentation about navigating core UI components in New Relic One. Monitors index page To view a list of monitors using the Monitors index page: Go to one.newrelic.com > Synthetics. 3. View individual monitor results Itâs not enough to understand how your web apps are performing for your West Coast customers; you need to be able to view how theyâre performing across the country and around the globe. By taking advantage of synthetic monitors and visiting your Results page, you can see how everything from development to production affects user experience. You can locate interesting results by sorting the list to identify slow, fast, or other unusual results. Or filter by location to understand how monitor performance varies with geography. (The âNetwork timingsâ graph below provides a snapshot of webpage performance over a given period.) How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors tab, select your monitor. Select Monitor > Results. Gain an up-to-the-minute view of the slowest page loads for every monitored location. 4. Understand the load-time impact of each resource Visit the synthetics Resources page to see how each resource on your websiteâincluding CSS, JavaScript, images, HTML and moreâis affecting your overall load. You can drill into detailed metrics collected at run time, locate performance information for time spent by third-party resources, and identify HTTP response codes for each resource. How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors drop-down menu, select your monitor. Select Monitor > Resources. 5. Configure and develop a scripted browser test Using scripted browsers, you can build complex monitoring workflows using the Selenium JavaScript Webdriver bindings. For instance, you can log in to the application, navigate to a particular link, and wait for a page element to load and add an assertion. How to do it: Go to one.newrelic.com > Synthetics. Choose your monitor type (for example, Scripted Browser). Enter the name and details of your monitor (for example, Sitename.com Scripted Browser) Select the locations from which you want your monitor to run (for example, Mumbai, Seoul, Columbus, and Montreal). Choose a frequency to determine how often each location will run your monitor (for example, five minutes). Set a notification method to alert your team when performance violations occur. You are now ready to write your script. (Below is an example of a script used to test the performance of a main navigation page.) var assert = require('chai').assert; // script-wide timeout for all wait and waitandfind functions (in ms) var default_element_timeout = 190000; //3 mins var default_pageload_timeout = 240000; //4 mins var navlinks = [\"css-locator-1\",\"css-locator-2\"]; //sets element load timeout to 3 mins $browser.manage().timeouts().implicitlyWait(default_element_timeout); //sets page load timoeout to 4 mins $browser.manage().timeouts().pageloadTimeout(default_pageload_timeout); //test all the main nav page performances $browser.get(\"http://www.sitename.com\").then(function(){ return $browser.findelement($driver.by.classname(\"site-theme-example\")); }).then(function(){ //verifies the nav list has loaded return $browser.findelement($driver.by.classname(\"site-nav-list-example\")); }).then(function(){ //loops through the navlinks array navlinks.foreach(function(val, i, arr){ //finds and navigates to each navlink page return $browser.findelement($driver.by.classname(navlinks[i])).click().then(function(){ //verifies that the nav list loaded before moving on return $browser.findelement($driver.by.classname(\"site-nav-list-example\")).then(function(){ //verifies that the page logo footer at bottom of page has loaded return $browser.findelement($driver.by.classname(\"site-footer-logo\")); }) }) }) }); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.89311,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s synthetic monitoringâpowered by a Selenium-driven Chrome browserâallows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its <em>full</em> power. Tip To use synthetic monitoring and the rest of our"
      },
      "id": "603e84bb28ccbce555eba771"
    },
    {
      "sections": [
        "Infrastructure monitoring best practices guide",
        "1. Install the infrastructure agent across your entire environment",
        "How to do it",
        "Tip",
        "2. Configure the native EC2 integration",
        "3. Activate the integrations",
        "4. Create filter sets",
        "5. Create alert conditions",
        "6. View infrastructure data alongside APM data",
        "7. Access Infrastructure data using the Data explorer",
        "8. Update your agents regularly",
        "Want more user tips?"
      ],
      "title": "Infrastructure monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "931ea7767d73381ca0cb3502ec14f88d66ce5eaf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/infrastructure-monitoring-best-practices-guide/",
      "published_at": "2021-05-22T07:34:10Z",
      "updated_at": "2021-03-13T07:39:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Want even longer periods of uninterrupted sleep? Here are eight best practices to make dynamic infrastructure and server monitoring even easier with New Relic's infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution was designed to help enterprise customers monitor their large and dynamically changing environments at scale. In order to facilitate this, the UI is completely driven by tags that let you visualize aggregated metrics, events, and inventory for a large number of servers. To really get the most out of infrastructure monitoring, we recommend installing it across your entire environment, preferably even across multiple regions and clusters. This will provide a more accurate picture of the health of your host ecosystem and the impact your infrastructure has on your applications. Want to achieve faster Mean Time To Resolution (MTTR)? Install the infrastructure agent on database servers, web servers, and any other host that supports your applications. When deploying the agent, leverage custom attributes to tag your hosts so that you can use those for filtering the data presented in the UI and for setting alerts. This is in addition to any Amazon EC2 tags you may be using which will auto-import when you enable the EC2 integration. You may also prefer to keep the agent logs separate from the system logs, which you can do through the configuration. How to do it Leverage our install modules for config management tools such as Chef, Puppet and Ansible to easily deploy your agent across all your infrastructure. Read the instructions in the github repo for your config management tool referenced in the link above and define the custom_attributes you want to use to tag your hosts. Set the log_file attribute to your preferred location for the infrastructure agent logs. Tip If you are installing the agent on a single host, the process should only take a few minutes and you can find detailed instructions in our documentation. 2. Configure the native EC2 integration If you have an AWS environment, in addition to installing the infrastructure agent on your EC2 instances to monitor them, we also recommend configuring the EC2 integration so that New Relic can automatically import all the tags and metadata associated with your AWS instances. This allows you to filter down to a part of your infrastructure using the same AWS tags (example, ECTag_Role='Kafka'), and slice-and-dice your data in multiple ways. Additionally, our âAlertsâ and âSaved Filter Setsâ are completely tag-driven and dynamic, so they automatically add/remove instances matching these tags to give our users the most real-time views that scale with your cloud infrastructure. 3. Activate the integrations Monitoring your infrastructure extends beyond just CPU, memory, and storage utilization. Thatâs why New Relic has out-of-the-box integrations that allow you to monitor all the services that support your hosts as well. Activate any of our integrations, including AWS Billing, AWS ELB, Amazon S3, MySQL, NGINX, and more, to extend monitoring to your AWS or on-host applications, and access the pre-configured dashboards that appear for each of them. 4. Create filter sets With New Relic, users can create filter sets to organize hosts, cluster roles, and other resources based on criteria that matter the most to users. This allows you to optimize your resources by using a focused view to monitor, detect, and resolve any problems proactively. The attributes for filtering are populated from the auto-imported EC2 tags or custom tags that may be applied to hosts. You can combine as many filters as you want in a filter set, and save them to share with other people in your account. Youâll also be able to see the color-coded health status of each host inside the filter set, so you can quickly identify problematic areas of your infrastructure. Additionally, filter sets can be used in the health map to get an overview of your infrastructure performance at a glance based on the filters that matter to your teams. 5. Create alert conditions With New Relic, you can create alert conditions directly within the context of what you are currently monitoring with New Relic. For example, if you are viewing a filter set comprised of a large number of hosts and notice a problem, you donât need to create an individual alert condition for every host within. Instead, we recommend initiating the alert condition directly from the chart of the metric you are viewing and creating it based on the filter tags. This will create an alert condition for any hosts that match those tags, allowing our infrastructure monitoring to automatically remove hosts that go offline and add new hosts to the alert condition if they match those tags. Alerts configured once for the appropriate tags will scale correctly across all future hosts. And know that you can also leverage existing alert policies for infrastructure alert conditions. 6. View infrastructure data alongside APM data The integration between New Relic APM and infrastructure monitoring lets you see your APM data and infrastructure data side by side, so you can find the root cause of problems more quickly, no matter where they originate. This allows users to view the performance relationship of your hosts and the applications running on them, allowing for quicker diagnosis of the issue and impact on the businessâ health. Use health maps to quickly spot any issues or alerts related to the health of your applications and how that connects to the supporting infrastructure. The first boxes starting from the top left are those that require your attention. 7. Access Infrastructure data using the Data explorer Teams that use multiple New Relic capabilities find it useful to create a single dashboard to visually correlate the infrastructureâs health with application, browser and synthetics metrics. Thatâs where New Relic data exploration features comes in. All the granular metrics and events collected by infrastructure monitoring are stored in New Relic and are accessible to you immediately. Having access to the raw metrics means you can run more custom queries using NRQL, and also create dashboards to share infrastructure metrics with your team. 8. Update your agents regularly New Relicâs software engineering team is constantly pushing out improvements and new features to improve our customersâ overall monitoring experience. In order to take advantage of all the awesomeness theyâre delivering, we recommend regularly updating to the latest version of the infrastructure agent. Want more user tips? View training videos at New Relic University. Read the documentation. Check out our Tutorials. Ask a question in the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 225.60431,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Want even longer periods of uninterrupted sleep? Here are eight <em>best</em> <em>practices</em> to make dynamic infrastructure and server monitoring even easier with <em>New</em> <em>Relic</em>&#x27;s infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution"
      },
      "id": "6044151c28ccbc4b4f2c60af"
    }
  ],
  "/docs/new-relic-solutions/best-practices-guides/full-stack-observability/browser-monitoring-best-practices-java": [
    {
      "sections": [
        "APM best practices guide",
        "Tip",
        "1. Standardize application names",
        "How to do it",
        "2. Add tags to your applications",
        "Caution",
        "3. Create and evaluate alert policies",
        "4. Identify and set up key transactions",
        "5. Track deployment history",
        "6. Review APM reports",
        "7. Review your environment with service maps",
        "8. Keep current",
        "9. Manage user access",
        "Important"
      ],
      "title": "APM best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "368a1a5688384d5bebf128604a9b8f190d335524",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide/",
      "published_at": "2021-05-22T14:44:24Z",
      "updated_at": "2021-03-30T13:08:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application Monitoring Tips You Need To Know It's one thing to know how to use APM, but it's another thing to know how to use New Relic's application performance monitoring software well. Here are some best practices designed to help you become an APM masterâand a key asset to your team! Tip To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. 1. Standardize application names Most New Relic agents provide a default application name, such as \"My Application\" or \"PHP Application,\" if you don't specify one in your New Relic configuration file. You don't want to end up with 20 identically named applications, be sure to select a descriptive identifier for your apps as soon you deploy them. To keep things consistent and easy to navigate, New Relic recommends standardizing your application naming (for example, all apps in Staging append [ Staging] or the like at the end of their names). Ideally, you want your new Java applications to be named automatically to reduce the chances of typographical errors and misnaming. How to do it For Java applications, automatic application naming can come from the following sources: Request attribute Servlet init parameter Filter init parameter Web app context parameter Web app context name (display name) Web app context path Choose the method that fits best your needs and follow these steps. For non-Java applications, there are no automatic naming methods, so refer to the documentation for your APM agent. 2. Add tags to your applications When several different applications use the same account, and each application spans multiple environments (for example, development, test, pre-production, production), it can be hard to find a specific application in your overview dashboard. That's why we recommend adding tags to your apps so that you can segment them into logical groups. The two most common tags that mature APM customers use are application name and environment. So, for example, if you wanted to view the billing application in Test, you could simply filter by \"billing app\" (name tag) and \"test\" (environment tag). Caution In the APM agent configuration settings files, use the labels field to add tags to your data. For example, see this description of the Python labels setting. APM is designed so that apps can roll up into an unlimited number of meaningful tag categories. How to do it Read the overview: Use tags to organize and group what you monitor. Follow these instructions for creating tags: NerdGraph tagging API tutorial. 3. Create and evaluate alert policies When key performance indicators spike or drop, individuals and teams in your organization need to be notified. Alerting in New Relic provides a set of tools including dynamic baselines that allow you to detect problems before they impact your end users. Alert policies can be set up in two primary ways: Static threshold alerts are great when you already know the nature of an application and its normal behaviors aren't likely to change anytime soon. Apdex score, response time, error rate, throughput are some of the static thresholds you can create alert policies on. Dynamic baseline alerts make it easy to determine and set dynamic alert thresholds for applications with varying seasonal patterns and growth trends (which make it difficult to set thresholds that define normal behavior). These alerts use baselines modeled from your applicationâs historical metric data. Each alert policy can contain as many conditions as you need, and each alert condition includes three components: Type of condition (metric, external service, and so on) Entities that the policy targets (for example, apps monitored by New Relic APM or New Relic Browser, hosts monitored by New Relic Infrastructure, and so on) Thresholds that escalate into alerting situations with increasing severity Once you have your alerting set up, you then want to make sure you're taking advantage of all viable notification channels. After all, what good are alerts if no one knows about them? You can manage alerts by creating specific user groups and by leveraging New Relic's integrated alert channels, including Slack, PagerDuty, webhooks, and email. Be sure to evaluate alert policies on a regular basis to ensure that they are always valid. How to do it See the detailed documentation: To set up dynamic baseline alerts and choose an application, follow standard procedures. You will see a preview of the metric with the predicted baseline You can select a metric for that application and see the corresponding baseline. Then, using the threshold sliders, you can set how closely you want your threshold to follow the baseline prediction. To set up static threshold alerts for your Apdex settings, follow standard procedures. To set up your alert notification channels, follow standard procedures. 4. Identify and set up key transactions Depending on the nature of your application, some transactions may be more important to you than others. New Relic's key transactions feature is designed to help you closely monitor what you consider to be your app's most business-critical transactions, whether that's end-user or app response time, call counts, error rates, or something else. You can also set alert threshold levels for notifications when your key transactions are performing poorly. How to do it In the menu bar, select More > Key transactions, and then select Add more. Then select the app and web transaction or, from the selected transaction, select Track as key transaction. Type a name for the key transaction, and select Track key transaction. Optional: If the agent for the selected app supports custom alerting, use the default values that New Relic automatically fills, or select Edit key alert transaction policy to set the Apdex and alert threshold values. To view the key transactions dashboard details, select View new key transaction. 5. Track deployment history When development teams are pushing new code out as frequently as possible, it can be hard to measure the impact that each deployment is having on performance. One way to stay in tune with how these changes are affecting your application is with deployment reports. These reports list recent deployments and their impact on end-users and app servers' Apdex scores, along with response times, throughput, and errors. You can also view and drill down into the details to catch errors related to recent deployments, or file a ticket and share details with your team. How to do it From the New Relic menu bar, select APM > (selected app) > Events > Deployments. To view performance after a deployment, go to the selected app's Overview dashboard in the Recent events section. A blue vertical bar on a chart indicates a deployment. To view summary information about the deployment, point to the blue bar. 6. Review APM reports From SLA, deployment, and capacity to scalability, host usage reports, and more, New Relic APM offers a variety of downloadable reporting tools surfacing historical trendsâall great ways to report to senior executive teams or customers. Take a look at the full list of reports and use them to your advantage. How to do it From the New Relic APM menu bar, select Applications > (selected app) > Reports. Select the report you'd like to see. If you want to save or export a report to share, select Download this report as .csv, which will create a report with comma-separated values. 7. Review your environment with service maps Use New Relic service maps, a feature included in APM, to understand how apps and services in your architecture connect and talk to each other. Service maps are visual, customizable representations of your application architecture. Maps automatically show you your app's connections and dependencies, including databases and external services. Health indicators and performance metrics show you the current operational status for every part of your architecture. How to do it Go to one.newrelic.com > More > service maps. To get started, read the instructions in Introduction to service maps. 8. Keep current With New Relicâs SaaS platform, getting new features is as easy as updating your agent. Most likely your organization already has a set of scripts for deploying application upgrades into your environment. In a similar fashion, you can also automate your New Relic agent deployment to ensure that your systems are up to date. Both Puppet and Chef scripts are great examples of deployment frameworks that make life easier by allowing you to automate your entire deployment and management process. How to do it Regularly review which version of the agent you're using so that you know when an update is needed. If the latest agent release contains a needed fix or added functionality, download it. To deploy the agent automatically (preferred as a method to avoid errors): Use existing deployment scripts, provided they can be adapted to handle the deployment. OR Create and maintain a script that specifically deploys and configures the New Relic agent. Ideally, the script would pull the agent files from a repository where the files are versioned (for rollback purposes). Once the script has been created, shut down the application (unless script handles this). Run the deployment script. Start the application (unless script handles this). If problems arise, run the script to roll back to the previous version. To deploy the agent manually: Back up the current agent directory. Deploy the updated agent into the existing agent directory. Modify configuration files by comparing new files with existing files. In particular, make sure things like license key and custom extensions are copied over to the new configuration. Restart the application. If problems arise, restore the old agent using the backup and restart. 9. Manage user access Important This is available only for accounts on our original product-based pricing plan. Enable role-based access control (RBAC) and single sign-on (SSO) New Relic allows authorized individuals to access the broadest possible amount of data, regardless of their assigned role. As an Owner or Administrator of your New Relic account, you can control the permissions of individual users or entire roles with RBAC. To find out what is possible and how to make changes, see Users and roles. Security is no doubt of utmost concern to your organization. To simplify password management for your employees and strengthen security, you may already be using SSO with your other systems. You should do the same with New Relic. Using New Relic's SSO integration feature, account administrators will be able to enforce strong passwords and restrict login via a corporate authentication mechanism. This way, New Relic users who have already authenticated using a corporate SSO system will be able to bypass the New Relic login prompt. How to do it Log in to New Relic as an admin and go to the SSO configuration page. From the New Relic title bar, select (your account name) > Account Settings > Integrations > Single Sign On. From the SAML Single Sign On page, review your New Relic SAML Service Provider details. To upload your SAML Identity Provider certificate, select Choose File, and then follow standard procedures to select and save the file. Copy and paste in (or type) the Remove login URL that your users will use for Single Sign-On. If your organizationâs SAML integration provides a redirect URL for logout, copy and paste in (or type) the Logout landing URL; otherwise leave blank. Save, test, and enable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.28435,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Application Monitoring Tips You Need To Know It&#x27;s one thing to know how to use APM, but it&#x27;s another thing to know how to use <em>New</em> <em>Relic</em>&#x27;s application performance monitoring software well. Here are some <em>best</em> <em>practices</em> designed to help you become an APM masterâand a key asset to your team! Tip To get"
      },
      "id": "6044186564441f1f94378ecc"
    },
    {
      "sections": [
        "Synthetic monitoring best practices guide",
        "Tip",
        "1. Match your monitor type to monitoring need",
        "How to do it",
        "2. View all monitors with the Monitors index page",
        "How to view your monitors in the New Relic One:",
        "New Relic Explorer",
        "Monitors index page",
        "3. View individual monitor results",
        "How to do it:",
        "4. Understand the load-time impact of each resource",
        "5. Configure and develop a scripted browser test"
      ],
      "title": "Synthetic monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e76eb0669a1433bb9d0de70d90413e19749adf61",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/synthetic-monitoring-best-practices-guide/",
      "published_at": "2021-05-22T07:37:12Z",
      "updated_at": "2021-03-29T20:29:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's synthetic monitoringâpowered by a Selenium-driven Chrome browserâallows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its full power. Tip To use synthetic monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. 1. Match your monitor type to monitoring need Synthetic monitors are virtual browsers that measure the performance of your website, recording each check in detail. They also capture aggregate numbers for load time, uptime, and average download size, as well as an overview, detailed statistics for each page resource, and downtime incidents. There are four types of synthetic monitors; the ones you deploy will depend on the things you want to monitor: Ping monitorsâto ensure that your site is accessible. Simple browser monitorsâto ensure end-user performance. Scripted browsersâto ensure that particular resources are present. API monitorsâto ensure that your app server works as well as your website. How to do it To add a monitor, go to one.newrelic.com > Synthetics (or one.eu.newrelic.com if you have an EU-based account) and click Create monitor. Specify monitor type, name, and URL. Optional: Add a validation string (available for ping and simple browser) or advanced options, which enable substring monitoring for the following types of response validation: Verify SSL (for Ping and Simple Browser). This option verifies the validity of the SSL certificate chain. It can be duplicated by running the following syntax: openssl s_client -servername {YOUR_HOSTNAME} -connect {YOUR_HOSTNAME}:443 -CApath /etc/ssl/certs > /dev/null Copy Bypass HEAD request (for Ping). This option skips the default HEAD request and instead uses the GET verb with a ping check. Redirect is Failure (for Ping). If a redirect result occurs when Redirect is Failure is enabled, Synthetics categorizes it as a failure (rather than following the redirect and checking the resulting URL). Select the locations where you want your monitor to run. Choose a frequency to determine how often each location will run your monitor. Optional: Set up alert notifications. Select Create my monitor to confirm. Wait a few minutes; then from the Monitors index check your monitor. 2. View all monitors with the Monitors index page Continuous application performance monitoring is essential to ensure that web services are in place, working correctly, and error-free. Synthetic monitoring provides this type of assurance by performing automated tests on your web application for each selected locationânoting downtime instances (âviolationsâ) and collecting aggregate numbers, results, and detailed statistics for each page resource. Use the Monitors index page to get a high level view of this information, or select an individual monitor to view the Summary, for ping monitors, or Overview, for simple and scripted monitors, page and get a deeper insight into its performance over time. How to view your monitors in the New Relic One: New Relic Explorer To view a list of monitors using the New Relic One Monitors index page: Go to one.newrelic.com > Explorer > Synthetic monitors. For more information, see the documentation about navigating core UI components in New Relic One. Monitors index page To view a list of monitors using the Monitors index page: Go to one.newrelic.com > Synthetics. 3. View individual monitor results Itâs not enough to understand how your web apps are performing for your West Coast customers; you need to be able to view how theyâre performing across the country and around the globe. By taking advantage of synthetic monitors and visiting your Results page, you can see how everything from development to production affects user experience. You can locate interesting results by sorting the list to identify slow, fast, or other unusual results. Or filter by location to understand how monitor performance varies with geography. (The âNetwork timingsâ graph below provides a snapshot of webpage performance over a given period.) How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors tab, select your monitor. Select Monitor > Results. Gain an up-to-the-minute view of the slowest page loads for every monitored location. 4. Understand the load-time impact of each resource Visit the synthetics Resources page to see how each resource on your websiteâincluding CSS, JavaScript, images, HTML and moreâis affecting your overall load. You can drill into detailed metrics collected at run time, locate performance information for time spent by third-party resources, and identify HTTP response codes for each resource. How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors drop-down menu, select your monitor. Select Monitor > Resources. 5. Configure and develop a scripted browser test Using scripted browsers, you can build complex monitoring workflows using the Selenium JavaScript Webdriver bindings. For instance, you can log in to the application, navigate to a particular link, and wait for a page element to load and add an assertion. How to do it: Go to one.newrelic.com > Synthetics. Choose your monitor type (for example, Scripted Browser). Enter the name and details of your monitor (for example, Sitename.com Scripted Browser) Select the locations from which you want your monitor to run (for example, Mumbai, Seoul, Columbus, and Montreal). Choose a frequency to determine how often each location will run your monitor (for example, five minutes). Set a notification method to alert your team when performance violations occur. You are now ready to write your script. (Below is an example of a script used to test the performance of a main navigation page.) var assert = require('chai').assert; // script-wide timeout for all wait and waitandfind functions (in ms) var default_element_timeout = 190000; //3 mins var default_pageload_timeout = 240000; //4 mins var navlinks = [\"css-locator-1\",\"css-locator-2\"]; //sets element load timeout to 3 mins $browser.manage().timeouts().implicitlyWait(default_element_timeout); //sets page load timoeout to 4 mins $browser.manage().timeouts().pageloadTimeout(default_pageload_timeout); //test all the main nav page performances $browser.get(\"http://www.sitename.com\").then(function(){ return $browser.findelement($driver.by.classname(\"site-theme-example\")); }).then(function(){ //verifies the nav list has loaded return $browser.findelement($driver.by.classname(\"site-nav-list-example\")); }).then(function(){ //loops through the navlinks array navlinks.foreach(function(val, i, arr){ //finds and navigates to each navlink page return $browser.findelement($driver.by.classname(navlinks[i])).click().then(function(){ //verifies that the nav list loaded before moving on return $browser.findelement($driver.by.classname(\"site-nav-list-example\")).then(function(){ //verifies that the page logo footer at bottom of page has loaded return $browser.findelement($driver.by.classname(\"site-footer-logo\")); }) }) }) }); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.8931,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s synthetic monitoringâpowered by a Selenium-driven Chrome browserâallows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its <em>full</em> power. Tip To use synthetic monitoring and the rest of our"
      },
      "id": "603e84bb28ccbce555eba771"
    },
    {
      "sections": [
        "Infrastructure monitoring best practices guide",
        "1. Install the infrastructure agent across your entire environment",
        "How to do it",
        "Tip",
        "2. Configure the native EC2 integration",
        "3. Activate the integrations",
        "4. Create filter sets",
        "5. Create alert conditions",
        "6. View infrastructure data alongside APM data",
        "7. Access Infrastructure data using the Data explorer",
        "8. Update your agents regularly",
        "Want more user tips?"
      ],
      "title": "Infrastructure monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "931ea7767d73381ca0cb3502ec14f88d66ce5eaf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/infrastructure-monitoring-best-practices-guide/",
      "published_at": "2021-05-22T07:34:10Z",
      "updated_at": "2021-03-13T07:39:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Want even longer periods of uninterrupted sleep? Here are eight best practices to make dynamic infrastructure and server monitoring even easier with New Relic's infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution was designed to help enterprise customers monitor their large and dynamically changing environments at scale. In order to facilitate this, the UI is completely driven by tags that let you visualize aggregated metrics, events, and inventory for a large number of servers. To really get the most out of infrastructure monitoring, we recommend installing it across your entire environment, preferably even across multiple regions and clusters. This will provide a more accurate picture of the health of your host ecosystem and the impact your infrastructure has on your applications. Want to achieve faster Mean Time To Resolution (MTTR)? Install the infrastructure agent on database servers, web servers, and any other host that supports your applications. When deploying the agent, leverage custom attributes to tag your hosts so that you can use those for filtering the data presented in the UI and for setting alerts. This is in addition to any Amazon EC2 tags you may be using which will auto-import when you enable the EC2 integration. You may also prefer to keep the agent logs separate from the system logs, which you can do through the configuration. How to do it Leverage our install modules for config management tools such as Chef, Puppet and Ansible to easily deploy your agent across all your infrastructure. Read the instructions in the github repo for your config management tool referenced in the link above and define the custom_attributes you want to use to tag your hosts. Set the log_file attribute to your preferred location for the infrastructure agent logs. Tip If you are installing the agent on a single host, the process should only take a few minutes and you can find detailed instructions in our documentation. 2. Configure the native EC2 integration If you have an AWS environment, in addition to installing the infrastructure agent on your EC2 instances to monitor them, we also recommend configuring the EC2 integration so that New Relic can automatically import all the tags and metadata associated with your AWS instances. This allows you to filter down to a part of your infrastructure using the same AWS tags (example, ECTag_Role='Kafka'), and slice-and-dice your data in multiple ways. Additionally, our âAlertsâ and âSaved Filter Setsâ are completely tag-driven and dynamic, so they automatically add/remove instances matching these tags to give our users the most real-time views that scale with your cloud infrastructure. 3. Activate the integrations Monitoring your infrastructure extends beyond just CPU, memory, and storage utilization. Thatâs why New Relic has out-of-the-box integrations that allow you to monitor all the services that support your hosts as well. Activate any of our integrations, including AWS Billing, AWS ELB, Amazon S3, MySQL, NGINX, and more, to extend monitoring to your AWS or on-host applications, and access the pre-configured dashboards that appear for each of them. 4. Create filter sets With New Relic, users can create filter sets to organize hosts, cluster roles, and other resources based on criteria that matter the most to users. This allows you to optimize your resources by using a focused view to monitor, detect, and resolve any problems proactively. The attributes for filtering are populated from the auto-imported EC2 tags or custom tags that may be applied to hosts. You can combine as many filters as you want in a filter set, and save them to share with other people in your account. Youâll also be able to see the color-coded health status of each host inside the filter set, so you can quickly identify problematic areas of your infrastructure. Additionally, filter sets can be used in the health map to get an overview of your infrastructure performance at a glance based on the filters that matter to your teams. 5. Create alert conditions With New Relic, you can create alert conditions directly within the context of what you are currently monitoring with New Relic. For example, if you are viewing a filter set comprised of a large number of hosts and notice a problem, you donât need to create an individual alert condition for every host within. Instead, we recommend initiating the alert condition directly from the chart of the metric you are viewing and creating it based on the filter tags. This will create an alert condition for any hosts that match those tags, allowing our infrastructure monitoring to automatically remove hosts that go offline and add new hosts to the alert condition if they match those tags. Alerts configured once for the appropriate tags will scale correctly across all future hosts. And know that you can also leverage existing alert policies for infrastructure alert conditions. 6. View infrastructure data alongside APM data The integration between New Relic APM and infrastructure monitoring lets you see your APM data and infrastructure data side by side, so you can find the root cause of problems more quickly, no matter where they originate. This allows users to view the performance relationship of your hosts and the applications running on them, allowing for quicker diagnosis of the issue and impact on the businessâ health. Use health maps to quickly spot any issues or alerts related to the health of your applications and how that connects to the supporting infrastructure. The first boxes starting from the top left are those that require your attention. 7. Access Infrastructure data using the Data explorer Teams that use multiple New Relic capabilities find it useful to create a single dashboard to visually correlate the infrastructureâs health with application, browser and synthetics metrics. Thatâs where New Relic data exploration features comes in. All the granular metrics and events collected by infrastructure monitoring are stored in New Relic and are accessible to you immediately. Having access to the raw metrics means you can run more custom queries using NRQL, and also create dashboards to share infrastructure metrics with your team. 8. Update your agents regularly New Relicâs software engineering team is constantly pushing out improvements and new features to improve our customersâ overall monitoring experience. In order to take advantage of all the awesomeness theyâre delivering, we recommend regularly updating to the latest version of the infrastructure agent. Want more user tips? View training videos at New Relic University. Read the documentation. Check out our Tutorials. Ask a question in the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 225.60431,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Want even longer periods of uninterrupted sleep? Here are eight <em>best</em> <em>practices</em> to make dynamic infrastructure and server monitoring even easier with <em>New</em> <em>Relic</em>&#x27;s infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution"
      },
      "id": "6044151c28ccbc4b4f2c60af"
    }
  ],
  "/docs/new-relic-solutions/best-practices-guides/full-stack-observability/infrastructure-monitoring-best-practices-guide": [
    {
      "sections": [
        "APM best practices guide",
        "Tip",
        "1. Standardize application names",
        "How to do it",
        "2. Add tags to your applications",
        "Caution",
        "3. Create and evaluate alert policies",
        "4. Identify and set up key transactions",
        "5. Track deployment history",
        "6. Review APM reports",
        "7. Review your environment with service maps",
        "8. Keep current",
        "9. Manage user access",
        "Important"
      ],
      "title": "APM best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "368a1a5688384d5bebf128604a9b8f190d335524",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide/",
      "published_at": "2021-05-22T14:44:24Z",
      "updated_at": "2021-03-30T13:08:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application Monitoring Tips You Need To Know It's one thing to know how to use APM, but it's another thing to know how to use New Relic's application performance monitoring software well. Here are some best practices designed to help you become an APM masterâand a key asset to your team! Tip To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. 1. Standardize application names Most New Relic agents provide a default application name, such as \"My Application\" or \"PHP Application,\" if you don't specify one in your New Relic configuration file. You don't want to end up with 20 identically named applications, be sure to select a descriptive identifier for your apps as soon you deploy them. To keep things consistent and easy to navigate, New Relic recommends standardizing your application naming (for example, all apps in Staging append [ Staging] or the like at the end of their names). Ideally, you want your new Java applications to be named automatically to reduce the chances of typographical errors and misnaming. How to do it For Java applications, automatic application naming can come from the following sources: Request attribute Servlet init parameter Filter init parameter Web app context parameter Web app context name (display name) Web app context path Choose the method that fits best your needs and follow these steps. For non-Java applications, there are no automatic naming methods, so refer to the documentation for your APM agent. 2. Add tags to your applications When several different applications use the same account, and each application spans multiple environments (for example, development, test, pre-production, production), it can be hard to find a specific application in your overview dashboard. That's why we recommend adding tags to your apps so that you can segment them into logical groups. The two most common tags that mature APM customers use are application name and environment. So, for example, if you wanted to view the billing application in Test, you could simply filter by \"billing app\" (name tag) and \"test\" (environment tag). Caution In the APM agent configuration settings files, use the labels field to add tags to your data. For example, see this description of the Python labels setting. APM is designed so that apps can roll up into an unlimited number of meaningful tag categories. How to do it Read the overview: Use tags to organize and group what you monitor. Follow these instructions for creating tags: NerdGraph tagging API tutorial. 3. Create and evaluate alert policies When key performance indicators spike or drop, individuals and teams in your organization need to be notified. Alerting in New Relic provides a set of tools including dynamic baselines that allow you to detect problems before they impact your end users. Alert policies can be set up in two primary ways: Static threshold alerts are great when you already know the nature of an application and its normal behaviors aren't likely to change anytime soon. Apdex score, response time, error rate, throughput are some of the static thresholds you can create alert policies on. Dynamic baseline alerts make it easy to determine and set dynamic alert thresholds for applications with varying seasonal patterns and growth trends (which make it difficult to set thresholds that define normal behavior). These alerts use baselines modeled from your applicationâs historical metric data. Each alert policy can contain as many conditions as you need, and each alert condition includes three components: Type of condition (metric, external service, and so on) Entities that the policy targets (for example, apps monitored by New Relic APM or New Relic Browser, hosts monitored by New Relic Infrastructure, and so on) Thresholds that escalate into alerting situations with increasing severity Once you have your alerting set up, you then want to make sure you're taking advantage of all viable notification channels. After all, what good are alerts if no one knows about them? You can manage alerts by creating specific user groups and by leveraging New Relic's integrated alert channels, including Slack, PagerDuty, webhooks, and email. Be sure to evaluate alert policies on a regular basis to ensure that they are always valid. How to do it See the detailed documentation: To set up dynamic baseline alerts and choose an application, follow standard procedures. You will see a preview of the metric with the predicted baseline You can select a metric for that application and see the corresponding baseline. Then, using the threshold sliders, you can set how closely you want your threshold to follow the baseline prediction. To set up static threshold alerts for your Apdex settings, follow standard procedures. To set up your alert notification channels, follow standard procedures. 4. Identify and set up key transactions Depending on the nature of your application, some transactions may be more important to you than others. New Relic's key transactions feature is designed to help you closely monitor what you consider to be your app's most business-critical transactions, whether that's end-user or app response time, call counts, error rates, or something else. You can also set alert threshold levels for notifications when your key transactions are performing poorly. How to do it In the menu bar, select More > Key transactions, and then select Add more. Then select the app and web transaction or, from the selected transaction, select Track as key transaction. Type a name for the key transaction, and select Track key transaction. Optional: If the agent for the selected app supports custom alerting, use the default values that New Relic automatically fills, or select Edit key alert transaction policy to set the Apdex and alert threshold values. To view the key transactions dashboard details, select View new key transaction. 5. Track deployment history When development teams are pushing new code out as frequently as possible, it can be hard to measure the impact that each deployment is having on performance. One way to stay in tune with how these changes are affecting your application is with deployment reports. These reports list recent deployments and their impact on end-users and app servers' Apdex scores, along with response times, throughput, and errors. You can also view and drill down into the details to catch errors related to recent deployments, or file a ticket and share details with your team. How to do it From the New Relic menu bar, select APM > (selected app) > Events > Deployments. To view performance after a deployment, go to the selected app's Overview dashboard in the Recent events section. A blue vertical bar on a chart indicates a deployment. To view summary information about the deployment, point to the blue bar. 6. Review APM reports From SLA, deployment, and capacity to scalability, host usage reports, and more, New Relic APM offers a variety of downloadable reporting tools surfacing historical trendsâall great ways to report to senior executive teams or customers. Take a look at the full list of reports and use them to your advantage. How to do it From the New Relic APM menu bar, select Applications > (selected app) > Reports. Select the report you'd like to see. If you want to save or export a report to share, select Download this report as .csv, which will create a report with comma-separated values. 7. Review your environment with service maps Use New Relic service maps, a feature included in APM, to understand how apps and services in your architecture connect and talk to each other. Service maps are visual, customizable representations of your application architecture. Maps automatically show you your app's connections and dependencies, including databases and external services. Health indicators and performance metrics show you the current operational status for every part of your architecture. How to do it Go to one.newrelic.com > More > service maps. To get started, read the instructions in Introduction to service maps. 8. Keep current With New Relicâs SaaS platform, getting new features is as easy as updating your agent. Most likely your organization already has a set of scripts for deploying application upgrades into your environment. In a similar fashion, you can also automate your New Relic agent deployment to ensure that your systems are up to date. Both Puppet and Chef scripts are great examples of deployment frameworks that make life easier by allowing you to automate your entire deployment and management process. How to do it Regularly review which version of the agent you're using so that you know when an update is needed. If the latest agent release contains a needed fix or added functionality, download it. To deploy the agent automatically (preferred as a method to avoid errors): Use existing deployment scripts, provided they can be adapted to handle the deployment. OR Create and maintain a script that specifically deploys and configures the New Relic agent. Ideally, the script would pull the agent files from a repository where the files are versioned (for rollback purposes). Once the script has been created, shut down the application (unless script handles this). Run the deployment script. Start the application (unless script handles this). If problems arise, run the script to roll back to the previous version. To deploy the agent manually: Back up the current agent directory. Deploy the updated agent into the existing agent directory. Modify configuration files by comparing new files with existing files. In particular, make sure things like license key and custom extensions are copied over to the new configuration. Restart the application. If problems arise, restore the old agent using the backup and restart. 9. Manage user access Important This is available only for accounts on our original product-based pricing plan. Enable role-based access control (RBAC) and single sign-on (SSO) New Relic allows authorized individuals to access the broadest possible amount of data, regardless of their assigned role. As an Owner or Administrator of your New Relic account, you can control the permissions of individual users or entire roles with RBAC. To find out what is possible and how to make changes, see Users and roles. Security is no doubt of utmost concern to your organization. To simplify password management for your employees and strengthen security, you may already be using SSO with your other systems. You should do the same with New Relic. Using New Relic's SSO integration feature, account administrators will be able to enforce strong passwords and restrict login via a corporate authentication mechanism. This way, New Relic users who have already authenticated using a corporate SSO system will be able to bypass the New Relic login prompt. How to do it Log in to New Relic as an admin and go to the SSO configuration page. From the New Relic title bar, select (your account name) > Account Settings > Integrations > Single Sign On. From the SAML Single Sign On page, review your New Relic SAML Service Provider details. To upload your SAML Identity Provider certificate, select Choose File, and then follow standard procedures to select and save the file. Copy and paste in (or type) the Remove login URL that your users will use for Single Sign-On. If your organizationâs SAML integration provides a redirect URL for logout, copy and paste in (or type) the Logout landing URL; otherwise leave blank. Save, test, and enable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.28435,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Application Monitoring Tips You Need To Know It&#x27;s one thing to know how to use APM, but it&#x27;s another thing to know how to use <em>New</em> <em>Relic</em>&#x27;s application performance monitoring software well. Here are some <em>best</em> <em>practices</em> designed to help you become an APM masterâand a key asset to your team! Tip To get"
      },
      "id": "6044186564441f1f94378ecc"
    },
    {
      "sections": [
        "Synthetic monitoring best practices guide",
        "Tip",
        "1. Match your monitor type to monitoring need",
        "How to do it",
        "2. View all monitors with the Monitors index page",
        "How to view your monitors in the New Relic One:",
        "New Relic Explorer",
        "Monitors index page",
        "3. View individual monitor results",
        "How to do it:",
        "4. Understand the load-time impact of each resource",
        "5. Configure and develop a scripted browser test"
      ],
      "title": "Synthetic monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e76eb0669a1433bb9d0de70d90413e19749adf61",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/synthetic-monitoring-best-practices-guide/",
      "published_at": "2021-05-22T07:37:12Z",
      "updated_at": "2021-03-29T20:29:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's synthetic monitoringâpowered by a Selenium-driven Chrome browserâallows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its full power. Tip To use synthetic monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. 1. Match your monitor type to monitoring need Synthetic monitors are virtual browsers that measure the performance of your website, recording each check in detail. They also capture aggregate numbers for load time, uptime, and average download size, as well as an overview, detailed statistics for each page resource, and downtime incidents. There are four types of synthetic monitors; the ones you deploy will depend on the things you want to monitor: Ping monitorsâto ensure that your site is accessible. Simple browser monitorsâto ensure end-user performance. Scripted browsersâto ensure that particular resources are present. API monitorsâto ensure that your app server works as well as your website. How to do it To add a monitor, go to one.newrelic.com > Synthetics (or one.eu.newrelic.com if you have an EU-based account) and click Create monitor. Specify monitor type, name, and URL. Optional: Add a validation string (available for ping and simple browser) or advanced options, which enable substring monitoring for the following types of response validation: Verify SSL (for Ping and Simple Browser). This option verifies the validity of the SSL certificate chain. It can be duplicated by running the following syntax: openssl s_client -servername {YOUR_HOSTNAME} -connect {YOUR_HOSTNAME}:443 -CApath /etc/ssl/certs > /dev/null Copy Bypass HEAD request (for Ping). This option skips the default HEAD request and instead uses the GET verb with a ping check. Redirect is Failure (for Ping). If a redirect result occurs when Redirect is Failure is enabled, Synthetics categorizes it as a failure (rather than following the redirect and checking the resulting URL). Select the locations where you want your monitor to run. Choose a frequency to determine how often each location will run your monitor. Optional: Set up alert notifications. Select Create my monitor to confirm. Wait a few minutes; then from the Monitors index check your monitor. 2. View all monitors with the Monitors index page Continuous application performance monitoring is essential to ensure that web services are in place, working correctly, and error-free. Synthetic monitoring provides this type of assurance by performing automated tests on your web application for each selected locationânoting downtime instances (âviolationsâ) and collecting aggregate numbers, results, and detailed statistics for each page resource. Use the Monitors index page to get a high level view of this information, or select an individual monitor to view the Summary, for ping monitors, or Overview, for simple and scripted monitors, page and get a deeper insight into its performance over time. How to view your monitors in the New Relic One: New Relic Explorer To view a list of monitors using the New Relic One Monitors index page: Go to one.newrelic.com > Explorer > Synthetic monitors. For more information, see the documentation about navigating core UI components in New Relic One. Monitors index page To view a list of monitors using the Monitors index page: Go to one.newrelic.com > Synthetics. 3. View individual monitor results Itâs not enough to understand how your web apps are performing for your West Coast customers; you need to be able to view how theyâre performing across the country and around the globe. By taking advantage of synthetic monitors and visiting your Results page, you can see how everything from development to production affects user experience. You can locate interesting results by sorting the list to identify slow, fast, or other unusual results. Or filter by location to understand how monitor performance varies with geography. (The âNetwork timingsâ graph below provides a snapshot of webpage performance over a given period.) How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors tab, select your monitor. Select Monitor > Results. Gain an up-to-the-minute view of the slowest page loads for every monitored location. 4. Understand the load-time impact of each resource Visit the synthetics Resources page to see how each resource on your websiteâincluding CSS, JavaScript, images, HTML and moreâis affecting your overall load. You can drill into detailed metrics collected at run time, locate performance information for time spent by third-party resources, and identify HTTP response codes for each resource. How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors drop-down menu, select your monitor. Select Monitor > Resources. 5. Configure and develop a scripted browser test Using scripted browsers, you can build complex monitoring workflows using the Selenium JavaScript Webdriver bindings. For instance, you can log in to the application, navigate to a particular link, and wait for a page element to load and add an assertion. How to do it: Go to one.newrelic.com > Synthetics. Choose your monitor type (for example, Scripted Browser). Enter the name and details of your monitor (for example, Sitename.com Scripted Browser) Select the locations from which you want your monitor to run (for example, Mumbai, Seoul, Columbus, and Montreal). Choose a frequency to determine how often each location will run your monitor (for example, five minutes). Set a notification method to alert your team when performance violations occur. You are now ready to write your script. (Below is an example of a script used to test the performance of a main navigation page.) var assert = require('chai').assert; // script-wide timeout for all wait and waitandfind functions (in ms) var default_element_timeout = 190000; //3 mins var default_pageload_timeout = 240000; //4 mins var navlinks = [\"css-locator-1\",\"css-locator-2\"]; //sets element load timeout to 3 mins $browser.manage().timeouts().implicitlyWait(default_element_timeout); //sets page load timoeout to 4 mins $browser.manage().timeouts().pageloadTimeout(default_pageload_timeout); //test all the main nav page performances $browser.get(\"http://www.sitename.com\").then(function(){ return $browser.findelement($driver.by.classname(\"site-theme-example\")); }).then(function(){ //verifies the nav list has loaded return $browser.findelement($driver.by.classname(\"site-nav-list-example\")); }).then(function(){ //loops through the navlinks array navlinks.foreach(function(val, i, arr){ //finds and navigates to each navlink page return $browser.findelement($driver.by.classname(navlinks[i])).click().then(function(){ //verifies that the nav list loaded before moving on return $browser.findelement($driver.by.classname(\"site-nav-list-example\")).then(function(){ //verifies that the page logo footer at bottom of page has loaded return $browser.findelement($driver.by.classname(\"site-footer-logo\")); }) }) }) }); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.8931,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s synthetic monitoringâpowered by a Selenium-driven Chrome browserâallows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its <em>full</em> power. Tip To use synthetic monitoring and the rest of our"
      },
      "id": "603e84bb28ccbce555eba771"
    },
    {
      "sections": [
        "Monitor apps and hosts with health maps",
        "Best practices",
        "Features",
        "Entities prioritized by health",
        "Tip",
        "Entity sort order criteria",
        "Views, filters, toggles",
        "View and use health maps",
        "Use cases",
        "The system's current health at a glance",
        "Scope of the problem: What else is broken?",
        "Scale of the problem: Use context to find a noisy neighbor",
        "Troubleshooting"
      ],
      "title": "Monitor apps and hosts with health maps",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e7d1c9a1f713b33c4aa42c2cb5e1b7a6ac23c2e3",
      "image": "https://docs.newrelic.com/static/2a20f997d494faa0658b6d93c6ab1fd3/c1b63/health-map-demo-ss_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/monitor-apps-hosts-health-maps/",
      "published_at": "2021-05-22T07:35:38Z",
      "updated_at": "2021-03-13T07:37:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The health map provides a single place to visually monitor the health of all your apps and their related hosts, prioritized by health status. You can customize the page by using different views, filters, and toggles to organize the map in a way most relevant to you or your team. Use your health map to monitor applications and hosts in real-time, and quickly track down problems as they occur. Best practices The health map pulls data together from several New Relic solutions. To get the most out of the health map, we recommend using the following features: Infrastructure monitoring: Create filter sets to meaningfully categorize hosts. APM: Create tags to meaningfully categorize your applications. Alerts: Create alert policies that cover all your alerting scenarios. The health map is also especially useful if you're using containerized apps on hosts, with many instances of apps per host. Features one.newrelic.com > More > Health maps: The health map combines data from APM, infrastructure monitoring, and alerts to display your applications and hosts prioritized by health status. Health map features include: Entities prioritized by health The health map organizes the page by primary entity boxes. Primary entity boxes contain current (refreshes every two minutes), at-a-glance health and performance data, secondary entities related to it, and links to relevant APM or Infrastructure UI pages for detailed performance data. Example of a health map primary entity box with secondary entities. The health map prioritizes entities based on the health status of primary then secondary entities. The health status is determined using data from Alerts. The health map prioritizes the entities by first sorting the primary entities by health status, then sorting those by the health status of their secondary entities (related apps or hosts). The health map supports red, yellow, green, light green (not targeted by any conditions), and gray (application stopped reporting data) statuses for applications. The health map supports red, yellow, and green statuses for hosts. Tip If you have a host not targeted by any conditions, it appears green on the health map. If a host is not reporting data, it does not display on the health map unless you create a host-not-reporting condition. Entities are prioritized to the top based on this order: Entity sort order criteria Primary entities that have critical (red) health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Primary entities that have warning (yellow) health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Primary entities that have green health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Count of secondary entities Name of entity Views, filters, toggles Use the Views dropdown to see the health of your system organized by your applications or your hosts. You can then filter those views by tags (apps) or filter set (hosts) to only see data most relevant to you or your team. Use the Show metrics/hosts toggles to show more/less information in the entity boxes. View Description Applications and related hosts Organizes the map by application entities to display for each app: Health status color Condition violation information, if any Summary metrics Health of related hosts the application is running on as reported by New Relic Infrastructure Map includes an optional app tag filter. Hosts and related applications Organizes the map by host entities to display for each host: Health status color Condition violation information, if any Summary metrics Health of related applications running on the host reported by New Relic APM Map includes an optional host filter. Filter sets and related hosts Uses data reported by our infrastructure monitoring to display: Health of the hosts in each filter set in Infrastructure View and use health maps Tip To get the most out of your health map, see health maps best practices. The health map represents the current state of your system. The map refreshes every two minutes. To view the health map: From one.newrelic.com, select More, then select Health maps. Select a view from the View dropdown to organize the map by application, host, or infrastructure filter sets. If using the views Applications and related hosts or Hosts and related applications, use the Filter dropdown to only display entities most interesting to you or your team. Optional: Toggle Show metrics or Show hosts to display more or less entity data. Optional: Display the health map on a TV / wallboard in your operations center to see your system's current health at a glance. If entities start showing critical (red) or warning (yellow) health statuses, hover over the entity or the Related hosts/apps tiles for violation information to quickly ascertain the scope and scale of the problem. Click through to the relevant APM or Infrastructure UI pages to get detailed information to start troubleshooting. Use cases The health map is designed to help operations and DevOps professionals, who are responsible for the health of large, complex environments, understand: The system's current health at a glance You like to have a view up on the TV wallboard in your network operations center (NOC) that represents the health of all systems. You may be focused on a task and not notice when an alert comes in. With a wallboard you can feel assured that you can always glance up to see if anything is on fire. Conversely, even though something is alerting, you like to see the applications and hosts that are healthy to help keep things in perspective. Scope of the problem: What else is broken? You are responsible for many applications at your company. At any point in time, something is alerting and because there are many applications deployed across many hosts, itâs difficult for you to keep track of everything and know what is experiencing problems. The health map gives you a single place to see the health and relationship between all applications and hosts. You can easily correlate the alerting host with applications deployed to it and easily answer the question: What else is broken right now? Scale of the problem: Use context to find a noisy neighbor With container orchestration deploying containerized applications across many hosts, itâs difficult for you to understand the scale of the problem when you receive an alert for a host or groups of hosts. By using the application view of the health map, you can see the alerting host along with all the other hosts serving the application. If the issue is isolated to a single host, you can change to the host view of the health map to see what other applications are deployed on that host. In that view, you see that the host has four applications running and one of the applications is alerting on higher than normal throughput. Troubleshooting If health map host boxes do not display their installed apps, or if application boxes do not display the Infrastructure-monitored hosts where they are running, see APM data missing from infrastructure monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 225.6039,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Best</em> <em>practices</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": " to monitor applications and hosts in real-time, and quickly track down problems as they occur. <em>Best</em> <em>practices</em> The health map pulls data together from several <em>New</em> <em>Relic</em> <em>solutions</em>. To get the most out of the health map, we recommend using the following features: Infrastructure monitoring: Create"
      },
      "id": "6044155e28ccbc6f972ea01c"
    }
  ],
  "/docs/new-relic-solutions/best-practices-guides/full-stack-observability/mobile-monitoring-best-practices-guide": [
    {
      "sections": [
        "APM best practices guide",
        "Tip",
        "1. Standardize application names",
        "How to do it",
        "2. Add tags to your applications",
        "Caution",
        "3. Create and evaluate alert policies",
        "4. Identify and set up key transactions",
        "5. Track deployment history",
        "6. Review APM reports",
        "7. Review your environment with service maps",
        "8. Keep current",
        "9. Manage user access",
        "Important"
      ],
      "title": "APM best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "368a1a5688384d5bebf128604a9b8f190d335524",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide/",
      "published_at": "2021-05-22T14:44:24Z",
      "updated_at": "2021-03-30T13:08:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application Monitoring Tips You Need To Know It's one thing to know how to use APM, but it's another thing to know how to use New Relic's application performance monitoring software well. Here are some best practices designed to help you become an APM masterâand a key asset to your team! Tip To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. 1. Standardize application names Most New Relic agents provide a default application name, such as \"My Application\" or \"PHP Application,\" if you don't specify one in your New Relic configuration file. You don't want to end up with 20 identically named applications, be sure to select a descriptive identifier for your apps as soon you deploy them. To keep things consistent and easy to navigate, New Relic recommends standardizing your application naming (for example, all apps in Staging append [ Staging] or the like at the end of their names). Ideally, you want your new Java applications to be named automatically to reduce the chances of typographical errors and misnaming. How to do it For Java applications, automatic application naming can come from the following sources: Request attribute Servlet init parameter Filter init parameter Web app context parameter Web app context name (display name) Web app context path Choose the method that fits best your needs and follow these steps. For non-Java applications, there are no automatic naming methods, so refer to the documentation for your APM agent. 2. Add tags to your applications When several different applications use the same account, and each application spans multiple environments (for example, development, test, pre-production, production), it can be hard to find a specific application in your overview dashboard. That's why we recommend adding tags to your apps so that you can segment them into logical groups. The two most common tags that mature APM customers use are application name and environment. So, for example, if you wanted to view the billing application in Test, you could simply filter by \"billing app\" (name tag) and \"test\" (environment tag). Caution In the APM agent configuration settings files, use the labels field to add tags to your data. For example, see this description of the Python labels setting. APM is designed so that apps can roll up into an unlimited number of meaningful tag categories. How to do it Read the overview: Use tags to organize and group what you monitor. Follow these instructions for creating tags: NerdGraph tagging API tutorial. 3. Create and evaluate alert policies When key performance indicators spike or drop, individuals and teams in your organization need to be notified. Alerting in New Relic provides a set of tools including dynamic baselines that allow you to detect problems before they impact your end users. Alert policies can be set up in two primary ways: Static threshold alerts are great when you already know the nature of an application and its normal behaviors aren't likely to change anytime soon. Apdex score, response time, error rate, throughput are some of the static thresholds you can create alert policies on. Dynamic baseline alerts make it easy to determine and set dynamic alert thresholds for applications with varying seasonal patterns and growth trends (which make it difficult to set thresholds that define normal behavior). These alerts use baselines modeled from your applicationâs historical metric data. Each alert policy can contain as many conditions as you need, and each alert condition includes three components: Type of condition (metric, external service, and so on) Entities that the policy targets (for example, apps monitored by New Relic APM or New Relic Browser, hosts monitored by New Relic Infrastructure, and so on) Thresholds that escalate into alerting situations with increasing severity Once you have your alerting set up, you then want to make sure you're taking advantage of all viable notification channels. After all, what good are alerts if no one knows about them? You can manage alerts by creating specific user groups and by leveraging New Relic's integrated alert channels, including Slack, PagerDuty, webhooks, and email. Be sure to evaluate alert policies on a regular basis to ensure that they are always valid. How to do it See the detailed documentation: To set up dynamic baseline alerts and choose an application, follow standard procedures. You will see a preview of the metric with the predicted baseline You can select a metric for that application and see the corresponding baseline. Then, using the threshold sliders, you can set how closely you want your threshold to follow the baseline prediction. To set up static threshold alerts for your Apdex settings, follow standard procedures. To set up your alert notification channels, follow standard procedures. 4. Identify and set up key transactions Depending on the nature of your application, some transactions may be more important to you than others. New Relic's key transactions feature is designed to help you closely monitor what you consider to be your app's most business-critical transactions, whether that's end-user or app response time, call counts, error rates, or something else. You can also set alert threshold levels for notifications when your key transactions are performing poorly. How to do it In the menu bar, select More > Key transactions, and then select Add more. Then select the app and web transaction or, from the selected transaction, select Track as key transaction. Type a name for the key transaction, and select Track key transaction. Optional: If the agent for the selected app supports custom alerting, use the default values that New Relic automatically fills, or select Edit key alert transaction policy to set the Apdex and alert threshold values. To view the key transactions dashboard details, select View new key transaction. 5. Track deployment history When development teams are pushing new code out as frequently as possible, it can be hard to measure the impact that each deployment is having on performance. One way to stay in tune with how these changes are affecting your application is with deployment reports. These reports list recent deployments and their impact on end-users and app servers' Apdex scores, along with response times, throughput, and errors. You can also view and drill down into the details to catch errors related to recent deployments, or file a ticket and share details with your team. How to do it From the New Relic menu bar, select APM > (selected app) > Events > Deployments. To view performance after a deployment, go to the selected app's Overview dashboard in the Recent events section. A blue vertical bar on a chart indicates a deployment. To view summary information about the deployment, point to the blue bar. 6. Review APM reports From SLA, deployment, and capacity to scalability, host usage reports, and more, New Relic APM offers a variety of downloadable reporting tools surfacing historical trendsâall great ways to report to senior executive teams or customers. Take a look at the full list of reports and use them to your advantage. How to do it From the New Relic APM menu bar, select Applications > (selected app) > Reports. Select the report you'd like to see. If you want to save or export a report to share, select Download this report as .csv, which will create a report with comma-separated values. 7. Review your environment with service maps Use New Relic service maps, a feature included in APM, to understand how apps and services in your architecture connect and talk to each other. Service maps are visual, customizable representations of your application architecture. Maps automatically show you your app's connections and dependencies, including databases and external services. Health indicators and performance metrics show you the current operational status for every part of your architecture. How to do it Go to one.newrelic.com > More > service maps. To get started, read the instructions in Introduction to service maps. 8. Keep current With New Relicâs SaaS platform, getting new features is as easy as updating your agent. Most likely your organization already has a set of scripts for deploying application upgrades into your environment. In a similar fashion, you can also automate your New Relic agent deployment to ensure that your systems are up to date. Both Puppet and Chef scripts are great examples of deployment frameworks that make life easier by allowing you to automate your entire deployment and management process. How to do it Regularly review which version of the agent you're using so that you know when an update is needed. If the latest agent release contains a needed fix or added functionality, download it. To deploy the agent automatically (preferred as a method to avoid errors): Use existing deployment scripts, provided they can be adapted to handle the deployment. OR Create and maintain a script that specifically deploys and configures the New Relic agent. Ideally, the script would pull the agent files from a repository where the files are versioned (for rollback purposes). Once the script has been created, shut down the application (unless script handles this). Run the deployment script. Start the application (unless script handles this). If problems arise, run the script to roll back to the previous version. To deploy the agent manually: Back up the current agent directory. Deploy the updated agent into the existing agent directory. Modify configuration files by comparing new files with existing files. In particular, make sure things like license key and custom extensions are copied over to the new configuration. Restart the application. If problems arise, restore the old agent using the backup and restart. 9. Manage user access Important This is available only for accounts on our original product-based pricing plan. Enable role-based access control (RBAC) and single sign-on (SSO) New Relic allows authorized individuals to access the broadest possible amount of data, regardless of their assigned role. As an Owner or Administrator of your New Relic account, you can control the permissions of individual users or entire roles with RBAC. To find out what is possible and how to make changes, see Users and roles. Security is no doubt of utmost concern to your organization. To simplify password management for your employees and strengthen security, you may already be using SSO with your other systems. You should do the same with New Relic. Using New Relic's SSO integration feature, account administrators will be able to enforce strong passwords and restrict login via a corporate authentication mechanism. This way, New Relic users who have already authenticated using a corporate SSO system will be able to bypass the New Relic login prompt. How to do it Log in to New Relic as an admin and go to the SSO configuration page. From the New Relic title bar, select (your account name) > Account Settings > Integrations > Single Sign On. From the SAML Single Sign On page, review your New Relic SAML Service Provider details. To upload your SAML Identity Provider certificate, select Choose File, and then follow standard procedures to select and save the file. Copy and paste in (or type) the Remove login URL that your users will use for Single Sign-On. If your organizationâs SAML integration provides a redirect URL for logout, copy and paste in (or type) the Logout landing URL; otherwise leave blank. Save, test, and enable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.28433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Application Monitoring Tips You Need To Know It&#x27;s one thing to know how to use APM, but it&#x27;s another thing to know how to use <em>New</em> <em>Relic</em>&#x27;s application performance monitoring software well. Here are some <em>best</em> <em>practices</em> designed to help you become an APM masterâand a key asset to your team! Tip To get"
      },
      "id": "6044186564441f1f94378ecc"
    },
    {
      "sections": [
        "Synthetic monitoring best practices guide",
        "Tip",
        "1. Match your monitor type to monitoring need",
        "How to do it",
        "2. View all monitors with the Monitors index page",
        "How to view your monitors in the New Relic One:",
        "New Relic Explorer",
        "Monitors index page",
        "3. View individual monitor results",
        "How to do it:",
        "4. Understand the load-time impact of each resource",
        "5. Configure and develop a scripted browser test"
      ],
      "title": "Synthetic monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e76eb0669a1433bb9d0de70d90413e19749adf61",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/synthetic-monitoring-best-practices-guide/",
      "published_at": "2021-05-22T07:37:12Z",
      "updated_at": "2021-03-29T20:29:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's synthetic monitoringâpowered by a Selenium-driven Chrome browserâallows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its full power. Tip To use synthetic monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. 1. Match your monitor type to monitoring need Synthetic monitors are virtual browsers that measure the performance of your website, recording each check in detail. They also capture aggregate numbers for load time, uptime, and average download size, as well as an overview, detailed statistics for each page resource, and downtime incidents. There are four types of synthetic monitors; the ones you deploy will depend on the things you want to monitor: Ping monitorsâto ensure that your site is accessible. Simple browser monitorsâto ensure end-user performance. Scripted browsersâto ensure that particular resources are present. API monitorsâto ensure that your app server works as well as your website. How to do it To add a monitor, go to one.newrelic.com > Synthetics (or one.eu.newrelic.com if you have an EU-based account) and click Create monitor. Specify monitor type, name, and URL. Optional: Add a validation string (available for ping and simple browser) or advanced options, which enable substring monitoring for the following types of response validation: Verify SSL (for Ping and Simple Browser). This option verifies the validity of the SSL certificate chain. It can be duplicated by running the following syntax: openssl s_client -servername {YOUR_HOSTNAME} -connect {YOUR_HOSTNAME}:443 -CApath /etc/ssl/certs > /dev/null Copy Bypass HEAD request (for Ping). This option skips the default HEAD request and instead uses the GET verb with a ping check. Redirect is Failure (for Ping). If a redirect result occurs when Redirect is Failure is enabled, Synthetics categorizes it as a failure (rather than following the redirect and checking the resulting URL). Select the locations where you want your monitor to run. Choose a frequency to determine how often each location will run your monitor. Optional: Set up alert notifications. Select Create my monitor to confirm. Wait a few minutes; then from the Monitors index check your monitor. 2. View all monitors with the Monitors index page Continuous application performance monitoring is essential to ensure that web services are in place, working correctly, and error-free. Synthetic monitoring provides this type of assurance by performing automated tests on your web application for each selected locationânoting downtime instances (âviolationsâ) and collecting aggregate numbers, results, and detailed statistics for each page resource. Use the Monitors index page to get a high level view of this information, or select an individual monitor to view the Summary, for ping monitors, or Overview, for simple and scripted monitors, page and get a deeper insight into its performance over time. How to view your monitors in the New Relic One: New Relic Explorer To view a list of monitors using the New Relic One Monitors index page: Go to one.newrelic.com > Explorer > Synthetic monitors. For more information, see the documentation about navigating core UI components in New Relic One. Monitors index page To view a list of monitors using the Monitors index page: Go to one.newrelic.com > Synthetics. 3. View individual monitor results Itâs not enough to understand how your web apps are performing for your West Coast customers; you need to be able to view how theyâre performing across the country and around the globe. By taking advantage of synthetic monitors and visiting your Results page, you can see how everything from development to production affects user experience. You can locate interesting results by sorting the list to identify slow, fast, or other unusual results. Or filter by location to understand how monitor performance varies with geography. (The âNetwork timingsâ graph below provides a snapshot of webpage performance over a given period.) How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors tab, select your monitor. Select Monitor > Results. Gain an up-to-the-minute view of the slowest page loads for every monitored location. 4. Understand the load-time impact of each resource Visit the synthetics Resources page to see how each resource on your websiteâincluding CSS, JavaScript, images, HTML and moreâis affecting your overall load. You can drill into detailed metrics collected at run time, locate performance information for time spent by third-party resources, and identify HTTP response codes for each resource. How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors drop-down menu, select your monitor. Select Monitor > Resources. 5. Configure and develop a scripted browser test Using scripted browsers, you can build complex monitoring workflows using the Selenium JavaScript Webdriver bindings. For instance, you can log in to the application, navigate to a particular link, and wait for a page element to load and add an assertion. How to do it: Go to one.newrelic.com > Synthetics. Choose your monitor type (for example, Scripted Browser). Enter the name and details of your monitor (for example, Sitename.com Scripted Browser) Select the locations from which you want your monitor to run (for example, Mumbai, Seoul, Columbus, and Montreal). Choose a frequency to determine how often each location will run your monitor (for example, five minutes). Set a notification method to alert your team when performance violations occur. You are now ready to write your script. (Below is an example of a script used to test the performance of a main navigation page.) var assert = require('chai').assert; // script-wide timeout for all wait and waitandfind functions (in ms) var default_element_timeout = 190000; //3 mins var default_pageload_timeout = 240000; //4 mins var navlinks = [\"css-locator-1\",\"css-locator-2\"]; //sets element load timeout to 3 mins $browser.manage().timeouts().implicitlyWait(default_element_timeout); //sets page load timoeout to 4 mins $browser.manage().timeouts().pageloadTimeout(default_pageload_timeout); //test all the main nav page performances $browser.get(\"http://www.sitename.com\").then(function(){ return $browser.findelement($driver.by.classname(\"site-theme-example\")); }).then(function(){ //verifies the nav list has loaded return $browser.findelement($driver.by.classname(\"site-nav-list-example\")); }).then(function(){ //loops through the navlinks array navlinks.foreach(function(val, i, arr){ //finds and navigates to each navlink page return $browser.findelement($driver.by.classname(navlinks[i])).click().then(function(){ //verifies that the nav list loaded before moving on return $browser.findelement($driver.by.classname(\"site-nav-list-example\")).then(function(){ //verifies that the page logo footer at bottom of page has loaded return $browser.findelement($driver.by.classname(\"site-footer-logo\")); }) }) }) }); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.8931,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s synthetic monitoringâpowered by a Selenium-driven Chrome browserâallows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its <em>full</em> power. Tip To use synthetic monitoring and the rest of our"
      },
      "id": "603e84bb28ccbce555eba771"
    },
    {
      "sections": [
        "Infrastructure monitoring best practices guide",
        "1. Install the infrastructure agent across your entire environment",
        "How to do it",
        "Tip",
        "2. Configure the native EC2 integration",
        "3. Activate the integrations",
        "4. Create filter sets",
        "5. Create alert conditions",
        "6. View infrastructure data alongside APM data",
        "7. Access Infrastructure data using the Data explorer",
        "8. Update your agents regularly",
        "Want more user tips?"
      ],
      "title": "Infrastructure monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "931ea7767d73381ca0cb3502ec14f88d66ce5eaf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/infrastructure-monitoring-best-practices-guide/",
      "published_at": "2021-05-22T07:34:10Z",
      "updated_at": "2021-03-13T07:39:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Want even longer periods of uninterrupted sleep? Here are eight best practices to make dynamic infrastructure and server monitoring even easier with New Relic's infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution was designed to help enterprise customers monitor their large and dynamically changing environments at scale. In order to facilitate this, the UI is completely driven by tags that let you visualize aggregated metrics, events, and inventory for a large number of servers. To really get the most out of infrastructure monitoring, we recommend installing it across your entire environment, preferably even across multiple regions and clusters. This will provide a more accurate picture of the health of your host ecosystem and the impact your infrastructure has on your applications. Want to achieve faster Mean Time To Resolution (MTTR)? Install the infrastructure agent on database servers, web servers, and any other host that supports your applications. When deploying the agent, leverage custom attributes to tag your hosts so that you can use those for filtering the data presented in the UI and for setting alerts. This is in addition to any Amazon EC2 tags you may be using which will auto-import when you enable the EC2 integration. You may also prefer to keep the agent logs separate from the system logs, which you can do through the configuration. How to do it Leverage our install modules for config management tools such as Chef, Puppet and Ansible to easily deploy your agent across all your infrastructure. Read the instructions in the github repo for your config management tool referenced in the link above and define the custom_attributes you want to use to tag your hosts. Set the log_file attribute to your preferred location for the infrastructure agent logs. Tip If you are installing the agent on a single host, the process should only take a few minutes and you can find detailed instructions in our documentation. 2. Configure the native EC2 integration If you have an AWS environment, in addition to installing the infrastructure agent on your EC2 instances to monitor them, we also recommend configuring the EC2 integration so that New Relic can automatically import all the tags and metadata associated with your AWS instances. This allows you to filter down to a part of your infrastructure using the same AWS tags (example, ECTag_Role='Kafka'), and slice-and-dice your data in multiple ways. Additionally, our âAlertsâ and âSaved Filter Setsâ are completely tag-driven and dynamic, so they automatically add/remove instances matching these tags to give our users the most real-time views that scale with your cloud infrastructure. 3. Activate the integrations Monitoring your infrastructure extends beyond just CPU, memory, and storage utilization. Thatâs why New Relic has out-of-the-box integrations that allow you to monitor all the services that support your hosts as well. Activate any of our integrations, including AWS Billing, AWS ELB, Amazon S3, MySQL, NGINX, and more, to extend monitoring to your AWS or on-host applications, and access the pre-configured dashboards that appear for each of them. 4. Create filter sets With New Relic, users can create filter sets to organize hosts, cluster roles, and other resources based on criteria that matter the most to users. This allows you to optimize your resources by using a focused view to monitor, detect, and resolve any problems proactively. The attributes for filtering are populated from the auto-imported EC2 tags or custom tags that may be applied to hosts. You can combine as many filters as you want in a filter set, and save them to share with other people in your account. Youâll also be able to see the color-coded health status of each host inside the filter set, so you can quickly identify problematic areas of your infrastructure. Additionally, filter sets can be used in the health map to get an overview of your infrastructure performance at a glance based on the filters that matter to your teams. 5. Create alert conditions With New Relic, you can create alert conditions directly within the context of what you are currently monitoring with New Relic. For example, if you are viewing a filter set comprised of a large number of hosts and notice a problem, you donât need to create an individual alert condition for every host within. Instead, we recommend initiating the alert condition directly from the chart of the metric you are viewing and creating it based on the filter tags. This will create an alert condition for any hosts that match those tags, allowing our infrastructure monitoring to automatically remove hosts that go offline and add new hosts to the alert condition if they match those tags. Alerts configured once for the appropriate tags will scale correctly across all future hosts. And know that you can also leverage existing alert policies for infrastructure alert conditions. 6. View infrastructure data alongside APM data The integration between New Relic APM and infrastructure monitoring lets you see your APM data and infrastructure data side by side, so you can find the root cause of problems more quickly, no matter where they originate. This allows users to view the performance relationship of your hosts and the applications running on them, allowing for quicker diagnosis of the issue and impact on the businessâ health. Use health maps to quickly spot any issues or alerts related to the health of your applications and how that connects to the supporting infrastructure. The first boxes starting from the top left are those that require your attention. 7. Access Infrastructure data using the Data explorer Teams that use multiple New Relic capabilities find it useful to create a single dashboard to visually correlate the infrastructureâs health with application, browser and synthetics metrics. Thatâs where New Relic data exploration features comes in. All the granular metrics and events collected by infrastructure monitoring are stored in New Relic and are accessible to you immediately. Having access to the raw metrics means you can run more custom queries using NRQL, and also create dashboards to share infrastructure metrics with your team. 8. Update your agents regularly New Relicâs software engineering team is constantly pushing out improvements and new features to improve our customersâ overall monitoring experience. In order to take advantage of all the awesomeness theyâre delivering, we recommend regularly updating to the latest version of the infrastructure agent. Want more user tips? View training videos at New Relic University. Read the documentation. Check out our Tutorials. Ask a question in the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 225.60431,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Want even longer periods of uninterrupted sleep? Here are eight <em>best</em> <em>practices</em> to make dynamic infrastructure and server monitoring even easier with <em>New</em> <em>Relic</em>&#x27;s infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution"
      },
      "id": "6044151c28ccbc4b4f2c60af"
    }
  ],
  "/docs/new-relic-solutions/best-practices-guides/full-stack-observability/monitor-apps-hosts-health-maps": [
    {
      "sections": [
        "APM best practices guide",
        "Tip",
        "1. Standardize application names",
        "How to do it",
        "2. Add tags to your applications",
        "Caution",
        "3. Create and evaluate alert policies",
        "4. Identify and set up key transactions",
        "5. Track deployment history",
        "6. Review APM reports",
        "7. Review your environment with service maps",
        "8. Keep current",
        "9. Manage user access",
        "Important"
      ],
      "title": "APM best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "368a1a5688384d5bebf128604a9b8f190d335524",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide/",
      "published_at": "2021-05-22T14:44:24Z",
      "updated_at": "2021-03-30T13:08:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application Monitoring Tips You Need To Know It's one thing to know how to use APM, but it's another thing to know how to use New Relic's application performance monitoring software well. Here are some best practices designed to help you become an APM masterâand a key asset to your team! Tip To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. 1. Standardize application names Most New Relic agents provide a default application name, such as \"My Application\" or \"PHP Application,\" if you don't specify one in your New Relic configuration file. You don't want to end up with 20 identically named applications, be sure to select a descriptive identifier for your apps as soon you deploy them. To keep things consistent and easy to navigate, New Relic recommends standardizing your application naming (for example, all apps in Staging append [ Staging] or the like at the end of their names). Ideally, you want your new Java applications to be named automatically to reduce the chances of typographical errors and misnaming. How to do it For Java applications, automatic application naming can come from the following sources: Request attribute Servlet init parameter Filter init parameter Web app context parameter Web app context name (display name) Web app context path Choose the method that fits best your needs and follow these steps. For non-Java applications, there are no automatic naming methods, so refer to the documentation for your APM agent. 2. Add tags to your applications When several different applications use the same account, and each application spans multiple environments (for example, development, test, pre-production, production), it can be hard to find a specific application in your overview dashboard. That's why we recommend adding tags to your apps so that you can segment them into logical groups. The two most common tags that mature APM customers use are application name and environment. So, for example, if you wanted to view the billing application in Test, you could simply filter by \"billing app\" (name tag) and \"test\" (environment tag). Caution In the APM agent configuration settings files, use the labels field to add tags to your data. For example, see this description of the Python labels setting. APM is designed so that apps can roll up into an unlimited number of meaningful tag categories. How to do it Read the overview: Use tags to organize and group what you monitor. Follow these instructions for creating tags: NerdGraph tagging API tutorial. 3. Create and evaluate alert policies When key performance indicators spike or drop, individuals and teams in your organization need to be notified. Alerting in New Relic provides a set of tools including dynamic baselines that allow you to detect problems before they impact your end users. Alert policies can be set up in two primary ways: Static threshold alerts are great when you already know the nature of an application and its normal behaviors aren't likely to change anytime soon. Apdex score, response time, error rate, throughput are some of the static thresholds you can create alert policies on. Dynamic baseline alerts make it easy to determine and set dynamic alert thresholds for applications with varying seasonal patterns and growth trends (which make it difficult to set thresholds that define normal behavior). These alerts use baselines modeled from your applicationâs historical metric data. Each alert policy can contain as many conditions as you need, and each alert condition includes three components: Type of condition (metric, external service, and so on) Entities that the policy targets (for example, apps monitored by New Relic APM or New Relic Browser, hosts monitored by New Relic Infrastructure, and so on) Thresholds that escalate into alerting situations with increasing severity Once you have your alerting set up, you then want to make sure you're taking advantage of all viable notification channels. After all, what good are alerts if no one knows about them? You can manage alerts by creating specific user groups and by leveraging New Relic's integrated alert channels, including Slack, PagerDuty, webhooks, and email. Be sure to evaluate alert policies on a regular basis to ensure that they are always valid. How to do it See the detailed documentation: To set up dynamic baseline alerts and choose an application, follow standard procedures. You will see a preview of the metric with the predicted baseline You can select a metric for that application and see the corresponding baseline. Then, using the threshold sliders, you can set how closely you want your threshold to follow the baseline prediction. To set up static threshold alerts for your Apdex settings, follow standard procedures. To set up your alert notification channels, follow standard procedures. 4. Identify and set up key transactions Depending on the nature of your application, some transactions may be more important to you than others. New Relic's key transactions feature is designed to help you closely monitor what you consider to be your app's most business-critical transactions, whether that's end-user or app response time, call counts, error rates, or something else. You can also set alert threshold levels for notifications when your key transactions are performing poorly. How to do it In the menu bar, select More > Key transactions, and then select Add more. Then select the app and web transaction or, from the selected transaction, select Track as key transaction. Type a name for the key transaction, and select Track key transaction. Optional: If the agent for the selected app supports custom alerting, use the default values that New Relic automatically fills, or select Edit key alert transaction policy to set the Apdex and alert threshold values. To view the key transactions dashboard details, select View new key transaction. 5. Track deployment history When development teams are pushing new code out as frequently as possible, it can be hard to measure the impact that each deployment is having on performance. One way to stay in tune with how these changes are affecting your application is with deployment reports. These reports list recent deployments and their impact on end-users and app servers' Apdex scores, along with response times, throughput, and errors. You can also view and drill down into the details to catch errors related to recent deployments, or file a ticket and share details with your team. How to do it From the New Relic menu bar, select APM > (selected app) > Events > Deployments. To view performance after a deployment, go to the selected app's Overview dashboard in the Recent events section. A blue vertical bar on a chart indicates a deployment. To view summary information about the deployment, point to the blue bar. 6. Review APM reports From SLA, deployment, and capacity to scalability, host usage reports, and more, New Relic APM offers a variety of downloadable reporting tools surfacing historical trendsâall great ways to report to senior executive teams or customers. Take a look at the full list of reports and use them to your advantage. How to do it From the New Relic APM menu bar, select Applications > (selected app) > Reports. Select the report you'd like to see. If you want to save or export a report to share, select Download this report as .csv, which will create a report with comma-separated values. 7. Review your environment with service maps Use New Relic service maps, a feature included in APM, to understand how apps and services in your architecture connect and talk to each other. Service maps are visual, customizable representations of your application architecture. Maps automatically show you your app's connections and dependencies, including databases and external services. Health indicators and performance metrics show you the current operational status for every part of your architecture. How to do it Go to one.newrelic.com > More > service maps. To get started, read the instructions in Introduction to service maps. 8. Keep current With New Relicâs SaaS platform, getting new features is as easy as updating your agent. Most likely your organization already has a set of scripts for deploying application upgrades into your environment. In a similar fashion, you can also automate your New Relic agent deployment to ensure that your systems are up to date. Both Puppet and Chef scripts are great examples of deployment frameworks that make life easier by allowing you to automate your entire deployment and management process. How to do it Regularly review which version of the agent you're using so that you know when an update is needed. If the latest agent release contains a needed fix or added functionality, download it. To deploy the agent automatically (preferred as a method to avoid errors): Use existing deployment scripts, provided they can be adapted to handle the deployment. OR Create and maintain a script that specifically deploys and configures the New Relic agent. Ideally, the script would pull the agent files from a repository where the files are versioned (for rollback purposes). Once the script has been created, shut down the application (unless script handles this). Run the deployment script. Start the application (unless script handles this). If problems arise, run the script to roll back to the previous version. To deploy the agent manually: Back up the current agent directory. Deploy the updated agent into the existing agent directory. Modify configuration files by comparing new files with existing files. In particular, make sure things like license key and custom extensions are copied over to the new configuration. Restart the application. If problems arise, restore the old agent using the backup and restart. 9. Manage user access Important This is available only for accounts on our original product-based pricing plan. Enable role-based access control (RBAC) and single sign-on (SSO) New Relic allows authorized individuals to access the broadest possible amount of data, regardless of their assigned role. As an Owner or Administrator of your New Relic account, you can control the permissions of individual users or entire roles with RBAC. To find out what is possible and how to make changes, see Users and roles. Security is no doubt of utmost concern to your organization. To simplify password management for your employees and strengthen security, you may already be using SSO with your other systems. You should do the same with New Relic. Using New Relic's SSO integration feature, account administrators will be able to enforce strong passwords and restrict login via a corporate authentication mechanism. This way, New Relic users who have already authenticated using a corporate SSO system will be able to bypass the New Relic login prompt. How to do it Log in to New Relic as an admin and go to the SSO configuration page. From the New Relic title bar, select (your account name) > Account Settings > Integrations > Single Sign On. From the SAML Single Sign On page, review your New Relic SAML Service Provider details. To upload your SAML Identity Provider certificate, select Choose File, and then follow standard procedures to select and save the file. Copy and paste in (or type) the Remove login URL that your users will use for Single Sign-On. If your organizationâs SAML integration provides a redirect URL for logout, copy and paste in (or type) the Logout landing URL; otherwise leave blank. Save, test, and enable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.28433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Application Monitoring Tips You Need To Know It&#x27;s one thing to know how to use APM, but it&#x27;s another thing to know how to use <em>New</em> <em>Relic</em>&#x27;s application performance monitoring software well. Here are some <em>best</em> <em>practices</em> designed to help you become an APM masterâand a key asset to your team! Tip To get"
      },
      "id": "6044186564441f1f94378ecc"
    },
    {
      "sections": [
        "Synthetic monitoring best practices guide",
        "Tip",
        "1. Match your monitor type to monitoring need",
        "How to do it",
        "2. View all monitors with the Monitors index page",
        "How to view your monitors in the New Relic One:",
        "New Relic Explorer",
        "Monitors index page",
        "3. View individual monitor results",
        "How to do it:",
        "4. Understand the load-time impact of each resource",
        "5. Configure and develop a scripted browser test"
      ],
      "title": "Synthetic monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e76eb0669a1433bb9d0de70d90413e19749adf61",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/synthetic-monitoring-best-practices-guide/",
      "published_at": "2021-05-22T07:37:12Z",
      "updated_at": "2021-03-29T20:29:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's synthetic monitoringâpowered by a Selenium-driven Chrome browserâallows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its full power. Tip To use synthetic monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. 1. Match your monitor type to monitoring need Synthetic monitors are virtual browsers that measure the performance of your website, recording each check in detail. They also capture aggregate numbers for load time, uptime, and average download size, as well as an overview, detailed statistics for each page resource, and downtime incidents. There are four types of synthetic monitors; the ones you deploy will depend on the things you want to monitor: Ping monitorsâto ensure that your site is accessible. Simple browser monitorsâto ensure end-user performance. Scripted browsersâto ensure that particular resources are present. API monitorsâto ensure that your app server works as well as your website. How to do it To add a monitor, go to one.newrelic.com > Synthetics (or one.eu.newrelic.com if you have an EU-based account) and click Create monitor. Specify monitor type, name, and URL. Optional: Add a validation string (available for ping and simple browser) or advanced options, which enable substring monitoring for the following types of response validation: Verify SSL (for Ping and Simple Browser). This option verifies the validity of the SSL certificate chain. It can be duplicated by running the following syntax: openssl s_client -servername {YOUR_HOSTNAME} -connect {YOUR_HOSTNAME}:443 -CApath /etc/ssl/certs > /dev/null Copy Bypass HEAD request (for Ping). This option skips the default HEAD request and instead uses the GET verb with a ping check. Redirect is Failure (for Ping). If a redirect result occurs when Redirect is Failure is enabled, Synthetics categorizes it as a failure (rather than following the redirect and checking the resulting URL). Select the locations where you want your monitor to run. Choose a frequency to determine how often each location will run your monitor. Optional: Set up alert notifications. Select Create my monitor to confirm. Wait a few minutes; then from the Monitors index check your monitor. 2. View all monitors with the Monitors index page Continuous application performance monitoring is essential to ensure that web services are in place, working correctly, and error-free. Synthetic monitoring provides this type of assurance by performing automated tests on your web application for each selected locationânoting downtime instances (âviolationsâ) and collecting aggregate numbers, results, and detailed statistics for each page resource. Use the Monitors index page to get a high level view of this information, or select an individual monitor to view the Summary, for ping monitors, or Overview, for simple and scripted monitors, page and get a deeper insight into its performance over time. How to view your monitors in the New Relic One: New Relic Explorer To view a list of monitors using the New Relic One Monitors index page: Go to one.newrelic.com > Explorer > Synthetic monitors. For more information, see the documentation about navigating core UI components in New Relic One. Monitors index page To view a list of monitors using the Monitors index page: Go to one.newrelic.com > Synthetics. 3. View individual monitor results Itâs not enough to understand how your web apps are performing for your West Coast customers; you need to be able to view how theyâre performing across the country and around the globe. By taking advantage of synthetic monitors and visiting your Results page, you can see how everything from development to production affects user experience. You can locate interesting results by sorting the list to identify slow, fast, or other unusual results. Or filter by location to understand how monitor performance varies with geography. (The âNetwork timingsâ graph below provides a snapshot of webpage performance over a given period.) How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors tab, select your monitor. Select Monitor > Results. Gain an up-to-the-minute view of the slowest page loads for every monitored location. 4. Understand the load-time impact of each resource Visit the synthetics Resources page to see how each resource on your websiteâincluding CSS, JavaScript, images, HTML and moreâis affecting your overall load. You can drill into detailed metrics collected at run time, locate performance information for time spent by third-party resources, and identify HTTP response codes for each resource. How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors drop-down menu, select your monitor. Select Monitor > Resources. 5. Configure and develop a scripted browser test Using scripted browsers, you can build complex monitoring workflows using the Selenium JavaScript Webdriver bindings. For instance, you can log in to the application, navigate to a particular link, and wait for a page element to load and add an assertion. How to do it: Go to one.newrelic.com > Synthetics. Choose your monitor type (for example, Scripted Browser). Enter the name and details of your monitor (for example, Sitename.com Scripted Browser) Select the locations from which you want your monitor to run (for example, Mumbai, Seoul, Columbus, and Montreal). Choose a frequency to determine how often each location will run your monitor (for example, five minutes). Set a notification method to alert your team when performance violations occur. You are now ready to write your script. (Below is an example of a script used to test the performance of a main navigation page.) var assert = require('chai').assert; // script-wide timeout for all wait and waitandfind functions (in ms) var default_element_timeout = 190000; //3 mins var default_pageload_timeout = 240000; //4 mins var navlinks = [\"css-locator-1\",\"css-locator-2\"]; //sets element load timeout to 3 mins $browser.manage().timeouts().implicitlyWait(default_element_timeout); //sets page load timoeout to 4 mins $browser.manage().timeouts().pageloadTimeout(default_pageload_timeout); //test all the main nav page performances $browser.get(\"http://www.sitename.com\").then(function(){ return $browser.findelement($driver.by.classname(\"site-theme-example\")); }).then(function(){ //verifies the nav list has loaded return $browser.findelement($driver.by.classname(\"site-nav-list-example\")); }).then(function(){ //loops through the navlinks array navlinks.foreach(function(val, i, arr){ //finds and navigates to each navlink page return $browser.findelement($driver.by.classname(navlinks[i])).click().then(function(){ //verifies that the nav list loaded before moving on return $browser.findelement($driver.by.classname(\"site-nav-list-example\")).then(function(){ //verifies that the page logo footer at bottom of page has loaded return $browser.findelement($driver.by.classname(\"site-footer-logo\")); }) }) }) }); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.8931,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s synthetic monitoringâpowered by a Selenium-driven Chrome browserâallows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its <em>full</em> power. Tip To use synthetic monitoring and the rest of our"
      },
      "id": "603e84bb28ccbce555eba771"
    },
    {
      "sections": [
        "Infrastructure monitoring best practices guide",
        "1. Install the infrastructure agent across your entire environment",
        "How to do it",
        "Tip",
        "2. Configure the native EC2 integration",
        "3. Activate the integrations",
        "4. Create filter sets",
        "5. Create alert conditions",
        "6. View infrastructure data alongside APM data",
        "7. Access Infrastructure data using the Data explorer",
        "8. Update your agents regularly",
        "Want more user tips?"
      ],
      "title": "Infrastructure monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "931ea7767d73381ca0cb3502ec14f88d66ce5eaf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/infrastructure-monitoring-best-practices-guide/",
      "published_at": "2021-05-22T07:34:10Z",
      "updated_at": "2021-03-13T07:39:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Want even longer periods of uninterrupted sleep? Here are eight best practices to make dynamic infrastructure and server monitoring even easier with New Relic's infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution was designed to help enterprise customers monitor their large and dynamically changing environments at scale. In order to facilitate this, the UI is completely driven by tags that let you visualize aggregated metrics, events, and inventory for a large number of servers. To really get the most out of infrastructure monitoring, we recommend installing it across your entire environment, preferably even across multiple regions and clusters. This will provide a more accurate picture of the health of your host ecosystem and the impact your infrastructure has on your applications. Want to achieve faster Mean Time To Resolution (MTTR)? Install the infrastructure agent on database servers, web servers, and any other host that supports your applications. When deploying the agent, leverage custom attributes to tag your hosts so that you can use those for filtering the data presented in the UI and for setting alerts. This is in addition to any Amazon EC2 tags you may be using which will auto-import when you enable the EC2 integration. You may also prefer to keep the agent logs separate from the system logs, which you can do through the configuration. How to do it Leverage our install modules for config management tools such as Chef, Puppet and Ansible to easily deploy your agent across all your infrastructure. Read the instructions in the github repo for your config management tool referenced in the link above and define the custom_attributes you want to use to tag your hosts. Set the log_file attribute to your preferred location for the infrastructure agent logs. Tip If you are installing the agent on a single host, the process should only take a few minutes and you can find detailed instructions in our documentation. 2. Configure the native EC2 integration If you have an AWS environment, in addition to installing the infrastructure agent on your EC2 instances to monitor them, we also recommend configuring the EC2 integration so that New Relic can automatically import all the tags and metadata associated with your AWS instances. This allows you to filter down to a part of your infrastructure using the same AWS tags (example, ECTag_Role='Kafka'), and slice-and-dice your data in multiple ways. Additionally, our âAlertsâ and âSaved Filter Setsâ are completely tag-driven and dynamic, so they automatically add/remove instances matching these tags to give our users the most real-time views that scale with your cloud infrastructure. 3. Activate the integrations Monitoring your infrastructure extends beyond just CPU, memory, and storage utilization. Thatâs why New Relic has out-of-the-box integrations that allow you to monitor all the services that support your hosts as well. Activate any of our integrations, including AWS Billing, AWS ELB, Amazon S3, MySQL, NGINX, and more, to extend monitoring to your AWS or on-host applications, and access the pre-configured dashboards that appear for each of them. 4. Create filter sets With New Relic, users can create filter sets to organize hosts, cluster roles, and other resources based on criteria that matter the most to users. This allows you to optimize your resources by using a focused view to monitor, detect, and resolve any problems proactively. The attributes for filtering are populated from the auto-imported EC2 tags or custom tags that may be applied to hosts. You can combine as many filters as you want in a filter set, and save them to share with other people in your account. Youâll also be able to see the color-coded health status of each host inside the filter set, so you can quickly identify problematic areas of your infrastructure. Additionally, filter sets can be used in the health map to get an overview of your infrastructure performance at a glance based on the filters that matter to your teams. 5. Create alert conditions With New Relic, you can create alert conditions directly within the context of what you are currently monitoring with New Relic. For example, if you are viewing a filter set comprised of a large number of hosts and notice a problem, you donât need to create an individual alert condition for every host within. Instead, we recommend initiating the alert condition directly from the chart of the metric you are viewing and creating it based on the filter tags. This will create an alert condition for any hosts that match those tags, allowing our infrastructure monitoring to automatically remove hosts that go offline and add new hosts to the alert condition if they match those tags. Alerts configured once for the appropriate tags will scale correctly across all future hosts. And know that you can also leverage existing alert policies for infrastructure alert conditions. 6. View infrastructure data alongside APM data The integration between New Relic APM and infrastructure monitoring lets you see your APM data and infrastructure data side by side, so you can find the root cause of problems more quickly, no matter where they originate. This allows users to view the performance relationship of your hosts and the applications running on them, allowing for quicker diagnosis of the issue and impact on the businessâ health. Use health maps to quickly spot any issues or alerts related to the health of your applications and how that connects to the supporting infrastructure. The first boxes starting from the top left are those that require your attention. 7. Access Infrastructure data using the Data explorer Teams that use multiple New Relic capabilities find it useful to create a single dashboard to visually correlate the infrastructureâs health with application, browser and synthetics metrics. Thatâs where New Relic data exploration features comes in. All the granular metrics and events collected by infrastructure monitoring are stored in New Relic and are accessible to you immediately. Having access to the raw metrics means you can run more custom queries using NRQL, and also create dashboards to share infrastructure metrics with your team. 8. Update your agents regularly New Relicâs software engineering team is constantly pushing out improvements and new features to improve our customersâ overall monitoring experience. In order to take advantage of all the awesomeness theyâre delivering, we recommend regularly updating to the latest version of the infrastructure agent. Want more user tips? View training videos at New Relic University. Read the documentation. Check out our Tutorials. Ask a question in the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 225.60431,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Want even longer periods of uninterrupted sleep? Here are eight <em>best</em> <em>practices</em> to make dynamic infrastructure and server monitoring even easier with <em>New</em> <em>Relic</em>&#x27;s infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution"
      },
      "id": "6044151c28ccbc4b4f2c60af"
    }
  ],
  "/docs/new-relic-solutions/best-practices-guides/full-stack-observability/synthetic-monitoring-best-practices-guide": [
    {
      "sections": [
        "APM best practices guide",
        "Tip",
        "1. Standardize application names",
        "How to do it",
        "2. Add tags to your applications",
        "Caution",
        "3. Create and evaluate alert policies",
        "4. Identify and set up key transactions",
        "5. Track deployment history",
        "6. Review APM reports",
        "7. Review your environment with service maps",
        "8. Keep current",
        "9. Manage user access",
        "Important"
      ],
      "title": "APM best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "368a1a5688384d5bebf128604a9b8f190d335524",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide/",
      "published_at": "2021-05-22T14:44:24Z",
      "updated_at": "2021-03-30T13:08:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application Monitoring Tips You Need To Know It's one thing to know how to use APM, but it's another thing to know how to use New Relic's application performance monitoring software well. Here are some best practices designed to help you become an APM masterâand a key asset to your team! Tip To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. 1. Standardize application names Most New Relic agents provide a default application name, such as \"My Application\" or \"PHP Application,\" if you don't specify one in your New Relic configuration file. You don't want to end up with 20 identically named applications, be sure to select a descriptive identifier for your apps as soon you deploy them. To keep things consistent and easy to navigate, New Relic recommends standardizing your application naming (for example, all apps in Staging append [ Staging] or the like at the end of their names). Ideally, you want your new Java applications to be named automatically to reduce the chances of typographical errors and misnaming. How to do it For Java applications, automatic application naming can come from the following sources: Request attribute Servlet init parameter Filter init parameter Web app context parameter Web app context name (display name) Web app context path Choose the method that fits best your needs and follow these steps. For non-Java applications, there are no automatic naming methods, so refer to the documentation for your APM agent. 2. Add tags to your applications When several different applications use the same account, and each application spans multiple environments (for example, development, test, pre-production, production), it can be hard to find a specific application in your overview dashboard. That's why we recommend adding tags to your apps so that you can segment them into logical groups. The two most common tags that mature APM customers use are application name and environment. So, for example, if you wanted to view the billing application in Test, you could simply filter by \"billing app\" (name tag) and \"test\" (environment tag). Caution In the APM agent configuration settings files, use the labels field to add tags to your data. For example, see this description of the Python labels setting. APM is designed so that apps can roll up into an unlimited number of meaningful tag categories. How to do it Read the overview: Use tags to organize and group what you monitor. Follow these instructions for creating tags: NerdGraph tagging API tutorial. 3. Create and evaluate alert policies When key performance indicators spike or drop, individuals and teams in your organization need to be notified. Alerting in New Relic provides a set of tools including dynamic baselines that allow you to detect problems before they impact your end users. Alert policies can be set up in two primary ways: Static threshold alerts are great when you already know the nature of an application and its normal behaviors aren't likely to change anytime soon. Apdex score, response time, error rate, throughput are some of the static thresholds you can create alert policies on. Dynamic baseline alerts make it easy to determine and set dynamic alert thresholds for applications with varying seasonal patterns and growth trends (which make it difficult to set thresholds that define normal behavior). These alerts use baselines modeled from your applicationâs historical metric data. Each alert policy can contain as many conditions as you need, and each alert condition includes three components: Type of condition (metric, external service, and so on) Entities that the policy targets (for example, apps monitored by New Relic APM or New Relic Browser, hosts monitored by New Relic Infrastructure, and so on) Thresholds that escalate into alerting situations with increasing severity Once you have your alerting set up, you then want to make sure you're taking advantage of all viable notification channels. After all, what good are alerts if no one knows about them? You can manage alerts by creating specific user groups and by leveraging New Relic's integrated alert channels, including Slack, PagerDuty, webhooks, and email. Be sure to evaluate alert policies on a regular basis to ensure that they are always valid. How to do it See the detailed documentation: To set up dynamic baseline alerts and choose an application, follow standard procedures. You will see a preview of the metric with the predicted baseline You can select a metric for that application and see the corresponding baseline. Then, using the threshold sliders, you can set how closely you want your threshold to follow the baseline prediction. To set up static threshold alerts for your Apdex settings, follow standard procedures. To set up your alert notification channels, follow standard procedures. 4. Identify and set up key transactions Depending on the nature of your application, some transactions may be more important to you than others. New Relic's key transactions feature is designed to help you closely monitor what you consider to be your app's most business-critical transactions, whether that's end-user or app response time, call counts, error rates, or something else. You can also set alert threshold levels for notifications when your key transactions are performing poorly. How to do it In the menu bar, select More > Key transactions, and then select Add more. Then select the app and web transaction or, from the selected transaction, select Track as key transaction. Type a name for the key transaction, and select Track key transaction. Optional: If the agent for the selected app supports custom alerting, use the default values that New Relic automatically fills, or select Edit key alert transaction policy to set the Apdex and alert threshold values. To view the key transactions dashboard details, select View new key transaction. 5. Track deployment history When development teams are pushing new code out as frequently as possible, it can be hard to measure the impact that each deployment is having on performance. One way to stay in tune with how these changes are affecting your application is with deployment reports. These reports list recent deployments and their impact on end-users and app servers' Apdex scores, along with response times, throughput, and errors. You can also view and drill down into the details to catch errors related to recent deployments, or file a ticket and share details with your team. How to do it From the New Relic menu bar, select APM > (selected app) > Events > Deployments. To view performance after a deployment, go to the selected app's Overview dashboard in the Recent events section. A blue vertical bar on a chart indicates a deployment. To view summary information about the deployment, point to the blue bar. 6. Review APM reports From SLA, deployment, and capacity to scalability, host usage reports, and more, New Relic APM offers a variety of downloadable reporting tools surfacing historical trendsâall great ways to report to senior executive teams or customers. Take a look at the full list of reports and use them to your advantage. How to do it From the New Relic APM menu bar, select Applications > (selected app) > Reports. Select the report you'd like to see. If you want to save or export a report to share, select Download this report as .csv, which will create a report with comma-separated values. 7. Review your environment with service maps Use New Relic service maps, a feature included in APM, to understand how apps and services in your architecture connect and talk to each other. Service maps are visual, customizable representations of your application architecture. Maps automatically show you your app's connections and dependencies, including databases and external services. Health indicators and performance metrics show you the current operational status for every part of your architecture. How to do it Go to one.newrelic.com > More > service maps. To get started, read the instructions in Introduction to service maps. 8. Keep current With New Relicâs SaaS platform, getting new features is as easy as updating your agent. Most likely your organization already has a set of scripts for deploying application upgrades into your environment. In a similar fashion, you can also automate your New Relic agent deployment to ensure that your systems are up to date. Both Puppet and Chef scripts are great examples of deployment frameworks that make life easier by allowing you to automate your entire deployment and management process. How to do it Regularly review which version of the agent you're using so that you know when an update is needed. If the latest agent release contains a needed fix or added functionality, download it. To deploy the agent automatically (preferred as a method to avoid errors): Use existing deployment scripts, provided they can be adapted to handle the deployment. OR Create and maintain a script that specifically deploys and configures the New Relic agent. Ideally, the script would pull the agent files from a repository where the files are versioned (for rollback purposes). Once the script has been created, shut down the application (unless script handles this). Run the deployment script. Start the application (unless script handles this). If problems arise, run the script to roll back to the previous version. To deploy the agent manually: Back up the current agent directory. Deploy the updated agent into the existing agent directory. Modify configuration files by comparing new files with existing files. In particular, make sure things like license key and custom extensions are copied over to the new configuration. Restart the application. If problems arise, restore the old agent using the backup and restart. 9. Manage user access Important This is available only for accounts on our original product-based pricing plan. Enable role-based access control (RBAC) and single sign-on (SSO) New Relic allows authorized individuals to access the broadest possible amount of data, regardless of their assigned role. As an Owner or Administrator of your New Relic account, you can control the permissions of individual users or entire roles with RBAC. To find out what is possible and how to make changes, see Users and roles. Security is no doubt of utmost concern to your organization. To simplify password management for your employees and strengthen security, you may already be using SSO with your other systems. You should do the same with New Relic. Using New Relic's SSO integration feature, account administrators will be able to enforce strong passwords and restrict login via a corporate authentication mechanism. This way, New Relic users who have already authenticated using a corporate SSO system will be able to bypass the New Relic login prompt. How to do it Log in to New Relic as an admin and go to the SSO configuration page. From the New Relic title bar, select (your account name) > Account Settings > Integrations > Single Sign On. From the SAML Single Sign On page, review your New Relic SAML Service Provider details. To upload your SAML Identity Provider certificate, select Choose File, and then follow standard procedures to select and save the file. Copy and paste in (or type) the Remove login URL that your users will use for Single Sign-On. If your organizationâs SAML integration provides a redirect URL for logout, copy and paste in (or type) the Logout landing URL; otherwise leave blank. Save, test, and enable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.28433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Application Monitoring Tips You Need To Know It&#x27;s one thing to know how to use APM, but it&#x27;s another thing to know how to use <em>New</em> <em>Relic</em>&#x27;s application performance monitoring software well. Here are some <em>best</em> <em>practices</em> designed to help you become an APM masterâand a key asset to your team! Tip To get"
      },
      "id": "6044186564441f1f94378ecc"
    },
    {
      "sections": [
        "Infrastructure monitoring best practices guide",
        "1. Install the infrastructure agent across your entire environment",
        "How to do it",
        "Tip",
        "2. Configure the native EC2 integration",
        "3. Activate the integrations",
        "4. Create filter sets",
        "5. Create alert conditions",
        "6. View infrastructure data alongside APM data",
        "7. Access Infrastructure data using the Data explorer",
        "8. Update your agents regularly",
        "Want more user tips?"
      ],
      "title": "Infrastructure monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "931ea7767d73381ca0cb3502ec14f88d66ce5eaf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/infrastructure-monitoring-best-practices-guide/",
      "published_at": "2021-05-22T07:34:10Z",
      "updated_at": "2021-03-13T07:39:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Want even longer periods of uninterrupted sleep? Here are eight best practices to make dynamic infrastructure and server monitoring even easier with New Relic's infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution was designed to help enterprise customers monitor their large and dynamically changing environments at scale. In order to facilitate this, the UI is completely driven by tags that let you visualize aggregated metrics, events, and inventory for a large number of servers. To really get the most out of infrastructure monitoring, we recommend installing it across your entire environment, preferably even across multiple regions and clusters. This will provide a more accurate picture of the health of your host ecosystem and the impact your infrastructure has on your applications. Want to achieve faster Mean Time To Resolution (MTTR)? Install the infrastructure agent on database servers, web servers, and any other host that supports your applications. When deploying the agent, leverage custom attributes to tag your hosts so that you can use those for filtering the data presented in the UI and for setting alerts. This is in addition to any Amazon EC2 tags you may be using which will auto-import when you enable the EC2 integration. You may also prefer to keep the agent logs separate from the system logs, which you can do through the configuration. How to do it Leverage our install modules for config management tools such as Chef, Puppet and Ansible to easily deploy your agent across all your infrastructure. Read the instructions in the github repo for your config management tool referenced in the link above and define the custom_attributes you want to use to tag your hosts. Set the log_file attribute to your preferred location for the infrastructure agent logs. Tip If you are installing the agent on a single host, the process should only take a few minutes and you can find detailed instructions in our documentation. 2. Configure the native EC2 integration If you have an AWS environment, in addition to installing the infrastructure agent on your EC2 instances to monitor them, we also recommend configuring the EC2 integration so that New Relic can automatically import all the tags and metadata associated with your AWS instances. This allows you to filter down to a part of your infrastructure using the same AWS tags (example, ECTag_Role='Kafka'), and slice-and-dice your data in multiple ways. Additionally, our âAlertsâ and âSaved Filter Setsâ are completely tag-driven and dynamic, so they automatically add/remove instances matching these tags to give our users the most real-time views that scale with your cloud infrastructure. 3. Activate the integrations Monitoring your infrastructure extends beyond just CPU, memory, and storage utilization. Thatâs why New Relic has out-of-the-box integrations that allow you to monitor all the services that support your hosts as well. Activate any of our integrations, including AWS Billing, AWS ELB, Amazon S3, MySQL, NGINX, and more, to extend monitoring to your AWS or on-host applications, and access the pre-configured dashboards that appear for each of them. 4. Create filter sets With New Relic, users can create filter sets to organize hosts, cluster roles, and other resources based on criteria that matter the most to users. This allows you to optimize your resources by using a focused view to monitor, detect, and resolve any problems proactively. The attributes for filtering are populated from the auto-imported EC2 tags or custom tags that may be applied to hosts. You can combine as many filters as you want in a filter set, and save them to share with other people in your account. Youâll also be able to see the color-coded health status of each host inside the filter set, so you can quickly identify problematic areas of your infrastructure. Additionally, filter sets can be used in the health map to get an overview of your infrastructure performance at a glance based on the filters that matter to your teams. 5. Create alert conditions With New Relic, you can create alert conditions directly within the context of what you are currently monitoring with New Relic. For example, if you are viewing a filter set comprised of a large number of hosts and notice a problem, you donât need to create an individual alert condition for every host within. Instead, we recommend initiating the alert condition directly from the chart of the metric you are viewing and creating it based on the filter tags. This will create an alert condition for any hosts that match those tags, allowing our infrastructure monitoring to automatically remove hosts that go offline and add new hosts to the alert condition if they match those tags. Alerts configured once for the appropriate tags will scale correctly across all future hosts. And know that you can also leverage existing alert policies for infrastructure alert conditions. 6. View infrastructure data alongside APM data The integration between New Relic APM and infrastructure monitoring lets you see your APM data and infrastructure data side by side, so you can find the root cause of problems more quickly, no matter where they originate. This allows users to view the performance relationship of your hosts and the applications running on them, allowing for quicker diagnosis of the issue and impact on the businessâ health. Use health maps to quickly spot any issues or alerts related to the health of your applications and how that connects to the supporting infrastructure. The first boxes starting from the top left are those that require your attention. 7. Access Infrastructure data using the Data explorer Teams that use multiple New Relic capabilities find it useful to create a single dashboard to visually correlate the infrastructureâs health with application, browser and synthetics metrics. Thatâs where New Relic data exploration features comes in. All the granular metrics and events collected by infrastructure monitoring are stored in New Relic and are accessible to you immediately. Having access to the raw metrics means you can run more custom queries using NRQL, and also create dashboards to share infrastructure metrics with your team. 8. Update your agents regularly New Relicâs software engineering team is constantly pushing out improvements and new features to improve our customersâ overall monitoring experience. In order to take advantage of all the awesomeness theyâre delivering, we recommend regularly updating to the latest version of the infrastructure agent. Want more user tips? View training videos at New Relic University. Read the documentation. Check out our Tutorials. Ask a question in the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 225.60431,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Want even longer periods of uninterrupted sleep? Here are eight <em>best</em> <em>practices</em> to make dynamic infrastructure and server monitoring even easier with <em>New</em> <em>Relic</em>&#x27;s infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution"
      },
      "id": "6044151c28ccbc4b4f2c60af"
    },
    {
      "sections": [
        "Monitor apps and hosts with health maps",
        "Best practices",
        "Features",
        "Entities prioritized by health",
        "Tip",
        "Entity sort order criteria",
        "Views, filters, toggles",
        "View and use health maps",
        "Use cases",
        "The system's current health at a glance",
        "Scope of the problem: What else is broken?",
        "Scale of the problem: Use context to find a noisy neighbor",
        "Troubleshooting"
      ],
      "title": "Monitor apps and hosts with health maps",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e7d1c9a1f713b33c4aa42c2cb5e1b7a6ac23c2e3",
      "image": "https://docs.newrelic.com/static/2a20f997d494faa0658b6d93c6ab1fd3/c1b63/health-map-demo-ss_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/monitor-apps-hosts-health-maps/",
      "published_at": "2021-05-22T07:35:38Z",
      "updated_at": "2021-03-13T07:37:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The health map provides a single place to visually monitor the health of all your apps and their related hosts, prioritized by health status. You can customize the page by using different views, filters, and toggles to organize the map in a way most relevant to you or your team. Use your health map to monitor applications and hosts in real-time, and quickly track down problems as they occur. Best practices The health map pulls data together from several New Relic solutions. To get the most out of the health map, we recommend using the following features: Infrastructure monitoring: Create filter sets to meaningfully categorize hosts. APM: Create tags to meaningfully categorize your applications. Alerts: Create alert policies that cover all your alerting scenarios. The health map is also especially useful if you're using containerized apps on hosts, with many instances of apps per host. Features one.newrelic.com > More > Health maps: The health map combines data from APM, infrastructure monitoring, and alerts to display your applications and hosts prioritized by health status. Health map features include: Entities prioritized by health The health map organizes the page by primary entity boxes. Primary entity boxes contain current (refreshes every two minutes), at-a-glance health and performance data, secondary entities related to it, and links to relevant APM or Infrastructure UI pages for detailed performance data. Example of a health map primary entity box with secondary entities. The health map prioritizes entities based on the health status of primary then secondary entities. The health status is determined using data from Alerts. The health map prioritizes the entities by first sorting the primary entities by health status, then sorting those by the health status of their secondary entities (related apps or hosts). The health map supports red, yellow, green, light green (not targeted by any conditions), and gray (application stopped reporting data) statuses for applications. The health map supports red, yellow, and green statuses for hosts. Tip If you have a host not targeted by any conditions, it appears green on the health map. If a host is not reporting data, it does not display on the health map unless you create a host-not-reporting condition. Entities are prioritized to the top based on this order: Entity sort order criteria Primary entities that have critical (red) health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Primary entities that have warning (yellow) health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Primary entities that have green health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Count of secondary entities Name of entity Views, filters, toggles Use the Views dropdown to see the health of your system organized by your applications or your hosts. You can then filter those views by tags (apps) or filter set (hosts) to only see data most relevant to you or your team. Use the Show metrics/hosts toggles to show more/less information in the entity boxes. View Description Applications and related hosts Organizes the map by application entities to display for each app: Health status color Condition violation information, if any Summary metrics Health of related hosts the application is running on as reported by New Relic Infrastructure Map includes an optional app tag filter. Hosts and related applications Organizes the map by host entities to display for each host: Health status color Condition violation information, if any Summary metrics Health of related applications running on the host reported by New Relic APM Map includes an optional host filter. Filter sets and related hosts Uses data reported by our infrastructure monitoring to display: Health of the hosts in each filter set in Infrastructure View and use health maps Tip To get the most out of your health map, see health maps best practices. The health map represents the current state of your system. The map refreshes every two minutes. To view the health map: From one.newrelic.com, select More, then select Health maps. Select a view from the View dropdown to organize the map by application, host, or infrastructure filter sets. If using the views Applications and related hosts or Hosts and related applications, use the Filter dropdown to only display entities most interesting to you or your team. Optional: Toggle Show metrics or Show hosts to display more or less entity data. Optional: Display the health map on a TV / wallboard in your operations center to see your system's current health at a glance. If entities start showing critical (red) or warning (yellow) health statuses, hover over the entity or the Related hosts/apps tiles for violation information to quickly ascertain the scope and scale of the problem. Click through to the relevant APM or Infrastructure UI pages to get detailed information to start troubleshooting. Use cases The health map is designed to help operations and DevOps professionals, who are responsible for the health of large, complex environments, understand: The system's current health at a glance You like to have a view up on the TV wallboard in your network operations center (NOC) that represents the health of all systems. You may be focused on a task and not notice when an alert comes in. With a wallboard you can feel assured that you can always glance up to see if anything is on fire. Conversely, even though something is alerting, you like to see the applications and hosts that are healthy to help keep things in perspective. Scope of the problem: What else is broken? You are responsible for many applications at your company. At any point in time, something is alerting and because there are many applications deployed across many hosts, itâs difficult for you to keep track of everything and know what is experiencing problems. The health map gives you a single place to see the health and relationship between all applications and hosts. You can easily correlate the alerting host with applications deployed to it and easily answer the question: What else is broken right now? Scale of the problem: Use context to find a noisy neighbor With container orchestration deploying containerized applications across many hosts, itâs difficult for you to understand the scale of the problem when you receive an alert for a host or groups of hosts. By using the application view of the health map, you can see the alerting host along with all the other hosts serving the application. If the issue is isolated to a single host, you can change to the host view of the health map to see what other applications are deployed on that host. In that view, you see that the host has four applications running and one of the applications is alerting on higher than normal throughput. Troubleshooting If health map host boxes do not display their installed apps, or if application boxes do not display the Infrastructure-monitored hosts where they are running, see APM data missing from infrastructure monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 225.60388,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Best</em> <em>practices</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": " to monitor applications and hosts in real-time, and quickly track down problems as they occur. <em>Best</em> <em>practices</em> The health map pulls data together from several <em>New</em> <em>Relic</em> <em>solutions</em>. To get the most out of the health map, we recommend using the following features: Infrastructure monitoring: Create"
      },
      "id": "6044155e28ccbc6f972ea01c"
    }
  ],
  "/docs/new-relic-solutions/index": [
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T07:31:06Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that theyâre consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs DevOps transformation. 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or âmarkerâ, on charts and graphs at the deployment eventâs timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When youâre satisfied with the applicationâs performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 978.9812,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ". 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. <em>New</em> <em>Relic</em> APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-05-22T07:38:45Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your applicationâs performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your applicationâs architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the applicationâs environment searchable. Any convention you use should be unique to your organizationâs structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your applicationâs performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our applicationâs overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue youâre investigating. In this example, weâve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, itâs obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If youâre not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, itâs responsible for 99.9% of the app server time, which means weâre getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issuesâthe red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that itâs highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customersâwhich will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the ânorm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, itâs important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 978.8782,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). <em>New</em> <em>Relic</em> provides views of your applicationâs performance to help you"
      },
      "id": "60440e5328ccbccc972c60c0"
    },
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-05-22T07:37:11Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 978.84436,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "Whether you&#x27;ve just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are <em>new</em> and modern. These modern technologies could be container <em>solutions</em> such as Docker"
      },
      "id": "60440f13e7b9d20f275799ca"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services": [
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-05-22T07:45:17Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where Iâm Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps teamâs auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence âmachine-learnâ your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.72437,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-05-22T17:35:09Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your applicationâs performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relicâs reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.4495,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    },
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T07:31:06Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that theyâre consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs DevOps transformation. 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or âmarkerâ, on charts and graphs at the deployment eventâs timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When youâre satisfied with the applicationâs performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.7962,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ". 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. <em>New</em> <em>Relic</em> APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event"
      },
      "id": "60450efc64441fb48e378eee"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics": [
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T07:31:06Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that theyâre consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs DevOps transformation. 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or âmarkerâ, on charts and graphs at the deployment eventâs timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When youâre satisfied with the applicationâs performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.50928,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "Resolve dependency risk: identify and analyze potential issues",
        "Prerequisites",
        "1. Analyze dependencies with service maps",
        "2. Identify back-end application dependency risks",
        "Tip",
        "3. Identify front-end dependency risk",
        "4. Identify Microservice Dependencies",
        "5. Create an action plan for risk mitigation"
      ],
      "title": "Resolve dependency risk: identify and analyze potential issues",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "4911ddf0c6fca572b52e22fbe464f21f0c6f338f",
      "image": "https://docs.newrelic.com/static/d1d4cf78d193ae770219cfdb9f6f792f/c1b63/distributed-trace_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues/",
      "published_at": "2021-05-22T06:11:07Z",
      "updated_at": "2021-05-15T22:15:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Successfully scaling DevOps requires a robust understanding of dependencies across application teams and related services. Use New Relics service maps to discover and mitigate risky dependencies from upstream and downstream services. Prerequisites This tutorial assumes youâve completed the previous DevOps procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. New Relic recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com > Service Maps > App/Service list This initial view shows all applications that are configured in your account. Applications that have violated a warning threshold are shown in yellow, and those with an active alert are shown in red. Healthy applications appear in green. New Relic uses a bold line to map applications to the services (such as databases) they connect to. Familiarize yourself with these maps to see how applications and their services fit together. Take note of which applications have the most dependencies and which rely on the same dependency, such as an API. Click an application to see high level metrics about that app, including throughput, response time, Apdex score, and error rate for the last 30 minutes. Tracking throughput is a good way to determine which of your applications are serving the most traffic. After looking at the architecture as a whole, review the applications that have the most dependencies. Select the App/Services list to see a full list of your applications. one.newrelic.com > Service Maps > App/Service list In this example, weâve chosen Tower-Chicago from the App/Services list. All of the traffic being sent to Tower-Chicago is coming from Proxy-East. In this case, Tower-Chicago is showing 48.3 requests per minute, or 11.3% of the 426 requests per minute flowing through Proxy-East. one.newrelic.com > Service Maps > App/Service list In most cases, the separate applications and services represented in service maps are created and maintained by separate teams. This exercise of walking through the dependencies of your architecture should involve representatives from each of those teams. Teams should work together to ask questions such as: How critical is this particular dependency? What would happen if it were to go down? What happened last time it went down? Was there a revenue loss? 2. Identify back-end application dependency risks Once youâve analyzed your applicationsâ dependencies, youâll want to examine the quality of dependency execution. For example, is the dependency stable and predictable for each application or transaction youâve identified? To do this, youâll first need to gather as much information as you can about the applications from New Relic Insights, which helps you analyze data that is collected about the applications in more detail. Here is an example NRQL query to further analyze back-end service performance: SELECT count(appName)/30 as 'Throughput', apdex(duration), average(duration), stddev(duration), max(duration), count(error_type), uniquecount(host) FROM Transaction FACET appName SINCE 30 MINUTES AGO Copy This query shows you each applicationâs request per minute (throughput), Apdex score, and an overview of how the application is performing overall (through the standard deviation calculation, in which lower numbers are generally better). It also shows errors for the time period and the number of hosts on which the application is running. insights.newrelic.com > query results Next, gather information on incidents and events related to the services from New Relic Alerts: Click Alerts > Incidents > All Incidents. alerts.newrelic.com > Incidents > All Incidents Click Alerts > Events > All Events. alerts.newrelic.com > Incidents > All Events Tip Using webhooks to send alert events to New Relic Insights, allows you to supplement your dashboards with Alerts data. The process is outlined in this community discussion post. Here is a simplified example of the results of this exercise: Application Number of dependencies RPM Hosts APDEX (avg) Last outage TTR (hrs) Routing Service 10 983 4 .93 2/19/18 .75 Tower Austin 1 58 1 .95 10/11/17 1.5 Proxy-East 11 498 4 .92 1/4/18 .25 Proxy-West 11 495 4 .97 12/3/17 .25 WebPortal 7 396 8 .98 4/1/18 2.5 Supplement this data with the data that your teams know about your service and that you gathered from the dependency exercise in step 1, and use that data to develop hypotheses about the highest risk areas in your services that should be mitigated. 3. Identify front-end dependency risk Once youâve analyzed back-end dependencies, explore front-end dependencies. This is a critical step because as you walk higher up the stack and closer to the user, you will likely have more dependencies and abstractions. Service maps seamlessly integrate data from New Relic Browser and New Relic Mobile to help you understand the dependencies from front-end user interfaces to back-end services. one.newrelic.com > Service Maps Use the service map view to drill into front-end dependencies, and execute a similar exercise to the one you executed for back-end dependencies. This exercise will again expose data to help you identify risk areas you should address and optimize. We recommend that you conduct the analysis with user interface (UI) teams so that you can also gather a complementary qualitative understanding of what the UI teams consider critical based on their experience. A ranking from the UI teams of the most critical dependency is a useful output of this work. 4. Identify Microservice Dependencies If you are using microservices, you can have dozens, if not hundreds, of services that are calling each other. Use Distributed Tracing to see how all those services connect together and how your requests flow through those different services. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. A distributed trace is composed of multiple \"spans,\" which represent time spent in services or resources of those services. Click on the Distributed tracing menu in New Relic APM left nav. You can see âtrace listingâ view where youâll be able to quickly identify slow traces and traces with errors. The scatter plot lets you easily see outliers. Below that are the trace summaries, click on a trace to see details. Dive into distributed traces to see how long each span takes. Click into each span to see historical performance charts and associated attributes that layer in the context you need to understand and troubleshoot issues. one.newrelic.com > APM > (select an app) > Distributed tracing This rounds out your list of dependencies. 5. Create an action plan for risk mitigation Once youâve analyzed the dependencies across your application from both front-end and back-end services, create an action plan to reduce dependency risks and achieve your service level objectives (SLO). As you prioritize these next steps, we recommend you keep these four principles in mind: Understand your risk tolerance. Itâs helpful to have a clear picture of your tolerance for risk, which ideally should be informed by your service level objectives (refer to the Establish Objectives and Baselines tutorial for more information). Set an alert policy to monitor dependencies that youâve determined have a high relationship to SLO achievement. Minimize dependencies. The simpler you keep your code, the less functions you'll have referring to other modules. Removing unnecessary complexity is an important way to ensure you have a maintainable system that meets your customersâ expectations. Localize dependencies. For the code you write, package together functions that depend on each other whenever possible. Stabilize dependencies. When dependencies are unavoidable, mitigate risks by ensuring these dependencies point to modules that are the least likely to change or are easier to substitute. When your action plan is complete, monitor the results of the efforts. The efficacy of your actions to resolve dependency risks should ultimately be measured by your SLOs",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 340.2635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>DevOps</em> procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. <em>New</em> <em>Relic</em> recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com &gt; Service Maps"
      },
      "id": "60440f13e7b9d2ec025799f0"
    },
    {
      "sections": [
        "Incident learning: Retrospectives",
        "Prerequisites",
        "1. Establish a post-mortem process",
        "2. Don't over-research",
        "3. Tune your monitoring",
        "4. Create an incident repository",
        "Outcomes",
        "For more help"
      ],
      "title": "Incident learning: Retrospectives",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "683e9d7afbd81c80d511401e194bb0ecc2ef68ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/incident-learning-retrospectives/",
      "published_at": "2021-05-22T07:29:44Z",
      "updated_at": "2021-03-16T10:56:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Equip teams to learn from incidents and stop recycling problems. You may have heard the term blameless post-mortems; hereâs how and why to get there. Create a process for learning from problems that enables the organization to improve existing KPIs and incident response patterns and to adapt when new challenges surface. The goal is to learn first, then fix. Yes, you have had an outage, but you now have everyone's attention. Take advantage of it. Prerequisites Before starting this tutorial, be sure to complete these New Relic tutorials: Establish objectives and baselines Incident orchestration 1. Establish a post-mortem process The goal is to identify technical, organizational, and process follow-up actions after each notable incident. We've found more success by focusing on what happened, rather than who did what. Ask questions like: How were we notified about the problem? Could we have discovered the problem sooner? Was the information we needed to resolve the incident easily accessible? Where did we have humans doing work where computers should have done it? Read more at How and why to hold blameless retrospectives. Ideally, this process should be the same across teams. Create a document that includes: The triggering event. Contributing factors that lead to the incident. A chronology and summary of remediation steps and their result (be sure to include what went right; these are actions/processes you don't want to lose in the future). A measure of the impact to the business in terms of user experience and financial losses, if possible. Recommendations for system or feature improvements to prevent a recurrence. Recommendations for process and communication improvements. Owners of post-retro actions. No root cause? Why is root cause not included in this postmortem report? Root cause implies that it's both possible and useful to find a single cause for an outcome in a complex system. The notion is seductive because we want simple, actionable explanations, but current systems are too complex for simple answers. It is harmful because it tricks us into going down one narrow path of options instead of exploring the different paths available, some of which might be much more important and impactful if we broadened our thinking. Example postmortem report Comments Date March 1, 2018 Executive summary From approximately 1:45PM until 2:30PM, users could not add items to their carts, which prevented any checkouts from occurring during the incident period. Triggering event We determined that a change was made to the CSS rules on the product detail page that effectively disabled the Add to cart button. Timeline 1:50PM: Successful checkouts < 10 for 5 minutes alert triggered; assigned to Alice. 1:55PM: After reviewing the e-commerce team dashboard, Alice determined that the threshold was breached immediately following a deploy by Bob. She notified him of the incident. 2:00PM: Alice and Bob began troubleshooting. Attempts at recreating the issue in production were successful. 2:20PM: Bob determined that his change to the CSS on the product detail page disabled the Add to cart button. He deployed a hotfix. 2:30PM: Functionality was restored and the incident was resolved. Impact No checkouts were completed during the duration of the incident. Our typical revenue for a Thursday during this timeframe is $30,000. Recommendations We have been discussing implementing New Relic Synthetics for a while now. If we had a synthetic check on the checkout process, this issue would have been detected immediately. We should also implement more thorough unit tests in the front-end web app. Next Steps Alice will implement synthetic checks next sprint. Ravi's team will investigate creating more unit tests. At first, your retros will generate obvious follow-ups, like fixing permissions and access, missing instrumentation, or a need to tune certain alerts. Over time, your retros will reveal larger followupsâwe call them interventions. Before you rush to implement interventions (such as switching from using GUIDs to integers), take time to map out the impact of these changes. By making a major change, you may ensure the previous incident does not occur, but what other problems are you introducing or risking? Not every incident requires preventative action. It is reasonable to accept a certain level of risk and mitigate the impact. 2. Don't over-research Establish guidelines for which incidents require in-depth analysis to prevent diminishing returns from too much overhead. If you had a hardware failure and replace the hardware, you are probably done. If an incident has so much complexity (or emotional heat) that you may never get to clear follow-up actions, you can choose to not do a formal review. Rather, have a meeting and an open discussion of events. Take notes, but you don't need to create a retro report. 3. Tune your monitoring Audit monitoring and alerting after major incidents to tune KPIs and thresholds, improve time to detection, and reduce alert noise. Review the set proactive alerts pattern. Groom your alerts by: Measuring the frequency of pages on your teams. Maintaining policy hygiene. Little things, like using a consistent naming structure, make a big difference. Tune alerts as performance improves Leverage AI to fine tune alerts: Train your system to obtain the most accurate incident correlation. Use muting rules to silence alerts you don't need. Set alerts on system-detected anomalies. Creating runbooks for your conditions. Runbooks for alerts should include: A description of why the alert was created. What the alert is monitoring. What that alert indicates about the state of your system. Initial steps for an on-call engineer to begin triage. Learn more about grooming and tuning your alerts. 4. Create an incident repository Create a centralized, searchable repository of incident post-mortem documents and other incident artifacts, providing the organization with access to lessons learned. A small number of people in your org will probably access these. But get good enough at creating these reports and you can begin to automate the use of this information. Outcomes As you continue to harvest information from your incidents, you should begin to get better SLO compliance, fewer high-severity incidents, improved developer satisfaction, and lower employee turnover rate. For more help Explore the New Relic platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.38057,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>new</em> challenges surface. The goal is to learn first, then fix. Yes, you have had an outage, but you now have everyone&#x27;s attention. Take advantage of it. Prerequisites Before starting this tutorial, be sure to complete these <em>New</em> <em>Relic</em> tutorials: Establish objectives and baselines Incident orchestration"
      },
      "id": "603ea329196a678c53a83da9"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/automate-instrumentation": [
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T07:31:06Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that theyâre consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs DevOps transformation. 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or âmarkerâ, on charts and graphs at the deployment eventâs timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When youâre satisfied with the applicationâs performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.50916,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-05-22T07:38:45Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your applicationâs performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your applicationâs architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the applicationâs environment searchable. Any convention you use should be unique to your organizationâs structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your applicationâs performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our applicationâs overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue youâre investigating. In this example, weâve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, itâs obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If youâre not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, itâs responsible for 99.9% of the app server time, which means weâre getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issuesâthe red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that itâs highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customersâwhich will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the ânorm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, itâs important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.4732,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    },
    {
      "sections": [
        "Resolve dependency risk: identify and analyze potential issues",
        "Prerequisites",
        "1. Analyze dependencies with service maps",
        "2. Identify back-end application dependency risks",
        "Tip",
        "3. Identify front-end dependency risk",
        "4. Identify Microservice Dependencies",
        "5. Create an action plan for risk mitigation"
      ],
      "title": "Resolve dependency risk: identify and analyze potential issues",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "4911ddf0c6fca572b52e22fbe464f21f0c6f338f",
      "image": "https://docs.newrelic.com/static/d1d4cf78d193ae770219cfdb9f6f792f/c1b63/distributed-trace_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues/",
      "published_at": "2021-05-22T06:11:07Z",
      "updated_at": "2021-05-15T22:15:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Successfully scaling DevOps requires a robust understanding of dependencies across application teams and related services. Use New Relics service maps to discover and mitigate risky dependencies from upstream and downstream services. Prerequisites This tutorial assumes youâve completed the previous DevOps procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. New Relic recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com > Service Maps > App/Service list This initial view shows all applications that are configured in your account. Applications that have violated a warning threshold are shown in yellow, and those with an active alert are shown in red. Healthy applications appear in green. New Relic uses a bold line to map applications to the services (such as databases) they connect to. Familiarize yourself with these maps to see how applications and their services fit together. Take note of which applications have the most dependencies and which rely on the same dependency, such as an API. Click an application to see high level metrics about that app, including throughput, response time, Apdex score, and error rate for the last 30 minutes. Tracking throughput is a good way to determine which of your applications are serving the most traffic. After looking at the architecture as a whole, review the applications that have the most dependencies. Select the App/Services list to see a full list of your applications. one.newrelic.com > Service Maps > App/Service list In this example, weâve chosen Tower-Chicago from the App/Services list. All of the traffic being sent to Tower-Chicago is coming from Proxy-East. In this case, Tower-Chicago is showing 48.3 requests per minute, or 11.3% of the 426 requests per minute flowing through Proxy-East. one.newrelic.com > Service Maps > App/Service list In most cases, the separate applications and services represented in service maps are created and maintained by separate teams. This exercise of walking through the dependencies of your architecture should involve representatives from each of those teams. Teams should work together to ask questions such as: How critical is this particular dependency? What would happen if it were to go down? What happened last time it went down? Was there a revenue loss? 2. Identify back-end application dependency risks Once youâve analyzed your applicationsâ dependencies, youâll want to examine the quality of dependency execution. For example, is the dependency stable and predictable for each application or transaction youâve identified? To do this, youâll first need to gather as much information as you can about the applications from New Relic Insights, which helps you analyze data that is collected about the applications in more detail. Here is an example NRQL query to further analyze back-end service performance: SELECT count(appName)/30 as 'Throughput', apdex(duration), average(duration), stddev(duration), max(duration), count(error_type), uniquecount(host) FROM Transaction FACET appName SINCE 30 MINUTES AGO Copy This query shows you each applicationâs request per minute (throughput), Apdex score, and an overview of how the application is performing overall (through the standard deviation calculation, in which lower numbers are generally better). It also shows errors for the time period and the number of hosts on which the application is running. insights.newrelic.com > query results Next, gather information on incidents and events related to the services from New Relic Alerts: Click Alerts > Incidents > All Incidents. alerts.newrelic.com > Incidents > All Incidents Click Alerts > Events > All Events. alerts.newrelic.com > Incidents > All Events Tip Using webhooks to send alert events to New Relic Insights, allows you to supplement your dashboards with Alerts data. The process is outlined in this community discussion post. Here is a simplified example of the results of this exercise: Application Number of dependencies RPM Hosts APDEX (avg) Last outage TTR (hrs) Routing Service 10 983 4 .93 2/19/18 .75 Tower Austin 1 58 1 .95 10/11/17 1.5 Proxy-East 11 498 4 .92 1/4/18 .25 Proxy-West 11 495 4 .97 12/3/17 .25 WebPortal 7 396 8 .98 4/1/18 2.5 Supplement this data with the data that your teams know about your service and that you gathered from the dependency exercise in step 1, and use that data to develop hypotheses about the highest risk areas in your services that should be mitigated. 3. Identify front-end dependency risk Once youâve analyzed back-end dependencies, explore front-end dependencies. This is a critical step because as you walk higher up the stack and closer to the user, you will likely have more dependencies and abstractions. Service maps seamlessly integrate data from New Relic Browser and New Relic Mobile to help you understand the dependencies from front-end user interfaces to back-end services. one.newrelic.com > Service Maps Use the service map view to drill into front-end dependencies, and execute a similar exercise to the one you executed for back-end dependencies. This exercise will again expose data to help you identify risk areas you should address and optimize. We recommend that you conduct the analysis with user interface (UI) teams so that you can also gather a complementary qualitative understanding of what the UI teams consider critical based on their experience. A ranking from the UI teams of the most critical dependency is a useful output of this work. 4. Identify Microservice Dependencies If you are using microservices, you can have dozens, if not hundreds, of services that are calling each other. Use Distributed Tracing to see how all those services connect together and how your requests flow through those different services. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. A distributed trace is composed of multiple \"spans,\" which represent time spent in services or resources of those services. Click on the Distributed tracing menu in New Relic APM left nav. You can see âtrace listingâ view where youâll be able to quickly identify slow traces and traces with errors. The scatter plot lets you easily see outliers. Below that are the trace summaries, click on a trace to see details. Dive into distributed traces to see how long each span takes. Click into each span to see historical performance charts and associated attributes that layer in the context you need to understand and troubleshoot issues. one.newrelic.com > APM > (select an app) > Distributed tracing This rounds out your list of dependencies. 5. Create an action plan for risk mitigation Once youâve analyzed the dependencies across your application from both front-end and back-end services, create an action plan to reduce dependency risks and achieve your service level objectives (SLO). As you prioritize these next steps, we recommend you keep these four principles in mind: Understand your risk tolerance. Itâs helpful to have a clear picture of your tolerance for risk, which ideally should be informed by your service level objectives (refer to the Establish Objectives and Baselines tutorial for more information). Set an alert policy to monitor dependencies that youâve determined have a high relationship to SLO achievement. Minimize dependencies. The simpler you keep your code, the less functions you'll have referring to other modules. Removing unnecessary complexity is an important way to ensure you have a maintainable system that meets your customersâ expectations. Localize dependencies. For the code you write, package together functions that depend on each other whenever possible. Stabilize dependencies. When dependencies are unavoidable, mitigate risks by ensuring these dependencies point to modules that are the least likely to change or are easier to substitute. When your action plan is complete, monitor the results of the efforts. The efficacy of your actions to resolve dependency risks should ultimately be measured by your SLOs",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 340.2634,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>DevOps</em> procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. <em>New</em> <em>Relic</em> recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com &gt; Service Maps"
      },
      "id": "60440f13e7b9d2ec025799f0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/customer-experience-improvement-track-experience-indicators": [
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T07:31:06Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that theyâre consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs DevOps transformation. 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or âmarkerâ, on charts and graphs at the deployment eventâs timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When youâre satisfied with the applicationâs performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.50916,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-05-22T07:38:45Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your applicationâs performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your applicationâs architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the applicationâs environment searchable. Any convention you use should be unique to your organizationâs structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your applicationâs performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our applicationâs overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue youâre investigating. In this example, weâve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, itâs obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If youâre not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, itâs responsible for 99.9% of the app server time, which means weâre getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issuesâthe red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that itâs highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customersâwhich will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the ânorm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, itâs important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.4732,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    },
    {
      "sections": [
        "Resolve dependency risk: identify and analyze potential issues",
        "Prerequisites",
        "1. Analyze dependencies with service maps",
        "2. Identify back-end application dependency risks",
        "Tip",
        "3. Identify front-end dependency risk",
        "4. Identify Microservice Dependencies",
        "5. Create an action plan for risk mitigation"
      ],
      "title": "Resolve dependency risk: identify and analyze potential issues",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "4911ddf0c6fca572b52e22fbe464f21f0c6f338f",
      "image": "https://docs.newrelic.com/static/d1d4cf78d193ae770219cfdb9f6f792f/c1b63/distributed-trace_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues/",
      "published_at": "2021-05-22T06:11:07Z",
      "updated_at": "2021-05-15T22:15:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Successfully scaling DevOps requires a robust understanding of dependencies across application teams and related services. Use New Relics service maps to discover and mitigate risky dependencies from upstream and downstream services. Prerequisites This tutorial assumes youâve completed the previous DevOps procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. New Relic recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com > Service Maps > App/Service list This initial view shows all applications that are configured in your account. Applications that have violated a warning threshold are shown in yellow, and those with an active alert are shown in red. Healthy applications appear in green. New Relic uses a bold line to map applications to the services (such as databases) they connect to. Familiarize yourself with these maps to see how applications and their services fit together. Take note of which applications have the most dependencies and which rely on the same dependency, such as an API. Click an application to see high level metrics about that app, including throughput, response time, Apdex score, and error rate for the last 30 minutes. Tracking throughput is a good way to determine which of your applications are serving the most traffic. After looking at the architecture as a whole, review the applications that have the most dependencies. Select the App/Services list to see a full list of your applications. one.newrelic.com > Service Maps > App/Service list In this example, weâve chosen Tower-Chicago from the App/Services list. All of the traffic being sent to Tower-Chicago is coming from Proxy-East. In this case, Tower-Chicago is showing 48.3 requests per minute, or 11.3% of the 426 requests per minute flowing through Proxy-East. one.newrelic.com > Service Maps > App/Service list In most cases, the separate applications and services represented in service maps are created and maintained by separate teams. This exercise of walking through the dependencies of your architecture should involve representatives from each of those teams. Teams should work together to ask questions such as: How critical is this particular dependency? What would happen if it were to go down? What happened last time it went down? Was there a revenue loss? 2. Identify back-end application dependency risks Once youâve analyzed your applicationsâ dependencies, youâll want to examine the quality of dependency execution. For example, is the dependency stable and predictable for each application or transaction youâve identified? To do this, youâll first need to gather as much information as you can about the applications from New Relic Insights, which helps you analyze data that is collected about the applications in more detail. Here is an example NRQL query to further analyze back-end service performance: SELECT count(appName)/30 as 'Throughput', apdex(duration), average(duration), stddev(duration), max(duration), count(error_type), uniquecount(host) FROM Transaction FACET appName SINCE 30 MINUTES AGO Copy This query shows you each applicationâs request per minute (throughput), Apdex score, and an overview of how the application is performing overall (through the standard deviation calculation, in which lower numbers are generally better). It also shows errors for the time period and the number of hosts on which the application is running. insights.newrelic.com > query results Next, gather information on incidents and events related to the services from New Relic Alerts: Click Alerts > Incidents > All Incidents. alerts.newrelic.com > Incidents > All Incidents Click Alerts > Events > All Events. alerts.newrelic.com > Incidents > All Events Tip Using webhooks to send alert events to New Relic Insights, allows you to supplement your dashboards with Alerts data. The process is outlined in this community discussion post. Here is a simplified example of the results of this exercise: Application Number of dependencies RPM Hosts APDEX (avg) Last outage TTR (hrs) Routing Service 10 983 4 .93 2/19/18 .75 Tower Austin 1 58 1 .95 10/11/17 1.5 Proxy-East 11 498 4 .92 1/4/18 .25 Proxy-West 11 495 4 .97 12/3/17 .25 WebPortal 7 396 8 .98 4/1/18 2.5 Supplement this data with the data that your teams know about your service and that you gathered from the dependency exercise in step 1, and use that data to develop hypotheses about the highest risk areas in your services that should be mitigated. 3. Identify front-end dependency risk Once youâve analyzed back-end dependencies, explore front-end dependencies. This is a critical step because as you walk higher up the stack and closer to the user, you will likely have more dependencies and abstractions. Service maps seamlessly integrate data from New Relic Browser and New Relic Mobile to help you understand the dependencies from front-end user interfaces to back-end services. one.newrelic.com > Service Maps Use the service map view to drill into front-end dependencies, and execute a similar exercise to the one you executed for back-end dependencies. This exercise will again expose data to help you identify risk areas you should address and optimize. We recommend that you conduct the analysis with user interface (UI) teams so that you can also gather a complementary qualitative understanding of what the UI teams consider critical based on their experience. A ranking from the UI teams of the most critical dependency is a useful output of this work. 4. Identify Microservice Dependencies If you are using microservices, you can have dozens, if not hundreds, of services that are calling each other. Use Distributed Tracing to see how all those services connect together and how your requests flow through those different services. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. A distributed trace is composed of multiple \"spans,\" which represent time spent in services or resources of those services. Click on the Distributed tracing menu in New Relic APM left nav. You can see âtrace listingâ view where youâll be able to quickly identify slow traces and traces with errors. The scatter plot lets you easily see outliers. Below that are the trace summaries, click on a trace to see details. Dive into distributed traces to see how long each span takes. Click into each span to see historical performance charts and associated attributes that layer in the context you need to understand and troubleshoot issues. one.newrelic.com > APM > (select an app) > Distributed tracing This rounds out your list of dependencies. 5. Create an action plan for risk mitigation Once youâve analyzed the dependencies across your application from both front-end and back-end services, create an action plan to reduce dependency risks and achieve your service level objectives (SLO). As you prioritize these next steps, we recommend you keep these four principles in mind: Understand your risk tolerance. Itâs helpful to have a clear picture of your tolerance for risk, which ideally should be informed by your service level objectives (refer to the Establish Objectives and Baselines tutorial for more information). Set an alert policy to monitor dependencies that youâve determined have a high relationship to SLO achievement. Minimize dependencies. The simpler you keep your code, the less functions you'll have referring to other modules. Removing unnecessary complexity is an important way to ensure you have a maintainable system that meets your customersâ expectations. Localize dependencies. For the code you write, package together functions that depend on each other whenever possible. Stabilize dependencies. When dependencies are unavoidable, mitigate risks by ensuring these dependencies point to modules that are the least likely to change or are easier to substitute. When your action plan is complete, monitor the results of the efforts. The efficacy of your actions to resolve dependency risks should ultimately be measured by your SLOs",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 340.2634,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>DevOps</em> procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. <em>New</em> <em>Relic</em> recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com &gt; Service Maps"
      },
      "id": "60440f13e7b9d2ec025799f0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-objectives-baselines-define-team-slos": [
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T07:31:06Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that theyâre consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs DevOps transformation. 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or âmarkerâ, on charts and graphs at the deployment eventâs timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When youâre satisfied with the applicationâs performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.50903,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-05-22T07:38:45Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your applicationâs performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your applicationâs architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the applicationâs environment searchable. Any convention you use should be unique to your organizationâs structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your applicationâs performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our applicationâs overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue youâre investigating. In this example, weâve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, itâs obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If youâre not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, itâs responsible for 99.9% of the app server time, which means weâre getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issuesâthe red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that itâs highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customersâwhich will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the ânorm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, itâs important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.47308,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    },
    {
      "sections": [
        "Resolve dependency risk: identify and analyze potential issues",
        "Prerequisites",
        "1. Analyze dependencies with service maps",
        "2. Identify back-end application dependency risks",
        "Tip",
        "3. Identify front-end dependency risk",
        "4. Identify Microservice Dependencies",
        "5. Create an action plan for risk mitigation"
      ],
      "title": "Resolve dependency risk: identify and analyze potential issues",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "4911ddf0c6fca572b52e22fbe464f21f0c6f338f",
      "image": "https://docs.newrelic.com/static/d1d4cf78d193ae770219cfdb9f6f792f/c1b63/distributed-trace_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues/",
      "published_at": "2021-05-22T06:11:07Z",
      "updated_at": "2021-05-15T22:15:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Successfully scaling DevOps requires a robust understanding of dependencies across application teams and related services. Use New Relics service maps to discover and mitigate risky dependencies from upstream and downstream services. Prerequisites This tutorial assumes youâve completed the previous DevOps procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. New Relic recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com > Service Maps > App/Service list This initial view shows all applications that are configured in your account. Applications that have violated a warning threshold are shown in yellow, and those with an active alert are shown in red. Healthy applications appear in green. New Relic uses a bold line to map applications to the services (such as databases) they connect to. Familiarize yourself with these maps to see how applications and their services fit together. Take note of which applications have the most dependencies and which rely on the same dependency, such as an API. Click an application to see high level metrics about that app, including throughput, response time, Apdex score, and error rate for the last 30 minutes. Tracking throughput is a good way to determine which of your applications are serving the most traffic. After looking at the architecture as a whole, review the applications that have the most dependencies. Select the App/Services list to see a full list of your applications. one.newrelic.com > Service Maps > App/Service list In this example, weâve chosen Tower-Chicago from the App/Services list. All of the traffic being sent to Tower-Chicago is coming from Proxy-East. In this case, Tower-Chicago is showing 48.3 requests per minute, or 11.3% of the 426 requests per minute flowing through Proxy-East. one.newrelic.com > Service Maps > App/Service list In most cases, the separate applications and services represented in service maps are created and maintained by separate teams. This exercise of walking through the dependencies of your architecture should involve representatives from each of those teams. Teams should work together to ask questions such as: How critical is this particular dependency? What would happen if it were to go down? What happened last time it went down? Was there a revenue loss? 2. Identify back-end application dependency risks Once youâve analyzed your applicationsâ dependencies, youâll want to examine the quality of dependency execution. For example, is the dependency stable and predictable for each application or transaction youâve identified? To do this, youâll first need to gather as much information as you can about the applications from New Relic Insights, which helps you analyze data that is collected about the applications in more detail. Here is an example NRQL query to further analyze back-end service performance: SELECT count(appName)/30 as 'Throughput', apdex(duration), average(duration), stddev(duration), max(duration), count(error_type), uniquecount(host) FROM Transaction FACET appName SINCE 30 MINUTES AGO Copy This query shows you each applicationâs request per minute (throughput), Apdex score, and an overview of how the application is performing overall (through the standard deviation calculation, in which lower numbers are generally better). It also shows errors for the time period and the number of hosts on which the application is running. insights.newrelic.com > query results Next, gather information on incidents and events related to the services from New Relic Alerts: Click Alerts > Incidents > All Incidents. alerts.newrelic.com > Incidents > All Incidents Click Alerts > Events > All Events. alerts.newrelic.com > Incidents > All Events Tip Using webhooks to send alert events to New Relic Insights, allows you to supplement your dashboards with Alerts data. The process is outlined in this community discussion post. Here is a simplified example of the results of this exercise: Application Number of dependencies RPM Hosts APDEX (avg) Last outage TTR (hrs) Routing Service 10 983 4 .93 2/19/18 .75 Tower Austin 1 58 1 .95 10/11/17 1.5 Proxy-East 11 498 4 .92 1/4/18 .25 Proxy-West 11 495 4 .97 12/3/17 .25 WebPortal 7 396 8 .98 4/1/18 2.5 Supplement this data with the data that your teams know about your service and that you gathered from the dependency exercise in step 1, and use that data to develop hypotheses about the highest risk areas in your services that should be mitigated. 3. Identify front-end dependency risk Once youâve analyzed back-end dependencies, explore front-end dependencies. This is a critical step because as you walk higher up the stack and closer to the user, you will likely have more dependencies and abstractions. Service maps seamlessly integrate data from New Relic Browser and New Relic Mobile to help you understand the dependencies from front-end user interfaces to back-end services. one.newrelic.com > Service Maps Use the service map view to drill into front-end dependencies, and execute a similar exercise to the one you executed for back-end dependencies. This exercise will again expose data to help you identify risk areas you should address and optimize. We recommend that you conduct the analysis with user interface (UI) teams so that you can also gather a complementary qualitative understanding of what the UI teams consider critical based on their experience. A ranking from the UI teams of the most critical dependency is a useful output of this work. 4. Identify Microservice Dependencies If you are using microservices, you can have dozens, if not hundreds, of services that are calling each other. Use Distributed Tracing to see how all those services connect together and how your requests flow through those different services. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. A distributed trace is composed of multiple \"spans,\" which represent time spent in services or resources of those services. Click on the Distributed tracing menu in New Relic APM left nav. You can see âtrace listingâ view where youâll be able to quickly identify slow traces and traces with errors. The scatter plot lets you easily see outliers. Below that are the trace summaries, click on a trace to see details. Dive into distributed traces to see how long each span takes. Click into each span to see historical performance charts and associated attributes that layer in the context you need to understand and troubleshoot issues. one.newrelic.com > APM > (select an app) > Distributed tracing This rounds out your list of dependencies. 5. Create an action plan for risk mitigation Once youâve analyzed the dependencies across your application from both front-end and back-end services, create an action plan to reduce dependency risks and achieve your service level objectives (SLO). As you prioritize these next steps, we recommend you keep these four principles in mind: Understand your risk tolerance. Itâs helpful to have a clear picture of your tolerance for risk, which ideally should be informed by your service level objectives (refer to the Establish Objectives and Baselines tutorial for more information). Set an alert policy to monitor dependencies that youâve determined have a high relationship to SLO achievement. Minimize dependencies. The simpler you keep your code, the less functions you'll have referring to other modules. Removing unnecessary complexity is an important way to ensure you have a maintainable system that meets your customersâ expectations. Localize dependencies. For the code you write, package together functions that depend on each other whenever possible. Stabilize dependencies. When dependencies are unavoidable, mitigate risks by ensuring these dependencies point to modules that are the least likely to change or are easier to substitute. When your action plan is complete, monitor the results of the efforts. The efficacy of your actions to resolve dependency risks should ultimately be measured by your SLOs",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 340.2633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>DevOps</em> procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. <em>New</em> <em>Relic</em> recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com &gt; Service Maps"
      },
      "id": "60440f13e7b9d2ec025799f0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-team-dashboards-gather-visualize-key-metrics": [
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T07:31:06Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that theyâre consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs DevOps transformation. 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or âmarkerâ, on charts and graphs at the deployment eventâs timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When youâre satisfied with the applicationâs performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.50903,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-05-22T07:38:45Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your applicationâs performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your applicationâs architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the applicationâs environment searchable. Any convention you use should be unique to your organizationâs structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your applicationâs performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our applicationâs overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue youâre investigating. In this example, weâve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, itâs obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If youâre not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, itâs responsible for 99.9% of the app server time, which means weâre getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issuesâthe red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that itâs highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customersâwhich will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the ânorm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, itâs important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.47308,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    },
    {
      "sections": [
        "Resolve dependency risk: identify and analyze potential issues",
        "Prerequisites",
        "1. Analyze dependencies with service maps",
        "2. Identify back-end application dependency risks",
        "Tip",
        "3. Identify front-end dependency risk",
        "4. Identify Microservice Dependencies",
        "5. Create an action plan for risk mitigation"
      ],
      "title": "Resolve dependency risk: identify and analyze potential issues",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "4911ddf0c6fca572b52e22fbe464f21f0c6f338f",
      "image": "https://docs.newrelic.com/static/d1d4cf78d193ae770219cfdb9f6f792f/c1b63/distributed-trace_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues/",
      "published_at": "2021-05-22T06:11:07Z",
      "updated_at": "2021-05-15T22:15:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Successfully scaling DevOps requires a robust understanding of dependencies across application teams and related services. Use New Relics service maps to discover and mitigate risky dependencies from upstream and downstream services. Prerequisites This tutorial assumes youâve completed the previous DevOps procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. New Relic recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com > Service Maps > App/Service list This initial view shows all applications that are configured in your account. Applications that have violated a warning threshold are shown in yellow, and those with an active alert are shown in red. Healthy applications appear in green. New Relic uses a bold line to map applications to the services (such as databases) they connect to. Familiarize yourself with these maps to see how applications and their services fit together. Take note of which applications have the most dependencies and which rely on the same dependency, such as an API. Click an application to see high level metrics about that app, including throughput, response time, Apdex score, and error rate for the last 30 minutes. Tracking throughput is a good way to determine which of your applications are serving the most traffic. After looking at the architecture as a whole, review the applications that have the most dependencies. Select the App/Services list to see a full list of your applications. one.newrelic.com > Service Maps > App/Service list In this example, weâve chosen Tower-Chicago from the App/Services list. All of the traffic being sent to Tower-Chicago is coming from Proxy-East. In this case, Tower-Chicago is showing 48.3 requests per minute, or 11.3% of the 426 requests per minute flowing through Proxy-East. one.newrelic.com > Service Maps > App/Service list In most cases, the separate applications and services represented in service maps are created and maintained by separate teams. This exercise of walking through the dependencies of your architecture should involve representatives from each of those teams. Teams should work together to ask questions such as: How critical is this particular dependency? What would happen if it were to go down? What happened last time it went down? Was there a revenue loss? 2. Identify back-end application dependency risks Once youâve analyzed your applicationsâ dependencies, youâll want to examine the quality of dependency execution. For example, is the dependency stable and predictable for each application or transaction youâve identified? To do this, youâll first need to gather as much information as you can about the applications from New Relic Insights, which helps you analyze data that is collected about the applications in more detail. Here is an example NRQL query to further analyze back-end service performance: SELECT count(appName)/30 as 'Throughput', apdex(duration), average(duration), stddev(duration), max(duration), count(error_type), uniquecount(host) FROM Transaction FACET appName SINCE 30 MINUTES AGO Copy This query shows you each applicationâs request per minute (throughput), Apdex score, and an overview of how the application is performing overall (through the standard deviation calculation, in which lower numbers are generally better). It also shows errors for the time period and the number of hosts on which the application is running. insights.newrelic.com > query results Next, gather information on incidents and events related to the services from New Relic Alerts: Click Alerts > Incidents > All Incidents. alerts.newrelic.com > Incidents > All Incidents Click Alerts > Events > All Events. alerts.newrelic.com > Incidents > All Events Tip Using webhooks to send alert events to New Relic Insights, allows you to supplement your dashboards with Alerts data. The process is outlined in this community discussion post. Here is a simplified example of the results of this exercise: Application Number of dependencies RPM Hosts APDEX (avg) Last outage TTR (hrs) Routing Service 10 983 4 .93 2/19/18 .75 Tower Austin 1 58 1 .95 10/11/17 1.5 Proxy-East 11 498 4 .92 1/4/18 .25 Proxy-West 11 495 4 .97 12/3/17 .25 WebPortal 7 396 8 .98 4/1/18 2.5 Supplement this data with the data that your teams know about your service and that you gathered from the dependency exercise in step 1, and use that data to develop hypotheses about the highest risk areas in your services that should be mitigated. 3. Identify front-end dependency risk Once youâve analyzed back-end dependencies, explore front-end dependencies. This is a critical step because as you walk higher up the stack and closer to the user, you will likely have more dependencies and abstractions. Service maps seamlessly integrate data from New Relic Browser and New Relic Mobile to help you understand the dependencies from front-end user interfaces to back-end services. one.newrelic.com > Service Maps Use the service map view to drill into front-end dependencies, and execute a similar exercise to the one you executed for back-end dependencies. This exercise will again expose data to help you identify risk areas you should address and optimize. We recommend that you conduct the analysis with user interface (UI) teams so that you can also gather a complementary qualitative understanding of what the UI teams consider critical based on their experience. A ranking from the UI teams of the most critical dependency is a useful output of this work. 4. Identify Microservice Dependencies If you are using microservices, you can have dozens, if not hundreds, of services that are calling each other. Use Distributed Tracing to see how all those services connect together and how your requests flow through those different services. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. A distributed trace is composed of multiple \"spans,\" which represent time spent in services or resources of those services. Click on the Distributed tracing menu in New Relic APM left nav. You can see âtrace listingâ view where youâll be able to quickly identify slow traces and traces with errors. The scatter plot lets you easily see outliers. Below that are the trace summaries, click on a trace to see details. Dive into distributed traces to see how long each span takes. Click into each span to see historical performance charts and associated attributes that layer in the context you need to understand and troubleshoot issues. one.newrelic.com > APM > (select an app) > Distributed tracing This rounds out your list of dependencies. 5. Create an action plan for risk mitigation Once youâve analyzed the dependencies across your application from both front-end and back-end services, create an action plan to reduce dependency risks and achieve your service level objectives (SLO). As you prioritize these next steps, we recommend you keep these four principles in mind: Understand your risk tolerance. Itâs helpful to have a clear picture of your tolerance for risk, which ideally should be informed by your service level objectives (refer to the Establish Objectives and Baselines tutorial for more information). Set an alert policy to monitor dependencies that youâve determined have a high relationship to SLO achievement. Minimize dependencies. The simpler you keep your code, the less functions you'll have referring to other modules. Removing unnecessary complexity is an important way to ensure you have a maintainable system that meets your customersâ expectations. Localize dependencies. For the code you write, package together functions that depend on each other whenever possible. Stabilize dependencies. When dependencies are unavoidable, mitigate risks by ensuring these dependencies point to modules that are the least likely to change or are easier to substitute. When your action plan is complete, monitor the results of the efforts. The efficacy of your actions to resolve dependency risks should ultimately be measured by your SLOs",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 340.2633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>DevOps</em> procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. <em>New</em> <em>Relic</em> recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com &gt; Service Maps"
      },
      "id": "60440f13e7b9d2ec025799f0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/guide-measuring-devops-success": [
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T07:31:06Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that theyâre consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs DevOps transformation. 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or âmarkerâ, on charts and graphs at the deployment eventâs timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When youâre satisfied with the applicationâs performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.50894,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-05-22T07:38:45Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your applicationâs performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your applicationâs architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the applicationâs environment searchable. Any convention you use should be unique to your organizationâs structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your applicationâs performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our applicationâs overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue youâre investigating. In this example, weâve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, itâs obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If youâre not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, itâs responsible for 99.9% of the app server time, which means weâre getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issuesâthe red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that itâs highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customersâwhich will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the ânorm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, itâs important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.473,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    },
    {
      "sections": [
        "Resolve dependency risk: identify and analyze potential issues",
        "Prerequisites",
        "1. Analyze dependencies with service maps",
        "2. Identify back-end application dependency risks",
        "Tip",
        "3. Identify front-end dependency risk",
        "4. Identify Microservice Dependencies",
        "5. Create an action plan for risk mitigation"
      ],
      "title": "Resolve dependency risk: identify and analyze potential issues",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "4911ddf0c6fca572b52e22fbe464f21f0c6f338f",
      "image": "https://docs.newrelic.com/static/d1d4cf78d193ae770219cfdb9f6f792f/c1b63/distributed-trace_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues/",
      "published_at": "2021-05-22T06:11:07Z",
      "updated_at": "2021-05-15T22:15:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Successfully scaling DevOps requires a robust understanding of dependencies across application teams and related services. Use New Relics service maps to discover and mitigate risky dependencies from upstream and downstream services. Prerequisites This tutorial assumes youâve completed the previous DevOps procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. New Relic recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com > Service Maps > App/Service list This initial view shows all applications that are configured in your account. Applications that have violated a warning threshold are shown in yellow, and those with an active alert are shown in red. Healthy applications appear in green. New Relic uses a bold line to map applications to the services (such as databases) they connect to. Familiarize yourself with these maps to see how applications and their services fit together. Take note of which applications have the most dependencies and which rely on the same dependency, such as an API. Click an application to see high level metrics about that app, including throughput, response time, Apdex score, and error rate for the last 30 minutes. Tracking throughput is a good way to determine which of your applications are serving the most traffic. After looking at the architecture as a whole, review the applications that have the most dependencies. Select the App/Services list to see a full list of your applications. one.newrelic.com > Service Maps > App/Service list In this example, weâve chosen Tower-Chicago from the App/Services list. All of the traffic being sent to Tower-Chicago is coming from Proxy-East. In this case, Tower-Chicago is showing 48.3 requests per minute, or 11.3% of the 426 requests per minute flowing through Proxy-East. one.newrelic.com > Service Maps > App/Service list In most cases, the separate applications and services represented in service maps are created and maintained by separate teams. This exercise of walking through the dependencies of your architecture should involve representatives from each of those teams. Teams should work together to ask questions such as: How critical is this particular dependency? What would happen if it were to go down? What happened last time it went down? Was there a revenue loss? 2. Identify back-end application dependency risks Once youâve analyzed your applicationsâ dependencies, youâll want to examine the quality of dependency execution. For example, is the dependency stable and predictable for each application or transaction youâve identified? To do this, youâll first need to gather as much information as you can about the applications from New Relic Insights, which helps you analyze data that is collected about the applications in more detail. Here is an example NRQL query to further analyze back-end service performance: SELECT count(appName)/30 as 'Throughput', apdex(duration), average(duration), stddev(duration), max(duration), count(error_type), uniquecount(host) FROM Transaction FACET appName SINCE 30 MINUTES AGO Copy This query shows you each applicationâs request per minute (throughput), Apdex score, and an overview of how the application is performing overall (through the standard deviation calculation, in which lower numbers are generally better). It also shows errors for the time period and the number of hosts on which the application is running. insights.newrelic.com > query results Next, gather information on incidents and events related to the services from New Relic Alerts: Click Alerts > Incidents > All Incidents. alerts.newrelic.com > Incidents > All Incidents Click Alerts > Events > All Events. alerts.newrelic.com > Incidents > All Events Tip Using webhooks to send alert events to New Relic Insights, allows you to supplement your dashboards with Alerts data. The process is outlined in this community discussion post. Here is a simplified example of the results of this exercise: Application Number of dependencies RPM Hosts APDEX (avg) Last outage TTR (hrs) Routing Service 10 983 4 .93 2/19/18 .75 Tower Austin 1 58 1 .95 10/11/17 1.5 Proxy-East 11 498 4 .92 1/4/18 .25 Proxy-West 11 495 4 .97 12/3/17 .25 WebPortal 7 396 8 .98 4/1/18 2.5 Supplement this data with the data that your teams know about your service and that you gathered from the dependency exercise in step 1, and use that data to develop hypotheses about the highest risk areas in your services that should be mitigated. 3. Identify front-end dependency risk Once youâve analyzed back-end dependencies, explore front-end dependencies. This is a critical step because as you walk higher up the stack and closer to the user, you will likely have more dependencies and abstractions. Service maps seamlessly integrate data from New Relic Browser and New Relic Mobile to help you understand the dependencies from front-end user interfaces to back-end services. one.newrelic.com > Service Maps Use the service map view to drill into front-end dependencies, and execute a similar exercise to the one you executed for back-end dependencies. This exercise will again expose data to help you identify risk areas you should address and optimize. We recommend that you conduct the analysis with user interface (UI) teams so that you can also gather a complementary qualitative understanding of what the UI teams consider critical based on their experience. A ranking from the UI teams of the most critical dependency is a useful output of this work. 4. Identify Microservice Dependencies If you are using microservices, you can have dozens, if not hundreds, of services that are calling each other. Use Distributed Tracing to see how all those services connect together and how your requests flow through those different services. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. A distributed trace is composed of multiple \"spans,\" which represent time spent in services or resources of those services. Click on the Distributed tracing menu in New Relic APM left nav. You can see âtrace listingâ view where youâll be able to quickly identify slow traces and traces with errors. The scatter plot lets you easily see outliers. Below that are the trace summaries, click on a trace to see details. Dive into distributed traces to see how long each span takes. Click into each span to see historical performance charts and associated attributes that layer in the context you need to understand and troubleshoot issues. one.newrelic.com > APM > (select an app) > Distributed tracing This rounds out your list of dependencies. 5. Create an action plan for risk mitigation Once youâve analyzed the dependencies across your application from both front-end and back-end services, create an action plan to reduce dependency risks and achieve your service level objectives (SLO). As you prioritize these next steps, we recommend you keep these four principles in mind: Understand your risk tolerance. Itâs helpful to have a clear picture of your tolerance for risk, which ideally should be informed by your service level objectives (refer to the Establish Objectives and Baselines tutorial for more information). Set an alert policy to monitor dependencies that youâve determined have a high relationship to SLO achievement. Minimize dependencies. The simpler you keep your code, the less functions you'll have referring to other modules. Removing unnecessary complexity is an important way to ensure you have a maintainable system that meets your customersâ expectations. Localize dependencies. For the code you write, package together functions that depend on each other whenever possible. Stabilize dependencies. When dependencies are unavoidable, mitigate risks by ensuring these dependencies point to modules that are the least likely to change or are easier to substitute. When your action plan is complete, monitor the results of the efforts. The efficacy of your actions to resolve dependency risks should ultimately be measured by your SLOs",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 340.26318,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>DevOps</em> procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. <em>New</em> <em>Relic</em> recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com &gt; Service Maps"
      },
      "id": "60440f13e7b9d2ec025799f0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/incident-learning-retrospectives": [
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T07:31:06Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that theyâre consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs DevOps transformation. 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or âmarkerâ, on charts and graphs at the deployment eventâs timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When youâre satisfied with the applicationâs performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.50894,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-05-22T07:38:45Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your applicationâs performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your applicationâs architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the applicationâs environment searchable. Any convention you use should be unique to your organizationâs structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your applicationâs performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our applicationâs overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue youâre investigating. In this example, weâve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, itâs obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If youâre not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, itâs responsible for 99.9% of the app server time, which means weâre getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issuesâthe red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that itâs highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customersâwhich will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the ânorm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, itâs important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.473,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    },
    {
      "sections": [
        "Resolve dependency risk: identify and analyze potential issues",
        "Prerequisites",
        "1. Analyze dependencies with service maps",
        "2. Identify back-end application dependency risks",
        "Tip",
        "3. Identify front-end dependency risk",
        "4. Identify Microservice Dependencies",
        "5. Create an action plan for risk mitigation"
      ],
      "title": "Resolve dependency risk: identify and analyze potential issues",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "4911ddf0c6fca572b52e22fbe464f21f0c6f338f",
      "image": "https://docs.newrelic.com/static/d1d4cf78d193ae770219cfdb9f6f792f/c1b63/distributed-trace_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues/",
      "published_at": "2021-05-22T06:11:07Z",
      "updated_at": "2021-05-15T22:15:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Successfully scaling DevOps requires a robust understanding of dependencies across application teams and related services. Use New Relics service maps to discover and mitigate risky dependencies from upstream and downstream services. Prerequisites This tutorial assumes youâve completed the previous DevOps procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. New Relic recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com > Service Maps > App/Service list This initial view shows all applications that are configured in your account. Applications that have violated a warning threshold are shown in yellow, and those with an active alert are shown in red. Healthy applications appear in green. New Relic uses a bold line to map applications to the services (such as databases) they connect to. Familiarize yourself with these maps to see how applications and their services fit together. Take note of which applications have the most dependencies and which rely on the same dependency, such as an API. Click an application to see high level metrics about that app, including throughput, response time, Apdex score, and error rate for the last 30 minutes. Tracking throughput is a good way to determine which of your applications are serving the most traffic. After looking at the architecture as a whole, review the applications that have the most dependencies. Select the App/Services list to see a full list of your applications. one.newrelic.com > Service Maps > App/Service list In this example, weâve chosen Tower-Chicago from the App/Services list. All of the traffic being sent to Tower-Chicago is coming from Proxy-East. In this case, Tower-Chicago is showing 48.3 requests per minute, or 11.3% of the 426 requests per minute flowing through Proxy-East. one.newrelic.com > Service Maps > App/Service list In most cases, the separate applications and services represented in service maps are created and maintained by separate teams. This exercise of walking through the dependencies of your architecture should involve representatives from each of those teams. Teams should work together to ask questions such as: How critical is this particular dependency? What would happen if it were to go down? What happened last time it went down? Was there a revenue loss? 2. Identify back-end application dependency risks Once youâve analyzed your applicationsâ dependencies, youâll want to examine the quality of dependency execution. For example, is the dependency stable and predictable for each application or transaction youâve identified? To do this, youâll first need to gather as much information as you can about the applications from New Relic Insights, which helps you analyze data that is collected about the applications in more detail. Here is an example NRQL query to further analyze back-end service performance: SELECT count(appName)/30 as 'Throughput', apdex(duration), average(duration), stddev(duration), max(duration), count(error_type), uniquecount(host) FROM Transaction FACET appName SINCE 30 MINUTES AGO Copy This query shows you each applicationâs request per minute (throughput), Apdex score, and an overview of how the application is performing overall (through the standard deviation calculation, in which lower numbers are generally better). It also shows errors for the time period and the number of hosts on which the application is running. insights.newrelic.com > query results Next, gather information on incidents and events related to the services from New Relic Alerts: Click Alerts > Incidents > All Incidents. alerts.newrelic.com > Incidents > All Incidents Click Alerts > Events > All Events. alerts.newrelic.com > Incidents > All Events Tip Using webhooks to send alert events to New Relic Insights, allows you to supplement your dashboards with Alerts data. The process is outlined in this community discussion post. Here is a simplified example of the results of this exercise: Application Number of dependencies RPM Hosts APDEX (avg) Last outage TTR (hrs) Routing Service 10 983 4 .93 2/19/18 .75 Tower Austin 1 58 1 .95 10/11/17 1.5 Proxy-East 11 498 4 .92 1/4/18 .25 Proxy-West 11 495 4 .97 12/3/17 .25 WebPortal 7 396 8 .98 4/1/18 2.5 Supplement this data with the data that your teams know about your service and that you gathered from the dependency exercise in step 1, and use that data to develop hypotheses about the highest risk areas in your services that should be mitigated. 3. Identify front-end dependency risk Once youâve analyzed back-end dependencies, explore front-end dependencies. This is a critical step because as you walk higher up the stack and closer to the user, you will likely have more dependencies and abstractions. Service maps seamlessly integrate data from New Relic Browser and New Relic Mobile to help you understand the dependencies from front-end user interfaces to back-end services. one.newrelic.com > Service Maps Use the service map view to drill into front-end dependencies, and execute a similar exercise to the one you executed for back-end dependencies. This exercise will again expose data to help you identify risk areas you should address and optimize. We recommend that you conduct the analysis with user interface (UI) teams so that you can also gather a complementary qualitative understanding of what the UI teams consider critical based on their experience. A ranking from the UI teams of the most critical dependency is a useful output of this work. 4. Identify Microservice Dependencies If you are using microservices, you can have dozens, if not hundreds, of services that are calling each other. Use Distributed Tracing to see how all those services connect together and how your requests flow through those different services. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. A distributed trace is composed of multiple \"spans,\" which represent time spent in services or resources of those services. Click on the Distributed tracing menu in New Relic APM left nav. You can see âtrace listingâ view where youâll be able to quickly identify slow traces and traces with errors. The scatter plot lets you easily see outliers. Below that are the trace summaries, click on a trace to see details. Dive into distributed traces to see how long each span takes. Click into each span to see historical performance charts and associated attributes that layer in the context you need to understand and troubleshoot issues. one.newrelic.com > APM > (select an app) > Distributed tracing This rounds out your list of dependencies. 5. Create an action plan for risk mitigation Once youâve analyzed the dependencies across your application from both front-end and back-end services, create an action plan to reduce dependency risks and achieve your service level objectives (SLO). As you prioritize these next steps, we recommend you keep these four principles in mind: Understand your risk tolerance. Itâs helpful to have a clear picture of your tolerance for risk, which ideally should be informed by your service level objectives (refer to the Establish Objectives and Baselines tutorial for more information). Set an alert policy to monitor dependencies that youâve determined have a high relationship to SLO achievement. Minimize dependencies. The simpler you keep your code, the less functions you'll have referring to other modules. Removing unnecessary complexity is an important way to ensure you have a maintainable system that meets your customersâ expectations. Localize dependencies. For the code you write, package together functions that depend on each other whenever possible. Stabilize dependencies. When dependencies are unavoidable, mitigate risks by ensuring these dependencies point to modules that are the least likely to change or are easier to substitute. When your action plan is complete, monitor the results of the efforts. The efficacy of your actions to resolve dependency risks should ultimately be measured by your SLOs",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 340.26318,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>DevOps</em> procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. <em>New</em> <em>Relic</em> recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com &gt; Service Maps"
      },
      "id": "60440f13e7b9d2ec025799f0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/incident-orchestration-align-teams-tools-processes": [
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T07:31:06Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that theyâre consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs DevOps transformation. 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or âmarkerâ, on charts and graphs at the deployment eventâs timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When youâre satisfied with the applicationâs performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.50885,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-05-22T07:38:45Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your applicationâs performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your applicationâs architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the applicationâs environment searchable. Any convention you use should be unique to your organizationâs structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your applicationâs performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our applicationâs overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue youâre investigating. In this example, weâve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, itâs obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If youâre not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, itâs responsible for 99.9% of the app server time, which means weâre getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issuesâthe red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that itâs highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customersâwhich will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the ânorm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, itâs important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.4729,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    },
    {
      "sections": [
        "Resolve dependency risk: identify and analyze potential issues",
        "Prerequisites",
        "1. Analyze dependencies with service maps",
        "2. Identify back-end application dependency risks",
        "Tip",
        "3. Identify front-end dependency risk",
        "4. Identify Microservice Dependencies",
        "5. Create an action plan for risk mitigation"
      ],
      "title": "Resolve dependency risk: identify and analyze potential issues",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "4911ddf0c6fca572b52e22fbe464f21f0c6f338f",
      "image": "https://docs.newrelic.com/static/d1d4cf78d193ae770219cfdb9f6f792f/c1b63/distributed-trace_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues/",
      "published_at": "2021-05-22T06:11:07Z",
      "updated_at": "2021-05-15T22:15:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Successfully scaling DevOps requires a robust understanding of dependencies across application teams and related services. Use New Relics service maps to discover and mitigate risky dependencies from upstream and downstream services. Prerequisites This tutorial assumes youâve completed the previous DevOps procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. New Relic recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com > Service Maps > App/Service list This initial view shows all applications that are configured in your account. Applications that have violated a warning threshold are shown in yellow, and those with an active alert are shown in red. Healthy applications appear in green. New Relic uses a bold line to map applications to the services (such as databases) they connect to. Familiarize yourself with these maps to see how applications and their services fit together. Take note of which applications have the most dependencies and which rely on the same dependency, such as an API. Click an application to see high level metrics about that app, including throughput, response time, Apdex score, and error rate for the last 30 minutes. Tracking throughput is a good way to determine which of your applications are serving the most traffic. After looking at the architecture as a whole, review the applications that have the most dependencies. Select the App/Services list to see a full list of your applications. one.newrelic.com > Service Maps > App/Service list In this example, weâve chosen Tower-Chicago from the App/Services list. All of the traffic being sent to Tower-Chicago is coming from Proxy-East. In this case, Tower-Chicago is showing 48.3 requests per minute, or 11.3% of the 426 requests per minute flowing through Proxy-East. one.newrelic.com > Service Maps > App/Service list In most cases, the separate applications and services represented in service maps are created and maintained by separate teams. This exercise of walking through the dependencies of your architecture should involve representatives from each of those teams. Teams should work together to ask questions such as: How critical is this particular dependency? What would happen if it were to go down? What happened last time it went down? Was there a revenue loss? 2. Identify back-end application dependency risks Once youâve analyzed your applicationsâ dependencies, youâll want to examine the quality of dependency execution. For example, is the dependency stable and predictable for each application or transaction youâve identified? To do this, youâll first need to gather as much information as you can about the applications from New Relic Insights, which helps you analyze data that is collected about the applications in more detail. Here is an example NRQL query to further analyze back-end service performance: SELECT count(appName)/30 as 'Throughput', apdex(duration), average(duration), stddev(duration), max(duration), count(error_type), uniquecount(host) FROM Transaction FACET appName SINCE 30 MINUTES AGO Copy This query shows you each applicationâs request per minute (throughput), Apdex score, and an overview of how the application is performing overall (through the standard deviation calculation, in which lower numbers are generally better). It also shows errors for the time period and the number of hosts on which the application is running. insights.newrelic.com > query results Next, gather information on incidents and events related to the services from New Relic Alerts: Click Alerts > Incidents > All Incidents. alerts.newrelic.com > Incidents > All Incidents Click Alerts > Events > All Events. alerts.newrelic.com > Incidents > All Events Tip Using webhooks to send alert events to New Relic Insights, allows you to supplement your dashboards with Alerts data. The process is outlined in this community discussion post. Here is a simplified example of the results of this exercise: Application Number of dependencies RPM Hosts APDEX (avg) Last outage TTR (hrs) Routing Service 10 983 4 .93 2/19/18 .75 Tower Austin 1 58 1 .95 10/11/17 1.5 Proxy-East 11 498 4 .92 1/4/18 .25 Proxy-West 11 495 4 .97 12/3/17 .25 WebPortal 7 396 8 .98 4/1/18 2.5 Supplement this data with the data that your teams know about your service and that you gathered from the dependency exercise in step 1, and use that data to develop hypotheses about the highest risk areas in your services that should be mitigated. 3. Identify front-end dependency risk Once youâve analyzed back-end dependencies, explore front-end dependencies. This is a critical step because as you walk higher up the stack and closer to the user, you will likely have more dependencies and abstractions. Service maps seamlessly integrate data from New Relic Browser and New Relic Mobile to help you understand the dependencies from front-end user interfaces to back-end services. one.newrelic.com > Service Maps Use the service map view to drill into front-end dependencies, and execute a similar exercise to the one you executed for back-end dependencies. This exercise will again expose data to help you identify risk areas you should address and optimize. We recommend that you conduct the analysis with user interface (UI) teams so that you can also gather a complementary qualitative understanding of what the UI teams consider critical based on their experience. A ranking from the UI teams of the most critical dependency is a useful output of this work. 4. Identify Microservice Dependencies If you are using microservices, you can have dozens, if not hundreds, of services that are calling each other. Use Distributed Tracing to see how all those services connect together and how your requests flow through those different services. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. A distributed trace is composed of multiple \"spans,\" which represent time spent in services or resources of those services. Click on the Distributed tracing menu in New Relic APM left nav. You can see âtrace listingâ view where youâll be able to quickly identify slow traces and traces with errors. The scatter plot lets you easily see outliers. Below that are the trace summaries, click on a trace to see details. Dive into distributed traces to see how long each span takes. Click into each span to see historical performance charts and associated attributes that layer in the context you need to understand and troubleshoot issues. one.newrelic.com > APM > (select an app) > Distributed tracing This rounds out your list of dependencies. 5. Create an action plan for risk mitigation Once youâve analyzed the dependencies across your application from both front-end and back-end services, create an action plan to reduce dependency risks and achieve your service level objectives (SLO). As you prioritize these next steps, we recommend you keep these four principles in mind: Understand your risk tolerance. Itâs helpful to have a clear picture of your tolerance for risk, which ideally should be informed by your service level objectives (refer to the Establish Objectives and Baselines tutorial for more information). Set an alert policy to monitor dependencies that youâve determined have a high relationship to SLO achievement. Minimize dependencies. The simpler you keep your code, the less functions you'll have referring to other modules. Removing unnecessary complexity is an important way to ensure you have a maintainable system that meets your customersâ expectations. Localize dependencies. For the code you write, package together functions that depend on each other whenever possible. Stabilize dependencies. When dependencies are unavoidable, mitigate risks by ensuring these dependencies point to modules that are the least likely to change or are easier to substitute. When your action plan is complete, monitor the results of the efforts. The efficacy of your actions to resolve dependency risks should ultimately be measured by your SLOs",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 340.26306,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>DevOps</em> procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. <em>New</em> <em>Relic</em> recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com &gt; Service Maps"
      },
      "id": "60440f13e7b9d2ec025799f0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/infrastructure-resource-sizing-analyze-operation-metrics": [
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T07:31:06Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that theyâre consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs DevOps transformation. 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or âmarkerâ, on charts and graphs at the deployment eventâs timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When youâre satisfied with the applicationâs performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.50885,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-05-22T07:38:45Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your applicationâs performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your applicationâs architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the applicationâs environment searchable. Any convention you use should be unique to your organizationâs structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your applicationâs performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our applicationâs overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue youâre investigating. In this example, weâve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, itâs obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If youâre not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, itâs responsible for 99.9% of the app server time, which means weâre getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issuesâthe red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that itâs highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customersâwhich will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the ânorm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, itâs important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.4729,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    },
    {
      "sections": [
        "Resolve dependency risk: identify and analyze potential issues",
        "Prerequisites",
        "1. Analyze dependencies with service maps",
        "2. Identify back-end application dependency risks",
        "Tip",
        "3. Identify front-end dependency risk",
        "4. Identify Microservice Dependencies",
        "5. Create an action plan for risk mitigation"
      ],
      "title": "Resolve dependency risk: identify and analyze potential issues",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "4911ddf0c6fca572b52e22fbe464f21f0c6f338f",
      "image": "https://docs.newrelic.com/static/d1d4cf78d193ae770219cfdb9f6f792f/c1b63/distributed-trace_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues/",
      "published_at": "2021-05-22T06:11:07Z",
      "updated_at": "2021-05-15T22:15:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Successfully scaling DevOps requires a robust understanding of dependencies across application teams and related services. Use New Relics service maps to discover and mitigate risky dependencies from upstream and downstream services. Prerequisites This tutorial assumes youâve completed the previous DevOps procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. New Relic recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com > Service Maps > App/Service list This initial view shows all applications that are configured in your account. Applications that have violated a warning threshold are shown in yellow, and those with an active alert are shown in red. Healthy applications appear in green. New Relic uses a bold line to map applications to the services (such as databases) they connect to. Familiarize yourself with these maps to see how applications and their services fit together. Take note of which applications have the most dependencies and which rely on the same dependency, such as an API. Click an application to see high level metrics about that app, including throughput, response time, Apdex score, and error rate for the last 30 minutes. Tracking throughput is a good way to determine which of your applications are serving the most traffic. After looking at the architecture as a whole, review the applications that have the most dependencies. Select the App/Services list to see a full list of your applications. one.newrelic.com > Service Maps > App/Service list In this example, weâve chosen Tower-Chicago from the App/Services list. All of the traffic being sent to Tower-Chicago is coming from Proxy-East. In this case, Tower-Chicago is showing 48.3 requests per minute, or 11.3% of the 426 requests per minute flowing through Proxy-East. one.newrelic.com > Service Maps > App/Service list In most cases, the separate applications and services represented in service maps are created and maintained by separate teams. This exercise of walking through the dependencies of your architecture should involve representatives from each of those teams. Teams should work together to ask questions such as: How critical is this particular dependency? What would happen if it were to go down? What happened last time it went down? Was there a revenue loss? 2. Identify back-end application dependency risks Once youâve analyzed your applicationsâ dependencies, youâll want to examine the quality of dependency execution. For example, is the dependency stable and predictable for each application or transaction youâve identified? To do this, youâll first need to gather as much information as you can about the applications from New Relic Insights, which helps you analyze data that is collected about the applications in more detail. Here is an example NRQL query to further analyze back-end service performance: SELECT count(appName)/30 as 'Throughput', apdex(duration), average(duration), stddev(duration), max(duration), count(error_type), uniquecount(host) FROM Transaction FACET appName SINCE 30 MINUTES AGO Copy This query shows you each applicationâs request per minute (throughput), Apdex score, and an overview of how the application is performing overall (through the standard deviation calculation, in which lower numbers are generally better). It also shows errors for the time period and the number of hosts on which the application is running. insights.newrelic.com > query results Next, gather information on incidents and events related to the services from New Relic Alerts: Click Alerts > Incidents > All Incidents. alerts.newrelic.com > Incidents > All Incidents Click Alerts > Events > All Events. alerts.newrelic.com > Incidents > All Events Tip Using webhooks to send alert events to New Relic Insights, allows you to supplement your dashboards with Alerts data. The process is outlined in this community discussion post. Here is a simplified example of the results of this exercise: Application Number of dependencies RPM Hosts APDEX (avg) Last outage TTR (hrs) Routing Service 10 983 4 .93 2/19/18 .75 Tower Austin 1 58 1 .95 10/11/17 1.5 Proxy-East 11 498 4 .92 1/4/18 .25 Proxy-West 11 495 4 .97 12/3/17 .25 WebPortal 7 396 8 .98 4/1/18 2.5 Supplement this data with the data that your teams know about your service and that you gathered from the dependency exercise in step 1, and use that data to develop hypotheses about the highest risk areas in your services that should be mitigated. 3. Identify front-end dependency risk Once youâve analyzed back-end dependencies, explore front-end dependencies. This is a critical step because as you walk higher up the stack and closer to the user, you will likely have more dependencies and abstractions. Service maps seamlessly integrate data from New Relic Browser and New Relic Mobile to help you understand the dependencies from front-end user interfaces to back-end services. one.newrelic.com > Service Maps Use the service map view to drill into front-end dependencies, and execute a similar exercise to the one you executed for back-end dependencies. This exercise will again expose data to help you identify risk areas you should address and optimize. We recommend that you conduct the analysis with user interface (UI) teams so that you can also gather a complementary qualitative understanding of what the UI teams consider critical based on their experience. A ranking from the UI teams of the most critical dependency is a useful output of this work. 4. Identify Microservice Dependencies If you are using microservices, you can have dozens, if not hundreds, of services that are calling each other. Use Distributed Tracing to see how all those services connect together and how your requests flow through those different services. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. A distributed trace is composed of multiple \"spans,\" which represent time spent in services or resources of those services. Click on the Distributed tracing menu in New Relic APM left nav. You can see âtrace listingâ view where youâll be able to quickly identify slow traces and traces with errors. The scatter plot lets you easily see outliers. Below that are the trace summaries, click on a trace to see details. Dive into distributed traces to see how long each span takes. Click into each span to see historical performance charts and associated attributes that layer in the context you need to understand and troubleshoot issues. one.newrelic.com > APM > (select an app) > Distributed tracing This rounds out your list of dependencies. 5. Create an action plan for risk mitigation Once youâve analyzed the dependencies across your application from both front-end and back-end services, create an action plan to reduce dependency risks and achieve your service level objectives (SLO). As you prioritize these next steps, we recommend you keep these four principles in mind: Understand your risk tolerance. Itâs helpful to have a clear picture of your tolerance for risk, which ideally should be informed by your service level objectives (refer to the Establish Objectives and Baselines tutorial for more information). Set an alert policy to monitor dependencies that youâve determined have a high relationship to SLO achievement. Minimize dependencies. The simpler you keep your code, the less functions you'll have referring to other modules. Removing unnecessary complexity is an important way to ensure you have a maintainable system that meets your customersâ expectations. Localize dependencies. For the code you write, package together functions that depend on each other whenever possible. Stabilize dependencies. When dependencies are unavoidable, mitigate risks by ensuring these dependencies point to modules that are the least likely to change or are easier to substitute. When your action plan is complete, monitor the results of the efforts. The efficacy of your actions to resolve dependency risks should ultimately be measured by your SLOs",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 340.26306,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>DevOps</em> procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. <em>New</em> <em>Relic</em> recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com &gt; Service Maps"
      },
      "id": "60440f13e7b9d2ec025799f0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments": [
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-05-22T07:38:45Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your applicationâs performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your applicationâs architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the applicationâs environment searchable. Any convention you use should be unique to your organizationâs structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your applicationâs performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our applicationâs overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue youâre investigating. In this example, weâve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, itâs obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If youâre not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, itâs responsible for 99.9% of the app server time, which means weâre getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issuesâthe red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that itâs highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customersâwhich will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the ânorm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, itâs important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.47278,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    },
    {
      "sections": [
        "Resolve dependency risk: identify and analyze potential issues",
        "Prerequisites",
        "1. Analyze dependencies with service maps",
        "2. Identify back-end application dependency risks",
        "Tip",
        "3. Identify front-end dependency risk",
        "4. Identify Microservice Dependencies",
        "5. Create an action plan for risk mitigation"
      ],
      "title": "Resolve dependency risk: identify and analyze potential issues",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "4911ddf0c6fca572b52e22fbe464f21f0c6f338f",
      "image": "https://docs.newrelic.com/static/d1d4cf78d193ae770219cfdb9f6f792f/c1b63/distributed-trace_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues/",
      "published_at": "2021-05-22T06:11:07Z",
      "updated_at": "2021-05-15T22:15:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Successfully scaling DevOps requires a robust understanding of dependencies across application teams and related services. Use New Relics service maps to discover and mitigate risky dependencies from upstream and downstream services. Prerequisites This tutorial assumes youâve completed the previous DevOps procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. New Relic recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com > Service Maps > App/Service list This initial view shows all applications that are configured in your account. Applications that have violated a warning threshold are shown in yellow, and those with an active alert are shown in red. Healthy applications appear in green. New Relic uses a bold line to map applications to the services (such as databases) they connect to. Familiarize yourself with these maps to see how applications and their services fit together. Take note of which applications have the most dependencies and which rely on the same dependency, such as an API. Click an application to see high level metrics about that app, including throughput, response time, Apdex score, and error rate for the last 30 minutes. Tracking throughput is a good way to determine which of your applications are serving the most traffic. After looking at the architecture as a whole, review the applications that have the most dependencies. Select the App/Services list to see a full list of your applications. one.newrelic.com > Service Maps > App/Service list In this example, weâve chosen Tower-Chicago from the App/Services list. All of the traffic being sent to Tower-Chicago is coming from Proxy-East. In this case, Tower-Chicago is showing 48.3 requests per minute, or 11.3% of the 426 requests per minute flowing through Proxy-East. one.newrelic.com > Service Maps > App/Service list In most cases, the separate applications and services represented in service maps are created and maintained by separate teams. This exercise of walking through the dependencies of your architecture should involve representatives from each of those teams. Teams should work together to ask questions such as: How critical is this particular dependency? What would happen if it were to go down? What happened last time it went down? Was there a revenue loss? 2. Identify back-end application dependency risks Once youâve analyzed your applicationsâ dependencies, youâll want to examine the quality of dependency execution. For example, is the dependency stable and predictable for each application or transaction youâve identified? To do this, youâll first need to gather as much information as you can about the applications from New Relic Insights, which helps you analyze data that is collected about the applications in more detail. Here is an example NRQL query to further analyze back-end service performance: SELECT count(appName)/30 as 'Throughput', apdex(duration), average(duration), stddev(duration), max(duration), count(error_type), uniquecount(host) FROM Transaction FACET appName SINCE 30 MINUTES AGO Copy This query shows you each applicationâs request per minute (throughput), Apdex score, and an overview of how the application is performing overall (through the standard deviation calculation, in which lower numbers are generally better). It also shows errors for the time period and the number of hosts on which the application is running. insights.newrelic.com > query results Next, gather information on incidents and events related to the services from New Relic Alerts: Click Alerts > Incidents > All Incidents. alerts.newrelic.com > Incidents > All Incidents Click Alerts > Events > All Events. alerts.newrelic.com > Incidents > All Events Tip Using webhooks to send alert events to New Relic Insights, allows you to supplement your dashboards with Alerts data. The process is outlined in this community discussion post. Here is a simplified example of the results of this exercise: Application Number of dependencies RPM Hosts APDEX (avg) Last outage TTR (hrs) Routing Service 10 983 4 .93 2/19/18 .75 Tower Austin 1 58 1 .95 10/11/17 1.5 Proxy-East 11 498 4 .92 1/4/18 .25 Proxy-West 11 495 4 .97 12/3/17 .25 WebPortal 7 396 8 .98 4/1/18 2.5 Supplement this data with the data that your teams know about your service and that you gathered from the dependency exercise in step 1, and use that data to develop hypotheses about the highest risk areas in your services that should be mitigated. 3. Identify front-end dependency risk Once youâve analyzed back-end dependencies, explore front-end dependencies. This is a critical step because as you walk higher up the stack and closer to the user, you will likely have more dependencies and abstractions. Service maps seamlessly integrate data from New Relic Browser and New Relic Mobile to help you understand the dependencies from front-end user interfaces to back-end services. one.newrelic.com > Service Maps Use the service map view to drill into front-end dependencies, and execute a similar exercise to the one you executed for back-end dependencies. This exercise will again expose data to help you identify risk areas you should address and optimize. We recommend that you conduct the analysis with user interface (UI) teams so that you can also gather a complementary qualitative understanding of what the UI teams consider critical based on their experience. A ranking from the UI teams of the most critical dependency is a useful output of this work. 4. Identify Microservice Dependencies If you are using microservices, you can have dozens, if not hundreds, of services that are calling each other. Use Distributed Tracing to see how all those services connect together and how your requests flow through those different services. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. A distributed trace is composed of multiple \"spans,\" which represent time spent in services or resources of those services. Click on the Distributed tracing menu in New Relic APM left nav. You can see âtrace listingâ view where youâll be able to quickly identify slow traces and traces with errors. The scatter plot lets you easily see outliers. Below that are the trace summaries, click on a trace to see details. Dive into distributed traces to see how long each span takes. Click into each span to see historical performance charts and associated attributes that layer in the context you need to understand and troubleshoot issues. one.newrelic.com > APM > (select an app) > Distributed tracing This rounds out your list of dependencies. 5. Create an action plan for risk mitigation Once youâve analyzed the dependencies across your application from both front-end and back-end services, create an action plan to reduce dependency risks and achieve your service level objectives (SLO). As you prioritize these next steps, we recommend you keep these four principles in mind: Understand your risk tolerance. Itâs helpful to have a clear picture of your tolerance for risk, which ideally should be informed by your service level objectives (refer to the Establish Objectives and Baselines tutorial for more information). Set an alert policy to monitor dependencies that youâve determined have a high relationship to SLO achievement. Minimize dependencies. The simpler you keep your code, the less functions you'll have referring to other modules. Removing unnecessary complexity is an important way to ensure you have a maintainable system that meets your customersâ expectations. Localize dependencies. For the code you write, package together functions that depend on each other whenever possible. Stabilize dependencies. When dependencies are unavoidable, mitigate risks by ensuring these dependencies point to modules that are the least likely to change or are easier to substitute. When your action plan is complete, monitor the results of the efforts. The efficacy of your actions to resolve dependency risks should ultimately be measured by your SLOs",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 340.26297,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>DevOps</em> procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. <em>New</em> <em>Relic</em> recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com &gt; Service Maps"
      },
      "id": "60440f13e7b9d2ec025799f0"
    },
    {
      "sections": [
        "Incident learning: Retrospectives",
        "Prerequisites",
        "1. Establish a post-mortem process",
        "2. Don't over-research",
        "3. Tune your monitoring",
        "4. Create an incident repository",
        "Outcomes",
        "For more help"
      ],
      "title": "Incident learning: Retrospectives",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "683e9d7afbd81c80d511401e194bb0ecc2ef68ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/incident-learning-retrospectives/",
      "published_at": "2021-05-22T07:29:44Z",
      "updated_at": "2021-03-16T10:56:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Equip teams to learn from incidents and stop recycling problems. You may have heard the term blameless post-mortems; hereâs how and why to get there. Create a process for learning from problems that enables the organization to improve existing KPIs and incident response patterns and to adapt when new challenges surface. The goal is to learn first, then fix. Yes, you have had an outage, but you now have everyone's attention. Take advantage of it. Prerequisites Before starting this tutorial, be sure to complete these New Relic tutorials: Establish objectives and baselines Incident orchestration 1. Establish a post-mortem process The goal is to identify technical, organizational, and process follow-up actions after each notable incident. We've found more success by focusing on what happened, rather than who did what. Ask questions like: How were we notified about the problem? Could we have discovered the problem sooner? Was the information we needed to resolve the incident easily accessible? Where did we have humans doing work where computers should have done it? Read more at How and why to hold blameless retrospectives. Ideally, this process should be the same across teams. Create a document that includes: The triggering event. Contributing factors that lead to the incident. A chronology and summary of remediation steps and their result (be sure to include what went right; these are actions/processes you don't want to lose in the future). A measure of the impact to the business in terms of user experience and financial losses, if possible. Recommendations for system or feature improvements to prevent a recurrence. Recommendations for process and communication improvements. Owners of post-retro actions. No root cause? Why is root cause not included in this postmortem report? Root cause implies that it's both possible and useful to find a single cause for an outcome in a complex system. The notion is seductive because we want simple, actionable explanations, but current systems are too complex for simple answers. It is harmful because it tricks us into going down one narrow path of options instead of exploring the different paths available, some of which might be much more important and impactful if we broadened our thinking. Example postmortem report Comments Date March 1, 2018 Executive summary From approximately 1:45PM until 2:30PM, users could not add items to their carts, which prevented any checkouts from occurring during the incident period. Triggering event We determined that a change was made to the CSS rules on the product detail page that effectively disabled the Add to cart button. Timeline 1:50PM: Successful checkouts < 10 for 5 minutes alert triggered; assigned to Alice. 1:55PM: After reviewing the e-commerce team dashboard, Alice determined that the threshold was breached immediately following a deploy by Bob. She notified him of the incident. 2:00PM: Alice and Bob began troubleshooting. Attempts at recreating the issue in production were successful. 2:20PM: Bob determined that his change to the CSS on the product detail page disabled the Add to cart button. He deployed a hotfix. 2:30PM: Functionality was restored and the incident was resolved. Impact No checkouts were completed during the duration of the incident. Our typical revenue for a Thursday during this timeframe is $30,000. Recommendations We have been discussing implementing New Relic Synthetics for a while now. If we had a synthetic check on the checkout process, this issue would have been detected immediately. We should also implement more thorough unit tests in the front-end web app. Next Steps Alice will implement synthetic checks next sprint. Ravi's team will investigate creating more unit tests. At first, your retros will generate obvious follow-ups, like fixing permissions and access, missing instrumentation, or a need to tune certain alerts. Over time, your retros will reveal larger followupsâwe call them interventions. Before you rush to implement interventions (such as switching from using GUIDs to integers), take time to map out the impact of these changes. By making a major change, you may ensure the previous incident does not occur, but what other problems are you introducing or risking? Not every incident requires preventative action. It is reasonable to accept a certain level of risk and mitigate the impact. 2. Don't over-research Establish guidelines for which incidents require in-depth analysis to prevent diminishing returns from too much overhead. If you had a hardware failure and replace the hardware, you are probably done. If an incident has so much complexity (or emotional heat) that you may never get to clear follow-up actions, you can choose to not do a formal review. Rather, have a meeting and an open discussion of events. Take notes, but you don't need to create a retro report. 3. Tune your monitoring Audit monitoring and alerting after major incidents to tune KPIs and thresholds, improve time to detection, and reduce alert noise. Review the set proactive alerts pattern. Groom your alerts by: Measuring the frequency of pages on your teams. Maintaining policy hygiene. Little things, like using a consistent naming structure, make a big difference. Tune alerts as performance improves Leverage AI to fine tune alerts: Train your system to obtain the most accurate incident correlation. Use muting rules to silence alerts you don't need. Set alerts on system-detected anomalies. Creating runbooks for your conditions. Runbooks for alerts should include: A description of why the alert was created. What the alert is monitoring. What that alert indicates about the state of your system. Initial steps for an on-call engineer to begin triage. Learn more about grooming and tuning your alerts. 4. Create an incident repository Create a centralized, searchable repository of incident post-mortem documents and other incident artifacts, providing the organization with access to lessons learned. A small number of people in your org will probably access these. But get good enough at creating these reports and you can begin to automate the use of this information. Outcomes As you continue to harvest information from your incidents, you should begin to get better SLO compliance, fewer high-severity incidents, improved developer satisfaction, and lower employee turnover rate. For more help Explore the New Relic platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.38054,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>new</em> challenges surface. The goal is to learn first, then fix. Yes, you have had an outage, but you now have everyone&#x27;s attention. Take advantage of it. Prerequisites Before starting this tutorial, be sure to complete these <em>New</em> <em>Relic</em> tutorials: Establish objectives and baselines Incident orchestration"
      },
      "id": "603ea329196a678c53a83da9"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/measure-code-pipelines": [
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T07:31:06Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that theyâre consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs DevOps transformation. 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or âmarkerâ, on charts and graphs at the deployment eventâs timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When youâre satisfied with the applicationâs performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.50873,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-05-22T07:38:45Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your applicationâs performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your applicationâs architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the applicationâs environment searchable. Any convention you use should be unique to your organizationâs structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your applicationâs performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our applicationâs overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue youâre investigating. In this example, weâve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, itâs obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If youâre not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, itâs responsible for 99.9% of the app server time, which means weâre getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issuesâthe red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that itâs highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customersâwhich will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the ânorm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, itâs important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.47278,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    },
    {
      "sections": [
        "Resolve dependency risk: identify and analyze potential issues",
        "Prerequisites",
        "1. Analyze dependencies with service maps",
        "2. Identify back-end application dependency risks",
        "Tip",
        "3. Identify front-end dependency risk",
        "4. Identify Microservice Dependencies",
        "5. Create an action plan for risk mitigation"
      ],
      "title": "Resolve dependency risk: identify and analyze potential issues",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "4911ddf0c6fca572b52e22fbe464f21f0c6f338f",
      "image": "https://docs.newrelic.com/static/d1d4cf78d193ae770219cfdb9f6f792f/c1b63/distributed-trace_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues/",
      "published_at": "2021-05-22T06:11:07Z",
      "updated_at": "2021-05-15T22:15:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Successfully scaling DevOps requires a robust understanding of dependencies across application teams and related services. Use New Relics service maps to discover and mitigate risky dependencies from upstream and downstream services. Prerequisites This tutorial assumes youâve completed the previous DevOps procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. New Relic recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com > Service Maps > App/Service list This initial view shows all applications that are configured in your account. Applications that have violated a warning threshold are shown in yellow, and those with an active alert are shown in red. Healthy applications appear in green. New Relic uses a bold line to map applications to the services (such as databases) they connect to. Familiarize yourself with these maps to see how applications and their services fit together. Take note of which applications have the most dependencies and which rely on the same dependency, such as an API. Click an application to see high level metrics about that app, including throughput, response time, Apdex score, and error rate for the last 30 minutes. Tracking throughput is a good way to determine which of your applications are serving the most traffic. After looking at the architecture as a whole, review the applications that have the most dependencies. Select the App/Services list to see a full list of your applications. one.newrelic.com > Service Maps > App/Service list In this example, weâve chosen Tower-Chicago from the App/Services list. All of the traffic being sent to Tower-Chicago is coming from Proxy-East. In this case, Tower-Chicago is showing 48.3 requests per minute, or 11.3% of the 426 requests per minute flowing through Proxy-East. one.newrelic.com > Service Maps > App/Service list In most cases, the separate applications and services represented in service maps are created and maintained by separate teams. This exercise of walking through the dependencies of your architecture should involve representatives from each of those teams. Teams should work together to ask questions such as: How critical is this particular dependency? What would happen if it were to go down? What happened last time it went down? Was there a revenue loss? 2. Identify back-end application dependency risks Once youâve analyzed your applicationsâ dependencies, youâll want to examine the quality of dependency execution. For example, is the dependency stable and predictable for each application or transaction youâve identified? To do this, youâll first need to gather as much information as you can about the applications from New Relic Insights, which helps you analyze data that is collected about the applications in more detail. Here is an example NRQL query to further analyze back-end service performance: SELECT count(appName)/30 as 'Throughput', apdex(duration), average(duration), stddev(duration), max(duration), count(error_type), uniquecount(host) FROM Transaction FACET appName SINCE 30 MINUTES AGO Copy This query shows you each applicationâs request per minute (throughput), Apdex score, and an overview of how the application is performing overall (through the standard deviation calculation, in which lower numbers are generally better). It also shows errors for the time period and the number of hosts on which the application is running. insights.newrelic.com > query results Next, gather information on incidents and events related to the services from New Relic Alerts: Click Alerts > Incidents > All Incidents. alerts.newrelic.com > Incidents > All Incidents Click Alerts > Events > All Events. alerts.newrelic.com > Incidents > All Events Tip Using webhooks to send alert events to New Relic Insights, allows you to supplement your dashboards with Alerts data. The process is outlined in this community discussion post. Here is a simplified example of the results of this exercise: Application Number of dependencies RPM Hosts APDEX (avg) Last outage TTR (hrs) Routing Service 10 983 4 .93 2/19/18 .75 Tower Austin 1 58 1 .95 10/11/17 1.5 Proxy-East 11 498 4 .92 1/4/18 .25 Proxy-West 11 495 4 .97 12/3/17 .25 WebPortal 7 396 8 .98 4/1/18 2.5 Supplement this data with the data that your teams know about your service and that you gathered from the dependency exercise in step 1, and use that data to develop hypotheses about the highest risk areas in your services that should be mitigated. 3. Identify front-end dependency risk Once youâve analyzed back-end dependencies, explore front-end dependencies. This is a critical step because as you walk higher up the stack and closer to the user, you will likely have more dependencies and abstractions. Service maps seamlessly integrate data from New Relic Browser and New Relic Mobile to help you understand the dependencies from front-end user interfaces to back-end services. one.newrelic.com > Service Maps Use the service map view to drill into front-end dependencies, and execute a similar exercise to the one you executed for back-end dependencies. This exercise will again expose data to help you identify risk areas you should address and optimize. We recommend that you conduct the analysis with user interface (UI) teams so that you can also gather a complementary qualitative understanding of what the UI teams consider critical based on their experience. A ranking from the UI teams of the most critical dependency is a useful output of this work. 4. Identify Microservice Dependencies If you are using microservices, you can have dozens, if not hundreds, of services that are calling each other. Use Distributed Tracing to see how all those services connect together and how your requests flow through those different services. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. A distributed trace is composed of multiple \"spans,\" which represent time spent in services or resources of those services. Click on the Distributed tracing menu in New Relic APM left nav. You can see âtrace listingâ view where youâll be able to quickly identify slow traces and traces with errors. The scatter plot lets you easily see outliers. Below that are the trace summaries, click on a trace to see details. Dive into distributed traces to see how long each span takes. Click into each span to see historical performance charts and associated attributes that layer in the context you need to understand and troubleshoot issues. one.newrelic.com > APM > (select an app) > Distributed tracing This rounds out your list of dependencies. 5. Create an action plan for risk mitigation Once youâve analyzed the dependencies across your application from both front-end and back-end services, create an action plan to reduce dependency risks and achieve your service level objectives (SLO). As you prioritize these next steps, we recommend you keep these four principles in mind: Understand your risk tolerance. Itâs helpful to have a clear picture of your tolerance for risk, which ideally should be informed by your service level objectives (refer to the Establish Objectives and Baselines tutorial for more information). Set an alert policy to monitor dependencies that youâve determined have a high relationship to SLO achievement. Minimize dependencies. The simpler you keep your code, the less functions you'll have referring to other modules. Removing unnecessary complexity is an important way to ensure you have a maintainable system that meets your customersâ expectations. Localize dependencies. For the code you write, package together functions that depend on each other whenever possible. Stabilize dependencies. When dependencies are unavoidable, mitigate risks by ensuring these dependencies point to modules that are the least likely to change or are easier to substitute. When your action plan is complete, monitor the results of the efforts. The efficacy of your actions to resolve dependency risks should ultimately be measured by your SLOs",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 340.26297,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>DevOps</em> procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. <em>New</em> <em>Relic</em> recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com &gt; Service Maps"
      },
      "id": "60440f13e7b9d2ec025799f0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/operations-review-assess-optimize-team-progress": [
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T07:31:06Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that theyâre consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs DevOps transformation. 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or âmarkerâ, on charts and graphs at the deployment eventâs timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When youâre satisfied with the applicationâs performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.5086,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-05-22T07:38:45Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your applicationâs performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your applicationâs architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the applicationâs environment searchable. Any convention you use should be unique to your organizationâs structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your applicationâs performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our applicationâs overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue youâre investigating. In this example, weâve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, itâs obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If youâre not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, itâs responsible for 99.9% of the app server time, which means weâre getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issuesâthe red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that itâs highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customersâwhich will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the ânorm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, itâs important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.47266,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    },
    {
      "sections": [
        "Resolve dependency risk: identify and analyze potential issues",
        "Prerequisites",
        "1. Analyze dependencies with service maps",
        "2. Identify back-end application dependency risks",
        "Tip",
        "3. Identify front-end dependency risk",
        "4. Identify Microservice Dependencies",
        "5. Create an action plan for risk mitigation"
      ],
      "title": "Resolve dependency risk: identify and analyze potential issues",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "4911ddf0c6fca572b52e22fbe464f21f0c6f338f",
      "image": "https://docs.newrelic.com/static/d1d4cf78d193ae770219cfdb9f6f792f/c1b63/distributed-trace_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues/",
      "published_at": "2021-05-22T06:11:07Z",
      "updated_at": "2021-05-15T22:15:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Successfully scaling DevOps requires a robust understanding of dependencies across application teams and related services. Use New Relics service maps to discover and mitigate risky dependencies from upstream and downstream services. Prerequisites This tutorial assumes youâve completed the previous DevOps procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. New Relic recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com > Service Maps > App/Service list This initial view shows all applications that are configured in your account. Applications that have violated a warning threshold are shown in yellow, and those with an active alert are shown in red. Healthy applications appear in green. New Relic uses a bold line to map applications to the services (such as databases) they connect to. Familiarize yourself with these maps to see how applications and their services fit together. Take note of which applications have the most dependencies and which rely on the same dependency, such as an API. Click an application to see high level metrics about that app, including throughput, response time, Apdex score, and error rate for the last 30 minutes. Tracking throughput is a good way to determine which of your applications are serving the most traffic. After looking at the architecture as a whole, review the applications that have the most dependencies. Select the App/Services list to see a full list of your applications. one.newrelic.com > Service Maps > App/Service list In this example, weâve chosen Tower-Chicago from the App/Services list. All of the traffic being sent to Tower-Chicago is coming from Proxy-East. In this case, Tower-Chicago is showing 48.3 requests per minute, or 11.3% of the 426 requests per minute flowing through Proxy-East. one.newrelic.com > Service Maps > App/Service list In most cases, the separate applications and services represented in service maps are created and maintained by separate teams. This exercise of walking through the dependencies of your architecture should involve representatives from each of those teams. Teams should work together to ask questions such as: How critical is this particular dependency? What would happen if it were to go down? What happened last time it went down? Was there a revenue loss? 2. Identify back-end application dependency risks Once youâve analyzed your applicationsâ dependencies, youâll want to examine the quality of dependency execution. For example, is the dependency stable and predictable for each application or transaction youâve identified? To do this, youâll first need to gather as much information as you can about the applications from New Relic Insights, which helps you analyze data that is collected about the applications in more detail. Here is an example NRQL query to further analyze back-end service performance: SELECT count(appName)/30 as 'Throughput', apdex(duration), average(duration), stddev(duration), max(duration), count(error_type), uniquecount(host) FROM Transaction FACET appName SINCE 30 MINUTES AGO Copy This query shows you each applicationâs request per minute (throughput), Apdex score, and an overview of how the application is performing overall (through the standard deviation calculation, in which lower numbers are generally better). It also shows errors for the time period and the number of hosts on which the application is running. insights.newrelic.com > query results Next, gather information on incidents and events related to the services from New Relic Alerts: Click Alerts > Incidents > All Incidents. alerts.newrelic.com > Incidents > All Incidents Click Alerts > Events > All Events. alerts.newrelic.com > Incidents > All Events Tip Using webhooks to send alert events to New Relic Insights, allows you to supplement your dashboards with Alerts data. The process is outlined in this community discussion post. Here is a simplified example of the results of this exercise: Application Number of dependencies RPM Hosts APDEX (avg) Last outage TTR (hrs) Routing Service 10 983 4 .93 2/19/18 .75 Tower Austin 1 58 1 .95 10/11/17 1.5 Proxy-East 11 498 4 .92 1/4/18 .25 Proxy-West 11 495 4 .97 12/3/17 .25 WebPortal 7 396 8 .98 4/1/18 2.5 Supplement this data with the data that your teams know about your service and that you gathered from the dependency exercise in step 1, and use that data to develop hypotheses about the highest risk areas in your services that should be mitigated. 3. Identify front-end dependency risk Once youâve analyzed back-end dependencies, explore front-end dependencies. This is a critical step because as you walk higher up the stack and closer to the user, you will likely have more dependencies and abstractions. Service maps seamlessly integrate data from New Relic Browser and New Relic Mobile to help you understand the dependencies from front-end user interfaces to back-end services. one.newrelic.com > Service Maps Use the service map view to drill into front-end dependencies, and execute a similar exercise to the one you executed for back-end dependencies. This exercise will again expose data to help you identify risk areas you should address and optimize. We recommend that you conduct the analysis with user interface (UI) teams so that you can also gather a complementary qualitative understanding of what the UI teams consider critical based on their experience. A ranking from the UI teams of the most critical dependency is a useful output of this work. 4. Identify Microservice Dependencies If you are using microservices, you can have dozens, if not hundreds, of services that are calling each other. Use Distributed Tracing to see how all those services connect together and how your requests flow through those different services. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. A distributed trace is composed of multiple \"spans,\" which represent time spent in services or resources of those services. Click on the Distributed tracing menu in New Relic APM left nav. You can see âtrace listingâ view where youâll be able to quickly identify slow traces and traces with errors. The scatter plot lets you easily see outliers. Below that are the trace summaries, click on a trace to see details. Dive into distributed traces to see how long each span takes. Click into each span to see historical performance charts and associated attributes that layer in the context you need to understand and troubleshoot issues. one.newrelic.com > APM > (select an app) > Distributed tracing This rounds out your list of dependencies. 5. Create an action plan for risk mitigation Once youâve analyzed the dependencies across your application from both front-end and back-end services, create an action plan to reduce dependency risks and achieve your service level objectives (SLO). As you prioritize these next steps, we recommend you keep these four principles in mind: Understand your risk tolerance. Itâs helpful to have a clear picture of your tolerance for risk, which ideally should be informed by your service level objectives (refer to the Establish Objectives and Baselines tutorial for more information). Set an alert policy to monitor dependencies that youâve determined have a high relationship to SLO achievement. Minimize dependencies. The simpler you keep your code, the less functions you'll have referring to other modules. Removing unnecessary complexity is an important way to ensure you have a maintainable system that meets your customersâ expectations. Localize dependencies. For the code you write, package together functions that depend on each other whenever possible. Stabilize dependencies. When dependencies are unavoidable, mitigate risks by ensuring these dependencies point to modules that are the least likely to change or are easier to substitute. When your action plan is complete, monitor the results of the efforts. The efficacy of your actions to resolve dependency risks should ultimately be measured by your SLOs",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 340.26288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>DevOps</em> procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. <em>New</em> <em>Relic</em> recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com &gt; Service Maps"
      },
      "id": "60440f13e7b9d2ec025799f0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues": [
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T07:31:06Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that theyâre consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs DevOps transformation. 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or âmarkerâ, on charts and graphs at the deployment eventâs timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When youâre satisfied with the applicationâs performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.5086,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-05-22T07:38:45Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your applicationâs performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your applicationâs architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the applicationâs environment searchable. Any convention you use should be unique to your organizationâs structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your applicationâs performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our applicationâs overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue youâre investigating. In this example, weâve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, itâs obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If youâre not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, itâs responsible for 99.9% of the app server time, which means weâre getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issuesâthe red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that itâs highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customersâwhich will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the ânorm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, itâs important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.47266,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    },
    {
      "sections": [
        "Incident learning: Retrospectives",
        "Prerequisites",
        "1. Establish a post-mortem process",
        "2. Don't over-research",
        "3. Tune your monitoring",
        "4. Create an incident repository",
        "Outcomes",
        "For more help"
      ],
      "title": "Incident learning: Retrospectives",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "683e9d7afbd81c80d511401e194bb0ecc2ef68ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/incident-learning-retrospectives/",
      "published_at": "2021-05-22T07:29:44Z",
      "updated_at": "2021-03-16T10:56:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Equip teams to learn from incidents and stop recycling problems. You may have heard the term blameless post-mortems; hereâs how and why to get there. Create a process for learning from problems that enables the organization to improve existing KPIs and incident response patterns and to adapt when new challenges surface. The goal is to learn first, then fix. Yes, you have had an outage, but you now have everyone's attention. Take advantage of it. Prerequisites Before starting this tutorial, be sure to complete these New Relic tutorials: Establish objectives and baselines Incident orchestration 1. Establish a post-mortem process The goal is to identify technical, organizational, and process follow-up actions after each notable incident. We've found more success by focusing on what happened, rather than who did what. Ask questions like: How were we notified about the problem? Could we have discovered the problem sooner? Was the information we needed to resolve the incident easily accessible? Where did we have humans doing work where computers should have done it? Read more at How and why to hold blameless retrospectives. Ideally, this process should be the same across teams. Create a document that includes: The triggering event. Contributing factors that lead to the incident. A chronology and summary of remediation steps and their result (be sure to include what went right; these are actions/processes you don't want to lose in the future). A measure of the impact to the business in terms of user experience and financial losses, if possible. Recommendations for system or feature improvements to prevent a recurrence. Recommendations for process and communication improvements. Owners of post-retro actions. No root cause? Why is root cause not included in this postmortem report? Root cause implies that it's both possible and useful to find a single cause for an outcome in a complex system. The notion is seductive because we want simple, actionable explanations, but current systems are too complex for simple answers. It is harmful because it tricks us into going down one narrow path of options instead of exploring the different paths available, some of which might be much more important and impactful if we broadened our thinking. Example postmortem report Comments Date March 1, 2018 Executive summary From approximately 1:45PM until 2:30PM, users could not add items to their carts, which prevented any checkouts from occurring during the incident period. Triggering event We determined that a change was made to the CSS rules on the product detail page that effectively disabled the Add to cart button. Timeline 1:50PM: Successful checkouts < 10 for 5 minutes alert triggered; assigned to Alice. 1:55PM: After reviewing the e-commerce team dashboard, Alice determined that the threshold was breached immediately following a deploy by Bob. She notified him of the incident. 2:00PM: Alice and Bob began troubleshooting. Attempts at recreating the issue in production were successful. 2:20PM: Bob determined that his change to the CSS on the product detail page disabled the Add to cart button. He deployed a hotfix. 2:30PM: Functionality was restored and the incident was resolved. Impact No checkouts were completed during the duration of the incident. Our typical revenue for a Thursday during this timeframe is $30,000. Recommendations We have been discussing implementing New Relic Synthetics for a while now. If we had a synthetic check on the checkout process, this issue would have been detected immediately. We should also implement more thorough unit tests in the front-end web app. Next Steps Alice will implement synthetic checks next sprint. Ravi's team will investigate creating more unit tests. At first, your retros will generate obvious follow-ups, like fixing permissions and access, missing instrumentation, or a need to tune certain alerts. Over time, your retros will reveal larger followupsâwe call them interventions. Before you rush to implement interventions (such as switching from using GUIDs to integers), take time to map out the impact of these changes. By making a major change, you may ensure the previous incident does not occur, but what other problems are you introducing or risking? Not every incident requires preventative action. It is reasonable to accept a certain level of risk and mitigate the impact. 2. Don't over-research Establish guidelines for which incidents require in-depth analysis to prevent diminishing returns from too much overhead. If you had a hardware failure and replace the hardware, you are probably done. If an incident has so much complexity (or emotional heat) that you may never get to clear follow-up actions, you can choose to not do a formal review. Rather, have a meeting and an open discussion of events. Take notes, but you don't need to create a retro report. 3. Tune your monitoring Audit monitoring and alerting after major incidents to tune KPIs and thresholds, improve time to detection, and reduce alert noise. Review the set proactive alerts pattern. Groom your alerts by: Measuring the frequency of pages on your teams. Maintaining policy hygiene. Little things, like using a consistent naming structure, make a big difference. Tune alerts as performance improves Leverage AI to fine tune alerts: Train your system to obtain the most accurate incident correlation. Use muting rules to silence alerts you don't need. Set alerts on system-detected anomalies. Creating runbooks for your conditions. Runbooks for alerts should include: A description of why the alert was created. What the alert is monitoring. What that alert indicates about the state of your system. Initial steps for an on-call engineer to begin triage. Learn more about grooming and tuning your alerts. 4. Create an incident repository Create a centralized, searchable repository of incident post-mortem documents and other incident artifacts, providing the organization with access to lessons learned. A small number of people in your org will probably access these. But get good enough at creating these reports and you can begin to automate the use of this information. Outcomes As you continue to harvest information from your incidents, you should begin to get better SLO compliance, fewer high-severity incidents, improved developer satisfaction, and lower employee turnover rate. For more help Explore the New Relic platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.38054,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>new</em> challenges surface. The goal is to learn first, then fix. Yes, you have had an outage, but you now have everyone&#x27;s attention. Take advantage of it. Prerequisites Before starting this tutorial, be sure to complete these <em>New</em> <em>Relic</em> tutorials: Establish objectives and baselines Incident orchestration"
      },
      "id": "603ea329196a678c53a83da9"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/set-proactive-alerting-understand-respond-performance-issues": [
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T07:31:06Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that theyâre consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs DevOps transformation. 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or âmarkerâ, on charts and graphs at the deployment eventâs timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When youâre satisfied with the applicationâs performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.50848,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-05-22T07:38:45Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your applicationâs performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your applicationâs architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the applicationâs environment searchable. Any convention you use should be unique to your organizationâs structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your applicationâs performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our applicationâs overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue youâre investigating. In this example, weâve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, itâs obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If youâre not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, itâs responsible for 99.9% of the app server time, which means weâre getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issuesâthe red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that itâs highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customersâwhich will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the ânorm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, itâs important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 341.47256,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications youâre monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    },
    {
      "sections": [
        "Resolve dependency risk: identify and analyze potential issues",
        "Prerequisites",
        "1. Analyze dependencies with service maps",
        "2. Identify back-end application dependency risks",
        "Tip",
        "3. Identify front-end dependency risk",
        "4. Identify Microservice Dependencies",
        "5. Create an action plan for risk mitigation"
      ],
      "title": "Resolve dependency risk: identify and analyze potential issues",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "4911ddf0c6fca572b52e22fbe464f21f0c6f338f",
      "image": "https://docs.newrelic.com/static/d1d4cf78d193ae770219cfdb9f6f792f/c1b63/distributed-trace_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues/",
      "published_at": "2021-05-22T06:11:07Z",
      "updated_at": "2021-05-15T22:15:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Successfully scaling DevOps requires a robust understanding of dependencies across application teams and related services. Use New Relics service maps to discover and mitigate risky dependencies from upstream and downstream services. Prerequisites This tutorial assumes youâve completed the previous DevOps procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. New Relic recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com > Service Maps > App/Service list This initial view shows all applications that are configured in your account. Applications that have violated a warning threshold are shown in yellow, and those with an active alert are shown in red. Healthy applications appear in green. New Relic uses a bold line to map applications to the services (such as databases) they connect to. Familiarize yourself with these maps to see how applications and their services fit together. Take note of which applications have the most dependencies and which rely on the same dependency, such as an API. Click an application to see high level metrics about that app, including throughput, response time, Apdex score, and error rate for the last 30 minutes. Tracking throughput is a good way to determine which of your applications are serving the most traffic. After looking at the architecture as a whole, review the applications that have the most dependencies. Select the App/Services list to see a full list of your applications. one.newrelic.com > Service Maps > App/Service list In this example, weâve chosen Tower-Chicago from the App/Services list. All of the traffic being sent to Tower-Chicago is coming from Proxy-East. In this case, Tower-Chicago is showing 48.3 requests per minute, or 11.3% of the 426 requests per minute flowing through Proxy-East. one.newrelic.com > Service Maps > App/Service list In most cases, the separate applications and services represented in service maps are created and maintained by separate teams. This exercise of walking through the dependencies of your architecture should involve representatives from each of those teams. Teams should work together to ask questions such as: How critical is this particular dependency? What would happen if it were to go down? What happened last time it went down? Was there a revenue loss? 2. Identify back-end application dependency risks Once youâve analyzed your applicationsâ dependencies, youâll want to examine the quality of dependency execution. For example, is the dependency stable and predictable for each application or transaction youâve identified? To do this, youâll first need to gather as much information as you can about the applications from New Relic Insights, which helps you analyze data that is collected about the applications in more detail. Here is an example NRQL query to further analyze back-end service performance: SELECT count(appName)/30 as 'Throughput', apdex(duration), average(duration), stddev(duration), max(duration), count(error_type), uniquecount(host) FROM Transaction FACET appName SINCE 30 MINUTES AGO Copy This query shows you each applicationâs request per minute (throughput), Apdex score, and an overview of how the application is performing overall (through the standard deviation calculation, in which lower numbers are generally better). It also shows errors for the time period and the number of hosts on which the application is running. insights.newrelic.com > query results Next, gather information on incidents and events related to the services from New Relic Alerts: Click Alerts > Incidents > All Incidents. alerts.newrelic.com > Incidents > All Incidents Click Alerts > Events > All Events. alerts.newrelic.com > Incidents > All Events Tip Using webhooks to send alert events to New Relic Insights, allows you to supplement your dashboards with Alerts data. The process is outlined in this community discussion post. Here is a simplified example of the results of this exercise: Application Number of dependencies RPM Hosts APDEX (avg) Last outage TTR (hrs) Routing Service 10 983 4 .93 2/19/18 .75 Tower Austin 1 58 1 .95 10/11/17 1.5 Proxy-East 11 498 4 .92 1/4/18 .25 Proxy-West 11 495 4 .97 12/3/17 .25 WebPortal 7 396 8 .98 4/1/18 2.5 Supplement this data with the data that your teams know about your service and that you gathered from the dependency exercise in step 1, and use that data to develop hypotheses about the highest risk areas in your services that should be mitigated. 3. Identify front-end dependency risk Once youâve analyzed back-end dependencies, explore front-end dependencies. This is a critical step because as you walk higher up the stack and closer to the user, you will likely have more dependencies and abstractions. Service maps seamlessly integrate data from New Relic Browser and New Relic Mobile to help you understand the dependencies from front-end user interfaces to back-end services. one.newrelic.com > Service Maps Use the service map view to drill into front-end dependencies, and execute a similar exercise to the one you executed for back-end dependencies. This exercise will again expose data to help you identify risk areas you should address and optimize. We recommend that you conduct the analysis with user interface (UI) teams so that you can also gather a complementary qualitative understanding of what the UI teams consider critical based on their experience. A ranking from the UI teams of the most critical dependency is a useful output of this work. 4. Identify Microservice Dependencies If you are using microservices, you can have dozens, if not hundreds, of services that are calling each other. Use Distributed Tracing to see how all those services connect together and how your requests flow through those different services. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. A distributed trace is composed of multiple \"spans,\" which represent time spent in services or resources of those services. Click on the Distributed tracing menu in New Relic APM left nav. You can see âtrace listingâ view where youâll be able to quickly identify slow traces and traces with errors. The scatter plot lets you easily see outliers. Below that are the trace summaries, click on a trace to see details. Dive into distributed traces to see how long each span takes. Click into each span to see historical performance charts and associated attributes that layer in the context you need to understand and troubleshoot issues. one.newrelic.com > APM > (select an app) > Distributed tracing This rounds out your list of dependencies. 5. Create an action plan for risk mitigation Once youâve analyzed the dependencies across your application from both front-end and back-end services, create an action plan to reduce dependency risks and achieve your service level objectives (SLO). As you prioritize these next steps, we recommend you keep these four principles in mind: Understand your risk tolerance. Itâs helpful to have a clear picture of your tolerance for risk, which ideally should be informed by your service level objectives (refer to the Establish Objectives and Baselines tutorial for more information). Set an alert policy to monitor dependencies that youâve determined have a high relationship to SLO achievement. Minimize dependencies. The simpler you keep your code, the less functions you'll have referring to other modules. Removing unnecessary complexity is an important way to ensure you have a maintainable system that meets your customersâ expectations. Localize dependencies. For the code you write, package together functions that depend on each other whenever possible. Stabilize dependencies. When dependencies are unavoidable, mitigate risks by ensuring these dependencies point to modules that are the least likely to change or are easier to substitute. When your action plan is complete, monitor the results of the efforts. The efficacy of your actions to resolve dependency risks should ultimately be measured by your SLOs",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 340.26276,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>DevOps</em> procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. <em>New</em> <em>Relic</em> recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com &gt; Service Maps"
      },
      "id": "60440f13e7b9d2ec025799f0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services": [
    {
      "sections": [
        "Iterate and measure impact: Track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: Track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "64fab5d31ae90da92debca9bc0eb802ebe731c2b",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T09:11:58Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Proper instrumentation gives teams full visibility into the impact of the changes they make in a system. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation and reduce the impact to other work happening in the system. Prerequisite Before starting this tutorial, complete the Establish objectives and baselines. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they're consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make across them are correct, and eliminate any anomalies before pushing code to production. Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights and use NRQL and external integrations to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in a DevOps transformation. 2. Add automated deployment markers It's important to track deployments and the impact code and infrastructure changes have on your end-user experience. Using deployment markers in New Relic APM, you can record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (for example, the user, revision, or change-log). APM displays a vertical line, or âmarker,â on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application. Additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is a valuable way to determine the root cause of immediate, long-term, or gradual degradations in your application. New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test your pipeline with Infrastructure An important part of optimizing your cloud native environment is a making a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names, which is a good fit for this model. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you're satisfied with the application's performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 332.9944,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Integrate measurements into <em>your</em> development process",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test <em>your</em> pipeline with Infrastructure An important part of optimizing <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em> is a making a cultural shift toward smaller, more frequent changes to <em>your</em> code"
      },
      "id": "603ebdad196a67b212a83ded"
    },
    {
      "sections": [
        "Manage your containerized environment",
        "1. Update to latest Infrastructure agent and enable Kubernetes integration",
        "2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health",
        "3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment",
        "4. Monitor applications running in Kubernetes with APM",
        "Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics",
        "6. Bring teams together with dashboards tailored to specific business use cases and KPIs",
        "Learn more"
      ],
      "title": "Manage your containerized environment",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "71ba4468ed7d078021ccd705c78e72cfb5e92b5f",
      "image": "https://docs.newrelic.com/static/f744b0e1c8aac86e63f46a5798df58ae/c1b63/cont_environment01.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment/",
      "published_at": "2021-05-22T07:38:41Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Widespread adoption of containers has changed the way applications are written and deployed. Container orchestration technologies such as Kubernetes are making it easier for teams to schedule, deploy, and manage their containerized applications. But challenges still exist that require teams to rethink their environment and application monitoring strategies: Challenge 1: Containers are ephemeral by nature. Knowing the containers or pod or node (host) where the application is currently running is not necessarily an indication of where it was running 5, 15, or 30 minutes ago when the issue occurred. Containers are deployed in dynamic, constantly evolving environments that require a modern monitoring approach. Challenge 2: Often, organizations are adopting containers as they break down monolithic applications into multiple microservices. This new approach introduces new complexity to the system and the sheer scale and dimensionality of containers is hard to conceptualize in an easy-to-understand format. Challenge 3: Delivering a differentiated end-user experience is a key initiative for all organizations, and containers are being adopted to help organizations release better software, faster. But with this tremendous opportunity also comes risk, because every time a new container is deployed, the cluster is impacted. Organizations need context into how infrastructure changes impact the application stack, and how changes to both the infrastructure and application stack affect the end-user experience. Getting all of this data in real-time in a digestible format is a significant challenge in distributed, containerized environments. The New Relic platform offers customers both ease of use and ease of deployment for containerized Kubernetes environments. With a few clicks you have the data and confidence to move forward intelligently. These six steps illustrate how to use the New Relic platform to manage your containers and how they are scheduled: 1. Update to latest Infrastructure agent and enable Kubernetes integration To get started, you'll need to deploy the latest Infrastructure agent onto a Kubernetes cluster with a DaemonSet. Leveraging DaemonSets is vital in dynamic, containerized environments, because when a new node is deployed or the cluster scales up or down, the DaemonSet ensures the New Relic agent is running on these new nodes. In addition, to build a complete picture of your Kubernetes environment, New Relic aggregates data from many resources, including Kube-state metrics. New Relic's âKubernetes awareâ approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health Once the Kubernetes integration is installed, you can access the New Relic Kubernetes cluster explorer, which offers a differentiated, intuitive way to visualize the health and performance of Kubernetes clusters. It applies advanced capabilities to filter, sort, and search for Kubernetes entities, helping teams understand the relationships and dependencies within an environment. It's a powerful and innovative solution to the challenges associated with running Kubernetes at massive scale. 3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment Above and beyond what the cluster explorer provides, New Relic provides out-of-the-box dashboards that allow customers to analyze performance and operating metrics of their Kubernetes environments. Key metrics include the number of containers, resource consumption, pending pods, out of memory (OOM) kills, and stuck pods. These metrics may be particularly relevant to Kubernetes administrators who require reliable, up-to-date information on resource consumption against pre-set thresholds. Access these dashboards directly from the cluster explorer where you can first visually explore your cluster and then use filters to drive down into specific dashboards that match that filter. 4. Monitor applications running in Kubernetes with APM One advantage of New Relic's Infrastructure agent being application-aware is that the cluster explorer is automatically aware of New Relic agents that are deployed on new applications. To fully exploit these capabilities, we recommend monitoring all existing and future containerized applications running in Kubernetes by installing the APM agent on them. Starting again from the cluster explorer, you can dig into what's happening in your applications from the context of the Kubernetes cluster. This gives you the ability to intuitively correlate your infrastructure and applications and begin analytically troubleshooting across the stack. Cloud-native applications use many interconnected services. The cluster explorer will correlate the application and link to its distributed tracings. In complex systems the ability to trace and identify pathways and latency bottlenecks are not optional. Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics If you are orchestrating an end-user facing application, New Relic allows you to view the end-to-end impact your infrastructure and services have on your customer experience. We tackle end-user management in two ways: With Synthetics, you can track application availability and performance from a wide variety of global locations visualizing if customer experience is impacted due to geography. With Browser and Mobile, we recommend monitoring such KPIs as load time and availability. Marrying end-user data with metrics and dashboards provided by the cluster explorer enables operators, administrators, app developers, and business personnel to align on common initiatives. 6. Bring teams together with dashboards tailored to specific business use cases and KPIs With dashboards, you can build custom visualizations from an end-to-end service perspective to analyze the cluster, pods, application, and end-user experience in one clean visual display. By using New Relic's dashboards, cross-organizational teams can align to share a common language and single source of truth, helping them make better decisions and drive business impact. The top two rows of this sample dashboard visualize various aspects of a Kubernetes environment while the third row illustrates valuable information regarding the applications that are deployed to this cluster. The bottom row displays the end-user viewpoint. Learn more Actively, where we enable availability monitoring for one user in one location with Synthetics Passively, where you can analyze a macro view of all users across all geographies with Browser monitoring and Mobile monitoring. Bring teams together with dashboards tailored to specific business use cases and KPIs Kubernetes Monitoring Guide",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.71161,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>your</em> containerized <em>environment</em>",
        "sections": "Manage <em>your</em> containerized <em>environment</em>",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " a complete picture of <em>your</em> Kubernetes <em>environment</em>, <em>New</em> <em>Relic</em> aggregates data from many resources, including Kube-state metrics. <em>New</em> <em>Relic</em>&#x27;s âKubernetes awareâ approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage"
      },
      "id": "603ebf49196a670d96a83d81"
    },
    {
      "sections": [
        "Analyze distributed systems",
        "1. Identify high-priority areas to monitor",
        "2. Instrument to get the visibility you require",
        "3. Create dashboards",
        "4. Dig deeper with distributed tracing",
        "5. Annotate message queues with distributed tracing payload APIs",
        "Example annotated message queue",
        "6. Annotate and tag traces with custom attributes",
        "Tip",
        "7. Leverage Synthetics to get a high-level view of system health",
        "For more help"
      ],
      "title": "Analyze distributed systems",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "af1cf5a80f8254c90509e562fb68a6ded2f7207f",
      "image": "https://docs.newrelic.com/static/838e50badd634f1f188cf821785f6696/2cffa/APm_distributed-tracing-catalyst-TWO.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/analyze-distributed-systems/",
      "published_at": "2021-05-21T23:12:05Z",
      "updated_at": "2021-03-16T11:07:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In a monolithic application, a simple stack trace can contain enough diagnostic data to determine the root cause of a code defect. But cloud computing and microservices have blurred the lines between software and infrastructure; in modern architectures, requests are distributed across many smaller servicesâoften with ephemeral lifespansâhosted in both on-premise and cloud environments. Spotting code defects becomes much more complex. APM's distributed tracing automatically helps teams troubleshoot such distributed systems. Distributed traces are just one component of a well-monitored system. You need a holistic view of your distributed system, especially when tracking the root cause of a defect, as there are volumes of data to evaluate and understand. When managing a microservices environment, it's critical that you have the capability to spot bottlenecks and problem spans quickly so that you don't compromise your mean-time-to-resolution (MTTR) or end-user experience. At New Relic, we understand these challenges inherently. In our journey, we've transitioned from a Ruby monolith to a multi-language distributed environment built on more than 300 microservices, for which we average 50 code deploys a day. Such challenges inform both how we've built and how we monitor New Relic. Use the New Relic platform to translate your data into relevant insights, so you can collaborate around a common framework to build context and quickly optimize and troubleshoot your complex, distributed systems. 1. Identify high-priority areas to monitor Distributed systems are complex. Before engaging with the New Relic platform, we recommend that you identify the most critical areas of your systems to observe, and focus on instrumenting those high-priority areas first. Google's SRE handbook suggests monitoring the \"four golden signals\": traffic, latency, errors, and saturation, as shown in the following dashboard: Dashboards: Visualize key areas to monitor with dashboards. Too often, teams monitor what is either 1) easy to measure or 2) interpretable. Avoid this fallacy. When making choices about what to monitor, involve product managers and other stakeholders from your organization. Your goal is to monitor what matters to your business, not to overload your teams with noise. 2. Instrument to get the visibility you require Once you've identified your key priorities, instrument the appropriate parts of your system with the New Relic platform. Monitor your web apps with APM. See compatibility and requirements for New Relic agents and products to learn precise compatibility details for each supported language and then install the APM agent on your application stack. Steps for installing APM agents vary based on language. Enable distributed tracing for APM, which will affect some existing APM features. If you're accustomed to using APM without distributed tracing, read the transition guide before you enable this feature. Monitor your compute resources with Infrastructure. See compatibility and requirements for New Relic Infrastructure for supported operating systems and environments. You can also instrument other products and services with on-host integrations. Monitor your front-end experience with Mobile and Browser. See compatibility and requirements for Mobile and for Browser. 3. Create dashboards Use dashboards to get an overview of your entire system and baseline performance, so you can better understand how the components work together. Insights provides a single framework for aligning disparate teams around relevant data. Approach this first build as your launching point, giving your teams something to react to as you begin to ascribe context to your system. You should continue to build and iterate your dashboards as you analyze, troubleshoot, and optimize your distributed system. Even after you have a basic understanding of your system, use dashboards to inform the decisions you make going forward. Dashboards provide central repository of truth, allowing all stakeholders to build context about the health of your system. Here is an example of a query that displays the slowest applications. SELECT percentile(duration, 99) as 'Slowest duration' FROM Transaction FACET name Copy Using this query you can focus on the slowest application to dig deeper: After running the query, dashboards displays the slowest durations. 4. Dig deeper with distributed tracing After you have basic instrumentation and contextual dashboards in place, you can begin to dig deeper to troubleshoot or optimize your system. A differentiated feature in New Relic One's Global Distributed Tracing is that you can come in with vague context for what you're investigating and search across all accounts and traces to get down to the actual user interactions that have those attributes somewhere in their trace. You no longer must begin with the application or specific entity to search for traces that include that application. For example, start with an analysis of your complex service calls, using the distributed tracing UI to: View a scatter plot chart showing the frequency, duration, and other facets of your distributed traces Group traces by root entry, service, service entry, or traces with errors View a trace list Filter specific traces to meet certain parameters You'll likely discover that you want to take the analysis one step further by annotating your traces with information that adds context to your troubleshooting, like User ID. You can do this in New Relic using custom attributes. one.newrelic.com > APM > Distributed tracing: use the distributed tracing UI to monitor and analyze modern distributed systems. 5. Annotate message queues with distributed tracing payload APIs To see connections between services in some environmentsâfor example, in a system that relies heavily on queuesâyou may need to do some manual instrumentation using the distributed tracing payload APIs to ensure you're propagating the payload. This gives agents the necessary context to create spans with the right correlation; you'll see end-to-end traces for all linked services, including those that cross through the queue. Example annotated message queue For example: Start a transaction. Create the distributed tracing payload on the producer service within a New Relic transaction. As part of the message, add the distributed tracing payload. âânewrelic.setTransactionName(\"Send Message\") // Create SQS service object var sqs = new AWS.SQS({apiVersion: '2012-11-05'}); var transactionHandle = newrelic.getTransaction(); var payload = transactionHandle.createDistributedTracePayload(); var jsonPayload = payload.text(); //add the jsonPayload as a MessageAttribute var params = { DelaySeconds: 10, MessageAttributes: { \"Testing\": { DataType: \"String\", StringValue: \"123\" }, \"TraceContext\": { DataType: \"String\", StringValue: jsonPayload } }, MessageBody: \"Testing 123\", QueueUrl: \"https://sqs.us-west-2.amazonaws.com/408155283954/sqs-testing\" }; Copy With the context of a transaction, receive the payload on the consumer service. sqs.receiveMessage(params, function(err, data) { if (err) { console.log(\"Receive Error\", err); } else if (data && data.Messages) { console.log(\"trace context:\") var traceContext = data.Messages[0].MessageAttributes.TraceContext.StringValue; if (traceContext != \"\") { var transactionHandle = newrelic.getTransaction(); transactionHandle.acceptDistributedTracePayload(traceContext); } Copy 6. Annotate and tag traces with custom attributes We recommend that you use custom attributes to decorate events with additional information for better tracing. For example, by adding key-value pairs, you can attach a user ID to trace a specific user through the call stack and review failing requests to determine if that user is having an unusually poor experience. We recommend adding custom attributes based on your use case; for example, if your instrumenting an order management system, you could add an order number custom attribute to your traces. To add custom attributes, you must first enable them for your agent, and then make an API call to record the attribute. Tip For more agent-specific information on collecting custom attributes, see Collect custom attributes sqs.sendMessage(params, function(err, data) { if (err) { res.send(\"Error: \"+ err); } else { res.send(\"Success! Message ID: \"+ data.MessageId); newrelic.addCustomAttribute(\"Message ID\", data.MessageId) } }); Copy 7. Leverage Synthetics to get a high-level view of system health In complex, distributed systems, you need to track and monitor many signals. Sometimes it may be that no one signal is concerning, yet your whole system is behaving anomalously. To get a complete picture, it's critical to analyze symptomatic data in tandem with system-level data. Synthetics allows you to interact with the entire system as an external user would, giving your teams high-level checks for performance and user experience. These external checks help you understand if the entire system is doing what you want regardless of what specific signals may indicate. For more help For more tips and best practices on distributed tracing and custom attributes, see the following: Distributed Tracing Anomaly Detection: A Faster, Easier Way to Troubleshoot Microservices Environments Introduction to distributed tracing Collect custom attributes",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.70844,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " that you don&#x27;t compromise <em>your</em> mean-time-to-resolution (MTTR) or end-user experience. At <em>New</em> <em>Relic</em>, we understand these challenges inherently. In our journey, we&#x27;ve transitioned from a Ruby monolith to a multi-language distributed <em>environment</em> built on more than 300 microservices, for which we average"
      },
      "id": "603ebd8264441f02694e887f"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/analyze-distributed-systems": [
    {
      "sections": [
        "Iterate and measure impact: Track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: Track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "64fab5d31ae90da92debca9bc0eb802ebe731c2b",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T09:11:58Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Proper instrumentation gives teams full visibility into the impact of the changes they make in a system. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation and reduce the impact to other work happening in the system. Prerequisite Before starting this tutorial, complete the Establish objectives and baselines. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they're consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make across them are correct, and eliminate any anomalies before pushing code to production. Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights and use NRQL and external integrations to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in a DevOps transformation. 2. Add automated deployment markers It's important to track deployments and the impact code and infrastructure changes have on your end-user experience. Using deployment markers in New Relic APM, you can record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (for example, the user, revision, or change-log). APM displays a vertical line, or âmarker,â on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application. Additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is a valuable way to determine the root cause of immediate, long-term, or gradual degradations in your application. New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test your pipeline with Infrastructure An important part of optimizing your cloud native environment is a making a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names, which is a good fit for this model. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you're satisfied with the application's performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 332.99426,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Integrate measurements into <em>your</em> development process",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test <em>your</em> pipeline with Infrastructure An important part of optimizing <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em> is a making a cultural shift toward smaller, more frequent changes to <em>your</em> code"
      },
      "id": "603ebdad196a67b212a83ded"
    },
    {
      "sections": [
        "Adopt cloud services",
        "1. Identify services and technologies",
        "2. Deploy New Relic Infrastructure",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "Tip",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD pipeline integration",
        "8. AWS Lambda Monitoring"
      ],
      "title": "Adopt cloud services",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "4a8e675e4231295287e69402c8c5ff9b05a6103b",
      "image": "https://docs.newrelic.com/static/4159294d05ee078268a7b287af99a72f/c1b63/adopt_cloud.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services/",
      "published_at": "2021-05-22T09:32:28Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've recently completed your cloud migration, have been using cloud-based services for a while, or have always been in the cloud, you may find yourself deploying modern, cutting-edge technologies and services. It's important to develop the ability to adopt new services easily and with confidence; innovation never stops for companies operating in the cloud, and a company's willingness to embrace new technology can give it a major competitive differentiator. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate, for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions. They may be cloud-based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations, you want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services. This allows your team to deploy faster, to adopt new services with confidence, to make better business decisions, and in general to expand its technology horizons. Here are the steps to using the New Relic Platform to monitor your modern technologies and cloud services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies and new services that might impact your organization's application environment. 2. Deploy New Relic Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified in Step One so that you can monitor your cloud services. If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations As you integrate new cloud services, you can use New Relic to monitor and report data about these services; giving you a single, comprehensive overview of your entire architecture. To configure cloud service integrations, link your Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP) service provider account with New Relic. 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of an Insights dashboard with data about vendors, technologies, services, instances, and other important details for DevOps teams. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all changes to a system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all AWS Elastic Load Balancing (ALB) systems for the ALB monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD pipeline integration It's important to track deployments and the impact that code and infrastructure changes have on your end-user experience. New Relic APM deployment markers allow you to record deployments for each application. A deployment marker is an event indicating that a deployment happened. You can pair markers with metadata from your source code management (SCM) system ( including user IDs, revisions, and change logs.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root causes of immediate, long-term, or gradual degradations in your applications. Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment, as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible Puppet 8. AWS Lambda Monitoring New Relic One features an updated APM agent that is highly optimized from a cost and time perspective for ephemeral Lambda functions. Enable New Relic monitoring of AWS Lambda to to assess invocations, error rate, function duration, cold starts, and more. You can also take advantage of New Relic's Infrastructure integration with Lambda for additional reporting capabilities.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 332.99426,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adopt <em>cloud</em> services",
        "sections": "2. Deploy <em>New</em> <em>Relic</em> Infrastructure",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " the <em>New</em> <em>Relic</em> Platform to monitor <em>your</em> modern technologies and <em>cloud</em> services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What <em>cloud</em>-based applications do I have? What are the underlying <em>cloud</em>-based services, technologies"
      },
      "id": "603ebf09e7b9d2071a2a0806"
    },
    {
      "sections": [
        "Manage your containerized environment",
        "1. Update to latest Infrastructure agent and enable Kubernetes integration",
        "2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health",
        "3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment",
        "4. Monitor applications running in Kubernetes with APM",
        "Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics",
        "6. Bring teams together with dashboards tailored to specific business use cases and KPIs",
        "Learn more"
      ],
      "title": "Manage your containerized environment",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "71ba4468ed7d078021ccd705c78e72cfb5e92b5f",
      "image": "https://docs.newrelic.com/static/f744b0e1c8aac86e63f46a5798df58ae/c1b63/cont_environment01.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment/",
      "published_at": "2021-05-22T07:38:41Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Widespread adoption of containers has changed the way applications are written and deployed. Container orchestration technologies such as Kubernetes are making it easier for teams to schedule, deploy, and manage their containerized applications. But challenges still exist that require teams to rethink their environment and application monitoring strategies: Challenge 1: Containers are ephemeral by nature. Knowing the containers or pod or node (host) where the application is currently running is not necessarily an indication of where it was running 5, 15, or 30 minutes ago when the issue occurred. Containers are deployed in dynamic, constantly evolving environments that require a modern monitoring approach. Challenge 2: Often, organizations are adopting containers as they break down monolithic applications into multiple microservices. This new approach introduces new complexity to the system and the sheer scale and dimensionality of containers is hard to conceptualize in an easy-to-understand format. Challenge 3: Delivering a differentiated end-user experience is a key initiative for all organizations, and containers are being adopted to help organizations release better software, faster. But with this tremendous opportunity also comes risk, because every time a new container is deployed, the cluster is impacted. Organizations need context into how infrastructure changes impact the application stack, and how changes to both the infrastructure and application stack affect the end-user experience. Getting all of this data in real-time in a digestible format is a significant challenge in distributed, containerized environments. The New Relic platform offers customers both ease of use and ease of deployment for containerized Kubernetes environments. With a few clicks you have the data and confidence to move forward intelligently. These six steps illustrate how to use the New Relic platform to manage your containers and how they are scheduled: 1. Update to latest Infrastructure agent and enable Kubernetes integration To get started, you'll need to deploy the latest Infrastructure agent onto a Kubernetes cluster with a DaemonSet. Leveraging DaemonSets is vital in dynamic, containerized environments, because when a new node is deployed or the cluster scales up or down, the DaemonSet ensures the New Relic agent is running on these new nodes. In addition, to build a complete picture of your Kubernetes environment, New Relic aggregates data from many resources, including Kube-state metrics. New Relic's âKubernetes awareâ approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health Once the Kubernetes integration is installed, you can access the New Relic Kubernetes cluster explorer, which offers a differentiated, intuitive way to visualize the health and performance of Kubernetes clusters. It applies advanced capabilities to filter, sort, and search for Kubernetes entities, helping teams understand the relationships and dependencies within an environment. It's a powerful and innovative solution to the challenges associated with running Kubernetes at massive scale. 3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment Above and beyond what the cluster explorer provides, New Relic provides out-of-the-box dashboards that allow customers to analyze performance and operating metrics of their Kubernetes environments. Key metrics include the number of containers, resource consumption, pending pods, out of memory (OOM) kills, and stuck pods. These metrics may be particularly relevant to Kubernetes administrators who require reliable, up-to-date information on resource consumption against pre-set thresholds. Access these dashboards directly from the cluster explorer where you can first visually explore your cluster and then use filters to drive down into specific dashboards that match that filter. 4. Monitor applications running in Kubernetes with APM One advantage of New Relic's Infrastructure agent being application-aware is that the cluster explorer is automatically aware of New Relic agents that are deployed on new applications. To fully exploit these capabilities, we recommend monitoring all existing and future containerized applications running in Kubernetes by installing the APM agent on them. Starting again from the cluster explorer, you can dig into what's happening in your applications from the context of the Kubernetes cluster. This gives you the ability to intuitively correlate your infrastructure and applications and begin analytically troubleshooting across the stack. Cloud-native applications use many interconnected services. The cluster explorer will correlate the application and link to its distributed tracings. In complex systems the ability to trace and identify pathways and latency bottlenecks are not optional. Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics If you are orchestrating an end-user facing application, New Relic allows you to view the end-to-end impact your infrastructure and services have on your customer experience. We tackle end-user management in two ways: With Synthetics, you can track application availability and performance from a wide variety of global locations visualizing if customer experience is impacted due to geography. With Browser and Mobile, we recommend monitoring such KPIs as load time and availability. Marrying end-user data with metrics and dashboards provided by the cluster explorer enables operators, administrators, app developers, and business personnel to align on common initiatives. 6. Bring teams together with dashboards tailored to specific business use cases and KPIs With dashboards, you can build custom visualizations from an end-to-end service perspective to analyze the cluster, pods, application, and end-user experience in one clean visual display. By using New Relic's dashboards, cross-organizational teams can align to share a common language and single source of truth, helping them make better decisions and drive business impact. The top two rows of this sample dashboard visualize various aspects of a Kubernetes environment while the third row illustrates valuable information regarding the applications that are deployed to this cluster. The bottom row displays the end-user viewpoint. Learn more Actively, where we enable availability monitoring for one user in one location with Synthetics Passively, where you can analyze a macro view of all users across all geographies with Browser monitoring and Mobile monitoring. Bring teams together with dashboards tailored to specific business use cases and KPIs Kubernetes Monitoring Guide",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.71161,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>your</em> containerized <em>environment</em>",
        "sections": "Manage <em>your</em> containerized <em>environment</em>",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " a complete picture of <em>your</em> Kubernetes <em>environment</em>, <em>New</em> <em>Relic</em> aggregates data from many resources, including Kube-state metrics. <em>New</em> <em>Relic</em>&#x27;s âKubernetes awareâ approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage"
      },
      "id": "603ebf49196a670d96a83d81"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/customer-experience-improvement-track-experience-indicators": [
    {
      "sections": [
        "Iterate and measure impact: Track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: Track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "64fab5d31ae90da92debca9bc0eb802ebe731c2b",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T09:11:58Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Proper instrumentation gives teams full visibility into the impact of the changes they make in a system. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation and reduce the impact to other work happening in the system. Prerequisite Before starting this tutorial, complete the Establish objectives and baselines. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they're consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make across them are correct, and eliminate any anomalies before pushing code to production. Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights and use NRQL and external integrations to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in a DevOps transformation. 2. Add automated deployment markers It's important to track deployments and the impact code and infrastructure changes have on your end-user experience. Using deployment markers in New Relic APM, you can record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (for example, the user, revision, or change-log). APM displays a vertical line, or âmarker,â on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application. Additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is a valuable way to determine the root cause of immediate, long-term, or gradual degradations in your application. New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test your pipeline with Infrastructure An important part of optimizing your cloud native environment is a making a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names, which is a good fit for this model. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you're satisfied with the application's performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 332.99426,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Integrate measurements into <em>your</em> development process",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test <em>your</em> pipeline with Infrastructure An important part of optimizing <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em> is a making a cultural shift toward smaller, more frequent changes to <em>your</em> code"
      },
      "id": "603ebdad196a67b212a83ded"
    },
    {
      "sections": [
        "Adopt cloud services",
        "1. Identify services and technologies",
        "2. Deploy New Relic Infrastructure",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "Tip",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD pipeline integration",
        "8. AWS Lambda Monitoring"
      ],
      "title": "Adopt cloud services",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "4a8e675e4231295287e69402c8c5ff9b05a6103b",
      "image": "https://docs.newrelic.com/static/4159294d05ee078268a7b287af99a72f/c1b63/adopt_cloud.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services/",
      "published_at": "2021-05-22T09:32:28Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've recently completed your cloud migration, have been using cloud-based services for a while, or have always been in the cloud, you may find yourself deploying modern, cutting-edge technologies and services. It's important to develop the ability to adopt new services easily and with confidence; innovation never stops for companies operating in the cloud, and a company's willingness to embrace new technology can give it a major competitive differentiator. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate, for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions. They may be cloud-based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations, you want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services. This allows your team to deploy faster, to adopt new services with confidence, to make better business decisions, and in general to expand its technology horizons. Here are the steps to using the New Relic Platform to monitor your modern technologies and cloud services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies and new services that might impact your organization's application environment. 2. Deploy New Relic Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified in Step One so that you can monitor your cloud services. If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations As you integrate new cloud services, you can use New Relic to monitor and report data about these services; giving you a single, comprehensive overview of your entire architecture. To configure cloud service integrations, link your Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP) service provider account with New Relic. 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of an Insights dashboard with data about vendors, technologies, services, instances, and other important details for DevOps teams. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all changes to a system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all AWS Elastic Load Balancing (ALB) systems for the ALB monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD pipeline integration It's important to track deployments and the impact that code and infrastructure changes have on your end-user experience. New Relic APM deployment markers allow you to record deployments for each application. A deployment marker is an event indicating that a deployment happened. You can pair markers with metadata from your source code management (SCM) system ( including user IDs, revisions, and change logs.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root causes of immediate, long-term, or gradual degradations in your applications. Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment, as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible Puppet 8. AWS Lambda Monitoring New Relic One features an updated APM agent that is highly optimized from a cost and time perspective for ephemeral Lambda functions. Enable New Relic monitoring of AWS Lambda to to assess invocations, error rate, function duration, cold starts, and more. You can also take advantage of New Relic's Infrastructure integration with Lambda for additional reporting capabilities.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 332.99426,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adopt <em>cloud</em> services",
        "sections": "2. Deploy <em>New</em> <em>Relic</em> Infrastructure",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " the <em>New</em> <em>Relic</em> Platform to monitor <em>your</em> modern technologies and <em>cloud</em> services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What <em>cloud</em>-based applications do I have? What are the underlying <em>cloud</em>-based services, technologies"
      },
      "id": "603ebf09e7b9d2071a2a0806"
    },
    {
      "sections": [
        "Manage your containerized environment",
        "1. Update to latest Infrastructure agent and enable Kubernetes integration",
        "2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health",
        "3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment",
        "4. Monitor applications running in Kubernetes with APM",
        "Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics",
        "6. Bring teams together with dashboards tailored to specific business use cases and KPIs",
        "Learn more"
      ],
      "title": "Manage your containerized environment",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "71ba4468ed7d078021ccd705c78e72cfb5e92b5f",
      "image": "https://docs.newrelic.com/static/f744b0e1c8aac86e63f46a5798df58ae/c1b63/cont_environment01.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment/",
      "published_at": "2021-05-22T07:38:41Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Widespread adoption of containers has changed the way applications are written and deployed. Container orchestration technologies such as Kubernetes are making it easier for teams to schedule, deploy, and manage their containerized applications. But challenges still exist that require teams to rethink their environment and application monitoring strategies: Challenge 1: Containers are ephemeral by nature. Knowing the containers or pod or node (host) where the application is currently running is not necessarily an indication of where it was running 5, 15, or 30 minutes ago when the issue occurred. Containers are deployed in dynamic, constantly evolving environments that require a modern monitoring approach. Challenge 2: Often, organizations are adopting containers as they break down monolithic applications into multiple microservices. This new approach introduces new complexity to the system and the sheer scale and dimensionality of containers is hard to conceptualize in an easy-to-understand format. Challenge 3: Delivering a differentiated end-user experience is a key initiative for all organizations, and containers are being adopted to help organizations release better software, faster. But with this tremendous opportunity also comes risk, because every time a new container is deployed, the cluster is impacted. Organizations need context into how infrastructure changes impact the application stack, and how changes to both the infrastructure and application stack affect the end-user experience. Getting all of this data in real-time in a digestible format is a significant challenge in distributed, containerized environments. The New Relic platform offers customers both ease of use and ease of deployment for containerized Kubernetes environments. With a few clicks you have the data and confidence to move forward intelligently. These six steps illustrate how to use the New Relic platform to manage your containers and how they are scheduled: 1. Update to latest Infrastructure agent and enable Kubernetes integration To get started, you'll need to deploy the latest Infrastructure agent onto a Kubernetes cluster with a DaemonSet. Leveraging DaemonSets is vital in dynamic, containerized environments, because when a new node is deployed or the cluster scales up or down, the DaemonSet ensures the New Relic agent is running on these new nodes. In addition, to build a complete picture of your Kubernetes environment, New Relic aggregates data from many resources, including Kube-state metrics. New Relic's âKubernetes awareâ approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health Once the Kubernetes integration is installed, you can access the New Relic Kubernetes cluster explorer, which offers a differentiated, intuitive way to visualize the health and performance of Kubernetes clusters. It applies advanced capabilities to filter, sort, and search for Kubernetes entities, helping teams understand the relationships and dependencies within an environment. It's a powerful and innovative solution to the challenges associated with running Kubernetes at massive scale. 3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment Above and beyond what the cluster explorer provides, New Relic provides out-of-the-box dashboards that allow customers to analyze performance and operating metrics of their Kubernetes environments. Key metrics include the number of containers, resource consumption, pending pods, out of memory (OOM) kills, and stuck pods. These metrics may be particularly relevant to Kubernetes administrators who require reliable, up-to-date information on resource consumption against pre-set thresholds. Access these dashboards directly from the cluster explorer where you can first visually explore your cluster and then use filters to drive down into specific dashboards that match that filter. 4. Monitor applications running in Kubernetes with APM One advantage of New Relic's Infrastructure agent being application-aware is that the cluster explorer is automatically aware of New Relic agents that are deployed on new applications. To fully exploit these capabilities, we recommend monitoring all existing and future containerized applications running in Kubernetes by installing the APM agent on them. Starting again from the cluster explorer, you can dig into what's happening in your applications from the context of the Kubernetes cluster. This gives you the ability to intuitively correlate your infrastructure and applications and begin analytically troubleshooting across the stack. Cloud-native applications use many interconnected services. The cluster explorer will correlate the application and link to its distributed tracings. In complex systems the ability to trace and identify pathways and latency bottlenecks are not optional. Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics If you are orchestrating an end-user facing application, New Relic allows you to view the end-to-end impact your infrastructure and services have on your customer experience. We tackle end-user management in two ways: With Synthetics, you can track application availability and performance from a wide variety of global locations visualizing if customer experience is impacted due to geography. With Browser and Mobile, we recommend monitoring such KPIs as load time and availability. Marrying end-user data with metrics and dashboards provided by the cluster explorer enables operators, administrators, app developers, and business personnel to align on common initiatives. 6. Bring teams together with dashboards tailored to specific business use cases and KPIs With dashboards, you can build custom visualizations from an end-to-end service perspective to analyze the cluster, pods, application, and end-user experience in one clean visual display. By using New Relic's dashboards, cross-organizational teams can align to share a common language and single source of truth, helping them make better decisions and drive business impact. The top two rows of this sample dashboard visualize various aspects of a Kubernetes environment while the third row illustrates valuable information regarding the applications that are deployed to this cluster. The bottom row displays the end-user viewpoint. Learn more Actively, where we enable availability monitoring for one user in one location with Synthetics Passively, where you can analyze a macro view of all users across all geographies with Browser monitoring and Mobile monitoring. Bring teams together with dashboards tailored to specific business use cases and KPIs Kubernetes Monitoring Guide",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.71161,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>your</em> containerized <em>environment</em>",
        "sections": "Manage <em>your</em> containerized <em>environment</em>",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " a complete picture of <em>your</em> Kubernetes <em>environment</em>, <em>New</em> <em>Relic</em> aggregates data from many resources, including Kube-state metrics. <em>New</em> <em>Relic</em>&#x27;s âKubernetes awareâ approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage"
      },
      "id": "603ebf49196a670d96a83d81"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/guide-optimizing-your-cloud-native-environment": [
    {
      "sections": [
        "Iterate and measure impact: Track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: Track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "64fab5d31ae90da92debca9bc0eb802ebe731c2b",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T09:11:58Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Proper instrumentation gives teams full visibility into the impact of the changes they make in a system. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation and reduce the impact to other work happening in the system. Prerequisite Before starting this tutorial, complete the Establish objectives and baselines. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they're consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make across them are correct, and eliminate any anomalies before pushing code to production. Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights and use NRQL and external integrations to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in a DevOps transformation. 2. Add automated deployment markers It's important to track deployments and the impact code and infrastructure changes have on your end-user experience. Using deployment markers in New Relic APM, you can record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (for example, the user, revision, or change-log). APM displays a vertical line, or âmarker,â on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application. Additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is a valuable way to determine the root cause of immediate, long-term, or gradual degradations in your application. New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test your pipeline with Infrastructure An important part of optimizing your cloud native environment is a making a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names, which is a good fit for this model. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you're satisfied with the application's performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 332.99417,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Integrate measurements into <em>your</em> development process",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test <em>your</em> pipeline with Infrastructure An important part of optimizing <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em> is a making a cultural shift toward smaller, more frequent changes to <em>your</em> code"
      },
      "id": "603ebdad196a67b212a83ded"
    },
    {
      "sections": [
        "Adopt cloud services",
        "1. Identify services and technologies",
        "2. Deploy New Relic Infrastructure",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "Tip",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD pipeline integration",
        "8. AWS Lambda Monitoring"
      ],
      "title": "Adopt cloud services",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "4a8e675e4231295287e69402c8c5ff9b05a6103b",
      "image": "https://docs.newrelic.com/static/4159294d05ee078268a7b287af99a72f/c1b63/adopt_cloud.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services/",
      "published_at": "2021-05-22T09:32:28Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've recently completed your cloud migration, have been using cloud-based services for a while, or have always been in the cloud, you may find yourself deploying modern, cutting-edge technologies and services. It's important to develop the ability to adopt new services easily and with confidence; innovation never stops for companies operating in the cloud, and a company's willingness to embrace new technology can give it a major competitive differentiator. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate, for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions. They may be cloud-based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations, you want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services. This allows your team to deploy faster, to adopt new services with confidence, to make better business decisions, and in general to expand its technology horizons. Here are the steps to using the New Relic Platform to monitor your modern technologies and cloud services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies and new services that might impact your organization's application environment. 2. Deploy New Relic Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified in Step One so that you can monitor your cloud services. If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations As you integrate new cloud services, you can use New Relic to monitor and report data about these services; giving you a single, comprehensive overview of your entire architecture. To configure cloud service integrations, link your Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP) service provider account with New Relic. 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of an Insights dashboard with data about vendors, technologies, services, instances, and other important details for DevOps teams. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all changes to a system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all AWS Elastic Load Balancing (ALB) systems for the ALB monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD pipeline integration It's important to track deployments and the impact that code and infrastructure changes have on your end-user experience. New Relic APM deployment markers allow you to record deployments for each application. A deployment marker is an event indicating that a deployment happened. You can pair markers with metadata from your source code management (SCM) system ( including user IDs, revisions, and change logs.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root causes of immediate, long-term, or gradual degradations in your applications. Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment, as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible Puppet 8. AWS Lambda Monitoring New Relic One features an updated APM agent that is highly optimized from a cost and time perspective for ephemeral Lambda functions. Enable New Relic monitoring of AWS Lambda to to assess invocations, error rate, function duration, cold starts, and more. You can also take advantage of New Relic's Infrastructure integration with Lambda for additional reporting capabilities.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 332.99417,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adopt <em>cloud</em> services",
        "sections": "2. Deploy <em>New</em> <em>Relic</em> Infrastructure",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " the <em>New</em> <em>Relic</em> Platform to monitor <em>your</em> modern technologies and <em>cloud</em> services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What <em>cloud</em>-based applications do I have? What are the underlying <em>cloud</em>-based services, technologies"
      },
      "id": "603ebf09e7b9d2071a2a0806"
    },
    {
      "sections": [
        "Manage your containerized environment",
        "1. Update to latest Infrastructure agent and enable Kubernetes integration",
        "2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health",
        "3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment",
        "4. Monitor applications running in Kubernetes with APM",
        "Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics",
        "6. Bring teams together with dashboards tailored to specific business use cases and KPIs",
        "Learn more"
      ],
      "title": "Manage your containerized environment",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "71ba4468ed7d078021ccd705c78e72cfb5e92b5f",
      "image": "https://docs.newrelic.com/static/f744b0e1c8aac86e63f46a5798df58ae/c1b63/cont_environment01.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment/",
      "published_at": "2021-05-22T07:38:41Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Widespread adoption of containers has changed the way applications are written and deployed. Container orchestration technologies such as Kubernetes are making it easier for teams to schedule, deploy, and manage their containerized applications. But challenges still exist that require teams to rethink their environment and application monitoring strategies: Challenge 1: Containers are ephemeral by nature. Knowing the containers or pod or node (host) where the application is currently running is not necessarily an indication of where it was running 5, 15, or 30 minutes ago when the issue occurred. Containers are deployed in dynamic, constantly evolving environments that require a modern monitoring approach. Challenge 2: Often, organizations are adopting containers as they break down monolithic applications into multiple microservices. This new approach introduces new complexity to the system and the sheer scale and dimensionality of containers is hard to conceptualize in an easy-to-understand format. Challenge 3: Delivering a differentiated end-user experience is a key initiative for all organizations, and containers are being adopted to help organizations release better software, faster. But with this tremendous opportunity also comes risk, because every time a new container is deployed, the cluster is impacted. Organizations need context into how infrastructure changes impact the application stack, and how changes to both the infrastructure and application stack affect the end-user experience. Getting all of this data in real-time in a digestible format is a significant challenge in distributed, containerized environments. The New Relic platform offers customers both ease of use and ease of deployment for containerized Kubernetes environments. With a few clicks you have the data and confidence to move forward intelligently. These six steps illustrate how to use the New Relic platform to manage your containers and how they are scheduled: 1. Update to latest Infrastructure agent and enable Kubernetes integration To get started, you'll need to deploy the latest Infrastructure agent onto a Kubernetes cluster with a DaemonSet. Leveraging DaemonSets is vital in dynamic, containerized environments, because when a new node is deployed or the cluster scales up or down, the DaemonSet ensures the New Relic agent is running on these new nodes. In addition, to build a complete picture of your Kubernetes environment, New Relic aggregates data from many resources, including Kube-state metrics. New Relic's âKubernetes awareâ approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health Once the Kubernetes integration is installed, you can access the New Relic Kubernetes cluster explorer, which offers a differentiated, intuitive way to visualize the health and performance of Kubernetes clusters. It applies advanced capabilities to filter, sort, and search for Kubernetes entities, helping teams understand the relationships and dependencies within an environment. It's a powerful and innovative solution to the challenges associated with running Kubernetes at massive scale. 3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment Above and beyond what the cluster explorer provides, New Relic provides out-of-the-box dashboards that allow customers to analyze performance and operating metrics of their Kubernetes environments. Key metrics include the number of containers, resource consumption, pending pods, out of memory (OOM) kills, and stuck pods. These metrics may be particularly relevant to Kubernetes administrators who require reliable, up-to-date information on resource consumption against pre-set thresholds. Access these dashboards directly from the cluster explorer where you can first visually explore your cluster and then use filters to drive down into specific dashboards that match that filter. 4. Monitor applications running in Kubernetes with APM One advantage of New Relic's Infrastructure agent being application-aware is that the cluster explorer is automatically aware of New Relic agents that are deployed on new applications. To fully exploit these capabilities, we recommend monitoring all existing and future containerized applications running in Kubernetes by installing the APM agent on them. Starting again from the cluster explorer, you can dig into what's happening in your applications from the context of the Kubernetes cluster. This gives you the ability to intuitively correlate your infrastructure and applications and begin analytically troubleshooting across the stack. Cloud-native applications use many interconnected services. The cluster explorer will correlate the application and link to its distributed tracings. In complex systems the ability to trace and identify pathways and latency bottlenecks are not optional. Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics If you are orchestrating an end-user facing application, New Relic allows you to view the end-to-end impact your infrastructure and services have on your customer experience. We tackle end-user management in two ways: With Synthetics, you can track application availability and performance from a wide variety of global locations visualizing if customer experience is impacted due to geography. With Browser and Mobile, we recommend monitoring such KPIs as load time and availability. Marrying end-user data with metrics and dashboards provided by the cluster explorer enables operators, administrators, app developers, and business personnel to align on common initiatives. 6. Bring teams together with dashboards tailored to specific business use cases and KPIs With dashboards, you can build custom visualizations from an end-to-end service perspective to analyze the cluster, pods, application, and end-user experience in one clean visual display. By using New Relic's dashboards, cross-organizational teams can align to share a common language and single source of truth, helping them make better decisions and drive business impact. The top two rows of this sample dashboard visualize various aspects of a Kubernetes environment while the third row illustrates valuable information regarding the applications that are deployed to this cluster. The bottom row displays the end-user viewpoint. Learn more Actively, where we enable availability monitoring for one user in one location with Synthetics Passively, where you can analyze a macro view of all users across all geographies with Browser monitoring and Mobile monitoring. Bring teams together with dashboards tailored to specific business use cases and KPIs Kubernetes Monitoring Guide",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.71161,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>your</em> containerized <em>environment</em>",
        "sections": "Manage <em>your</em> containerized <em>environment</em>",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " a complete picture of <em>your</em> Kubernetes <em>environment</em>, <em>New</em> <em>Relic</em> aggregates data from many resources, including Kube-state metrics. <em>New</em> <em>Relic</em>&#x27;s âKubernetes awareâ approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage"
      },
      "id": "603ebf49196a670d96a83d81"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments": [
    {
      "sections": [
        "Adopt cloud services",
        "1. Identify services and technologies",
        "2. Deploy New Relic Infrastructure",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "Tip",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD pipeline integration",
        "8. AWS Lambda Monitoring"
      ],
      "title": "Adopt cloud services",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "4a8e675e4231295287e69402c8c5ff9b05a6103b",
      "image": "https://docs.newrelic.com/static/4159294d05ee078268a7b287af99a72f/c1b63/adopt_cloud.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services/",
      "published_at": "2021-05-22T09:32:28Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've recently completed your cloud migration, have been using cloud-based services for a while, or have always been in the cloud, you may find yourself deploying modern, cutting-edge technologies and services. It's important to develop the ability to adopt new services easily and with confidence; innovation never stops for companies operating in the cloud, and a company's willingness to embrace new technology can give it a major competitive differentiator. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate, for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions. They may be cloud-based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations, you want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services. This allows your team to deploy faster, to adopt new services with confidence, to make better business decisions, and in general to expand its technology horizons. Here are the steps to using the New Relic Platform to monitor your modern technologies and cloud services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies and new services that might impact your organization's application environment. 2. Deploy New Relic Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified in Step One so that you can monitor your cloud services. If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations As you integrate new cloud services, you can use New Relic to monitor and report data about these services; giving you a single, comprehensive overview of your entire architecture. To configure cloud service integrations, link your Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP) service provider account with New Relic. 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of an Insights dashboard with data about vendors, technologies, services, instances, and other important details for DevOps teams. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all changes to a system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all AWS Elastic Load Balancing (ALB) systems for the ALB monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD pipeline integration It's important to track deployments and the impact that code and infrastructure changes have on your end-user experience. New Relic APM deployment markers allow you to record deployments for each application. A deployment marker is an event indicating that a deployment happened. You can pair markers with metadata from your source code management (SCM) system ( including user IDs, revisions, and change logs.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root causes of immediate, long-term, or gradual degradations in your applications. Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment, as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible Puppet 8. AWS Lambda Monitoring New Relic One features an updated APM agent that is highly optimized from a cost and time perspective for ephemeral Lambda functions. Enable New Relic monitoring of AWS Lambda to to assess invocations, error rate, function duration, cold starts, and more. You can also take advantage of New Relic's Infrastructure integration with Lambda for additional reporting capabilities.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 332.99417,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adopt <em>cloud</em> services",
        "sections": "2. Deploy <em>New</em> <em>Relic</em> Infrastructure",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " the <em>New</em> <em>Relic</em> Platform to monitor <em>your</em> modern technologies and <em>cloud</em> services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What <em>cloud</em>-based applications do I have? What are the underlying <em>cloud</em>-based services, technologies"
      },
      "id": "603ebf09e7b9d2071a2a0806"
    },
    {
      "sections": [
        "Manage your containerized environment",
        "1. Update to latest Infrastructure agent and enable Kubernetes integration",
        "2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health",
        "3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment",
        "4. Monitor applications running in Kubernetes with APM",
        "Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics",
        "6. Bring teams together with dashboards tailored to specific business use cases and KPIs",
        "Learn more"
      ],
      "title": "Manage your containerized environment",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "71ba4468ed7d078021ccd705c78e72cfb5e92b5f",
      "image": "https://docs.newrelic.com/static/f744b0e1c8aac86e63f46a5798df58ae/c1b63/cont_environment01.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment/",
      "published_at": "2021-05-22T07:38:41Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Widespread adoption of containers has changed the way applications are written and deployed. Container orchestration technologies such as Kubernetes are making it easier for teams to schedule, deploy, and manage their containerized applications. But challenges still exist that require teams to rethink their environment and application monitoring strategies: Challenge 1: Containers are ephemeral by nature. Knowing the containers or pod or node (host) where the application is currently running is not necessarily an indication of where it was running 5, 15, or 30 minutes ago when the issue occurred. Containers are deployed in dynamic, constantly evolving environments that require a modern monitoring approach. Challenge 2: Often, organizations are adopting containers as they break down monolithic applications into multiple microservices. This new approach introduces new complexity to the system and the sheer scale and dimensionality of containers is hard to conceptualize in an easy-to-understand format. Challenge 3: Delivering a differentiated end-user experience is a key initiative for all organizations, and containers are being adopted to help organizations release better software, faster. But with this tremendous opportunity also comes risk, because every time a new container is deployed, the cluster is impacted. Organizations need context into how infrastructure changes impact the application stack, and how changes to both the infrastructure and application stack affect the end-user experience. Getting all of this data in real-time in a digestible format is a significant challenge in distributed, containerized environments. The New Relic platform offers customers both ease of use and ease of deployment for containerized Kubernetes environments. With a few clicks you have the data and confidence to move forward intelligently. These six steps illustrate how to use the New Relic platform to manage your containers and how they are scheduled: 1. Update to latest Infrastructure agent and enable Kubernetes integration To get started, you'll need to deploy the latest Infrastructure agent onto a Kubernetes cluster with a DaemonSet. Leveraging DaemonSets is vital in dynamic, containerized environments, because when a new node is deployed or the cluster scales up or down, the DaemonSet ensures the New Relic agent is running on these new nodes. In addition, to build a complete picture of your Kubernetes environment, New Relic aggregates data from many resources, including Kube-state metrics. New Relic's âKubernetes awareâ approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health Once the Kubernetes integration is installed, you can access the New Relic Kubernetes cluster explorer, which offers a differentiated, intuitive way to visualize the health and performance of Kubernetes clusters. It applies advanced capabilities to filter, sort, and search for Kubernetes entities, helping teams understand the relationships and dependencies within an environment. It's a powerful and innovative solution to the challenges associated with running Kubernetes at massive scale. 3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment Above and beyond what the cluster explorer provides, New Relic provides out-of-the-box dashboards that allow customers to analyze performance and operating metrics of their Kubernetes environments. Key metrics include the number of containers, resource consumption, pending pods, out of memory (OOM) kills, and stuck pods. These metrics may be particularly relevant to Kubernetes administrators who require reliable, up-to-date information on resource consumption against pre-set thresholds. Access these dashboards directly from the cluster explorer where you can first visually explore your cluster and then use filters to drive down into specific dashboards that match that filter. 4. Monitor applications running in Kubernetes with APM One advantage of New Relic's Infrastructure agent being application-aware is that the cluster explorer is automatically aware of New Relic agents that are deployed on new applications. To fully exploit these capabilities, we recommend monitoring all existing and future containerized applications running in Kubernetes by installing the APM agent on them. Starting again from the cluster explorer, you can dig into what's happening in your applications from the context of the Kubernetes cluster. This gives you the ability to intuitively correlate your infrastructure and applications and begin analytically troubleshooting across the stack. Cloud-native applications use many interconnected services. The cluster explorer will correlate the application and link to its distributed tracings. In complex systems the ability to trace and identify pathways and latency bottlenecks are not optional. Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics If you are orchestrating an end-user facing application, New Relic allows you to view the end-to-end impact your infrastructure and services have on your customer experience. We tackle end-user management in two ways: With Synthetics, you can track application availability and performance from a wide variety of global locations visualizing if customer experience is impacted due to geography. With Browser and Mobile, we recommend monitoring such KPIs as load time and availability. Marrying end-user data with metrics and dashboards provided by the cluster explorer enables operators, administrators, app developers, and business personnel to align on common initiatives. 6. Bring teams together with dashboards tailored to specific business use cases and KPIs With dashboards, you can build custom visualizations from an end-to-end service perspective to analyze the cluster, pods, application, and end-user experience in one clean visual display. By using New Relic's dashboards, cross-organizational teams can align to share a common language and single source of truth, helping them make better decisions and drive business impact. The top two rows of this sample dashboard visualize various aspects of a Kubernetes environment while the third row illustrates valuable information regarding the applications that are deployed to this cluster. The bottom row displays the end-user viewpoint. Learn more Actively, where we enable availability monitoring for one user in one location with Synthetics Passively, where you can analyze a macro view of all users across all geographies with Browser monitoring and Mobile monitoring. Bring teams together with dashboards tailored to specific business use cases and KPIs Kubernetes Monitoring Guide",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.71161,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>your</em> containerized <em>environment</em>",
        "sections": "Manage <em>your</em> containerized <em>environment</em>",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " a complete picture of <em>your</em> Kubernetes <em>environment</em>, <em>New</em> <em>Relic</em> aggregates data from many resources, including Kube-state metrics. <em>New</em> <em>Relic</em>&#x27;s âKubernetes awareâ approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage"
      },
      "id": "603ebf49196a670d96a83d81"
    },
    {
      "sections": [
        "Analyze distributed systems",
        "1. Identify high-priority areas to monitor",
        "2. Instrument to get the visibility you require",
        "3. Create dashboards",
        "4. Dig deeper with distributed tracing",
        "5. Annotate message queues with distributed tracing payload APIs",
        "Example annotated message queue",
        "6. Annotate and tag traces with custom attributes",
        "Tip",
        "7. Leverage Synthetics to get a high-level view of system health",
        "For more help"
      ],
      "title": "Analyze distributed systems",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "af1cf5a80f8254c90509e562fb68a6ded2f7207f",
      "image": "https://docs.newrelic.com/static/838e50badd634f1f188cf821785f6696/2cffa/APm_distributed-tracing-catalyst-TWO.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/analyze-distributed-systems/",
      "published_at": "2021-05-21T23:12:05Z",
      "updated_at": "2021-03-16T11:07:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In a monolithic application, a simple stack trace can contain enough diagnostic data to determine the root cause of a code defect. But cloud computing and microservices have blurred the lines between software and infrastructure; in modern architectures, requests are distributed across many smaller servicesâoften with ephemeral lifespansâhosted in both on-premise and cloud environments. Spotting code defects becomes much more complex. APM's distributed tracing automatically helps teams troubleshoot such distributed systems. Distributed traces are just one component of a well-monitored system. You need a holistic view of your distributed system, especially when tracking the root cause of a defect, as there are volumes of data to evaluate and understand. When managing a microservices environment, it's critical that you have the capability to spot bottlenecks and problem spans quickly so that you don't compromise your mean-time-to-resolution (MTTR) or end-user experience. At New Relic, we understand these challenges inherently. In our journey, we've transitioned from a Ruby monolith to a multi-language distributed environment built on more than 300 microservices, for which we average 50 code deploys a day. Such challenges inform both how we've built and how we monitor New Relic. Use the New Relic platform to translate your data into relevant insights, so you can collaborate around a common framework to build context and quickly optimize and troubleshoot your complex, distributed systems. 1. Identify high-priority areas to monitor Distributed systems are complex. Before engaging with the New Relic platform, we recommend that you identify the most critical areas of your systems to observe, and focus on instrumenting those high-priority areas first. Google's SRE handbook suggests monitoring the \"four golden signals\": traffic, latency, errors, and saturation, as shown in the following dashboard: Dashboards: Visualize key areas to monitor with dashboards. Too often, teams monitor what is either 1) easy to measure or 2) interpretable. Avoid this fallacy. When making choices about what to monitor, involve product managers and other stakeholders from your organization. Your goal is to monitor what matters to your business, not to overload your teams with noise. 2. Instrument to get the visibility you require Once you've identified your key priorities, instrument the appropriate parts of your system with the New Relic platform. Monitor your web apps with APM. See compatibility and requirements for New Relic agents and products to learn precise compatibility details for each supported language and then install the APM agent on your application stack. Steps for installing APM agents vary based on language. Enable distributed tracing for APM, which will affect some existing APM features. If you're accustomed to using APM without distributed tracing, read the transition guide before you enable this feature. Monitor your compute resources with Infrastructure. See compatibility and requirements for New Relic Infrastructure for supported operating systems and environments. You can also instrument other products and services with on-host integrations. Monitor your front-end experience with Mobile and Browser. See compatibility and requirements for Mobile and for Browser. 3. Create dashboards Use dashboards to get an overview of your entire system and baseline performance, so you can better understand how the components work together. Insights provides a single framework for aligning disparate teams around relevant data. Approach this first build as your launching point, giving your teams something to react to as you begin to ascribe context to your system. You should continue to build and iterate your dashboards as you analyze, troubleshoot, and optimize your distributed system. Even after you have a basic understanding of your system, use dashboards to inform the decisions you make going forward. Dashboards provide central repository of truth, allowing all stakeholders to build context about the health of your system. Here is an example of a query that displays the slowest applications. SELECT percentile(duration, 99) as 'Slowest duration' FROM Transaction FACET name Copy Using this query you can focus on the slowest application to dig deeper: After running the query, dashboards displays the slowest durations. 4. Dig deeper with distributed tracing After you have basic instrumentation and contextual dashboards in place, you can begin to dig deeper to troubleshoot or optimize your system. A differentiated feature in New Relic One's Global Distributed Tracing is that you can come in with vague context for what you're investigating and search across all accounts and traces to get down to the actual user interactions that have those attributes somewhere in their trace. You no longer must begin with the application or specific entity to search for traces that include that application. For example, start with an analysis of your complex service calls, using the distributed tracing UI to: View a scatter plot chart showing the frequency, duration, and other facets of your distributed traces Group traces by root entry, service, service entry, or traces with errors View a trace list Filter specific traces to meet certain parameters You'll likely discover that you want to take the analysis one step further by annotating your traces with information that adds context to your troubleshooting, like User ID. You can do this in New Relic using custom attributes. one.newrelic.com > APM > Distributed tracing: use the distributed tracing UI to monitor and analyze modern distributed systems. 5. Annotate message queues with distributed tracing payload APIs To see connections between services in some environmentsâfor example, in a system that relies heavily on queuesâyou may need to do some manual instrumentation using the distributed tracing payload APIs to ensure you're propagating the payload. This gives agents the necessary context to create spans with the right correlation; you'll see end-to-end traces for all linked services, including those that cross through the queue. Example annotated message queue For example: Start a transaction. Create the distributed tracing payload on the producer service within a New Relic transaction. As part of the message, add the distributed tracing payload. âânewrelic.setTransactionName(\"Send Message\") // Create SQS service object var sqs = new AWS.SQS({apiVersion: '2012-11-05'}); var transactionHandle = newrelic.getTransaction(); var payload = transactionHandle.createDistributedTracePayload(); var jsonPayload = payload.text(); //add the jsonPayload as a MessageAttribute var params = { DelaySeconds: 10, MessageAttributes: { \"Testing\": { DataType: \"String\", StringValue: \"123\" }, \"TraceContext\": { DataType: \"String\", StringValue: jsonPayload } }, MessageBody: \"Testing 123\", QueueUrl: \"https://sqs.us-west-2.amazonaws.com/408155283954/sqs-testing\" }; Copy With the context of a transaction, receive the payload on the consumer service. sqs.receiveMessage(params, function(err, data) { if (err) { console.log(\"Receive Error\", err); } else if (data && data.Messages) { console.log(\"trace context:\") var traceContext = data.Messages[0].MessageAttributes.TraceContext.StringValue; if (traceContext != \"\") { var transactionHandle = newrelic.getTransaction(); transactionHandle.acceptDistributedTracePayload(traceContext); } Copy 6. Annotate and tag traces with custom attributes We recommend that you use custom attributes to decorate events with additional information for better tracing. For example, by adding key-value pairs, you can attach a user ID to trace a specific user through the call stack and review failing requests to determine if that user is having an unusually poor experience. We recommend adding custom attributes based on your use case; for example, if your instrumenting an order management system, you could add an order number custom attribute to your traces. To add custom attributes, you must first enable them for your agent, and then make an API call to record the attribute. Tip For more agent-specific information on collecting custom attributes, see Collect custom attributes sqs.sendMessage(params, function(err, data) { if (err) { res.send(\"Error: \"+ err); } else { res.send(\"Success! Message ID: \"+ data.MessageId); newrelic.addCustomAttribute(\"Message ID\", data.MessageId) } }); Copy 7. Leverage Synthetics to get a high-level view of system health In complex, distributed systems, you need to track and monitor many signals. Sometimes it may be that no one signal is concerning, yet your whole system is behaving anomalously. To get a complete picture, it's critical to analyze symptomatic data in tandem with system-level data. Synthetics allows you to interact with the entire system as an external user would, giving your teams high-level checks for performance and user experience. These external checks help you understand if the entire system is doing what you want regardless of what specific signals may indicate. For more help For more tips and best practices on distributed tracing and custom attributes, see the following: Distributed Tracing Anomaly Detection: A Faster, Easier Way to Troubleshoot Microservices Environments Introduction to distributed tracing Collect custom attributes",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.70842,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " that you don&#x27;t compromise <em>your</em> mean-time-to-resolution (MTTR) or end-user experience. At <em>New</em> <em>Relic</em>, we understand these challenges inherently. In our journey, we&#x27;ve transitioned from a Ruby monolith to a multi-language distributed <em>environment</em> built on more than 300 microservices, for which we average"
      },
      "id": "603ebd8264441f02694e887f"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment": [
    {
      "sections": [
        "Iterate and measure impact: Track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: Track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "64fab5d31ae90da92debca9bc0eb802ebe731c2b",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T09:11:58Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Proper instrumentation gives teams full visibility into the impact of the changes they make in a system. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation and reduce the impact to other work happening in the system. Prerequisite Before starting this tutorial, complete the Establish objectives and baselines. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they're consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make across them are correct, and eliminate any anomalies before pushing code to production. Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights and use NRQL and external integrations to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in a DevOps transformation. 2. Add automated deployment markers It's important to track deployments and the impact code and infrastructure changes have on your end-user experience. Using deployment markers in New Relic APM, you can record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (for example, the user, revision, or change-log). APM displays a vertical line, or âmarker,â on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application. Additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is a valuable way to determine the root cause of immediate, long-term, or gradual degradations in your application. New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test your pipeline with Infrastructure An important part of optimizing your cloud native environment is a making a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names, which is a good fit for this model. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you're satisfied with the application's performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 332.99408,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Integrate measurements into <em>your</em> development process",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test <em>your</em> pipeline with Infrastructure An important part of optimizing <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em> is a making a cultural shift toward smaller, more frequent changes to <em>your</em> code"
      },
      "id": "603ebdad196a67b212a83ded"
    },
    {
      "sections": [
        "Adopt cloud services",
        "1. Identify services and technologies",
        "2. Deploy New Relic Infrastructure",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "Tip",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD pipeline integration",
        "8. AWS Lambda Monitoring"
      ],
      "title": "Adopt cloud services",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "4a8e675e4231295287e69402c8c5ff9b05a6103b",
      "image": "https://docs.newrelic.com/static/4159294d05ee078268a7b287af99a72f/c1b63/adopt_cloud.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services/",
      "published_at": "2021-05-22T09:32:28Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've recently completed your cloud migration, have been using cloud-based services for a while, or have always been in the cloud, you may find yourself deploying modern, cutting-edge technologies and services. It's important to develop the ability to adopt new services easily and with confidence; innovation never stops for companies operating in the cloud, and a company's willingness to embrace new technology can give it a major competitive differentiator. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate, for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions. They may be cloud-based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations, you want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services. This allows your team to deploy faster, to adopt new services with confidence, to make better business decisions, and in general to expand its technology horizons. Here are the steps to using the New Relic Platform to monitor your modern technologies and cloud services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies and new services that might impact your organization's application environment. 2. Deploy New Relic Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified in Step One so that you can monitor your cloud services. If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations As you integrate new cloud services, you can use New Relic to monitor and report data about these services; giving you a single, comprehensive overview of your entire architecture. To configure cloud service integrations, link your Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP) service provider account with New Relic. 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of an Insights dashboard with data about vendors, technologies, services, instances, and other important details for DevOps teams. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all changes to a system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all AWS Elastic Load Balancing (ALB) systems for the ALB monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD pipeline integration It's important to track deployments and the impact that code and infrastructure changes have on your end-user experience. New Relic APM deployment markers allow you to record deployments for each application. A deployment marker is an event indicating that a deployment happened. You can pair markers with metadata from your source code management (SCM) system ( including user IDs, revisions, and change logs.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root causes of immediate, long-term, or gradual degradations in your applications. Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment, as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible Puppet 8. AWS Lambda Monitoring New Relic One features an updated APM agent that is highly optimized from a cost and time perspective for ephemeral Lambda functions. Enable New Relic monitoring of AWS Lambda to to assess invocations, error rate, function duration, cold starts, and more. You can also take advantage of New Relic's Infrastructure integration with Lambda for additional reporting capabilities.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 332.99408,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adopt <em>cloud</em> services",
        "sections": "2. Deploy <em>New</em> <em>Relic</em> Infrastructure",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " the <em>New</em> <em>Relic</em> Platform to monitor <em>your</em> modern technologies and <em>cloud</em> services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What <em>cloud</em>-based applications do I have? What are the underlying <em>cloud</em>-based services, technologies"
      },
      "id": "603ebf09e7b9d2071a2a0806"
    },
    {
      "sections": [
        "Analyze distributed systems",
        "1. Identify high-priority areas to monitor",
        "2. Instrument to get the visibility you require",
        "3. Create dashboards",
        "4. Dig deeper with distributed tracing",
        "5. Annotate message queues with distributed tracing payload APIs",
        "Example annotated message queue",
        "6. Annotate and tag traces with custom attributes",
        "Tip",
        "7. Leverage Synthetics to get a high-level view of system health",
        "For more help"
      ],
      "title": "Analyze distributed systems",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "af1cf5a80f8254c90509e562fb68a6ded2f7207f",
      "image": "https://docs.newrelic.com/static/838e50badd634f1f188cf821785f6696/2cffa/APm_distributed-tracing-catalyst-TWO.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/analyze-distributed-systems/",
      "published_at": "2021-05-21T23:12:05Z",
      "updated_at": "2021-03-16T11:07:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In a monolithic application, a simple stack trace can contain enough diagnostic data to determine the root cause of a code defect. But cloud computing and microservices have blurred the lines between software and infrastructure; in modern architectures, requests are distributed across many smaller servicesâoften with ephemeral lifespansâhosted in both on-premise and cloud environments. Spotting code defects becomes much more complex. APM's distributed tracing automatically helps teams troubleshoot such distributed systems. Distributed traces are just one component of a well-monitored system. You need a holistic view of your distributed system, especially when tracking the root cause of a defect, as there are volumes of data to evaluate and understand. When managing a microservices environment, it's critical that you have the capability to spot bottlenecks and problem spans quickly so that you don't compromise your mean-time-to-resolution (MTTR) or end-user experience. At New Relic, we understand these challenges inherently. In our journey, we've transitioned from a Ruby monolith to a multi-language distributed environment built on more than 300 microservices, for which we average 50 code deploys a day. Such challenges inform both how we've built and how we monitor New Relic. Use the New Relic platform to translate your data into relevant insights, so you can collaborate around a common framework to build context and quickly optimize and troubleshoot your complex, distributed systems. 1. Identify high-priority areas to monitor Distributed systems are complex. Before engaging with the New Relic platform, we recommend that you identify the most critical areas of your systems to observe, and focus on instrumenting those high-priority areas first. Google's SRE handbook suggests monitoring the \"four golden signals\": traffic, latency, errors, and saturation, as shown in the following dashboard: Dashboards: Visualize key areas to monitor with dashboards. Too often, teams monitor what is either 1) easy to measure or 2) interpretable. Avoid this fallacy. When making choices about what to monitor, involve product managers and other stakeholders from your organization. Your goal is to monitor what matters to your business, not to overload your teams with noise. 2. Instrument to get the visibility you require Once you've identified your key priorities, instrument the appropriate parts of your system with the New Relic platform. Monitor your web apps with APM. See compatibility and requirements for New Relic agents and products to learn precise compatibility details for each supported language and then install the APM agent on your application stack. Steps for installing APM agents vary based on language. Enable distributed tracing for APM, which will affect some existing APM features. If you're accustomed to using APM without distributed tracing, read the transition guide before you enable this feature. Monitor your compute resources with Infrastructure. See compatibility and requirements for New Relic Infrastructure for supported operating systems and environments. You can also instrument other products and services with on-host integrations. Monitor your front-end experience with Mobile and Browser. See compatibility and requirements for Mobile and for Browser. 3. Create dashboards Use dashboards to get an overview of your entire system and baseline performance, so you can better understand how the components work together. Insights provides a single framework for aligning disparate teams around relevant data. Approach this first build as your launching point, giving your teams something to react to as you begin to ascribe context to your system. You should continue to build and iterate your dashboards as you analyze, troubleshoot, and optimize your distributed system. Even after you have a basic understanding of your system, use dashboards to inform the decisions you make going forward. Dashboards provide central repository of truth, allowing all stakeholders to build context about the health of your system. Here is an example of a query that displays the slowest applications. SELECT percentile(duration, 99) as 'Slowest duration' FROM Transaction FACET name Copy Using this query you can focus on the slowest application to dig deeper: After running the query, dashboards displays the slowest durations. 4. Dig deeper with distributed tracing After you have basic instrumentation and contextual dashboards in place, you can begin to dig deeper to troubleshoot or optimize your system. A differentiated feature in New Relic One's Global Distributed Tracing is that you can come in with vague context for what you're investigating and search across all accounts and traces to get down to the actual user interactions that have those attributes somewhere in their trace. You no longer must begin with the application or specific entity to search for traces that include that application. For example, start with an analysis of your complex service calls, using the distributed tracing UI to: View a scatter plot chart showing the frequency, duration, and other facets of your distributed traces Group traces by root entry, service, service entry, or traces with errors View a trace list Filter specific traces to meet certain parameters You'll likely discover that you want to take the analysis one step further by annotating your traces with information that adds context to your troubleshooting, like User ID. You can do this in New Relic using custom attributes. one.newrelic.com > APM > Distributed tracing: use the distributed tracing UI to monitor and analyze modern distributed systems. 5. Annotate message queues with distributed tracing payload APIs To see connections between services in some environmentsâfor example, in a system that relies heavily on queuesâyou may need to do some manual instrumentation using the distributed tracing payload APIs to ensure you're propagating the payload. This gives agents the necessary context to create spans with the right correlation; you'll see end-to-end traces for all linked services, including those that cross through the queue. Example annotated message queue For example: Start a transaction. Create the distributed tracing payload on the producer service within a New Relic transaction. As part of the message, add the distributed tracing payload. âânewrelic.setTransactionName(\"Send Message\") // Create SQS service object var sqs = new AWS.SQS({apiVersion: '2012-11-05'}); var transactionHandle = newrelic.getTransaction(); var payload = transactionHandle.createDistributedTracePayload(); var jsonPayload = payload.text(); //add the jsonPayload as a MessageAttribute var params = { DelaySeconds: 10, MessageAttributes: { \"Testing\": { DataType: \"String\", StringValue: \"123\" }, \"TraceContext\": { DataType: \"String\", StringValue: jsonPayload } }, MessageBody: \"Testing 123\", QueueUrl: \"https://sqs.us-west-2.amazonaws.com/408155283954/sqs-testing\" }; Copy With the context of a transaction, receive the payload on the consumer service. sqs.receiveMessage(params, function(err, data) { if (err) { console.log(\"Receive Error\", err); } else if (data && data.Messages) { console.log(\"trace context:\") var traceContext = data.Messages[0].MessageAttributes.TraceContext.StringValue; if (traceContext != \"\") { var transactionHandle = newrelic.getTransaction(); transactionHandle.acceptDistributedTracePayload(traceContext); } Copy 6. Annotate and tag traces with custom attributes We recommend that you use custom attributes to decorate events with additional information for better tracing. For example, by adding key-value pairs, you can attach a user ID to trace a specific user through the call stack and review failing requests to determine if that user is having an unusually poor experience. We recommend adding custom attributes based on your use case; for example, if your instrumenting an order management system, you could add an order number custom attribute to your traces. To add custom attributes, you must first enable them for your agent, and then make an API call to record the attribute. Tip For more agent-specific information on collecting custom attributes, see Collect custom attributes sqs.sendMessage(params, function(err, data) { if (err) { res.send(\"Error: \"+ err); } else { res.send(\"Success! Message ID: \"+ data.MessageId); newrelic.addCustomAttribute(\"Message ID\", data.MessageId) } }); Copy 7. Leverage Synthetics to get a high-level view of system health In complex, distributed systems, you need to track and monitor many signals. Sometimes it may be that no one signal is concerning, yet your whole system is behaving anomalously. To get a complete picture, it's critical to analyze symptomatic data in tandem with system-level data. Synthetics allows you to interact with the entire system as an external user would, giving your teams high-level checks for performance and user experience. These external checks help you understand if the entire system is doing what you want regardless of what specific signals may indicate. For more help For more tips and best practices on distributed tracing and custom attributes, see the following: Distributed Tracing Anomaly Detection: A Faster, Easier Way to Troubleshoot Microservices Environments Introduction to distributed tracing Collect custom attributes",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.70842,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " that you don&#x27;t compromise <em>your</em> mean-time-to-resolution (MTTR) or end-user experience. At <em>New</em> <em>Relic</em>, we understand these challenges inherently. In our journey, we&#x27;ve transitioned from a Ruby monolith to a multi-language distributed <em>environment</em> built on more than 300 microservices, for which we average"
      },
      "id": "603ebd8264441f02694e887f"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/migrate-microservices": [
    {
      "sections": [
        "Iterate and measure impact: Track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: Track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "64fab5d31ae90da92debca9bc0eb802ebe731c2b",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T09:11:58Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Proper instrumentation gives teams full visibility into the impact of the changes they make in a system. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation and reduce the impact to other work happening in the system. Prerequisite Before starting this tutorial, complete the Establish objectives and baselines. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they're consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make across them are correct, and eliminate any anomalies before pushing code to production. Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights and use NRQL and external integrations to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in a DevOps transformation. 2. Add automated deployment markers It's important to track deployments and the impact code and infrastructure changes have on your end-user experience. Using deployment markers in New Relic APM, you can record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (for example, the user, revision, or change-log). APM displays a vertical line, or âmarker,â on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application. Additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is a valuable way to determine the root cause of immediate, long-term, or gradual degradations in your application. New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test your pipeline with Infrastructure An important part of optimizing your cloud native environment is a making a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names, which is a good fit for this model. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you're satisfied with the application's performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 332.99408,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Integrate measurements into <em>your</em> development process",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test <em>your</em> pipeline with Infrastructure An important part of optimizing <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em> is a making a cultural shift toward smaller, more frequent changes to <em>your</em> code"
      },
      "id": "603ebdad196a67b212a83ded"
    },
    {
      "sections": [
        "Adopt cloud services",
        "1. Identify services and technologies",
        "2. Deploy New Relic Infrastructure",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "Tip",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD pipeline integration",
        "8. AWS Lambda Monitoring"
      ],
      "title": "Adopt cloud services",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "4a8e675e4231295287e69402c8c5ff9b05a6103b",
      "image": "https://docs.newrelic.com/static/4159294d05ee078268a7b287af99a72f/c1b63/adopt_cloud.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services/",
      "published_at": "2021-05-22T09:32:28Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've recently completed your cloud migration, have been using cloud-based services for a while, or have always been in the cloud, you may find yourself deploying modern, cutting-edge technologies and services. It's important to develop the ability to adopt new services easily and with confidence; innovation never stops for companies operating in the cloud, and a company's willingness to embrace new technology can give it a major competitive differentiator. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate, for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions. They may be cloud-based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations, you want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services. This allows your team to deploy faster, to adopt new services with confidence, to make better business decisions, and in general to expand its technology horizons. Here are the steps to using the New Relic Platform to monitor your modern technologies and cloud services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies and new services that might impact your organization's application environment. 2. Deploy New Relic Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified in Step One so that you can monitor your cloud services. If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations As you integrate new cloud services, you can use New Relic to monitor and report data about these services; giving you a single, comprehensive overview of your entire architecture. To configure cloud service integrations, link your Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP) service provider account with New Relic. 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of an Insights dashboard with data about vendors, technologies, services, instances, and other important details for DevOps teams. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all changes to a system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all AWS Elastic Load Balancing (ALB) systems for the ALB monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD pipeline integration It's important to track deployments and the impact that code and infrastructure changes have on your end-user experience. New Relic APM deployment markers allow you to record deployments for each application. A deployment marker is an event indicating that a deployment happened. You can pair markers with metadata from your source code management (SCM) system ( including user IDs, revisions, and change logs.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root causes of immediate, long-term, or gradual degradations in your applications. Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment, as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible Puppet 8. AWS Lambda Monitoring New Relic One features an updated APM agent that is highly optimized from a cost and time perspective for ephemeral Lambda functions. Enable New Relic monitoring of AWS Lambda to to assess invocations, error rate, function duration, cold starts, and more. You can also take advantage of New Relic's Infrastructure integration with Lambda for additional reporting capabilities.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 332.99408,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adopt <em>cloud</em> services",
        "sections": "2. Deploy <em>New</em> <em>Relic</em> Infrastructure",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " the <em>New</em> <em>Relic</em> Platform to monitor <em>your</em> modern technologies and <em>cloud</em> services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What <em>cloud</em>-based applications do I have? What are the underlying <em>cloud</em>-based services, technologies"
      },
      "id": "603ebf09e7b9d2071a2a0806"
    },
    {
      "sections": [
        "Manage your containerized environment",
        "1. Update to latest Infrastructure agent and enable Kubernetes integration",
        "2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health",
        "3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment",
        "4. Monitor applications running in Kubernetes with APM",
        "Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics",
        "6. Bring teams together with dashboards tailored to specific business use cases and KPIs",
        "Learn more"
      ],
      "title": "Manage your containerized environment",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "71ba4468ed7d078021ccd705c78e72cfb5e92b5f",
      "image": "https://docs.newrelic.com/static/f744b0e1c8aac86e63f46a5798df58ae/c1b63/cont_environment01.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment/",
      "published_at": "2021-05-22T07:38:41Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Widespread adoption of containers has changed the way applications are written and deployed. Container orchestration technologies such as Kubernetes are making it easier for teams to schedule, deploy, and manage their containerized applications. But challenges still exist that require teams to rethink their environment and application monitoring strategies: Challenge 1: Containers are ephemeral by nature. Knowing the containers or pod or node (host) where the application is currently running is not necessarily an indication of where it was running 5, 15, or 30 minutes ago when the issue occurred. Containers are deployed in dynamic, constantly evolving environments that require a modern monitoring approach. Challenge 2: Often, organizations are adopting containers as they break down monolithic applications into multiple microservices. This new approach introduces new complexity to the system and the sheer scale and dimensionality of containers is hard to conceptualize in an easy-to-understand format. Challenge 3: Delivering a differentiated end-user experience is a key initiative for all organizations, and containers are being adopted to help organizations release better software, faster. But with this tremendous opportunity also comes risk, because every time a new container is deployed, the cluster is impacted. Organizations need context into how infrastructure changes impact the application stack, and how changes to both the infrastructure and application stack affect the end-user experience. Getting all of this data in real-time in a digestible format is a significant challenge in distributed, containerized environments. The New Relic platform offers customers both ease of use and ease of deployment for containerized Kubernetes environments. With a few clicks you have the data and confidence to move forward intelligently. These six steps illustrate how to use the New Relic platform to manage your containers and how they are scheduled: 1. Update to latest Infrastructure agent and enable Kubernetes integration To get started, you'll need to deploy the latest Infrastructure agent onto a Kubernetes cluster with a DaemonSet. Leveraging DaemonSets is vital in dynamic, containerized environments, because when a new node is deployed or the cluster scales up or down, the DaemonSet ensures the New Relic agent is running on these new nodes. In addition, to build a complete picture of your Kubernetes environment, New Relic aggregates data from many resources, including Kube-state metrics. New Relic's âKubernetes awareâ approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health Once the Kubernetes integration is installed, you can access the New Relic Kubernetes cluster explorer, which offers a differentiated, intuitive way to visualize the health and performance of Kubernetes clusters. It applies advanced capabilities to filter, sort, and search for Kubernetes entities, helping teams understand the relationships and dependencies within an environment. It's a powerful and innovative solution to the challenges associated with running Kubernetes at massive scale. 3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment Above and beyond what the cluster explorer provides, New Relic provides out-of-the-box dashboards that allow customers to analyze performance and operating metrics of their Kubernetes environments. Key metrics include the number of containers, resource consumption, pending pods, out of memory (OOM) kills, and stuck pods. These metrics may be particularly relevant to Kubernetes administrators who require reliable, up-to-date information on resource consumption against pre-set thresholds. Access these dashboards directly from the cluster explorer where you can first visually explore your cluster and then use filters to drive down into specific dashboards that match that filter. 4. Monitor applications running in Kubernetes with APM One advantage of New Relic's Infrastructure agent being application-aware is that the cluster explorer is automatically aware of New Relic agents that are deployed on new applications. To fully exploit these capabilities, we recommend monitoring all existing and future containerized applications running in Kubernetes by installing the APM agent on them. Starting again from the cluster explorer, you can dig into what's happening in your applications from the context of the Kubernetes cluster. This gives you the ability to intuitively correlate your infrastructure and applications and begin analytically troubleshooting across the stack. Cloud-native applications use many interconnected services. The cluster explorer will correlate the application and link to its distributed tracings. In complex systems the ability to trace and identify pathways and latency bottlenecks are not optional. Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics If you are orchestrating an end-user facing application, New Relic allows you to view the end-to-end impact your infrastructure and services have on your customer experience. We tackle end-user management in two ways: With Synthetics, you can track application availability and performance from a wide variety of global locations visualizing if customer experience is impacted due to geography. With Browser and Mobile, we recommend monitoring such KPIs as load time and availability. Marrying end-user data with metrics and dashboards provided by the cluster explorer enables operators, administrators, app developers, and business personnel to align on common initiatives. 6. Bring teams together with dashboards tailored to specific business use cases and KPIs With dashboards, you can build custom visualizations from an end-to-end service perspective to analyze the cluster, pods, application, and end-user experience in one clean visual display. By using New Relic's dashboards, cross-organizational teams can align to share a common language and single source of truth, helping them make better decisions and drive business impact. The top two rows of this sample dashboard visualize various aspects of a Kubernetes environment while the third row illustrates valuable information regarding the applications that are deployed to this cluster. The bottom row displays the end-user viewpoint. Learn more Actively, where we enable availability monitoring for one user in one location with Synthetics Passively, where you can analyze a macro view of all users across all geographies with Browser monitoring and Mobile monitoring. Bring teams together with dashboards tailored to specific business use cases and KPIs Kubernetes Monitoring Guide",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.71161,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>your</em> containerized <em>environment</em>",
        "sections": "Manage <em>your</em> containerized <em>environment</em>",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " a complete picture of <em>your</em> Kubernetes <em>environment</em>, <em>New</em> <em>Relic</em> aggregates data from many resources, including Kube-state metrics. <em>New</em> <em>Relic</em>&#x27;s âKubernetes awareâ approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage"
      },
      "id": "603ebf49196a670d96a83d81"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/optimize-cloud-architecture-spend-continuously-improve-your-modern-cloud-environment": [
    {
      "sections": [
        "Iterate and measure impact: Track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: Track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "64fab5d31ae90da92debca9bc0eb802ebe731c2b",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T09:11:58Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Proper instrumentation gives teams full visibility into the impact of the changes they make in a system. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation and reduce the impact to other work happening in the system. Prerequisite Before starting this tutorial, complete the Establish objectives and baselines. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they're consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make across them are correct, and eliminate any anomalies before pushing code to production. Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights and use NRQL and external integrations to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in a DevOps transformation. 2. Add automated deployment markers It's important to track deployments and the impact code and infrastructure changes have on your end-user experience. Using deployment markers in New Relic APM, you can record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (for example, the user, revision, or change-log). APM displays a vertical line, or âmarker,â on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application. Additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is a valuable way to determine the root cause of immediate, long-term, or gradual degradations in your application. New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test your pipeline with Infrastructure An important part of optimizing your cloud native environment is a making a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names, which is a good fit for this model. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you're satisfied with the application's performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 332.99396,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Integrate measurements into <em>your</em> development process",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test <em>your</em> pipeline with Infrastructure An important part of optimizing <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em> is a making a cultural shift toward smaller, more frequent changes to <em>your</em> code"
      },
      "id": "603ebdad196a67b212a83ded"
    },
    {
      "sections": [
        "Adopt cloud services",
        "1. Identify services and technologies",
        "2. Deploy New Relic Infrastructure",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "Tip",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD pipeline integration",
        "8. AWS Lambda Monitoring"
      ],
      "title": "Adopt cloud services",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "4a8e675e4231295287e69402c8c5ff9b05a6103b",
      "image": "https://docs.newrelic.com/static/4159294d05ee078268a7b287af99a72f/c1b63/adopt_cloud.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services/",
      "published_at": "2021-05-22T09:32:28Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've recently completed your cloud migration, have been using cloud-based services for a while, or have always been in the cloud, you may find yourself deploying modern, cutting-edge technologies and services. It's important to develop the ability to adopt new services easily and with confidence; innovation never stops for companies operating in the cloud, and a company's willingness to embrace new technology can give it a major competitive differentiator. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate, for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions. They may be cloud-based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations, you want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services. This allows your team to deploy faster, to adopt new services with confidence, to make better business decisions, and in general to expand its technology horizons. Here are the steps to using the New Relic Platform to monitor your modern technologies and cloud services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies and new services that might impact your organization's application environment. 2. Deploy New Relic Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified in Step One so that you can monitor your cloud services. If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations As you integrate new cloud services, you can use New Relic to monitor and report data about these services; giving you a single, comprehensive overview of your entire architecture. To configure cloud service integrations, link your Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP) service provider account with New Relic. 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of an Insights dashboard with data about vendors, technologies, services, instances, and other important details for DevOps teams. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all changes to a system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all AWS Elastic Load Balancing (ALB) systems for the ALB monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD pipeline integration It's important to track deployments and the impact that code and infrastructure changes have on your end-user experience. New Relic APM deployment markers allow you to record deployments for each application. A deployment marker is an event indicating that a deployment happened. You can pair markers with metadata from your source code management (SCM) system ( including user IDs, revisions, and change logs.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root causes of immediate, long-term, or gradual degradations in your applications. Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment, as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible Puppet 8. AWS Lambda Monitoring New Relic One features an updated APM agent that is highly optimized from a cost and time perspective for ephemeral Lambda functions. Enable New Relic monitoring of AWS Lambda to to assess invocations, error rate, function duration, cold starts, and more. You can also take advantage of New Relic's Infrastructure integration with Lambda for additional reporting capabilities.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 332.99396,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adopt <em>cloud</em> services",
        "sections": "2. Deploy <em>New</em> <em>Relic</em> Infrastructure",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " the <em>New</em> <em>Relic</em> Platform to monitor <em>your</em> modern technologies and <em>cloud</em> services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What <em>cloud</em>-based applications do I have? What are the underlying <em>cloud</em>-based services, technologies"
      },
      "id": "603ebf09e7b9d2071a2a0806"
    },
    {
      "sections": [
        "Manage your containerized environment",
        "1. Update to latest Infrastructure agent and enable Kubernetes integration",
        "2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health",
        "3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment",
        "4. Monitor applications running in Kubernetes with APM",
        "Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics",
        "6. Bring teams together with dashboards tailored to specific business use cases and KPIs",
        "Learn more"
      ],
      "title": "Manage your containerized environment",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "71ba4468ed7d078021ccd705c78e72cfb5e92b5f",
      "image": "https://docs.newrelic.com/static/f744b0e1c8aac86e63f46a5798df58ae/c1b63/cont_environment01.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment/",
      "published_at": "2021-05-22T07:38:41Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Widespread adoption of containers has changed the way applications are written and deployed. Container orchestration technologies such as Kubernetes are making it easier for teams to schedule, deploy, and manage their containerized applications. But challenges still exist that require teams to rethink their environment and application monitoring strategies: Challenge 1: Containers are ephemeral by nature. Knowing the containers or pod or node (host) where the application is currently running is not necessarily an indication of where it was running 5, 15, or 30 minutes ago when the issue occurred. Containers are deployed in dynamic, constantly evolving environments that require a modern monitoring approach. Challenge 2: Often, organizations are adopting containers as they break down monolithic applications into multiple microservices. This new approach introduces new complexity to the system and the sheer scale and dimensionality of containers is hard to conceptualize in an easy-to-understand format. Challenge 3: Delivering a differentiated end-user experience is a key initiative for all organizations, and containers are being adopted to help organizations release better software, faster. But with this tremendous opportunity also comes risk, because every time a new container is deployed, the cluster is impacted. Organizations need context into how infrastructure changes impact the application stack, and how changes to both the infrastructure and application stack affect the end-user experience. Getting all of this data in real-time in a digestible format is a significant challenge in distributed, containerized environments. The New Relic platform offers customers both ease of use and ease of deployment for containerized Kubernetes environments. With a few clicks you have the data and confidence to move forward intelligently. These six steps illustrate how to use the New Relic platform to manage your containers and how they are scheduled: 1. Update to latest Infrastructure agent and enable Kubernetes integration To get started, you'll need to deploy the latest Infrastructure agent onto a Kubernetes cluster with a DaemonSet. Leveraging DaemonSets is vital in dynamic, containerized environments, because when a new node is deployed or the cluster scales up or down, the DaemonSet ensures the New Relic agent is running on these new nodes. In addition, to build a complete picture of your Kubernetes environment, New Relic aggregates data from many resources, including Kube-state metrics. New Relic's âKubernetes awareâ approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health Once the Kubernetes integration is installed, you can access the New Relic Kubernetes cluster explorer, which offers a differentiated, intuitive way to visualize the health and performance of Kubernetes clusters. It applies advanced capabilities to filter, sort, and search for Kubernetes entities, helping teams understand the relationships and dependencies within an environment. It's a powerful and innovative solution to the challenges associated with running Kubernetes at massive scale. 3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment Above and beyond what the cluster explorer provides, New Relic provides out-of-the-box dashboards that allow customers to analyze performance and operating metrics of their Kubernetes environments. Key metrics include the number of containers, resource consumption, pending pods, out of memory (OOM) kills, and stuck pods. These metrics may be particularly relevant to Kubernetes administrators who require reliable, up-to-date information on resource consumption against pre-set thresholds. Access these dashboards directly from the cluster explorer where you can first visually explore your cluster and then use filters to drive down into specific dashboards that match that filter. 4. Monitor applications running in Kubernetes with APM One advantage of New Relic's Infrastructure agent being application-aware is that the cluster explorer is automatically aware of New Relic agents that are deployed on new applications. To fully exploit these capabilities, we recommend monitoring all existing and future containerized applications running in Kubernetes by installing the APM agent on them. Starting again from the cluster explorer, you can dig into what's happening in your applications from the context of the Kubernetes cluster. This gives you the ability to intuitively correlate your infrastructure and applications and begin analytically troubleshooting across the stack. Cloud-native applications use many interconnected services. The cluster explorer will correlate the application and link to its distributed tracings. In complex systems the ability to trace and identify pathways and latency bottlenecks are not optional. Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics If you are orchestrating an end-user facing application, New Relic allows you to view the end-to-end impact your infrastructure and services have on your customer experience. We tackle end-user management in two ways: With Synthetics, you can track application availability and performance from a wide variety of global locations visualizing if customer experience is impacted due to geography. With Browser and Mobile, we recommend monitoring such KPIs as load time and availability. Marrying end-user data with metrics and dashboards provided by the cluster explorer enables operators, administrators, app developers, and business personnel to align on common initiatives. 6. Bring teams together with dashboards tailored to specific business use cases and KPIs With dashboards, you can build custom visualizations from an end-to-end service perspective to analyze the cluster, pods, application, and end-user experience in one clean visual display. By using New Relic's dashboards, cross-organizational teams can align to share a common language and single source of truth, helping them make better decisions and drive business impact. The top two rows of this sample dashboard visualize various aspects of a Kubernetes environment while the third row illustrates valuable information regarding the applications that are deployed to this cluster. The bottom row displays the end-user viewpoint. Learn more Actively, where we enable availability monitoring for one user in one location with Synthetics Passively, where you can analyze a macro view of all users across all geographies with Browser monitoring and Mobile monitoring. Bring teams together with dashboards tailored to specific business use cases and KPIs Kubernetes Monitoring Guide",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.7116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>your</em> containerized <em>environment</em>",
        "sections": "Manage <em>your</em> containerized <em>environment</em>",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " a complete picture of <em>your</em> Kubernetes <em>environment</em>, <em>New</em> <em>Relic</em> aggregates data from many resources, including Kube-state metrics. <em>New</em> <em>Relic</em>&#x27;s âKubernetes awareâ approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage"
      },
      "id": "603ebf49196a670d96a83d81"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/set-proactive-alerts-align-teams-tools-processes-incident-response": [
    {
      "sections": [
        "Iterate and measure impact: Track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: Track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "64fab5d31ae90da92debca9bc0eb802ebe731c2b",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T09:11:58Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Proper instrumentation gives teams full visibility into the impact of the changes they make in a system. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation and reduce the impact to other work happening in the system. Prerequisite Before starting this tutorial, complete the Establish objectives and baselines. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they're consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make across them are correct, and eliminate any anomalies before pushing code to production. Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights and use NRQL and external integrations to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in a DevOps transformation. 2. Add automated deployment markers It's important to track deployments and the impact code and infrastructure changes have on your end-user experience. Using deployment markers in New Relic APM, you can record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (for example, the user, revision, or change-log). APM displays a vertical line, or âmarker,â on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application. Additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is a valuable way to determine the root cause of immediate, long-term, or gradual degradations in your application. New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test your pipeline with Infrastructure An important part of optimizing your cloud native environment is a making a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names, which is a good fit for this model. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you're satisfied with the application's performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 332.99396,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Integrate measurements into <em>your</em> development process",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test <em>your</em> pipeline with Infrastructure An important part of optimizing <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em> is a making a cultural shift toward smaller, more frequent changes to <em>your</em> code"
      },
      "id": "603ebdad196a67b212a83ded"
    },
    {
      "sections": [
        "Adopt cloud services",
        "1. Identify services and technologies",
        "2. Deploy New Relic Infrastructure",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "Tip",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD pipeline integration",
        "8. AWS Lambda Monitoring"
      ],
      "title": "Adopt cloud services",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "4a8e675e4231295287e69402c8c5ff9b05a6103b",
      "image": "https://docs.newrelic.com/static/4159294d05ee078268a7b287af99a72f/c1b63/adopt_cloud.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services/",
      "published_at": "2021-05-22T09:32:28Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've recently completed your cloud migration, have been using cloud-based services for a while, or have always been in the cloud, you may find yourself deploying modern, cutting-edge technologies and services. It's important to develop the ability to adopt new services easily and with confidence; innovation never stops for companies operating in the cloud, and a company's willingness to embrace new technology can give it a major competitive differentiator. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate, for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions. They may be cloud-based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations, you want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services. This allows your team to deploy faster, to adopt new services with confidence, to make better business decisions, and in general to expand its technology horizons. Here are the steps to using the New Relic Platform to monitor your modern technologies and cloud services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies and new services that might impact your organization's application environment. 2. Deploy New Relic Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified in Step One so that you can monitor your cloud services. If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations As you integrate new cloud services, you can use New Relic to monitor and report data about these services; giving you a single, comprehensive overview of your entire architecture. To configure cloud service integrations, link your Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP) service provider account with New Relic. 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of an Insights dashboard with data about vendors, technologies, services, instances, and other important details for DevOps teams. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all changes to a system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all AWS Elastic Load Balancing (ALB) systems for the ALB monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD pipeline integration It's important to track deployments and the impact that code and infrastructure changes have on your end-user experience. New Relic APM deployment markers allow you to record deployments for each application. A deployment marker is an event indicating that a deployment happened. You can pair markers with metadata from your source code management (SCM) system ( including user IDs, revisions, and change logs.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root causes of immediate, long-term, or gradual degradations in your applications. Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment, as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible Puppet 8. AWS Lambda Monitoring New Relic One features an updated APM agent that is highly optimized from a cost and time perspective for ephemeral Lambda functions. Enable New Relic monitoring of AWS Lambda to to assess invocations, error rate, function duration, cold starts, and more. You can also take advantage of New Relic's Infrastructure integration with Lambda for additional reporting capabilities.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 332.99396,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adopt <em>cloud</em> services",
        "sections": "2. Deploy <em>New</em> <em>Relic</em> Infrastructure",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " the <em>New</em> <em>Relic</em> Platform to monitor <em>your</em> modern technologies and <em>cloud</em> services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What <em>cloud</em>-based applications do I have? What are the underlying <em>cloud</em>-based services, technologies"
      },
      "id": "603ebf09e7b9d2071a2a0806"
    },
    {
      "sections": [
        "Manage your containerized environment",
        "1. Update to latest Infrastructure agent and enable Kubernetes integration",
        "2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health",
        "3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment",
        "4. Monitor applications running in Kubernetes with APM",
        "Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics",
        "6. Bring teams together with dashboards tailored to specific business use cases and KPIs",
        "Learn more"
      ],
      "title": "Manage your containerized environment",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "71ba4468ed7d078021ccd705c78e72cfb5e92b5f",
      "image": "https://docs.newrelic.com/static/f744b0e1c8aac86e63f46a5798df58ae/c1b63/cont_environment01.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment/",
      "published_at": "2021-05-22T07:38:41Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Widespread adoption of containers has changed the way applications are written and deployed. Container orchestration technologies such as Kubernetes are making it easier for teams to schedule, deploy, and manage their containerized applications. But challenges still exist that require teams to rethink their environment and application monitoring strategies: Challenge 1: Containers are ephemeral by nature. Knowing the containers or pod or node (host) where the application is currently running is not necessarily an indication of where it was running 5, 15, or 30 minutes ago when the issue occurred. Containers are deployed in dynamic, constantly evolving environments that require a modern monitoring approach. Challenge 2: Often, organizations are adopting containers as they break down monolithic applications into multiple microservices. This new approach introduces new complexity to the system and the sheer scale and dimensionality of containers is hard to conceptualize in an easy-to-understand format. Challenge 3: Delivering a differentiated end-user experience is a key initiative for all organizations, and containers are being adopted to help organizations release better software, faster. But with this tremendous opportunity also comes risk, because every time a new container is deployed, the cluster is impacted. Organizations need context into how infrastructure changes impact the application stack, and how changes to both the infrastructure and application stack affect the end-user experience. Getting all of this data in real-time in a digestible format is a significant challenge in distributed, containerized environments. The New Relic platform offers customers both ease of use and ease of deployment for containerized Kubernetes environments. With a few clicks you have the data and confidence to move forward intelligently. These six steps illustrate how to use the New Relic platform to manage your containers and how they are scheduled: 1. Update to latest Infrastructure agent and enable Kubernetes integration To get started, you'll need to deploy the latest Infrastructure agent onto a Kubernetes cluster with a DaemonSet. Leveraging DaemonSets is vital in dynamic, containerized environments, because when a new node is deployed or the cluster scales up or down, the DaemonSet ensures the New Relic agent is running on these new nodes. In addition, to build a complete picture of your Kubernetes environment, New Relic aggregates data from many resources, including Kube-state metrics. New Relic's âKubernetes awareâ approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health Once the Kubernetes integration is installed, you can access the New Relic Kubernetes cluster explorer, which offers a differentiated, intuitive way to visualize the health and performance of Kubernetes clusters. It applies advanced capabilities to filter, sort, and search for Kubernetes entities, helping teams understand the relationships and dependencies within an environment. It's a powerful and innovative solution to the challenges associated with running Kubernetes at massive scale. 3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment Above and beyond what the cluster explorer provides, New Relic provides out-of-the-box dashboards that allow customers to analyze performance and operating metrics of their Kubernetes environments. Key metrics include the number of containers, resource consumption, pending pods, out of memory (OOM) kills, and stuck pods. These metrics may be particularly relevant to Kubernetes administrators who require reliable, up-to-date information on resource consumption against pre-set thresholds. Access these dashboards directly from the cluster explorer where you can first visually explore your cluster and then use filters to drive down into specific dashboards that match that filter. 4. Monitor applications running in Kubernetes with APM One advantage of New Relic's Infrastructure agent being application-aware is that the cluster explorer is automatically aware of New Relic agents that are deployed on new applications. To fully exploit these capabilities, we recommend monitoring all existing and future containerized applications running in Kubernetes by installing the APM agent on them. Starting again from the cluster explorer, you can dig into what's happening in your applications from the context of the Kubernetes cluster. This gives you the ability to intuitively correlate your infrastructure and applications and begin analytically troubleshooting across the stack. Cloud-native applications use many interconnected services. The cluster explorer will correlate the application and link to its distributed tracings. In complex systems the ability to trace and identify pathways and latency bottlenecks are not optional. Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics If you are orchestrating an end-user facing application, New Relic allows you to view the end-to-end impact your infrastructure and services have on your customer experience. We tackle end-user management in two ways: With Synthetics, you can track application availability and performance from a wide variety of global locations visualizing if customer experience is impacted due to geography. With Browser and Mobile, we recommend monitoring such KPIs as load time and availability. Marrying end-user data with metrics and dashboards provided by the cluster explorer enables operators, administrators, app developers, and business personnel to align on common initiatives. 6. Bring teams together with dashboards tailored to specific business use cases and KPIs With dashboards, you can build custom visualizations from an end-to-end service perspective to analyze the cluster, pods, application, and end-user experience in one clean visual display. By using New Relic's dashboards, cross-organizational teams can align to share a common language and single source of truth, helping them make better decisions and drive business impact. The top two rows of this sample dashboard visualize various aspects of a Kubernetes environment while the third row illustrates valuable information regarding the applications that are deployed to this cluster. The bottom row displays the end-user viewpoint. Learn more Actively, where we enable availability monitoring for one user in one location with Synthetics Passively, where you can analyze a macro view of all users across all geographies with Browser monitoring and Mobile monitoring. Bring teams together with dashboards tailored to specific business use cases and KPIs Kubernetes Monitoring Guide",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.7116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>your</em> containerized <em>environment</em>",
        "sections": "Manage <em>your</em> containerized <em>environment</em>",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " a complete picture of <em>your</em> Kubernetes <em>environment</em>, <em>New</em> <em>Relic</em> aggregates data from many resources, including Kube-state metrics. <em>New</em> <em>Relic</em>&#x27;s âKubernetes awareâ approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage"
      },
      "id": "603ebf49196a670d96a83d81"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/create-application-baselines": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-05-22T07:37:11Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 280.40997,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-05-22T07:45:17Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where Iâm Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps teamâs auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence âmachine-learnâ your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.7233,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-05-22T17:35:09Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your applicationâs performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relicâs reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.44846,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/guide-planning-your-cloud-adoption-strategy": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-05-22T07:37:11Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 280.40997,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-05-22T07:45:17Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where Iâm Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps teamâs auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence âmachine-learnâ your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.7233,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-05-22T17:35:09Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your applicationâs performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relicâs reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.44846,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/identify-application-dependencies-inventory": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-05-22T07:37:11Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 280.40988,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-05-22T07:45:17Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where Iâm Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps teamâs auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence âmachine-learnâ your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.7232,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-05-22T17:35:09Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your applicationâs performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relicâs reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.44836,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/identify-issues-roadblocks": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-05-22T07:37:11Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 280.40988,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-05-22T07:45:17Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where Iâm Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps teamâs auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence âmachine-learnâ your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.7232,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-05-22T17:35:09Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your applicationâs performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relicâs reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.44836,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-customer-experience": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-05-22T07:37:11Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 280.4098,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-05-22T07:45:17Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where Iâm Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps teamâs auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence âmachine-learnâ your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.72314,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-05-22T17:35:09Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your applicationâs performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relicâs reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.44827,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-05-22T07:37:11Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 280.4098,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-05-22T17:35:09Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your applicationâs performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relicâs reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.44827,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    },
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T07:31:06Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that theyâre consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs DevOps transformation. 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or âmarkerâ, on charts and graphs at the deployment eventâs timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When youâre satisfied with the applicationâs performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.79532,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ". 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. <em>New</em> <em>Relic</em> APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event"
      },
      "id": "60450efc64441fb48e378eee"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/perform-migration-acceptance-testing": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-05-22T07:37:11Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 280.4097,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-05-22T07:45:17Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where Iâm Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps teamâs auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence âmachine-learnâ your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.72302,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-05-22T17:35:09Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your applicationâs performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relicâs reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.44818,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/prioritize-migration-order": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-05-22T07:37:11Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 280.4097,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-05-22T07:45:17Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where Iâm Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps teamâs auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence âmachine-learnâ your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.72302,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-05-22T17:35:09Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your applicationâs performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relicâs reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.44818,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-05-22T07:37:11Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 280.4096,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-05-22T07:45:17Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where Iâm Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps teamâs auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence âmachine-learnâ your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.72296,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-05-22T07:31:06Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that theyâre consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organizationâs DevOps transformation. 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or âmarkerâ, on charts and graphs at the deployment eventâs timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the âblueâ version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the âgreenâ version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When youâre satisfied with the applicationâs performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.7952,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ". 2. Add automated deployment markers Itâs important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. <em>New</em> <em>Relic</em> APMâs deployment markers feature allows you to record deployments for each application. A deployment marker is an event"
      },
      "id": "60450efc64441fb48e378eee"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/validate-cloud-improvements": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-05-22T07:37:11Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 280.4096,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-05-22T07:45:17Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where Iâm Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps teamâs auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence âmachine-learnâ your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.72296,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-05-22T17:35:09Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your applicationâs performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relicâs reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 279.44812,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    }
  ],
  "/docs/new-relic-titanium": [
    {
      "sections": [
        "Transition to New Relic One from Insights",
        "Important",
        "Features",
        "Improved query abilities",
        "Improved visualizations",
        "Steps for a successful transition"
      ],
      "title": "Transition to New Relic One from Insights",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "4af99cd8030909a71d21a359a60af5ac93b93a66",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/transition-new-relic-one-insights/",
      "published_at": "2021-05-22T00:14:35Z",
      "updated_at": "2021-05-22T00:14:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of April 12, 2021, we're upgrading Insights to an improved web and mobile experience! All of your Insights URLs will be redirected automatically to the corresponding dashboards in New Relic One. For more details about this migration and how you can easily plan for this transition, see our Explorers Hub post. Released in 2014, New Relic Insights was our original way to create custom queries, charts, and dashboards. With New Relic One, we have modernized the experience for you to access, analyze, and visualize your data. New Relic One offers an improved charts and dashboards experience, and it provides a platform where we can more rapidly bring new innovations to you. This transition guide can help you understand: What are some of the new and improved features you get with New Relic One charts, dashboards, and queries Why it's easy to transition to New Relic One What to know and considerations when you make the switch How to get the most out of using New Relic One Features You can scroll down to the transition details, but first here are some features we've added that show how New Relic One dashboards are a clear improvement over Insights dashboards. Improved query abilities With New Relic One, you get: Ability to query many accounts from the same widget: New Relic One lets you query across all your associated accounts in one place. Better querying and charting experiences: Query access is available globally, no matter where you are in New Relic One. This includes a \"basic\" query mode that doesn't require knowledge of NRQL. Improved query experience: You can query both the Metric data type and metric timeslice data. Easy customization: Every visualization now has the query accessible. You can augment any curated chart just by changing the NRQL query. Improved visualizations Not only can you select a wide range of visualization options, you can also add more to your dashboards: Better display options: Make your data easier to understand by using visualizations other than dense, line-heavy charts. New Relic One also offers a better TV mode. Facet linking: You can filter your dashboards by faceted attributes, making your dashboards more interactive and easy to use. There's also support for cases. Learn more. More charts or widgets in an area: Insights restricted you to a 3-across limit. Now you can display up to 12 across your dashboard, providing increased data density along with improved tooltips and tracking across charts. Easier creation of multi-page dashboards: Insights referred to these as data apps. Your Insights data apps are preserved as multi-page dashboards in New Relic One. Chart consistency and flexibility: Dashboards include facet color consistency across widgets and faster loading times for more performant dashboards. Also, you can add any chart type to a dashboard in New Relic One! The New Relic Insights UI has served our users well for many years, but it's time to give you an even better experience. Join us and make the switch to New Relic One! Steps for a successful transition The transition to New Relic One has two parts: the UI and mobile app experience (April 12, 2021) and the Dashboard API (July 2021). Insights functionality Transition to New Relic One UI We have already taken care of your transition from Insights to New Relic One for you! As of April 12, 2021, your old Insights web URLs redirect automatically to New Relic One. We recommend that you familiarize yourself with the new UI features available to you, as described in this transition guide. If you need to view any Insights charts embedded in other websites, go to one.newrelic.com > More > Manage Data. (These older embedded charts will continue to function as expected.) Mobile apps Your Insights mobile app is deprecated as of April 11, 2021. Go to the Google Play Store 2 or Apple App store. Delete your old Insights mobile app, and download the New Relic One mobile app. tvOS apps and large displays New Relic's tvOS app is still available. No action is needed by you at this time. Some New Relic customers with the original pricing model may have set up dashboards on wall screens for restricted users with kiosk mode. No action is required for you to continue to view these dashboards. APIs In July of 2021, the Insights Dashboard API will be deprecated and replaced with NerdGraph functionality. For more on this change, and tips on how to migrate, see NerdGraph API for dashboards. Partnership accounts This applies only if your account is one of the few using our partnership account structure to deliver New Relic services to your direct customers. In this situation, the Insights EOL will not affect your customersâ pricing. This is simply an EOL for the UI, not an EOL for the account type. Questions If you have questions about the transition, please comment in our Explorers Hub post. Or, if you work with an account team, they will be happy to help you.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.33211,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Transition to <em>New</em> <em>Relic</em> One from Insights",
        "sections": "Transition to <em>New</em> <em>Relic</em> One from Insights",
        "tags": "<em>New</em> <em>Relic</em> One",
        "body": "Important As of April 12, 2021, we&#x27;re upgrading Insights to an improved web and <em>mobile</em> experience! All of your Insights URLs will be redirected automatically to the corresponding dashboards in <em>New</em> <em>Relic</em> One. For more details about this migration and how you can easily plan for this transition, see"
      },
      "id": "6044171164441f454a378ee2"
    },
    {
      "sections": [
        "Map page for mobile apps (deprecated)",
        "Important",
        "View a map of your mobile app services"
      ],
      "title": "Map page for mobile apps (deprecated)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "a082467948ce481c9ecb544d26a802e8d5f3894b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/map-page-mobile-apps-deprecated/",
      "published_at": "2021-05-22T07:16:50Z",
      "updated_at": "2021-05-16T00:48:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The mobile Maps UI will be deprecated on December 22, 2020. Service maps are available in New Relic One's left navigation for each mobile entity, and they are a better way to visualize and customize representations of your architecture. For more information, see our Explorers Hub post. Maps help you find performance problems for a mobile app or its services. This gives you a clear picture of your app's relationships to other services and the influence of each service on the others. If one service fails, you can see at a glance which other services are affected. View a map of your mobile app services To view your mobile app and its related services as an architectural map, go to one.newrelic.com > Mobile > (select a mobile app) > Monitor > Service map. For more information, see the service maps documentation. If you need to use the deprecated mobile Map page, follow these steps: Go to one.newrelic.com > Mobile > (select an app) > Network > Map. To view HTTP request details for a service, select its name. To view details for an app monitored by APM that is related to the service, select the service's name below the associated hostname. To view throughput details as a chart, select the icon or the cpm bar below the service's name. To view detailed metrics for a service, mouse over the throughput chart. The Map page for Mobile monitoring gives an architectural view of your mobile app and the services it uses,",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.37979,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Map page <em>for</em> <em>mobile</em> apps (<em>deprecated</em>)",
        "sections": "Map page <em>for</em> <em>mobile</em> apps (<em>deprecated</em>)",
        "tags": "<em>Mobile</em> monitoring",
        "body": "Important The <em>mobile</em> Maps UI will be <em>deprecated</em> on December 22, 2020. Service maps are available in <em>New</em> <em>Relic</em> One&#x27;s left navigation for each <em>mobile</em> entity, and they are a better way to visualize and customize representations of your architecture. For more information, see our Explorers Hub post"
      },
      "id": "6044141828ccbc0f862c60ae"
    },
    {
      "sections": [
        "Report mobile monitoring custom events and attributes",
        "Create custom attributes and events",
        "Mobile event and attribute query examples",
        "Custom event example: Track purchases",
        "Tip",
        "Attribute example: Track a specific user",
        "Attribute example: Track a specific store id",
        "Custom attribute example: Track a specific action",
        "Important",
        "Size limits and restricted characters",
        "Set the time to send data",
        "Privacy considerations",
        "Deprecated methods"
      ],
      "title": "Report mobile monitoring custom events and attributes",
      "type": "docs",
      "tags": [
        "Insights",
        "Event data sources",
        "Custom events"
      ],
      "external_id": "30a7ec0f78ddde237cb20265ab9702582f5bc2ba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/telemetry-data-platform/custom-data/custom-events/report-mobile-monitoring-custom-events-attributes/",
      "published_at": "2021-05-22T11:27:28Z",
      "updated_at": "2021-05-15T10:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Mobile monitoring in New Relic sends some default event data from your mobile app to New Relic, such as data about interactions, sessions, crashes, and request errors. You can also create your own custom attributes and events for more detailed querying and analysis. Create custom attributes and events You can create custom session-level attributes for default Mobile events using the New Relic Mobile SDK. For example, to record a username attribute for some part of your iOS or Android app, you would use the setAttribute API (Android | iOS). These attributes are session-related information and are shared by multiple Mobile event types. You can also create entirely new custom event types and assign them their own custom attributes, using the recordCustomEvent API (Android | iOS). To help with crash analysis, you can use the SDK to create MobileBreadcrumb and MobileHandledException events. These events are available for querying and also displayed in the Mobile crash event trail. For more on creating custom attributes and custom events, see: Android SDK API guide iOS SDK API guide NRQL query examples MobileRequestError examples MobileRequest examples Limits and restricted characters Mobile event and attribute query examples Here are some examples of using NRQL to query your mobile app events and attributes: Custom event example: Track purchases To track purchases in your app, use recordCustomEvent to create an event type (such as \"UserAction\") and associate attributes such as \"name\" (with value \"Purchase\"), price, quantity, and SKU. Tip For performance reasons, you should limit the total number of event types to maybe one or two. The recordCustomEvent parameter eventType is meant to be used for high-level categories. For example, you might create an event typeGestures, and then create many different custom event names under the Gesture event type. Create an event on iOS: BOOL purchaseRecorded = [NewRelic recordCustomEvent:@\"UserAction\" attributes:@{@\"name\": @\"Purchase\", @\"sku\": @\"12345LPD\", @\"quantity\": @1, @\"unitPrice\": @99.99, @\"total\": @99.99}]; Copy Create an event on Android: Map<String, Object> userActionAttributes = new HashMap<String, Object>(); userActionAttributes.put(\"name\", \"Purchase\"); userActionAttributes.put(\"sku\", \"12345LPD\"); userActionAttributes.put(\"quantity\", 1); userActionAttributes.put(\"unitPrice\", 99.99); userActionAttributes.put(\"total\", 99.99); boolean userActionRecorded = NewRelic.recordCustomEvent(\"UserAction\", userActionAttributes); Copy New Relic reports a custom event of type UserAction and name Purchase, which allows you to query all purchases made in your app in the last day: SELECT * from UserAction where name = 'Purchase' since 1 day ago Copy Replace deprecated recordEvent method: As of Android agent version 5.12.0 and iOS agent version 5.12.0, use the recordCustomEvent method to create these custom events. If you have replaced the deprecated recordEvent method for your custom events, be sure to also replace its corresponding NRQL query with the new format. Look for queries used with recordEvent method, such as this: SELECT * from Mobile where category = 'Custom' and name = 'Purchase' since 1 day ago Copy Replace them with the query format used with recordCustomEvent: SELECT * from UserAction where name = 'Purchase' since 1 day ago Copy Attribute example: Track a specific user You can create a custom attribute to track a custom user identifier across the session, and then query for all that user's interactions. To add an attribute for the userId, call the setUserId method: Set the userId on iOS: BOOL userIdWasSet = [NewRelic setUserId:@\"jsmith\"]; Copy Set the userId on Android: boolean userIdWasSet = NewRelic.setUserId(\"jsmith\"); Copy With this attribute, you can use a WHERE clause to see all actions performed by that username in the last day: SELECT * from Mobile WHERE userId = 'jsmith' since 1 day ago Copy Attribute example: Track a specific store id You can create a custom attribute to track a store id across the session, and then query for all that store's interactions. To add an attribute for the storeId, call the setAttribute method: Set the storeId on iOS: BOOL attributeSet = [NewRelic setAttribute:@\"storeId\" value:@\"NY0531\"]; Copy Set the storeId on Android: boolean attributeSet = NewRelic.setAttribute(\"storeId\", \"NY0531\"); Copy With this attribute, you can use a WHERE clause to see all actions performed by that storeId in the last day: SELECT * from Mobile WHERE storeId = 'NY0531' since 1 day ago Copy Custom attribute example: Track a specific action You can use custom attributes to track the number of times that a specific action occurs in your application. For example, you can track the number of times a button was clicked or the number of times a level was completed in a game. To track completing a game level, call incrementAttribute with no value specified. This creates an attribute with a default value of 1: Create a counter on iOS: BOOL levelIncremented = [NewRelic incrementAttribute@\"level\"]; Copy Create a counter on Android: boolean levelIncremented = NewRelic.incrementAttribute(\"level\"); Copy Each subsequent call to incrementAttribute adds 1 to the attribute level: Increment a counter on iOS: levelIncremented = [NewRelic incrementAttribute@\"level\"]; Copy Increment a counter on Android: levelIncremented = NewRelic.incrementAttribute(\"level\"); Copy Important Be sure to reset the value to 0 when starting over. To reset the level back to 1 or 0, call setAttribute: Reset a counter on iOS: levelReset = [NewRelic setAttribute:@\"level\" value:@1]; Copy Reset a counter on Android: levelReset = NewRelic.setAttribute(\"level\", 1); Copy When querying, use this level attribute to filter your data. For example, if you have a username and level attribute, use the max() function to find the highest level the user had reached: SELECT max(level) from Mobile where username = 'jsmith' Copy Size limits and restricted characters Limits for custom attributes added to default Mobile events: Attributes: 128 maximum String attributes: 4 KB maximum length (empty string values are not accepted) Limits for custom events: Attributes: 254 maximum per event (number includes default session attributes) String attributes: 4 KB maximum length (empty string values are not accepted) Naming syntax and rules: See Rules for custom data. Set the time to send data By default, New Relic transmits event data in any of these situations: A session has been ongoing for 600 seconds. The app session ends by backgrounding. The app crashes. If the app crashes, New Relic gathers the attributes and events for that session and sends them to Insights. (On iOS, this happens the next time the app is launched). You can then use Insights to query and analyze the event and attribute data. To set the maximum time (in seconds) that the agent will store events in memory, use the following SDK calls: iOS method: + (void) setMaxEventBufferTime:(unsigned int)seconds; Copy Android method: public static void setMaxEventBufferTime(int maxBufferTimeInSec); Copy Privacy considerations If you want to collect personal data via custom attributes, please consult with your privacy or legal teams. Be sure to follow your organization's obligations for notices and consent regulations. Deprecated methods As of Android agent version 5.12.0 and iOS agent version 5.12.0, use the recordCustomEvent method to create custom events. The recordEvent methods for Android and iOS are deprecated. The deprecated recordEvent events do not have their own event type; they are recorded as a Mobile event type with a category attribute value of custom. recordCustomEvent creates an event with an eventType you can assign. But the eventType should only be used for one or two high-level event types, not for naming events. For example, you might have one event type Gestures, with many different names under that one type. For more context on this, see the recordCustomEvent query example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.498,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Report <em>mobile</em> monitoring custom events and attributes",
        "sections": "Report <em>mobile</em> monitoring custom events and attributes",
        "body": "<em>Mobile</em> monitoring in <em>New</em> <em>Relic</em> sends some default event data from your <em>mobile</em> app to <em>New</em> <em>Relic</em>, such as data about interactions, sessions, crashes, and request errors. You can also create your own custom attributes and events for more detailed querying and analysis. Create custom attributes"
      },
      "id": "609fa5cf28ccbc508d9832d3"
    }
  ],
  "/docs/okta-scim-assign-users-automated-provisioning-beta": [
    {
      "sections": [
        "Okta SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Add SCIM/SSO application",
        "Step 2. Configure provisioning",
        "Step 3. Assign users and groups",
        "Assignments tab",
        "Push groups tab",
        "Step 4. Additional considerations",
        "Moving users between groups",
        "What's next?"
      ],
      "title": "Okta SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "7a00399a6ce11aaa2cb52046f994a80f5986c0e4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/okta-scimsso-application-configuration/",
      "published_at": "2021-05-21T16:48:36Z",
      "updated_at": "2021-05-06T04:53:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Okta specific details on how to configure the New Relic Okta SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Step 1. Add SCIM/SSO application Add the New Relic SCIM/SSO application to your Okta applications. Go to okta.com/ and sign in with an account that has administrator permissions. From the Okta home page, click on Admin. From the Okta admin Dashboard, choose the Applications page. Click Add Application. In the search field on the Okta Add Applications page, enter \"New Relic by Organization\" and then click on the application when it shows in the search results. From the New Relic by Organization page, click on Add. From the Add New Relic by Organization page, check the two Application Visibility \"Do not display...\" checkboxes and click on Done. We will make the application visible later after configuration is complete and provisioning has begun. Step 2. Configure provisioning Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning tab. From the Integration form, click on Configure API Integration. Check the Enable API integration checkbox. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. From the authentication domain UI, get the SCIM bearer token and input it in the New Relic SCIM/SSO app's API token field. Optional: click on Test API Credentials to verify a SCIM connection can be established to New Relic. If a connection can be established, a success message is displayed. If a connection was not established, re-enter the API Token and try the test again. Click Save. Note that the save process does a test of the API credentials. If a connection is not established to New Relic, the save will fail. On the newly displayed To App form, click on Edit. Check the Enable checkbox in the Create Users, Update User Attributes, and Deactivate Users sections. Click Save. Step 3. Assign users and groups After the New Relic SCIM/SSO application provisioning configuration and the New Relic side SSO configuration is finished, you can assign users to the application. Assigning users is done using two different tabs on the the New Relic SCIM/SSO application page. We recommend having your New Relic users selected on the Assignments tab and their associated groups selected on the Push Groups tab. Assignments tab From the New Relic SCIM/SSO application page, click on the Assignments tab. From the Assignments form, click on Assign. From the pop up menu, click on Assign to Groups. From the Assign ... to Groups form, click on Assign for the group you wish to assign to the application. Optional: in the Time zone field, enter the default time zone for members of the group. Members without a time zone configured, will use the group time zone. Time zone affects how date/times are shown in New Relic. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). Click on Save and Go Back. Repeat the steps to add a group until all desired groups have been assigned to the application. Click Done. Push groups tab From the New Relic SCIM/SSO application page, click on the Push Groups tab. From the Push Groups form, click on Push Groups. From the pop up menu, click on Find groups by name. From the Push Groups to... form, in the search field enter the first few characters of the name of the group you want to send to New Relic. Leave the Push group memberships immediately checkbox checked. Click on your group in the pop up search results list. In the Match result & push action section, No Match found should be displayed, meaning that the group does not yet exist at New Relic. Leave the selector set to Create Group and leave the default name for the group. The intent here is to have a group of the same name created at New Relic. If this is the last group you wish to send to New Relic, click on Save. Otherwise, if you have more groups to configure, click on Save & Add Another and repeat the steps to add a group. Step 4. Additional considerations In this section we discuss other important things to know when using the New Relic SCIM/SSO application. This section includes tips to work around potential issues that could cause undesired results when integrating between Okta and New Relic. Moving users between groups When moving a user between groups, you must manually synchronize the old group's membership with New Relic. This is because Okta does not send a SCIM request to remove a user from a group. So, the admin needs to push the old group's membership to New Relic manually to inform New Relic that the user is no longer a member of the old group. Here are the steps to manually synchronize a group's membership: From the New Relic SCIM/SSO application page, click on the Push Groups tab. From the Push Groups form, open the pick list on the desired group's button under the Push Status column. From the displayed pick list on the button, click Push now. This causes an immediate synchronization of the group's membership with New Relic. What's next? When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 373.97845,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Okta</em> <em>SCIM</em>&#x2F;SSO application configuration",
        "sections": "Step 3. <em>Assign</em> <em>users</em> and groups",
        "tags": "<em>Automated</em> <em>user</em> management",
        "body": "Our <em>automated</em> <em>user</em> management (AUM) allows allows you to import and configure your New Relic <em>users</em> from your identity provider via <em>SCIM</em>. This guide provides <em>Okta</em> specific details on how to configure the New Relic <em>Okta</em> <em>SCIM</em>&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f5cae7b9d2758b579a0c"
    },
    {
      "sections": [
        "Azure AD SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Add SCIM/SSO application",
        "Step 2. Configure connection",
        "Step 3. Configure provisioning rules",
        "Tip",
        "Step 4. Assign users and groups",
        "What's next?"
      ],
      "title": "Azure AD SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d6e7f7e95daa833451159a3db4e2c4257270b5e9",
      "image": "https://docs.newrelic.com/static/0a9a32fd5041e6e2ea37cc5f032b6910/8c557/Azure_AD_Provisioning_Attribute_Mapping_2_0.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/azure-ad-scimsso-application-configuration/",
      "published_at": "2021-05-21T16:48:35Z",
      "updated_at": "2021-05-15T16:22:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Step 1. Add SCIM/SSO application Azure AD provides an application gallery, which includes various integrations for Azure AD, including the ones that New Relic offers. Add the New Relic SCIM/SSO application to your list of applications. Go to the Azure Active Directory admin center, and sign in if necessary. aad.portal.azure.com/ Click on All services in the left hand menu. In the main pane, click on Enterprise applications. Click on +New Application. Find our SCIM/SSO application by entering New Relic in the name search box, and click on the application New Relic by Organization. Click on Add. Continue with the following section to connect the New Relic SCIM/SSO application to New Relic. Step 2. Configure connection Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning link in the sidebar. In the main pane, click on Get started. In the Provisioning Mode pick-list, choose Automatic. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. In Azure AD's New Relic SCIM/SSO app, in the Admin credentials section, fill out the Tenant URL and Secret token fields with the values provided in New Relic's authentication domain UI. To verify you can connect to New Relic, click Test Connection. When you see a message indicating verification success, click Save. The New Relic SCIM/SSO application can now connect with New Relic. Continue with the following section to configure the provisioning rules. Step 3. Configure provisioning rules Initially, nothing is configured to be sent to New Relic. You must configure Azure AD to send changes for user creation, updates, and deactivation. Go to the Provisioning page and complete the following: Expand the Mappings section. Click Provision Azure Active Directory Users. Verify the Target Object Actions Create Update and Delete checkboxes are all checked. Verify the Attribute Mappings look correct for your environment. Each of the New Relic attributes shown in the list must receive a value. Tip Ensure that the Azure Active Directory attributes shown in the list on the left are good sources for the information to send to New Relic. In particular, not all environments set the mail attribute. If your environment does not set the mail attribute, userPrincipalName could be a good alternative. Leave the switch for Enabled set to Off until you're done with the user and group configuration in the next section. Once all configuration is ready, return to this page and set the switch to On. Click Save. Here's an example of a filled-in attribute mapping page with the default values. Your values may be configured differently depending on your situation. After saving the provisioning rules, the New Relic SCIM/SSO application is ready to provision any changes made to users assigned to the application. Continue with the following section to assign users and groups to the New Relic SCIM/SSO application. Step 4. Assign users and groups After the New Relic SCIM/SSO application configuration and the New Relic side configuration is finished, you can assign users and groups to the application. From the New Relic SCIM/SSO application page, click on Users and groups in the sidebar. Click +Add user. From the Add Assignment page, click on Users and groups, and select the appropriate users or groups that you'd like to provision. Then click Select and Assign. The selected users and groups appear on the Users and groups page, indicating that they're candidates for provisioning. Repeat the steps to add users and groups until all desired entities have been assigned to the application. What's next? When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 369.894,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Azure AD <em>SCIM</em>&#x2F;SSO application configuration",
        "sections": "Step 4. <em>Assign</em> <em>users</em> and groups",
        "tags": "<em>Automated</em> <em>user</em> management",
        "body": "Our <em>automated</em> <em>user</em> management (AUM) allows allows you to import and configure your New Relic <em>users</em> from your identity provider via <em>SCIM</em>. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD <em>SCIM</em>&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f5c964441fcfb0378ef3"
    },
    {
      "sections": [
        "Introduction to automated user management (AUM) and single-sign on (SSO)",
        "Requirements",
        "Import user groups from an identity provider using AUM"
      ],
      "title": "Introduction to automated user management (AUM) and single-sign on (SSO)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "831a5f1137eccac9540d716302645b4e976a6332",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign/",
      "published_at": "2021-05-21T16:48:36Z",
      "updated_at": "2021-05-06T04:53:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic lets you set up automated user management (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this automated provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements and impacts: Requires Enterprise edition. User model-related requirements: This feature creates users on our New Relic One user model. To implement AUM, you must be on our New Relic One user model and have user management roles assigned. If you're on our original user model (or otherwise can't seem to implement this feature), talk to your New Relic account representative. Supports SAML 2.0 standard for single sign on (SSO). Supports SCIM 2.0 standard. Supported identity providers: Okta, Azure AD, OneLogin. For unsupported identity providers, we have a SCIM API. Notes on initial enabling of AUM: We don't currently support toggling SCIM on or off. If an authentication domain has already been set up with the source of users as Manual, you can't change it to SCIM. When first enabled, the bearer token is generated and only shown once. If you need to view a bearer token later, the only way to do this is to generate a new one, and that will invalidate the old one and any integrations using the old token. Import user groups from an identity provider using AUM For an explanation of how your identity provider groups map over to New Relic groups, see Group and role mapping. To use automated user management to import users from your identity provider: It's important to first review the requirements. Use the Organization and access UI to enable SCIM and configure SAML SSO. Configure your identity provider using one of our relevant guides:Azure AD | Okta | OneLogin. If you don't use one of those, we also have a SCIM API. Note that your users are created in New Relic as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. Recommended: Set a time zone in your identity provider. If not specified, our UI shows date/times with the UTC time zone. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). If you have issues, contact your account representative. After being provisioned, your users can click on the New Relic SCIM/SSO application tile in their identity provider to be logged into New Relic. To learn more about New Relic's roles and capabilities, see Standard roles.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 305.2788,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>automated</em> <em>user</em> management (AUM) and single-sign on (SSO)",
        "sections": "Introduction to <em>automated</em> <em>user</em> management (AUM) and single-sign on (SSO)",
        "tags": "<em>Automated</em> <em>user</em> management",
        "body": "New Relic lets you set up <em>automated</em> <em>user</em> management (AUM), which allows you to import, update, and deactivate your New Relic <em>users</em> from your identity provider. Once this <em>automated</em> <em>provisioning</em> is complete, your <em>users</em> can log in to New Relic via their identity provider. Requirements Requirements"
      },
      "id": "6043d60e64441ff8f5378f37"
    }
  ],
  "/docs/plugins/index": [
    {
      "sections": [
        "Maintain plugin versions",
        "Important",
        "Limited access to legacy plugins",
        "Plugin agents and dashboards",
        "Agent versioning",
        "Update a SaaS agent",
        "Update an on-premises agent",
        "Update plugin dashboards"
      ],
      "title": "Maintain plugin versions",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "70efb125146afeda3c6e672e6c9b0e769ce4eb37",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/maintain-plugin-versions/",
      "published_at": "2021-05-22T08:01:38Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin agents and dashboards As a plugin publisher, typically you need to have two versions of your plugin running simultaneously: The stable production version that users can acquire from Plugin Central in New Relic A development version that you are actively improving, testing, or otherwise have in a non-production state Plugins contain two versioned parts: The agent collects metrics from the source and transmits those metrics to the Plugin API. The dashboard is a collection of visualizations and configurations that you make in the Plugins user interface. Plugin users view this automatically from their own Plugins dashboards in New Relic. Versioning works differently for these two parts. Agent versioning There are two types of plugin agents, with two different versioning situations: SaaS agents are agents that you, the SaaS application developer, deploy and run on behalf of your SaaS users. On-premises agents are agents that your users install into their systems. Plugin agents Versioning SaaS agents There is only one copy of this agent running anywhere (the one you developed and deployed on behalf of your users), so whatever version you are running will inherently be the latest version. Whatever metrics the latest version is sending to New Relic will be the metrics available to (but not necessarily charted for) your users in their Plugins dashboards. On-premises agents When you publish a new version of your agent, all of your plugin users' dashboards will note that a new agent version is available. They will be directed to your Plugin Central listing, where they can download and install the new version of your agent. Recommendation: Provide a streamlined agent update procedure in your own documentation. Update a SaaS agent This procedure assumes: You are starting with a plugin published to the Plugin Central (the production version). Your plugin has a SaaS agent running inside your app, and you want to make improvements to the SaaS agent portion of your plugin. As part of your normal development process you have a second dev version of your agent running, which is not published in Plugin Central. Your plugin's dev version uses a different GUID (for example, com.company.service.plugin.dev). Both your dev and your production plugins have the same plugin dashboards. To update your plugin's SaaS agent: Make changes to your dev agent. Do not change the version number or GUID of your dev agent in the agent config file. When you are ready to make your latest dev agent the production agent for your customers, follow your standard procedures to deploy your dev code to production. If applicable, make any necessary changes to your plugin's dashboards. Your users will receive no notification, and they do not need to take any action. You didn't change the version number, so your agent changes are transparent to your users. Update an on-premises agent This procedure assumes you are starting with a plugin published in Plugin Central, and you want to make improvements to the on-premises agent portion of your plugin. Make a copy of your agent code. Change the version number in the agent config file. To ensure that New Relic knows two different versions of your agent exist now, run the agent so that it reports metrics to the Plugin API. Continue working on your agent and making improvements, but do not change the version number again. When you are ready to make this new agent version the latest version for your plugin users, save it to the location where you distribute your agent code (for example, GitHub). From the New Relic UI, select your published plugin, select Edit, and then select Save. Select Publish, and then select the new agent version you are publishing. At this point, all of your plugin users will see a notice in the Plugins UI that a new version is available. They will be directed to your listing in Plugin Central, which points to your download location. From there your users can acquire your new agent version. Update plugin dashboards If you add metrics to your agent, be sure to add them to charts on your dashboard, and then save your dashboard and re-publish. All your users will see the new dashboard, and the new metrics will either be populated immediately (if you are running a SaaS agent on their behalf) or as soon as they update their agent (if you are offering an on-premises agent). If you need to migrate dashboards between GUIDs, get help at support.newrelic.com. Otherwise, to update your dashboard, follow this workflow. These steps assume you are starting with a plugin already published in Plugin Central, and you want to make improvements to the dashboard portion of your plugin. Go to one.newrelic.com > More > Plugins, and select your plugin's name. From your plugin's summary page, select Edit > Dashboards, then add, edit, or delete dashboards. When you are ready to publish: From your plugin's summary page, select Publish. At this point, all of your plugin users will see your new dashboard version the next time they select your plugin's dashboard in the New Relic UI.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 57.035477,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Maintain <em>plugin</em> versions",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em>",
        "body": " to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy <em>plugins</em> As of December 2, 2020, <em>plugin</em> access has been limited to accounts that have accessed a legacy <em>plugin</em> in the past 30 days. The legacy <em>plugin</em> experience will reach end of life (EoL"
      },
      "id": "603e956fe7b9d28f062a07b5"
    },
    {
      "sections": [
        "Checklist for developing plugins",
        "Important",
        "Limited access to legacy plugins",
        "Plan your plugin",
        "Create your plugin",
        "Publish your plugin",
        "Documentation",
        "\"About us\" URL",
        "Branding image URL",
        "Developer terms of service",
        "Publication",
        "Versions",
        "Plugin support",
        "Support for your plugin users",
        "Escalated plugin support"
      ],
      "title": "Checklist for developing plugins",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "c60d87c25a2c835d2b7e44340bddb678117ddd07",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/checklist-developing-plugins/",
      "published_at": "2021-05-22T15:40:26Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plan your plugin When planning your plugin for Plugin Central: Sketch the types of metrics you want to collect and how you want to present them on dashboards. Include any necessary mathematical calculations. Sketch the types of summary metrics you want to collect and how you want to present them on the plugin's summary page. Include any necessary mathematical calculations. Optional: Define alert conditions for your metrics. Optional: If you want to receive alert notifications for your plugin, verify the email address to be used and confirm any other notification options as necessary. Decide whether to develop the plugin with one of the plugin SDKs or to use the Plugin API. Create your plugin When creating your plugin for Plugin Central: Select a unique, meaningful GUID name. Write the plugin agent. Test your plugin, including summary metrics, customized dashboards, alert conditions, and your process to disable or uninstall your plugin. Consider writing Chef and Puppet installation scripts to make plugin installation easier. Publish your plugin The following items are required for plugins published through New Relic's Plugin Central. If you do not plan to make your plugin publicly accessible to users, some of these items are not applicable. Documentation When documenting your plugin, include requirements and procedures to install, configure, use, troubleshoot, uninstall, and contact your support resources. Documentation requirements Guidelines Title Descriptive title; for example, \"Wikipedia plugin for New Relic.\" Table of contents List of main topics with anchors to each section. Description Explanation of how the plugin can be used in New Relic to monitor and improve the associated software's performance. What systems does it monitor (for example, memcache, versions X-Y, on the local host, sets and gets)? What problem does it solve? Plugin requirements Requirements or dependencies; for example: Internet access via SSL (HTTPS) Supported operating systems Minimum environment requirements (Java, Ruby, glibc, etc.) Supported monitored systems Any known limitations Metrics source documentation Plugin users may not be familiar with all the metrics displayed, their source, what the metrics mean, etc. If you have documentation that provides these details, be sure to include links to that information. For example: Description of data expected from source, frequency, mechanism, etc.; for example, \"Data is read from a file socket and exported from the source once per second.\") Description of data itself; for example, a well-formatted JSON such as {X: {y: z}} Description of data being sent; for example, average response time in milliseconds, of a set or get, taken over a minute, recorded from the specified data Installation Step-by-step procedures to obtain and install the plugin. Do not require su or sudo permission in order to install your agent or support software unless absolutely required. These requirements must be limited in scope and well documented. Configuration Instructions to configure the plugin, expected format, and how to set them. Include how to find the user's New Relic license key. Troubleshooting Include instructions as applicable; for example: How to resolve common problems: Unable to connect to New Relic, unable to connect to the monitored server, incorrect license key How to enable logging or verbose logging How to restart the plugin How to test connectivity to New Relic How to handle errors; for example, failure to read, aggregate, or send data Disabling and uninstalling Questions to consider: Are there other dependencies before disabling or uninstalling the plugin? For example, are there any special procedures your plugin users need to know in order to have their operating system stop the process from running, so that they can remove components (instances) from their installed plugin? Can you temporarily disable and then re-enable the plugin (for example, for troubleshooting or updating it), or must you completely uninstall and reinstall? Can the uninstall procedure be done from a command line? Support resources Make a plan for supporting your plugin and identifying a support URL for users. In your plugin's support information, describe how users can contact you for support in whatever way works best for you: documentation website, phone, email, forum, Twitter, ticketing system, etc. \"About us\" URL Identify the About Us URL for your plugin. Branding image URL Identify a URL to a branding image for when you publish your plugin. Follow these formatting guidelines: Set the image size to 64 x 64px. Save as a .png or .gif file. Use transparency for the background unless it is a square icon. Design the image to display well on both white and black backgrounds. Developer terms of service Review the Developer Terms of Service for New Relic Plugins. A link to this document appears on your plugin's Publish page in the UI. Publication Plugin Central is the repository of plugins available in New Relic. If you want to distribute your plugin through Plugin Central, make sure your documentation and support plans are in place, then select your plugin's Publish option in the New Relic UI. The Publish page in the UI prompts you to verify all requirements. As soon as your plugin is published, all of its dashboards and summary metrics are available for your plugin users. The Distribution method identifies how users can obtain your plugin from Plugin Central. File download: Most developers typically select this option for plugin setup and installation. Webpage link: SaaS providers typically select this option for plugin configuration and identify their website's landing page URL. Platform Installer (NPI): If you use the New Relic Platform Installer (NPI) command line utility to package your plugin, select this option. You can also publish a plugin without listing it in Plugin Central; for example, if you want to beta test it first, or if you only want specific users to be able to use it. When publishing an unlisted plugin, make sure the checkbox option in the UI for List this plugin in Plugin Central is not selected. You will need to communicate directly with your users when your unlisted plugin is added, updated, or removed. Versions You can update and re-publish your plugin as often as you want. Every time you publish changes to your plugin and list them in Plugin Central, the changes are immediately visible in Plugin Central. In addition, your published plugin changes typically appear in New Relic's website within five minutes. Recommendation: To avoid development and testing impacts on your users, maintain dev and production versions when updating your plugin. Plugin support Plugin publishers are responsible for providing first-line support if users have problems using their plugin. This includes verifying correct data acquisition and transmission. If problems continue with getting the expected data into New Relic's user interface after you complete your troubleshooting procedures, then you (not your users) can escalate the problem to New Relic. We will work with you to resolve the problem, and then you can communicate the solution to your users. Support for your plugin users Follow these guidelines for supporting your plugin's users by confirming data collection and transmission. Check that the plugin configuration is correct, including: Necessary credentials for the target system IP addresses or DNS names for the target system Any settings that might affect data acquisition Review transmission logs for errors, including: Authentication errors Connection errors Error responses from the target system Review transaction logs for useful data. How much data is being collected? Does the data make sense? Verify if the plugin is converting acquired data into useful metrics. Do the metrics make sense? Would the metrics make a good chart? Are the metrics being aggregated into valid JSON? Is the JSON size within limits? Confirm transmission of the plugin data. If you are using an SDK for New Relic Plugins and the Plugin API, does your data transmission conform to New Relic's rate limits? Are the 50X codes sporadic or continuous? Do your transaction logs indicate any data transmission problems? Escalated plugin support If you have verified good data acquisition and transmission, but there still is trouble getting the expected data in New Relic's user interface, escalate the support request to New Relic on behalf of your users. Do not have your users contact us. Include as much of the following information as possible: Plugin support requests Notes User affected by the problem Information such as: Permalink to the plugin page where you see the problem, so that we can view the endpoint. Recommendation: Ask the user if you can add your user ID to the New Relic account so that you can obtain a permalink yourself. User's New Relic account ID. If you do not have the user's permalink or account ID, include the user's email address they used to sign up for their New Relic account. (This may be a different email than the one they used to contact you.) User's name and New Relic account name. Detailed description of the problem For example: The user can see data, but it's not the data they are expecting. The user can see no data at all. The user configured and started the plugin correctly, but it does not appear in the user interface for New Relic Plugins. Any other specific details about the problem. Other evidence This includes: Explain the troubleshooting you have done so far and what you expected to happen in contrast to the actual results. Provide any available permalinks, screenshots, and log files. Summarize your understanding of the problem. We will work with you to characterize and resolve the problem. Keep the user updated with progress. After we provide you with a resolution, ask the user to verify the results.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 57.035477,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Checklist for developing <em>plugins</em>",
        "sections": "Checklist for developing <em>plugins</em>",
        "tags": "<em>Plugins</em>",
        "body": " to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy <em>plugins</em> As of December 2, 2020, <em>plugin</em> access has been limited to accounts that have accessed a legacy <em>plugin</em> in the past 30 days. The legacy <em>plugin</em> experience will reach end of life (EoL"
      },
      "id": "603ec26f64441fe6484e885f"
    },
    {
      "sections": [
        "Use a Plugin Central plugin",
        "Important",
        "Limited access to legacy plugins",
        "View plugin dashboard details",
        "Plugin summary",
        "Plugin dashboards",
        "Plugin alerts",
        "Delete a plugin",
        "Remove plugin components (instances)",
        "Delete the plugin"
      ],
      "title": "Use a Plugin Central plugin",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "feae68c2e9d870f7c02fff5ffb69f2c262a0cd6c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/use-plugin-central-plugin/",
      "published_at": "2021-05-22T05:25:43Z",
      "updated_at": "2021-03-16T11:03:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. View plugin dashboard details Each plugin in Plugin Central includes procedures for how to install, use, troubleshoot, and uninstall it. Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. After you install a plugin, it starts to receive data, usually within five minutes. The plugin automatically appears with a short name and icon on your Plugins menu in New Relic One. You do not need to select it from Plugin Central. The amount and types of information on the plugin's summary page and dashboards depend on the specific plugin. For example, a plugin may have one or more components (instances) and one or more dashboards. To view summary and dashboard details about the plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, review the list of components or instances, summary metrics, and list of Recent Events. To view dashboard details about any component or instance, select its name. Plugin summary Depending on the plugin, the summary includes: One or more components or instances (what the plugin agent is monitoring, typically a host/port pair) Zero to five summary metrics for the past three minutes (values such as average, total, minimum, maximum, standard deviation, rate, or count) with optional alerts Recent events list, including deployments, notifications, and alerts Other information about alert violations, events, and activity If your plugin has 100 or more components or instances, you can search for a specific component instance. Here is a summary of additional standard features. If you want to... Do this... View version information for a component's or instance's agent Mouse over the component's name. Change the sort order On the title row of the plugin's summary page, select the up or down arrow for a component (instance) or a summary metric's label. Show or hide items on the events and activity list Select an event icon, or select All. View details about an event On the events and activity list, select the link. View page details for a component or instance Select the name or a summary metric for the component (instance). Plugin dashboards Depending on the plugin, it may have one or more dashboards, and each dashboard may present data as a chart or a table. You can use any of New Relic's standard dashboard features to drill down into detailed information. The customized dashboards that show plugin data are part of the plugin. Users cannot add or remove these dashboards. This must be done by the author or publisher as part of a plugin update. Plugin alerts If the plugin publisher set Critical (red) or Caution (yellow) alert conditions for your plugin's components or instances, you can view details direct in the user interface. For example, you can: Select and view alert details. Change the existing thresholds. Set your alert notification options; for example, to receive email notifications for Critical events. Delete a plugin Each plugin in Plugin Central includes procedures for how to uninstall it. When you select the plugin's Download or Continue button, the plugin should include a README file or refer to other documentation resources. Remove plugin components (instances) At a minimum, your plugin must stop reporting data before you start uninstalling it. Make sure the health status for your plugin's components (instances) are gray. Depending on the plugin, there may be other dependencies before disabling or uninstalling it. For example, plugins from SaaS providers may have different requirements. Be sure to review the instructions that the plugin's publisher provides. Then, to remove individual components from your plugin, click the settings icon for each component (instance). Delete the plugin After you remove each component (instance) for the plugin, the plugin icon will automatically disappear from your Plugins menu in the New Relic UI. You do not need to do anything else to delete the plugin. If you are the plugin's publisher and need to delete the plugin from Plugin Central, go to support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 57.03436,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use a <em>Plugin</em> Central <em>plugin</em>",
        "sections": "Use a <em>Plugin</em> Central <em>plugin</em>",
        "tags": "<em>Plugins</em>",
        "body": " to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy <em>plugins</em> As of December 2, 2020, <em>plugin</em> access has been limited to accounts that have accessed a legacy <em>plugin</em> in the past 30 days. The legacy <em>plugin</em> experience will reach end of life (EoL"
      },
      "id": "603ebf0928ccbcf8d0eba762"
    }
  ],
  "/docs/plugins/plugin-developer-resources/develop-plugins/checklist-developing-plugins": [
    {
      "sections": [
        "Maintain plugin versions",
        "Important",
        "Limited access to legacy plugins",
        "Plugin agents and dashboards",
        "Agent versioning",
        "Update a SaaS agent",
        "Update an on-premises agent",
        "Update plugin dashboards"
      ],
      "title": "Maintain plugin versions",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "70efb125146afeda3c6e672e6c9b0e769ce4eb37",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/maintain-plugin-versions/",
      "published_at": "2021-05-22T08:01:38Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin agents and dashboards As a plugin publisher, typically you need to have two versions of your plugin running simultaneously: The stable production version that users can acquire from Plugin Central in New Relic A development version that you are actively improving, testing, or otherwise have in a non-production state Plugins contain two versioned parts: The agent collects metrics from the source and transmits those metrics to the Plugin API. The dashboard is a collection of visualizations and configurations that you make in the Plugins user interface. Plugin users view this automatically from their own Plugins dashboards in New Relic. Versioning works differently for these two parts. Agent versioning There are two types of plugin agents, with two different versioning situations: SaaS agents are agents that you, the SaaS application developer, deploy and run on behalf of your SaaS users. On-premises agents are agents that your users install into their systems. Plugin agents Versioning SaaS agents There is only one copy of this agent running anywhere (the one you developed and deployed on behalf of your users), so whatever version you are running will inherently be the latest version. Whatever metrics the latest version is sending to New Relic will be the metrics available to (but not necessarily charted for) your users in their Plugins dashboards. On-premises agents When you publish a new version of your agent, all of your plugin users' dashboards will note that a new agent version is available. They will be directed to your Plugin Central listing, where they can download and install the new version of your agent. Recommendation: Provide a streamlined agent update procedure in your own documentation. Update a SaaS agent This procedure assumes: You are starting with a plugin published to the Plugin Central (the production version). Your plugin has a SaaS agent running inside your app, and you want to make improvements to the SaaS agent portion of your plugin. As part of your normal development process you have a second dev version of your agent running, which is not published in Plugin Central. Your plugin's dev version uses a different GUID (for example, com.company.service.plugin.dev). Both your dev and your production plugins have the same plugin dashboards. To update your plugin's SaaS agent: Make changes to your dev agent. Do not change the version number or GUID of your dev agent in the agent config file. When you are ready to make your latest dev agent the production agent for your customers, follow your standard procedures to deploy your dev code to production. If applicable, make any necessary changes to your plugin's dashboards. Your users will receive no notification, and they do not need to take any action. You didn't change the version number, so your agent changes are transparent to your users. Update an on-premises agent This procedure assumes you are starting with a plugin published in Plugin Central, and you want to make improvements to the on-premises agent portion of your plugin. Make a copy of your agent code. Change the version number in the agent config file. To ensure that New Relic knows two different versions of your agent exist now, run the agent so that it reports metrics to the Plugin API. Continue working on your agent and making improvements, but do not change the version number again. When you are ready to make this new agent version the latest version for your plugin users, save it to the location where you distribute your agent code (for example, GitHub). From the New Relic UI, select your published plugin, select Edit, and then select Save. Select Publish, and then select the new agent version you are publishing. At this point, all of your plugin users will see a notice in the Plugins UI that a new version is available. They will be directed to your listing in Plugin Central, which points to your download location. From there your users can acquire your new agent version. Update plugin dashboards If you add metrics to your agent, be sure to add them to charts on your dashboard, and then save your dashboard and re-publish. All your users will see the new dashboard, and the new metrics will either be populated immediately (if you are running a SaaS agent on their behalf) or as soon as they update their agent (if you are offering an on-premises agent). If you need to migrate dashboards between GUIDs, get help at support.newrelic.com. Otherwise, to update your dashboard, follow this workflow. These steps assume you are starting with a plugin already published in Plugin Central, and you want to make improvements to the dashboard portion of your plugin. Go to one.newrelic.com > More > Plugins, and select your plugin's name. From your plugin's summary page, select Edit > Dashboards, then add, edit, or delete dashboards. When you are ready to publish: From your plugin's summary page, select Publish. At this point, all of your plugin users will see your new dashboard version the next time they select your plugin's dashboard in the New Relic UI.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.2289,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Maintain <em>plugin</em> versions",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e956fe7b9d28f062a07b5"
    },
    {
      "sections": [
        "Use the New Relic Platform Installer (NPI) utility",
        "Important",
        "Limited access to legacy plugins",
        "NPI compatibility requirements",
        "Distribution",
        "NPI command line utility",
        "Updates",
        "Privately-published plugins"
      ],
      "title": "Use the New Relic Platform Installer (NPI) utility",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "a8a5c308f1e4f69ea801fd595bc7b679ae5eaac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/use-new-relic-platform-installer-npi-utility/",
      "published_at": "2021-05-22T08:03:11Z",
      "updated_at": "2021-03-16T11:00:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. NPI compatibility requirements The New Relic Platform Installer (NPI) is a command line utility for plugins in Plugin Central. It allows users to easily download, configure, and manage a plugin by installing it with a single command. The NPI is available for plugins written with Java or .NET plugin SDKs. If you are a plugin developer, follow these steps to meet the NPI requirements for a consistent installation experience, and publish your plugin in Plugin Central as NPI Compatible. In order to make your plugin NPI-compatible, make sure it meets each of these requirements: NPI compatibility Requirements Writing your plugin Java: See the Java SDK README file in GitHub for plugins. .NET: See the .NET SDK README file in GitHub for plugins. Packaging Use the tar.gz or zip compression protocol to package your plugin. Executable Name the executable file plugin.jar (for Java) or plugin.exe (for .NET), and store it in the root of your plugin folder. Code Do not use any relative references in your code. Configuration files Create a ./config directory containing a plugin.template.json file and a newrelic.template.json file. Make sure that plugin configuration is read from the plugin.json file in the ./config directory. For more information, refer to the README in GitHub. Distribution Once your plugin is NPI-compatible from a code perspective, place it somewhere that is accessible for consumers to download. For example, add the compressed distributable to a dist folder in your GitHub repository. When your plugin is ready for distribution, follow standard procedures to publish it in Plugin Central. Be sure to select the Platform Installer (NPI) distribution option. NPI command line utility When users select an NPI Compatible plugin from Plugin Central, they also have the option to download the NPI tool. The tool allows users to easily download, configure, and manage a plugin. They can also use a series of commands to manage their plugins or pass the --help flag for more information about available options. Updates After you create and publish an NPI-compatible plugin, follow standard procedures to update it as needed. Then, when you publish the updated plugin, the NPI tool automatically will pick up your most current version for users who have installed your NPI-compatible plugin. Privately-published plugins In general, the NPI tool will try to pull download (manifest) information from New Relic's Plugins service. You can also provide a file named manifest.json in the config directory of your NPI installation to provide this information. Use this file format: [ { \"guid\": \"arbitrary_identifier\", \"download_url\": \"https://plugin.download.url.com\", \"publisher\": \"New Relic Inc.\", \"version\": \"1.0.1\", \"installer_compatible\": true, \"implementation\": \"Java\" }, { \"guid\": \"arbitrary_identifier2\", \"download_url\": \"https://plugin2.download.url.com\", \"publisher\": \"New Relic Inc.\", \"version\": \"2.0.0\", \"installer_compatible\": true, \"implementation\": \".NET\" } ] Copy After you set this up, you can run all the same commands with your private plugin's GUID. To install or fetch a plugin, you must pass the --untrusted flag to allow downloading plugins from a local file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.22334,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " command. The NPI is available for <em>plugins</em> written with Java or .NET <em>plugin</em> SDKs. If you are a <em>plugin</em> <em>developer</em>, follow these steps to meet the NPI requirements for a consistent installation experience, and publish your <em>plugin</em> in <em>Plugin</em> Central as NPI Compatible. In order to make your <em>plugin</em> NPI-compatible"
      },
      "id": "603eae7c28ccbc8e3ceba799"
    },
    {
      "sections": [
        "Plugin summary metrics and dashboards",
        "Important",
        "Limited access to legacy plugins",
        "Plugin summary metrics",
        "Add summary metrics",
        "Optional: Add alert summary metrics",
        "Time periods for metrics",
        "Plugin dashboards",
        "View the default dashboard",
        "Add dashboards",
        "Avoid metric grouping problems",
        "Change or delete dashboards",
        "Plugin settings",
        "Initial settings",
        "Additional updates"
      ],
      "title": "Plugin summary metrics and dashboards",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "a0163b9f1efd59d8c50c60a3b8b5b5419f336824",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/plugin-summary-metrics-dashboards/",
      "published_at": "2021-05-22T08:03:11Z",
      "updated_at": "2021-03-16T11:00:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin summary metrics Each component or instance for your plugin in Plugin Central can have summary metrics, such as average, total, minimum, maximum, standard deviation, rate, or count. The summary metrics appear on your plugin's Summary page in the Plugins user interface. The summary metric dashboards are also useful as a debugging tool to review all of the metrics sent by your plugin agent to New Relic. To view dashboard details about any component or instance, select any summary metric value for it. You can also change various plugin settings in the UI. When you first create a summary metric for your plugin, this triggers a change to New Relic's collectors. This may cause your running components (instances) to stop showing summary metrics for a short period of time. For example, if you add a new summary metric to your plugin, any components (instances) you are monitoring that use that plugin may have all summary metrics temporarily cleared. This will also close any outstanding related events and alerts. Depending on the components and other factors, you may need to wait fifteen minutes or more before summary metrics appear again. Add summary metrics To add a summary metric: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select Edit. From the Summary metrics section of the plugin's editing page, select Add. If your plugin contains only one summary metric, you can identify the metric in the chart's title and then hide the legend (colored bars that label the metrics) that normally appears below the chart. Also, if you define negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Optional: Add alert summary metrics Plugin publishers and users can define alert conditions from the plugin's Summary page by selecting the component's or instance's settings icon. The alerts will be activated when the summary metric's specified values fall above the thresholds. The Recent events list for the plugin's components (instances) appears on the plugin's Summary page. To view additional details about an alert, select its name. Sometimes there may be a delay between the time that a summary metric event is triggered and the time that New Relic creates the corresponding incident and sends the alert notification. There are several timing mechanisms at work, such as collector caching, summary metric event timing, delayed job queues, email delivery, etc. Depending on the situation, this delay could be up to ten or fifteen minutes before the alert notification is sent. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metrics. This is why you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show various time periods. You can also deliver data at one-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, New Relic aggregates when there is too much data, but it does not extrapolate if there is not enough data. In order for data to appear on a 30-minute chart, make sure at least one data point is within the range, or no data will appear. Recommendation: Use a 60-second polling interval. Default dashboards show 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Plugin dashboards You can create dashboards to visualize the data generated by your plugins in New Relic. You must be a plugin author or publisher to add, edit, and delete dashboards. Plugin users cannot customize the plugin dashboards they acquire from Plugin Central. View the default dashboard New plugins automatically include a default dashboard. Once your plugin agent starts sending data to New Relic's Plugin API, you can view the default dashboard in New Relic's UI and change it as needed. To view the default dashboard for your plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select a component (instance). Add dashboards In addition to the default dashboard, you can create as many additional dashboards for your plugin as you want. After you publish your plugin, all of these dashboards and summary metrics are available to plugin users. The customized dashboards that display plugin data are part of the plugin. Plugin users cannot add their own dashboards. This needs to be done by the author or publisher as part of a plugin fork or update. To create additional dashboards: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, select Edit. From the Dashboards section of the plugin's editing page, select Add. Specify a title for your dashboard, select a page layout, then select Create. From the new dashboard page, type a label for the new chart or table, and then select Add chart or table. Edit the chart, including the case-sensitive metrics (for example, a metric name you see in the agent output, such as Component/SIN[Value]) and value (for example, Total value). To use additional options (for example, number format), select Advanced options. Optional: Use a wildcard (*) to show multiple metrics on a chart. For example, to include the metric component/foo/bar and the metric component/foo/xyz, use the metric name component/foo/*.f Select Save and Preview to preview the chart or table. Or, select Save and finish when you are satisfied with the appearance of the chart or table. Review the new chart that appears on the customized dashboard, and continue adding, editing, or rearranging charts and tables on your dashboard as needed. When finished, select I'm done editing. Avoid metric grouping problems Wildcards provide flexibility for how your metric names appear. When creating a chart, consider whether you want the metric names to appear with identical namespace segments, or include a wildcard to strip the namespace segments. For example: Component/Database/Metric1 Component/Database/Metric2 Component/Database/Metric3 Copy OR Metric1 Metric2 Metric3 Copy To prevent problems with metric grouping issues, avoid defining values that result in excessively large numbers. For example, if a plugin's chart value is 1 widget and New Relic collects 3 million widgets, change the value to 1 million widgets so that the chart can show millions of widgets more efficiently. Also, avoid creating high-precision values containing many digits after a decimal point. Change or delete dashboards To update or remove any plugin dashboard, including the default: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, select Edit. Keep a stable production version of your plugin that users can acquire from Plugin Central, and create a development version that you are actively improving, testing, browsing the presentation of metrics on your custom dashboard, or otherwise have in a non-production state. Plugin settings You can change several plugin settings before you publish the plugin. You can also make changes at any time to published plugins. Initial settings Before you publish your plugin, you can: Select a generic plugin icon for the Plugins UI. This is not the same as the URL for your customized branding image you may choose as part of the publishing process. Change your plugin's label for the Plugins UI. By default, this is the first 11 characters of the plugin's Title field. Change your plugin's title. The default title is your plugin's GUID. Add, change, or delete your plugin's summary metrics and their alert conditions. Add, change, or delete your plugin's dashboards. Exception: You can edit but you cannnot delete your plugin's default dashboard. To add, change, or delete plugin settings: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select Edit. When finished, be sure to save your changes. Additional updates After you publish your plugin, you can continue making changes. Recommendation: To avoid development and testing impacts on your users, maintain development and production versions. To make additional updates to your plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From your plugin's Summary page, select Edit, Publish, or your component's (instance's) settings icon as applicable. Update the settings as needed, and then save your changes. When you are ready to release this version: Go to one.newrelic.com > More > Plugins, select your plugin, and then select Publish. Here is a summary of where to view or make changes to your plugin. Type of change Edit Publish Settings Agent: Change the plugin's version (n/a in UI). Alert conditions, customized for components (instances) Alert conditions, defaults for summary metrics Branding image (URL) that appears in Plugin Central Components (instances): Remove from your plugin Dashboards: Add, edit, delete Description Developer Terms of Service Icon that appears in the Plugins UI Name for plugin (label) in the Plugins UI Name for plugin (title) in Plugin Central NPI Compatible designation Publisher's name Summary metrics: Add, edit, delete URL for installation and setup instructions URL for your support site URL for your website (\"About us\")",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.22334,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> summary metrics and dashboards",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " Branding image (URL) that appears in <em>Plugin</em> Central Components (instances): Remove from your <em>plugin</em> Dashboards: Add, edit, delete Description <em>Developer</em> Terms of Service Icon that appears in the <em>Plugins</em> UI Name for <em>plugin</em> (label) in the <em>Plugins</em> UI Name for <em>plugin</em> (title) in <em>Plugin</em> Central NPI"
      },
      "id": "603ea2bc196a6740f7a83de2"
    }
  ],
  "/docs/plugins/plugin-developer-resources/develop-plugins/create-plugin": [
    {
      "sections": [
        "Maintain plugin versions",
        "Important",
        "Limited access to legacy plugins",
        "Plugin agents and dashboards",
        "Agent versioning",
        "Update a SaaS agent",
        "Update an on-premises agent",
        "Update plugin dashboards"
      ],
      "title": "Maintain plugin versions",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "70efb125146afeda3c6e672e6c9b0e769ce4eb37",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/maintain-plugin-versions/",
      "published_at": "2021-05-22T08:01:38Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin agents and dashboards As a plugin publisher, typically you need to have two versions of your plugin running simultaneously: The stable production version that users can acquire from Plugin Central in New Relic A development version that you are actively improving, testing, or otherwise have in a non-production state Plugins contain two versioned parts: The agent collects metrics from the source and transmits those metrics to the Plugin API. The dashboard is a collection of visualizations and configurations that you make in the Plugins user interface. Plugin users view this automatically from their own Plugins dashboards in New Relic. Versioning works differently for these two parts. Agent versioning There are two types of plugin agents, with two different versioning situations: SaaS agents are agents that you, the SaaS application developer, deploy and run on behalf of your SaaS users. On-premises agents are agents that your users install into their systems. Plugin agents Versioning SaaS agents There is only one copy of this agent running anywhere (the one you developed and deployed on behalf of your users), so whatever version you are running will inherently be the latest version. Whatever metrics the latest version is sending to New Relic will be the metrics available to (but not necessarily charted for) your users in their Plugins dashboards. On-premises agents When you publish a new version of your agent, all of your plugin users' dashboards will note that a new agent version is available. They will be directed to your Plugin Central listing, where they can download and install the new version of your agent. Recommendation: Provide a streamlined agent update procedure in your own documentation. Update a SaaS agent This procedure assumes: You are starting with a plugin published to the Plugin Central (the production version). Your plugin has a SaaS agent running inside your app, and you want to make improvements to the SaaS agent portion of your plugin. As part of your normal development process you have a second dev version of your agent running, which is not published in Plugin Central. Your plugin's dev version uses a different GUID (for example, com.company.service.plugin.dev). Both your dev and your production plugins have the same plugin dashboards. To update your plugin's SaaS agent: Make changes to your dev agent. Do not change the version number or GUID of your dev agent in the agent config file. When you are ready to make your latest dev agent the production agent for your customers, follow your standard procedures to deploy your dev code to production. If applicable, make any necessary changes to your plugin's dashboards. Your users will receive no notification, and they do not need to take any action. You didn't change the version number, so your agent changes are transparent to your users. Update an on-premises agent This procedure assumes you are starting with a plugin published in Plugin Central, and you want to make improvements to the on-premises agent portion of your plugin. Make a copy of your agent code. Change the version number in the agent config file. To ensure that New Relic knows two different versions of your agent exist now, run the agent so that it reports metrics to the Plugin API. Continue working on your agent and making improvements, but do not change the version number again. When you are ready to make this new agent version the latest version for your plugin users, save it to the location where you distribute your agent code (for example, GitHub). From the New Relic UI, select your published plugin, select Edit, and then select Save. Select Publish, and then select the new agent version you are publishing. At this point, all of your plugin users will see a notice in the Plugins UI that a new version is available. They will be directed to your listing in Plugin Central, which points to your download location. From there your users can acquire your new agent version. Update plugin dashboards If you add metrics to your agent, be sure to add them to charts on your dashboard, and then save your dashboard and re-publish. All your users will see the new dashboard, and the new metrics will either be populated immediately (if you are running a SaaS agent on their behalf) or as soon as they update their agent (if you are offering an on-premises agent). If you need to migrate dashboards between GUIDs, get help at support.newrelic.com. Otherwise, to update your dashboard, follow this workflow. These steps assume you are starting with a plugin already published in Plugin Central, and you want to make improvements to the dashboard portion of your plugin. Go to one.newrelic.com > More > Plugins, and select your plugin's name. From your plugin's summary page, select Edit > Dashboards, then add, edit, or delete dashboards. When you are ready to publish: From your plugin's summary page, select Publish. At this point, all of your plugin users will see your new dashboard version the next time they select your plugin's dashboard in the New Relic UI.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.2289,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Maintain <em>plugin</em> versions",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e956fe7b9d28f062a07b5"
    },
    {
      "sections": [
        "Checklist for developing plugins",
        "Important",
        "Limited access to legacy plugins",
        "Plan your plugin",
        "Create your plugin",
        "Publish your plugin",
        "Documentation",
        "\"About us\" URL",
        "Branding image URL",
        "Developer terms of service",
        "Publication",
        "Versions",
        "Plugin support",
        "Support for your plugin users",
        "Escalated plugin support"
      ],
      "title": "Checklist for developing plugins",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "c60d87c25a2c835d2b7e44340bddb678117ddd07",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/checklist-developing-plugins/",
      "published_at": "2021-05-22T15:40:26Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plan your plugin When planning your plugin for Plugin Central: Sketch the types of metrics you want to collect and how you want to present them on dashboards. Include any necessary mathematical calculations. Sketch the types of summary metrics you want to collect and how you want to present them on the plugin's summary page. Include any necessary mathematical calculations. Optional: Define alert conditions for your metrics. Optional: If you want to receive alert notifications for your plugin, verify the email address to be used and confirm any other notification options as necessary. Decide whether to develop the plugin with one of the plugin SDKs or to use the Plugin API. Create your plugin When creating your plugin for Plugin Central: Select a unique, meaningful GUID name. Write the plugin agent. Test your plugin, including summary metrics, customized dashboards, alert conditions, and your process to disable or uninstall your plugin. Consider writing Chef and Puppet installation scripts to make plugin installation easier. Publish your plugin The following items are required for plugins published through New Relic's Plugin Central. If you do not plan to make your plugin publicly accessible to users, some of these items are not applicable. Documentation When documenting your plugin, include requirements and procedures to install, configure, use, troubleshoot, uninstall, and contact your support resources. Documentation requirements Guidelines Title Descriptive title; for example, \"Wikipedia plugin for New Relic.\" Table of contents List of main topics with anchors to each section. Description Explanation of how the plugin can be used in New Relic to monitor and improve the associated software's performance. What systems does it monitor (for example, memcache, versions X-Y, on the local host, sets and gets)? What problem does it solve? Plugin requirements Requirements or dependencies; for example: Internet access via SSL (HTTPS) Supported operating systems Minimum environment requirements (Java, Ruby, glibc, etc.) Supported monitored systems Any known limitations Metrics source documentation Plugin users may not be familiar with all the metrics displayed, their source, what the metrics mean, etc. If you have documentation that provides these details, be sure to include links to that information. For example: Description of data expected from source, frequency, mechanism, etc.; for example, \"Data is read from a file socket and exported from the source once per second.\") Description of data itself; for example, a well-formatted JSON such as {X: {y: z}} Description of data being sent; for example, average response time in milliseconds, of a set or get, taken over a minute, recorded from the specified data Installation Step-by-step procedures to obtain and install the plugin. Do not require su or sudo permission in order to install your agent or support software unless absolutely required. These requirements must be limited in scope and well documented. Configuration Instructions to configure the plugin, expected format, and how to set them. Include how to find the user's New Relic license key. Troubleshooting Include instructions as applicable; for example: How to resolve common problems: Unable to connect to New Relic, unable to connect to the monitored server, incorrect license key How to enable logging or verbose logging How to restart the plugin How to test connectivity to New Relic How to handle errors; for example, failure to read, aggregate, or send data Disabling and uninstalling Questions to consider: Are there other dependencies before disabling or uninstalling the plugin? For example, are there any special procedures your plugin users need to know in order to have their operating system stop the process from running, so that they can remove components (instances) from their installed plugin? Can you temporarily disable and then re-enable the plugin (for example, for troubleshooting or updating it), or must you completely uninstall and reinstall? Can the uninstall procedure be done from a command line? Support resources Make a plan for supporting your plugin and identifying a support URL for users. In your plugin's support information, describe how users can contact you for support in whatever way works best for you: documentation website, phone, email, forum, Twitter, ticketing system, etc. \"About us\" URL Identify the About Us URL for your plugin. Branding image URL Identify a URL to a branding image for when you publish your plugin. Follow these formatting guidelines: Set the image size to 64 x 64px. Save as a .png or .gif file. Use transparency for the background unless it is a square icon. Design the image to display well on both white and black backgrounds. Developer terms of service Review the Developer Terms of Service for New Relic Plugins. A link to this document appears on your plugin's Publish page in the UI. Publication Plugin Central is the repository of plugins available in New Relic. If you want to distribute your plugin through Plugin Central, make sure your documentation and support plans are in place, then select your plugin's Publish option in the New Relic UI. The Publish page in the UI prompts you to verify all requirements. As soon as your plugin is published, all of its dashboards and summary metrics are available for your plugin users. The Distribution method identifies how users can obtain your plugin from Plugin Central. File download: Most developers typically select this option for plugin setup and installation. Webpage link: SaaS providers typically select this option for plugin configuration and identify their website's landing page URL. Platform Installer (NPI): If you use the New Relic Platform Installer (NPI) command line utility to package your plugin, select this option. You can also publish a plugin without listing it in Plugin Central; for example, if you want to beta test it first, or if you only want specific users to be able to use it. When publishing an unlisted plugin, make sure the checkbox option in the UI for List this plugin in Plugin Central is not selected. You will need to communicate directly with your users when your unlisted plugin is added, updated, or removed. Versions You can update and re-publish your plugin as often as you want. Every time you publish changes to your plugin and list them in Plugin Central, the changes are immediately visible in Plugin Central. In addition, your published plugin changes typically appear in New Relic's website within five minutes. Recommendation: To avoid development and testing impacts on your users, maintain dev and production versions when updating your plugin. Plugin support Plugin publishers are responsible for providing first-line support if users have problems using their plugin. This includes verifying correct data acquisition and transmission. If problems continue with getting the expected data into New Relic's user interface after you complete your troubleshooting procedures, then you (not your users) can escalate the problem to New Relic. We will work with you to resolve the problem, and then you can communicate the solution to your users. Support for your plugin users Follow these guidelines for supporting your plugin's users by confirming data collection and transmission. Check that the plugin configuration is correct, including: Necessary credentials for the target system IP addresses or DNS names for the target system Any settings that might affect data acquisition Review transmission logs for errors, including: Authentication errors Connection errors Error responses from the target system Review transaction logs for useful data. How much data is being collected? Does the data make sense? Verify if the plugin is converting acquired data into useful metrics. Do the metrics make sense? Would the metrics make a good chart? Are the metrics being aggregated into valid JSON? Is the JSON size within limits? Confirm transmission of the plugin data. If you are using an SDK for New Relic Plugins and the Plugin API, does your data transmission conform to New Relic's rate limits? Are the 50X codes sporadic or continuous? Do your transaction logs indicate any data transmission problems? Escalated plugin support If you have verified good data acquisition and transmission, but there still is trouble getting the expected data in New Relic's user interface, escalate the support request to New Relic on behalf of your users. Do not have your users contact us. Include as much of the following information as possible: Plugin support requests Notes User affected by the problem Information such as: Permalink to the plugin page where you see the problem, so that we can view the endpoint. Recommendation: Ask the user if you can add your user ID to the New Relic account so that you can obtain a permalink yourself. User's New Relic account ID. If you do not have the user's permalink or account ID, include the user's email address they used to sign up for their New Relic account. (This may be a different email than the one they used to contact you.) User's name and New Relic account name. Detailed description of the problem For example: The user can see data, but it's not the data they are expecting. The user can see no data at all. The user configured and started the plugin correctly, but it does not appear in the user interface for New Relic Plugins. Any other specific details about the problem. Other evidence This includes: Explain the troubleshooting you have done so far and what you expected to happen in contrast to the actual results. Provide any available permalinks, screenshots, and log files. Summarize your understanding of the problem. We will work with you to characterize and resolve the problem. Keep the user updated with progress. After we provide you with a resolution, ask the user to verify the results.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.2289,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Checklist for <em>developing</em> <em>plugins</em>",
        "sections": "Checklist for <em>developing</em> <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " white and black backgrounds. <em>Developer</em> terms of service Review the <em>Developer</em> Terms of Service for New Relic <em>Plugins</em>. A link to this document appears on your <em>plugin</em>&#x27;s Publish page in the UI. Publication <em>Plugin</em> Central is the repository of <em>plugins</em> available in New Relic. If you want to distribute your"
      },
      "id": "603ec26f64441fe6484e885f"
    },
    {
      "sections": [
        "Use the New Relic Platform Installer (NPI) utility",
        "Important",
        "Limited access to legacy plugins",
        "NPI compatibility requirements",
        "Distribution",
        "NPI command line utility",
        "Updates",
        "Privately-published plugins"
      ],
      "title": "Use the New Relic Platform Installer (NPI) utility",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "a8a5c308f1e4f69ea801fd595bc7b679ae5eaac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/use-new-relic-platform-installer-npi-utility/",
      "published_at": "2021-05-22T08:03:11Z",
      "updated_at": "2021-03-16T11:00:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. NPI compatibility requirements The New Relic Platform Installer (NPI) is a command line utility for plugins in Plugin Central. It allows users to easily download, configure, and manage a plugin by installing it with a single command. The NPI is available for plugins written with Java or .NET plugin SDKs. If you are a plugin developer, follow these steps to meet the NPI requirements for a consistent installation experience, and publish your plugin in Plugin Central as NPI Compatible. In order to make your plugin NPI-compatible, make sure it meets each of these requirements: NPI compatibility Requirements Writing your plugin Java: See the Java SDK README file in GitHub for plugins. .NET: See the .NET SDK README file in GitHub for plugins. Packaging Use the tar.gz or zip compression protocol to package your plugin. Executable Name the executable file plugin.jar (for Java) or plugin.exe (for .NET), and store it in the root of your plugin folder. Code Do not use any relative references in your code. Configuration files Create a ./config directory containing a plugin.template.json file and a newrelic.template.json file. Make sure that plugin configuration is read from the plugin.json file in the ./config directory. For more information, refer to the README in GitHub. Distribution Once your plugin is NPI-compatible from a code perspective, place it somewhere that is accessible for consumers to download. For example, add the compressed distributable to a dist folder in your GitHub repository. When your plugin is ready for distribution, follow standard procedures to publish it in Plugin Central. Be sure to select the Platform Installer (NPI) distribution option. NPI command line utility When users select an NPI Compatible plugin from Plugin Central, they also have the option to download the NPI tool. The tool allows users to easily download, configure, and manage a plugin. They can also use a series of commands to manage their plugins or pass the --help flag for more information about available options. Updates After you create and publish an NPI-compatible plugin, follow standard procedures to update it as needed. Then, when you publish the updated plugin, the NPI tool automatically will pick up your most current version for users who have installed your NPI-compatible plugin. Privately-published plugins In general, the NPI tool will try to pull download (manifest) information from New Relic's Plugins service. You can also provide a file named manifest.json in the config directory of your NPI installation to provide this information. Use this file format: [ { \"guid\": \"arbitrary_identifier\", \"download_url\": \"https://plugin.download.url.com\", \"publisher\": \"New Relic Inc.\", \"version\": \"1.0.1\", \"installer_compatible\": true, \"implementation\": \"Java\" }, { \"guid\": \"arbitrary_identifier2\", \"download_url\": \"https://plugin2.download.url.com\", \"publisher\": \"New Relic Inc.\", \"version\": \"2.0.0\", \"installer_compatible\": true, \"implementation\": \".NET\" } ] Copy After you set this up, you can run all the same commands with your private plugin's GUID. To install or fetch a plugin, you must pass the --untrusted flag to allow downloading plugins from a local file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.22334,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " command. The NPI is available for <em>plugins</em> written with Java or .NET <em>plugin</em> SDKs. If you are a <em>plugin</em> <em>developer</em>, follow these steps to meet the NPI requirements for a consistent installation experience, and publish your <em>plugin</em> in <em>Plugin</em> Central as NPI Compatible. In order to make your <em>plugin</em> NPI-compatible"
      },
      "id": "603eae7c28ccbc8e3ceba799"
    }
  ],
  "/docs/plugins/plugin-developer-resources/develop-plugins/maintain-plugin-versions": [
    {
      "sections": [
        "Checklist for developing plugins",
        "Important",
        "Limited access to legacy plugins",
        "Plan your plugin",
        "Create your plugin",
        "Publish your plugin",
        "Documentation",
        "\"About us\" URL",
        "Branding image URL",
        "Developer terms of service",
        "Publication",
        "Versions",
        "Plugin support",
        "Support for your plugin users",
        "Escalated plugin support"
      ],
      "title": "Checklist for developing plugins",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "c60d87c25a2c835d2b7e44340bddb678117ddd07",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/checklist-developing-plugins/",
      "published_at": "2021-05-22T15:40:26Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plan your plugin When planning your plugin for Plugin Central: Sketch the types of metrics you want to collect and how you want to present them on dashboards. Include any necessary mathematical calculations. Sketch the types of summary metrics you want to collect and how you want to present them on the plugin's summary page. Include any necessary mathematical calculations. Optional: Define alert conditions for your metrics. Optional: If you want to receive alert notifications for your plugin, verify the email address to be used and confirm any other notification options as necessary. Decide whether to develop the plugin with one of the plugin SDKs or to use the Plugin API. Create your plugin When creating your plugin for Plugin Central: Select a unique, meaningful GUID name. Write the plugin agent. Test your plugin, including summary metrics, customized dashboards, alert conditions, and your process to disable or uninstall your plugin. Consider writing Chef and Puppet installation scripts to make plugin installation easier. Publish your plugin The following items are required for plugins published through New Relic's Plugin Central. If you do not plan to make your plugin publicly accessible to users, some of these items are not applicable. Documentation When documenting your plugin, include requirements and procedures to install, configure, use, troubleshoot, uninstall, and contact your support resources. Documentation requirements Guidelines Title Descriptive title; for example, \"Wikipedia plugin for New Relic.\" Table of contents List of main topics with anchors to each section. Description Explanation of how the plugin can be used in New Relic to monitor and improve the associated software's performance. What systems does it monitor (for example, memcache, versions X-Y, on the local host, sets and gets)? What problem does it solve? Plugin requirements Requirements or dependencies; for example: Internet access via SSL (HTTPS) Supported operating systems Minimum environment requirements (Java, Ruby, glibc, etc.) Supported monitored systems Any known limitations Metrics source documentation Plugin users may not be familiar with all the metrics displayed, their source, what the metrics mean, etc. If you have documentation that provides these details, be sure to include links to that information. For example: Description of data expected from source, frequency, mechanism, etc.; for example, \"Data is read from a file socket and exported from the source once per second.\") Description of data itself; for example, a well-formatted JSON such as {X: {y: z}} Description of data being sent; for example, average response time in milliseconds, of a set or get, taken over a minute, recorded from the specified data Installation Step-by-step procedures to obtain and install the plugin. Do not require su or sudo permission in order to install your agent or support software unless absolutely required. These requirements must be limited in scope and well documented. Configuration Instructions to configure the plugin, expected format, and how to set them. Include how to find the user's New Relic license key. Troubleshooting Include instructions as applicable; for example: How to resolve common problems: Unable to connect to New Relic, unable to connect to the monitored server, incorrect license key How to enable logging or verbose logging How to restart the plugin How to test connectivity to New Relic How to handle errors; for example, failure to read, aggregate, or send data Disabling and uninstalling Questions to consider: Are there other dependencies before disabling or uninstalling the plugin? For example, are there any special procedures your plugin users need to know in order to have their operating system stop the process from running, so that they can remove components (instances) from their installed plugin? Can you temporarily disable and then re-enable the plugin (for example, for troubleshooting or updating it), or must you completely uninstall and reinstall? Can the uninstall procedure be done from a command line? Support resources Make a plan for supporting your plugin and identifying a support URL for users. In your plugin's support information, describe how users can contact you for support in whatever way works best for you: documentation website, phone, email, forum, Twitter, ticketing system, etc. \"About us\" URL Identify the About Us URL for your plugin. Branding image URL Identify a URL to a branding image for when you publish your plugin. Follow these formatting guidelines: Set the image size to 64 x 64px. Save as a .png or .gif file. Use transparency for the background unless it is a square icon. Design the image to display well on both white and black backgrounds. Developer terms of service Review the Developer Terms of Service for New Relic Plugins. A link to this document appears on your plugin's Publish page in the UI. Publication Plugin Central is the repository of plugins available in New Relic. If you want to distribute your plugin through Plugin Central, make sure your documentation and support plans are in place, then select your plugin's Publish option in the New Relic UI. The Publish page in the UI prompts you to verify all requirements. As soon as your plugin is published, all of its dashboards and summary metrics are available for your plugin users. The Distribution method identifies how users can obtain your plugin from Plugin Central. File download: Most developers typically select this option for plugin setup and installation. Webpage link: SaaS providers typically select this option for plugin configuration and identify their website's landing page URL. Platform Installer (NPI): If you use the New Relic Platform Installer (NPI) command line utility to package your plugin, select this option. You can also publish a plugin without listing it in Plugin Central; for example, if you want to beta test it first, or if you only want specific users to be able to use it. When publishing an unlisted plugin, make sure the checkbox option in the UI for List this plugin in Plugin Central is not selected. You will need to communicate directly with your users when your unlisted plugin is added, updated, or removed. Versions You can update and re-publish your plugin as often as you want. Every time you publish changes to your plugin and list them in Plugin Central, the changes are immediately visible in Plugin Central. In addition, your published plugin changes typically appear in New Relic's website within five minutes. Recommendation: To avoid development and testing impacts on your users, maintain dev and production versions when updating your plugin. Plugin support Plugin publishers are responsible for providing first-line support if users have problems using their plugin. This includes verifying correct data acquisition and transmission. If problems continue with getting the expected data into New Relic's user interface after you complete your troubleshooting procedures, then you (not your users) can escalate the problem to New Relic. We will work with you to resolve the problem, and then you can communicate the solution to your users. Support for your plugin users Follow these guidelines for supporting your plugin's users by confirming data collection and transmission. Check that the plugin configuration is correct, including: Necessary credentials for the target system IP addresses or DNS names for the target system Any settings that might affect data acquisition Review transmission logs for errors, including: Authentication errors Connection errors Error responses from the target system Review transaction logs for useful data. How much data is being collected? Does the data make sense? Verify if the plugin is converting acquired data into useful metrics. Do the metrics make sense? Would the metrics make a good chart? Are the metrics being aggregated into valid JSON? Is the JSON size within limits? Confirm transmission of the plugin data. If you are using an SDK for New Relic Plugins and the Plugin API, does your data transmission conform to New Relic's rate limits? Are the 50X codes sporadic or continuous? Do your transaction logs indicate any data transmission problems? Escalated plugin support If you have verified good data acquisition and transmission, but there still is trouble getting the expected data in New Relic's user interface, escalate the support request to New Relic on behalf of your users. Do not have your users contact us. Include as much of the following information as possible: Plugin support requests Notes User affected by the problem Information such as: Permalink to the plugin page where you see the problem, so that we can view the endpoint. Recommendation: Ask the user if you can add your user ID to the New Relic account so that you can obtain a permalink yourself. User's New Relic account ID. If you do not have the user's permalink or account ID, include the user's email address they used to sign up for their New Relic account. (This may be a different email than the one they used to contact you.) User's name and New Relic account name. Detailed description of the problem For example: The user can see data, but it's not the data they are expecting. The user can see no data at all. The user configured and started the plugin correctly, but it does not appear in the user interface for New Relic Plugins. Any other specific details about the problem. Other evidence This includes: Explain the troubleshooting you have done so far and what you expected to happen in contrast to the actual results. Provide any available permalinks, screenshots, and log files. Summarize your understanding of the problem. We will work with you to characterize and resolve the problem. Keep the user updated with progress. After we provide you with a resolution, ask the user to verify the results.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.2289,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Checklist for <em>developing</em> <em>plugins</em>",
        "sections": "Checklist for <em>developing</em> <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " white and black backgrounds. <em>Developer</em> terms of service Review the <em>Developer</em> Terms of Service for New Relic <em>Plugins</em>. A link to this document appears on your <em>plugin</em>&#x27;s Publish page in the UI. Publication <em>Plugin</em> Central is the repository of <em>plugins</em> available in New Relic. If you want to distribute your"
      },
      "id": "603ec26f64441fe6484e885f"
    },
    {
      "sections": [
        "Use the New Relic Platform Installer (NPI) utility",
        "Important",
        "Limited access to legacy plugins",
        "NPI compatibility requirements",
        "Distribution",
        "NPI command line utility",
        "Updates",
        "Privately-published plugins"
      ],
      "title": "Use the New Relic Platform Installer (NPI) utility",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "a8a5c308f1e4f69ea801fd595bc7b679ae5eaac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/use-new-relic-platform-installer-npi-utility/",
      "published_at": "2021-05-22T08:03:11Z",
      "updated_at": "2021-03-16T11:00:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. NPI compatibility requirements The New Relic Platform Installer (NPI) is a command line utility for plugins in Plugin Central. It allows users to easily download, configure, and manage a plugin by installing it with a single command. The NPI is available for plugins written with Java or .NET plugin SDKs. If you are a plugin developer, follow these steps to meet the NPI requirements for a consistent installation experience, and publish your plugin in Plugin Central as NPI Compatible. In order to make your plugin NPI-compatible, make sure it meets each of these requirements: NPI compatibility Requirements Writing your plugin Java: See the Java SDK README file in GitHub for plugins. .NET: See the .NET SDK README file in GitHub for plugins. Packaging Use the tar.gz or zip compression protocol to package your plugin. Executable Name the executable file plugin.jar (for Java) or plugin.exe (for .NET), and store it in the root of your plugin folder. Code Do not use any relative references in your code. Configuration files Create a ./config directory containing a plugin.template.json file and a newrelic.template.json file. Make sure that plugin configuration is read from the plugin.json file in the ./config directory. For more information, refer to the README in GitHub. Distribution Once your plugin is NPI-compatible from a code perspective, place it somewhere that is accessible for consumers to download. For example, add the compressed distributable to a dist folder in your GitHub repository. When your plugin is ready for distribution, follow standard procedures to publish it in Plugin Central. Be sure to select the Platform Installer (NPI) distribution option. NPI command line utility When users select an NPI Compatible plugin from Plugin Central, they also have the option to download the NPI tool. The tool allows users to easily download, configure, and manage a plugin. They can also use a series of commands to manage their plugins or pass the --help flag for more information about available options. Updates After you create and publish an NPI-compatible plugin, follow standard procedures to update it as needed. Then, when you publish the updated plugin, the NPI tool automatically will pick up your most current version for users who have installed your NPI-compatible plugin. Privately-published plugins In general, the NPI tool will try to pull download (manifest) information from New Relic's Plugins service. You can also provide a file named manifest.json in the config directory of your NPI installation to provide this information. Use this file format: [ { \"guid\": \"arbitrary_identifier\", \"download_url\": \"https://plugin.download.url.com\", \"publisher\": \"New Relic Inc.\", \"version\": \"1.0.1\", \"installer_compatible\": true, \"implementation\": \"Java\" }, { \"guid\": \"arbitrary_identifier2\", \"download_url\": \"https://plugin2.download.url.com\", \"publisher\": \"New Relic Inc.\", \"version\": \"2.0.0\", \"installer_compatible\": true, \"implementation\": \".NET\" } ] Copy After you set this up, you can run all the same commands with your private plugin's GUID. To install or fetch a plugin, you must pass the --untrusted flag to allow downloading plugins from a local file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.22334,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " command. The NPI is available for <em>plugins</em> written with Java or .NET <em>plugin</em> SDKs. If you are a <em>plugin</em> <em>developer</em>, follow these steps to meet the NPI requirements for a consistent installation experience, and publish your <em>plugin</em> in <em>Plugin</em> Central as NPI Compatible. In order to make your <em>plugin</em> NPI-compatible"
      },
      "id": "603eae7c28ccbc8e3ceba799"
    },
    {
      "sections": [
        "Plugin summary metrics and dashboards",
        "Important",
        "Limited access to legacy plugins",
        "Plugin summary metrics",
        "Add summary metrics",
        "Optional: Add alert summary metrics",
        "Time periods for metrics",
        "Plugin dashboards",
        "View the default dashboard",
        "Add dashboards",
        "Avoid metric grouping problems",
        "Change or delete dashboards",
        "Plugin settings",
        "Initial settings",
        "Additional updates"
      ],
      "title": "Plugin summary metrics and dashboards",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "a0163b9f1efd59d8c50c60a3b8b5b5419f336824",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/plugin-summary-metrics-dashboards/",
      "published_at": "2021-05-22T08:03:11Z",
      "updated_at": "2021-03-16T11:00:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin summary metrics Each component or instance for your plugin in Plugin Central can have summary metrics, such as average, total, minimum, maximum, standard deviation, rate, or count. The summary metrics appear on your plugin's Summary page in the Plugins user interface. The summary metric dashboards are also useful as a debugging tool to review all of the metrics sent by your plugin agent to New Relic. To view dashboard details about any component or instance, select any summary metric value for it. You can also change various plugin settings in the UI. When you first create a summary metric for your plugin, this triggers a change to New Relic's collectors. This may cause your running components (instances) to stop showing summary metrics for a short period of time. For example, if you add a new summary metric to your plugin, any components (instances) you are monitoring that use that plugin may have all summary metrics temporarily cleared. This will also close any outstanding related events and alerts. Depending on the components and other factors, you may need to wait fifteen minutes or more before summary metrics appear again. Add summary metrics To add a summary metric: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select Edit. From the Summary metrics section of the plugin's editing page, select Add. If your plugin contains only one summary metric, you can identify the metric in the chart's title and then hide the legend (colored bars that label the metrics) that normally appears below the chart. Also, if you define negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Optional: Add alert summary metrics Plugin publishers and users can define alert conditions from the plugin's Summary page by selecting the component's or instance's settings icon. The alerts will be activated when the summary metric's specified values fall above the thresholds. The Recent events list for the plugin's components (instances) appears on the plugin's Summary page. To view additional details about an alert, select its name. Sometimes there may be a delay between the time that a summary metric event is triggered and the time that New Relic creates the corresponding incident and sends the alert notification. There are several timing mechanisms at work, such as collector caching, summary metric event timing, delayed job queues, email delivery, etc. Depending on the situation, this delay could be up to ten or fifteen minutes before the alert notification is sent. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metrics. This is why you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show various time periods. You can also deliver data at one-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, New Relic aggregates when there is too much data, but it does not extrapolate if there is not enough data. In order for data to appear on a 30-minute chart, make sure at least one data point is within the range, or no data will appear. Recommendation: Use a 60-second polling interval. Default dashboards show 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Plugin dashboards You can create dashboards to visualize the data generated by your plugins in New Relic. You must be a plugin author or publisher to add, edit, and delete dashboards. Plugin users cannot customize the plugin dashboards they acquire from Plugin Central. View the default dashboard New plugins automatically include a default dashboard. Once your plugin agent starts sending data to New Relic's Plugin API, you can view the default dashboard in New Relic's UI and change it as needed. To view the default dashboard for your plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select a component (instance). Add dashboards In addition to the default dashboard, you can create as many additional dashboards for your plugin as you want. After you publish your plugin, all of these dashboards and summary metrics are available to plugin users. The customized dashboards that display plugin data are part of the plugin. Plugin users cannot add their own dashboards. This needs to be done by the author or publisher as part of a plugin fork or update. To create additional dashboards: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, select Edit. From the Dashboards section of the plugin's editing page, select Add. Specify a title for your dashboard, select a page layout, then select Create. From the new dashboard page, type a label for the new chart or table, and then select Add chart or table. Edit the chart, including the case-sensitive metrics (for example, a metric name you see in the agent output, such as Component/SIN[Value]) and value (for example, Total value). To use additional options (for example, number format), select Advanced options. Optional: Use a wildcard (*) to show multiple metrics on a chart. For example, to include the metric component/foo/bar and the metric component/foo/xyz, use the metric name component/foo/*.f Select Save and Preview to preview the chart or table. Or, select Save and finish when you are satisfied with the appearance of the chart or table. Review the new chart that appears on the customized dashboard, and continue adding, editing, or rearranging charts and tables on your dashboard as needed. When finished, select I'm done editing. Avoid metric grouping problems Wildcards provide flexibility for how your metric names appear. When creating a chart, consider whether you want the metric names to appear with identical namespace segments, or include a wildcard to strip the namespace segments. For example: Component/Database/Metric1 Component/Database/Metric2 Component/Database/Metric3 Copy OR Metric1 Metric2 Metric3 Copy To prevent problems with metric grouping issues, avoid defining values that result in excessively large numbers. For example, if a plugin's chart value is 1 widget and New Relic collects 3 million widgets, change the value to 1 million widgets so that the chart can show millions of widgets more efficiently. Also, avoid creating high-precision values containing many digits after a decimal point. Change or delete dashboards To update or remove any plugin dashboard, including the default: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, select Edit. Keep a stable production version of your plugin that users can acquire from Plugin Central, and create a development version that you are actively improving, testing, browsing the presentation of metrics on your custom dashboard, or otherwise have in a non-production state. Plugin settings You can change several plugin settings before you publish the plugin. You can also make changes at any time to published plugins. Initial settings Before you publish your plugin, you can: Select a generic plugin icon for the Plugins UI. This is not the same as the URL for your customized branding image you may choose as part of the publishing process. Change your plugin's label for the Plugins UI. By default, this is the first 11 characters of the plugin's Title field. Change your plugin's title. The default title is your plugin's GUID. Add, change, or delete your plugin's summary metrics and their alert conditions. Add, change, or delete your plugin's dashboards. Exception: You can edit but you cannnot delete your plugin's default dashboard. To add, change, or delete plugin settings: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select Edit. When finished, be sure to save your changes. Additional updates After you publish your plugin, you can continue making changes. Recommendation: To avoid development and testing impacts on your users, maintain development and production versions. To make additional updates to your plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From your plugin's Summary page, select Edit, Publish, or your component's (instance's) settings icon as applicable. Update the settings as needed, and then save your changes. When you are ready to release this version: Go to one.newrelic.com > More > Plugins, select your plugin, and then select Publish. Here is a summary of where to view or make changes to your plugin. Type of change Edit Publish Settings Agent: Change the plugin's version (n/a in UI). Alert conditions, customized for components (instances) Alert conditions, defaults for summary metrics Branding image (URL) that appears in Plugin Central Components (instances): Remove from your plugin Dashboards: Add, edit, delete Description Developer Terms of Service Icon that appears in the Plugins UI Name for plugin (label) in the Plugins UI Name for plugin (title) in Plugin Central NPI Compatible designation Publisher's name Summary metrics: Add, edit, delete URL for installation and setup instructions URL for your support site URL for your website (\"About us\")",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.22334,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> summary metrics and dashboards",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " Branding image (URL) that appears in <em>Plugin</em> Central Components (instances): Remove from your <em>plugin</em> Dashboards: Add, edit, delete Description <em>Developer</em> Terms of Service Icon that appears in the <em>Plugins</em> UI Name for <em>plugin</em> (label) in the <em>Plugins</em> UI Name for <em>plugin</em> (title) in <em>Plugin</em> Central NPI"
      },
      "id": "603ea2bc196a6740f7a83de2"
    }
  ],
  "/docs/plugins/plugin-developer-resources/develop-plugins/plugin-summary-metrics-dashboards": [
    {
      "sections": [
        "Maintain plugin versions",
        "Important",
        "Limited access to legacy plugins",
        "Plugin agents and dashboards",
        "Agent versioning",
        "Update a SaaS agent",
        "Update an on-premises agent",
        "Update plugin dashboards"
      ],
      "title": "Maintain plugin versions",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "70efb125146afeda3c6e672e6c9b0e769ce4eb37",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/maintain-plugin-versions/",
      "published_at": "2021-05-22T08:01:38Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin agents and dashboards As a plugin publisher, typically you need to have two versions of your plugin running simultaneously: The stable production version that users can acquire from Plugin Central in New Relic A development version that you are actively improving, testing, or otherwise have in a non-production state Plugins contain two versioned parts: The agent collects metrics from the source and transmits those metrics to the Plugin API. The dashboard is a collection of visualizations and configurations that you make in the Plugins user interface. Plugin users view this automatically from their own Plugins dashboards in New Relic. Versioning works differently for these two parts. Agent versioning There are two types of plugin agents, with two different versioning situations: SaaS agents are agents that you, the SaaS application developer, deploy and run on behalf of your SaaS users. On-premises agents are agents that your users install into their systems. Plugin agents Versioning SaaS agents There is only one copy of this agent running anywhere (the one you developed and deployed on behalf of your users), so whatever version you are running will inherently be the latest version. Whatever metrics the latest version is sending to New Relic will be the metrics available to (but not necessarily charted for) your users in their Plugins dashboards. On-premises agents When you publish a new version of your agent, all of your plugin users' dashboards will note that a new agent version is available. They will be directed to your Plugin Central listing, where they can download and install the new version of your agent. Recommendation: Provide a streamlined agent update procedure in your own documentation. Update a SaaS agent This procedure assumes: You are starting with a plugin published to the Plugin Central (the production version). Your plugin has a SaaS agent running inside your app, and you want to make improvements to the SaaS agent portion of your plugin. As part of your normal development process you have a second dev version of your agent running, which is not published in Plugin Central. Your plugin's dev version uses a different GUID (for example, com.company.service.plugin.dev). Both your dev and your production plugins have the same plugin dashboards. To update your plugin's SaaS agent: Make changes to your dev agent. Do not change the version number or GUID of your dev agent in the agent config file. When you are ready to make your latest dev agent the production agent for your customers, follow your standard procedures to deploy your dev code to production. If applicable, make any necessary changes to your plugin's dashboards. Your users will receive no notification, and they do not need to take any action. You didn't change the version number, so your agent changes are transparent to your users. Update an on-premises agent This procedure assumes you are starting with a plugin published in Plugin Central, and you want to make improvements to the on-premises agent portion of your plugin. Make a copy of your agent code. Change the version number in the agent config file. To ensure that New Relic knows two different versions of your agent exist now, run the agent so that it reports metrics to the Plugin API. Continue working on your agent and making improvements, but do not change the version number again. When you are ready to make this new agent version the latest version for your plugin users, save it to the location where you distribute your agent code (for example, GitHub). From the New Relic UI, select your published plugin, select Edit, and then select Save. Select Publish, and then select the new agent version you are publishing. At this point, all of your plugin users will see a notice in the Plugins UI that a new version is available. They will be directed to your listing in Plugin Central, which points to your download location. From there your users can acquire your new agent version. Update plugin dashboards If you add metrics to your agent, be sure to add them to charts on your dashboard, and then save your dashboard and re-publish. All your users will see the new dashboard, and the new metrics will either be populated immediately (if you are running a SaaS agent on their behalf) or as soon as they update their agent (if you are offering an on-premises agent). If you need to migrate dashboards between GUIDs, get help at support.newrelic.com. Otherwise, to update your dashboard, follow this workflow. These steps assume you are starting with a plugin already published in Plugin Central, and you want to make improvements to the dashboard portion of your plugin. Go to one.newrelic.com > More > Plugins, and select your plugin's name. From your plugin's summary page, select Edit > Dashboards, then add, edit, or delete dashboards. When you are ready to publish: From your plugin's summary page, select Publish. At this point, all of your plugin users will see your new dashboard version the next time they select your plugin's dashboard in the New Relic UI.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.22888,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Maintain <em>plugin</em> versions",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e956fe7b9d28f062a07b5"
    },
    {
      "sections": [
        "Checklist for developing plugins",
        "Important",
        "Limited access to legacy plugins",
        "Plan your plugin",
        "Create your plugin",
        "Publish your plugin",
        "Documentation",
        "\"About us\" URL",
        "Branding image URL",
        "Developer terms of service",
        "Publication",
        "Versions",
        "Plugin support",
        "Support for your plugin users",
        "Escalated plugin support"
      ],
      "title": "Checklist for developing plugins",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "c60d87c25a2c835d2b7e44340bddb678117ddd07",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/checklist-developing-plugins/",
      "published_at": "2021-05-22T15:40:26Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plan your plugin When planning your plugin for Plugin Central: Sketch the types of metrics you want to collect and how you want to present them on dashboards. Include any necessary mathematical calculations. Sketch the types of summary metrics you want to collect and how you want to present them on the plugin's summary page. Include any necessary mathematical calculations. Optional: Define alert conditions for your metrics. Optional: If you want to receive alert notifications for your plugin, verify the email address to be used and confirm any other notification options as necessary. Decide whether to develop the plugin with one of the plugin SDKs or to use the Plugin API. Create your plugin When creating your plugin for Plugin Central: Select a unique, meaningful GUID name. Write the plugin agent. Test your plugin, including summary metrics, customized dashboards, alert conditions, and your process to disable or uninstall your plugin. Consider writing Chef and Puppet installation scripts to make plugin installation easier. Publish your plugin The following items are required for plugins published through New Relic's Plugin Central. If you do not plan to make your plugin publicly accessible to users, some of these items are not applicable. Documentation When documenting your plugin, include requirements and procedures to install, configure, use, troubleshoot, uninstall, and contact your support resources. Documentation requirements Guidelines Title Descriptive title; for example, \"Wikipedia plugin for New Relic.\" Table of contents List of main topics with anchors to each section. Description Explanation of how the plugin can be used in New Relic to monitor and improve the associated software's performance. What systems does it monitor (for example, memcache, versions X-Y, on the local host, sets and gets)? What problem does it solve? Plugin requirements Requirements or dependencies; for example: Internet access via SSL (HTTPS) Supported operating systems Minimum environment requirements (Java, Ruby, glibc, etc.) Supported monitored systems Any known limitations Metrics source documentation Plugin users may not be familiar with all the metrics displayed, their source, what the metrics mean, etc. If you have documentation that provides these details, be sure to include links to that information. For example: Description of data expected from source, frequency, mechanism, etc.; for example, \"Data is read from a file socket and exported from the source once per second.\") Description of data itself; for example, a well-formatted JSON such as {X: {y: z}} Description of data being sent; for example, average response time in milliseconds, of a set or get, taken over a minute, recorded from the specified data Installation Step-by-step procedures to obtain and install the plugin. Do not require su or sudo permission in order to install your agent or support software unless absolutely required. These requirements must be limited in scope and well documented. Configuration Instructions to configure the plugin, expected format, and how to set them. Include how to find the user's New Relic license key. Troubleshooting Include instructions as applicable; for example: How to resolve common problems: Unable to connect to New Relic, unable to connect to the monitored server, incorrect license key How to enable logging or verbose logging How to restart the plugin How to test connectivity to New Relic How to handle errors; for example, failure to read, aggregate, or send data Disabling and uninstalling Questions to consider: Are there other dependencies before disabling or uninstalling the plugin? For example, are there any special procedures your plugin users need to know in order to have their operating system stop the process from running, so that they can remove components (instances) from their installed plugin? Can you temporarily disable and then re-enable the plugin (for example, for troubleshooting or updating it), or must you completely uninstall and reinstall? Can the uninstall procedure be done from a command line? Support resources Make a plan for supporting your plugin and identifying a support URL for users. In your plugin's support information, describe how users can contact you for support in whatever way works best for you: documentation website, phone, email, forum, Twitter, ticketing system, etc. \"About us\" URL Identify the About Us URL for your plugin. Branding image URL Identify a URL to a branding image for when you publish your plugin. Follow these formatting guidelines: Set the image size to 64 x 64px. Save as a .png or .gif file. Use transparency for the background unless it is a square icon. Design the image to display well on both white and black backgrounds. Developer terms of service Review the Developer Terms of Service for New Relic Plugins. A link to this document appears on your plugin's Publish page in the UI. Publication Plugin Central is the repository of plugins available in New Relic. If you want to distribute your plugin through Plugin Central, make sure your documentation and support plans are in place, then select your plugin's Publish option in the New Relic UI. The Publish page in the UI prompts you to verify all requirements. As soon as your plugin is published, all of its dashboards and summary metrics are available for your plugin users. The Distribution method identifies how users can obtain your plugin from Plugin Central. File download: Most developers typically select this option for plugin setup and installation. Webpage link: SaaS providers typically select this option for plugin configuration and identify their website's landing page URL. Platform Installer (NPI): If you use the New Relic Platform Installer (NPI) command line utility to package your plugin, select this option. You can also publish a plugin without listing it in Plugin Central; for example, if you want to beta test it first, or if you only want specific users to be able to use it. When publishing an unlisted plugin, make sure the checkbox option in the UI for List this plugin in Plugin Central is not selected. You will need to communicate directly with your users when your unlisted plugin is added, updated, or removed. Versions You can update and re-publish your plugin as often as you want. Every time you publish changes to your plugin and list them in Plugin Central, the changes are immediately visible in Plugin Central. In addition, your published plugin changes typically appear in New Relic's website within five minutes. Recommendation: To avoid development and testing impacts on your users, maintain dev and production versions when updating your plugin. Plugin support Plugin publishers are responsible for providing first-line support if users have problems using their plugin. This includes verifying correct data acquisition and transmission. If problems continue with getting the expected data into New Relic's user interface after you complete your troubleshooting procedures, then you (not your users) can escalate the problem to New Relic. We will work with you to resolve the problem, and then you can communicate the solution to your users. Support for your plugin users Follow these guidelines for supporting your plugin's users by confirming data collection and transmission. Check that the plugin configuration is correct, including: Necessary credentials for the target system IP addresses or DNS names for the target system Any settings that might affect data acquisition Review transmission logs for errors, including: Authentication errors Connection errors Error responses from the target system Review transaction logs for useful data. How much data is being collected? Does the data make sense? Verify if the plugin is converting acquired data into useful metrics. Do the metrics make sense? Would the metrics make a good chart? Are the metrics being aggregated into valid JSON? Is the JSON size within limits? Confirm transmission of the plugin data. If you are using an SDK for New Relic Plugins and the Plugin API, does your data transmission conform to New Relic's rate limits? Are the 50X codes sporadic or continuous? Do your transaction logs indicate any data transmission problems? Escalated plugin support If you have verified good data acquisition and transmission, but there still is trouble getting the expected data in New Relic's user interface, escalate the support request to New Relic on behalf of your users. Do not have your users contact us. Include as much of the following information as possible: Plugin support requests Notes User affected by the problem Information such as: Permalink to the plugin page where you see the problem, so that we can view the endpoint. Recommendation: Ask the user if you can add your user ID to the New Relic account so that you can obtain a permalink yourself. User's New Relic account ID. If you do not have the user's permalink or account ID, include the user's email address they used to sign up for their New Relic account. (This may be a different email than the one they used to contact you.) User's name and New Relic account name. Detailed description of the problem For example: The user can see data, but it's not the data they are expecting. The user can see no data at all. The user configured and started the plugin correctly, but it does not appear in the user interface for New Relic Plugins. Any other specific details about the problem. Other evidence This includes: Explain the troubleshooting you have done so far and what you expected to happen in contrast to the actual results. Provide any available permalinks, screenshots, and log files. Summarize your understanding of the problem. We will work with you to characterize and resolve the problem. Keep the user updated with progress. After we provide you with a resolution, ask the user to verify the results.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.22888,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Checklist for <em>developing</em> <em>plugins</em>",
        "sections": "Checklist for <em>developing</em> <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " white and black backgrounds. <em>Developer</em> terms of service Review the <em>Developer</em> Terms of Service for New Relic <em>Plugins</em>. A link to this document appears on your <em>plugin</em>&#x27;s Publish page in the UI. Publication <em>Plugin</em> Central is the repository of <em>plugins</em> available in New Relic. If you want to distribute your"
      },
      "id": "603ec26f64441fe6484e885f"
    },
    {
      "sections": [
        "Use the New Relic Platform Installer (NPI) utility",
        "Important",
        "Limited access to legacy plugins",
        "NPI compatibility requirements",
        "Distribution",
        "NPI command line utility",
        "Updates",
        "Privately-published plugins"
      ],
      "title": "Use the New Relic Platform Installer (NPI) utility",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "a8a5c308f1e4f69ea801fd595bc7b679ae5eaac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/use-new-relic-platform-installer-npi-utility/",
      "published_at": "2021-05-22T08:03:11Z",
      "updated_at": "2021-03-16T11:00:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. NPI compatibility requirements The New Relic Platform Installer (NPI) is a command line utility for plugins in Plugin Central. It allows users to easily download, configure, and manage a plugin by installing it with a single command. The NPI is available for plugins written with Java or .NET plugin SDKs. If you are a plugin developer, follow these steps to meet the NPI requirements for a consistent installation experience, and publish your plugin in Plugin Central as NPI Compatible. In order to make your plugin NPI-compatible, make sure it meets each of these requirements: NPI compatibility Requirements Writing your plugin Java: See the Java SDK README file in GitHub for plugins. .NET: See the .NET SDK README file in GitHub for plugins. Packaging Use the tar.gz or zip compression protocol to package your plugin. Executable Name the executable file plugin.jar (for Java) or plugin.exe (for .NET), and store it in the root of your plugin folder. Code Do not use any relative references in your code. Configuration files Create a ./config directory containing a plugin.template.json file and a newrelic.template.json file. Make sure that plugin configuration is read from the plugin.json file in the ./config directory. For more information, refer to the README in GitHub. Distribution Once your plugin is NPI-compatible from a code perspective, place it somewhere that is accessible for consumers to download. For example, add the compressed distributable to a dist folder in your GitHub repository. When your plugin is ready for distribution, follow standard procedures to publish it in Plugin Central. Be sure to select the Platform Installer (NPI) distribution option. NPI command line utility When users select an NPI Compatible plugin from Plugin Central, they also have the option to download the NPI tool. The tool allows users to easily download, configure, and manage a plugin. They can also use a series of commands to manage their plugins or pass the --help flag for more information about available options. Updates After you create and publish an NPI-compatible plugin, follow standard procedures to update it as needed. Then, when you publish the updated plugin, the NPI tool automatically will pick up your most current version for users who have installed your NPI-compatible plugin. Privately-published plugins In general, the NPI tool will try to pull download (manifest) information from New Relic's Plugins service. You can also provide a file named manifest.json in the config directory of your NPI installation to provide this information. Use this file format: [ { \"guid\": \"arbitrary_identifier\", \"download_url\": \"https://plugin.download.url.com\", \"publisher\": \"New Relic Inc.\", \"version\": \"1.0.1\", \"installer_compatible\": true, \"implementation\": \"Java\" }, { \"guid\": \"arbitrary_identifier2\", \"download_url\": \"https://plugin2.download.url.com\", \"publisher\": \"New Relic Inc.\", \"version\": \"2.0.0\", \"installer_compatible\": true, \"implementation\": \".NET\" } ] Copy After you set this up, you can run all the same commands with your private plugin's GUID. To install or fetch a plugin, you must pass the --untrusted flag to allow downloading plugins from a local file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.22334,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " command. The NPI is available for <em>plugins</em> written with Java or .NET <em>plugin</em> SDKs. If you are a <em>plugin</em> <em>developer</em>, follow these steps to meet the NPI requirements for a consistent installation experience, and publish your <em>plugin</em> in <em>Plugin</em> Central as NPI Compatible. In order to make your <em>plugin</em> NPI-compatible"
      },
      "id": "603eae7c28ccbc8e3ceba799"
    }
  ],
  "/docs/plugins/plugin-developer-resources/develop-plugins/use-new-relic-platform-installer-npi-utility": [
    {
      "sections": [
        "Maintain plugin versions",
        "Important",
        "Limited access to legacy plugins",
        "Plugin agents and dashboards",
        "Agent versioning",
        "Update a SaaS agent",
        "Update an on-premises agent",
        "Update plugin dashboards"
      ],
      "title": "Maintain plugin versions",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "70efb125146afeda3c6e672e6c9b0e769ce4eb37",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/maintain-plugin-versions/",
      "published_at": "2021-05-22T08:01:38Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin agents and dashboards As a plugin publisher, typically you need to have two versions of your plugin running simultaneously: The stable production version that users can acquire from Plugin Central in New Relic A development version that you are actively improving, testing, or otherwise have in a non-production state Plugins contain two versioned parts: The agent collects metrics from the source and transmits those metrics to the Plugin API. The dashboard is a collection of visualizations and configurations that you make in the Plugins user interface. Plugin users view this automatically from their own Plugins dashboards in New Relic. Versioning works differently for these two parts. Agent versioning There are two types of plugin agents, with two different versioning situations: SaaS agents are agents that you, the SaaS application developer, deploy and run on behalf of your SaaS users. On-premises agents are agents that your users install into their systems. Plugin agents Versioning SaaS agents There is only one copy of this agent running anywhere (the one you developed and deployed on behalf of your users), so whatever version you are running will inherently be the latest version. Whatever metrics the latest version is sending to New Relic will be the metrics available to (but not necessarily charted for) your users in their Plugins dashboards. On-premises agents When you publish a new version of your agent, all of your plugin users' dashboards will note that a new agent version is available. They will be directed to your Plugin Central listing, where they can download and install the new version of your agent. Recommendation: Provide a streamlined agent update procedure in your own documentation. Update a SaaS agent This procedure assumes: You are starting with a plugin published to the Plugin Central (the production version). Your plugin has a SaaS agent running inside your app, and you want to make improvements to the SaaS agent portion of your plugin. As part of your normal development process you have a second dev version of your agent running, which is not published in Plugin Central. Your plugin's dev version uses a different GUID (for example, com.company.service.plugin.dev). Both your dev and your production plugins have the same plugin dashboards. To update your plugin's SaaS agent: Make changes to your dev agent. Do not change the version number or GUID of your dev agent in the agent config file. When you are ready to make your latest dev agent the production agent for your customers, follow your standard procedures to deploy your dev code to production. If applicable, make any necessary changes to your plugin's dashboards. Your users will receive no notification, and they do not need to take any action. You didn't change the version number, so your agent changes are transparent to your users. Update an on-premises agent This procedure assumes you are starting with a plugin published in Plugin Central, and you want to make improvements to the on-premises agent portion of your plugin. Make a copy of your agent code. Change the version number in the agent config file. To ensure that New Relic knows two different versions of your agent exist now, run the agent so that it reports metrics to the Plugin API. Continue working on your agent and making improvements, but do not change the version number again. When you are ready to make this new agent version the latest version for your plugin users, save it to the location where you distribute your agent code (for example, GitHub). From the New Relic UI, select your published plugin, select Edit, and then select Save. Select Publish, and then select the new agent version you are publishing. At this point, all of your plugin users will see a notice in the Plugins UI that a new version is available. They will be directed to your listing in Plugin Central, which points to your download location. From there your users can acquire your new agent version. Update plugin dashboards If you add metrics to your agent, be sure to add them to charts on your dashboard, and then save your dashboard and re-publish. All your users will see the new dashboard, and the new metrics will either be populated immediately (if you are running a SaaS agent on their behalf) or as soon as they update their agent (if you are offering an on-premises agent). If you need to migrate dashboards between GUIDs, get help at support.newrelic.com. Otherwise, to update your dashboard, follow this workflow. These steps assume you are starting with a plugin already published in Plugin Central, and you want to make improvements to the dashboard portion of your plugin. Go to one.newrelic.com > More > Plugins, and select your plugin's name. From your plugin's summary page, select Edit > Dashboards, then add, edit, or delete dashboards. When you are ready to publish: From your plugin's summary page, select Publish. At this point, all of your plugin users will see your new dashboard version the next time they select your plugin's dashboard in the New Relic UI.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.22888,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Maintain <em>plugin</em> versions",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e956fe7b9d28f062a07b5"
    },
    {
      "sections": [
        "Checklist for developing plugins",
        "Important",
        "Limited access to legacy plugins",
        "Plan your plugin",
        "Create your plugin",
        "Publish your plugin",
        "Documentation",
        "\"About us\" URL",
        "Branding image URL",
        "Developer terms of service",
        "Publication",
        "Versions",
        "Plugin support",
        "Support for your plugin users",
        "Escalated plugin support"
      ],
      "title": "Checklist for developing plugins",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "c60d87c25a2c835d2b7e44340bddb678117ddd07",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/checklist-developing-plugins/",
      "published_at": "2021-05-22T15:40:26Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plan your plugin When planning your plugin for Plugin Central: Sketch the types of metrics you want to collect and how you want to present them on dashboards. Include any necessary mathematical calculations. Sketch the types of summary metrics you want to collect and how you want to present them on the plugin's summary page. Include any necessary mathematical calculations. Optional: Define alert conditions for your metrics. Optional: If you want to receive alert notifications for your plugin, verify the email address to be used and confirm any other notification options as necessary. Decide whether to develop the plugin with one of the plugin SDKs or to use the Plugin API. Create your plugin When creating your plugin for Plugin Central: Select a unique, meaningful GUID name. Write the plugin agent. Test your plugin, including summary metrics, customized dashboards, alert conditions, and your process to disable or uninstall your plugin. Consider writing Chef and Puppet installation scripts to make plugin installation easier. Publish your plugin The following items are required for plugins published through New Relic's Plugin Central. If you do not plan to make your plugin publicly accessible to users, some of these items are not applicable. Documentation When documenting your plugin, include requirements and procedures to install, configure, use, troubleshoot, uninstall, and contact your support resources. Documentation requirements Guidelines Title Descriptive title; for example, \"Wikipedia plugin for New Relic.\" Table of contents List of main topics with anchors to each section. Description Explanation of how the plugin can be used in New Relic to monitor and improve the associated software's performance. What systems does it monitor (for example, memcache, versions X-Y, on the local host, sets and gets)? What problem does it solve? Plugin requirements Requirements or dependencies; for example: Internet access via SSL (HTTPS) Supported operating systems Minimum environment requirements (Java, Ruby, glibc, etc.) Supported monitored systems Any known limitations Metrics source documentation Plugin users may not be familiar with all the metrics displayed, their source, what the metrics mean, etc. If you have documentation that provides these details, be sure to include links to that information. For example: Description of data expected from source, frequency, mechanism, etc.; for example, \"Data is read from a file socket and exported from the source once per second.\") Description of data itself; for example, a well-formatted JSON such as {X: {y: z}} Description of data being sent; for example, average response time in milliseconds, of a set or get, taken over a minute, recorded from the specified data Installation Step-by-step procedures to obtain and install the plugin. Do not require su or sudo permission in order to install your agent or support software unless absolutely required. These requirements must be limited in scope and well documented. Configuration Instructions to configure the plugin, expected format, and how to set them. Include how to find the user's New Relic license key. Troubleshooting Include instructions as applicable; for example: How to resolve common problems: Unable to connect to New Relic, unable to connect to the monitored server, incorrect license key How to enable logging or verbose logging How to restart the plugin How to test connectivity to New Relic How to handle errors; for example, failure to read, aggregate, or send data Disabling and uninstalling Questions to consider: Are there other dependencies before disabling or uninstalling the plugin? For example, are there any special procedures your plugin users need to know in order to have their operating system stop the process from running, so that they can remove components (instances) from their installed plugin? Can you temporarily disable and then re-enable the plugin (for example, for troubleshooting or updating it), or must you completely uninstall and reinstall? Can the uninstall procedure be done from a command line? Support resources Make a plan for supporting your plugin and identifying a support URL for users. In your plugin's support information, describe how users can contact you for support in whatever way works best for you: documentation website, phone, email, forum, Twitter, ticketing system, etc. \"About us\" URL Identify the About Us URL for your plugin. Branding image URL Identify a URL to a branding image for when you publish your plugin. Follow these formatting guidelines: Set the image size to 64 x 64px. Save as a .png or .gif file. Use transparency for the background unless it is a square icon. Design the image to display well on both white and black backgrounds. Developer terms of service Review the Developer Terms of Service for New Relic Plugins. A link to this document appears on your plugin's Publish page in the UI. Publication Plugin Central is the repository of plugins available in New Relic. If you want to distribute your plugin through Plugin Central, make sure your documentation and support plans are in place, then select your plugin's Publish option in the New Relic UI. The Publish page in the UI prompts you to verify all requirements. As soon as your plugin is published, all of its dashboards and summary metrics are available for your plugin users. The Distribution method identifies how users can obtain your plugin from Plugin Central. File download: Most developers typically select this option for plugin setup and installation. Webpage link: SaaS providers typically select this option for plugin configuration and identify their website's landing page URL. Platform Installer (NPI): If you use the New Relic Platform Installer (NPI) command line utility to package your plugin, select this option. You can also publish a plugin without listing it in Plugin Central; for example, if you want to beta test it first, or if you only want specific users to be able to use it. When publishing an unlisted plugin, make sure the checkbox option in the UI for List this plugin in Plugin Central is not selected. You will need to communicate directly with your users when your unlisted plugin is added, updated, or removed. Versions You can update and re-publish your plugin as often as you want. Every time you publish changes to your plugin and list them in Plugin Central, the changes are immediately visible in Plugin Central. In addition, your published plugin changes typically appear in New Relic's website within five minutes. Recommendation: To avoid development and testing impacts on your users, maintain dev and production versions when updating your plugin. Plugin support Plugin publishers are responsible for providing first-line support if users have problems using their plugin. This includes verifying correct data acquisition and transmission. If problems continue with getting the expected data into New Relic's user interface after you complete your troubleshooting procedures, then you (not your users) can escalate the problem to New Relic. We will work with you to resolve the problem, and then you can communicate the solution to your users. Support for your plugin users Follow these guidelines for supporting your plugin's users by confirming data collection and transmission. Check that the plugin configuration is correct, including: Necessary credentials for the target system IP addresses or DNS names for the target system Any settings that might affect data acquisition Review transmission logs for errors, including: Authentication errors Connection errors Error responses from the target system Review transaction logs for useful data. How much data is being collected? Does the data make sense? Verify if the plugin is converting acquired data into useful metrics. Do the metrics make sense? Would the metrics make a good chart? Are the metrics being aggregated into valid JSON? Is the JSON size within limits? Confirm transmission of the plugin data. If you are using an SDK for New Relic Plugins and the Plugin API, does your data transmission conform to New Relic's rate limits? Are the 50X codes sporadic or continuous? Do your transaction logs indicate any data transmission problems? Escalated plugin support If you have verified good data acquisition and transmission, but there still is trouble getting the expected data in New Relic's user interface, escalate the support request to New Relic on behalf of your users. Do not have your users contact us. Include as much of the following information as possible: Plugin support requests Notes User affected by the problem Information such as: Permalink to the plugin page where you see the problem, so that we can view the endpoint. Recommendation: Ask the user if you can add your user ID to the New Relic account so that you can obtain a permalink yourself. User's New Relic account ID. If you do not have the user's permalink or account ID, include the user's email address they used to sign up for their New Relic account. (This may be a different email than the one they used to contact you.) User's name and New Relic account name. Detailed description of the problem For example: The user can see data, but it's not the data they are expecting. The user can see no data at all. The user configured and started the plugin correctly, but it does not appear in the user interface for New Relic Plugins. Any other specific details about the problem. Other evidence This includes: Explain the troubleshooting you have done so far and what you expected to happen in contrast to the actual results. Provide any available permalinks, screenshots, and log files. Summarize your understanding of the problem. We will work with you to characterize and resolve the problem. Keep the user updated with progress. After we provide you with a resolution, ask the user to verify the results.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.22888,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Checklist for <em>developing</em> <em>plugins</em>",
        "sections": "Checklist for <em>developing</em> <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " white and black backgrounds. <em>Developer</em> terms of service Review the <em>Developer</em> Terms of Service for New Relic <em>Plugins</em>. A link to this document appears on your <em>plugin</em>&#x27;s Publish page in the UI. Publication <em>Plugin</em> Central is the repository of <em>plugins</em> available in New Relic. If you want to distribute your"
      },
      "id": "603ec26f64441fe6484e885f"
    },
    {
      "sections": [
        "Plugin summary metrics and dashboards",
        "Important",
        "Limited access to legacy plugins",
        "Plugin summary metrics",
        "Add summary metrics",
        "Optional: Add alert summary metrics",
        "Time periods for metrics",
        "Plugin dashboards",
        "View the default dashboard",
        "Add dashboards",
        "Avoid metric grouping problems",
        "Change or delete dashboards",
        "Plugin settings",
        "Initial settings",
        "Additional updates"
      ],
      "title": "Plugin summary metrics and dashboards",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "a0163b9f1efd59d8c50c60a3b8b5b5419f336824",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/plugin-summary-metrics-dashboards/",
      "published_at": "2021-05-22T08:03:11Z",
      "updated_at": "2021-03-16T11:00:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin summary metrics Each component or instance for your plugin in Plugin Central can have summary metrics, such as average, total, minimum, maximum, standard deviation, rate, or count. The summary metrics appear on your plugin's Summary page in the Plugins user interface. The summary metric dashboards are also useful as a debugging tool to review all of the metrics sent by your plugin agent to New Relic. To view dashboard details about any component or instance, select any summary metric value for it. You can also change various plugin settings in the UI. When you first create a summary metric for your plugin, this triggers a change to New Relic's collectors. This may cause your running components (instances) to stop showing summary metrics for a short period of time. For example, if you add a new summary metric to your plugin, any components (instances) you are monitoring that use that plugin may have all summary metrics temporarily cleared. This will also close any outstanding related events and alerts. Depending on the components and other factors, you may need to wait fifteen minutes or more before summary metrics appear again. Add summary metrics To add a summary metric: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select Edit. From the Summary metrics section of the plugin's editing page, select Add. If your plugin contains only one summary metric, you can identify the metric in the chart's title and then hide the legend (colored bars that label the metrics) that normally appears below the chart. Also, if you define negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Optional: Add alert summary metrics Plugin publishers and users can define alert conditions from the plugin's Summary page by selecting the component's or instance's settings icon. The alerts will be activated when the summary metric's specified values fall above the thresholds. The Recent events list for the plugin's components (instances) appears on the plugin's Summary page. To view additional details about an alert, select its name. Sometimes there may be a delay between the time that a summary metric event is triggered and the time that New Relic creates the corresponding incident and sends the alert notification. There are several timing mechanisms at work, such as collector caching, summary metric event timing, delayed job queues, email delivery, etc. Depending on the situation, this delay could be up to ten or fifteen minutes before the alert notification is sent. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metrics. This is why you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show various time periods. You can also deliver data at one-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, New Relic aggregates when there is too much data, but it does not extrapolate if there is not enough data. In order for data to appear on a 30-minute chart, make sure at least one data point is within the range, or no data will appear. Recommendation: Use a 60-second polling interval. Default dashboards show 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Plugin dashboards You can create dashboards to visualize the data generated by your plugins in New Relic. You must be a plugin author or publisher to add, edit, and delete dashboards. Plugin users cannot customize the plugin dashboards they acquire from Plugin Central. View the default dashboard New plugins automatically include a default dashboard. Once your plugin agent starts sending data to New Relic's Plugin API, you can view the default dashboard in New Relic's UI and change it as needed. To view the default dashboard for your plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select a component (instance). Add dashboards In addition to the default dashboard, you can create as many additional dashboards for your plugin as you want. After you publish your plugin, all of these dashboards and summary metrics are available to plugin users. The customized dashboards that display plugin data are part of the plugin. Plugin users cannot add their own dashboards. This needs to be done by the author or publisher as part of a plugin fork or update. To create additional dashboards: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, select Edit. From the Dashboards section of the plugin's editing page, select Add. Specify a title for your dashboard, select a page layout, then select Create. From the new dashboard page, type a label for the new chart or table, and then select Add chart or table. Edit the chart, including the case-sensitive metrics (for example, a metric name you see in the agent output, such as Component/SIN[Value]) and value (for example, Total value). To use additional options (for example, number format), select Advanced options. Optional: Use a wildcard (*) to show multiple metrics on a chart. For example, to include the metric component/foo/bar and the metric component/foo/xyz, use the metric name component/foo/*.f Select Save and Preview to preview the chart or table. Or, select Save and finish when you are satisfied with the appearance of the chart or table. Review the new chart that appears on the customized dashboard, and continue adding, editing, or rearranging charts and tables on your dashboard as needed. When finished, select I'm done editing. Avoid metric grouping problems Wildcards provide flexibility for how your metric names appear. When creating a chart, consider whether you want the metric names to appear with identical namespace segments, or include a wildcard to strip the namespace segments. For example: Component/Database/Metric1 Component/Database/Metric2 Component/Database/Metric3 Copy OR Metric1 Metric2 Metric3 Copy To prevent problems with metric grouping issues, avoid defining values that result in excessively large numbers. For example, if a plugin's chart value is 1 widget and New Relic collects 3 million widgets, change the value to 1 million widgets so that the chart can show millions of widgets more efficiently. Also, avoid creating high-precision values containing many digits after a decimal point. Change or delete dashboards To update or remove any plugin dashboard, including the default: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, select Edit. Keep a stable production version of your plugin that users can acquire from Plugin Central, and create a development version that you are actively improving, testing, browsing the presentation of metrics on your custom dashboard, or otherwise have in a non-production state. Plugin settings You can change several plugin settings before you publish the plugin. You can also make changes at any time to published plugins. Initial settings Before you publish your plugin, you can: Select a generic plugin icon for the Plugins UI. This is not the same as the URL for your customized branding image you may choose as part of the publishing process. Change your plugin's label for the Plugins UI. By default, this is the first 11 characters of the plugin's Title field. Change your plugin's title. The default title is your plugin's GUID. Add, change, or delete your plugin's summary metrics and their alert conditions. Add, change, or delete your plugin's dashboards. Exception: You can edit but you cannnot delete your plugin's default dashboard. To add, change, or delete plugin settings: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select Edit. When finished, be sure to save your changes. Additional updates After you publish your plugin, you can continue making changes. Recommendation: To avoid development and testing impacts on your users, maintain development and production versions. To make additional updates to your plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From your plugin's Summary page, select Edit, Publish, or your component's (instance's) settings icon as applicable. Update the settings as needed, and then save your changes. When you are ready to release this version: Go to one.newrelic.com > More > Plugins, select your plugin, and then select Publish. Here is a summary of where to view or make changes to your plugin. Type of change Edit Publish Settings Agent: Change the plugin's version (n/a in UI). Alert conditions, customized for components (instances) Alert conditions, defaults for summary metrics Branding image (URL) that appears in Plugin Central Components (instances): Remove from your plugin Dashboards: Add, edit, delete Description Developer Terms of Service Icon that appears in the Plugins UI Name for plugin (label) in the Plugins UI Name for plugin (title) in Plugin Central NPI Compatible designation Publisher's name Summary metrics: Add, edit, delete URL for installation and setup instructions URL for your support site URL for your website (\"About us\")",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.22334,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> summary metrics and dashboards",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " Branding image (URL) that appears in <em>Plugin</em> Central Components (instances): Remove from your <em>plugin</em> Dashboards: Add, edit, delete Description <em>Developer</em> Terms of Service Icon that appears in the <em>Plugins</em> UI Name for <em>plugin</em> (label) in the <em>Plugins</em> UI Name for <em>plugin</em> (title) in <em>Plugin</em> Central NPI"
      },
      "id": "603ea2bc196a6740f7a83de2"
    }
  ],
  "/docs/plugins/plugin-developer-resources/developer-reference/get-plugin-data-rest-api": [
    {
      "sections": [
        "Metric data for the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "URI",
        "GUID",
        "Time periods for metrics",
        "Metric data details",
        "Timeslice metric values",
        "Calculations",
        "Examples",
        "Metrics",
        "cURL example",
        "Metric references",
        "Metric naming guidelines",
        "Metric segments",
        "Caution",
        "Metric attributes",
        "Metric values",
        "Units"
      ],
      "title": "Metric data for the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "2e9d0553b7277c73fe8a2147519d9943fca440fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/metric-data-plugin-api/",
      "published_at": "2021-05-22T02:50:49Z",
      "updated_at": "2021-03-16T11:20:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. URI Metric timeslice data is sent with the Plugin API as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The Plugin API does not support New Relic's REST API, and vice versa. However, you can use the REST API (v2) to extract plugin data. For a list with links to procedures and examples, see Plugin examples (v2). GUID The plugin needs a Globally Unique Identifier (GUID), which is a character string limited to no less than 4 and no more than 255 characters. The GUID for a published plugin must be unique for each plugin. When creating a plugin, you are responsible for managing your own GUIDs to avoid naming conflicts. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metric(s). Thus, you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show any time period you want; for example, 30 minutes, 30 days, etc. You can also deliver data at 1-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, data will aggregate when there is too much, but data will not be extrapolated if there is not enough data. In order for data to appear on a 30 minute chart, make sure at least one data point is within the range, or no data will appear. Use a 60-second polling interval, because the default dashboard shows 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Metric data details The JSON data is a hash with two required keys at the top level: components: An array of components, each consisting of a hash of attributes for the individual component, including the metric data. agent: A hash describing the agent that is reporting metrics data to New Relic Plugins on behalf of the component(s). Of these values, only host and version are required. When graphing metrics, be aware that null = zero. Metric data POST Description Component data One of two required keys at the top level. This is an array of hashes describing the components that report metrics in this request. Each hash contains the following values: name A name ( < =32 characters) that uniquely identifies the monitored entity and appears as the display name for this agent. Note: Metric names are case sensitive. guid A \"reverse domain name\" styled identifier; for example, com.newrelic.mysql. This is a unique identity defined in the plugin's user interface, which ties the agent data to the corresponding plugin user interface in New Relic. duration The duration in seconds over which the metric data was collected. The end time is implied as the time the data is received by the API. metrics Timeslice data for each metric being reported. The hash keys are metric names, and the values are the timeslice data value for the named metric. Agent data One of two required keys at the top level. A hash specifying information about the agent that is reporting data on behalf of the components. host (required) The hostname of the agent monitoring the specified components. This is the hostname where the monitoring agent is running, not the hostname of the component being monitored. pid (optional) The process identifier of the agent monitoring the specified components. This is the process identifier of the monitoring agent itself, not a process identifier that may be associated with the monitored components. version (required) The version of the agent monitoring the specified components, using the format A.B.C where A, B, and C are integers. The version number must conform to the rules specified in standard Semantic Versioning scheme v2.0.0. Timeslice metric values Metrics are sent inside the component hash with the key metrics and a hash as a value. The hash keys are metric names, and the values are the timeslice data values for the named metric. The timeslice hash value uses one of three formats: Timeslice hash value Description A single scalar value with a floating point number or integer This is the simplest format, and this number is required. The reported value is used as the total, minimum, and maximum data value. The count value is assumed to be 1. The Plugin API does not support reporting of arbitrary string metrics, only scalar values that are aggregated. Array of five required values in specific order An array of five required integers or floating point numbers that represent, in order: Total value over the time period Count of the number of events this value represents over the time period; the average is calculated by dividing total by count Minimum value over the time period Maximum value over the time period Sum of squares for the samples over the time period Hash with five required key/value pairs in any order A hash with value names as the keys, and integers or floating point values as the values. All five key/value pairs are required. The keys of the hash are the type of timeslice data, and the value is the data value. These has key/value pairs can be in any order: total: Total value over the time period count: Count of the number of events this value represents over the time period; the average is calculated by dividing total by count min: Minimum value over the time period max: Maximum value over the time period sum_of_squares: Sum of squares for the samples over the time period Calculations Limited mathematical calculations are available with the key/value pairs, such as computing total, count, minimum, maximum, averages, and standard deviations. However, to do more extensive calculations, you need to do the math in the agent, and then send the results as a new metric. For example, send Metric1, Metric2, and Metric3 (which equals Metric1 divided by Metric2). If you submit negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Examples Here are some examples. Metrics \"metrics\" : { \"Component/Database/Primary[Queries/Second]\" : { \"total\" : 25, \"count\" : 2, \"min\" : 10, \"max\" : 15, \"sum_of_squares\" : 325 }, \"Component/Database/Secondary[Queries/Second]\" : [25, 2, 10, 15, 325], \"Component/Database/Backup[Queries/Second]\" : 10 } Copy cURL example curl -vi https://platform-api.newrelic.com/platform/v1/metrics \\ -H \"X-License-Key: YOUR_LICENSE_KEY_HERE\" \\ -H \"Content-Type: application/json\" \\ -H \"Accept: application/json\" \\ -X POST -d '{ \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] }' Copy Metric references Refer to these references as you develop your own plugins. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order for the metric to be rendered usefully in the user interface, the metric name must contain a prefix, category name, label, and optional units indicator. Here are some recommended guidelines for the text in metric names to make them more readable in the user interface. Metric naming guidelines Guidelines UI display Use case and whitespace characters appropriate for display in the user interface, because segments are rendered as-is in the UI. Category and label segments Metric names are case sensitive. Capitalize the first word in the category and label segments. Keep category and label segments as short as possible. Length There is a limit of 255 characters for metric names. Characters to avoid using Avoid using the following characters in names. These characters have special meaning and should not be used except where specifically required for their purpose. / ] [ | * Also avoid multi-byte characters. Units Use abbreviated names for units when possible. Metric segments Each of these segments is divided by the forward slash / character. Each segment is interpreted for a specific purpose in the UI and roughly follows this pattern: prefix/category/label[units] Copy For example, the metric representing the latency of cache hits reported by a plugin collecting data for a cache appliance might look like this: Component/Cache/Hits[sec|hit] Copy Metric segment order Notes Prefix: Component/ or Custom/ The first segment of a custom metric is Component/ (if it comes from a plugin agent) or Custom/ (if it is a custom metric collected by a New Relic agent. For example, Custom/MyMetric). Caution If you use the Plugin API only, and if the metrics do not start with Component/, they may not be available or may not appear correctly in charts and dashboards. Category name The second part of a custom metric is a category name, used to group metrics into different categories. For example, the metrics reported by a database plugin may fall into categories such as schema, tables, or connections. Label The third part of the metric name is used for labeling the data when it appears in tables and charts. If it contains multiple segments, each slash separating the segments of the label will be rendered as part of the label. Units The fourth segment of the metric consists of a units specification. Metric attributes Most metrics are defined statically and represent some global state; for example, cache size. Other metrics are dynamic and include some contextual attribute like the name of a host or a file. These metrics need to be structured so you can easily show them as a group in a table stacked in a chart. To add attribute names to a metric, put them in trailing segments separated by a forward slash / character. For example: Component/Disk/Bytes In/dev001 Component/Network/External services/ae592c3.aws.com Copy You can specify more than one attribute as long as they occupy the same position for a given metric category and label: Component/Tables/Row count/DB001/BLOG_POSTS[rows] Copy Caution Avoid overloading the metric space by putting in segment values that have a large range of values. While something like a customer's region in an attribute is a reasonable thing to track in the metric, the customer name would not be if you have more than a few hundred customers. If your agent starts sending an excessive amount of metrics, your metrics may be automatically collapsed into groups with wildcards: Component/Users/*[visits] Copy Metric values You can report a metric value in one of two ways: Single value: This typically is the value being reported for that time slice. If you use an SDK, you report the single value to the SDK. It handles tracking the rest of these values. Set of aggregate value: This includes the min, max, and sum of squares values for the value being reported. If you use the Plugin API, the preferred method is to report all of the values. When aggregating a series of timeslice data into a single timeslice data entry for a given period, all fields are summed except for the min and max value. If you are using an SDK plugins, this is done automatically. If you are using the Plugin API to develop plugins, you need to code for this. A metric value contains several fields, but it is represented primarily by the count and value. The count is a 32-bit integer field, and the value is a 32-bit float. Metric values can represent more than one data point or sample as an aggregation of measures. Typically the count is the number of samples, and the value is the total value of all samples. Here are the fields in a metric value: Metric value Description count The number of things being measured. If data is collected at the time the event occurs, like with some kind of injection, then the count in the timeslice data will be 1. Required if it is not 1 (0 generally represents an absent value). value Required: The total value measured across all things being counted. When averages are calculated later, we divide the value by the count. In some cases, the value field is irrelevant. min, max The minimum and maximum values when the count is greater than 1. When the count is 1, these are the same as the value. Optional depending on whether they are available or relevant for a given metric. sum of squares This is the sum of squares of each value and is useful when the values follow a standard distribution. You can only capture this value when you are collecting data each time the event happens. You store the value of the event in the value field and the square of the value in the sum of squares. This is used to calculate a standard deviation later on. The sum of squares is optional. It is used to calculate a standard deviation for a selection of data. If standard deviation for the value is not meaningful, such as when the values are not part of a normal distribution, then the sum of squares is omitted. Units When a metric value is collected by periodically sampling an interface, the count units are implicitly samples, and the value units are whatever is being sampled. For data it might be bytes. For throughput it might be something like kilobytes/second. For utilization (like CPU) it might be percent. When the count units are samples, they can be omitted in the metric name. Units of time, bytes, and bits may get special treatment, allowing additional conversion in the user interface between magnitudes. For example, if you specify a metric with units of kilobytes, then in the UI you may be presented the option of displaying a chart of Mb. Metrics units describe what the value field and count represent. Units are specified inside brackets and consist of units for the value, followed by a pipe (|) and then the units for the count. For example: Component/metric_id[value_unit|count_unit] Copy Exception: The pipe and count units (|[count_unit]) are not required after the value unit for samples. Rate metrics are commonly defined as sample per interval. This is defined as units/interval in the metric, with a forward slash to separate units from interval. For example: Component/metric_id[value_unit/interval] Copy In rare cases there will only be a unit value for count. The value will be interpreted as unitless. Value units are omitted, and the vertical bar appears in front of the count units. For example: Component/metric_id[|count_unit] Copy Units for plugin metrics Notes Naming conventions You can have mixed-case unit names. They.can consist strictly of alphabetical characters as well as the _, %, or / symbols. Case is preserved. Punctuation markers, dashes, spaces and any other symbols are not allowed. Recommendation: Use uncapitalized words, spelled out in full. For example, use second not sec. Rate metrics When a metric value represents a rate, such as bytes/second, then the value is assumed to be a sample for the given interval. The units specifier looks like [ bytes/second] since the count units are implicitly samples. For example: Component/metric_id[bytes/second] Copy The count units are samples (default) and the value units are bytes/second. The forward slash separates the units from the interval. Count with units A common case for declaring units is when measuring response times. If the custom metric represents the average latency of a call to a cache, then the units for the metric value are seconds per call. For example: Component/metric_id[seconds|call] Copy Count units are calls and value units are seconds. The default count metric is not being used, so you need to specify it. The bar separates the value units from the count units. Units in charts The units specified in a metric have several implications for the way the values are interpreted by generic charts and tables: Units display in labels and tooltips in charts to indicate what the values represent. Units imply a set of different values available from a single metric value. When creating a chart in a dashboard, the dashboard author selects one of the available value methods for that metric to plot in the chart.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71739,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Metric data for the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "&quot; : 2, &quot;max&quot; : 10, &quot;total&quot;: 12, &quot;count&quot; : 2, &quot;sum_of_squares&quot; : 104 } } } ] }&#x27; Copy Metric references <em>Refer</em> to these references as you <em>develop</em> your own <em>plugins</em>. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order"
      },
      "id": "603e80db64441f0def4e8863"
    },
    {
      "sections": [
        "Plugin data",
        "Important",
        "Limited access to legacy plugins",
        "Use integers and floats",
        "Define the time period (duration)",
        "Follow unit conversion guidelines",
        "Select value methods for display in the UI"
      ],
      "title": "Plugin data",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "e5fd09ba8dd9c63a140479fbc2032254d1cf8c4f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plugin-data/",
      "published_at": "2021-05-22T02:51:52Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Use integers and floats All plugin metrics must be an integer or float, and they must be reported along with a duration. You can also report the type of metric so it can be converted from one unit type into another. You can display the metrics you collect in a variety of value methods, including throughput, averages, min/max, and rate. The metrics appear in charts and tables you create for your plugin's user interface. Plugins in Plugin Central are designed to report on frequency metrics using non-negative integers or floating-point numbers: Non-negative integers: Supported. Floating-point numbers: Supported. Negative values: Not supported, except for summary metrics on the plugin's Summary page. Otherwise, the UI shows negative values as zero. String values: Not supported; the UI shows strings as zero. However, parts of your metric name (the key) can be displayed in the UI. Define the time period (duration) All metrics must include a duration period that starts no more than a few hours in the past. The end time is set automatically to the time New Relic Plugins receives the metrics. You cannot report a duration that starts or ends in the future, or a duration that ends in the past. For best results, use one of the plugin SDKs to create your plugin. Otherwise, some POST attempts may fail because the actual recorded duration could vary in increments of the plugin's scheduled reporting frequency. Follow unit conversion guidelines Plugins automatically converts some units (such as rate units) to more natural forms. For example, [bytes/second] is converted to Bps. Follow these guidelines for unit conversions: Long format: Always specify the long format (for example, [bytes/second]) in the metric name. The long or short version will be used as appropriate. (Unit designations are not case sensitive.) Consistency: Use modifiers consistently in the metric name. If you use a different modifier with the same metric name, it will be treated as a different metric. Optional: Standard modifiers: Provide standard modifiers to the first metric in a value unit. For example, rather than specifying [bytes/second], you can specify [kiloBytes/second]. Plugins accepts these standard modifiers: Modifier Multiplier Modifier Multiplier Kilo 1000 - -- - -- Mega 1000^2 - -- - -- Giga 1000^3 Gibi 1024^3 Tera 1000^4 Tebi 1024^4 Peta 1000^5 Pebi 1024^5 Select value methods for display in the UI When you define a metric value for reporting, Plugins also captures a count, min, max, and sum of squares. Depending on whether you report single or aggregate values, you may report these numbers directly, or Plugins may calculate them automatically. You can then choose a value method for rendering these metrics in your plugin UI. In general, to configure value methods in the user interface: Select the metric you want to use. Review the list of value methods to select how to present the data in a column or plotted in a chart. Available value methods depend on the format of the units part of the metric name: Value method Count | Value Value Rate Count: The total of the count field over the entire timeslice data interval. When aggregating timeslice data, the count is summed. Total value: The total value over the entire time slice data interval. When aggregating timeslice data, the value field is summed Time rates only Average value: The total value divided by the total count, calculated only when units for both count and value are available. Throughput: The total count divided by the time interval of the time slice. By default New Relic Plugins measures the throughput in minutes according to the count units, such as calls per minute or bytes per minute. When the count units are specified in time (seconds), then the throughput appears as a percentage. Min/Max: The statistical values for minimum and maximum values when recorded in the metric value along with Count and Value. Standard deviation: The standard deviation of the entire set of measures recorded over the time interval. This is available only if the sum of squares field was populated in the metric value. The sum of squares and mean are used to calculate the standard deviation. In practice, this is meaningful only for populations that resemble a normal distribution. Rate: The rate is the total value divided by the time interval. When units of the value are in time, then the rate value is a percentage value. Units that are themselves rates will not have an explicit rate value method. The rate is simply the average value. Percentage: If you want the metric to appear as a percentage in the user interface, then you must define it as a percentage in the JSON.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71265,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> data",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e91e3196a67c11ea83d9d"
    },
    {
      "sections": [
        "Plan plugin metrics",
        "Important",
        "Limited access to legacy plugins",
        "Collect plugin metrics",
        "Present plugin metrics"
      ],
      "title": "Plan plugin metrics",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "08974b731c810af2b6b037e8b761834c6e1ce7a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plan-plugin-metrics/",
      "published_at": "2021-05-22T02:51:52Z",
      "updated_at": "2021-03-16T11:01:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Collect plugin metrics If you are running one of our APM agents to receive information about your applications, you can also receive arbitrary custom metrics. Using custom dashboards with your plugins, you can visualize custom metrics in a variety of useful ways. You can write plugins agents that can be run anywhere to collect metrics from any available system and report them to New Relic for dashboard display. Plugins also allow for summary metrics and one or more dashboards to visualize metrics that can be shared with every user of the plugin. This allows you to create a consistent user interface for the metrics you collect. The data that plugins report is in the form of a key/value pair. Values are numerical, either integers or floating point non-negative numbers. Negative numbers can be included in your summary metrics and tables; however, visualization in charts is limited to numbers greater than or equal to zero. Keys are strings which include the concept of name spaces and units. While values cannot be strings, parts of your metric name (the key) can be displayed in plugin dashboards. Your plugin agent can run anywhere with internet access to Plugins. You can write an agent using the agent SDKs. You can also write your agent to connect via HTTP POST using the API for Plugins in any language with HTTP support. Using the Plugin API might be the most appropriate solution when one agent is reporting metrics for more than one New Relic account. This is common for service providers to report specialized metrics for each of their customers using Plugins. This can be done with a small number of agents monitoring a large number of users. Present plugin metrics When creating a plugin agent, good metric name planning is critical to your success. Poorly chosen metrics names can make it difficult or impossible to display the information you intend. Plan ahead for how you want to visualize your information and to record metrics in a way that will facilitate this. You may even want to record the same metrics with more than one name in order to visualize different aspects of your data. Plugin dashboards do not have the ability to do mathematical calculations, so make sure your plugin agent handles any necessary calculations (sum, average, total, count, etc.) before recording metrics. Once you have collected metrics with your plugin agent, you will need to create dashboards to visualize the information in your metrics. All plugins will have a default dashboard. You can add as many dashboards as necessary to visualize your metric data (maximum 15). In addition to dashboards, you can choose up to five metrics to represent the summary of each instance. Summary metrics convey the health status of each instance and are used to trigger Caution events and Critical alerts for your plugins. The summary metrics appear on your plugin's Summary page.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71243,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Plan <em>plugin</em> metrics",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603eb01228ccbc6fa6eba790"
    }
  ],
  "/docs/plugins/plugin-developer-resources/developer-reference/licenses-plugin-developers": [
    {
      "sections": [
        "Metric data for the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "URI",
        "GUID",
        "Time periods for metrics",
        "Metric data details",
        "Timeslice metric values",
        "Calculations",
        "Examples",
        "Metrics",
        "cURL example",
        "Metric references",
        "Metric naming guidelines",
        "Metric segments",
        "Caution",
        "Metric attributes",
        "Metric values",
        "Units"
      ],
      "title": "Metric data for the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "2e9d0553b7277c73fe8a2147519d9943fca440fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/metric-data-plugin-api/",
      "published_at": "2021-05-22T02:50:49Z",
      "updated_at": "2021-03-16T11:20:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. URI Metric timeslice data is sent with the Plugin API as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The Plugin API does not support New Relic's REST API, and vice versa. However, you can use the REST API (v2) to extract plugin data. For a list with links to procedures and examples, see Plugin examples (v2). GUID The plugin needs a Globally Unique Identifier (GUID), which is a character string limited to no less than 4 and no more than 255 characters. The GUID for a published plugin must be unique for each plugin. When creating a plugin, you are responsible for managing your own GUIDs to avoid naming conflicts. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metric(s). Thus, you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show any time period you want; for example, 30 minutes, 30 days, etc. You can also deliver data at 1-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, data will aggregate when there is too much, but data will not be extrapolated if there is not enough data. In order for data to appear on a 30 minute chart, make sure at least one data point is within the range, or no data will appear. Use a 60-second polling interval, because the default dashboard shows 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Metric data details The JSON data is a hash with two required keys at the top level: components: An array of components, each consisting of a hash of attributes for the individual component, including the metric data. agent: A hash describing the agent that is reporting metrics data to New Relic Plugins on behalf of the component(s). Of these values, only host and version are required. When graphing metrics, be aware that null = zero. Metric data POST Description Component data One of two required keys at the top level. This is an array of hashes describing the components that report metrics in this request. Each hash contains the following values: name A name ( < =32 characters) that uniquely identifies the monitored entity and appears as the display name for this agent. Note: Metric names are case sensitive. guid A \"reverse domain name\" styled identifier; for example, com.newrelic.mysql. This is a unique identity defined in the plugin's user interface, which ties the agent data to the corresponding plugin user interface in New Relic. duration The duration in seconds over which the metric data was collected. The end time is implied as the time the data is received by the API. metrics Timeslice data for each metric being reported. The hash keys are metric names, and the values are the timeslice data value for the named metric. Agent data One of two required keys at the top level. A hash specifying information about the agent that is reporting data on behalf of the components. host (required) The hostname of the agent monitoring the specified components. This is the hostname where the monitoring agent is running, not the hostname of the component being monitored. pid (optional) The process identifier of the agent monitoring the specified components. This is the process identifier of the monitoring agent itself, not a process identifier that may be associated with the monitored components. version (required) The version of the agent monitoring the specified components, using the format A.B.C where A, B, and C are integers. The version number must conform to the rules specified in standard Semantic Versioning scheme v2.0.0. Timeslice metric values Metrics are sent inside the component hash with the key metrics and a hash as a value. The hash keys are metric names, and the values are the timeslice data values for the named metric. The timeslice hash value uses one of three formats: Timeslice hash value Description A single scalar value with a floating point number or integer This is the simplest format, and this number is required. The reported value is used as the total, minimum, and maximum data value. The count value is assumed to be 1. The Plugin API does not support reporting of arbitrary string metrics, only scalar values that are aggregated. Array of five required values in specific order An array of five required integers or floating point numbers that represent, in order: Total value over the time period Count of the number of events this value represents over the time period; the average is calculated by dividing total by count Minimum value over the time period Maximum value over the time period Sum of squares for the samples over the time period Hash with five required key/value pairs in any order A hash with value names as the keys, and integers or floating point values as the values. All five key/value pairs are required. The keys of the hash are the type of timeslice data, and the value is the data value. These has key/value pairs can be in any order: total: Total value over the time period count: Count of the number of events this value represents over the time period; the average is calculated by dividing total by count min: Minimum value over the time period max: Maximum value over the time period sum_of_squares: Sum of squares for the samples over the time period Calculations Limited mathematical calculations are available with the key/value pairs, such as computing total, count, minimum, maximum, averages, and standard deviations. However, to do more extensive calculations, you need to do the math in the agent, and then send the results as a new metric. For example, send Metric1, Metric2, and Metric3 (which equals Metric1 divided by Metric2). If you submit negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Examples Here are some examples. Metrics \"metrics\" : { \"Component/Database/Primary[Queries/Second]\" : { \"total\" : 25, \"count\" : 2, \"min\" : 10, \"max\" : 15, \"sum_of_squares\" : 325 }, \"Component/Database/Secondary[Queries/Second]\" : [25, 2, 10, 15, 325], \"Component/Database/Backup[Queries/Second]\" : 10 } Copy cURL example curl -vi https://platform-api.newrelic.com/platform/v1/metrics \\ -H \"X-License-Key: YOUR_LICENSE_KEY_HERE\" \\ -H \"Content-Type: application/json\" \\ -H \"Accept: application/json\" \\ -X POST -d '{ \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] }' Copy Metric references Refer to these references as you develop your own plugins. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order for the metric to be rendered usefully in the user interface, the metric name must contain a prefix, category name, label, and optional units indicator. Here are some recommended guidelines for the text in metric names to make them more readable in the user interface. Metric naming guidelines Guidelines UI display Use case and whitespace characters appropriate for display in the user interface, because segments are rendered as-is in the UI. Category and label segments Metric names are case sensitive. Capitalize the first word in the category and label segments. Keep category and label segments as short as possible. Length There is a limit of 255 characters for metric names. Characters to avoid using Avoid using the following characters in names. These characters have special meaning and should not be used except where specifically required for their purpose. / ] [ | * Also avoid multi-byte characters. Units Use abbreviated names for units when possible. Metric segments Each of these segments is divided by the forward slash / character. Each segment is interpreted for a specific purpose in the UI and roughly follows this pattern: prefix/category/label[units] Copy For example, the metric representing the latency of cache hits reported by a plugin collecting data for a cache appliance might look like this: Component/Cache/Hits[sec|hit] Copy Metric segment order Notes Prefix: Component/ or Custom/ The first segment of a custom metric is Component/ (if it comes from a plugin agent) or Custom/ (if it is a custom metric collected by a New Relic agent. For example, Custom/MyMetric). Caution If you use the Plugin API only, and if the metrics do not start with Component/, they may not be available or may not appear correctly in charts and dashboards. Category name The second part of a custom metric is a category name, used to group metrics into different categories. For example, the metrics reported by a database plugin may fall into categories such as schema, tables, or connections. Label The third part of the metric name is used for labeling the data when it appears in tables and charts. If it contains multiple segments, each slash separating the segments of the label will be rendered as part of the label. Units The fourth segment of the metric consists of a units specification. Metric attributes Most metrics are defined statically and represent some global state; for example, cache size. Other metrics are dynamic and include some contextual attribute like the name of a host or a file. These metrics need to be structured so you can easily show them as a group in a table stacked in a chart. To add attribute names to a metric, put them in trailing segments separated by a forward slash / character. For example: Component/Disk/Bytes In/dev001 Component/Network/External services/ae592c3.aws.com Copy You can specify more than one attribute as long as they occupy the same position for a given metric category and label: Component/Tables/Row count/DB001/BLOG_POSTS[rows] Copy Caution Avoid overloading the metric space by putting in segment values that have a large range of values. While something like a customer's region in an attribute is a reasonable thing to track in the metric, the customer name would not be if you have more than a few hundred customers. If your agent starts sending an excessive amount of metrics, your metrics may be automatically collapsed into groups with wildcards: Component/Users/*[visits] Copy Metric values You can report a metric value in one of two ways: Single value: This typically is the value being reported for that time slice. If you use an SDK, you report the single value to the SDK. It handles tracking the rest of these values. Set of aggregate value: This includes the min, max, and sum of squares values for the value being reported. If you use the Plugin API, the preferred method is to report all of the values. When aggregating a series of timeslice data into a single timeslice data entry for a given period, all fields are summed except for the min and max value. If you are using an SDK plugins, this is done automatically. If you are using the Plugin API to develop plugins, you need to code for this. A metric value contains several fields, but it is represented primarily by the count and value. The count is a 32-bit integer field, and the value is a 32-bit float. Metric values can represent more than one data point or sample as an aggregation of measures. Typically the count is the number of samples, and the value is the total value of all samples. Here are the fields in a metric value: Metric value Description count The number of things being measured. If data is collected at the time the event occurs, like with some kind of injection, then the count in the timeslice data will be 1. Required if it is not 1 (0 generally represents an absent value). value Required: The total value measured across all things being counted. When averages are calculated later, we divide the value by the count. In some cases, the value field is irrelevant. min, max The minimum and maximum values when the count is greater than 1. When the count is 1, these are the same as the value. Optional depending on whether they are available or relevant for a given metric. sum of squares This is the sum of squares of each value and is useful when the values follow a standard distribution. You can only capture this value when you are collecting data each time the event happens. You store the value of the event in the value field and the square of the value in the sum of squares. This is used to calculate a standard deviation later on. The sum of squares is optional. It is used to calculate a standard deviation for a selection of data. If standard deviation for the value is not meaningful, such as when the values are not part of a normal distribution, then the sum of squares is omitted. Units When a metric value is collected by periodically sampling an interface, the count units are implicitly samples, and the value units are whatever is being sampled. For data it might be bytes. For throughput it might be something like kilobytes/second. For utilization (like CPU) it might be percent. When the count units are samples, they can be omitted in the metric name. Units of time, bytes, and bits may get special treatment, allowing additional conversion in the user interface between magnitudes. For example, if you specify a metric with units of kilobytes, then in the UI you may be presented the option of displaying a chart of Mb. Metrics units describe what the value field and count represent. Units are specified inside brackets and consist of units for the value, followed by a pipe (|) and then the units for the count. For example: Component/metric_id[value_unit|count_unit] Copy Exception: The pipe and count units (|[count_unit]) are not required after the value unit for samples. Rate metrics are commonly defined as sample per interval. This is defined as units/interval in the metric, with a forward slash to separate units from interval. For example: Component/metric_id[value_unit/interval] Copy In rare cases there will only be a unit value for count. The value will be interpreted as unitless. Value units are omitted, and the vertical bar appears in front of the count units. For example: Component/metric_id[|count_unit] Copy Units for plugin metrics Notes Naming conventions You can have mixed-case unit names. They.can consist strictly of alphabetical characters as well as the _, %, or / symbols. Case is preserved. Punctuation markers, dashes, spaces and any other symbols are not allowed. Recommendation: Use uncapitalized words, spelled out in full. For example, use second not sec. Rate metrics When a metric value represents a rate, such as bytes/second, then the value is assumed to be a sample for the given interval. The units specifier looks like [ bytes/second] since the count units are implicitly samples. For example: Component/metric_id[bytes/second] Copy The count units are samples (default) and the value units are bytes/second. The forward slash separates the units from the interval. Count with units A common case for declaring units is when measuring response times. If the custom metric represents the average latency of a call to a cache, then the units for the metric value are seconds per call. For example: Component/metric_id[seconds|call] Copy Count units are calls and value units are seconds. The default count metric is not being used, so you need to specify it. The bar separates the value units from the count units. Units in charts The units specified in a metric have several implications for the way the values are interpreted by generic charts and tables: Units display in labels and tooltips in charts to indicate what the values represent. Units imply a set of different values available from a single metric value. When creating a chart in a dashboard, the dashboard author selects one of the available value methods for that metric to plot in the chart.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71739,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Metric data for the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "&quot; : 2, &quot;max&quot; : 10, &quot;total&quot;: 12, &quot;count&quot; : 2, &quot;sum_of_squares&quot; : 104 } } } ] }&#x27; Copy Metric references <em>Refer</em> to these references as you <em>develop</em> your own <em>plugins</em>. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order"
      },
      "id": "603e80db64441f0def4e8863"
    },
    {
      "sections": [
        "Plugin data",
        "Important",
        "Limited access to legacy plugins",
        "Use integers and floats",
        "Define the time period (duration)",
        "Follow unit conversion guidelines",
        "Select value methods for display in the UI"
      ],
      "title": "Plugin data",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "e5fd09ba8dd9c63a140479fbc2032254d1cf8c4f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plugin-data/",
      "published_at": "2021-05-22T02:51:52Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Use integers and floats All plugin metrics must be an integer or float, and they must be reported along with a duration. You can also report the type of metric so it can be converted from one unit type into another. You can display the metrics you collect in a variety of value methods, including throughput, averages, min/max, and rate. The metrics appear in charts and tables you create for your plugin's user interface. Plugins in Plugin Central are designed to report on frequency metrics using non-negative integers or floating-point numbers: Non-negative integers: Supported. Floating-point numbers: Supported. Negative values: Not supported, except for summary metrics on the plugin's Summary page. Otherwise, the UI shows negative values as zero. String values: Not supported; the UI shows strings as zero. However, parts of your metric name (the key) can be displayed in the UI. Define the time period (duration) All metrics must include a duration period that starts no more than a few hours in the past. The end time is set automatically to the time New Relic Plugins receives the metrics. You cannot report a duration that starts or ends in the future, or a duration that ends in the past. For best results, use one of the plugin SDKs to create your plugin. Otherwise, some POST attempts may fail because the actual recorded duration could vary in increments of the plugin's scheduled reporting frequency. Follow unit conversion guidelines Plugins automatically converts some units (such as rate units) to more natural forms. For example, [bytes/second] is converted to Bps. Follow these guidelines for unit conversions: Long format: Always specify the long format (for example, [bytes/second]) in the metric name. The long or short version will be used as appropriate. (Unit designations are not case sensitive.) Consistency: Use modifiers consistently in the metric name. If you use a different modifier with the same metric name, it will be treated as a different metric. Optional: Standard modifiers: Provide standard modifiers to the first metric in a value unit. For example, rather than specifying [bytes/second], you can specify [kiloBytes/second]. Plugins accepts these standard modifiers: Modifier Multiplier Modifier Multiplier Kilo 1000 - -- - -- Mega 1000^2 - -- - -- Giga 1000^3 Gibi 1024^3 Tera 1000^4 Tebi 1024^4 Peta 1000^5 Pebi 1024^5 Select value methods for display in the UI When you define a metric value for reporting, Plugins also captures a count, min, max, and sum of squares. Depending on whether you report single or aggregate values, you may report these numbers directly, or Plugins may calculate them automatically. You can then choose a value method for rendering these metrics in your plugin UI. In general, to configure value methods in the user interface: Select the metric you want to use. Review the list of value methods to select how to present the data in a column or plotted in a chart. Available value methods depend on the format of the units part of the metric name: Value method Count | Value Value Rate Count: The total of the count field over the entire timeslice data interval. When aggregating timeslice data, the count is summed. Total value: The total value over the entire time slice data interval. When aggregating timeslice data, the value field is summed Time rates only Average value: The total value divided by the total count, calculated only when units for both count and value are available. Throughput: The total count divided by the time interval of the time slice. By default New Relic Plugins measures the throughput in minutes according to the count units, such as calls per minute or bytes per minute. When the count units are specified in time (seconds), then the throughput appears as a percentage. Min/Max: The statistical values for minimum and maximum values when recorded in the metric value along with Count and Value. Standard deviation: The standard deviation of the entire set of measures recorded over the time interval. This is available only if the sum of squares field was populated in the metric value. The sum of squares and mean are used to calculate the standard deviation. In practice, this is meaningful only for populations that resemble a normal distribution. Rate: The rate is the total value divided by the time interval. When units of the value are in time, then the rate value is a percentage value. Units that are themselves rates will not have an explicit rate value method. The rate is simply the average value. Percentage: If you want the metric to appear as a percentage in the user interface, then you must define it as a percentage in the JSON.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71265,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> data",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e91e3196a67c11ea83d9d"
    },
    {
      "sections": [
        "Plan plugin metrics",
        "Important",
        "Limited access to legacy plugins",
        "Collect plugin metrics",
        "Present plugin metrics"
      ],
      "title": "Plan plugin metrics",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "08974b731c810af2b6b037e8b761834c6e1ce7a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plan-plugin-metrics/",
      "published_at": "2021-05-22T02:51:52Z",
      "updated_at": "2021-03-16T11:01:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Collect plugin metrics If you are running one of our APM agents to receive information about your applications, you can also receive arbitrary custom metrics. Using custom dashboards with your plugins, you can visualize custom metrics in a variety of useful ways. You can write plugins agents that can be run anywhere to collect metrics from any available system and report them to New Relic for dashboard display. Plugins also allow for summary metrics and one or more dashboards to visualize metrics that can be shared with every user of the plugin. This allows you to create a consistent user interface for the metrics you collect. The data that plugins report is in the form of a key/value pair. Values are numerical, either integers or floating point non-negative numbers. Negative numbers can be included in your summary metrics and tables; however, visualization in charts is limited to numbers greater than or equal to zero. Keys are strings which include the concept of name spaces and units. While values cannot be strings, parts of your metric name (the key) can be displayed in plugin dashboards. Your plugin agent can run anywhere with internet access to Plugins. You can write an agent using the agent SDKs. You can also write your agent to connect via HTTP POST using the API for Plugins in any language with HTTP support. Using the Plugin API might be the most appropriate solution when one agent is reporting metrics for more than one New Relic account. This is common for service providers to report specialized metrics for each of their customers using Plugins. This can be done with a small number of agents monitoring a large number of users. Present plugin metrics When creating a plugin agent, good metric name planning is critical to your success. Poorly chosen metrics names can make it difficult or impossible to display the information you intend. Plan ahead for how you want to visualize your information and to record metrics in a way that will facilitate this. You may even want to record the same metrics with more than one name in order to visualize different aspects of your data. Plugin dashboards do not have the ability to do mathematical calculations, so make sure your plugin agent handles any necessary calculations (sum, average, total, count, etc.) before recording metrics. Once you have collected metrics with your plugin agent, you will need to create dashboards to visualize the information in your metrics. All plugins will have a default dashboard. You can add as many dashboards as necessary to visualize your metric data (maximum 15). In addition to dashboards, you can choose up to five metrics to represent the summary of each instance. Summary metrics convey the health status of each instance and are used to trigger Caution events and Critical alerts for your plugins. The summary metrics appear on your plugin's Summary page.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71243,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Plan <em>plugin</em> metrics",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603eb01228ccbc6fa6eba790"
    }
  ],
  "/docs/plugins/plugin-developer-resources/developer-reference/metric-data-plugin-api": [
    {
      "sections": [
        "Plugin data",
        "Important",
        "Limited access to legacy plugins",
        "Use integers and floats",
        "Define the time period (duration)",
        "Follow unit conversion guidelines",
        "Select value methods for display in the UI"
      ],
      "title": "Plugin data",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "e5fd09ba8dd9c63a140479fbc2032254d1cf8c4f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plugin-data/",
      "published_at": "2021-05-22T02:51:52Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Use integers and floats All plugin metrics must be an integer or float, and they must be reported along with a duration. You can also report the type of metric so it can be converted from one unit type into another. You can display the metrics you collect in a variety of value methods, including throughput, averages, min/max, and rate. The metrics appear in charts and tables you create for your plugin's user interface. Plugins in Plugin Central are designed to report on frequency metrics using non-negative integers or floating-point numbers: Non-negative integers: Supported. Floating-point numbers: Supported. Negative values: Not supported, except for summary metrics on the plugin's Summary page. Otherwise, the UI shows negative values as zero. String values: Not supported; the UI shows strings as zero. However, parts of your metric name (the key) can be displayed in the UI. Define the time period (duration) All metrics must include a duration period that starts no more than a few hours in the past. The end time is set automatically to the time New Relic Plugins receives the metrics. You cannot report a duration that starts or ends in the future, or a duration that ends in the past. For best results, use one of the plugin SDKs to create your plugin. Otherwise, some POST attempts may fail because the actual recorded duration could vary in increments of the plugin's scheduled reporting frequency. Follow unit conversion guidelines Plugins automatically converts some units (such as rate units) to more natural forms. For example, [bytes/second] is converted to Bps. Follow these guidelines for unit conversions: Long format: Always specify the long format (for example, [bytes/second]) in the metric name. The long or short version will be used as appropriate. (Unit designations are not case sensitive.) Consistency: Use modifiers consistently in the metric name. If you use a different modifier with the same metric name, it will be treated as a different metric. Optional: Standard modifiers: Provide standard modifiers to the first metric in a value unit. For example, rather than specifying [bytes/second], you can specify [kiloBytes/second]. Plugins accepts these standard modifiers: Modifier Multiplier Modifier Multiplier Kilo 1000 - -- - -- Mega 1000^2 - -- - -- Giga 1000^3 Gibi 1024^3 Tera 1000^4 Tebi 1024^4 Peta 1000^5 Pebi 1024^5 Select value methods for display in the UI When you define a metric value for reporting, Plugins also captures a count, min, max, and sum of squares. Depending on whether you report single or aggregate values, you may report these numbers directly, or Plugins may calculate them automatically. You can then choose a value method for rendering these metrics in your plugin UI. In general, to configure value methods in the user interface: Select the metric you want to use. Review the list of value methods to select how to present the data in a column or plotted in a chart. Available value methods depend on the format of the units part of the metric name: Value method Count | Value Value Rate Count: The total of the count field over the entire timeslice data interval. When aggregating timeslice data, the count is summed. Total value: The total value over the entire time slice data interval. When aggregating timeslice data, the value field is summed Time rates only Average value: The total value divided by the total count, calculated only when units for both count and value are available. Throughput: The total count divided by the time interval of the time slice. By default New Relic Plugins measures the throughput in minutes according to the count units, such as calls per minute or bytes per minute. When the count units are specified in time (seconds), then the throughput appears as a percentage. Min/Max: The statistical values for minimum and maximum values when recorded in the metric value along with Count and Value. Standard deviation: The standard deviation of the entire set of measures recorded over the time interval. This is available only if the sum of squares field was populated in the metric value. The sum of squares and mean are used to calculate the standard deviation. In practice, this is meaningful only for populations that resemble a normal distribution. Rate: The rate is the total value divided by the time interval. When units of the value are in time, then the rate value is a percentage value. Units that are themselves rates will not have an explicit rate value method. The rate is simply the average value. Percentage: If you want the metric to appear as a percentage in the user interface, then you must define it as a percentage in the JSON.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71265,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> data",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e91e3196a67c11ea83d9d"
    },
    {
      "sections": [
        "Plan plugin metrics",
        "Important",
        "Limited access to legacy plugins",
        "Collect plugin metrics",
        "Present plugin metrics"
      ],
      "title": "Plan plugin metrics",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "08974b731c810af2b6b037e8b761834c6e1ce7a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plan-plugin-metrics/",
      "published_at": "2021-05-22T02:51:52Z",
      "updated_at": "2021-03-16T11:01:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Collect plugin metrics If you are running one of our APM agents to receive information about your applications, you can also receive arbitrary custom metrics. Using custom dashboards with your plugins, you can visualize custom metrics in a variety of useful ways. You can write plugins agents that can be run anywhere to collect metrics from any available system and report them to New Relic for dashboard display. Plugins also allow for summary metrics and one or more dashboards to visualize metrics that can be shared with every user of the plugin. This allows you to create a consistent user interface for the metrics you collect. The data that plugins report is in the form of a key/value pair. Values are numerical, either integers or floating point non-negative numbers. Negative numbers can be included in your summary metrics and tables; however, visualization in charts is limited to numbers greater than or equal to zero. Keys are strings which include the concept of name spaces and units. While values cannot be strings, parts of your metric name (the key) can be displayed in plugin dashboards. Your plugin agent can run anywhere with internet access to Plugins. You can write an agent using the agent SDKs. You can also write your agent to connect via HTTP POST using the API for Plugins in any language with HTTP support. Using the Plugin API might be the most appropriate solution when one agent is reporting metrics for more than one New Relic account. This is common for service providers to report specialized metrics for each of their customers using Plugins. This can be done with a small number of agents monitoring a large number of users. Present plugin metrics When creating a plugin agent, good metric name planning is critical to your success. Poorly chosen metrics names can make it difficult or impossible to display the information you intend. Plan ahead for how you want to visualize your information and to record metrics in a way that will facilitate this. You may even want to record the same metrics with more than one name in order to visualize different aspects of your data. Plugin dashboards do not have the ability to do mathematical calculations, so make sure your plugin agent handles any necessary calculations (sum, average, total, count, etc.) before recording metrics. Once you have collected metrics with your plugin agent, you will need to create dashboards to visualize the information in your metrics. All plugins will have a default dashboard. You can add as many dashboards as necessary to visualize your metric data (maximum 15). In addition to dashboards, you can choose up to five metrics to represent the summary of each instance. Summary metrics convey the health status of each instance and are used to trigger Caution events and Critical alerts for your plugins. The summary metrics appear on your plugin's Summary page.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71242,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Plan <em>plugin</em> metrics",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603eb01228ccbc6fa6eba790"
    },
    {
      "sections": [
        "Use the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "Before you begin",
        "Metric data POST",
        "Data aggregation",
        "Compression",
        "Examples",
        "Example JSON",
        "Pseudo-code template",
        "API responses and error codes",
        "Debugging logs",
        "Error codes"
      ],
      "title": "Use the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "f30a9a37241be1a13263e2bc8892f411d6fa618b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/use-plugin-api/",
      "published_at": "2021-05-22T02:51:53Z",
      "updated_at": "2021-03-13T03:44:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Before you begin Using a development language other than Ruby, .NET, or Java for a plugin agent means you do not have an SDK to work with, but you do have some benefits. This is a guide for plugin developers to get started with writing an agent in any language that can work directly with the Plugin API for Plugin Central. You can use any language you want, as long as it supports sending JSON through HTTP POST. This allows for better integration with your systems. For the same reason, it is the best option for SaaS-based plugin agents. However, if you are not using the Plugins SDK for Java. .NET, or Ruby, you have some additional setup and planning to do in developing a plugin agent. This includes: Error tracking on POST calls A method for tracking and aggregating data when a POST fails Your own support plans if a New Relic SDK for your language or development tools is not available Any publicly available plugins in the Plugin Central should come bundled with their source code if the executable code is not plain text. This allows you to both try out plugins and to review the code. Recommendation: Before authoring a plugin, install some existing plugins using the Java SDK, .NET SDK, or Ruby SDK to see how they are written. Metric data POST Metric data is sent as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The MIME-type for the POST is application/json. The Plugins feature is designed to receive a continuous stream of metrics at a certain maximum speed, and to present this information on useful charts. The recommended frequency for sending data to Plugins is to send 60 seconds worth of data once a minute. Agents sending data more frequently than twice a minute on average may be subject to enforced limits on the number of metrics being saved. The following are recommended soft limits. Requests smaller than this will work; requests larger than this are subject to rejection or automatic data aggregation. As a hard cap, the total size of the POST payload should be no larger than 1MB (10^6 bytes). If the metric is \"expensive\" to calculate and does not change quickly, consider writing your plugin agent so that it skips some polling cycles to retrieve data and then sends the last value. This produces better results for your plugin users' dashboards. Type Limit Description Components 500 Number of distinct components currently tracked. Please note this is a per POST limit only. More than 500 components are able to report to an account simultaneously. Metrics per component 10,000 Total number of unique metrics per component. Take precautions to ensure metric names are not generated too dynamically. Even if the number of metrics being sent in each individual post is small, over time they may add up to a large number of unique metrics. When the number of metrics for a given component exceeds this limit, the server may start aggregating metrics together by globbing segments of the metric name with an asterisk (*). Metrics per post 20,000 Number of metrics sent per post. A post may send data for multiple components in a single request as long as the total number of metrics in the request does not exceed this limit. Frequency of post 2 per minute Frequency of update. Agents are expected to send data no more frequently than 1 per minute. Data aggregation The SDKs manage data aggregation in the event of a failed POST. If you are not using an SDK, you need to manage this yourself. Include all five metric values in a POST: min, max, total, count, and sum or squares. (Exception: This may not be necessary for monotonic metrics where short term variation is not an issue.) Recompute these values for the accumulating metric data as required by what is being measured, incrementing the duration accordingly, until a successful POST is sent. Compression Data can be sent in the following encoding formats: identity deflate gzip If data is sent compressed, make sure the Content-Encoding header specifies the type of encoding. Examples Here are some examples for developing plugins. Example JSON This is an example of the JSON that would be used to POST data to Plugins. The JSON data is a hash with two required keys at the top level: agent: A hash describing the agent that is reporting metrics data to Plugins. A POST can contain information for only one agent. Host and version are required. components: An array of components, each consisting of a hash of attributes for the individual component. Multiple components can be sent with a single. Each component has its own name, GUID, duration, and metrics. { \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] } Copy Pseudo-code template This is a pseudo-code example that works with the Plugin API. It can be used as a template for developing plugin agents. Initialization: // globals string platform_api_uri = \"https://platform-api.newrelic.com/platform/v1/metrics\" int poll_cycle = 60 // time in seconds string version = \"1.0.0\" // major_version.minor_version.patch_level string agent_host = get_host_name_where_this_process_is_running() string agent_pid = get_process_id_of_this_process() time last_poll_time // initialize if necessary initialize once create agent_hash with: agent_host agent_pid version for each newrelic_account do // just handling one account? then \"for each\" is unnecessary complexity for each monitored_component do create component_hash with: string guid = \"com.your_company.component_name_in_snake_case\" string name =\"Human Readable Component Name\" int duration = 0 // this will get updated each poll_cycle hash metrics_hash // this will be updated by populate_component_metrics_hash() end end end Copy Loop: every poll_cycle seconds do for each newrelic_account do // just handling one account? then \"for each\" is unnecessary complexity clear hash_to_send add agent_hash to hash_to_send for each component do populate_component_metrics_hash() this component.metrics_hash(\"duration\") = time.now() - last_poll_time in seconds add component.metrics_hash to hash_to_send end json_to_send = serialize_to_json(hash_to_send) connection = open http_connection(platform_api_uri) add header(\"X-License-Key\",this newrelic_account.license_key) to connection add header(\"Content-Type\",\"application/json\") to connection add header(\"Accept\",\"application/json\") to connection set http_verb to \"POST\" for connection response = send(json_to_send) to connection case response.code when response_code = 200 clear component.metrics_hash last_poll_time = time.now() when response_code = 400 // your request was malformed // consider reporting a \"supportability\" metric which counts the number of 400 responses you get // for example \"Component/Supportability/http_error_codes/400\" // you can use this on a \"Supportability\" Dashboard that helps diagnose your agent when response_code = 403 // forbidden probably due to a bad license key // log error and shutdown the agent when response_code = 404 // invalid URL // you should never get this error for https://platform-api.newrelic.com/platform/v1/metrics when response_code = 405 // invalid method // HTTP verb should be \"POST\" when response_code = 413 // POST body too large // try splitting at component boundaries // split along metric name spaces // fail gracefully - consider reporting a supportability metric (see 400) when response_code = 500 // error on New Relic's collector // could be due to malformed data or system trouble // fail gracefully - consider reporting a supportability metric (see 400) when response_code = 503 or 504 // New Relic collector busy //- this happens by design from time-to-time // keep collecting metrics // do NOT reset last_poll_time // log error if the problem persists for several minutes end case end end Copy Metric population: function populate_component_metrics_hash() // collect metrics from monitored component at any interval // if this is the first time collecting metrics, set last_poll_time to // time.now - metric duration, the time duration for which these metrics // were collected // // if you collect 2 or more metrics from the monitored component before data // is reported to Plugins either because your metric collection interval is // faster than poll_cycle or because your agent was unable to report metrics to // Plugins (for example a 503 http response), aggregate your data by storing: // total_value, max, min, count, sum_of_squares for each metric // // if the interval is longer than poll_cycle, retain the metrics and // report them each poll_cycle until they are updated end Copy API responses and error codes Depending on whether you are using the Plugin API or an agent SDK for plugins, the HTTP responses and logging techniques may be different. For example, responses for the Plugin API are uncompressed JSON. Successful posts return this JSON: {\"status\":\"ok\"} Copy The API does not support Accept-Encoding. Debugging logs To debug information, use either of these options: public static Logger getLogger(); Copy OR public static void Logger setLogger(Logger logger) { LOGGER = logger; } Copy Error codes If an error occurs, an appropriate status code is returned. The JSON returned is the hash key error with a detailed description of the error that occurred. For example: {\"error\":\"Failed to create agent with parameters=[...]\"} {\"error\":\"Missing metric data\"} {\"error\":\"Unable to parse body: Unexpected token RIGHT BRACE(}) at position 228.\"} Copy Code Name Description 400 Bad request The request or headers are in the wrong format, or the URL is incorrect, or the GUID does not meet the validation requirements. 403 Unauthorized Authentication error (no license key header, or invalid license key). 404 Not found Invalid URL. 405 Method not allowed Returned if the method is an invalid or unexpected type (GET/POST/PUT/etc.). 413 Request entity too large Too many metrics were sent in one request, or too many components (instances) were specified in one request, or other single-request limits were reached. 500 Internal server error Unexpected server error. 502 Bad gateway All 50X errors mean there is a transient problem in the server completing requests, and no data has been retained. Clients are expected to resend the data after waiting one minute. The data should be aggregated appropriately, combining multiple timeslice data values for the same metric into a single aggregate timeslice data value. 503 Service unavailable See 502 description. 504 Gateway timeout See 502 description.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 226.51062,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "604436cf28ccbcf2332c60a8"
    }
  ],
  "/docs/plugins/plugin-developer-resources/developer-reference/parts-plugin": [
    {
      "sections": [
        "Metric data for the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "URI",
        "GUID",
        "Time periods for metrics",
        "Metric data details",
        "Timeslice metric values",
        "Calculations",
        "Examples",
        "Metrics",
        "cURL example",
        "Metric references",
        "Metric naming guidelines",
        "Metric segments",
        "Caution",
        "Metric attributes",
        "Metric values",
        "Units"
      ],
      "title": "Metric data for the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "2e9d0553b7277c73fe8a2147519d9943fca440fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/metric-data-plugin-api/",
      "published_at": "2021-05-22T02:50:49Z",
      "updated_at": "2021-03-16T11:20:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. URI Metric timeslice data is sent with the Plugin API as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The Plugin API does not support New Relic's REST API, and vice versa. However, you can use the REST API (v2) to extract plugin data. For a list with links to procedures and examples, see Plugin examples (v2). GUID The plugin needs a Globally Unique Identifier (GUID), which is a character string limited to no less than 4 and no more than 255 characters. The GUID for a published plugin must be unique for each plugin. When creating a plugin, you are responsible for managing your own GUIDs to avoid naming conflicts. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metric(s). Thus, you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show any time period you want; for example, 30 minutes, 30 days, etc. You can also deliver data at 1-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, data will aggregate when there is too much, but data will not be extrapolated if there is not enough data. In order for data to appear on a 30 minute chart, make sure at least one data point is within the range, or no data will appear. Use a 60-second polling interval, because the default dashboard shows 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Metric data details The JSON data is a hash with two required keys at the top level: components: An array of components, each consisting of a hash of attributes for the individual component, including the metric data. agent: A hash describing the agent that is reporting metrics data to New Relic Plugins on behalf of the component(s). Of these values, only host and version are required. When graphing metrics, be aware that null = zero. Metric data POST Description Component data One of two required keys at the top level. This is an array of hashes describing the components that report metrics in this request. Each hash contains the following values: name A name ( < =32 characters) that uniquely identifies the monitored entity and appears as the display name for this agent. Note: Metric names are case sensitive. guid A \"reverse domain name\" styled identifier; for example, com.newrelic.mysql. This is a unique identity defined in the plugin's user interface, which ties the agent data to the corresponding plugin user interface in New Relic. duration The duration in seconds over which the metric data was collected. The end time is implied as the time the data is received by the API. metrics Timeslice data for each metric being reported. The hash keys are metric names, and the values are the timeslice data value for the named metric. Agent data One of two required keys at the top level. A hash specifying information about the agent that is reporting data on behalf of the components. host (required) The hostname of the agent monitoring the specified components. This is the hostname where the monitoring agent is running, not the hostname of the component being monitored. pid (optional) The process identifier of the agent monitoring the specified components. This is the process identifier of the monitoring agent itself, not a process identifier that may be associated with the monitored components. version (required) The version of the agent monitoring the specified components, using the format A.B.C where A, B, and C are integers. The version number must conform to the rules specified in standard Semantic Versioning scheme v2.0.0. Timeslice metric values Metrics are sent inside the component hash with the key metrics and a hash as a value. The hash keys are metric names, and the values are the timeslice data values for the named metric. The timeslice hash value uses one of three formats: Timeslice hash value Description A single scalar value with a floating point number or integer This is the simplest format, and this number is required. The reported value is used as the total, minimum, and maximum data value. The count value is assumed to be 1. The Plugin API does not support reporting of arbitrary string metrics, only scalar values that are aggregated. Array of five required values in specific order An array of five required integers or floating point numbers that represent, in order: Total value over the time period Count of the number of events this value represents over the time period; the average is calculated by dividing total by count Minimum value over the time period Maximum value over the time period Sum of squares for the samples over the time period Hash with five required key/value pairs in any order A hash with value names as the keys, and integers or floating point values as the values. All five key/value pairs are required. The keys of the hash are the type of timeslice data, and the value is the data value. These has key/value pairs can be in any order: total: Total value over the time period count: Count of the number of events this value represents over the time period; the average is calculated by dividing total by count min: Minimum value over the time period max: Maximum value over the time period sum_of_squares: Sum of squares for the samples over the time period Calculations Limited mathematical calculations are available with the key/value pairs, such as computing total, count, minimum, maximum, averages, and standard deviations. However, to do more extensive calculations, you need to do the math in the agent, and then send the results as a new metric. For example, send Metric1, Metric2, and Metric3 (which equals Metric1 divided by Metric2). If you submit negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Examples Here are some examples. Metrics \"metrics\" : { \"Component/Database/Primary[Queries/Second]\" : { \"total\" : 25, \"count\" : 2, \"min\" : 10, \"max\" : 15, \"sum_of_squares\" : 325 }, \"Component/Database/Secondary[Queries/Second]\" : [25, 2, 10, 15, 325], \"Component/Database/Backup[Queries/Second]\" : 10 } Copy cURL example curl -vi https://platform-api.newrelic.com/platform/v1/metrics \\ -H \"X-License-Key: YOUR_LICENSE_KEY_HERE\" \\ -H \"Content-Type: application/json\" \\ -H \"Accept: application/json\" \\ -X POST -d '{ \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] }' Copy Metric references Refer to these references as you develop your own plugins. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order for the metric to be rendered usefully in the user interface, the metric name must contain a prefix, category name, label, and optional units indicator. Here are some recommended guidelines for the text in metric names to make them more readable in the user interface. Metric naming guidelines Guidelines UI display Use case and whitespace characters appropriate for display in the user interface, because segments are rendered as-is in the UI. Category and label segments Metric names are case sensitive. Capitalize the first word in the category and label segments. Keep category and label segments as short as possible. Length There is a limit of 255 characters for metric names. Characters to avoid using Avoid using the following characters in names. These characters have special meaning and should not be used except where specifically required for their purpose. / ] [ | * Also avoid multi-byte characters. Units Use abbreviated names for units when possible. Metric segments Each of these segments is divided by the forward slash / character. Each segment is interpreted for a specific purpose in the UI and roughly follows this pattern: prefix/category/label[units] Copy For example, the metric representing the latency of cache hits reported by a plugin collecting data for a cache appliance might look like this: Component/Cache/Hits[sec|hit] Copy Metric segment order Notes Prefix: Component/ or Custom/ The first segment of a custom metric is Component/ (if it comes from a plugin agent) or Custom/ (if it is a custom metric collected by a New Relic agent. For example, Custom/MyMetric). Caution If you use the Plugin API only, and if the metrics do not start with Component/, they may not be available or may not appear correctly in charts and dashboards. Category name The second part of a custom metric is a category name, used to group metrics into different categories. For example, the metrics reported by a database plugin may fall into categories such as schema, tables, or connections. Label The third part of the metric name is used for labeling the data when it appears in tables and charts. If it contains multiple segments, each slash separating the segments of the label will be rendered as part of the label. Units The fourth segment of the metric consists of a units specification. Metric attributes Most metrics are defined statically and represent some global state; for example, cache size. Other metrics are dynamic and include some contextual attribute like the name of a host or a file. These metrics need to be structured so you can easily show them as a group in a table stacked in a chart. To add attribute names to a metric, put them in trailing segments separated by a forward slash / character. For example: Component/Disk/Bytes In/dev001 Component/Network/External services/ae592c3.aws.com Copy You can specify more than one attribute as long as they occupy the same position for a given metric category and label: Component/Tables/Row count/DB001/BLOG_POSTS[rows] Copy Caution Avoid overloading the metric space by putting in segment values that have a large range of values. While something like a customer's region in an attribute is a reasonable thing to track in the metric, the customer name would not be if you have more than a few hundred customers. If your agent starts sending an excessive amount of metrics, your metrics may be automatically collapsed into groups with wildcards: Component/Users/*[visits] Copy Metric values You can report a metric value in one of two ways: Single value: This typically is the value being reported for that time slice. If you use an SDK, you report the single value to the SDK. It handles tracking the rest of these values. Set of aggregate value: This includes the min, max, and sum of squares values for the value being reported. If you use the Plugin API, the preferred method is to report all of the values. When aggregating a series of timeslice data into a single timeslice data entry for a given period, all fields are summed except for the min and max value. If you are using an SDK plugins, this is done automatically. If you are using the Plugin API to develop plugins, you need to code for this. A metric value contains several fields, but it is represented primarily by the count and value. The count is a 32-bit integer field, and the value is a 32-bit float. Metric values can represent more than one data point or sample as an aggregation of measures. Typically the count is the number of samples, and the value is the total value of all samples. Here are the fields in a metric value: Metric value Description count The number of things being measured. If data is collected at the time the event occurs, like with some kind of injection, then the count in the timeslice data will be 1. Required if it is not 1 (0 generally represents an absent value). value Required: The total value measured across all things being counted. When averages are calculated later, we divide the value by the count. In some cases, the value field is irrelevant. min, max The minimum and maximum values when the count is greater than 1. When the count is 1, these are the same as the value. Optional depending on whether they are available or relevant for a given metric. sum of squares This is the sum of squares of each value and is useful when the values follow a standard distribution. You can only capture this value when you are collecting data each time the event happens. You store the value of the event in the value field and the square of the value in the sum of squares. This is used to calculate a standard deviation later on. The sum of squares is optional. It is used to calculate a standard deviation for a selection of data. If standard deviation for the value is not meaningful, such as when the values are not part of a normal distribution, then the sum of squares is omitted. Units When a metric value is collected by periodically sampling an interface, the count units are implicitly samples, and the value units are whatever is being sampled. For data it might be bytes. For throughput it might be something like kilobytes/second. For utilization (like CPU) it might be percent. When the count units are samples, they can be omitted in the metric name. Units of time, bytes, and bits may get special treatment, allowing additional conversion in the user interface between magnitudes. For example, if you specify a metric with units of kilobytes, then in the UI you may be presented the option of displaying a chart of Mb. Metrics units describe what the value field and count represent. Units are specified inside brackets and consist of units for the value, followed by a pipe (|) and then the units for the count. For example: Component/metric_id[value_unit|count_unit] Copy Exception: The pipe and count units (|[count_unit]) are not required after the value unit for samples. Rate metrics are commonly defined as sample per interval. This is defined as units/interval in the metric, with a forward slash to separate units from interval. For example: Component/metric_id[value_unit/interval] Copy In rare cases there will only be a unit value for count. The value will be interpreted as unitless. Value units are omitted, and the vertical bar appears in front of the count units. For example: Component/metric_id[|count_unit] Copy Units for plugin metrics Notes Naming conventions You can have mixed-case unit names. They.can consist strictly of alphabetical characters as well as the _, %, or / symbols. Case is preserved. Punctuation markers, dashes, spaces and any other symbols are not allowed. Recommendation: Use uncapitalized words, spelled out in full. For example, use second not sec. Rate metrics When a metric value represents a rate, such as bytes/second, then the value is assumed to be a sample for the given interval. The units specifier looks like [ bytes/second] since the count units are implicitly samples. For example: Component/metric_id[bytes/second] Copy The count units are samples (default) and the value units are bytes/second. The forward slash separates the units from the interval. Count with units A common case for declaring units is when measuring response times. If the custom metric represents the average latency of a call to a cache, then the units for the metric value are seconds per call. For example: Component/metric_id[seconds|call] Copy Count units are calls and value units are seconds. The default count metric is not being used, so you need to specify it. The bar separates the value units from the count units. Units in charts The units specified in a metric have several implications for the way the values are interpreted by generic charts and tables: Units display in labels and tooltips in charts to indicate what the values represent. Units imply a set of different values available from a single metric value. When creating a chart in a dashboard, the dashboard author selects one of the available value methods for that metric to plot in the chart.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71738,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Metric data for the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "&quot; : 2, &quot;max&quot; : 10, &quot;total&quot;: 12, &quot;count&quot; : 2, &quot;sum_of_squares&quot; : 104 } } } ] }&#x27; Copy Metric references <em>Refer</em> to these references as you <em>develop</em> your own <em>plugins</em>. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order"
      },
      "id": "603e80db64441f0def4e8863"
    },
    {
      "sections": [
        "Plugin data",
        "Important",
        "Limited access to legacy plugins",
        "Use integers and floats",
        "Define the time period (duration)",
        "Follow unit conversion guidelines",
        "Select value methods for display in the UI"
      ],
      "title": "Plugin data",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "e5fd09ba8dd9c63a140479fbc2032254d1cf8c4f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plugin-data/",
      "published_at": "2021-05-22T02:51:52Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Use integers and floats All plugin metrics must be an integer or float, and they must be reported along with a duration. You can also report the type of metric so it can be converted from one unit type into another. You can display the metrics you collect in a variety of value methods, including throughput, averages, min/max, and rate. The metrics appear in charts and tables you create for your plugin's user interface. Plugins in Plugin Central are designed to report on frequency metrics using non-negative integers or floating-point numbers: Non-negative integers: Supported. Floating-point numbers: Supported. Negative values: Not supported, except for summary metrics on the plugin's Summary page. Otherwise, the UI shows negative values as zero. String values: Not supported; the UI shows strings as zero. However, parts of your metric name (the key) can be displayed in the UI. Define the time period (duration) All metrics must include a duration period that starts no more than a few hours in the past. The end time is set automatically to the time New Relic Plugins receives the metrics. You cannot report a duration that starts or ends in the future, or a duration that ends in the past. For best results, use one of the plugin SDKs to create your plugin. Otherwise, some POST attempts may fail because the actual recorded duration could vary in increments of the plugin's scheduled reporting frequency. Follow unit conversion guidelines Plugins automatically converts some units (such as rate units) to more natural forms. For example, [bytes/second] is converted to Bps. Follow these guidelines for unit conversions: Long format: Always specify the long format (for example, [bytes/second]) in the metric name. The long or short version will be used as appropriate. (Unit designations are not case sensitive.) Consistency: Use modifiers consistently in the metric name. If you use a different modifier with the same metric name, it will be treated as a different metric. Optional: Standard modifiers: Provide standard modifiers to the first metric in a value unit. For example, rather than specifying [bytes/second], you can specify [kiloBytes/second]. Plugins accepts these standard modifiers: Modifier Multiplier Modifier Multiplier Kilo 1000 - -- - -- Mega 1000^2 - -- - -- Giga 1000^3 Gibi 1024^3 Tera 1000^4 Tebi 1024^4 Peta 1000^5 Pebi 1024^5 Select value methods for display in the UI When you define a metric value for reporting, Plugins also captures a count, min, max, and sum of squares. Depending on whether you report single or aggregate values, you may report these numbers directly, or Plugins may calculate them automatically. You can then choose a value method for rendering these metrics in your plugin UI. In general, to configure value methods in the user interface: Select the metric you want to use. Review the list of value methods to select how to present the data in a column or plotted in a chart. Available value methods depend on the format of the units part of the metric name: Value method Count | Value Value Rate Count: The total of the count field over the entire timeslice data interval. When aggregating timeslice data, the count is summed. Total value: The total value over the entire time slice data interval. When aggregating timeslice data, the value field is summed Time rates only Average value: The total value divided by the total count, calculated only when units for both count and value are available. Throughput: The total count divided by the time interval of the time slice. By default New Relic Plugins measures the throughput in minutes according to the count units, such as calls per minute or bytes per minute. When the count units are specified in time (seconds), then the throughput appears as a percentage. Min/Max: The statistical values for minimum and maximum values when recorded in the metric value along with Count and Value. Standard deviation: The standard deviation of the entire set of measures recorded over the time interval. This is available only if the sum of squares field was populated in the metric value. The sum of squares and mean are used to calculate the standard deviation. In practice, this is meaningful only for populations that resemble a normal distribution. Rate: The rate is the total value divided by the time interval. When units of the value are in time, then the rate value is a percentage value. Units that are themselves rates will not have an explicit rate value method. The rate is simply the average value. Percentage: If you want the metric to appear as a percentage in the user interface, then you must define it as a percentage in the JSON.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71265,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> data",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e91e3196a67c11ea83d9d"
    },
    {
      "sections": [
        "Plan plugin metrics",
        "Important",
        "Limited access to legacy plugins",
        "Collect plugin metrics",
        "Present plugin metrics"
      ],
      "title": "Plan plugin metrics",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "08974b731c810af2b6b037e8b761834c6e1ce7a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plan-plugin-metrics/",
      "published_at": "2021-05-22T02:51:52Z",
      "updated_at": "2021-03-16T11:01:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Collect plugin metrics If you are running one of our APM agents to receive information about your applications, you can also receive arbitrary custom metrics. Using custom dashboards with your plugins, you can visualize custom metrics in a variety of useful ways. You can write plugins agents that can be run anywhere to collect metrics from any available system and report them to New Relic for dashboard display. Plugins also allow for summary metrics and one or more dashboards to visualize metrics that can be shared with every user of the plugin. This allows you to create a consistent user interface for the metrics you collect. The data that plugins report is in the form of a key/value pair. Values are numerical, either integers or floating point non-negative numbers. Negative numbers can be included in your summary metrics and tables; however, visualization in charts is limited to numbers greater than or equal to zero. Keys are strings which include the concept of name spaces and units. While values cannot be strings, parts of your metric name (the key) can be displayed in plugin dashboards. Your plugin agent can run anywhere with internet access to Plugins. You can write an agent using the agent SDKs. You can also write your agent to connect via HTTP POST using the API for Plugins in any language with HTTP support. Using the Plugin API might be the most appropriate solution when one agent is reporting metrics for more than one New Relic account. This is common for service providers to report specialized metrics for each of their customers using Plugins. This can be done with a small number of agents monitoring a large number of users. Present plugin metrics When creating a plugin agent, good metric name planning is critical to your success. Poorly chosen metrics names can make it difficult or impossible to display the information you intend. Plan ahead for how you want to visualize your information and to record metrics in a way that will facilitate this. You may even want to record the same metrics with more than one name in order to visualize different aspects of your data. Plugin dashboards do not have the ability to do mathematical calculations, so make sure your plugin agent handles any necessary calculations (sum, average, total, count, etc.) before recording metrics. Once you have collected metrics with your plugin agent, you will need to create dashboards to visualize the information in your metrics. All plugins will have a default dashboard. You can add as many dashboards as necessary to visualize your metric data (maximum 15). In addition to dashboards, you can choose up to five metrics to represent the summary of each instance. Summary metrics convey the health status of each instance and are used to trigger Caution events and Critical alerts for your plugins. The summary metrics appear on your plugin's Summary page.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71242,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Plan <em>plugin</em> metrics",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603eb01228ccbc6fa6eba790"
    }
  ],
  "/docs/plugins/plugin-developer-resources/developer-reference/plan-plugin-metrics": [
    {
      "sections": [
        "Metric data for the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "URI",
        "GUID",
        "Time periods for metrics",
        "Metric data details",
        "Timeslice metric values",
        "Calculations",
        "Examples",
        "Metrics",
        "cURL example",
        "Metric references",
        "Metric naming guidelines",
        "Metric segments",
        "Caution",
        "Metric attributes",
        "Metric values",
        "Units"
      ],
      "title": "Metric data for the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "2e9d0553b7277c73fe8a2147519d9943fca440fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/metric-data-plugin-api/",
      "published_at": "2021-05-22T02:50:49Z",
      "updated_at": "2021-03-16T11:20:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. URI Metric timeslice data is sent with the Plugin API as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The Plugin API does not support New Relic's REST API, and vice versa. However, you can use the REST API (v2) to extract plugin data. For a list with links to procedures and examples, see Plugin examples (v2). GUID The plugin needs a Globally Unique Identifier (GUID), which is a character string limited to no less than 4 and no more than 255 characters. The GUID for a published plugin must be unique for each plugin. When creating a plugin, you are responsible for managing your own GUIDs to avoid naming conflicts. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metric(s). Thus, you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show any time period you want; for example, 30 minutes, 30 days, etc. You can also deliver data at 1-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, data will aggregate when there is too much, but data will not be extrapolated if there is not enough data. In order for data to appear on a 30 minute chart, make sure at least one data point is within the range, or no data will appear. Use a 60-second polling interval, because the default dashboard shows 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Metric data details The JSON data is a hash with two required keys at the top level: components: An array of components, each consisting of a hash of attributes for the individual component, including the metric data. agent: A hash describing the agent that is reporting metrics data to New Relic Plugins on behalf of the component(s). Of these values, only host and version are required. When graphing metrics, be aware that null = zero. Metric data POST Description Component data One of two required keys at the top level. This is an array of hashes describing the components that report metrics in this request. Each hash contains the following values: name A name ( < =32 characters) that uniquely identifies the monitored entity and appears as the display name for this agent. Note: Metric names are case sensitive. guid A \"reverse domain name\" styled identifier; for example, com.newrelic.mysql. This is a unique identity defined in the plugin's user interface, which ties the agent data to the corresponding plugin user interface in New Relic. duration The duration in seconds over which the metric data was collected. The end time is implied as the time the data is received by the API. metrics Timeslice data for each metric being reported. The hash keys are metric names, and the values are the timeslice data value for the named metric. Agent data One of two required keys at the top level. A hash specifying information about the agent that is reporting data on behalf of the components. host (required) The hostname of the agent monitoring the specified components. This is the hostname where the monitoring agent is running, not the hostname of the component being monitored. pid (optional) The process identifier of the agent monitoring the specified components. This is the process identifier of the monitoring agent itself, not a process identifier that may be associated with the monitored components. version (required) The version of the agent monitoring the specified components, using the format A.B.C where A, B, and C are integers. The version number must conform to the rules specified in standard Semantic Versioning scheme v2.0.0. Timeslice metric values Metrics are sent inside the component hash with the key metrics and a hash as a value. The hash keys are metric names, and the values are the timeslice data values for the named metric. The timeslice hash value uses one of three formats: Timeslice hash value Description A single scalar value with a floating point number or integer This is the simplest format, and this number is required. The reported value is used as the total, minimum, and maximum data value. The count value is assumed to be 1. The Plugin API does not support reporting of arbitrary string metrics, only scalar values that are aggregated. Array of five required values in specific order An array of five required integers or floating point numbers that represent, in order: Total value over the time period Count of the number of events this value represents over the time period; the average is calculated by dividing total by count Minimum value over the time period Maximum value over the time period Sum of squares for the samples over the time period Hash with five required key/value pairs in any order A hash with value names as the keys, and integers or floating point values as the values. All five key/value pairs are required. The keys of the hash are the type of timeslice data, and the value is the data value. These has key/value pairs can be in any order: total: Total value over the time period count: Count of the number of events this value represents over the time period; the average is calculated by dividing total by count min: Minimum value over the time period max: Maximum value over the time period sum_of_squares: Sum of squares for the samples over the time period Calculations Limited mathematical calculations are available with the key/value pairs, such as computing total, count, minimum, maximum, averages, and standard deviations. However, to do more extensive calculations, you need to do the math in the agent, and then send the results as a new metric. For example, send Metric1, Metric2, and Metric3 (which equals Metric1 divided by Metric2). If you submit negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Examples Here are some examples. Metrics \"metrics\" : { \"Component/Database/Primary[Queries/Second]\" : { \"total\" : 25, \"count\" : 2, \"min\" : 10, \"max\" : 15, \"sum_of_squares\" : 325 }, \"Component/Database/Secondary[Queries/Second]\" : [25, 2, 10, 15, 325], \"Component/Database/Backup[Queries/Second]\" : 10 } Copy cURL example curl -vi https://platform-api.newrelic.com/platform/v1/metrics \\ -H \"X-License-Key: YOUR_LICENSE_KEY_HERE\" \\ -H \"Content-Type: application/json\" \\ -H \"Accept: application/json\" \\ -X POST -d '{ \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] }' Copy Metric references Refer to these references as you develop your own plugins. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order for the metric to be rendered usefully in the user interface, the metric name must contain a prefix, category name, label, and optional units indicator. Here are some recommended guidelines for the text in metric names to make them more readable in the user interface. Metric naming guidelines Guidelines UI display Use case and whitespace characters appropriate for display in the user interface, because segments are rendered as-is in the UI. Category and label segments Metric names are case sensitive. Capitalize the first word in the category and label segments. Keep category and label segments as short as possible. Length There is a limit of 255 characters for metric names. Characters to avoid using Avoid using the following characters in names. These characters have special meaning and should not be used except where specifically required for their purpose. / ] [ | * Also avoid multi-byte characters. Units Use abbreviated names for units when possible. Metric segments Each of these segments is divided by the forward slash / character. Each segment is interpreted for a specific purpose in the UI and roughly follows this pattern: prefix/category/label[units] Copy For example, the metric representing the latency of cache hits reported by a plugin collecting data for a cache appliance might look like this: Component/Cache/Hits[sec|hit] Copy Metric segment order Notes Prefix: Component/ or Custom/ The first segment of a custom metric is Component/ (if it comes from a plugin agent) or Custom/ (if it is a custom metric collected by a New Relic agent. For example, Custom/MyMetric). Caution If you use the Plugin API only, and if the metrics do not start with Component/, they may not be available or may not appear correctly in charts and dashboards. Category name The second part of a custom metric is a category name, used to group metrics into different categories. For example, the metrics reported by a database plugin may fall into categories such as schema, tables, or connections. Label The third part of the metric name is used for labeling the data when it appears in tables and charts. If it contains multiple segments, each slash separating the segments of the label will be rendered as part of the label. Units The fourth segment of the metric consists of a units specification. Metric attributes Most metrics are defined statically and represent some global state; for example, cache size. Other metrics are dynamic and include some contextual attribute like the name of a host or a file. These metrics need to be structured so you can easily show them as a group in a table stacked in a chart. To add attribute names to a metric, put them in trailing segments separated by a forward slash / character. For example: Component/Disk/Bytes In/dev001 Component/Network/External services/ae592c3.aws.com Copy You can specify more than one attribute as long as they occupy the same position for a given metric category and label: Component/Tables/Row count/DB001/BLOG_POSTS[rows] Copy Caution Avoid overloading the metric space by putting in segment values that have a large range of values. While something like a customer's region in an attribute is a reasonable thing to track in the metric, the customer name would not be if you have more than a few hundred customers. If your agent starts sending an excessive amount of metrics, your metrics may be automatically collapsed into groups with wildcards: Component/Users/*[visits] Copy Metric values You can report a metric value in one of two ways: Single value: This typically is the value being reported for that time slice. If you use an SDK, you report the single value to the SDK. It handles tracking the rest of these values. Set of aggregate value: This includes the min, max, and sum of squares values for the value being reported. If you use the Plugin API, the preferred method is to report all of the values. When aggregating a series of timeslice data into a single timeslice data entry for a given period, all fields are summed except for the min and max value. If you are using an SDK plugins, this is done automatically. If you are using the Plugin API to develop plugins, you need to code for this. A metric value contains several fields, but it is represented primarily by the count and value. The count is a 32-bit integer field, and the value is a 32-bit float. Metric values can represent more than one data point or sample as an aggregation of measures. Typically the count is the number of samples, and the value is the total value of all samples. Here are the fields in a metric value: Metric value Description count The number of things being measured. If data is collected at the time the event occurs, like with some kind of injection, then the count in the timeslice data will be 1. Required if it is not 1 (0 generally represents an absent value). value Required: The total value measured across all things being counted. When averages are calculated later, we divide the value by the count. In some cases, the value field is irrelevant. min, max The minimum and maximum values when the count is greater than 1. When the count is 1, these are the same as the value. Optional depending on whether they are available or relevant for a given metric. sum of squares This is the sum of squares of each value and is useful when the values follow a standard distribution. You can only capture this value when you are collecting data each time the event happens. You store the value of the event in the value field and the square of the value in the sum of squares. This is used to calculate a standard deviation later on. The sum of squares is optional. It is used to calculate a standard deviation for a selection of data. If standard deviation for the value is not meaningful, such as when the values are not part of a normal distribution, then the sum of squares is omitted. Units When a metric value is collected by periodically sampling an interface, the count units are implicitly samples, and the value units are whatever is being sampled. For data it might be bytes. For throughput it might be something like kilobytes/second. For utilization (like CPU) it might be percent. When the count units are samples, they can be omitted in the metric name. Units of time, bytes, and bits may get special treatment, allowing additional conversion in the user interface between magnitudes. For example, if you specify a metric with units of kilobytes, then in the UI you may be presented the option of displaying a chart of Mb. Metrics units describe what the value field and count represent. Units are specified inside brackets and consist of units for the value, followed by a pipe (|) and then the units for the count. For example: Component/metric_id[value_unit|count_unit] Copy Exception: The pipe and count units (|[count_unit]) are not required after the value unit for samples. Rate metrics are commonly defined as sample per interval. This is defined as units/interval in the metric, with a forward slash to separate units from interval. For example: Component/metric_id[value_unit/interval] Copy In rare cases there will only be a unit value for count. The value will be interpreted as unitless. Value units are omitted, and the vertical bar appears in front of the count units. For example: Component/metric_id[|count_unit] Copy Units for plugin metrics Notes Naming conventions You can have mixed-case unit names. They.can consist strictly of alphabetical characters as well as the _, %, or / symbols. Case is preserved. Punctuation markers, dashes, spaces and any other symbols are not allowed. Recommendation: Use uncapitalized words, spelled out in full. For example, use second not sec. Rate metrics When a metric value represents a rate, such as bytes/second, then the value is assumed to be a sample for the given interval. The units specifier looks like [ bytes/second] since the count units are implicitly samples. For example: Component/metric_id[bytes/second] Copy The count units are samples (default) and the value units are bytes/second. The forward slash separates the units from the interval. Count with units A common case for declaring units is when measuring response times. If the custom metric represents the average latency of a call to a cache, then the units for the metric value are seconds per call. For example: Component/metric_id[seconds|call] Copy Count units are calls and value units are seconds. The default count metric is not being used, so you need to specify it. The bar separates the value units from the count units. Units in charts The units specified in a metric have several implications for the way the values are interpreted by generic charts and tables: Units display in labels and tooltips in charts to indicate what the values represent. Units imply a set of different values available from a single metric value. When creating a chart in a dashboard, the dashboard author selects one of the available value methods for that metric to plot in the chart.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71738,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Metric data for the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "&quot; : 2, &quot;max&quot; : 10, &quot;total&quot;: 12, &quot;count&quot; : 2, &quot;sum_of_squares&quot; : 104 } } } ] }&#x27; Copy Metric references <em>Refer</em> to these references as you <em>develop</em> your own <em>plugins</em>. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order"
      },
      "id": "603e80db64441f0def4e8863"
    },
    {
      "sections": [
        "Plugin data",
        "Important",
        "Limited access to legacy plugins",
        "Use integers and floats",
        "Define the time period (duration)",
        "Follow unit conversion guidelines",
        "Select value methods for display in the UI"
      ],
      "title": "Plugin data",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "e5fd09ba8dd9c63a140479fbc2032254d1cf8c4f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plugin-data/",
      "published_at": "2021-05-22T02:51:52Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Use integers and floats All plugin metrics must be an integer or float, and they must be reported along with a duration. You can also report the type of metric so it can be converted from one unit type into another. You can display the metrics you collect in a variety of value methods, including throughput, averages, min/max, and rate. The metrics appear in charts and tables you create for your plugin's user interface. Plugins in Plugin Central are designed to report on frequency metrics using non-negative integers or floating-point numbers: Non-negative integers: Supported. Floating-point numbers: Supported. Negative values: Not supported, except for summary metrics on the plugin's Summary page. Otherwise, the UI shows negative values as zero. String values: Not supported; the UI shows strings as zero. However, parts of your metric name (the key) can be displayed in the UI. Define the time period (duration) All metrics must include a duration period that starts no more than a few hours in the past. The end time is set automatically to the time New Relic Plugins receives the metrics. You cannot report a duration that starts or ends in the future, or a duration that ends in the past. For best results, use one of the plugin SDKs to create your plugin. Otherwise, some POST attempts may fail because the actual recorded duration could vary in increments of the plugin's scheduled reporting frequency. Follow unit conversion guidelines Plugins automatically converts some units (such as rate units) to more natural forms. For example, [bytes/second] is converted to Bps. Follow these guidelines for unit conversions: Long format: Always specify the long format (for example, [bytes/second]) in the metric name. The long or short version will be used as appropriate. (Unit designations are not case sensitive.) Consistency: Use modifiers consistently in the metric name. If you use a different modifier with the same metric name, it will be treated as a different metric. Optional: Standard modifiers: Provide standard modifiers to the first metric in a value unit. For example, rather than specifying [bytes/second], you can specify [kiloBytes/second]. Plugins accepts these standard modifiers: Modifier Multiplier Modifier Multiplier Kilo 1000 - -- - -- Mega 1000^2 - -- - -- Giga 1000^3 Gibi 1024^3 Tera 1000^4 Tebi 1024^4 Peta 1000^5 Pebi 1024^5 Select value methods for display in the UI When you define a metric value for reporting, Plugins also captures a count, min, max, and sum of squares. Depending on whether you report single or aggregate values, you may report these numbers directly, or Plugins may calculate them automatically. You can then choose a value method for rendering these metrics in your plugin UI. In general, to configure value methods in the user interface: Select the metric you want to use. Review the list of value methods to select how to present the data in a column or plotted in a chart. Available value methods depend on the format of the units part of the metric name: Value method Count | Value Value Rate Count: The total of the count field over the entire timeslice data interval. When aggregating timeslice data, the count is summed. Total value: The total value over the entire time slice data interval. When aggregating timeslice data, the value field is summed Time rates only Average value: The total value divided by the total count, calculated only when units for both count and value are available. Throughput: The total count divided by the time interval of the time slice. By default New Relic Plugins measures the throughput in minutes according to the count units, such as calls per minute or bytes per minute. When the count units are specified in time (seconds), then the throughput appears as a percentage. Min/Max: The statistical values for minimum and maximum values when recorded in the metric value along with Count and Value. Standard deviation: The standard deviation of the entire set of measures recorded over the time interval. This is available only if the sum of squares field was populated in the metric value. The sum of squares and mean are used to calculate the standard deviation. In practice, this is meaningful only for populations that resemble a normal distribution. Rate: The rate is the total value divided by the time interval. When units of the value are in time, then the rate value is a percentage value. Units that are themselves rates will not have an explicit rate value method. The rate is simply the average value. Percentage: If you want the metric to appear as a percentage in the user interface, then you must define it as a percentage in the JSON.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71265,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> data",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e91e3196a67c11ea83d9d"
    },
    {
      "sections": [
        "Use the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "Before you begin",
        "Metric data POST",
        "Data aggregation",
        "Compression",
        "Examples",
        "Example JSON",
        "Pseudo-code template",
        "API responses and error codes",
        "Debugging logs",
        "Error codes"
      ],
      "title": "Use the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "f30a9a37241be1a13263e2bc8892f411d6fa618b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/use-plugin-api/",
      "published_at": "2021-05-22T02:51:53Z",
      "updated_at": "2021-03-13T03:44:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Before you begin Using a development language other than Ruby, .NET, or Java for a plugin agent means you do not have an SDK to work with, but you do have some benefits. This is a guide for plugin developers to get started with writing an agent in any language that can work directly with the Plugin API for Plugin Central. You can use any language you want, as long as it supports sending JSON through HTTP POST. This allows for better integration with your systems. For the same reason, it is the best option for SaaS-based plugin agents. However, if you are not using the Plugins SDK for Java. .NET, or Ruby, you have some additional setup and planning to do in developing a plugin agent. This includes: Error tracking on POST calls A method for tracking and aggregating data when a POST fails Your own support plans if a New Relic SDK for your language or development tools is not available Any publicly available plugins in the Plugin Central should come bundled with their source code if the executable code is not plain text. This allows you to both try out plugins and to review the code. Recommendation: Before authoring a plugin, install some existing plugins using the Java SDK, .NET SDK, or Ruby SDK to see how they are written. Metric data POST Metric data is sent as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The MIME-type for the POST is application/json. The Plugins feature is designed to receive a continuous stream of metrics at a certain maximum speed, and to present this information on useful charts. The recommended frequency for sending data to Plugins is to send 60 seconds worth of data once a minute. Agents sending data more frequently than twice a minute on average may be subject to enforced limits on the number of metrics being saved. The following are recommended soft limits. Requests smaller than this will work; requests larger than this are subject to rejection or automatic data aggregation. As a hard cap, the total size of the POST payload should be no larger than 1MB (10^6 bytes). If the metric is \"expensive\" to calculate and does not change quickly, consider writing your plugin agent so that it skips some polling cycles to retrieve data and then sends the last value. This produces better results for your plugin users' dashboards. Type Limit Description Components 500 Number of distinct components currently tracked. Please note this is a per POST limit only. More than 500 components are able to report to an account simultaneously. Metrics per component 10,000 Total number of unique metrics per component. Take precautions to ensure metric names are not generated too dynamically. Even if the number of metrics being sent in each individual post is small, over time they may add up to a large number of unique metrics. When the number of metrics for a given component exceeds this limit, the server may start aggregating metrics together by globbing segments of the metric name with an asterisk (*). Metrics per post 20,000 Number of metrics sent per post. A post may send data for multiple components in a single request as long as the total number of metrics in the request does not exceed this limit. Frequency of post 2 per minute Frequency of update. Agents are expected to send data no more frequently than 1 per minute. Data aggregation The SDKs manage data aggregation in the event of a failed POST. If you are not using an SDK, you need to manage this yourself. Include all five metric values in a POST: min, max, total, count, and sum or squares. (Exception: This may not be necessary for monotonic metrics where short term variation is not an issue.) Recompute these values for the accumulating metric data as required by what is being measured, incrementing the duration accordingly, until a successful POST is sent. Compression Data can be sent in the following encoding formats: identity deflate gzip If data is sent compressed, make sure the Content-Encoding header specifies the type of encoding. Examples Here are some examples for developing plugins. Example JSON This is an example of the JSON that would be used to POST data to Plugins. The JSON data is a hash with two required keys at the top level: agent: A hash describing the agent that is reporting metrics data to Plugins. A POST can contain information for only one agent. Host and version are required. components: An array of components, each consisting of a hash of attributes for the individual component. Multiple components can be sent with a single. Each component has its own name, GUID, duration, and metrics. { \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] } Copy Pseudo-code template This is a pseudo-code example that works with the Plugin API. It can be used as a template for developing plugin agents. Initialization: // globals string platform_api_uri = \"https://platform-api.newrelic.com/platform/v1/metrics\" int poll_cycle = 60 // time in seconds string version = \"1.0.0\" // major_version.minor_version.patch_level string agent_host = get_host_name_where_this_process_is_running() string agent_pid = get_process_id_of_this_process() time last_poll_time // initialize if necessary initialize once create agent_hash with: agent_host agent_pid version for each newrelic_account do // just handling one account? then \"for each\" is unnecessary complexity for each monitored_component do create component_hash with: string guid = \"com.your_company.component_name_in_snake_case\" string name =\"Human Readable Component Name\" int duration = 0 // this will get updated each poll_cycle hash metrics_hash // this will be updated by populate_component_metrics_hash() end end end Copy Loop: every poll_cycle seconds do for each newrelic_account do // just handling one account? then \"for each\" is unnecessary complexity clear hash_to_send add agent_hash to hash_to_send for each component do populate_component_metrics_hash() this component.metrics_hash(\"duration\") = time.now() - last_poll_time in seconds add component.metrics_hash to hash_to_send end json_to_send = serialize_to_json(hash_to_send) connection = open http_connection(platform_api_uri) add header(\"X-License-Key\",this newrelic_account.license_key) to connection add header(\"Content-Type\",\"application/json\") to connection add header(\"Accept\",\"application/json\") to connection set http_verb to \"POST\" for connection response = send(json_to_send) to connection case response.code when response_code = 200 clear component.metrics_hash last_poll_time = time.now() when response_code = 400 // your request was malformed // consider reporting a \"supportability\" metric which counts the number of 400 responses you get // for example \"Component/Supportability/http_error_codes/400\" // you can use this on a \"Supportability\" Dashboard that helps diagnose your agent when response_code = 403 // forbidden probably due to a bad license key // log error and shutdown the agent when response_code = 404 // invalid URL // you should never get this error for https://platform-api.newrelic.com/platform/v1/metrics when response_code = 405 // invalid method // HTTP verb should be \"POST\" when response_code = 413 // POST body too large // try splitting at component boundaries // split along metric name spaces // fail gracefully - consider reporting a supportability metric (see 400) when response_code = 500 // error on New Relic's collector // could be due to malformed data or system trouble // fail gracefully - consider reporting a supportability metric (see 400) when response_code = 503 or 504 // New Relic collector busy //- this happens by design from time-to-time // keep collecting metrics // do NOT reset last_poll_time // log error if the problem persists for several minutes end case end end Copy Metric population: function populate_component_metrics_hash() // collect metrics from monitored component at any interval // if this is the first time collecting metrics, set last_poll_time to // time.now - metric duration, the time duration for which these metrics // were collected // // if you collect 2 or more metrics from the monitored component before data // is reported to Plugins either because your metric collection interval is // faster than poll_cycle or because your agent was unable to report metrics to // Plugins (for example a 503 http response), aggregate your data by storing: // total_value, max, min, count, sum_of_squares for each metric // // if the interval is longer than poll_cycle, retain the metrics and // report them each poll_cycle until they are updated end Copy API responses and error codes Depending on whether you are using the Plugin API or an agent SDK for plugins, the HTTP responses and logging techniques may be different. For example, responses for the Plugin API are uncompressed JSON. Successful posts return this JSON: {\"status\":\"ok\"} Copy The API does not support Accept-Encoding. Debugging logs To debug information, use either of these options: public static Logger getLogger(); Copy OR public static void Logger setLogger(Logger logger) { LOGGER = logger; } Copy Error codes If an error occurs, an appropriate status code is returned. The JSON returned is the hash key error with a detailed description of the error that occurred. For example: {\"error\":\"Failed to create agent with parameters=[...]\"} {\"error\":\"Missing metric data\"} {\"error\":\"Unable to parse body: Unexpected token RIGHT BRACE(}) at position 228.\"} Copy Code Name Description 400 Bad request The request or headers are in the wrong format, or the URL is incorrect, or the GUID does not meet the validation requirements. 403 Unauthorized Authentication error (no license key header, or invalid license key). 404 Not found Invalid URL. 405 Method not allowed Returned if the method is an invalid or unexpected type (GET/POST/PUT/etc.). 413 Request entity too large Too many metrics were sent in one request, or too many components (instances) were specified in one request, or other single-request limits were reached. 500 Internal server error Unexpected server error. 502 Bad gateway All 50X errors mean there is a transient problem in the server completing requests, and no data has been retained. Clients are expected to resend the data after waiting one minute. The data should be aggregated appropriately, combining multiple timeslice data values for the same metric into a single aggregate timeslice data value. 503 Service unavailable See 502 description. 504 Gateway timeout See 502 description.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 226.51062,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "604436cf28ccbcf2332c60a8"
    }
  ],
  "/docs/plugins/plugin-developer-resources/developer-reference/plugin-data": [
    {
      "sections": [
        "Metric data for the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "URI",
        "GUID",
        "Time periods for metrics",
        "Metric data details",
        "Timeslice metric values",
        "Calculations",
        "Examples",
        "Metrics",
        "cURL example",
        "Metric references",
        "Metric naming guidelines",
        "Metric segments",
        "Caution",
        "Metric attributes",
        "Metric values",
        "Units"
      ],
      "title": "Metric data for the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "2e9d0553b7277c73fe8a2147519d9943fca440fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/metric-data-plugin-api/",
      "published_at": "2021-05-22T02:50:49Z",
      "updated_at": "2021-03-16T11:20:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. URI Metric timeslice data is sent with the Plugin API as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The Plugin API does not support New Relic's REST API, and vice versa. However, you can use the REST API (v2) to extract plugin data. For a list with links to procedures and examples, see Plugin examples (v2). GUID The plugin needs a Globally Unique Identifier (GUID), which is a character string limited to no less than 4 and no more than 255 characters. The GUID for a published plugin must be unique for each plugin. When creating a plugin, you are responsible for managing your own GUIDs to avoid naming conflicts. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metric(s). Thus, you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show any time period you want; for example, 30 minutes, 30 days, etc. You can also deliver data at 1-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, data will aggregate when there is too much, but data will not be extrapolated if there is not enough data. In order for data to appear on a 30 minute chart, make sure at least one data point is within the range, or no data will appear. Use a 60-second polling interval, because the default dashboard shows 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Metric data details The JSON data is a hash with two required keys at the top level: components: An array of components, each consisting of a hash of attributes for the individual component, including the metric data. agent: A hash describing the agent that is reporting metrics data to New Relic Plugins on behalf of the component(s). Of these values, only host and version are required. When graphing metrics, be aware that null = zero. Metric data POST Description Component data One of two required keys at the top level. This is an array of hashes describing the components that report metrics in this request. Each hash contains the following values: name A name ( < =32 characters) that uniquely identifies the monitored entity and appears as the display name for this agent. Note: Metric names are case sensitive. guid A \"reverse domain name\" styled identifier; for example, com.newrelic.mysql. This is a unique identity defined in the plugin's user interface, which ties the agent data to the corresponding plugin user interface in New Relic. duration The duration in seconds over which the metric data was collected. The end time is implied as the time the data is received by the API. metrics Timeslice data for each metric being reported. The hash keys are metric names, and the values are the timeslice data value for the named metric. Agent data One of two required keys at the top level. A hash specifying information about the agent that is reporting data on behalf of the components. host (required) The hostname of the agent monitoring the specified components. This is the hostname where the monitoring agent is running, not the hostname of the component being monitored. pid (optional) The process identifier of the agent monitoring the specified components. This is the process identifier of the monitoring agent itself, not a process identifier that may be associated with the monitored components. version (required) The version of the agent monitoring the specified components, using the format A.B.C where A, B, and C are integers. The version number must conform to the rules specified in standard Semantic Versioning scheme v2.0.0. Timeslice metric values Metrics are sent inside the component hash with the key metrics and a hash as a value. The hash keys are metric names, and the values are the timeslice data values for the named metric. The timeslice hash value uses one of three formats: Timeslice hash value Description A single scalar value with a floating point number or integer This is the simplest format, and this number is required. The reported value is used as the total, minimum, and maximum data value. The count value is assumed to be 1. The Plugin API does not support reporting of arbitrary string metrics, only scalar values that are aggregated. Array of five required values in specific order An array of five required integers or floating point numbers that represent, in order: Total value over the time period Count of the number of events this value represents over the time period; the average is calculated by dividing total by count Minimum value over the time period Maximum value over the time period Sum of squares for the samples over the time period Hash with five required key/value pairs in any order A hash with value names as the keys, and integers or floating point values as the values. All five key/value pairs are required. The keys of the hash are the type of timeslice data, and the value is the data value. These has key/value pairs can be in any order: total: Total value over the time period count: Count of the number of events this value represents over the time period; the average is calculated by dividing total by count min: Minimum value over the time period max: Maximum value over the time period sum_of_squares: Sum of squares for the samples over the time period Calculations Limited mathematical calculations are available with the key/value pairs, such as computing total, count, minimum, maximum, averages, and standard deviations. However, to do more extensive calculations, you need to do the math in the agent, and then send the results as a new metric. For example, send Metric1, Metric2, and Metric3 (which equals Metric1 divided by Metric2). If you submit negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Examples Here are some examples. Metrics \"metrics\" : { \"Component/Database/Primary[Queries/Second]\" : { \"total\" : 25, \"count\" : 2, \"min\" : 10, \"max\" : 15, \"sum_of_squares\" : 325 }, \"Component/Database/Secondary[Queries/Second]\" : [25, 2, 10, 15, 325], \"Component/Database/Backup[Queries/Second]\" : 10 } Copy cURL example curl -vi https://platform-api.newrelic.com/platform/v1/metrics \\ -H \"X-License-Key: YOUR_LICENSE_KEY_HERE\" \\ -H \"Content-Type: application/json\" \\ -H \"Accept: application/json\" \\ -X POST -d '{ \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] }' Copy Metric references Refer to these references as you develop your own plugins. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order for the metric to be rendered usefully in the user interface, the metric name must contain a prefix, category name, label, and optional units indicator. Here are some recommended guidelines for the text in metric names to make them more readable in the user interface. Metric naming guidelines Guidelines UI display Use case and whitespace characters appropriate for display in the user interface, because segments are rendered as-is in the UI. Category and label segments Metric names are case sensitive. Capitalize the first word in the category and label segments. Keep category and label segments as short as possible. Length There is a limit of 255 characters for metric names. Characters to avoid using Avoid using the following characters in names. These characters have special meaning and should not be used except where specifically required for their purpose. / ] [ | * Also avoid multi-byte characters. Units Use abbreviated names for units when possible. Metric segments Each of these segments is divided by the forward slash / character. Each segment is interpreted for a specific purpose in the UI and roughly follows this pattern: prefix/category/label[units] Copy For example, the metric representing the latency of cache hits reported by a plugin collecting data for a cache appliance might look like this: Component/Cache/Hits[sec|hit] Copy Metric segment order Notes Prefix: Component/ or Custom/ The first segment of a custom metric is Component/ (if it comes from a plugin agent) or Custom/ (if it is a custom metric collected by a New Relic agent. For example, Custom/MyMetric). Caution If you use the Plugin API only, and if the metrics do not start with Component/, they may not be available or may not appear correctly in charts and dashboards. Category name The second part of a custom metric is a category name, used to group metrics into different categories. For example, the metrics reported by a database plugin may fall into categories such as schema, tables, or connections. Label The third part of the metric name is used for labeling the data when it appears in tables and charts. If it contains multiple segments, each slash separating the segments of the label will be rendered as part of the label. Units The fourth segment of the metric consists of a units specification. Metric attributes Most metrics are defined statically and represent some global state; for example, cache size. Other metrics are dynamic and include some contextual attribute like the name of a host or a file. These metrics need to be structured so you can easily show them as a group in a table stacked in a chart. To add attribute names to a metric, put them in trailing segments separated by a forward slash / character. For example: Component/Disk/Bytes In/dev001 Component/Network/External services/ae592c3.aws.com Copy You can specify more than one attribute as long as they occupy the same position for a given metric category and label: Component/Tables/Row count/DB001/BLOG_POSTS[rows] Copy Caution Avoid overloading the metric space by putting in segment values that have a large range of values. While something like a customer's region in an attribute is a reasonable thing to track in the metric, the customer name would not be if you have more than a few hundred customers. If your agent starts sending an excessive amount of metrics, your metrics may be automatically collapsed into groups with wildcards: Component/Users/*[visits] Copy Metric values You can report a metric value in one of two ways: Single value: This typically is the value being reported for that time slice. If you use an SDK, you report the single value to the SDK. It handles tracking the rest of these values. Set of aggregate value: This includes the min, max, and sum of squares values for the value being reported. If you use the Plugin API, the preferred method is to report all of the values. When aggregating a series of timeslice data into a single timeslice data entry for a given period, all fields are summed except for the min and max value. If you are using an SDK plugins, this is done automatically. If you are using the Plugin API to develop plugins, you need to code for this. A metric value contains several fields, but it is represented primarily by the count and value. The count is a 32-bit integer field, and the value is a 32-bit float. Metric values can represent more than one data point or sample as an aggregation of measures. Typically the count is the number of samples, and the value is the total value of all samples. Here are the fields in a metric value: Metric value Description count The number of things being measured. If data is collected at the time the event occurs, like with some kind of injection, then the count in the timeslice data will be 1. Required if it is not 1 (0 generally represents an absent value). value Required: The total value measured across all things being counted. When averages are calculated later, we divide the value by the count. In some cases, the value field is irrelevant. min, max The minimum and maximum values when the count is greater than 1. When the count is 1, these are the same as the value. Optional depending on whether they are available or relevant for a given metric. sum of squares This is the sum of squares of each value and is useful when the values follow a standard distribution. You can only capture this value when you are collecting data each time the event happens. You store the value of the event in the value field and the square of the value in the sum of squares. This is used to calculate a standard deviation later on. The sum of squares is optional. It is used to calculate a standard deviation for a selection of data. If standard deviation for the value is not meaningful, such as when the values are not part of a normal distribution, then the sum of squares is omitted. Units When a metric value is collected by periodically sampling an interface, the count units are implicitly samples, and the value units are whatever is being sampled. For data it might be bytes. For throughput it might be something like kilobytes/second. For utilization (like CPU) it might be percent. When the count units are samples, they can be omitted in the metric name. Units of time, bytes, and bits may get special treatment, allowing additional conversion in the user interface between magnitudes. For example, if you specify a metric with units of kilobytes, then in the UI you may be presented the option of displaying a chart of Mb. Metrics units describe what the value field and count represent. Units are specified inside brackets and consist of units for the value, followed by a pipe (|) and then the units for the count. For example: Component/metric_id[value_unit|count_unit] Copy Exception: The pipe and count units (|[count_unit]) are not required after the value unit for samples. Rate metrics are commonly defined as sample per interval. This is defined as units/interval in the metric, with a forward slash to separate units from interval. For example: Component/metric_id[value_unit/interval] Copy In rare cases there will only be a unit value for count. The value will be interpreted as unitless. Value units are omitted, and the vertical bar appears in front of the count units. For example: Component/metric_id[|count_unit] Copy Units for plugin metrics Notes Naming conventions You can have mixed-case unit names. They.can consist strictly of alphabetical characters as well as the _, %, or / symbols. Case is preserved. Punctuation markers, dashes, spaces and any other symbols are not allowed. Recommendation: Use uncapitalized words, spelled out in full. For example, use second not sec. Rate metrics When a metric value represents a rate, such as bytes/second, then the value is assumed to be a sample for the given interval. The units specifier looks like [ bytes/second] since the count units are implicitly samples. For example: Component/metric_id[bytes/second] Copy The count units are samples (default) and the value units are bytes/second. The forward slash separates the units from the interval. Count with units A common case for declaring units is when measuring response times. If the custom metric represents the average latency of a call to a cache, then the units for the metric value are seconds per call. For example: Component/metric_id[seconds|call] Copy Count units are calls and value units are seconds. The default count metric is not being used, so you need to specify it. The bar separates the value units from the count units. Units in charts The units specified in a metric have several implications for the way the values are interpreted by generic charts and tables: Units display in labels and tooltips in charts to indicate what the values represent. Units imply a set of different values available from a single metric value. When creating a chart in a dashboard, the dashboard author selects one of the available value methods for that metric to plot in the chart.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71738,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Metric data for the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "&quot; : 2, &quot;max&quot; : 10, &quot;total&quot;: 12, &quot;count&quot; : 2, &quot;sum_of_squares&quot; : 104 } } } ] }&#x27; Copy Metric references <em>Refer</em> to these references as you <em>develop</em> your own <em>plugins</em>. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order"
      },
      "id": "603e80db64441f0def4e8863"
    },
    {
      "sections": [
        "Plan plugin metrics",
        "Important",
        "Limited access to legacy plugins",
        "Collect plugin metrics",
        "Present plugin metrics"
      ],
      "title": "Plan plugin metrics",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "08974b731c810af2b6b037e8b761834c6e1ce7a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plan-plugin-metrics/",
      "published_at": "2021-05-22T02:51:52Z",
      "updated_at": "2021-03-16T11:01:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Collect plugin metrics If you are running one of our APM agents to receive information about your applications, you can also receive arbitrary custom metrics. Using custom dashboards with your plugins, you can visualize custom metrics in a variety of useful ways. You can write plugins agents that can be run anywhere to collect metrics from any available system and report them to New Relic for dashboard display. Plugins also allow for summary metrics and one or more dashboards to visualize metrics that can be shared with every user of the plugin. This allows you to create a consistent user interface for the metrics you collect. The data that plugins report is in the form of a key/value pair. Values are numerical, either integers or floating point non-negative numbers. Negative numbers can be included in your summary metrics and tables; however, visualization in charts is limited to numbers greater than or equal to zero. Keys are strings which include the concept of name spaces and units. While values cannot be strings, parts of your metric name (the key) can be displayed in plugin dashboards. Your plugin agent can run anywhere with internet access to Plugins. You can write an agent using the agent SDKs. You can also write your agent to connect via HTTP POST using the API for Plugins in any language with HTTP support. Using the Plugin API might be the most appropriate solution when one agent is reporting metrics for more than one New Relic account. This is common for service providers to report specialized metrics for each of their customers using Plugins. This can be done with a small number of agents monitoring a large number of users. Present plugin metrics When creating a plugin agent, good metric name planning is critical to your success. Poorly chosen metrics names can make it difficult or impossible to display the information you intend. Plan ahead for how you want to visualize your information and to record metrics in a way that will facilitate this. You may even want to record the same metrics with more than one name in order to visualize different aspects of your data. Plugin dashboards do not have the ability to do mathematical calculations, so make sure your plugin agent handles any necessary calculations (sum, average, total, count, etc.) before recording metrics. Once you have collected metrics with your plugin agent, you will need to create dashboards to visualize the information in your metrics. All plugins will have a default dashboard. You can add as many dashboards as necessary to visualize your metric data (maximum 15). In addition to dashboards, you can choose up to five metrics to represent the summary of each instance. Summary metrics convey the health status of each instance and are used to trigger Caution events and Critical alerts for your plugins. The summary metrics appear on your plugin's Summary page.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71242,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Plan <em>plugin</em> metrics",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603eb01228ccbc6fa6eba790"
    },
    {
      "sections": [
        "Use the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "Before you begin",
        "Metric data POST",
        "Data aggregation",
        "Compression",
        "Examples",
        "Example JSON",
        "Pseudo-code template",
        "API responses and error codes",
        "Debugging logs",
        "Error codes"
      ],
      "title": "Use the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "f30a9a37241be1a13263e2bc8892f411d6fa618b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/use-plugin-api/",
      "published_at": "2021-05-22T02:51:53Z",
      "updated_at": "2021-03-13T03:44:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Before you begin Using a development language other than Ruby, .NET, or Java for a plugin agent means you do not have an SDK to work with, but you do have some benefits. This is a guide for plugin developers to get started with writing an agent in any language that can work directly with the Plugin API for Plugin Central. You can use any language you want, as long as it supports sending JSON through HTTP POST. This allows for better integration with your systems. For the same reason, it is the best option for SaaS-based plugin agents. However, if you are not using the Plugins SDK for Java. .NET, or Ruby, you have some additional setup and planning to do in developing a plugin agent. This includes: Error tracking on POST calls A method for tracking and aggregating data when a POST fails Your own support plans if a New Relic SDK for your language or development tools is not available Any publicly available plugins in the Plugin Central should come bundled with their source code if the executable code is not plain text. This allows you to both try out plugins and to review the code. Recommendation: Before authoring a plugin, install some existing plugins using the Java SDK, .NET SDK, or Ruby SDK to see how they are written. Metric data POST Metric data is sent as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The MIME-type for the POST is application/json. The Plugins feature is designed to receive a continuous stream of metrics at a certain maximum speed, and to present this information on useful charts. The recommended frequency for sending data to Plugins is to send 60 seconds worth of data once a minute. Agents sending data more frequently than twice a minute on average may be subject to enforced limits on the number of metrics being saved. The following are recommended soft limits. Requests smaller than this will work; requests larger than this are subject to rejection or automatic data aggregation. As a hard cap, the total size of the POST payload should be no larger than 1MB (10^6 bytes). If the metric is \"expensive\" to calculate and does not change quickly, consider writing your plugin agent so that it skips some polling cycles to retrieve data and then sends the last value. This produces better results for your plugin users' dashboards. Type Limit Description Components 500 Number of distinct components currently tracked. Please note this is a per POST limit only. More than 500 components are able to report to an account simultaneously. Metrics per component 10,000 Total number of unique metrics per component. Take precautions to ensure metric names are not generated too dynamically. Even if the number of metrics being sent in each individual post is small, over time they may add up to a large number of unique metrics. When the number of metrics for a given component exceeds this limit, the server may start aggregating metrics together by globbing segments of the metric name with an asterisk (*). Metrics per post 20,000 Number of metrics sent per post. A post may send data for multiple components in a single request as long as the total number of metrics in the request does not exceed this limit. Frequency of post 2 per minute Frequency of update. Agents are expected to send data no more frequently than 1 per minute. Data aggregation The SDKs manage data aggregation in the event of a failed POST. If you are not using an SDK, you need to manage this yourself. Include all five metric values in a POST: min, max, total, count, and sum or squares. (Exception: This may not be necessary for monotonic metrics where short term variation is not an issue.) Recompute these values for the accumulating metric data as required by what is being measured, incrementing the duration accordingly, until a successful POST is sent. Compression Data can be sent in the following encoding formats: identity deflate gzip If data is sent compressed, make sure the Content-Encoding header specifies the type of encoding. Examples Here are some examples for developing plugins. Example JSON This is an example of the JSON that would be used to POST data to Plugins. The JSON data is a hash with two required keys at the top level: agent: A hash describing the agent that is reporting metrics data to Plugins. A POST can contain information for only one agent. Host and version are required. components: An array of components, each consisting of a hash of attributes for the individual component. Multiple components can be sent with a single. Each component has its own name, GUID, duration, and metrics. { \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] } Copy Pseudo-code template This is a pseudo-code example that works with the Plugin API. It can be used as a template for developing plugin agents. Initialization: // globals string platform_api_uri = \"https://platform-api.newrelic.com/platform/v1/metrics\" int poll_cycle = 60 // time in seconds string version = \"1.0.0\" // major_version.minor_version.patch_level string agent_host = get_host_name_where_this_process_is_running() string agent_pid = get_process_id_of_this_process() time last_poll_time // initialize if necessary initialize once create agent_hash with: agent_host agent_pid version for each newrelic_account do // just handling one account? then \"for each\" is unnecessary complexity for each monitored_component do create component_hash with: string guid = \"com.your_company.component_name_in_snake_case\" string name =\"Human Readable Component Name\" int duration = 0 // this will get updated each poll_cycle hash metrics_hash // this will be updated by populate_component_metrics_hash() end end end Copy Loop: every poll_cycle seconds do for each newrelic_account do // just handling one account? then \"for each\" is unnecessary complexity clear hash_to_send add agent_hash to hash_to_send for each component do populate_component_metrics_hash() this component.metrics_hash(\"duration\") = time.now() - last_poll_time in seconds add component.metrics_hash to hash_to_send end json_to_send = serialize_to_json(hash_to_send) connection = open http_connection(platform_api_uri) add header(\"X-License-Key\",this newrelic_account.license_key) to connection add header(\"Content-Type\",\"application/json\") to connection add header(\"Accept\",\"application/json\") to connection set http_verb to \"POST\" for connection response = send(json_to_send) to connection case response.code when response_code = 200 clear component.metrics_hash last_poll_time = time.now() when response_code = 400 // your request was malformed // consider reporting a \"supportability\" metric which counts the number of 400 responses you get // for example \"Component/Supportability/http_error_codes/400\" // you can use this on a \"Supportability\" Dashboard that helps diagnose your agent when response_code = 403 // forbidden probably due to a bad license key // log error and shutdown the agent when response_code = 404 // invalid URL // you should never get this error for https://platform-api.newrelic.com/platform/v1/metrics when response_code = 405 // invalid method // HTTP verb should be \"POST\" when response_code = 413 // POST body too large // try splitting at component boundaries // split along metric name spaces // fail gracefully - consider reporting a supportability metric (see 400) when response_code = 500 // error on New Relic's collector // could be due to malformed data or system trouble // fail gracefully - consider reporting a supportability metric (see 400) when response_code = 503 or 504 // New Relic collector busy //- this happens by design from time-to-time // keep collecting metrics // do NOT reset last_poll_time // log error if the problem persists for several minutes end case end end Copy Metric population: function populate_component_metrics_hash() // collect metrics from monitored component at any interval // if this is the first time collecting metrics, set last_poll_time to // time.now - metric duration, the time duration for which these metrics // were collected // // if you collect 2 or more metrics from the monitored component before data // is reported to Plugins either because your metric collection interval is // faster than poll_cycle or because your agent was unable to report metrics to // Plugins (for example a 503 http response), aggregate your data by storing: // total_value, max, min, count, sum_of_squares for each metric // // if the interval is longer than poll_cycle, retain the metrics and // report them each poll_cycle until they are updated end Copy API responses and error codes Depending on whether you are using the Plugin API or an agent SDK for plugins, the HTTP responses and logging techniques may be different. For example, responses for the Plugin API are uncompressed JSON. Successful posts return this JSON: {\"status\":\"ok\"} Copy The API does not support Accept-Encoding. Debugging logs To debug information, use either of these options: public static Logger getLogger(); Copy OR public static void Logger setLogger(Logger logger) { LOGGER = logger; } Copy Error codes If an error occurs, an appropriate status code is returned. The JSON returned is the hash key error with a detailed description of the error that occurred. For example: {\"error\":\"Failed to create agent with parameters=[...]\"} {\"error\":\"Missing metric data\"} {\"error\":\"Unable to parse body: Unexpected token RIGHT BRACE(}) at position 228.\"} Copy Code Name Description 400 Bad request The request or headers are in the wrong format, or the URL is incorrect, or the GUID does not meet the validation requirements. 403 Unauthorized Authentication error (no license key header, or invalid license key). 404 Not found Invalid URL. 405 Method not allowed Returned if the method is an invalid or unexpected type (GET/POST/PUT/etc.). 413 Request entity too large Too many metrics were sent in one request, or too many components (instances) were specified in one request, or other single-request limits were reached. 500 Internal server error Unexpected server error. 502 Bad gateway All 50X errors mean there is a transient problem in the server completing requests, and no data has been retained. Clients are expected to resend the data after waiting one minute. The data should be aggregated appropriately, combining multiple timeslice data values for the same metric into a single aggregate timeslice data value. 503 Service unavailable See 502 description. 504 Gateway timeout See 502 description.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 226.51062,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "604436cf28ccbcf2332c60a8"
    }
  ],
  "/docs/plugins/plugin-developer-resources/developer-reference/use-plugin-api": [
    {
      "sections": [
        "Metric data for the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "URI",
        "GUID",
        "Time periods for metrics",
        "Metric data details",
        "Timeslice metric values",
        "Calculations",
        "Examples",
        "Metrics",
        "cURL example",
        "Metric references",
        "Metric naming guidelines",
        "Metric segments",
        "Caution",
        "Metric attributes",
        "Metric values",
        "Units"
      ],
      "title": "Metric data for the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "2e9d0553b7277c73fe8a2147519d9943fca440fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/metric-data-plugin-api/",
      "published_at": "2021-05-22T02:50:49Z",
      "updated_at": "2021-03-16T11:20:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. URI Metric timeslice data is sent with the Plugin API as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The Plugin API does not support New Relic's REST API, and vice versa. However, you can use the REST API (v2) to extract plugin data. For a list with links to procedures and examples, see Plugin examples (v2). GUID The plugin needs a Globally Unique Identifier (GUID), which is a character string limited to no less than 4 and no more than 255 characters. The GUID for a published plugin must be unique for each plugin. When creating a plugin, you are responsible for managing your own GUIDs to avoid naming conflicts. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metric(s). Thus, you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show any time period you want; for example, 30 minutes, 30 days, etc. You can also deliver data at 1-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, data will aggregate when there is too much, but data will not be extrapolated if there is not enough data. In order for data to appear on a 30 minute chart, make sure at least one data point is within the range, or no data will appear. Use a 60-second polling interval, because the default dashboard shows 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Metric data details The JSON data is a hash with two required keys at the top level: components: An array of components, each consisting of a hash of attributes for the individual component, including the metric data. agent: A hash describing the agent that is reporting metrics data to New Relic Plugins on behalf of the component(s). Of these values, only host and version are required. When graphing metrics, be aware that null = zero. Metric data POST Description Component data One of two required keys at the top level. This is an array of hashes describing the components that report metrics in this request. Each hash contains the following values: name A name ( < =32 characters) that uniquely identifies the monitored entity and appears as the display name for this agent. Note: Metric names are case sensitive. guid A \"reverse domain name\" styled identifier; for example, com.newrelic.mysql. This is a unique identity defined in the plugin's user interface, which ties the agent data to the corresponding plugin user interface in New Relic. duration The duration in seconds over which the metric data was collected. The end time is implied as the time the data is received by the API. metrics Timeslice data for each metric being reported. The hash keys are metric names, and the values are the timeslice data value for the named metric. Agent data One of two required keys at the top level. A hash specifying information about the agent that is reporting data on behalf of the components. host (required) The hostname of the agent monitoring the specified components. This is the hostname where the monitoring agent is running, not the hostname of the component being monitored. pid (optional) The process identifier of the agent monitoring the specified components. This is the process identifier of the monitoring agent itself, not a process identifier that may be associated with the monitored components. version (required) The version of the agent monitoring the specified components, using the format A.B.C where A, B, and C are integers. The version number must conform to the rules specified in standard Semantic Versioning scheme v2.0.0. Timeslice metric values Metrics are sent inside the component hash with the key metrics and a hash as a value. The hash keys are metric names, and the values are the timeslice data values for the named metric. The timeslice hash value uses one of three formats: Timeslice hash value Description A single scalar value with a floating point number or integer This is the simplest format, and this number is required. The reported value is used as the total, minimum, and maximum data value. The count value is assumed to be 1. The Plugin API does not support reporting of arbitrary string metrics, only scalar values that are aggregated. Array of five required values in specific order An array of five required integers or floating point numbers that represent, in order: Total value over the time period Count of the number of events this value represents over the time period; the average is calculated by dividing total by count Minimum value over the time period Maximum value over the time period Sum of squares for the samples over the time period Hash with five required key/value pairs in any order A hash with value names as the keys, and integers or floating point values as the values. All five key/value pairs are required. The keys of the hash are the type of timeslice data, and the value is the data value. These has key/value pairs can be in any order: total: Total value over the time period count: Count of the number of events this value represents over the time period; the average is calculated by dividing total by count min: Minimum value over the time period max: Maximum value over the time period sum_of_squares: Sum of squares for the samples over the time period Calculations Limited mathematical calculations are available with the key/value pairs, such as computing total, count, minimum, maximum, averages, and standard deviations. However, to do more extensive calculations, you need to do the math in the agent, and then send the results as a new metric. For example, send Metric1, Metric2, and Metric3 (which equals Metric1 divided by Metric2). If you submit negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Examples Here are some examples. Metrics \"metrics\" : { \"Component/Database/Primary[Queries/Second]\" : { \"total\" : 25, \"count\" : 2, \"min\" : 10, \"max\" : 15, \"sum_of_squares\" : 325 }, \"Component/Database/Secondary[Queries/Second]\" : [25, 2, 10, 15, 325], \"Component/Database/Backup[Queries/Second]\" : 10 } Copy cURL example curl -vi https://platform-api.newrelic.com/platform/v1/metrics \\ -H \"X-License-Key: YOUR_LICENSE_KEY_HERE\" \\ -H \"Content-Type: application/json\" \\ -H \"Accept: application/json\" \\ -X POST -d '{ \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] }' Copy Metric references Refer to these references as you develop your own plugins. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order for the metric to be rendered usefully in the user interface, the metric name must contain a prefix, category name, label, and optional units indicator. Here are some recommended guidelines for the text in metric names to make them more readable in the user interface. Metric naming guidelines Guidelines UI display Use case and whitespace characters appropriate for display in the user interface, because segments are rendered as-is in the UI. Category and label segments Metric names are case sensitive. Capitalize the first word in the category and label segments. Keep category and label segments as short as possible. Length There is a limit of 255 characters for metric names. Characters to avoid using Avoid using the following characters in names. These characters have special meaning and should not be used except where specifically required for their purpose. / ] [ | * Also avoid multi-byte characters. Units Use abbreviated names for units when possible. Metric segments Each of these segments is divided by the forward slash / character. Each segment is interpreted for a specific purpose in the UI and roughly follows this pattern: prefix/category/label[units] Copy For example, the metric representing the latency of cache hits reported by a plugin collecting data for a cache appliance might look like this: Component/Cache/Hits[sec|hit] Copy Metric segment order Notes Prefix: Component/ or Custom/ The first segment of a custom metric is Component/ (if it comes from a plugin agent) or Custom/ (if it is a custom metric collected by a New Relic agent. For example, Custom/MyMetric). Caution If you use the Plugin API only, and if the metrics do not start with Component/, they may not be available or may not appear correctly in charts and dashboards. Category name The second part of a custom metric is a category name, used to group metrics into different categories. For example, the metrics reported by a database plugin may fall into categories such as schema, tables, or connections. Label The third part of the metric name is used for labeling the data when it appears in tables and charts. If it contains multiple segments, each slash separating the segments of the label will be rendered as part of the label. Units The fourth segment of the metric consists of a units specification. Metric attributes Most metrics are defined statically and represent some global state; for example, cache size. Other metrics are dynamic and include some contextual attribute like the name of a host or a file. These metrics need to be structured so you can easily show them as a group in a table stacked in a chart. To add attribute names to a metric, put them in trailing segments separated by a forward slash / character. For example: Component/Disk/Bytes In/dev001 Component/Network/External services/ae592c3.aws.com Copy You can specify more than one attribute as long as they occupy the same position for a given metric category and label: Component/Tables/Row count/DB001/BLOG_POSTS[rows] Copy Caution Avoid overloading the metric space by putting in segment values that have a large range of values. While something like a customer's region in an attribute is a reasonable thing to track in the metric, the customer name would not be if you have more than a few hundred customers. If your agent starts sending an excessive amount of metrics, your metrics may be automatically collapsed into groups with wildcards: Component/Users/*[visits] Copy Metric values You can report a metric value in one of two ways: Single value: This typically is the value being reported for that time slice. If you use an SDK, you report the single value to the SDK. It handles tracking the rest of these values. Set of aggregate value: This includes the min, max, and sum of squares values for the value being reported. If you use the Plugin API, the preferred method is to report all of the values. When aggregating a series of timeslice data into a single timeslice data entry for a given period, all fields are summed except for the min and max value. If you are using an SDK plugins, this is done automatically. If you are using the Plugin API to develop plugins, you need to code for this. A metric value contains several fields, but it is represented primarily by the count and value. The count is a 32-bit integer field, and the value is a 32-bit float. Metric values can represent more than one data point or sample as an aggregation of measures. Typically the count is the number of samples, and the value is the total value of all samples. Here are the fields in a metric value: Metric value Description count The number of things being measured. If data is collected at the time the event occurs, like with some kind of injection, then the count in the timeslice data will be 1. Required if it is not 1 (0 generally represents an absent value). value Required: The total value measured across all things being counted. When averages are calculated later, we divide the value by the count. In some cases, the value field is irrelevant. min, max The minimum and maximum values when the count is greater than 1. When the count is 1, these are the same as the value. Optional depending on whether they are available or relevant for a given metric. sum of squares This is the sum of squares of each value and is useful when the values follow a standard distribution. You can only capture this value when you are collecting data each time the event happens. You store the value of the event in the value field and the square of the value in the sum of squares. This is used to calculate a standard deviation later on. The sum of squares is optional. It is used to calculate a standard deviation for a selection of data. If standard deviation for the value is not meaningful, such as when the values are not part of a normal distribution, then the sum of squares is omitted. Units When a metric value is collected by periodically sampling an interface, the count units are implicitly samples, and the value units are whatever is being sampled. For data it might be bytes. For throughput it might be something like kilobytes/second. For utilization (like CPU) it might be percent. When the count units are samples, they can be omitted in the metric name. Units of time, bytes, and bits may get special treatment, allowing additional conversion in the user interface between magnitudes. For example, if you specify a metric with units of kilobytes, then in the UI you may be presented the option of displaying a chart of Mb. Metrics units describe what the value field and count represent. Units are specified inside brackets and consist of units for the value, followed by a pipe (|) and then the units for the count. For example: Component/metric_id[value_unit|count_unit] Copy Exception: The pipe and count units (|[count_unit]) are not required after the value unit for samples. Rate metrics are commonly defined as sample per interval. This is defined as units/interval in the metric, with a forward slash to separate units from interval. For example: Component/metric_id[value_unit/interval] Copy In rare cases there will only be a unit value for count. The value will be interpreted as unitless. Value units are omitted, and the vertical bar appears in front of the count units. For example: Component/metric_id[|count_unit] Copy Units for plugin metrics Notes Naming conventions You can have mixed-case unit names. They.can consist strictly of alphabetical characters as well as the _, %, or / symbols. Case is preserved. Punctuation markers, dashes, spaces and any other symbols are not allowed. Recommendation: Use uncapitalized words, spelled out in full. For example, use second not sec. Rate metrics When a metric value represents a rate, such as bytes/second, then the value is assumed to be a sample for the given interval. The units specifier looks like [ bytes/second] since the count units are implicitly samples. For example: Component/metric_id[bytes/second] Copy The count units are samples (default) and the value units are bytes/second. The forward slash separates the units from the interval. Count with units A common case for declaring units is when measuring response times. If the custom metric represents the average latency of a call to a cache, then the units for the metric value are seconds per call. For example: Component/metric_id[seconds|call] Copy Count units are calls and value units are seconds. The default count metric is not being used, so you need to specify it. The bar separates the value units from the count units. Units in charts The units specified in a metric have several implications for the way the values are interpreted by generic charts and tables: Units display in labels and tooltips in charts to indicate what the values represent. Units imply a set of different values available from a single metric value. When creating a chart in a dashboard, the dashboard author selects one of the available value methods for that metric to plot in the chart.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71738,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Metric data for the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "&quot; : 2, &quot;max&quot; : 10, &quot;total&quot;: 12, &quot;count&quot; : 2, &quot;sum_of_squares&quot; : 104 } } } ] }&#x27; Copy Metric references <em>Refer</em> to these references as you <em>develop</em> your own <em>plugins</em>. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order"
      },
      "id": "603e80db64441f0def4e8863"
    },
    {
      "sections": [
        "Plugin data",
        "Important",
        "Limited access to legacy plugins",
        "Use integers and floats",
        "Define the time period (duration)",
        "Follow unit conversion guidelines",
        "Select value methods for display in the UI"
      ],
      "title": "Plugin data",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "e5fd09ba8dd9c63a140479fbc2032254d1cf8c4f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plugin-data/",
      "published_at": "2021-05-22T02:51:52Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Use integers and floats All plugin metrics must be an integer or float, and they must be reported along with a duration. You can also report the type of metric so it can be converted from one unit type into another. You can display the metrics you collect in a variety of value methods, including throughput, averages, min/max, and rate. The metrics appear in charts and tables you create for your plugin's user interface. Plugins in Plugin Central are designed to report on frequency metrics using non-negative integers or floating-point numbers: Non-negative integers: Supported. Floating-point numbers: Supported. Negative values: Not supported, except for summary metrics on the plugin's Summary page. Otherwise, the UI shows negative values as zero. String values: Not supported; the UI shows strings as zero. However, parts of your metric name (the key) can be displayed in the UI. Define the time period (duration) All metrics must include a duration period that starts no more than a few hours in the past. The end time is set automatically to the time New Relic Plugins receives the metrics. You cannot report a duration that starts or ends in the future, or a duration that ends in the past. For best results, use one of the plugin SDKs to create your plugin. Otherwise, some POST attempts may fail because the actual recorded duration could vary in increments of the plugin's scheduled reporting frequency. Follow unit conversion guidelines Plugins automatically converts some units (such as rate units) to more natural forms. For example, [bytes/second] is converted to Bps. Follow these guidelines for unit conversions: Long format: Always specify the long format (for example, [bytes/second]) in the metric name. The long or short version will be used as appropriate. (Unit designations are not case sensitive.) Consistency: Use modifiers consistently in the metric name. If you use a different modifier with the same metric name, it will be treated as a different metric. Optional: Standard modifiers: Provide standard modifiers to the first metric in a value unit. For example, rather than specifying [bytes/second], you can specify [kiloBytes/second]. Plugins accepts these standard modifiers: Modifier Multiplier Modifier Multiplier Kilo 1000 - -- - -- Mega 1000^2 - -- - -- Giga 1000^3 Gibi 1024^3 Tera 1000^4 Tebi 1024^4 Peta 1000^5 Pebi 1024^5 Select value methods for display in the UI When you define a metric value for reporting, Plugins also captures a count, min, max, and sum of squares. Depending on whether you report single or aggregate values, you may report these numbers directly, or Plugins may calculate them automatically. You can then choose a value method for rendering these metrics in your plugin UI. In general, to configure value methods in the user interface: Select the metric you want to use. Review the list of value methods to select how to present the data in a column or plotted in a chart. Available value methods depend on the format of the units part of the metric name: Value method Count | Value Value Rate Count: The total of the count field over the entire timeslice data interval. When aggregating timeslice data, the count is summed. Total value: The total value over the entire time slice data interval. When aggregating timeslice data, the value field is summed Time rates only Average value: The total value divided by the total count, calculated only when units for both count and value are available. Throughput: The total count divided by the time interval of the time slice. By default New Relic Plugins measures the throughput in minutes according to the count units, such as calls per minute or bytes per minute. When the count units are specified in time (seconds), then the throughput appears as a percentage. Min/Max: The statistical values for minimum and maximum values when recorded in the metric value along with Count and Value. Standard deviation: The standard deviation of the entire set of measures recorded over the time interval. This is available only if the sum of squares field was populated in the metric value. The sum of squares and mean are used to calculate the standard deviation. In practice, this is meaningful only for populations that resemble a normal distribution. Rate: The rate is the total value divided by the time interval. When units of the value are in time, then the rate value is a percentage value. Units that are themselves rates will not have an explicit rate value method. The rate is simply the average value. Percentage: If you want the metric to appear as a percentage in the user interface, then you must define it as a percentage in the JSON.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71265,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> data",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e91e3196a67c11ea83d9d"
    },
    {
      "sections": [
        "Plan plugin metrics",
        "Important",
        "Limited access to legacy plugins",
        "Collect plugin metrics",
        "Present plugin metrics"
      ],
      "title": "Plan plugin metrics",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "08974b731c810af2b6b037e8b761834c6e1ce7a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plan-plugin-metrics/",
      "published_at": "2021-05-22T02:51:52Z",
      "updated_at": "2021-03-16T11:01:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Collect plugin metrics If you are running one of our APM agents to receive information about your applications, you can also receive arbitrary custom metrics. Using custom dashboards with your plugins, you can visualize custom metrics in a variety of useful ways. You can write plugins agents that can be run anywhere to collect metrics from any available system and report them to New Relic for dashboard display. Plugins also allow for summary metrics and one or more dashboards to visualize metrics that can be shared with every user of the plugin. This allows you to create a consistent user interface for the metrics you collect. The data that plugins report is in the form of a key/value pair. Values are numerical, either integers or floating point non-negative numbers. Negative numbers can be included in your summary metrics and tables; however, visualization in charts is limited to numbers greater than or equal to zero. Keys are strings which include the concept of name spaces and units. While values cannot be strings, parts of your metric name (the key) can be displayed in plugin dashboards. Your plugin agent can run anywhere with internet access to Plugins. You can write an agent using the agent SDKs. You can also write your agent to connect via HTTP POST using the API for Plugins in any language with HTTP support. Using the Plugin API might be the most appropriate solution when one agent is reporting metrics for more than one New Relic account. This is common for service providers to report specialized metrics for each of their customers using Plugins. This can be done with a small number of agents monitoring a large number of users. Present plugin metrics When creating a plugin agent, good metric name planning is critical to your success. Poorly chosen metrics names can make it difficult or impossible to display the information you intend. Plan ahead for how you want to visualize your information and to record metrics in a way that will facilitate this. You may even want to record the same metrics with more than one name in order to visualize different aspects of your data. Plugin dashboards do not have the ability to do mathematical calculations, so make sure your plugin agent handles any necessary calculations (sum, average, total, count, etc.) before recording metrics. Once you have collected metrics with your plugin agent, you will need to create dashboards to visualize the information in your metrics. All plugins will have a default dashboard. You can add as many dashboards as necessary to visualize your metric data (maximum 15). In addition to dashboards, you can choose up to five metrics to represent the summary of each instance. Summary metrics convey the health status of each instance and are used to trigger Caution events and Critical alerts for your plugins. The summary metrics appear on your plugin's Summary page.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.71242,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Plan <em>plugin</em> metrics",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603eb01228ccbc6fa6eba790"
    }
  ],
  "/docs/plugins/plugins-new-relic/custom-dashboards-custom-views/custom-dashboards-v2-legacy": [
    {
      "sections": [
        "Custom views (deprecated)",
        "Important",
        "Custom views in Liquid",
        "Account drops",
        "Methods",
        "Application drops",
        "Application metric drops",
        "Examples",
        "Value methods",
        "Filters",
        "Arithmetic filters",
        "Tags",
        "Chart tags",
        "Referencing metrics",
        "Blocks"
      ],
      "title": "Custom views (deprecated)",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Custom dashboards and custom views"
      ],
      "external_id": "f463c45abafd9dfd5c6ff8f62d834d6125cc4ba1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/custom-dashboards-custom-views/custom-views-deprecated/",
      "published_at": "2021-05-22T02:52:57Z",
      "updated_at": "2021-03-13T02:57:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In 2012, custom dashboards (v1) replaced the deprecated custom views feature. Then, in February 2014, custom dashboards (v2) replaced our original custom dashboards feature (v1). Custom dashboards (v2) are part of a legacy feature and are being retained only for use with our legacy plugins tool. In addition, plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Important For an even better experience than plugins, custom dashboards, and custom views, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Custom views in Liquid New Relic custom views allow users to visualize custom metric data in charts and HTML tables. Custom Views are written using a custom version of Liquid, a templating language created for Shopify. Custom view code looks like normal HTML interspersed with small blocks of code. The Liquid Wiki has additional information about how to write templates. Every Liquid custom view has access to four context variables, account, application, metrics, and applications. The account variable is an Account drop for the current account, and the application variable points to the current application selection. The metrics variable allows access to metrics for the current application and the applications variable can be used to access the applications belonging to the current account. Drops are secure wrappers around New Relic objects and methods accessible from Liquid templates. Drops expose a limited number of method calls available on each object in a Liquid template, as specified below. Account drops Methods id: The integer id of the account name: The name of the account applications: A collection proxy for the account applications. Applications can be looked up using this syntax: app = account.applications['The app name'] Copy The return value of the lookup is an Application drop. Application drops An application drop represents an application. Methods id: The integer id of the application name: The name of the application health_status: Returns a 1, 2 or 3 which indicates the overall health of the application. The traffic_light filter can be used to render a traffic light from the health_status integer value. metrics: An ApplicationMetrics drop which can be used to look up metrics. Application metric drops An application metrics drop is a collection proxy that can be used to find metrics. {{ application.metrics['metric name'] }} Copy You can also access the metrics for the current account selection with just the metrics variable. {{ metrics['metric name'] }} Copy You can use the application metrics drop to look up a specific metric like in the above sample. You can also use it to retrieve multiple metrics using a regular expression match: {% assign metrics = application.metrics.find_by_regexp['account'] %} Copy The return value of a single metric lookup is an application metric drop. The return value of a find_by_regexp invocation is an array of application metric drops. You can use the metric selector to browse all available metrics and insert metric names or regexp values into your custom view for use in chart tags or filters. If you have added custom metrics via custom metrics, you will see them in the metric selector. An ApplicationMetric drop represents a single application metric and can be used to fetch metric values. Metric value functions like call_count, time_percentage_by_host, and average_value_by_host can be directly invoked on this drop. Metric value functions are also used as a parameter for chart tags to specify the value to display in the chart. The return value of a value function invocation is a MetricValue. Methods id: The integer id of the metric name: The name of the metric Examples {{ application.metrics['Memory/Physical'].average_value_by_host.value }} Copy {{ metrics['CPU/User Time'].time_percentage_by_host.value }} Copy Value methods Some of the value methods return the same data for a given metric, but with different units. Units, if any, are listed in parentheses after the value method. total_value (ms): The total value of the metric for each period within the time window. Use the value_suffix attribute to set the suffix average_value, average_response_time (ms): The average value of the metric for each period within the time window. count, call_count: The number of data points for the metric value (e.g. # of method invocations) requests_per_minute (rpm), calls_per_minute (cpm), errors_per_minute (epm): The number of requests per minute min_value, min_call_time (ms): The smallest metric value collected during the period. max_value, max_call_time (ms): The largest metric value collected during the period. time_percentage (%): Useful for DB and CPU percentage utilization, added across all applicable hosts. time_percentage_by_host (%): Time percentage averaged across the # of hosts. average_value_by_host: The raw value averaged across the # of hosts. score: The value of a scoring method, currently used with Apdex metrics. Filters Filters are methods in Liquid. They always take their first parameter as the output of the left side of the filter (before the '|'). For more information about using filters, see the Liquid Wiki on Filters. Examples traffic_light(input, caution_threshold = 1, danger_threshold = 2) This filter renders a traffic light image by comparing the input value against upper and lower thresholds. If the danger threshold is exceeded, the light will be red. If the caution threshold is exceeded, the light will be yellow. Otherwise it will be green. {{ application.health_status | traffic_light }} {{ application.metrics['Memory/Physical'].average_value_by_host.value | traffic_light:800,1300 }} link_to_application(input, application) This filter generates a link to an application. The input value is the link text. {{ 'current application' | link_to_application:application }} link_to_custom_view(input, custom view name or id) This filter generates a link to a custom view. The input value is the link text. {{ 'For more detail see this custom view' | link_to_custom_view:'My Custom View' }} round(input, places = 0) This filter rounds a value. {{ 109.45 | round:1 }} percentage(input) This filter turns a value to a percentage by multiplying it by 100 and rounding to two places. {{ 0.87 | percentage }} Arithmetic filters These filters are core features of Liquid: # addition plus(input, operand) # subtraction minus(input, operand) # multiplication times(input, operand) # division divided_by(input, operand) Copy sort_table(table_id, column, order = 'asc') This filter sorts a table identified by DOM id \"tableid\", with a default sort on the column numbered \"column\" in the order specified. The order is an optional parameter. Once invoked, the table can be re-sorted dynamically by clicking on the table headers. Here is an example: { % assign metrics = application.metrics.find_by_regexp [ '._Controller/.'] %} <table id=\"metrics_table\"> <thead> <tr> <th></th> <th>Resp. time (300,1000)</th> <th></th> <th>RPM(10,50)</th> <th>Action</th> </tr> </thead> <tbody> {% for metric in metrics %} <tr> <td>{{metric.average_response_time.value | traffic_light:300, 1000}}</td> <td>{{metric.average_response_time.value}}</td> <td>{{metric.requests_per_minute.value | traffic_light:10, 50}}</td> <td>{{metric.requests_per_minute.value}}</td> <td>{{metric.name}}</td> </tr> {% endfor %} </tbody> </table> {{ 'metrics_table' | sort_table:2, 'desc' }} Copy The last line calls the table sort, sorting on the second column in descending order. For more information, see Liquid Filters. Tags Tags in Liquid are used to create logic and other custom behavior in your custom views. For more information about built-in tags, see The Liquid Wiki page on Tags. The New Relic custom tags listed below are used to display charts and alter the time window. Chart tags New Relic custom views support chart rendering using a set of custom tags. Common chart attributes include: title: The chart title subtitle: The subtitle value: A metric value function label: A function on the metric name that returns the label for each metric's timeseries. Possible values are ui_name (default), long_ui_name, last_segment (returns the last '/'-separated segment of the metric name), or segment_N (returns the Nth segment of the metric name). application: Either an application id or a name. This can be used to override the selected application. since: Changes the time window used for the metric data query. See the since block. hide_legend: Hides the graph legend when set to true limit: Limits the number of metrics matched by a regular expression metric match link_to: A url that will become the drilldown link for the chart link_to_custom_view: A custom view name or id. The chart will hyperlink to the given custom view. caution_threshold: A number value representing a caution threshold. A yellow horizontal line will be drawn on the graph at this value. danger_threshold: A number value representing a danger threshold. A red horizontal line will be drawn on the graph at this value. value_suffix: A suffix to be appended to all metric values simple_tooltip: when true, the tooltip is just the value and suffix Referencing metrics Metric data can be referenced in two ways: either by using the name of a specific metric, or by providing a regular expression that matches multiple metrics. Use either the metric or the regexp attribute (but not both) in each chart tag to set the metric source. metric: A string that matches a single metric. The value should be in single quotes and it should not be escaped. regexp: A regular expression that matches metrics. This expression should be wrapped in quotes and it should not be escaped. The following values are provided for informational purposes, for customers who created custom views using these values prior to June 2012. You can access your old custom views and create new custom dashboards from the New Relic Custom dashboards menu. line_chart {% line_chart value:time_percentage metric:'CPU/User Time' title:'CPU' %} pie_chart {% pie_chart regexp:'ActiveRecord/(save|find|destroy)' title:'Active Record' value:time_percentage %} horizontal_bar_chart {% horizontal_bar_chart value:call_count title:'Active Record' regexp:'ActiveRecord/(save|find|destroy)' %} compare_with_last_week_chart {% compare_with_last_week_chart metric:'ActiveRecord/all' title:'Week to Week Comparison' value:time_percentage %} compare_with_yesterday_chart {% compare_with_yesterday_chart metric:'ActiveRecord/all' title:'ActiveRecord' value:time_percentage %} Similar to the compare_with_last_week_chart but uses a 24 hour time period for comparison rather than 7 day. compare_with_yesterday_and_last_week_chart {% compare_with_yesterday_and_last_week_chart metric:'ActiveRecord/all' title:'ActiveRecord' value:time_percentage %} A combination of compare_with_yesterday_chart and compare_with_last_week_chart. daily_summary_chart {% daily_summary_chart metric:'Controller' title:'Daily Summary Chart' value:call_count %} weekly_summary_chart {% weekly_summary_chart metric:'Controller' title:'Weekly Summary Chart' value:call_count %} Blocks Blocks in Liquid are tags that are used to create logic in your custom view. There are many blocks built into Liquid, as well as the custom New Relic 'since' block. since New Relic's since block tag is used to specify a time window for a set of queries. This tag must be followed by a matching endsince tag. All metric data value and chart data queries occurring within a since tag will be scoped to the given time range. Charts will override this time window if the since attribute is specified, but this tag is useful for scoping an entire custom view to a particular time window. It is also the only way to change the time window scope of a metric value query. Examples {% since midnight %} {{ application.metrics['Memory/Physical'].average_value_by_host.value }} {% endsince %} {% since 3.hours.ago %} {% line_chart value:time_percentage metric:'CPU/User Time' title:'CPU Last 3 hours' %} {% endsince %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 268.31683,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>views</em> (deprecated)",
        "sections": "<em>Custom</em> <em>views</em> (deprecated)",
        "tags": "<em>Custom</em> <em>dashboards</em> <em>and</em> <em>custom</em> <em>views</em>",
        "body": ". In addition, <em>plugins</em> in <em>Plugin</em> Central are not supported with accounts that host data in the EU region data center. Important For an even better experience than <em>plugins</em>, <em>custom</em> <em>dashboards</em>, and <em>custom</em> <em>views</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use"
      },
      "id": "60445cdb196a678ea2960f21"
    },
    {
      "sections": [
        "Use a Plugin Central plugin",
        "Important",
        "Limited access to legacy plugins",
        "View plugin dashboard details",
        "Plugin summary",
        "Plugin dashboards",
        "Plugin alerts",
        "Delete a plugin",
        "Remove plugin components (instances)",
        "Delete the plugin"
      ],
      "title": "Use a Plugin Central plugin",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "feae68c2e9d870f7c02fff5ffb69f2c262a0cd6c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/use-plugin-central-plugin/",
      "published_at": "2021-05-22T05:25:43Z",
      "updated_at": "2021-03-16T11:03:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. View plugin dashboard details Each plugin in Plugin Central includes procedures for how to install, use, troubleshoot, and uninstall it. Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. After you install a plugin, it starts to receive data, usually within five minutes. The plugin automatically appears with a short name and icon on your Plugins menu in New Relic One. You do not need to select it from Plugin Central. The amount and types of information on the plugin's summary page and dashboards depend on the specific plugin. For example, a plugin may have one or more components (instances) and one or more dashboards. To view summary and dashboard details about the plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, review the list of components or instances, summary metrics, and list of Recent Events. To view dashboard details about any component or instance, select its name. Plugin summary Depending on the plugin, the summary includes: One or more components or instances (what the plugin agent is monitoring, typically a host/port pair) Zero to five summary metrics for the past three minutes (values such as average, total, minimum, maximum, standard deviation, rate, or count) with optional alerts Recent events list, including deployments, notifications, and alerts Other information about alert violations, events, and activity If your plugin has 100 or more components or instances, you can search for a specific component instance. Here is a summary of additional standard features. If you want to... Do this... View version information for a component's or instance's agent Mouse over the component's name. Change the sort order On the title row of the plugin's summary page, select the up or down arrow for a component (instance) or a summary metric's label. Show or hide items on the events and activity list Select an event icon, or select All. View details about an event On the events and activity list, select the link. View page details for a component or instance Select the name or a summary metric for the component (instance). Plugin dashboards Depending on the plugin, it may have one or more dashboards, and each dashboard may present data as a chart or a table. You can use any of New Relic's standard dashboard features to drill down into detailed information. The customized dashboards that show plugin data are part of the plugin. Users cannot add or remove these dashboards. This must be done by the author or publisher as part of a plugin update. Plugin alerts If the plugin publisher set Critical (red) or Caution (yellow) alert conditions for your plugin's components or instances, you can view details direct in the user interface. For example, you can: Select and view alert details. Change the existing thresholds. Set your alert notification options; for example, to receive email notifications for Critical events. Delete a plugin Each plugin in Plugin Central includes procedures for how to uninstall it. When you select the plugin's Download or Continue button, the plugin should include a README file or refer to other documentation resources. Remove plugin components (instances) At a minimum, your plugin must stop reporting data before you start uninstalling it. Make sure the health status for your plugin's components (instances) are gray. Depending on the plugin, there may be other dependencies before disabling or uninstalling it. For example, plugins from SaaS providers may have different requirements. Be sure to review the instructions that the plugin's publisher provides. Then, to remove individual components from your plugin, click the settings icon for each component (instance). Delete the plugin After you remove each component (instance) for the plugin, the plugin icon will automatically disappear from your Plugins menu in the New Relic UI. You do not need to do anything else to delete the plugin. If you are the plugin's publisher and need to delete the plugin from Plugin Central, go to support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.52866,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use a <em>Plugin</em> Central <em>plugin</em>",
        "sections": "<em>View</em> <em>plugin</em> <em>dashboard</em> details",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": "&#x27;s summary page and <em>dashboards</em> depend on the specific <em>plugin</em>. For example, a <em>plugin</em> may have one or more components (instances) and one or more <em>dashboards</em>. To <em>view</em> summary and <em>dashboard</em> details about the <em>plugin</em>: Go to one.newrelic.com &gt; More &gt; <em>Plugins</em>, and select your <em>plugin</em>. From the <em>plugin</em>&#x27;s summary page"
      },
      "id": "603ebf0928ccbcf8d0eba762"
    },
    {
      "sections": [
        "Install from Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Requirements",
        "Access rights",
        "License key",
        "Typical plugin installation procedures",
        "Install an NPI-compatible plugin",
        "Install the plugin",
        "Manage plugins with the NPI tool",
        "Troubleshoot NPI-compatible plugins",
        "Duplicate plugins",
        "Error message ./npi: line 1: bin/node: No such file or directory",
        "Error message -bash: ./npi: No such file or directory",
        "Insufficient privileges to run background processes",
        "Install with Chef or Puppet",
        "Chef cookbooks",
        "Puppet modules"
      ],
      "title": "Install from Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "a19bd4cb7582a8653cd83b18e431b23cb4270876",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/install-plugin-central/",
      "published_at": "2021-05-22T02:55:19Z",
      "updated_at": "2021-03-13T01:16:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Requirements Each plugin in Plugin Central includes its own procedures for how to install, use, troubleshoot, and uninstall it. In order to use a plugin, first verify that your environment meets the plugin's documented requirements. Then follow the plugin's procedures to install the plugin agent on one or more hosts in your monitored environment, or to configure a SaaS plugin as directed by your SaaS provider. As a standard security measure for data collection, your application server must support SHA-2 (256-bit). We do not support SHA-1. Also, plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Access rights When using an agent from Plugin Central, deploy the agent giving the fewest possible permissions in order for the plugin agent to function successfully. Unless the plugin publisher gives specific instructions, you should run the plugin agent as a non-privileged user; do not use su or sudo privileges. This applies to both installing and using the agent. If the plugin agent needs credentials for the component (instance) that it is monitoring, create a custom set of credentials just for the monitoring agent to use. These should be separate from any other production credentials. The custom credentials should grant the fewest possible permissions while still allowing the agent to gather the data it needs. For example, for most plugin agents, you should only need to grant read-only access to your components or instances so the plugin agent cannot modify your system in any way. Also, with many agents, you should only need to grant access to read performance and administration data, not necessarily end customer or other sensitive data. For more information, see Plugin security. License key As part of any plugin installation process, you need your New Relic license key. When you are logged into the Plugins UI, the plugin's installation page in Plugin Central also shows your license key so you can easily copy it to your clipboard. If plugins have been published by SaaS providers, they must have access to the New Relic license key for each individual account. They can capture this information when provisioning new customers via the New Relic Partner API, or they can provide a mechanism for customers to share their existing New Relic license key. Typical plugin installation procedures Installation requirements depend on the type of plugin. For example, a Java plugin agent has different requirements than a Ruby plugin agent. Before you use a plugin, review the documentation that the plugin's publisher provides about the agent's installation requirements. To install any plugin from Plugin Central: Go to one.newrelic.com > More > Plugins. From the Plugin Central directory, select the plugin's title or its Get started button. From the plugin's details page, select the Download or Continue button. Follow the plugin's specific instructions to get your plugin installed and running. After you start running a plugin, it collects and sends data to New Relic, usually within five minutes. The plugin name will automatically appear in the Plugins UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible plugin The New Relic Platform Installer (NPI) is a command line utility that helps you easily download, configure, and manage a plugin by installing it with a single command. After you install the NPI tool, you can use it to install any plugins that are compatible with it. Install the plugin Plugins that are compatible with the New Relic Platform Installer include an NPI compatible label. If you have not already installed the NPI tool: Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, click the link that says * Requires New Relic Platform Installer (NPI) - Get it here. From the dropdown that opens, select your operating system. Copy the command that appears, then run it in your terminal to install the NPI tool. Unix-based systems: If you need to set a default user, in your terminal, run: ./npi set user <USER NAME> Copy Once you have installed the NPI tool, you can install any NPI compatible plugin. Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, follow the procedures to copy the specific plugin's installation command. In your terminal, change to the directory ~/newrelic-npi, then paste and run the install command. Manage plugins with the NPI tool To view information that helps you manage NPI-compatible plugins: For usage and commands, help and version flags, and setup examples, run the command --help from the directory ~/newrelic-npi. For a list of plugins that are NPI-compatible, run the command ./npi available. If you need to include proxy settings in your configuration (for both the NPI tool and the plugin's newrelic.json file), use these commands: ./npi config set proxy_host <HOST> ./npi config set proxy_port <PORT> ./npi config set proxy_username <USER NAME> ./npi config set proxy_password <PASSWORD> Copy To view the full path for a plugin, run a where command. This is useful for viewing log files or locating a plugin on your filesystem so you can manually configure it. Troubleshoot NPI-compatible plugins In addition to the troubleshooting procedures provided by the plugin publisher, follow these troubleshooting guidelines when installing NPI-compatible plugins. Duplicate plugins Problem: If you install a plugin and then install the same plugin again through the NPI tool, you will have two versions of the plugin installed. Solution: Delete the older version of the plugin, and then install the NPI-compatible version using the NPI tool. Procedures to delete plugins typically appear in the README file or in other documentation that the plugin publisher provides. Error message ./npi: line 1: bin/node: No such file or directory Problem: The architecture script that you selected when you installed the NPI tool does not match your operating system (for example, x86 instead of x64). Solution: Install the NPI tool using the correct script for your operating system. Error message -bash: ./npi: No such file or directory Problem: You cannot run NPI commands. Solution: You can only access the NPI tool from the location where it was installed. To solve this problem, navigate to the directory ~/newrelic-npi, and run the command again. Insufficient privileges to run background processes Problem: If you try to set a plugin to run as a background process, you might see a message that you have insufficient privileges. Solution: The plugin creates an /etc/init.d script on Linux and a Windows service on Windows, both of which require escalated privileges to run. To solve this problem: Linux: Run the command with sudo in front of it. Windows: Run the command as an administrator. Install with Chef or Puppet In addition to standard installation procedures, you can install plugins with Chef and Puppet configuration management tools. These tools automate plugin installation and make it easier to manage plugins with the rest of your server software. Chef cookbooks Plugins in Plugin Central may come bundled with a Chef script, or you can write your own. If a Chef script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Chef, add the Chef cookbook for New Relic Plugins: Procedures: See Chef's cookbook documentation. New Relic Plugins cookbook: See Chef's community site for newrelic_plugins. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Chef. Then, to install a plugin using Chef: Configure Chef with the plugin details. Run Chef to install the plugin. Chef cookbooks and recipes define roles for specific server configurations. For example, a web server can have the role web_server which includes all of the software and configuration needed for a web server. Here is an example of creating a Chef role for a server running the Wikipedia Java example plugin: name \"newrelic_wikipedia_example_java_plugin\" description \"Server running the New Relic Plugins Wikipedia Example Java Plugin\" run_list( \"recipe[newrelic_plugins::wikipedia_example_java]\" ) default_attributes( \"newrelic\" => { \"license_key\" => \"NEW_RELIC_LICENSE_KEY\", \"wikipedia_example_java\" => { \"install_path\" => \"/path/to/plugin\", \"user\" => \"newrelic\" } } ) Copy Puppet modules Plugins in Plugin Central may come bundled with a Puppet script, or you can write your own. If a Puppet script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Puppet, add New Relic's Puppet module for plugins: Procedures: See Puppet's module documentation. New Relic plugin modules: See the Puppet Forge community site. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Puppet. Then, to install a plugin using Puppet: Configure Puppet with the plugin details. Run Puppet to install the plugin. Puppet modules contain manifest files that are a collection of classes for configuring a server. For example, a web server can be assigned several classes for the necessary software for a web server. Here is an example of using a Puppet class for a server running the Wikipedia Java example plugin: class { 'newrelic_plugins::wikipedia_example_java': license_key => 'NEW_RELIC_LICENSE_KEY', install_path => '/path/to/plugin', user => 'newrelic' } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.905975,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install from <em>Plugin</em> Central",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " to get your <em>plugin</em> installed and running. After you start running a <em>plugin</em>, it collects and sends data to <em>New</em> <em>Relic</em>, usually within five minutes. The <em>plugin</em> name will automatically appear in the <em>Plugins</em> UI, where you can select and <em>view</em> its summary metrics and <em>dashboards</em>. Install an NPI-compatible"
      },
      "id": "60445cdd196a6788d9960f28"
    }
  ],
  "/docs/plugins/plugins-new-relic/custom-dashboards-custom-views/custom-views-deprecated": [
    {
      "sections": [
        "Custom dashboards v2 (legacy)",
        "Important",
        "Limited access to legacy plugins"
      ],
      "title": "Custom dashboards v2 (legacy)",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Custom dashboards and custom views"
      ],
      "external_id": "f122ddf1c7bcc4c1efb449838eafa63d79d5753c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/custom-dashboards-custom-views/custom-dashboards-v2-legacy/",
      "published_at": "2021-05-22T02:52:56Z",
      "updated_at": "2021-03-13T01:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In February 2014, custom dashboards (v2) replaced our original custom dashboards feature (v1). Custom dashboards (v2) are part of a legacy feature and are being retained only for use with our legacy plugins tool. In addition, plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 268.29175,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>dashboards</em> v2 (legacy)",
        "sections": "<em>Custom</em> <em>dashboards</em> v2 (legacy)",
        "tags": "<em>Custom</em> <em>dashboards</em> <em>and</em> <em>custom</em> <em>views</em>",
        "body": "In February 2014, <em>custom</em> <em>dashboards</em> (v2) replaced our original <em>custom</em> <em>dashboards</em> feature (v1). <em>Custom</em> <em>dashboards</em> (v2) are part of a legacy feature and are being retained only for use with our legacy <em>plugins</em> tool. In addition, <em>plugins</em> in <em>Plugin</em> Central are not supported with accounts that host data"
      },
      "id": "60445cde28ccbc04a2311239"
    },
    {
      "sections": [
        "Use a Plugin Central plugin",
        "Important",
        "Limited access to legacy plugins",
        "View plugin dashboard details",
        "Plugin summary",
        "Plugin dashboards",
        "Plugin alerts",
        "Delete a plugin",
        "Remove plugin components (instances)",
        "Delete the plugin"
      ],
      "title": "Use a Plugin Central plugin",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "feae68c2e9d870f7c02fff5ffb69f2c262a0cd6c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/use-plugin-central-plugin/",
      "published_at": "2021-05-22T05:25:43Z",
      "updated_at": "2021-03-16T11:03:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. View plugin dashboard details Each plugin in Plugin Central includes procedures for how to install, use, troubleshoot, and uninstall it. Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. After you install a plugin, it starts to receive data, usually within five minutes. The plugin automatically appears with a short name and icon on your Plugins menu in New Relic One. You do not need to select it from Plugin Central. The amount and types of information on the plugin's summary page and dashboards depend on the specific plugin. For example, a plugin may have one or more components (instances) and one or more dashboards. To view summary and dashboard details about the plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, review the list of components or instances, summary metrics, and list of Recent Events. To view dashboard details about any component or instance, select its name. Plugin summary Depending on the plugin, the summary includes: One or more components or instances (what the plugin agent is monitoring, typically a host/port pair) Zero to five summary metrics for the past three minutes (values such as average, total, minimum, maximum, standard deviation, rate, or count) with optional alerts Recent events list, including deployments, notifications, and alerts Other information about alert violations, events, and activity If your plugin has 100 or more components or instances, you can search for a specific component instance. Here is a summary of additional standard features. If you want to... Do this... View version information for a component's or instance's agent Mouse over the component's name. Change the sort order On the title row of the plugin's summary page, select the up or down arrow for a component (instance) or a summary metric's label. Show or hide items on the events and activity list Select an event icon, or select All. View details about an event On the events and activity list, select the link. View page details for a component or instance Select the name or a summary metric for the component (instance). Plugin dashboards Depending on the plugin, it may have one or more dashboards, and each dashboard may present data as a chart or a table. You can use any of New Relic's standard dashboard features to drill down into detailed information. The customized dashboards that show plugin data are part of the plugin. Users cannot add or remove these dashboards. This must be done by the author or publisher as part of a plugin update. Plugin alerts If the plugin publisher set Critical (red) or Caution (yellow) alert conditions for your plugin's components or instances, you can view details direct in the user interface. For example, you can: Select and view alert details. Change the existing thresholds. Set your alert notification options; for example, to receive email notifications for Critical events. Delete a plugin Each plugin in Plugin Central includes procedures for how to uninstall it. When you select the plugin's Download or Continue button, the plugin should include a README file or refer to other documentation resources. Remove plugin components (instances) At a minimum, your plugin must stop reporting data before you start uninstalling it. Make sure the health status for your plugin's components (instances) are gray. Depending on the plugin, there may be other dependencies before disabling or uninstalling it. For example, plugins from SaaS providers may have different requirements. Be sure to review the instructions that the plugin's publisher provides. Then, to remove individual components from your plugin, click the settings icon for each component (instance). Delete the plugin After you remove each component (instance) for the plugin, the plugin icon will automatically disappear from your Plugins menu in the New Relic UI. You do not need to do anything else to delete the plugin. If you are the plugin's publisher and need to delete the plugin from Plugin Central, go to support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.52866,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use a <em>Plugin</em> Central <em>plugin</em>",
        "sections": "<em>View</em> <em>plugin</em> <em>dashboard</em> details",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": "&#x27;s summary page and <em>dashboards</em> depend on the specific <em>plugin</em>. For example, a <em>plugin</em> may have one or more components (instances) and one or more <em>dashboards</em>. To <em>view</em> summary and <em>dashboard</em> details about the <em>plugin</em>: Go to one.newrelic.com &gt; More &gt; <em>Plugins</em>, and select your <em>plugin</em>. From the <em>plugin</em>&#x27;s summary page"
      },
      "id": "603ebf0928ccbcf8d0eba762"
    },
    {
      "sections": [
        "Install from Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Requirements",
        "Access rights",
        "License key",
        "Typical plugin installation procedures",
        "Install an NPI-compatible plugin",
        "Install the plugin",
        "Manage plugins with the NPI tool",
        "Troubleshoot NPI-compatible plugins",
        "Duplicate plugins",
        "Error message ./npi: line 1: bin/node: No such file or directory",
        "Error message -bash: ./npi: No such file or directory",
        "Insufficient privileges to run background processes",
        "Install with Chef or Puppet",
        "Chef cookbooks",
        "Puppet modules"
      ],
      "title": "Install from Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "a19bd4cb7582a8653cd83b18e431b23cb4270876",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/install-plugin-central/",
      "published_at": "2021-05-22T02:55:19Z",
      "updated_at": "2021-03-13T01:16:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Requirements Each plugin in Plugin Central includes its own procedures for how to install, use, troubleshoot, and uninstall it. In order to use a plugin, first verify that your environment meets the plugin's documented requirements. Then follow the plugin's procedures to install the plugin agent on one or more hosts in your monitored environment, or to configure a SaaS plugin as directed by your SaaS provider. As a standard security measure for data collection, your application server must support SHA-2 (256-bit). We do not support SHA-1. Also, plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Access rights When using an agent from Plugin Central, deploy the agent giving the fewest possible permissions in order for the plugin agent to function successfully. Unless the plugin publisher gives specific instructions, you should run the plugin agent as a non-privileged user; do not use su or sudo privileges. This applies to both installing and using the agent. If the plugin agent needs credentials for the component (instance) that it is monitoring, create a custom set of credentials just for the monitoring agent to use. These should be separate from any other production credentials. The custom credentials should grant the fewest possible permissions while still allowing the agent to gather the data it needs. For example, for most plugin agents, you should only need to grant read-only access to your components or instances so the plugin agent cannot modify your system in any way. Also, with many agents, you should only need to grant access to read performance and administration data, not necessarily end customer or other sensitive data. For more information, see Plugin security. License key As part of any plugin installation process, you need your New Relic license key. When you are logged into the Plugins UI, the plugin's installation page in Plugin Central also shows your license key so you can easily copy it to your clipboard. If plugins have been published by SaaS providers, they must have access to the New Relic license key for each individual account. They can capture this information when provisioning new customers via the New Relic Partner API, or they can provide a mechanism for customers to share their existing New Relic license key. Typical plugin installation procedures Installation requirements depend on the type of plugin. For example, a Java plugin agent has different requirements than a Ruby plugin agent. Before you use a plugin, review the documentation that the plugin's publisher provides about the agent's installation requirements. To install any plugin from Plugin Central: Go to one.newrelic.com > More > Plugins. From the Plugin Central directory, select the plugin's title or its Get started button. From the plugin's details page, select the Download or Continue button. Follow the plugin's specific instructions to get your plugin installed and running. After you start running a plugin, it collects and sends data to New Relic, usually within five minutes. The plugin name will automatically appear in the Plugins UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible plugin The New Relic Platform Installer (NPI) is a command line utility that helps you easily download, configure, and manage a plugin by installing it with a single command. After you install the NPI tool, you can use it to install any plugins that are compatible with it. Install the plugin Plugins that are compatible with the New Relic Platform Installer include an NPI compatible label. If you have not already installed the NPI tool: Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, click the link that says * Requires New Relic Platform Installer (NPI) - Get it here. From the dropdown that opens, select your operating system. Copy the command that appears, then run it in your terminal to install the NPI tool. Unix-based systems: If you need to set a default user, in your terminal, run: ./npi set user <USER NAME> Copy Once you have installed the NPI tool, you can install any NPI compatible plugin. Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, follow the procedures to copy the specific plugin's installation command. In your terminal, change to the directory ~/newrelic-npi, then paste and run the install command. Manage plugins with the NPI tool To view information that helps you manage NPI-compatible plugins: For usage and commands, help and version flags, and setup examples, run the command --help from the directory ~/newrelic-npi. For a list of plugins that are NPI-compatible, run the command ./npi available. If you need to include proxy settings in your configuration (for both the NPI tool and the plugin's newrelic.json file), use these commands: ./npi config set proxy_host <HOST> ./npi config set proxy_port <PORT> ./npi config set proxy_username <USER NAME> ./npi config set proxy_password <PASSWORD> Copy To view the full path for a plugin, run a where command. This is useful for viewing log files or locating a plugin on your filesystem so you can manually configure it. Troubleshoot NPI-compatible plugins In addition to the troubleshooting procedures provided by the plugin publisher, follow these troubleshooting guidelines when installing NPI-compatible plugins. Duplicate plugins Problem: If you install a plugin and then install the same plugin again through the NPI tool, you will have two versions of the plugin installed. Solution: Delete the older version of the plugin, and then install the NPI-compatible version using the NPI tool. Procedures to delete plugins typically appear in the README file or in other documentation that the plugin publisher provides. Error message ./npi: line 1: bin/node: No such file or directory Problem: The architecture script that you selected when you installed the NPI tool does not match your operating system (for example, x86 instead of x64). Solution: Install the NPI tool using the correct script for your operating system. Error message -bash: ./npi: No such file or directory Problem: You cannot run NPI commands. Solution: You can only access the NPI tool from the location where it was installed. To solve this problem, navigate to the directory ~/newrelic-npi, and run the command again. Insufficient privileges to run background processes Problem: If you try to set a plugin to run as a background process, you might see a message that you have insufficient privileges. Solution: The plugin creates an /etc/init.d script on Linux and a Windows service on Windows, both of which require escalated privileges to run. To solve this problem: Linux: Run the command with sudo in front of it. Windows: Run the command as an administrator. Install with Chef or Puppet In addition to standard installation procedures, you can install plugins with Chef and Puppet configuration management tools. These tools automate plugin installation and make it easier to manage plugins with the rest of your server software. Chef cookbooks Plugins in Plugin Central may come bundled with a Chef script, or you can write your own. If a Chef script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Chef, add the Chef cookbook for New Relic Plugins: Procedures: See Chef's cookbook documentation. New Relic Plugins cookbook: See Chef's community site for newrelic_plugins. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Chef. Then, to install a plugin using Chef: Configure Chef with the plugin details. Run Chef to install the plugin. Chef cookbooks and recipes define roles for specific server configurations. For example, a web server can have the role web_server which includes all of the software and configuration needed for a web server. Here is an example of creating a Chef role for a server running the Wikipedia Java example plugin: name \"newrelic_wikipedia_example_java_plugin\" description \"Server running the New Relic Plugins Wikipedia Example Java Plugin\" run_list( \"recipe[newrelic_plugins::wikipedia_example_java]\" ) default_attributes( \"newrelic\" => { \"license_key\" => \"NEW_RELIC_LICENSE_KEY\", \"wikipedia_example_java\" => { \"install_path\" => \"/path/to/plugin\", \"user\" => \"newrelic\" } } ) Copy Puppet modules Plugins in Plugin Central may come bundled with a Puppet script, or you can write your own. If a Puppet script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Puppet, add New Relic's Puppet module for plugins: Procedures: See Puppet's module documentation. New Relic plugin modules: See the Puppet Forge community site. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Puppet. Then, to install a plugin using Puppet: Configure Puppet with the plugin details. Run Puppet to install the plugin. Puppet modules contain manifest files that are a collection of classes for configuring a server. For example, a web server can be assigned several classes for the necessary software for a web server. Here is an example of using a Puppet class for a server running the Wikipedia Java example plugin: class { 'newrelic_plugins::wikipedia_example_java': license_key => 'NEW_RELIC_LICENSE_KEY', install_path => '/path/to/plugin', user => 'newrelic' } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.90597,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install from <em>Plugin</em> Central",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " to get your <em>plugin</em> installed and running. After you start running a <em>plugin</em>, it collects and sends data to <em>New</em> <em>Relic</em>, usually within five minutes. The <em>plugin</em> name will automatically appear in the <em>Plugins</em> UI, where you can select and <em>view</em> its summary metrics and <em>dashboards</em>. Install an NPI-compatible"
      },
      "id": "60445cdd196a6788d9960f28"
    }
  ],
  "/docs/plugins/plugins-new-relic/get-started/get-plugin-help": [
    {
      "sections": [
        "Plugin security",
        "Important",
        "Limited access to legacy plugins",
        "Open community",
        "Third-party content",
        "Source code",
        "Access to license keys",
        "Access rights",
        "Plugin storage"
      ],
      "title": "Plugin security",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "8476f9a0e63a7f58388b4a6e7fb8b089843033e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/plugin-security/",
      "published_at": "2021-05-22T02:54:14Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Open community New Relic's Plugins tool been designed to be open and extensible, so that any New Relic user, developer, technology vendor, or partner may publish publicly accessible plugins within Plugin Central. Anyone who has a New Relic account can install and use these plugins through their New Relic user interface. Exception: Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Having an open community where users both create and consume plugins can raise questions surrounding security. This document intends to address any security considerations for using these plugins. For more information about New Relic's security measures, see our security and data privacy documentation, or visit the New Relic security website. Third-party content For some plugins, New Relic, Inc. is the publisher, and will be clearly identified as the publisher. However, as an open resource, many plugins are created by our partners and third-party developers. Every plugin in the Plugin Central directory clearly identifies whether it was published by a New Relic developer or by a third party. We require plugin publishers to provide an About link to their website, documentation about what the plugin is for and how to use it, and a link to obtain support when using the plugin. We also require plugin publishers to review and accept the Developer Terms of Service Agreement before they can make their plugin publicly accessible. You can review all information provided by the publisher before installing any plugin. Only those plugins that identify New Relic, Inc. as the publisher fall under New Relic's posted privacy policy. For more information, see the New Relic security website. For other plugins, refer to the publisher's security and compliance statements. Source code If you have any concerns about plugins developed with the SDKs for plugins, you can review the source code and verify that the plugin agents behave as expected. The plugin agent's code is light, and it can be reviewed in minutes. Access to license keys Always keep your New Relic license key private. Typically access to your license key is needed only to record metric data or deployments for your applications, hosts, or plugins that are monitored by New Relic, not to introduce new data or code. No other access is allowed. Access rights When developing a plugin agent, authors and publishers need to consider the environment in which they will be run. You should do everything possible to reduce the level of permissions your plugin users need to grant to the agent in order for it to run correctly. In particular: Unless it is absolutely necessary, do not require su or sudo permissions in order to install your agent or support software on your users' computers. In this situation, the requirements should be limited in scope and well-documented. For additional information about access rights for plugin users, see the documentation about installing a plugin. When running your agent on the users' computers, do not require su or sudo permissions. The components (instances) your plugin agent is monitoring should only need to grant read-only permissions in order for your agent to perform its actions. As much as possible, the components (instances) your plugin agent is monitoring should be able to reduce the levels of information and access needed. When documenting your plugin, describe what level of permissions your plugin agent requires from the components (instances) it is monitoring and why this is necessary. Following these steps will make it easier for your plugin users to install your agent and increase their confidence that your agent cannot harm their components or instances being monitored. This will also reduce the likelihood of user problems if your agent has any serious bugs or other defects. Plugin storage Plugins only need access to their monitored systems and New Relic simply to report metrics. You may want to consider running plugin agents in sequestered systems with limited network access that allow no more than the minimum required network access. Also, data retention for plugins follows New Relic's standard policies. If you have any concerns about deploying any plugin from Plugin Central, follow your organization's guidelines. If for any reason you do not trust the source of an existing plugin, try creating your own version.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.17021,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> security",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": ") as of June 16, 2021. For more information, see our Explorers Hub post. Open community <em>New</em> <em>Relic</em>&#x27;s <em>Plugins</em> tool been designed to be open and extensible, so that any <em>New</em> <em>Relic</em> user, developer, technology vendor, or partner may publish publicly accessible <em>plugins</em> within <em>Plugin</em> Central. Anyone who has"
      },
      "id": "603ebeb9e7b9d25a642a07d4"
    },
    {
      "sections": [
        "Introduction to Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Developers and SaaS providers",
        "Plugin Central directory",
        "View plugins in Plugin Central",
        "Get started with plugins",
        "Ratings",
        "Reviews",
        "Plugin feedback policy"
      ],
      "title": "Introduction to Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "aa864c660f02e96be1c9cec897300ed96e5e33cb",
      "image": "https://docs.newrelic.com/static/916b76819340fbeb3becda03908ca2d2/c1b63/plugins-landing-page-prototype071720.png",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/introduction-plugin-central/",
      "published_at": "2021-05-22T02:54:14Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Developers and SaaS providers Plugin CentralÂ is where partners, third-party vendors, and users could publish plugin agents that collect selected data. This is also where you could install and view the plugin data on your Plugins dashboards as a set of summary metrics, charts, and tables. In most cases, the plugin's agent runs on the users' app server. SaaS or PaaS providers can also create plugin agents that run on their system and report metrics for customers who use New Relic to monitor their applications. For more information, see the specific plugin agent SDK documentation. Plugin Central directory Important Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. The plugin agent collects, sends, and stores the metric data. Plugin Central provides a searchable directory for plugins that developers publish and make publicly available to users. From Plugin Central, you can select and download whatever plugins you want to use. After you install or configure a plugin, you can view the plugin's dashboard data securely from the plugins user interface in New Relic One. View plugins in Plugin Central To view information about available (published) plugins: Go to one.newrelic.com > More > Plugins. By default, available plugins appear in alphabetical order. From the Plugin Central directory in New Relic One, select any published plugin to view a description and install it. Depending on the selected plugin, installation and configuration instructions will vary. Refer to your plugin's documentation for specific details. After you install or configure a plugin, it automatically appears on your Plugins menu in New Relic One, where you can select and view it directly. You may need to wait a few minutes for data to appear. Get started with plugins Here are some tips for making the most of Plugin Central. Ratings Plugins listed in New Relic's Plugin Central include a 5-star rating system, ranging from 1 (lowest) to 5 (highest). This helps you make more informed choices when choosing among similar plugins. This also provides a way for you to share what you think of a plugin. You can rate as many plugins as you want. If you have not voted for a plugin, its current star rating (gold or gray) does not include an outline. You can have only one vote for a specific plugin, and you cannot delete your vote. However, you can change your rating level anytime. After you select the star level (1 to 5) to cast your vote, the stars change to gold with an outline at the rating level you selected. Reviews Plugin Central includes a simple review system to share what you think of a plugin and to provide tips for others about installation and usage. Existing reviews appear when you select an individual plugin's title or Get started link. You can write as many reviews for as many plugins as you want, following the feedback policy. You can also edit or delete your own reviews. When you write a review for a plugin, if you have not already rated the plugin, you must provide a rating. Subsequent reviews will use the rating you provided. You can change your rating at any time. Plugin administrators also reserve the right to delete reviews if necessary. For more information, see Plugin feedback policy. Plugin feedback policy Here are some types of reviews we welcome: Your experience using the plugin Suggestions for improvement Your thoughts or opinions about the plugin, even if you disagree with us or point out mistakes Constructive criticism Your review must not contain personal attacks, name calling, libel, defamation, hate speech, etc. And under no circumstances should you post anything that could be taken as threatening, harassing, bullying, obscene, pornographic, sexist, or racist. We reserve the right to moderate reviews to make sure the tone is civil and fair. We will delete a review or rating in these situations: Spam, such as off-topic or nonsense reviews Inappropriate reviews including profanity and links to offensive content Attacks, including personal attacks against the plugin author or other reviewers, as well as attacks against New Relic or other companies. This does not mean you can't disagree with us or with each other, just be polite about it. False reviews that contain misleading statements or claims Other; for example, reviews or ratings that appear to be gaming the system",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.17021,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Plugin</em> Central",
        "sections": "<em>Get</em> <em>started</em> with <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": ". You may need to wait a few minutes for data to appear. <em>Get</em> <em>started</em> with <em>plugins</em> Here are some tips for making the most of <em>Plugin</em> Central. Ratings <em>Plugins</em> listed in <em>New</em> <em>Relic</em>&#x27;s <em>Plugin</em> Central include a 5-star rating system, ranging from 1 (lowest) to 5 (highest). This helps you make more informed"
      },
      "id": "603e81b428ccbc63bdeba79e"
    },
    {
      "sections": [
        "Install from Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Requirements",
        "Access rights",
        "License key",
        "Typical plugin installation procedures",
        "Install an NPI-compatible plugin",
        "Install the plugin",
        "Manage plugins with the NPI tool",
        "Troubleshoot NPI-compatible plugins",
        "Duplicate plugins",
        "Error message ./npi: line 1: bin/node: No such file or directory",
        "Error message -bash: ./npi: No such file or directory",
        "Insufficient privileges to run background processes",
        "Install with Chef or Puppet",
        "Chef cookbooks",
        "Puppet modules"
      ],
      "title": "Install from Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "a19bd4cb7582a8653cd83b18e431b23cb4270876",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/install-plugin-central/",
      "published_at": "2021-05-22T02:55:19Z",
      "updated_at": "2021-03-13T01:16:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Requirements Each plugin in Plugin Central includes its own procedures for how to install, use, troubleshoot, and uninstall it. In order to use a plugin, first verify that your environment meets the plugin's documented requirements. Then follow the plugin's procedures to install the plugin agent on one or more hosts in your monitored environment, or to configure a SaaS plugin as directed by your SaaS provider. As a standard security measure for data collection, your application server must support SHA-2 (256-bit). We do not support SHA-1. Also, plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Access rights When using an agent from Plugin Central, deploy the agent giving the fewest possible permissions in order for the plugin agent to function successfully. Unless the plugin publisher gives specific instructions, you should run the plugin agent as a non-privileged user; do not use su or sudo privileges. This applies to both installing and using the agent. If the plugin agent needs credentials for the component (instance) that it is monitoring, create a custom set of credentials just for the monitoring agent to use. These should be separate from any other production credentials. The custom credentials should grant the fewest possible permissions while still allowing the agent to gather the data it needs. For example, for most plugin agents, you should only need to grant read-only access to your components or instances so the plugin agent cannot modify your system in any way. Also, with many agents, you should only need to grant access to read performance and administration data, not necessarily end customer or other sensitive data. For more information, see Plugin security. License key As part of any plugin installation process, you need your New Relic license key. When you are logged into the Plugins UI, the plugin's installation page in Plugin Central also shows your license key so you can easily copy it to your clipboard. If plugins have been published by SaaS providers, they must have access to the New Relic license key for each individual account. They can capture this information when provisioning new customers via the New Relic Partner API, or they can provide a mechanism for customers to share their existing New Relic license key. Typical plugin installation procedures Installation requirements depend on the type of plugin. For example, a Java plugin agent has different requirements than a Ruby plugin agent. Before you use a plugin, review the documentation that the plugin's publisher provides about the agent's installation requirements. To install any plugin from Plugin Central: Go to one.newrelic.com > More > Plugins. From the Plugin Central directory, select the plugin's title or its Get started button. From the plugin's details page, select the Download or Continue button. Follow the plugin's specific instructions to get your plugin installed and running. After you start running a plugin, it collects and sends data to New Relic, usually within five minutes. The plugin name will automatically appear in the Plugins UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible plugin The New Relic Platform Installer (NPI) is a command line utility that helps you easily download, configure, and manage a plugin by installing it with a single command. After you install the NPI tool, you can use it to install any plugins that are compatible with it. Install the plugin Plugins that are compatible with the New Relic Platform Installer include an NPI compatible label. If you have not already installed the NPI tool: Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, click the link that says * Requires New Relic Platform Installer (NPI) - Get it here. From the dropdown that opens, select your operating system. Copy the command that appears, then run it in your terminal to install the NPI tool. Unix-based systems: If you need to set a default user, in your terminal, run: ./npi set user <USER NAME> Copy Once you have installed the NPI tool, you can install any NPI compatible plugin. Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, follow the procedures to copy the specific plugin's installation command. In your terminal, change to the directory ~/newrelic-npi, then paste and run the install command. Manage plugins with the NPI tool To view information that helps you manage NPI-compatible plugins: For usage and commands, help and version flags, and setup examples, run the command --help from the directory ~/newrelic-npi. For a list of plugins that are NPI-compatible, run the command ./npi available. If you need to include proxy settings in your configuration (for both the NPI tool and the plugin's newrelic.json file), use these commands: ./npi config set proxy_host <HOST> ./npi config set proxy_port <PORT> ./npi config set proxy_username <USER NAME> ./npi config set proxy_password <PASSWORD> Copy To view the full path for a plugin, run a where command. This is useful for viewing log files or locating a plugin on your filesystem so you can manually configure it. Troubleshoot NPI-compatible plugins In addition to the troubleshooting procedures provided by the plugin publisher, follow these troubleshooting guidelines when installing NPI-compatible plugins. Duplicate plugins Problem: If you install a plugin and then install the same plugin again through the NPI tool, you will have two versions of the plugin installed. Solution: Delete the older version of the plugin, and then install the NPI-compatible version using the NPI tool. Procedures to delete plugins typically appear in the README file or in other documentation that the plugin publisher provides. Error message ./npi: line 1: bin/node: No such file or directory Problem: The architecture script that you selected when you installed the NPI tool does not match your operating system (for example, x86 instead of x64). Solution: Install the NPI tool using the correct script for your operating system. Error message -bash: ./npi: No such file or directory Problem: You cannot run NPI commands. Solution: You can only access the NPI tool from the location where it was installed. To solve this problem, navigate to the directory ~/newrelic-npi, and run the command again. Insufficient privileges to run background processes Problem: If you try to set a plugin to run as a background process, you might see a message that you have insufficient privileges. Solution: The plugin creates an /etc/init.d script on Linux and a Windows service on Windows, both of which require escalated privileges to run. To solve this problem: Linux: Run the command with sudo in front of it. Windows: Run the command as an administrator. Install with Chef or Puppet In addition to standard installation procedures, you can install plugins with Chef and Puppet configuration management tools. These tools automate plugin installation and make it easier to manage plugins with the rest of your server software. Chef cookbooks Plugins in Plugin Central may come bundled with a Chef script, or you can write your own. If a Chef script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Chef, add the Chef cookbook for New Relic Plugins: Procedures: See Chef's cookbook documentation. New Relic Plugins cookbook: See Chef's community site for newrelic_plugins. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Chef. Then, to install a plugin using Chef: Configure Chef with the plugin details. Run Chef to install the plugin. Chef cookbooks and recipes define roles for specific server configurations. For example, a web server can have the role web_server which includes all of the software and configuration needed for a web server. Here is an example of creating a Chef role for a server running the Wikipedia Java example plugin: name \"newrelic_wikipedia_example_java_plugin\" description \"Server running the New Relic Plugins Wikipedia Example Java Plugin\" run_list( \"recipe[newrelic_plugins::wikipedia_example_java]\" ) default_attributes( \"newrelic\" => { \"license_key\" => \"NEW_RELIC_LICENSE_KEY\", \"wikipedia_example_java\" => { \"install_path\" => \"/path/to/plugin\", \"user\" => \"newrelic\" } } ) Copy Puppet modules Plugins in Plugin Central may come bundled with a Puppet script, or you can write your own. If a Puppet script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Puppet, add New Relic's Puppet module for plugins: Procedures: See Puppet's module documentation. New Relic plugin modules: See the Puppet Forge community site. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Puppet. Then, to install a plugin using Puppet: Configure Puppet with the plugin details. Run Puppet to install the plugin. Puppet modules contain manifest files that are a collection of classes for configuring a server. For example, a web server can be assigned several classes for the necessary software for a web server. Here is an example of using a Puppet class for a server running the Wikipedia Java example plugin: class { 'newrelic_plugins::wikipedia_example_java': license_key => 'NEW_RELIC_LICENSE_KEY', install_path => '/path/to/plugin', user => 'newrelic' } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.29892,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install from <em>Plugin</em> Central",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " to <em>get</em> your <em>plugin</em> installed and running. After you <em>start</em> running a <em>plugin</em>, it collects and sends data to <em>New</em> <em>Relic</em>, usually within five minutes. The <em>plugin</em> name will automatically appear in the <em>Plugins</em> UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible"
      },
      "id": "60445cdd196a6788d9960f28"
    }
  ],
  "/docs/plugins/plugins-new-relic/get-started/introduction-plugin-central": [
    {
      "sections": [
        "Plugin security",
        "Important",
        "Limited access to legacy plugins",
        "Open community",
        "Third-party content",
        "Source code",
        "Access to license keys",
        "Access rights",
        "Plugin storage"
      ],
      "title": "Plugin security",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "8476f9a0e63a7f58388b4a6e7fb8b089843033e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/plugin-security/",
      "published_at": "2021-05-22T02:54:14Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Open community New Relic's Plugins tool been designed to be open and extensible, so that any New Relic user, developer, technology vendor, or partner may publish publicly accessible plugins within Plugin Central. Anyone who has a New Relic account can install and use these plugins through their New Relic user interface. Exception: Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Having an open community where users both create and consume plugins can raise questions surrounding security. This document intends to address any security considerations for using these plugins. For more information about New Relic's security measures, see our security and data privacy documentation, or visit the New Relic security website. Third-party content For some plugins, New Relic, Inc. is the publisher, and will be clearly identified as the publisher. However, as an open resource, many plugins are created by our partners and third-party developers. Every plugin in the Plugin Central directory clearly identifies whether it was published by a New Relic developer or by a third party. We require plugin publishers to provide an About link to their website, documentation about what the plugin is for and how to use it, and a link to obtain support when using the plugin. We also require plugin publishers to review and accept the Developer Terms of Service Agreement before they can make their plugin publicly accessible. You can review all information provided by the publisher before installing any plugin. Only those plugins that identify New Relic, Inc. as the publisher fall under New Relic's posted privacy policy. For more information, see the New Relic security website. For other plugins, refer to the publisher's security and compliance statements. Source code If you have any concerns about plugins developed with the SDKs for plugins, you can review the source code and verify that the plugin agents behave as expected. The plugin agent's code is light, and it can be reviewed in minutes. Access to license keys Always keep your New Relic license key private. Typically access to your license key is needed only to record metric data or deployments for your applications, hosts, or plugins that are monitored by New Relic, not to introduce new data or code. No other access is allowed. Access rights When developing a plugin agent, authors and publishers need to consider the environment in which they will be run. You should do everything possible to reduce the level of permissions your plugin users need to grant to the agent in order for it to run correctly. In particular: Unless it is absolutely necessary, do not require su or sudo permissions in order to install your agent or support software on your users' computers. In this situation, the requirements should be limited in scope and well-documented. For additional information about access rights for plugin users, see the documentation about installing a plugin. When running your agent on the users' computers, do not require su or sudo permissions. The components (instances) your plugin agent is monitoring should only need to grant read-only permissions in order for your agent to perform its actions. As much as possible, the components (instances) your plugin agent is monitoring should be able to reduce the levels of information and access needed. When documenting your plugin, describe what level of permissions your plugin agent requires from the components (instances) it is monitoring and why this is necessary. Following these steps will make it easier for your plugin users to install your agent and increase their confidence that your agent cannot harm their components or instances being monitored. This will also reduce the likelihood of user problems if your agent has any serious bugs or other defects. Plugin storage Plugins only need access to their monitored systems and New Relic simply to report metrics. You may want to consider running plugin agents in sequestered systems with limited network access that allow no more than the minimum required network access. Also, data retention for plugins follows New Relic's standard policies. If you have any concerns about deploying any plugin from Plugin Central, follow your organization's guidelines. If for any reason you do not trust the source of an existing plugin, try creating your own version.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.17021,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> security",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": ") as of June 16, 2021. For more information, see our Explorers Hub post. Open community <em>New</em> <em>Relic</em>&#x27;s <em>Plugins</em> tool been designed to be open and extensible, so that any <em>New</em> <em>Relic</em> user, developer, technology vendor, or partner may publish publicly accessible <em>plugins</em> within <em>Plugin</em> Central. Anyone who has"
      },
      "id": "603ebeb9e7b9d25a642a07d4"
    },
    {
      "sections": [
        "Get plugin help",
        "Important",
        "Limited access to legacy plugins",
        "Plugin help resources"
      ],
      "title": "Get plugin help",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "34d38b612d908d489b251716e2856b31644e03f5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/get-plugin-help/",
      "published_at": "2021-05-22T02:54:14Z",
      "updated_at": "2021-03-13T03:10:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin help resources Each plugin in New Relic's Plugin Central typically includes troubleshooting information. When you select the plugin's Download or Continue button, the plugin should include a README file or refer to other documentation. If you experience problems that the plugin's documentation does not address, contact the plugin publisher's support resources identified in the plugin's Get support link. Be prepared to provide information such as: Are you able to connect to the plugins UI or able to connect to the monitored server? Do you have a New Relic license key or a message about an invalid license key? If you received a specific error, what was its error number or message? Can you provide a screenshot of the plugin's webpage where you are experiencing problems? Can you provide a log file? Can you provide your configuration file? Can you restart the plugin? Plugins in Plugin Central are not supported with accounts that host data in the EU region data center.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.36687,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Get</em> <em>plugin</em> help",
        "sections": "<em>Get</em> <em>plugin</em> help",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with <em>New</em> <em>Relic</em>, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools"
      },
      "id": "60445cdde7b9d2a2ef579a13"
    },
    {
      "sections": [
        "Install from Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Requirements",
        "Access rights",
        "License key",
        "Typical plugin installation procedures",
        "Install an NPI-compatible plugin",
        "Install the plugin",
        "Manage plugins with the NPI tool",
        "Troubleshoot NPI-compatible plugins",
        "Duplicate plugins",
        "Error message ./npi: line 1: bin/node: No such file or directory",
        "Error message -bash: ./npi: No such file or directory",
        "Insufficient privileges to run background processes",
        "Install with Chef or Puppet",
        "Chef cookbooks",
        "Puppet modules"
      ],
      "title": "Install from Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "a19bd4cb7582a8653cd83b18e431b23cb4270876",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/install-plugin-central/",
      "published_at": "2021-05-22T02:55:19Z",
      "updated_at": "2021-03-13T01:16:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Requirements Each plugin in Plugin Central includes its own procedures for how to install, use, troubleshoot, and uninstall it. In order to use a plugin, first verify that your environment meets the plugin's documented requirements. Then follow the plugin's procedures to install the plugin agent on one or more hosts in your monitored environment, or to configure a SaaS plugin as directed by your SaaS provider. As a standard security measure for data collection, your application server must support SHA-2 (256-bit). We do not support SHA-1. Also, plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Access rights When using an agent from Plugin Central, deploy the agent giving the fewest possible permissions in order for the plugin agent to function successfully. Unless the plugin publisher gives specific instructions, you should run the plugin agent as a non-privileged user; do not use su or sudo privileges. This applies to both installing and using the agent. If the plugin agent needs credentials for the component (instance) that it is monitoring, create a custom set of credentials just for the monitoring agent to use. These should be separate from any other production credentials. The custom credentials should grant the fewest possible permissions while still allowing the agent to gather the data it needs. For example, for most plugin agents, you should only need to grant read-only access to your components or instances so the plugin agent cannot modify your system in any way. Also, with many agents, you should only need to grant access to read performance and administration data, not necessarily end customer or other sensitive data. For more information, see Plugin security. License key As part of any plugin installation process, you need your New Relic license key. When you are logged into the Plugins UI, the plugin's installation page in Plugin Central also shows your license key so you can easily copy it to your clipboard. If plugins have been published by SaaS providers, they must have access to the New Relic license key for each individual account. They can capture this information when provisioning new customers via the New Relic Partner API, or they can provide a mechanism for customers to share their existing New Relic license key. Typical plugin installation procedures Installation requirements depend on the type of plugin. For example, a Java plugin agent has different requirements than a Ruby plugin agent. Before you use a plugin, review the documentation that the plugin's publisher provides about the agent's installation requirements. To install any plugin from Plugin Central: Go to one.newrelic.com > More > Plugins. From the Plugin Central directory, select the plugin's title or its Get started button. From the plugin's details page, select the Download or Continue button. Follow the plugin's specific instructions to get your plugin installed and running. After you start running a plugin, it collects and sends data to New Relic, usually within five minutes. The plugin name will automatically appear in the Plugins UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible plugin The New Relic Platform Installer (NPI) is a command line utility that helps you easily download, configure, and manage a plugin by installing it with a single command. After you install the NPI tool, you can use it to install any plugins that are compatible with it. Install the plugin Plugins that are compatible with the New Relic Platform Installer include an NPI compatible label. If you have not already installed the NPI tool: Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, click the link that says * Requires New Relic Platform Installer (NPI) - Get it here. From the dropdown that opens, select your operating system. Copy the command that appears, then run it in your terminal to install the NPI tool. Unix-based systems: If you need to set a default user, in your terminal, run: ./npi set user <USER NAME> Copy Once you have installed the NPI tool, you can install any NPI compatible plugin. Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, follow the procedures to copy the specific plugin's installation command. In your terminal, change to the directory ~/newrelic-npi, then paste and run the install command. Manage plugins with the NPI tool To view information that helps you manage NPI-compatible plugins: For usage and commands, help and version flags, and setup examples, run the command --help from the directory ~/newrelic-npi. For a list of plugins that are NPI-compatible, run the command ./npi available. If you need to include proxy settings in your configuration (for both the NPI tool and the plugin's newrelic.json file), use these commands: ./npi config set proxy_host <HOST> ./npi config set proxy_port <PORT> ./npi config set proxy_username <USER NAME> ./npi config set proxy_password <PASSWORD> Copy To view the full path for a plugin, run a where command. This is useful for viewing log files or locating a plugin on your filesystem so you can manually configure it. Troubleshoot NPI-compatible plugins In addition to the troubleshooting procedures provided by the plugin publisher, follow these troubleshooting guidelines when installing NPI-compatible plugins. Duplicate plugins Problem: If you install a plugin and then install the same plugin again through the NPI tool, you will have two versions of the plugin installed. Solution: Delete the older version of the plugin, and then install the NPI-compatible version using the NPI tool. Procedures to delete plugins typically appear in the README file or in other documentation that the plugin publisher provides. Error message ./npi: line 1: bin/node: No such file or directory Problem: The architecture script that you selected when you installed the NPI tool does not match your operating system (for example, x86 instead of x64). Solution: Install the NPI tool using the correct script for your operating system. Error message -bash: ./npi: No such file or directory Problem: You cannot run NPI commands. Solution: You can only access the NPI tool from the location where it was installed. To solve this problem, navigate to the directory ~/newrelic-npi, and run the command again. Insufficient privileges to run background processes Problem: If you try to set a plugin to run as a background process, you might see a message that you have insufficient privileges. Solution: The plugin creates an /etc/init.d script on Linux and a Windows service on Windows, both of which require escalated privileges to run. To solve this problem: Linux: Run the command with sudo in front of it. Windows: Run the command as an administrator. Install with Chef or Puppet In addition to standard installation procedures, you can install plugins with Chef and Puppet configuration management tools. These tools automate plugin installation and make it easier to manage plugins with the rest of your server software. Chef cookbooks Plugins in Plugin Central may come bundled with a Chef script, or you can write your own. If a Chef script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Chef, add the Chef cookbook for New Relic Plugins: Procedures: See Chef's cookbook documentation. New Relic Plugins cookbook: See Chef's community site for newrelic_plugins. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Chef. Then, to install a plugin using Chef: Configure Chef with the plugin details. Run Chef to install the plugin. Chef cookbooks and recipes define roles for specific server configurations. For example, a web server can have the role web_server which includes all of the software and configuration needed for a web server. Here is an example of creating a Chef role for a server running the Wikipedia Java example plugin: name \"newrelic_wikipedia_example_java_plugin\" description \"Server running the New Relic Plugins Wikipedia Example Java Plugin\" run_list( \"recipe[newrelic_plugins::wikipedia_example_java]\" ) default_attributes( \"newrelic\" => { \"license_key\" => \"NEW_RELIC_LICENSE_KEY\", \"wikipedia_example_java\" => { \"install_path\" => \"/path/to/plugin\", \"user\" => \"newrelic\" } } ) Copy Puppet modules Plugins in Plugin Central may come bundled with a Puppet script, or you can write your own. If a Puppet script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Puppet, add New Relic's Puppet module for plugins: Procedures: See Puppet's module documentation. New Relic plugin modules: See the Puppet Forge community site. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Puppet. Then, to install a plugin using Puppet: Configure Puppet with the plugin details. Run Puppet to install the plugin. Puppet modules contain manifest files that are a collection of classes for configuring a server. For example, a web server can be assigned several classes for the necessary software for a web server. Here is an example of using a Puppet class for a server running the Wikipedia Java example plugin: class { 'newrelic_plugins::wikipedia_example_java': license_key => 'NEW_RELIC_LICENSE_KEY', install_path => '/path/to/plugin', user => 'newrelic' } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.2989,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install from <em>Plugin</em> Central",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " to <em>get</em> your <em>plugin</em> installed and running. After you <em>start</em> running a <em>plugin</em>, it collects and sends data to <em>New</em> <em>Relic</em>, usually within five minutes. The <em>plugin</em> name will automatically appear in the <em>Plugins</em> UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible"
      },
      "id": "60445cdd196a6788d9960f28"
    }
  ],
  "/docs/plugins/plugins-new-relic/get-started/plugin-security": [
    {
      "sections": [
        "Introduction to Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Developers and SaaS providers",
        "Plugin Central directory",
        "View plugins in Plugin Central",
        "Get started with plugins",
        "Ratings",
        "Reviews",
        "Plugin feedback policy"
      ],
      "title": "Introduction to Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "aa864c660f02e96be1c9cec897300ed96e5e33cb",
      "image": "https://docs.newrelic.com/static/916b76819340fbeb3becda03908ca2d2/c1b63/plugins-landing-page-prototype071720.png",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/introduction-plugin-central/",
      "published_at": "2021-05-22T02:54:14Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Developers and SaaS providers Plugin CentralÂ is where partners, third-party vendors, and users could publish plugin agents that collect selected data. This is also where you could install and view the plugin data on your Plugins dashboards as a set of summary metrics, charts, and tables. In most cases, the plugin's agent runs on the users' app server. SaaS or PaaS providers can also create plugin agents that run on their system and report metrics for customers who use New Relic to monitor their applications. For more information, see the specific plugin agent SDK documentation. Plugin Central directory Important Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. The plugin agent collects, sends, and stores the metric data. Plugin Central provides a searchable directory for plugins that developers publish and make publicly available to users. From Plugin Central, you can select and download whatever plugins you want to use. After you install or configure a plugin, you can view the plugin's dashboard data securely from the plugins user interface in New Relic One. View plugins in Plugin Central To view information about available (published) plugins: Go to one.newrelic.com > More > Plugins. By default, available plugins appear in alphabetical order. From the Plugin Central directory in New Relic One, select any published plugin to view a description and install it. Depending on the selected plugin, installation and configuration instructions will vary. Refer to your plugin's documentation for specific details. After you install or configure a plugin, it automatically appears on your Plugins menu in New Relic One, where you can select and view it directly. You may need to wait a few minutes for data to appear. Get started with plugins Here are some tips for making the most of Plugin Central. Ratings Plugins listed in New Relic's Plugin Central include a 5-star rating system, ranging from 1 (lowest) to 5 (highest). This helps you make more informed choices when choosing among similar plugins. This also provides a way for you to share what you think of a plugin. You can rate as many plugins as you want. If you have not voted for a plugin, its current star rating (gold or gray) does not include an outline. You can have only one vote for a specific plugin, and you cannot delete your vote. However, you can change your rating level anytime. After you select the star level (1 to 5) to cast your vote, the stars change to gold with an outline at the rating level you selected. Reviews Plugin Central includes a simple review system to share what you think of a plugin and to provide tips for others about installation and usage. Existing reviews appear when you select an individual plugin's title or Get started link. You can write as many reviews for as many plugins as you want, following the feedback policy. You can also edit or delete your own reviews. When you write a review for a plugin, if you have not already rated the plugin, you must provide a rating. Subsequent reviews will use the rating you provided. You can change your rating at any time. Plugin administrators also reserve the right to delete reviews if necessary. For more information, see Plugin feedback policy. Plugin feedback policy Here are some types of reviews we welcome: Your experience using the plugin Suggestions for improvement Your thoughts or opinions about the plugin, even if you disagree with us or point out mistakes Constructive criticism Your review must not contain personal attacks, name calling, libel, defamation, hate speech, etc. And under no circumstances should you post anything that could be taken as threatening, harassing, bullying, obscene, pornographic, sexist, or racist. We reserve the right to moderate reviews to make sure the tone is civil and fair. We will delete a review or rating in these situations: Spam, such as off-topic or nonsense reviews Inappropriate reviews including profanity and links to offensive content Attacks, including personal attacks against the plugin author or other reviewers, as well as attacks against New Relic or other companies. This does not mean you can't disagree with us or with each other, just be polite about it. False reviews that contain misleading statements or claims Other; for example, reviews or ratings that appear to be gaming the system",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.17021,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Plugin</em> Central",
        "sections": "<em>Get</em> <em>started</em> with <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": ". You may need to wait a few minutes for data to appear. <em>Get</em> <em>started</em> with <em>plugins</em> Here are some tips for making the most of <em>Plugin</em> Central. Ratings <em>Plugins</em> listed in <em>New</em> <em>Relic</em>&#x27;s <em>Plugin</em> Central include a 5-star rating system, ranging from 1 (lowest) to 5 (highest). This helps you make more informed"
      },
      "id": "603e81b428ccbc63bdeba79e"
    },
    {
      "sections": [
        "Get plugin help",
        "Important",
        "Limited access to legacy plugins",
        "Plugin help resources"
      ],
      "title": "Get plugin help",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "34d38b612d908d489b251716e2856b31644e03f5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/get-plugin-help/",
      "published_at": "2021-05-22T02:54:14Z",
      "updated_at": "2021-03-13T03:10:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin help resources Each plugin in New Relic's Plugin Central typically includes troubleshooting information. When you select the plugin's Download or Continue button, the plugin should include a README file or refer to other documentation. If you experience problems that the plugin's documentation does not address, contact the plugin publisher's support resources identified in the plugin's Get support link. Be prepared to provide information such as: Are you able to connect to the plugins UI or able to connect to the monitored server? Do you have a New Relic license key or a message about an invalid license key? If you received a specific error, what was its error number or message? Can you provide a screenshot of the plugin's webpage where you are experiencing problems? Can you provide a log file? Can you provide your configuration file? Can you restart the plugin? Plugins in Plugin Central are not supported with accounts that host data in the EU region data center.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.36687,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Get</em> <em>plugin</em> help",
        "sections": "<em>Get</em> <em>plugin</em> help",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with <em>New</em> <em>Relic</em>, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools"
      },
      "id": "60445cdde7b9d2a2ef579a13"
    },
    {
      "sections": [
        "Install from Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Requirements",
        "Access rights",
        "License key",
        "Typical plugin installation procedures",
        "Install an NPI-compatible plugin",
        "Install the plugin",
        "Manage plugins with the NPI tool",
        "Troubleshoot NPI-compatible plugins",
        "Duplicate plugins",
        "Error message ./npi: line 1: bin/node: No such file or directory",
        "Error message -bash: ./npi: No such file or directory",
        "Insufficient privileges to run background processes",
        "Install with Chef or Puppet",
        "Chef cookbooks",
        "Puppet modules"
      ],
      "title": "Install from Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "a19bd4cb7582a8653cd83b18e431b23cb4270876",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/install-plugin-central/",
      "published_at": "2021-05-22T02:55:19Z",
      "updated_at": "2021-03-13T01:16:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Requirements Each plugin in Plugin Central includes its own procedures for how to install, use, troubleshoot, and uninstall it. In order to use a plugin, first verify that your environment meets the plugin's documented requirements. Then follow the plugin's procedures to install the plugin agent on one or more hosts in your monitored environment, or to configure a SaaS plugin as directed by your SaaS provider. As a standard security measure for data collection, your application server must support SHA-2 (256-bit). We do not support SHA-1. Also, plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Access rights When using an agent from Plugin Central, deploy the agent giving the fewest possible permissions in order for the plugin agent to function successfully. Unless the plugin publisher gives specific instructions, you should run the plugin agent as a non-privileged user; do not use su or sudo privileges. This applies to both installing and using the agent. If the plugin agent needs credentials for the component (instance) that it is monitoring, create a custom set of credentials just for the monitoring agent to use. These should be separate from any other production credentials. The custom credentials should grant the fewest possible permissions while still allowing the agent to gather the data it needs. For example, for most plugin agents, you should only need to grant read-only access to your components or instances so the plugin agent cannot modify your system in any way. Also, with many agents, you should only need to grant access to read performance and administration data, not necessarily end customer or other sensitive data. For more information, see Plugin security. License key As part of any plugin installation process, you need your New Relic license key. When you are logged into the Plugins UI, the plugin's installation page in Plugin Central also shows your license key so you can easily copy it to your clipboard. If plugins have been published by SaaS providers, they must have access to the New Relic license key for each individual account. They can capture this information when provisioning new customers via the New Relic Partner API, or they can provide a mechanism for customers to share their existing New Relic license key. Typical plugin installation procedures Installation requirements depend on the type of plugin. For example, a Java plugin agent has different requirements than a Ruby plugin agent. Before you use a plugin, review the documentation that the plugin's publisher provides about the agent's installation requirements. To install any plugin from Plugin Central: Go to one.newrelic.com > More > Plugins. From the Plugin Central directory, select the plugin's title or its Get started button. From the plugin's details page, select the Download or Continue button. Follow the plugin's specific instructions to get your plugin installed and running. After you start running a plugin, it collects and sends data to New Relic, usually within five minutes. The plugin name will automatically appear in the Plugins UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible plugin The New Relic Platform Installer (NPI) is a command line utility that helps you easily download, configure, and manage a plugin by installing it with a single command. After you install the NPI tool, you can use it to install any plugins that are compatible with it. Install the plugin Plugins that are compatible with the New Relic Platform Installer include an NPI compatible label. If you have not already installed the NPI tool: Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, click the link that says * Requires New Relic Platform Installer (NPI) - Get it here. From the dropdown that opens, select your operating system. Copy the command that appears, then run it in your terminal to install the NPI tool. Unix-based systems: If you need to set a default user, in your terminal, run: ./npi set user <USER NAME> Copy Once you have installed the NPI tool, you can install any NPI compatible plugin. Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, follow the procedures to copy the specific plugin's installation command. In your terminal, change to the directory ~/newrelic-npi, then paste and run the install command. Manage plugins with the NPI tool To view information that helps you manage NPI-compatible plugins: For usage and commands, help and version flags, and setup examples, run the command --help from the directory ~/newrelic-npi. For a list of plugins that are NPI-compatible, run the command ./npi available. If you need to include proxy settings in your configuration (for both the NPI tool and the plugin's newrelic.json file), use these commands: ./npi config set proxy_host <HOST> ./npi config set proxy_port <PORT> ./npi config set proxy_username <USER NAME> ./npi config set proxy_password <PASSWORD> Copy To view the full path for a plugin, run a where command. This is useful for viewing log files or locating a plugin on your filesystem so you can manually configure it. Troubleshoot NPI-compatible plugins In addition to the troubleshooting procedures provided by the plugin publisher, follow these troubleshooting guidelines when installing NPI-compatible plugins. Duplicate plugins Problem: If you install a plugin and then install the same plugin again through the NPI tool, you will have two versions of the plugin installed. Solution: Delete the older version of the plugin, and then install the NPI-compatible version using the NPI tool. Procedures to delete plugins typically appear in the README file or in other documentation that the plugin publisher provides. Error message ./npi: line 1: bin/node: No such file or directory Problem: The architecture script that you selected when you installed the NPI tool does not match your operating system (for example, x86 instead of x64). Solution: Install the NPI tool using the correct script for your operating system. Error message -bash: ./npi: No such file or directory Problem: You cannot run NPI commands. Solution: You can only access the NPI tool from the location where it was installed. To solve this problem, navigate to the directory ~/newrelic-npi, and run the command again. Insufficient privileges to run background processes Problem: If you try to set a plugin to run as a background process, you might see a message that you have insufficient privileges. Solution: The plugin creates an /etc/init.d script on Linux and a Windows service on Windows, both of which require escalated privileges to run. To solve this problem: Linux: Run the command with sudo in front of it. Windows: Run the command as an administrator. Install with Chef or Puppet In addition to standard installation procedures, you can install plugins with Chef and Puppet configuration management tools. These tools automate plugin installation and make it easier to manage plugins with the rest of your server software. Chef cookbooks Plugins in Plugin Central may come bundled with a Chef script, or you can write your own. If a Chef script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Chef, add the Chef cookbook for New Relic Plugins: Procedures: See Chef's cookbook documentation. New Relic Plugins cookbook: See Chef's community site for newrelic_plugins. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Chef. Then, to install a plugin using Chef: Configure Chef with the plugin details. Run Chef to install the plugin. Chef cookbooks and recipes define roles for specific server configurations. For example, a web server can have the role web_server which includes all of the software and configuration needed for a web server. Here is an example of creating a Chef role for a server running the Wikipedia Java example plugin: name \"newrelic_wikipedia_example_java_plugin\" description \"Server running the New Relic Plugins Wikipedia Example Java Plugin\" run_list( \"recipe[newrelic_plugins::wikipedia_example_java]\" ) default_attributes( \"newrelic\" => { \"license_key\" => \"NEW_RELIC_LICENSE_KEY\", \"wikipedia_example_java\" => { \"install_path\" => \"/path/to/plugin\", \"user\" => \"newrelic\" } } ) Copy Puppet modules Plugins in Plugin Central may come bundled with a Puppet script, or you can write your own. If a Puppet script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Puppet, add New Relic's Puppet module for plugins: Procedures: See Puppet's module documentation. New Relic plugin modules: See the Puppet Forge community site. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Puppet. Then, to install a plugin using Puppet: Configure Puppet with the plugin details. Run Puppet to install the plugin. Puppet modules contain manifest files that are a collection of classes for configuring a server. For example, a web server can be assigned several classes for the necessary software for a web server. Here is an example of using a Puppet class for a server running the Wikipedia Java example plugin: class { 'newrelic_plugins::wikipedia_example_java': license_key => 'NEW_RELIC_LICENSE_KEY', install_path => '/path/to/plugin', user => 'newrelic' } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.2989,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install from <em>Plugin</em> Central",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " to <em>get</em> your <em>plugin</em> installed and running. After you <em>start</em> running a <em>plugin</em>, it collects and sends data to <em>New</em> <em>Relic</em>, usually within five minutes. The <em>plugin</em> name will automatically appear in the <em>Plugins</em> UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible"
      },
      "id": "60445cdd196a6788d9960f28"
    }
  ],
  "/docs/plugins/plugins-new-relic/install-plugins/install-plugin-central": [
    {
      "sections": [
        "Use a Plugin Central plugin",
        "Important",
        "Limited access to legacy plugins",
        "View plugin dashboard details",
        "Plugin summary",
        "Plugin dashboards",
        "Plugin alerts",
        "Delete a plugin",
        "Remove plugin components (instances)",
        "Delete the plugin"
      ],
      "title": "Use a Plugin Central plugin",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "feae68c2e9d870f7c02fff5ffb69f2c262a0cd6c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/use-plugin-central-plugin/",
      "published_at": "2021-05-22T05:25:43Z",
      "updated_at": "2021-03-16T11:03:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. View plugin dashboard details Each plugin in Plugin Central includes procedures for how to install, use, troubleshoot, and uninstall it. Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. After you install a plugin, it starts to receive data, usually within five minutes. The plugin automatically appears with a short name and icon on your Plugins menu in New Relic One. You do not need to select it from Plugin Central. The amount and types of information on the plugin's summary page and dashboards depend on the specific plugin. For example, a plugin may have one or more components (instances) and one or more dashboards. To view summary and dashboard details about the plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, review the list of components or instances, summary metrics, and list of Recent Events. To view dashboard details about any component or instance, select its name. Plugin summary Depending on the plugin, the summary includes: One or more components or instances (what the plugin agent is monitoring, typically a host/port pair) Zero to five summary metrics for the past three minutes (values such as average, total, minimum, maximum, standard deviation, rate, or count) with optional alerts Recent events list, including deployments, notifications, and alerts Other information about alert violations, events, and activity If your plugin has 100 or more components or instances, you can search for a specific component instance. Here is a summary of additional standard features. If you want to... Do this... View version information for a component's or instance's agent Mouse over the component's name. Change the sort order On the title row of the plugin's summary page, select the up or down arrow for a component (instance) or a summary metric's label. Show or hide items on the events and activity list Select an event icon, or select All. View details about an event On the events and activity list, select the link. View page details for a component or instance Select the name or a summary metric for the component (instance). Plugin dashboards Depending on the plugin, it may have one or more dashboards, and each dashboard may present data as a chart or a table. You can use any of New Relic's standard dashboard features to drill down into detailed information. The customized dashboards that show plugin data are part of the plugin. Users cannot add or remove these dashboards. This must be done by the author or publisher as part of a plugin update. Plugin alerts If the plugin publisher set Critical (red) or Caution (yellow) alert conditions for your plugin's components or instances, you can view details direct in the user interface. For example, you can: Select and view alert details. Change the existing thresholds. Set your alert notification options; for example, to receive email notifications for Critical events. Delete a plugin Each plugin in Plugin Central includes procedures for how to uninstall it. When you select the plugin's Download or Continue button, the plugin should include a README file or refer to other documentation resources. Remove plugin components (instances) At a minimum, your plugin must stop reporting data before you start uninstalling it. Make sure the health status for your plugin's components (instances) are gray. Depending on the plugin, there may be other dependencies before disabling or uninstalling it. For example, plugins from SaaS providers may have different requirements. Be sure to review the instructions that the plugin's publisher provides. Then, to remove individual components from your plugin, click the settings icon for each component (instance). Delete the plugin After you remove each component (instance) for the plugin, the plugin icon will automatically disappear from your Plugins menu in the New Relic UI. You do not need to do anything else to delete the plugin. If you are the plugin's publisher and need to delete the plugin from Plugin Central, go to support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.0552,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use a <em>Plugin</em> Central <em>plugin</em>",
        "sections": "Use a <em>Plugin</em> Central <em>plugin</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " center. After you <em>install</em> a <em>plugin</em>, it starts to receive data, usually within five minutes. The <em>plugin</em> automatically appears with a short name and icon on your <em>Plugins</em> menu in <em>New</em> <em>Relic</em> One. You do not need to select it from <em>Plugin</em> Central. The amount and types of information on the <em>plugin</em>"
      },
      "id": "603ebf0928ccbcf8d0eba762"
    },
    {
      "sections": [
        "Plugin security",
        "Important",
        "Limited access to legacy plugins",
        "Open community",
        "Third-party content",
        "Source code",
        "Access to license keys",
        "Access rights",
        "Plugin storage"
      ],
      "title": "Plugin security",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "8476f9a0e63a7f58388b4a6e7fb8b089843033e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/plugin-security/",
      "published_at": "2021-05-22T02:54:14Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Open community New Relic's Plugins tool been designed to be open and extensible, so that any New Relic user, developer, technology vendor, or partner may publish publicly accessible plugins within Plugin Central. Anyone who has a New Relic account can install and use these plugins through their New Relic user interface. Exception: Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Having an open community where users both create and consume plugins can raise questions surrounding security. This document intends to address any security considerations for using these plugins. For more information about New Relic's security measures, see our security and data privacy documentation, or visit the New Relic security website. Third-party content For some plugins, New Relic, Inc. is the publisher, and will be clearly identified as the publisher. However, as an open resource, many plugins are created by our partners and third-party developers. Every plugin in the Plugin Central directory clearly identifies whether it was published by a New Relic developer or by a third party. We require plugin publishers to provide an About link to their website, documentation about what the plugin is for and how to use it, and a link to obtain support when using the plugin. We also require plugin publishers to review and accept the Developer Terms of Service Agreement before they can make their plugin publicly accessible. You can review all information provided by the publisher before installing any plugin. Only those plugins that identify New Relic, Inc. as the publisher fall under New Relic's posted privacy policy. For more information, see the New Relic security website. For other plugins, refer to the publisher's security and compliance statements. Source code If you have any concerns about plugins developed with the SDKs for plugins, you can review the source code and verify that the plugin agents behave as expected. The plugin agent's code is light, and it can be reviewed in minutes. Access to license keys Always keep your New Relic license key private. Typically access to your license key is needed only to record metric data or deployments for your applications, hosts, or plugins that are monitored by New Relic, not to introduce new data or code. No other access is allowed. Access rights When developing a plugin agent, authors and publishers need to consider the environment in which they will be run. You should do everything possible to reduce the level of permissions your plugin users need to grant to the agent in order for it to run correctly. In particular: Unless it is absolutely necessary, do not require su or sudo permissions in order to install your agent or support software on your users' computers. In this situation, the requirements should be limited in scope and well-documented. For additional information about access rights for plugin users, see the documentation about installing a plugin. When running your agent on the users' computers, do not require su or sudo permissions. The components (instances) your plugin agent is monitoring should only need to grant read-only permissions in order for your agent to perform its actions. As much as possible, the components (instances) your plugin agent is monitoring should be able to reduce the levels of information and access needed. When documenting your plugin, describe what level of permissions your plugin agent requires from the components (instances) it is monitoring and why this is necessary. Following these steps will make it easier for your plugin users to install your agent and increase their confidence that your agent cannot harm their components or instances being monitored. This will also reduce the likelihood of user problems if your agent has any serious bugs or other defects. Plugin storage Plugins only need access to their monitored systems and New Relic simply to report metrics. You may want to consider running plugin agents in sequestered systems with limited network access that allow no more than the minimum required network access. Also, data retention for plugins follows New Relic's standard policies. If you have any concerns about deploying any plugin from Plugin Central, follow your organization's guidelines. If for any reason you do not trust the source of an existing plugin, try creating your own version.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.337944,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> security",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " a <em>New</em> <em>Relic</em> account can <em>install</em> and use these <em>plugins</em> through their <em>New</em> <em>Relic</em> user interface. Exception: <em>Plugins</em> in <em>Plugin</em> Central are not supported with accounts that host data in the EU region data center. Having an open community where users both create and consume <em>plugins</em> can raise questions"
      },
      "id": "603ebeb9e7b9d25a642a07d4"
    },
    {
      "sections": [
        "Introduction to Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Developers and SaaS providers",
        "Plugin Central directory",
        "View plugins in Plugin Central",
        "Get started with plugins",
        "Ratings",
        "Reviews",
        "Plugin feedback policy"
      ],
      "title": "Introduction to Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "aa864c660f02e96be1c9cec897300ed96e5e33cb",
      "image": "https://docs.newrelic.com/static/916b76819340fbeb3becda03908ca2d2/c1b63/plugins-landing-page-prototype071720.png",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/introduction-plugin-central/",
      "published_at": "2021-05-22T02:54:14Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Developers and SaaS providers Plugin CentralÂ is where partners, third-party vendors, and users could publish plugin agents that collect selected data. This is also where you could install and view the plugin data on your Plugins dashboards as a set of summary metrics, charts, and tables. In most cases, the plugin's agent runs on the users' app server. SaaS or PaaS providers can also create plugin agents that run on their system and report metrics for customers who use New Relic to monitor their applications. For more information, see the specific plugin agent SDK documentation. Plugin Central directory Important Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. The plugin agent collects, sends, and stores the metric data. Plugin Central provides a searchable directory for plugins that developers publish and make publicly available to users. From Plugin Central, you can select and download whatever plugins you want to use. After you install or configure a plugin, you can view the plugin's dashboard data securely from the plugins user interface in New Relic One. View plugins in Plugin Central To view information about available (published) plugins: Go to one.newrelic.com > More > Plugins. By default, available plugins appear in alphabetical order. From the Plugin Central directory in New Relic One, select any published plugin to view a description and install it. Depending on the selected plugin, installation and configuration instructions will vary. Refer to your plugin's documentation for specific details. After you install or configure a plugin, it automatically appears on your Plugins menu in New Relic One, where you can select and view it directly. You may need to wait a few minutes for data to appear. Get started with plugins Here are some tips for making the most of Plugin Central. Ratings Plugins listed in New Relic's Plugin Central include a 5-star rating system, ranging from 1 (lowest) to 5 (highest). This helps you make more informed choices when choosing among similar plugins. This also provides a way for you to share what you think of a plugin. You can rate as many plugins as you want. If you have not voted for a plugin, its current star rating (gold or gray) does not include an outline. You can have only one vote for a specific plugin, and you cannot delete your vote. However, you can change your rating level anytime. After you select the star level (1 to 5) to cast your vote, the stars change to gold with an outline at the rating level you selected. Reviews Plugin Central includes a simple review system to share what you think of a plugin and to provide tips for others about installation and usage. Existing reviews appear when you select an individual plugin's title or Get started link. You can write as many reviews for as many plugins as you want, following the feedback policy. You can also edit or delete your own reviews. When you write a review for a plugin, if you have not already rated the plugin, you must provide a rating. Subsequent reviews will use the rating you provided. You can change your rating at any time. Plugin administrators also reserve the right to delete reviews if necessary. For more information, see Plugin feedback policy. Plugin feedback policy Here are some types of reviews we welcome: Your experience using the plugin Suggestions for improvement Your thoughts or opinions about the plugin, even if you disagree with us or point out mistakes Constructive criticism Your review must not contain personal attacks, name calling, libel, defamation, hate speech, etc. And under no circumstances should you post anything that could be taken as threatening, harassing, bullying, obscene, pornographic, sexist, or racist. We reserve the right to moderate reviews to make sure the tone is civil and fair. We will delete a review or rating in these situations: Spam, such as off-topic or nonsense reviews Inappropriate reviews including profanity and links to offensive content Attacks, including personal attacks against the plugin author or other reviewers, as well as attacks against New Relic or other companies. This does not mean you can't disagree with us or with each other, just be polite about it. False reviews that contain misleading statements or claims Other; for example, reviews or ratings that appear to be gaming the system",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.337944,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Plugin</em> Central",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " for <em>plugins</em> that developers publish and make publicly available to users. From <em>Plugin</em> Central, you can select and download whatever <em>plugins</em> you want to use. After you <em>install</em> or configure a <em>plugin</em>, you can view the <em>plugin</em>&#x27;s dashboard data securely from the <em>plugins</em> user interface in <em>New</em> <em>Relic</em> One"
      },
      "id": "603e81b428ccbc63bdeba79e"
    }
  ],
  "/docs/plugins/plugins-new-relic/install-plugins/use-plugin-central-plugin": [
    {
      "sections": [
        "Install from Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Requirements",
        "Access rights",
        "License key",
        "Typical plugin installation procedures",
        "Install an NPI-compatible plugin",
        "Install the plugin",
        "Manage plugins with the NPI tool",
        "Troubleshoot NPI-compatible plugins",
        "Duplicate plugins",
        "Error message ./npi: line 1: bin/node: No such file or directory",
        "Error message -bash: ./npi: No such file or directory",
        "Insufficient privileges to run background processes",
        "Install with Chef or Puppet",
        "Chef cookbooks",
        "Puppet modules"
      ],
      "title": "Install from Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "a19bd4cb7582a8653cd83b18e431b23cb4270876",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/install-plugin-central/",
      "published_at": "2021-05-22T02:55:19Z",
      "updated_at": "2021-03-13T01:16:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Requirements Each plugin in Plugin Central includes its own procedures for how to install, use, troubleshoot, and uninstall it. In order to use a plugin, first verify that your environment meets the plugin's documented requirements. Then follow the plugin's procedures to install the plugin agent on one or more hosts in your monitored environment, or to configure a SaaS plugin as directed by your SaaS provider. As a standard security measure for data collection, your application server must support SHA-2 (256-bit). We do not support SHA-1. Also, plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Access rights When using an agent from Plugin Central, deploy the agent giving the fewest possible permissions in order for the plugin agent to function successfully. Unless the plugin publisher gives specific instructions, you should run the plugin agent as a non-privileged user; do not use su or sudo privileges. This applies to both installing and using the agent. If the plugin agent needs credentials for the component (instance) that it is monitoring, create a custom set of credentials just for the monitoring agent to use. These should be separate from any other production credentials. The custom credentials should grant the fewest possible permissions while still allowing the agent to gather the data it needs. For example, for most plugin agents, you should only need to grant read-only access to your components or instances so the plugin agent cannot modify your system in any way. Also, with many agents, you should only need to grant access to read performance and administration data, not necessarily end customer or other sensitive data. For more information, see Plugin security. License key As part of any plugin installation process, you need your New Relic license key. When you are logged into the Plugins UI, the plugin's installation page in Plugin Central also shows your license key so you can easily copy it to your clipboard. If plugins have been published by SaaS providers, they must have access to the New Relic license key for each individual account. They can capture this information when provisioning new customers via the New Relic Partner API, or they can provide a mechanism for customers to share their existing New Relic license key. Typical plugin installation procedures Installation requirements depend on the type of plugin. For example, a Java plugin agent has different requirements than a Ruby plugin agent. Before you use a plugin, review the documentation that the plugin's publisher provides about the agent's installation requirements. To install any plugin from Plugin Central: Go to one.newrelic.com > More > Plugins. From the Plugin Central directory, select the plugin's title or its Get started button. From the plugin's details page, select the Download or Continue button. Follow the plugin's specific instructions to get your plugin installed and running. After you start running a plugin, it collects and sends data to New Relic, usually within five minutes. The plugin name will automatically appear in the Plugins UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible plugin The New Relic Platform Installer (NPI) is a command line utility that helps you easily download, configure, and manage a plugin by installing it with a single command. After you install the NPI tool, you can use it to install any plugins that are compatible with it. Install the plugin Plugins that are compatible with the New Relic Platform Installer include an NPI compatible label. If you have not already installed the NPI tool: Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, click the link that says * Requires New Relic Platform Installer (NPI) - Get it here. From the dropdown that opens, select your operating system. Copy the command that appears, then run it in your terminal to install the NPI tool. Unix-based systems: If you need to set a default user, in your terminal, run: ./npi set user <USER NAME> Copy Once you have installed the NPI tool, you can install any NPI compatible plugin. Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, follow the procedures to copy the specific plugin's installation command. In your terminal, change to the directory ~/newrelic-npi, then paste and run the install command. Manage plugins with the NPI tool To view information that helps you manage NPI-compatible plugins: For usage and commands, help and version flags, and setup examples, run the command --help from the directory ~/newrelic-npi. For a list of plugins that are NPI-compatible, run the command ./npi available. If you need to include proxy settings in your configuration (for both the NPI tool and the plugin's newrelic.json file), use these commands: ./npi config set proxy_host <HOST> ./npi config set proxy_port <PORT> ./npi config set proxy_username <USER NAME> ./npi config set proxy_password <PASSWORD> Copy To view the full path for a plugin, run a where command. This is useful for viewing log files or locating a plugin on your filesystem so you can manually configure it. Troubleshoot NPI-compatible plugins In addition to the troubleshooting procedures provided by the plugin publisher, follow these troubleshooting guidelines when installing NPI-compatible plugins. Duplicate plugins Problem: If you install a plugin and then install the same plugin again through the NPI tool, you will have two versions of the plugin installed. Solution: Delete the older version of the plugin, and then install the NPI-compatible version using the NPI tool. Procedures to delete plugins typically appear in the README file or in other documentation that the plugin publisher provides. Error message ./npi: line 1: bin/node: No such file or directory Problem: The architecture script that you selected when you installed the NPI tool does not match your operating system (for example, x86 instead of x64). Solution: Install the NPI tool using the correct script for your operating system. Error message -bash: ./npi: No such file or directory Problem: You cannot run NPI commands. Solution: You can only access the NPI tool from the location where it was installed. To solve this problem, navigate to the directory ~/newrelic-npi, and run the command again. Insufficient privileges to run background processes Problem: If you try to set a plugin to run as a background process, you might see a message that you have insufficient privileges. Solution: The plugin creates an /etc/init.d script on Linux and a Windows service on Windows, both of which require escalated privileges to run. To solve this problem: Linux: Run the command with sudo in front of it. Windows: Run the command as an administrator. Install with Chef or Puppet In addition to standard installation procedures, you can install plugins with Chef and Puppet configuration management tools. These tools automate plugin installation and make it easier to manage plugins with the rest of your server software. Chef cookbooks Plugins in Plugin Central may come bundled with a Chef script, or you can write your own. If a Chef script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Chef, add the Chef cookbook for New Relic Plugins: Procedures: See Chef's cookbook documentation. New Relic Plugins cookbook: See Chef's community site for newrelic_plugins. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Chef. Then, to install a plugin using Chef: Configure Chef with the plugin details. Run Chef to install the plugin. Chef cookbooks and recipes define roles for specific server configurations. For example, a web server can have the role web_server which includes all of the software and configuration needed for a web server. Here is an example of creating a Chef role for a server running the Wikipedia Java example plugin: name \"newrelic_wikipedia_example_java_plugin\" description \"Server running the New Relic Plugins Wikipedia Example Java Plugin\" run_list( \"recipe[newrelic_plugins::wikipedia_example_java]\" ) default_attributes( \"newrelic\" => { \"license_key\" => \"NEW_RELIC_LICENSE_KEY\", \"wikipedia_example_java\" => { \"install_path\" => \"/path/to/plugin\", \"user\" => \"newrelic\" } } ) Copy Puppet modules Plugins in Plugin Central may come bundled with a Puppet script, or you can write your own. If a Puppet script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Puppet, add New Relic's Puppet module for plugins: Procedures: See Puppet's module documentation. New Relic plugin modules: See the Puppet Forge community site. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Puppet. Then, to install a plugin using Puppet: Configure Puppet with the plugin details. Run Puppet to install the plugin. Puppet modules contain manifest files that are a collection of classes for configuring a server. For example, a web server can be assigned several classes for the necessary software for a web server. Here is an example of using a Puppet class for a server running the Wikipedia Java example plugin: class { 'newrelic_plugins::wikipedia_example_java': license_key => 'NEW_RELIC_LICENSE_KEY', install_path => '/path/to/plugin', user => 'newrelic' } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.11432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> from <em>Plugin</em> Central",
        "sections": "<em>Install</em> from <em>Plugin</em> Central",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " to get your <em>plugin</em> installed and running. After you start running a <em>plugin</em>, it collects and sends data to <em>New</em> <em>Relic</em>, usually within five minutes. The <em>plugin</em> name will automatically appear in the <em>Plugins</em> UI, where you can select and view its summary metrics and dashboards. <em>Install</em> an NPI-compatible"
      },
      "id": "60445cdd196a6788d9960f28"
    },
    {
      "sections": [
        "Plugin security",
        "Important",
        "Limited access to legacy plugins",
        "Open community",
        "Third-party content",
        "Source code",
        "Access to license keys",
        "Access rights",
        "Plugin storage"
      ],
      "title": "Plugin security",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "8476f9a0e63a7f58388b4a6e7fb8b089843033e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/plugin-security/",
      "published_at": "2021-05-22T02:54:14Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Open community New Relic's Plugins tool been designed to be open and extensible, so that any New Relic user, developer, technology vendor, or partner may publish publicly accessible plugins within Plugin Central. Anyone who has a New Relic account can install and use these plugins through their New Relic user interface. Exception: Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Having an open community where users both create and consume plugins can raise questions surrounding security. This document intends to address any security considerations for using these plugins. For more information about New Relic's security measures, see our security and data privacy documentation, or visit the New Relic security website. Third-party content For some plugins, New Relic, Inc. is the publisher, and will be clearly identified as the publisher. However, as an open resource, many plugins are created by our partners and third-party developers. Every plugin in the Plugin Central directory clearly identifies whether it was published by a New Relic developer or by a third party. We require plugin publishers to provide an About link to their website, documentation about what the plugin is for and how to use it, and a link to obtain support when using the plugin. We also require plugin publishers to review and accept the Developer Terms of Service Agreement before they can make their plugin publicly accessible. You can review all information provided by the publisher before installing any plugin. Only those plugins that identify New Relic, Inc. as the publisher fall under New Relic's posted privacy policy. For more information, see the New Relic security website. For other plugins, refer to the publisher's security and compliance statements. Source code If you have any concerns about plugins developed with the SDKs for plugins, you can review the source code and verify that the plugin agents behave as expected. The plugin agent's code is light, and it can be reviewed in minutes. Access to license keys Always keep your New Relic license key private. Typically access to your license key is needed only to record metric data or deployments for your applications, hosts, or plugins that are monitored by New Relic, not to introduce new data or code. No other access is allowed. Access rights When developing a plugin agent, authors and publishers need to consider the environment in which they will be run. You should do everything possible to reduce the level of permissions your plugin users need to grant to the agent in order for it to run correctly. In particular: Unless it is absolutely necessary, do not require su or sudo permissions in order to install your agent or support software on your users' computers. In this situation, the requirements should be limited in scope and well-documented. For additional information about access rights for plugin users, see the documentation about installing a plugin. When running your agent on the users' computers, do not require su or sudo permissions. The components (instances) your plugin agent is monitoring should only need to grant read-only permissions in order for your agent to perform its actions. As much as possible, the components (instances) your plugin agent is monitoring should be able to reduce the levels of information and access needed. When documenting your plugin, describe what level of permissions your plugin agent requires from the components (instances) it is monitoring and why this is necessary. Following these steps will make it easier for your plugin users to install your agent and increase their confidence that your agent cannot harm their components or instances being monitored. This will also reduce the likelihood of user problems if your agent has any serious bugs or other defects. Plugin storage Plugins only need access to their monitored systems and New Relic simply to report metrics. You may want to consider running plugin agents in sequestered systems with limited network access that allow no more than the minimum required network access. Also, data retention for plugins follows New Relic's standard policies. If you have any concerns about deploying any plugin from Plugin Central, follow your organization's guidelines. If for any reason you do not trust the source of an existing plugin, try creating your own version.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.337944,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> security",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " a <em>New</em> <em>Relic</em> account can <em>install</em> and use these <em>plugins</em> through their <em>New</em> <em>Relic</em> user interface. Exception: <em>Plugins</em> in <em>Plugin</em> Central are not supported with accounts that host data in the EU region data center. Having an open community where users both create and consume <em>plugins</em> can raise questions"
      },
      "id": "603ebeb9e7b9d25a642a07d4"
    },
    {
      "sections": [
        "Introduction to Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Developers and SaaS providers",
        "Plugin Central directory",
        "View plugins in Plugin Central",
        "Get started with plugins",
        "Ratings",
        "Reviews",
        "Plugin feedback policy"
      ],
      "title": "Introduction to Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "aa864c660f02e96be1c9cec897300ed96e5e33cb",
      "image": "https://docs.newrelic.com/static/916b76819340fbeb3becda03908ca2d2/c1b63/plugins-landing-page-prototype071720.png",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/introduction-plugin-central/",
      "published_at": "2021-05-22T02:54:14Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Developers and SaaS providers Plugin CentralÂ is where partners, third-party vendors, and users could publish plugin agents that collect selected data. This is also where you could install and view the plugin data on your Plugins dashboards as a set of summary metrics, charts, and tables. In most cases, the plugin's agent runs on the users' app server. SaaS or PaaS providers can also create plugin agents that run on their system and report metrics for customers who use New Relic to monitor their applications. For more information, see the specific plugin agent SDK documentation. Plugin Central directory Important Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. The plugin agent collects, sends, and stores the metric data. Plugin Central provides a searchable directory for plugins that developers publish and make publicly available to users. From Plugin Central, you can select and download whatever plugins you want to use. After you install or configure a plugin, you can view the plugin's dashboard data securely from the plugins user interface in New Relic One. View plugins in Plugin Central To view information about available (published) plugins: Go to one.newrelic.com > More > Plugins. By default, available plugins appear in alphabetical order. From the Plugin Central directory in New Relic One, select any published plugin to view a description and install it. Depending on the selected plugin, installation and configuration instructions will vary. Refer to your plugin's documentation for specific details. After you install or configure a plugin, it automatically appears on your Plugins menu in New Relic One, where you can select and view it directly. You may need to wait a few minutes for data to appear. Get started with plugins Here are some tips for making the most of Plugin Central. Ratings Plugins listed in New Relic's Plugin Central include a 5-star rating system, ranging from 1 (lowest) to 5 (highest). This helps you make more informed choices when choosing among similar plugins. This also provides a way for you to share what you think of a plugin. You can rate as many plugins as you want. If you have not voted for a plugin, its current star rating (gold or gray) does not include an outline. You can have only one vote for a specific plugin, and you cannot delete your vote. However, you can change your rating level anytime. After you select the star level (1 to 5) to cast your vote, the stars change to gold with an outline at the rating level you selected. Reviews Plugin Central includes a simple review system to share what you think of a plugin and to provide tips for others about installation and usage. Existing reviews appear when you select an individual plugin's title or Get started link. You can write as many reviews for as many plugins as you want, following the feedback policy. You can also edit or delete your own reviews. When you write a review for a plugin, if you have not already rated the plugin, you must provide a rating. Subsequent reviews will use the rating you provided. You can change your rating at any time. Plugin administrators also reserve the right to delete reviews if necessary. For more information, see Plugin feedback policy. Plugin feedback policy Here are some types of reviews we welcome: Your experience using the plugin Suggestions for improvement Your thoughts or opinions about the plugin, even if you disagree with us or point out mistakes Constructive criticism Your review must not contain personal attacks, name calling, libel, defamation, hate speech, etc. And under no circumstances should you post anything that could be taken as threatening, harassing, bullying, obscene, pornographic, sexist, or racist. We reserve the right to moderate reviews to make sure the tone is civil and fair. We will delete a review or rating in these situations: Spam, such as off-topic or nonsense reviews Inappropriate reviews including profanity and links to offensive content Attacks, including personal attacks against the plugin author or other reviewers, as well as attacks against New Relic or other companies. This does not mean you can't disagree with us or with each other, just be polite about it. False reviews that contain misleading statements or claims Other; for example, reviews or ratings that appear to be gaming the system",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.337944,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Plugin</em> Central",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " for <em>plugins</em> that developers publish and make publicly available to users. From <em>Plugin</em> Central, you can select and download whatever <em>plugins</em> you want to use. After you <em>install</em> or configure a <em>plugin</em>, you can view the <em>plugin</em>&#x27;s dashboard data securely from the <em>plugins</em> user interface in <em>New</em> <em>Relic</em> One"
      },
      "id": "603e81b428ccbc63bdeba79e"
    }
  ],
  "/docs/prometheus-remote-write-integration": [
    {
      "sections": [
        "Configure New Relic as a Prometheus data source for Grafana",
        "Add a Prometheus data source",
        "Important",
        "Tip",
        "Sample configuration image",
        "Versioning considerations",
        "Customize Prometheus API behavior",
        "X-Query-Key (Query key)",
        "X-Prometheus-Only",
        "X-Prometheus-Server",
        "Delete a Prometheus data source"
      ],
      "title": "Configure New Relic as a Prometheus data source for Grafana",
      "type": "docs",
      "tags": [
        "Integrations",
        "Grafana integrations",
        "Set up and configure"
      ],
      "external_id": "956450eb909b41acd578807135b73dcbd1c09d40",
      "image": "https://docs.newrelic.com/static/c6e2c58b42bcca57c0dffaef5318927e/99f37/Grafana-Data-Source-Config_0.png",
      "url": "https://docs.newrelic.com/docs/integrations/grafana-integrations/set-configure/configure-new-relic-prometheus-data-source-grafana/",
      "published_at": "2021-05-21T23:27:48Z",
      "updated_at": "2021-05-15T19:45:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure a Prometheus data source in Grafana to query data stored in the New Relic Database (NRDB) using our PromQL-style query language. Add a Prometheus data source Follow these steps to add New Relic as a Prometheus data source for Grafana. These instructions detail how to complete the process when working with Grafana versions 6.7 and higher. Important You must complete the Prometheus remote-write integration process prior to beginning the configuration process. On New Relic, Create a new Insights query key. Important Note: In Grafana, you'll need put this in a custom X-Query-Key HTTP header (see step 7 below), but it is the same entity as the New Relic Query key. From the Grafana Home screen, go to Configuration > Data Sources and click Add data source. From the Add data source screen under Time series databases options, select Prometheus. Enter the Name you want to use for your new Prometheus data source. Set the Default toggle to the on or off position, depending on whether you want this to be your default data source for Prometheus queries. Off: this is not your default data source On: this is your default data source Enter the correct URL: US: prometheus-api.newrelic.com EU: prometheus-api.eu.newrelic.com Under Custom Headers, select Add Header. Set the Header name to X-Query-Key. For the Value, enter to the Query key you created in step 1. Click Save & Test. Tip If your graphs appear as groupings of dots and not as connected lines, you can change the graph style to display lines instead. To do this, go to Grafana's Graph panel and select Stacking and null value > connected. Sample configuration image Grafana Data Source Config.png, by dbarnesbrown.newrelic.com Versioning considerations New Relic strongly recommends using versions 6.7.x and higher to configure New Relic as a Prometheus data source. If you do chose to complete the configuration while running an earlier version, you will need to do one of the following to successfully configure your data source: Configure the new data source to use basic authentication and then enter the Query-key as the password in the basic authentication workflow. Configure the new data source URL to include the Query-key: https://prometheus-api.newrelic.com/auth/`<query-key>` Customize Prometheus API behavior Headers are particularly important if you have connected multiple Prometheus servers to New Relic using the remote write integration. Here are some details about customization. X-Query-Key (Query key) The Query key parameter is required to authenticate with New Relic and identify the account containing your metrics. Grafana calls this an X-Query key, while it appears as a Query key in the New Relic UI. Details: Required An API query key used for authentication If you are using the Prometheus remote write integration, the X-Query-Key should correspond to the same account as the X-License-Key used to integrate for remote write X-Prometheus-Only Important Grafana's auto-complete support doesn't handle metrics that fail to strictly conform to Prometheus naming conventions. New Relic recommends you exclude any metrics that do not conform from this parameter. Details: Optional Limits metrics exposed by the API to those originating from Prometheus Default = true if not specified X-Prometheus-Server This parameter is useful if you are collecting metrics from multiple Prometheus servers. For example, if you are using Grafana, you might want to create a data source for each Prometheus server connected to New Relic and then another data source that can be used to query across all Prometheus servers. Details: Optional Limits metrics exposed by the API to those collected from the specified Prometheus server This value should match the prometheus_server URL parameter in the remote write URL used to connect to your prometheus server to New Relic Defaults to return metrics collected from all servers Delete a Prometheus data source To delete a data source in Grafana: Go to Configuration > Data Sources. Click on the data source you want to delete. Click the Delete button at the bottom of the page.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 2260.3894,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Configure New Relic as a <em>Prometheus</em> data source for Grafana",
        "sections": "Configure New Relic as a <em>Prometheus</em> data source for Grafana",
        "tags": "<em>Integrations</em>",
        "body": " the process when working with Grafana versions 6.7 and higher. Important You must complete the <em>Prometheus</em> <em>remote</em>-<em>write</em> <em>integration</em> process prior to beginning the configuration process. On New Relic, Create a new Insights query key. Important Note: In Grafana, you&#x27;ll need put this in a custom X-Query-Key"
      },
      "id": "603e956f64441f19494e8894"
    },
    {
      "sections": [
        "Send Prometheus metric data to New Relic",
        "Prometheus OpenMetrics or remote write integration?",
        "Prometheus remote write integration",
        "Scale your data and get moving quickly",
        "How it works",
        "Remote write compatibility and requirements",
        "Prometheus OpenMetrics integrations",
        "Reduce overhead and scale your data",
        "Kubernetes",
        "Docker",
        "OpenMetrics integrations compatibility and requirements",
        "Important",
        "What's next"
      ],
      "title": "Send Prometheus metric data to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Prometheus integrations",
        "Get started"
      ],
      "external_id": "c43eafc49c9c82cbf8642897c868c9602cecc6b9",
      "image": "https://docs.newrelic.com/static/3b6e65cd4f0d292124399b59a6195a0a/8c557/Prometheus-remote-write-dashboard.png",
      "url": "https://docs.newrelic.com/docs/integrations/prometheus-integrations/get-started/send-prometheus-metric-data-new-relic/",
      "published_at": "2021-05-22T16:01:42Z",
      "updated_at": "2021-03-16T06:16:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This page provides an overview of New Relic's Prometheus integration options and how they work. The information here will help you choose from among our options based on which one best fits your unique business needs. Prometheus OpenMetrics or remote write integration? We currently offer two integration options: Prometheus remote write integration and Prometheus OpenMetrics integration for Kubernetes or Docker. We recommend getting started with the remote write integration if you already have a Prometheus server install base. If you find it hard to manage your Prometheus cluster, or if you are getting started with integrating Prometheus Metrics, you should use OpenMetrics. Prometheus remote write integration Prometheus OpenMetrics for Kubernetes or Docker Benefits Use this if you currently have Prometheus servers and want an easy way to access your combined metrics from New Relic. It only takes one line of yaml in your Prometheus configuration. You'll be able to access your metrics through both New Relic and Prometheus. You don't need to make any additional adjustments for data to remain available in Prometheus. Federation: Allows you to combine data from multiple servers into a single source. Prometheus High Availability support: We de-duplicate data from HA-pairs on ingest. Use this if youâre looking for an alternative or replacement to a Prometheus server that stores all your metrics directly in New Relic. You wonât have to manage any Prometheus servers yourself. You don't need local storage. Keep in mind You will still need to manage your Prometheus servers, although you should be able to reduce your storage retention, and thereâll be fewer query loads to the server. Slightly more complex setup. No support for High Availability replicas. The Kubernetes operator is not available for enhanced operations automation. Recommendations Evaluate your observability needs to manage your data volumes better: The scrape interval is the biggest factor influencing data volumes: select it based on your observability needs. For example, changing from 15s (default value) to 30s can reduce data volumes by 50%. Set your filters and configure data to target (see metrics or targets). Balance remote write(s) between one or more new relic accounts or sub-accounts to manage rate limits. Regardless of the option you chose, with our Prometheus integrations: You can use Grafana or other query tools via New Relic's Prometheus' API. You benefit from more nuanced security and user management options as part of New Relic One. The New Relic Telemetry Data Platform can be the centralized long-term data store for all your Prometheus metrics, allowing you to observe all your data in one place. You can execute queries to scale, supported by New Relic. Prometheus remote write integration The Prometheus remote write integration allows you to forward telemetry data from your existing Prometheus servers to New Relic. Once integrated, you can leverage the full range of options for setup and management, from raw data to queries, dashboards, and more. Scale your data and get moving quickly With the Prometheus remote write integration, you can: Store and visualize crucial metrics on a single platform Combine and group data across your entire software stack Get a fully connected view of the relationship between data about your software stack and the behaviors and outcomes youâre monitoring Connect your Grafana dashboards (optional). Prometheus remote write dashboard How it works Signup for New Relic is fast and free â we won't even ask for a credit card number. Once logged in, you can get data flowing with a few simple steps: Generate your remote_write URL. Add the new remote_write URL to the configuration file for your Prometheus server. Restart your Prometheus server. Check for your data. Query and explore! Read the setup docs Add Prometheus data Remote write compatibility and requirements New Relic supports the Prometheus remote write integration for Prometheus versions 2.15.0 or newer. Prometheus OpenMetrics integrations New Relicâs Prometheus OpenMetrics integrations for Docker and Kubernetes allow you to scrape Prometheus endpoints and send the data to New Relic, so you can store and visualize crucial metrics on one platform. With these integrations, you can: Automatically identify a static list of endpoints. Collect metrics that are important to your business. Query and visualize this data in the New Relic UI. Connect your Grafana dashboards (optional). Kubernetes OpenMetrics dashboard Reduce overhead and scale your data Collect, analyze, and visualize your metrics data from any source, alongside your telemetry data, so you can correlate issues all in one place. Out-of-the-box integrations for open-source tools like Prometheus make it easy to get started, and eliminate the cost and complexity of hosting, operating, and managing additional monitoring systems. Prometheus OpenMetrics integrations gather all your data in one place, and New Relic stores the metrics from Prometheus. This integration helps remove the overhead of managing storage and availability of the Prometheus server. To learn more about how to scale your data without the hassles of managing Prometheus and a separate dashboard tool, see New Relic's Prometheus OpenMetrics integration blog post. Kubernetes In a Kubernetes environment, New Relic automatically discovers the endpoints in the same way that the Prometheus Kubernetes collector does it. The integration looks for the prometheus.io/scrape annotation or label. You can also identify additional static endpoints in the configuration. Docker The Prometheus OpenMetrics integration gathers all your data in one place, and New Relic stores the metrics from Prometheus. This integration helps remove the overhead of managing storage and availability of the Prometheus server. OpenMetrics integrations compatibility and requirements For Kubernetes and Docker OpenMetrics integrations, you should be aware of the following compatibility and requirements information. Kubernetes New Relic has contributed the Prometheus integration to the open source community under an Apache 2.0 license. This integration supports Prometheus protocol version 2 and Kubernetes versions 1.9 or higher. The integration was tested using Kubernetes 1.9, 1.11, and 1.13 on kops, GKE, and minikube. Limits apply to the metrics you send. For more details, see the metrics API documentation. Important Recommendation: Always run the scraper with one replica. Adding more replicas will result in duplicated data. Docker New Relic has contributed the Prometheus integration to the open source community under an Apache 2.0 license. This integration supports Prometheus protocol version 2. The integration was tested using Docker 1.9, 1.11, and 1.13 on kops, GKE, and minikube. Limits apply to the metrics you send. For details, see the metrics API documentation. What's next Ready to get moving? Here are some suggested next steps: Read the how-to for completing the remote write integration. Learn about Grafana support options. Explore the range of other options available as part of the Telemetry Data Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 2006.7864,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Send <em>Prometheus</em> metric data to New Relic",
        "sections": "<em>Prometheus</em> OpenMetrics or <em>remote</em> <em>write</em> <em>integration</em>?",
        "tags": "<em>Prometheus</em> <em>integrations</em>",
        "body": "This page provides an overview of New Relic&#x27;s <em>Prometheus</em> <em>integration</em> options and how they work. The information here will help you choose from among our options based on which one best fits your unique business needs. <em>Prometheus</em> OpenMetrics or <em>remote</em> <em>write</em> <em>integration</em>? We currently offer two"
      },
      "id": "603ea41964441f0d824e8874"
    },
    {
      "image": "https://docs.newrelic.com/static/d2a9c929c7541b67b6fe4c87844fc01b/ae694/prometheus_grafana_dashboard.png",
      "url": "https://docs.newrelic.com/whats-new/2020/08/create-grafana-dashboards-prometheus-data-stored-new-relic/",
      "sections": [
        "Create Grafana dashboards with Prometheus data stored in New Relic",
        "Step 1: Get data flowing into New Relic with the Prometheus remote write integration",
        "Step 2: Configure your Grafana dashboards to use Prometheus data stored in New Relic"
      ],
      "published_at": "2021-05-22T12:47:25Z",
      "title": "Create Grafana dashboards with Prometheus data stored in New Relic",
      "updated_at": "2021-03-11T00:16:19Z",
      "type": "docs",
      "external_id": "da09ab47a2ac806ad3ed1fa67e3a02dd54394383",
      "document_type": "nr1_announcement",
      "popularity": 1,
      "body": "Weâve teamed up with Grafana Labs so you can use our Telemetry Data Platform as a data source for Prometheus metrics and see them in your existing dashboards, seamlessly tapping into the reliability, scale, and security provided by New Relic. Follow the steps below or use this more detailed walkthrough to send Prometheus data to New Relic, so that Grafana can populate your existing Prometheus-specific dashboards with that data. This process requires Prometheus version 2.15.0 or higher and Grafana version 6.7.0 or higher. Youâll also need to sign up for New Relic. Here's an example of how these Grafana dashboards with Prometheus data look in our new dark mode. Step 1: Get data flowing into New Relic with the Prometheus remote write integration Go to Instrument Everything â US or Instrument Everything â EU, then click the Prometheus tile. You can also go to the Prometheus remote write setup page to get your remote_write URL. For more information on how to set up the Prometheus remote write integration, check out our docs. Step 2: Configure your Grafana dashboards to use Prometheus data stored in New Relic For more information on how to configure New Relic as a Prometheus data source for Grafana, check out our docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 2000.866,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create Grafana dashboards with <em>Prometheus</em> data stored in New Relic",
        "sections": "Step 1: Get data flowing into New Relic with the <em>Prometheus</em> <em>remote</em> <em>write</em> <em>integration</em>",
        "body": " these Grafana dashboards with <em>Prometheus</em> data look in our new dark mode. Step 1: Get data flowing into New Relic with the <em>Prometheus</em> <em>remote</em> <em>write</em> <em>integration</em> Go to Instrument Everything â US or Instrument Everything â EU, then click the <em>Prometheus</em> tile. You can also go to the <em>Prometheus</em> <em>remote</em> <em>write</em>"
      },
      "id": "60445821e7b9d23b585799e4"
    }
  ],
  "/docs/python-agent-api-different-call-forms": [
    {
      "sections": [
        "Heroku: Install the New Relic add-on",
        "Install the New Relic add-on",
        "Configure the agent",
        "Java",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Manage your Heroku add-on accounts",
        "License key",
        "Account URL",
        "Account ID",
        "Log on to New Relic",
        "Sign in to New Relic add-on account through Heroku",
        "Sign in to regular New Relic accounts",
        "Set up deployment notifications"
      ],
      "title": "Heroku: Install the New Relic add-on",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Partner installation"
      ],
      "external_id": "45ca4960759150545d4f9e586555d6e15daef3ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/install-new-relic/partner-based-installation/heroku-install-new-relic-add/",
      "published_at": "2021-05-21T14:43:20Z",
      "updated_at": "2021-05-15T16:18:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages. With New Relic, you can extend Heroku with metrics from our monitoring solutions, like APM and browser monitoring. The New Relic add-on supports Java, Node.js, PHP, Python, and Ruby. Install the New Relic add-on To set up the New Relic add-on, see Heroku's documentation, including available plan levels and Toolbelt procedures. If you have problems, use the Heroku support channels. Configure the agent After you install the New Relic add-on for Heroku, follow the configuration procedures for your New Relic APM agent. Java The minimum agent version for Java is 3.17.1 or higher. To install and configure New Relic's Java agent for your add-on, see our Java agent and Heroku documentation. Node.js To install and configure our Node.js agent for your add-on, see: New Relic's Node.js and Heroku documentation Blog post (2013) with a \"real world\" example of installing our Node.js agent for a Heroku app PHP To install and configure our PHP agent for your add-on, see our PHP agent and Heroku documentation. Python To install and configure our Python agent for your add-on, see our Python agent and Heroku documentation. Ruby To install and configure our Ruby agent for your add-on, see our Ruby agent and Heroku documentation. If you are using our Ruby agent with a non-Rails application, Heroku users need to install the plugin in your repository manually. For example, in a Sinatra app, add the newrelic gem to your Gemfile, and then add the following code to your app: configure :production do require 'newrelic_rpm' end Copy Manage your Heroku add-on accounts Every time you install the New Relic add-on for Heroku, New Relic will automatically create a new account, complete with a unique license key, account URL, and account ID. These three types of information are important for managing each of your Heroku add-on accounts. License key The license key identifies the account where your application reports. To check the license key your app is using: From a command line, run: heroku config | grep -i relic Copy Look for the value of NEW_RELIC_LICENSE_KEY. This license key environment variable will override any other license key that you hard-code into your New Relic config file. Account URL If you install the New Relic add-on multiple times and need to verify the URL your Heroku app uses for reporting to New Relic, look in your agent logs for a line indicating reporting to following by a URL using this format: rpm.newrelic.com/accounts/###/applications/###### Copy Account ID You cannot change your add-on's account ID directly. If you need to change the New Relic account your Heroku app uses for reporting to New Relic, change the current license key environment variable in its config file so that it points to the license key of the New Relic account you want to use: heroku config:set NEW_RELIC_LICENSE_KEY=changed_account_license_key Copy Log on to New Relic Heroku customers may have two different types of accounts with New Relic: Add-on accounts: New Relic accounts that customers installed on their Heroku application by using Heroku's New Relic add-on \"Regular\" accounts: Other New Relic accounts that customers did not install with Heroku's add-on Regular accounts provide a wider range of features than do add-on accounts, and are installed and managed differently. Different procedures apply, depending on which type of account you want to sign into. In accordance with the terms of New Relic's partnership with Heroku, customers who install New Relic via the Heroku add-on can only access their New Relic add-on accounts by signing in through Heroku. For this reason, if you have both add-on accounts and regular New Relic accounts, you cannot switch directly between them. Sign in to New Relic add-on account through Heroku To sign in to your New Relic add-on accounts: Sign in through Heroku's login page at id.heroku.com/login. Select the application that has the New Relic add-on installed. Select New Relic from your list of add-ons. If you sign in through Heroku, you will not see any of your regular New Relic accounts when you select account dropdown > Switch account. Sign in to regular New Relic accounts To sign into or switch between your regular New Relic accounts: Sign in to New Relic at one.newrelic.com. To switch from one regular New Relic account to another: Go to: **account dropdown and select an account. If you sign in directly through New Relic, you will not see any of your New Relic add-on accounts from Heroku when you select account dropdown > Switch account. Set up deployment notifications The Heroku add-on automatically sends deployment notifications to New Relic for one application per account. If you add multiple applications to your add-on account, you must use the New Relic REST API to manually send deployment notifications for your additional applications. You cannot use a post-deploy hook, because the New Relic REST API call requires a header, and Heroku's post-deploy hook does not allow headers. However, you can write a script that generates this API call whenever you deploy on Heroku. For instructions on recording deployments via the REST API, see Recording deployments.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74136,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Configure the <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages. With New Relic, you can extend Heroku with metrics from our monitoring solutions, like APM and browser monitoring. The New Relic add-on supports Java, Node.js, PHP, <em>Python</em>, and Ruby. Install"
      },
      "id": "603ebc9ae7b9d272c32a0810"
    },
    {
      "sections": [
        "Python agent admin script: Advanced usage",
        "Subcommand structure",
        "help <command>",
        "generate-config license_key [output_file]",
        "validate-config config_file [log_file]",
        "run-program ...",
        "run-python ...",
        "license-key config_file [log_file]",
        "network-config config_file [log_file]",
        "local-config config_file [log_file]",
        "server-config config_file [log_file]",
        "record-deploy config_file description"
      ],
      "title": "Python agent admin script: Advanced usage",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "258e608c4952147784dd0b2d59de34e24cc550c5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/python-agent-admin-script-advanced-usage/",
      "published_at": "2021-05-21T18:43:10Z",
      "updated_at": "2021-05-16T09:05:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent admin script is used during the installation process. When the Python agent package is installed, the newrelic-admin script is also installed into the bin directory of the Python installation or virtual environment. This document gives more in-depth detail about these uses of the admin script: Generating the initial agent configuration file Validating your config file Testing the connection to New Relic Wrapping startup of standalone Python web applications Subcommand structure To execute subcommands, provide the name of the subcommand as the first argument to the newrelic-admin script. Then add any options after the name of the subcommand. For example: newrelic-admin help Copy help < command> When executed with no further arguments, this provides a listing of all accepted subcommands: $ newrelic-admin help Usage: newrelic-admin command [options] Type 'newrelic-admin help <command>' for help on any of the commands listed in this document. To view additional details about a subcommand, run the help command with the subcommand and any of its options. For example: $ newrelic-admin help generate-config Usage: newrelic-admin generate-config license_key [output_file] Generates a sample agent configuration file for <license_key> Copy generate-config license_key [ output_file] Generates a sample agent configuration file. The license_key option is your New Relic license key. By default the sample configuration file will be directed to standard output and be displayed on your screen. To capture the output, you can instead save it to a file by giving the name of the file as the output_file option. When the sample agent configuration file is generated, only the license key option in the file is updated. You should still edit the file and make changes to app_name and log_file options as appropriate. For more information, see Python agent installation. If you cannot run the generate-config command to produce the initial agent configuration file, you can download a sample configuration file from download.newrelic.com/python_agent/release/newrelic.ini. validate-config config_file [ log_file] Validates the syntax of an agent configuration file given by the config_file option. This might be the agent configuration generated by generate-config and subsequently edited, or an agent configuration file created by downloading the sample configuration file from the download site. As well as validating the syntax of the configuration file, using the license_key contained in the agent configuration file to identify your account, will also test whether a connection can be made to the our servers. This subcommand can therefore be used to ensure that DNS is available for resolving the hostname of the our data collector host and that there is network connectivity available and that no firewall is blocking access. In connecting to the our servers, the test will create an application under your account called Python Agent Test. Into this application a small amount of simulated web transaction data and errors will be reported. After a period of time this application in your account will be able to be deleted from the Applications list if desired. When this test is run, a log file will be created in the location: /tmp/python-agent-test.log Copy If you need to override this location you can supply the log_file option. To have what would be written to the log file be displayed to your screen, you can use stdout or stderr as the value passed as the log_file option. When using a hosting service such as Heroku where an agent configuration file wouldn't normally be used, this subcommand can still be used to test the connection to us. For Heroku the license key information is defined in an environment variable automatically setup by Heroku when you add the New Relic addon to your Heroku instance. In this case where an environment variable is used to define the license key, to run the connectivity test, pass the value - for the config_file option in place of the path to the agent configuration file. So, to run the command on your Heroku instance you would use: heroku run newrelic-admin validate-config - stdout Copy Note that we have supplied stdout for the log file in this case, else it would be necessary to separately retrieve the log file generated. It is recommended that when setting up the Python agent for the first time, or even perhaps on a new host, that this subcommand be used to test whether data can be reported okay. For more information, see Testing the Python agent. run-program ... Executes the command line for a Python web application given as ... but forces the initialization of the agent automatically at startup. This is a shortcut method for starting up a Python web application without needing to manually make changes to the web application to add code to specifically initialize the Python agent. It can be used in any situation where a Python web framework or WSGI server is used where instrumentation is being automatically added to wrap the WSGI application entry point. In other words, in situations where only the agent initialization code needed to be added. Agent configuration when using this method can be provided in two different ways. If using a complete agent configuration file then the location of that configuration can be provided by the NEW_RELIC_CONFIG_FILE environment variable. If you were using gunicorn for example, you could say: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn wsgi:application Copy OR NEW_RELIC_CONFIG_FILE=newrelic.ini export NEW_RELIC_CONFIG_FILE newrelic-admin run-program gunicorn wsgi:application Copy When specifying the location of the configuration file using the NEW_RELIC_CONFIG_FILE environment variable, the following additional environment variables can be set to customize how the configuration file is processed. NEW_RELIC_ENVIRONMENT: The name of a specific deployment environment. When specified, additional override configuration will be read from a separate deployment section within the configuration file. The section of the configuration file for a specific deployment environment should be named as newrelic:environment where environment is replaced with the name being specified by this environment variable In place of a complete agent configuration file, you can also set environment variables providing only the key agent configuration information. The environment variables which can be set in this case are: NEW_RELIC_LICENSE_KEY - Your New Relic license key. NEW_RELIC_APP_NAME - The name of the application you wish to report data against in the UI. If not defined, this defaults to Python Application. NEW_RELIC_LOG - The path to a file to be used for the agent log. If not defined then no logging will occur. Can also be set to stdout or stderr to have logging go to standard output or standard error for process. NEW_RELIC_LOG_LEVEL - The level at which logging will be output by the agent. If not defined then defaults to info. Possible values, in increasing order of detail, are: critical, error, warning, info and debug. Individual environment variables are used when hosting your application on Heroku. The environment variables will be set automatically as appropriate by the Heroku environment when you add the New Relic addon. It is therefore not necessary when using Heroku to set any of the above environment variables when using the newrelic-admin command with this option from your Procfile. Note that the wrapped program must be using the same Python installation or virtual environment as that which the Python agent package and the newrelic-admin script was installed into. If this is not the case then the wrapper script will have no affect and you may even encounter an error on startup of the Python interpreter due to the newrelic Python package not being able to be found. If using sudo to startup your WSGI application as another user, be aware that the default sudo configuration will generally be such that user environment variables from the shell in which sudo is run will be ignored. In this case you would need to change the sudoers configuration to allow passing of the specific environment variables. Alternatively, create a shell script which sets the environment variables and runs your WSGI application under newrelic-admin. To start up your WSGI application as a different user, then run sudo on that script rather than directly on your WSGI application. The use of an additional wrapper script to set the environment variables and run your WSGI application under newrelic-admin may also be required when using supervisord if any issues are encountered with environment variable settings within the supervisord configuration not being passed through correctly. run-python ... Executes the python executable from the Python installation or virtual environment that newrelic-admin is installed into with the arguments given as ... but forces the initialization of the agent automatically at startup. This is a shortcut method for starting up a Python web application without needing to manually make changes to the web application to add code to specifically initialize the Python agent. It can be used in any situation where a Python web framework or WSGI server is used where instrumentation is being automatically added to wrap the WSGI application entry point. In other words, in situations where only the agent initialization code needed to be added. As for run-program subcommand above, environment variables are used to configure the Python agent. If you were using python executable directly for example, you could say: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-python wsgi.py Copy OR NEW_RELIC_CONFIG_FILE=newrelic.ini export NEW_RELIC_CONFIG_FILE newrelic-admin run-python wsgi.py Copy license-key config_file [ log_file] Outputs the license key which will be used. This can be used in any startup scripts prior to starting up of the actual WSGI application to log the license key for the purpose of verifying that the correct value is being used. It may be used with the agent configuration file: newrelic-admin license-key newrelic.ini Copy OR If setting the license key using environment variables, use - as the name of the configuration file: NEW_RELIC_LICENSE_KEY='YOUR-LICENSE-KEY' export NEW_RELIC_LICENSE_KEY newrelic-admin license-key - Copy Output will be in the form: license_key = 'YOUR-LICENSE-KEY' Copy If no license key was found in the agent configuration file or picked up from user environment variables, the output will be: license_key = None Copy network-config config_file [ log_file] Outputs the network configuration which will be used. This can be used in any startup scripts prior to starting up of the actual WSGI application to log the network configuration for the purpose of verifying that the correct values are being used. It may be used with the agent configuration file: newrelic-admin network-config newrelic.ini Copy OR If setting any proxy information using environment variables, use - as the name of the configuration file: NEW_RELIC_PROXY_HOST=proxy.example.com export NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT=8888 export NEW_RELIC_PROXY_PORT newrelic-admin network-config - Copy Output will be in the form: host = 'collector.newrelic.com' port = 0 proxy_host = 'proxy.example.com' proxy_port = 8888 proxy_user = None proxy_pass = None ssl = True Copy A value of 0 for port indicates that the port number, either 80 or 443, will be automatically selected based on whether an SSL connection is being used to communicate with our data collector. local-config config_file [ log_file] Outputs the local agent configuration based on built-in defaults, environment variables, and any agent configuration file. This information may be requested by our technical support when trying to debug any agent startup issues. It may be used with the agent configuration file: newrelic-admin local-config newrelic.ini Copy OR If setting any settings using environment variables, you can use - as the name of the configuration file: newrelic-admin local-config - Copy server-config config_file [ log_file] Outputs the full configuration for a specific application. This will be the local agent configuration, overridden by any server-side configuration for the specific application. This information may be requested by our technical support when trying to debug any agent startup issues. It may be used with the agent configuration file: newrelic-admin server-config newrelic.ini Copy OR If changing any settings using environment variables, you can use - as the name of the configuration file: newrelic-admin server-config - Copy In order to obtain the server-side configuration, this script will force agent registration for the specific application defined by the configuration. If that application does not already appear in the user interface for APM, an entry for it will be created, but no metric data will be reported against it. record-deploy config_file description This is a wrapper around the New Relic REST API to record deployments for your application. You can also record deployments directly via the REST API. To use the command: Add your API key in the agent configuration file (newrelic.ini) by adding a line similar to the following in the [newrelic] section: api_key=substitute-your-api-key-here Copy Call the newrelic-admin command from the command line. (Do not add it to your config file.) using the following subcommand structure: newrelic-admin record-deploy config_file description [revision changelog user] Copy This subcommand has two required arguments: config_file: Path to the config file name description: Text to describe or identify the deployment; for example, the Git commit comments There are also three optional arguments: revision: Identifies a specific revision being deployed changelog: Provides a detailed log of what changes were made user: Identifies the person responsible for the deployment",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.934845,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> admin script: Advanced usage",
        "sections": "<em>Python</em> <em>agent</em> admin script: Advanced usage",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " the command: Add your <em>API</em> key in the <em>agent</em> configuration file (newrelic.ini) by adding a line similar to the following in the [newrelic] section: <em>api</em>_key=substitute-your-<em>api</em>-key-here Copy <em>Call</em> the newrelic-admin command from the command line. (Do not add it to your config file.) using the following subcommand"
      },
      "id": "6043ebfa28ccbc173f2c6062"
    },
    {
      "image": "https://docs.newrelic.com/static/ba856000a5801ecad9e41358f340f688/10f9a/custom-metric-syntax.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/collect-custom-metrics/",
      "sections": [
        "Collect custom metrics (APM, browser, mobile)",
        "Name custom metrics",
        "Implement custom metrics",
        "Tip",
        "Avoid grouping issues",
        "Important"
      ],
      "published_at": "2021-05-21T19:11:22Z",
      "title": "Collect custom metrics (APM, browser, mobile)",
      "updated_at": "2021-05-15T17:59:37Z",
      "type": "docs",
      "external_id": "fc2bd4425b1f6d4c0f50dfbe0879c61b24b52f00",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic APM agents, browser agents, and mobile agents report a type of metric data called metric timeslice data. These agents allow you to report custom metric timeslice data from your application and see it alongside default New Relic data. Create custom metrics to record arbitrary performance data via an API call, such as: Timing data Computer resource data Subscription or purchasing data After reporting this data, you can explore and query it. Name custom metrics Start all custom metric names with Custom/; for example, Custom/MyMetric/My_label. The Custom/ prefix is required for all custom metrics. Any custom metric names that do not start with Custom/ are subject to all other grouping rules. They may not be visible in Insights, or they may not appear as expected in the New Relic UI. A custom metric name consists of the prefix Custom/, the category or class name, and a method or label, each separated with a slash. Implement custom metrics Implementing custom metrics requires API calls. The exact details of the API call vary by agent. Tip If you are testing your custom metric implementation, run the agent for at least 10 minutes to ensure that the API call is reported to New Relic. New Relic agent Implementation APM agents C SDK: newrelic_record_custom_metric() Go: app.RecordCustomMetric Java: recordMetric .NET: RecordMetric Node.js: recordMetric PHP: newrelic_custom_metric Python: record_custom_metric and register_data_source Ruby: record_metric and increment_metric New Relic mobile agents Android: recordMetric iOS: recordMetricWithName (Objective-C) or NewRelic.recordMetricWithName (Swift) New Relic browser agent Browser does not support custom metrics. For options on adding custom data to Browser, see Browser instrumentation. Avoid grouping issues Collecting too many metric timeslices can impact the performance of both your application and New Relic. For example, if you have thousands of individual users, avoid creating metrics to track the performance of their unique user IDs. This could result in such a large number of metrics that it becomes nearly impossible to navigate or make sense of the data. Instead, use a placeholder, such as an asterisk ( * ), instead of individual user IDs. Important To avoid potential data problems, try to keep the total number of unique metric timeslices introduced by custom metrics under 2000. When the total number of unique metric names exceeds 2000, limits begin to apply automatically that affect how data appears in the user interface, such as in charts and tables. For more information, see Metric grouping issues.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.216675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": " or label, each separated with a slash. Implement custom metrics Implementing custom metrics requires <em>API</em> calls. The exact details of the <em>API</em> <em>call</em> vary by <em>agent</em>. Tip If you are testing your custom metric implementation, run the <em>agent</em> for at least 10 minutes to ensure that the <em>API</em> <em>call</em> is reported to New"
      },
      "id": "603eb881e7b9d2a9482a0817"
    }
  ],
  "/docs/query-your-data/explore-query-data/dashboards/add-custom-visualizations-your-dashboards": [
    {
      "sections": [
        "Introduction to dashboards",
        "Tip",
        "Why it matters",
        "Transitioning from Insights",
        "Get started with dashboards",
        "Create a dashboard",
        "Import a dashboard",
        "Clone a dashboard",
        "Delete a dashboard",
        "Mark a dashboard as favorite",
        "Search and sort dashboards",
        "Dashboard permissions",
        "Organize your dashboards with tags",
        "Key visual tools",
        "Consistent chart coloring",
        "Correlated needle",
        "Data scrubber",
        "Brush to zoom",
        "Custom visualizations"
      ],
      "title": "Introduction to dashboards",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Dashboards"
      ],
      "external_id": "caf20070eae1529315d1e0642bd2f853e2872b77",
      "image": "https://docs.newrelic.com/static/c9724f76b9c3ad86f9a22abab501a2af/c1b63/dashboards_intro.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/introduction-dashboards/",
      "published_at": "2021-05-22T05:25:43Z",
      "updated_at": "2021-05-22T05:25:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Envision your data as a complex system of roads: you need to navigate the signs and signals along the way to quickly see and make meaning of the information you collect. New Relic One dashboards gather and chart the specific data you want to see, the way you want to see it, from anywhere in the New Relic platform. Tip To use dashboards and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Why it matters With New Relic One dashboards you can customize and understand the data you collect. Explore your data and correlate connected sources with tailored, user-friendly charts, and quickly learn the state of your system and applications for faster, more efficient troubleshooting. Use dashboards to: Drive insight with custom, high-density interactive visualizations with a consistent UI. View dashboards across your organization using cross-account search. Chart all the events and attributes from everywhere across our platform. For more information, see Data collection. Add custom attributes or send custom event types to most events in order to better understand your business, and see specific details about how your customers interact with your platform, such as page views, host transactions, etc. Manage your charts and dashboards easily using our quick-access CRUD menus and editing options. Explore and contextualize data with advanced tooltips and zoom-in functions to monitor what your systems are doing in real time. Search your dashboards for attributes and metrics. Send data to your dashboards using our APIs. Transitioning from Insights Switching to using New Relic One dashboards from our deprecated Insights dashboards? See our transition guide. If you're using the Insights Dashboard API, we have have a migration guide that will help you transition to using the new API. Get started with dashboards To access dashboards, go to one.newrelic.com and click on Dashboards on the top navigation menu. In the dashboards index, you can view all the dashboards and data apps associated with your New Relic account. This includes the dashboards you've created within the New Relic One platform as well as the dashboards built in Insights. From the top bar, quickly access our explorer as well as all New Relic capabilities, such as APM, Browser and Infrastructure monitoring, Logs, or Applied Intelligence. You can also use the core New Relic One features such as Search or Query your data that are available across the platform. For each dashboard, the index displays the following information: Favorite status, indicated by a star Name: The name of the dashboard Account: The account the dashboard belongs to Created by: The user who created the dashboard Last edited: When the dashboard was last modified Created on: When the dashboard was created Here you can carry out the following actions: Create a dashboard You can easily create a dashboard in New Relic One from the dashboards index by selecting the + Create a dashboard button located at the top-right corner of the dashboards index. Name your dashboard. Names are searchable, so we recommend giving it a meaningful name (your service or application, for instance) using words that will help you locate your dashboard easily. Select the account the dashboard belongs to. Choose carefully because this action cannot be modified. Press Create to continue, or Cancel to return to the index. Tip By default a dashboard is created with Public - Read and write permissions. You can edit them from the settings menu once you access the dashboard. Alternatively, you can also create a new dashboard: By cloning an existing dashboard. From any chart: Copy any chart from any dashboard to a new or an existing dashboard. From the data explorer or the query builder: Add any chart you create from our querying features to a new or an existing dashboard. From the explorer: Take any custom view from the entity manager over to dashboards. To organize dashboards with multiple pages, see Add pages to a dashboard. Import a dashboard You can import a dashboard as JSON by selecting the Import a dashboard button located at the top-right corner of the dashboards index: Paste the JSON code. By default, the dashboard belongs to the same account as the original dashboard youâre importing. Select a different account if you want to change it. By default, the new dashboard has the same rights as the original dashboard youâre importing. Select different rights if you want to change them. Tip See how to obtain a dashboardâs JSON. Clone a dashboard Clone any dashboard by clicking the Clone dashboard button that appears when you hover over any dashboard row in the index. You can clone any dashboard regardless of your permission levels. The dashboard is automatically copied and the clone is added to the index. Access the new dashboard by clicking on the message that pops up on your screen. The cloned dashboard is named like the original dashboard followed by the word \"copy\". For example, if you clone a dashboard named this is my dashboard, the clone will be created as this is my dashboard copy. The clone has Public - Read and write permissions. You can edit the name and other properties of the dashboard, like the permissions, at any time. Tip The index displays dashboards according to sorting. To quickly find your cloned dashboard, sort the dashboards by creation date. The new dashboard appears on top. Delete a dashboard To delete a dashboard, hover over the dashboard row at the index until the Delete button appears. You can only delete a dashboard if you created it, or if it has Public - Read and write permissions. For more information, see the permissions information. You can also delete a dashboard from the settings panel of the dashboard. Mark a dashboard as favorite Clicking the star icon next to a dashboard toggles on or off the favorites. When you favorite a dashboard, itâs grouped with other favorite dashboards at the top of the list, and appears on the New Relic One home page. To remove a dashboard from your favorites, select the star icon again. New Relic One doesnât retrieve favorited dashboards from Insights. Learn how to make the transition from Insights to New Relic One. Search and sort dashboards You can search dashboards by dashboard name and author using the search box above the index. You can also sort the dashboards in the index. By default, dashboards you edited recently are at the top of the index in both the favorited and non-favorited sections. To change this order, you can sort both sections by any of the columns in the index, your most recent sort is displayed next time you access New Relic One. Dashboard permissions Dashboards have three types of permissions: Public - Read and write: All users have full rights to the dashboard. Public - Read only: All users are able to see the dashboard, but only you have full rights to work with the dashboard. Other users can access the dashboard but are not able to edit or delete it, although they can clone it. Private: Only you can see the dashboard. When you create a dashboard using the Create a dashboard button or by cloning another dashboard, it will have Public - Read and write rights by default. Access the new dashboard to change this setting. Organize your dashboards with tags You can add tags using our NerdGraph, our tagging API. You can also filter your dashboards by tags, which you can use to identify users, accounts, locations, etc. Click on the tag filter to see the available tags, you can easily select one or more tags from the list to narrow down the dashboards in the index. Key visual tools Dashboards offer intuitive visualization features and tools for advanced data exploration and fast troubleshooting. Consistent chart coloring So that you can quickly see and correlate your data, facets that you apply to more than one chart in a dashboard have a consistent facet color across all the charts. Correlated needle When you mouse over one chart, the correlated needle overlays across all charts or data points in the dashboard at the same time. The tooltip provides the relevant data points from the selected facet, such as maximum and minimum values in a line chart. It also highlights the selected attribute in a pie chart. Data scrubber The chart scrubber helps you select a data point or facet in a chart when the chart is too crowded and facets are too close to each other. Mouse along the needle to smoothly select the adjacent facets and view their associated data points. You can also lighten a heavily populated chart by unselecting one or more of the attributes that appear in the UI. Brush to zoom Drag to select a time segment on any chart and you automatically zoom to that time period on all the charts in the dashboard. The time picker reflects the new period on display in the dashboard. You can return to the default or any other time settings at any time. Custom visualizations You can also make custom visualizations for your dashboards. These enable you to include information from any data source. To learn more about working with custom visualizations, see Build a custom visualization for dashboards and Add custom visualizations to your dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 395.98193,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>dashboards</em>",
        "sections": "Organize <em>your</em> <em>dashboards</em> with tags",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": " and understand the <em>data</em> you collect. <em>Explore</em> <em>your</em> <em>data</em> and correlate connected sources with tailored, user-friendly charts, and quickly learn the state of <em>your</em> system and applications for faster, more efficient troubleshooting. Use <em>dashboards</em> to: Drive insight with custom, high-density interactive"
      },
      "id": "603ec16028ccbc8d07eba78d"
    },
    {
      "sections": [
        "Explore the Public API Performance dashboard",
        "Important",
        "Add the dashboard in New Relic",
        "Explore the dashboard",
        "More about dashboards and data"
      ],
      "title": "Explore the Public API Performance dashboard",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Dashboards"
      ],
      "external_id": "71646dd30d63a0c7e343f4d81061bbb27eceeb86",
      "image": "https://docs.newrelic.com/static/2c9a2621107e0114a2c345fcbb22356f/8c557/Public-API-Performance-Dash-for-GPD.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/explore-public-api-performance-dashboard/",
      "published_at": "2021-05-22T05:25:43Z",
      "updated_at": "2021-05-16T10:24:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Public API Performance dashboard is a dashboard supported by New Relicâs Global Performance data sets. Itâs an out-of-the-box dashboard included as part of your New Relic account. It provides both actionable general insights about the performance of public APIs and an opportunity for new customers to test-drive New Relicâs dashboarding capabilities before adding their own data. The dashboard works by showing real latencies experienced by an anonymized sampling of New Relic customers when accessing popular public APIs. Important Global Performance data sets are presented as-is. Global Performance data sets represent an aggregate of samples across a range of sources, and New Relic makes no effort to attempt to confirm the correctness, completeness, or veracity of the data. This data should not be relied on as the sole source of information for any purpose you may use it, and New Relic is not responsible for decisions made in reliance on this data. Global Performance data sets should not be viewed as either an endorsement or a recommendation by New Relic of the technologies represented in the data sets. Add the dashboard in New Relic If the Public API Performance dashboard isn't already visible in your UI, you can add it easily. Enable the dashboard from one.newrelic.com/: New customers: The dashboard is enabled by default and added to the favorites list for all new accounts. Existing customers: If the dashboard hasn't already been enabled, you can add it by clicking your avatar and selecting Add your data. Click the Public API Performance tile to open the account selector, then click Add and view pre-built dashboard On the Public API Performance dashboard page, start exploring! Click the ... at the corner of any pane to expand charts, view queries, and more. Public API Performance dashboard Explore the dashboard Below are some suggestions for how to explore the Public API Performance dashboard. Click â¦ in the corner of any of the charts and select View query to view the NRQL query used to create the chart. Click â¦ in the corner of any of the charts and select Get as image to view or download any chart as an image. Select specific domains from the bar chart or add a filter by clicking the text field along the at the top of the page. If youâve already added your own data, experiment with copying queries and modifying them for your own use. Important The Public API Performance dashboard is not currently available to EU customers. Important The Public API Performance dashboard does not currently support alerts. More about dashboards and data For more information about the Global Performance data sets that power the Public Performance API dashboard, see New Relic Global Performance data sets. For more information about New Relic dashboards, see our dashboards introduction. Customers can also dive into this data set in greater depth using our new data explorer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 311.82642,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Explore</em> the Public API Performance <em>dashboard</em>",
        "sections": "More about <em>dashboards</em> <em>and</em> <em>data</em>",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": "The Public API Performance <em>dashboard</em> is a <em>dashboard</em> supported by New Relicâs Global Performance <em>data</em> sets. Itâs an out-of-the-box <em>dashboard</em> included as part of <em>your</em> New Relic account. It provides both actionable general insights about the performance of public APIs and an opportunity for new"
      },
      "id": "603e97fa28ccbc013ceba7c1"
    },
    {
      "sections": [
        "Introduction to the data explorer",
        "Tip",
        "Why it matters",
        "Query your data",
        "Use the data explorer",
        "Explore your events",
        "Explore your metrics",
        "Important",
        "Visualize and refine your exploration",
        "Querying area",
        "NRQL query display",
        "Chart area",
        "Share and export",
        "Use cases",
        "Discover your new data",
        "Validate your data",
        "Troubleshooting data issues"
      ],
      "title": "Introduction to the data explorer",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Explore data"
      ],
      "external_id": "9b8a2973c9d452ded5ee065240d210a7fd65d4b3",
      "image": "https://docs.newrelic.com/static/e31aec3eac2aa8c43b9e0332f87f033b/38cea/browse_data_explorer.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/get-started/introduction-data-explorer/",
      "published_at": "2021-05-22T05:31:57Z",
      "updated_at": "2021-05-22T05:31:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the data explorer you can navigate all your data visually, without any NRQL knowledge. Use the data explorer to access, query and customize your data, create visualizations, and make connections between your services in a consistent and curated experience. Tip To use the data explorer and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Why it matters Do you research the state of your systems? Do you need to plan resources, identify and respond to incidents, or troubleshoot faulty behaviors? The data explorer makes it easy to identify, fetch and visualize the data you are looking for through visual menus, without ever using NRQL or building queries. With the data explorer you can: Access events and metrics data in a quick, intuitive way. Exploit the dimensionality of data by making it visible and easily actionable upon. See data from different points of view: from raw data to different visualizations that provide insights on evolution, distribution, etc. Drill down into data with filters. Add your searches to a dashboard in a click. Understand how NRQL works: data explorer shows how queries are built while navigating the available data. Tip Want to switch to New Relic One from Insights? See our transition guide. Query your data To access the data explorer, go to one.newrelic.com and At the top of the page, click the Query your data icon. At the Browse data dropdown, select Events or Metrics. The data explorer is the portal to explore all the data you have in New Relic. You can explore events and metrics on the data explorer UI, or select the Logs and Traces query interfaces to explore those. You can also access the query builder any time by clicking on the tab. Use the data explorer The data explorer consists of a scoping section on the top (a), a data browsing area on the left (b), and a workspace (c). To use the data explorer: Define the scope of the exploration: select the account and data type (metric or event) you want to browse. Select the time range using the time picker. Use the blocks on the left to browse the available data for either events or metrics, and build your search. You can only select one element per block. Blocks are searchable. Explore your events Event type Lists all available events for the selected account. By default, events are sorted by Name. Plot Lists all the numeric attributes of the event previously selected. The first item on the list is count( * ), which is not an attribute. It calculates the count of the selected event. By default attributes are sorted by Name. Select the function that you want to plot. By default each attribute is set to the function Average. Dimensions Lists all the dimensions of the event and plot previously selected. Dimensions are string values that provide information on the event. They represent the cardinality, that is, the uniqueCount of the different values of that attribute in the selected time range. If there is only one element it shows the value of the attribute. By default, dimensions are sorted by Name. Explore your metrics To explore APM timeslice data, select AppID, AppName, or EntityGuid as dimensions (or group by those dimensions). Otherwise, you'll get aggregated data for all entities. Metric Lists all the metrics available for the selected account. By default, metrics are sorted by Name. Dimensions Lists all the dimensions of the metric previously selected. Dimensions are string values that provide information on the metric. They represent the cardinality, that is, the uniqueCount of the different values of that attribute in the selected time range. If there is only one element it shows the value of the attribute. By default, dimensions are by Name. Important We use the metric system (including metric SI prefixes) to display our units. Visualize and refine your exploration The result of your exploration is displayed in the working space on the right. Refine your exploration, or share your chart At the working space you can see: Querying area The querying area breaks down the query into its different constituents. Here you can easily read the result of your exploration as a NRQL query, and check the exact data being plotted. If you are not familiar with NRQL, check this area to learn how queries are built. The different parts of the query are: [ EVENTS ONLY]FROM: the event selected on the first block. SELECT: the plot or metric selected. This input plots only one value and one function. GROUP BY: represents the FACET clause, and groups the data by the selected dimension. LIMIT: type in the amount of values you want to see. WHERE: use this field to further filter results. This input plots n values. Each item can be deleted from the query by clicking on the x. NRQL query display You can see the full query, which is composed by the fields above and the time range selected with the time picker. Tip Need to do more advanced searches or customize your charts? From data explorer you can access query builder to edit the query. Chart area By default data is displayed on a line chart. You can easily change to Area chart, Pie chart, and Bar chart using the chart picker. You can also choose to see your results' raw data as a table, or as in JSON format. If you have selected a dimension, the chart is updated with the different facets. Below the chart you can see the facets' table with the list of facets and the value for each one. Use the facet table to drill down data. By clicking on a facet, it is applied as a filter. The table stays visible so you can easily select another facet to continue your exploration. Share and export You can get the chart as an image, share it as a link, or add it to a dashboard using the Options menu on the top right corner. You can also copy the URL and share your whole exploration with other New Relic users. Use cases See the following examples to learn how and when to use the data explorer. Discover your new data Iâve just connected new instrumentation and want to see if new data is available. Select the account and event or metric that's generating the new data. Use the different tools in the data explorer to toy around the new data that has become available: have a look at the raw data of that event or metric as a table, shape it as a list, or click to see it plotted as a chart. After selecting an event or metric, discover the shape of the data in its dimensions. Guided by cardinality, you can see the different points of view of any data. Found anything relevant? Save it to a dashboard or share it with a colleague. Validate your data I changed a custom event/metric and need to check if this change has been successful. In the data explorer tab, select the account, data type and event/metric you made changes to. Verify the entity is reporting data, and that all the attributes are being plotted. Find the attribute you made changes to and check the update was successful. Troubleshooting data issues I know thereâs something off with an event/metric from an alert or dashboard. I need to know the root cause about the event/metric/attribute behavior. In the data explorer, use the menus to select the event or metric that's not behaving as expected and let the data explorer plot that chart. From there, you can drill down in the dimensions of that data and filter by those attributes that are relevant. You can also see that data from different perspectives: its distribution, ranking of values, or evolution over time. Found anything relevant? Save it to a dashboard or share it with a colleague.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.34473,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to the <em>data</em> <em>explorer</em>",
        "sections": "<em>Query</em> <em>your</em> <em>data</em>",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": "With the <em>data</em> explorer you can navigate all <em>your</em> <em>data</em> visually, without any NRQL knowledge. Use the <em>data</em> explorer to access, <em>query</em> and customize <em>your</em> <em>data</em>, create visualizations, and make connections between <em>your</em> services in a consistent and curated experience. Tip To use the <em>data</em> explorer"
      },
      "id": "603e962e28ccbc6a92eba7a8"
    }
  ],
  "/docs/query-your-data/explore-query-data/dashboards/explore-public-api-performance-dashboard": [
    {
      "sections": [
        "Introduction to dashboards",
        "Tip",
        "Why it matters",
        "Transitioning from Insights",
        "Get started with dashboards",
        "Create a dashboard",
        "Import a dashboard",
        "Clone a dashboard",
        "Delete a dashboard",
        "Mark a dashboard as favorite",
        "Search and sort dashboards",
        "Dashboard permissions",
        "Organize your dashboards with tags",
        "Key visual tools",
        "Consistent chart coloring",
        "Correlated needle",
        "Data scrubber",
        "Brush to zoom",
        "Custom visualizations"
      ],
      "title": "Introduction to dashboards",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Dashboards"
      ],
      "external_id": "caf20070eae1529315d1e0642bd2f853e2872b77",
      "image": "https://docs.newrelic.com/static/c9724f76b9c3ad86f9a22abab501a2af/c1b63/dashboards_intro.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/introduction-dashboards/",
      "published_at": "2021-05-22T05:25:43Z",
      "updated_at": "2021-05-22T05:25:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Envision your data as a complex system of roads: you need to navigate the signs and signals along the way to quickly see and make meaning of the information you collect. New Relic One dashboards gather and chart the specific data you want to see, the way you want to see it, from anywhere in the New Relic platform. Tip To use dashboards and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Why it matters With New Relic One dashboards you can customize and understand the data you collect. Explore your data and correlate connected sources with tailored, user-friendly charts, and quickly learn the state of your system and applications for faster, more efficient troubleshooting. Use dashboards to: Drive insight with custom, high-density interactive visualizations with a consistent UI. View dashboards across your organization using cross-account search. Chart all the events and attributes from everywhere across our platform. For more information, see Data collection. Add custom attributes or send custom event types to most events in order to better understand your business, and see specific details about how your customers interact with your platform, such as page views, host transactions, etc. Manage your charts and dashboards easily using our quick-access CRUD menus and editing options. Explore and contextualize data with advanced tooltips and zoom-in functions to monitor what your systems are doing in real time. Search your dashboards for attributes and metrics. Send data to your dashboards using our APIs. Transitioning from Insights Switching to using New Relic One dashboards from our deprecated Insights dashboards? See our transition guide. If you're using the Insights Dashboard API, we have have a migration guide that will help you transition to using the new API. Get started with dashboards To access dashboards, go to one.newrelic.com and click on Dashboards on the top navigation menu. In the dashboards index, you can view all the dashboards and data apps associated with your New Relic account. This includes the dashboards you've created within the New Relic One platform as well as the dashboards built in Insights. From the top bar, quickly access our explorer as well as all New Relic capabilities, such as APM, Browser and Infrastructure monitoring, Logs, or Applied Intelligence. You can also use the core New Relic One features such as Search or Query your data that are available across the platform. For each dashboard, the index displays the following information: Favorite status, indicated by a star Name: The name of the dashboard Account: The account the dashboard belongs to Created by: The user who created the dashboard Last edited: When the dashboard was last modified Created on: When the dashboard was created Here you can carry out the following actions: Create a dashboard You can easily create a dashboard in New Relic One from the dashboards index by selecting the + Create a dashboard button located at the top-right corner of the dashboards index. Name your dashboard. Names are searchable, so we recommend giving it a meaningful name (your service or application, for instance) using words that will help you locate your dashboard easily. Select the account the dashboard belongs to. Choose carefully because this action cannot be modified. Press Create to continue, or Cancel to return to the index. Tip By default a dashboard is created with Public - Read and write permissions. You can edit them from the settings menu once you access the dashboard. Alternatively, you can also create a new dashboard: By cloning an existing dashboard. From any chart: Copy any chart from any dashboard to a new or an existing dashboard. From the data explorer or the query builder: Add any chart you create from our querying features to a new or an existing dashboard. From the explorer: Take any custom view from the entity manager over to dashboards. To organize dashboards with multiple pages, see Add pages to a dashboard. Import a dashboard You can import a dashboard as JSON by selecting the Import a dashboard button located at the top-right corner of the dashboards index: Paste the JSON code. By default, the dashboard belongs to the same account as the original dashboard youâre importing. Select a different account if you want to change it. By default, the new dashboard has the same rights as the original dashboard youâre importing. Select different rights if you want to change them. Tip See how to obtain a dashboardâs JSON. Clone a dashboard Clone any dashboard by clicking the Clone dashboard button that appears when you hover over any dashboard row in the index. You can clone any dashboard regardless of your permission levels. The dashboard is automatically copied and the clone is added to the index. Access the new dashboard by clicking on the message that pops up on your screen. The cloned dashboard is named like the original dashboard followed by the word \"copy\". For example, if you clone a dashboard named this is my dashboard, the clone will be created as this is my dashboard copy. The clone has Public - Read and write permissions. You can edit the name and other properties of the dashboard, like the permissions, at any time. Tip The index displays dashboards according to sorting. To quickly find your cloned dashboard, sort the dashboards by creation date. The new dashboard appears on top. Delete a dashboard To delete a dashboard, hover over the dashboard row at the index until the Delete button appears. You can only delete a dashboard if you created it, or if it has Public - Read and write permissions. For more information, see the permissions information. You can also delete a dashboard from the settings panel of the dashboard. Mark a dashboard as favorite Clicking the star icon next to a dashboard toggles on or off the favorites. When you favorite a dashboard, itâs grouped with other favorite dashboards at the top of the list, and appears on the New Relic One home page. To remove a dashboard from your favorites, select the star icon again. New Relic One doesnât retrieve favorited dashboards from Insights. Learn how to make the transition from Insights to New Relic One. Search and sort dashboards You can search dashboards by dashboard name and author using the search box above the index. You can also sort the dashboards in the index. By default, dashboards you edited recently are at the top of the index in both the favorited and non-favorited sections. To change this order, you can sort both sections by any of the columns in the index, your most recent sort is displayed next time you access New Relic One. Dashboard permissions Dashboards have three types of permissions: Public - Read and write: All users have full rights to the dashboard. Public - Read only: All users are able to see the dashboard, but only you have full rights to work with the dashboard. Other users can access the dashboard but are not able to edit or delete it, although they can clone it. Private: Only you can see the dashboard. When you create a dashboard using the Create a dashboard button or by cloning another dashboard, it will have Public - Read and write rights by default. Access the new dashboard to change this setting. Organize your dashboards with tags You can add tags using our NerdGraph, our tagging API. You can also filter your dashboards by tags, which you can use to identify users, accounts, locations, etc. Click on the tag filter to see the available tags, you can easily select one or more tags from the list to narrow down the dashboards in the index. Key visual tools Dashboards offer intuitive visualization features and tools for advanced data exploration and fast troubleshooting. Consistent chart coloring So that you can quickly see and correlate your data, facets that you apply to more than one chart in a dashboard have a consistent facet color across all the charts. Correlated needle When you mouse over one chart, the correlated needle overlays across all charts or data points in the dashboard at the same time. The tooltip provides the relevant data points from the selected facet, such as maximum and minimum values in a line chart. It also highlights the selected attribute in a pie chart. Data scrubber The chart scrubber helps you select a data point or facet in a chart when the chart is too crowded and facets are too close to each other. Mouse along the needle to smoothly select the adjacent facets and view their associated data points. You can also lighten a heavily populated chart by unselecting one or more of the attributes that appear in the UI. Brush to zoom Drag to select a time segment on any chart and you automatically zoom to that time period on all the charts in the dashboard. The time picker reflects the new period on display in the dashboard. You can return to the default or any other time settings at any time. Custom visualizations You can also make custom visualizations for your dashboards. These enable you to include information from any data source. To learn more about working with custom visualizations, see Build a custom visualization for dashboards and Add custom visualizations to your dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 395.98166,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>dashboards</em>",
        "sections": "Organize <em>your</em> <em>dashboards</em> with tags",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": " and understand the <em>data</em> you collect. <em>Explore</em> <em>your</em> <em>data</em> and correlate connected sources with tailored, user-friendly charts, and quickly learn the state of <em>your</em> system and applications for faster, more efficient troubleshooting. Use <em>dashboards</em> to: Drive insight with custom, high-density interactive"
      },
      "id": "603ec16028ccbc8d07eba78d"
    },
    {
      "sections": [
        "Add custom visualizations to your dashboards",
        "Add a visualization to a dashboard",
        "Manage your dashboard visualizations"
      ],
      "title": "Add custom visualizations to your dashboards",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Dashboards"
      ],
      "external_id": "d6c9973ef2c2547a99539d1da027b54db23af42c",
      "image": "https://docs.newrelic.com/static/5f7bd9c6a2a163d1f19c5c8b0d844d2f/c1b63/dashboard_viz.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/add-custom-visualizations-your-dashboards/",
      "published_at": "2021-05-22T05:24:30Z",
      "updated_at": "2021-05-22T05:24:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can build your own visualizations and add them to a dashboard. This gives you great flexibility around what you display on dashboards, from a company logo to custom queries from any data source. This visualization shows the number of people in each city who are viewing New Relic within an organization. The visualization was created using the New Relic One CLI and Treemap from the Recharts library. If you have full user permissions, which include the Nerdpack manager role, you can add a visualization to a dashboard as described in the following section. The process for creating a visualization is covered in the guide, Build a custom visualization for dashboards. Add a visualization to a dashboard You can add a visualization to a new or existing dashboard. From New Relic, in the top right, click the Apps button, and then on the Apps page, click Custom Visualizations. Hint: if you don't see the Custom Visualizations tile, use the search to locate it. In Custom Visualizations, select the visualization you want to add to a dashboard and then enable it. If there are configuration options, fill those in. The visualization will update with your changes. Click Add to dashboard and then select a dashboard from the list of available dashboards, or select New dashboard. If you decide to create a new dashboard, select the account where you want to run the dashboard, and give the dashboard a name. Click Add to dashboard, then click the link to your dashboard to see the custom visualization. Manage your dashboard visualizations Deleting: To remove a visualization from a dashboard, click the ellipses button in the right-hand corner of the visualization and click Delete. Editing: To edit a visualization from a dashboard, click the ellipses button in the right-hand corner of the visualization and click Edit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 395.96158,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add custom visualizations to <em>your</em> <em>dashboards</em>",
        "sections": "Add custom visualizations to <em>your</em> <em>dashboards</em>",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": "You can build <em>your</em> own visualizations and add them to a <em>dashboard</em>. This gives you great flexibility around what you display on <em>dashboards</em>, from a company logo to custom queries from any <em>data</em> source. This visualization shows the number of people in each city who are viewing New Relic within"
      },
      "id": "603ec4e628ccbc9409eba7ab"
    },
    {
      "sections": [
        "Introduction to the data explorer",
        "Tip",
        "Why it matters",
        "Query your data",
        "Use the data explorer",
        "Explore your events",
        "Explore your metrics",
        "Important",
        "Visualize and refine your exploration",
        "Querying area",
        "NRQL query display",
        "Chart area",
        "Share and export",
        "Use cases",
        "Discover your new data",
        "Validate your data",
        "Troubleshooting data issues"
      ],
      "title": "Introduction to the data explorer",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Explore data"
      ],
      "external_id": "9b8a2973c9d452ded5ee065240d210a7fd65d4b3",
      "image": "https://docs.newrelic.com/static/e31aec3eac2aa8c43b9e0332f87f033b/38cea/browse_data_explorer.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/get-started/introduction-data-explorer/",
      "published_at": "2021-05-22T05:31:57Z",
      "updated_at": "2021-05-22T05:31:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the data explorer you can navigate all your data visually, without any NRQL knowledge. Use the data explorer to access, query and customize your data, create visualizations, and make connections between your services in a consistent and curated experience. Tip To use the data explorer and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Why it matters Do you research the state of your systems? Do you need to plan resources, identify and respond to incidents, or troubleshoot faulty behaviors? The data explorer makes it easy to identify, fetch and visualize the data you are looking for through visual menus, without ever using NRQL or building queries. With the data explorer you can: Access events and metrics data in a quick, intuitive way. Exploit the dimensionality of data by making it visible and easily actionable upon. See data from different points of view: from raw data to different visualizations that provide insights on evolution, distribution, etc. Drill down into data with filters. Add your searches to a dashboard in a click. Understand how NRQL works: data explorer shows how queries are built while navigating the available data. Tip Want to switch to New Relic One from Insights? See our transition guide. Query your data To access the data explorer, go to one.newrelic.com and At the top of the page, click the Query your data icon. At the Browse data dropdown, select Events or Metrics. The data explorer is the portal to explore all the data you have in New Relic. You can explore events and metrics on the data explorer UI, or select the Logs and Traces query interfaces to explore those. You can also access the query builder any time by clicking on the tab. Use the data explorer The data explorer consists of a scoping section on the top (a), a data browsing area on the left (b), and a workspace (c). To use the data explorer: Define the scope of the exploration: select the account and data type (metric or event) you want to browse. Select the time range using the time picker. Use the blocks on the left to browse the available data for either events or metrics, and build your search. You can only select one element per block. Blocks are searchable. Explore your events Event type Lists all available events for the selected account. By default, events are sorted by Name. Plot Lists all the numeric attributes of the event previously selected. The first item on the list is count( * ), which is not an attribute. It calculates the count of the selected event. By default attributes are sorted by Name. Select the function that you want to plot. By default each attribute is set to the function Average. Dimensions Lists all the dimensions of the event and plot previously selected. Dimensions are string values that provide information on the event. They represent the cardinality, that is, the uniqueCount of the different values of that attribute in the selected time range. If there is only one element it shows the value of the attribute. By default, dimensions are sorted by Name. Explore your metrics To explore APM timeslice data, select AppID, AppName, or EntityGuid as dimensions (or group by those dimensions). Otherwise, you'll get aggregated data for all entities. Metric Lists all the metrics available for the selected account. By default, metrics are sorted by Name. Dimensions Lists all the dimensions of the metric previously selected. Dimensions are string values that provide information on the metric. They represent the cardinality, that is, the uniqueCount of the different values of that attribute in the selected time range. If there is only one element it shows the value of the attribute. By default, dimensions are by Name. Important We use the metric system (including metric SI prefixes) to display our units. Visualize and refine your exploration The result of your exploration is displayed in the working space on the right. Refine your exploration, or share your chart At the working space you can see: Querying area The querying area breaks down the query into its different constituents. Here you can easily read the result of your exploration as a NRQL query, and check the exact data being plotted. If you are not familiar with NRQL, check this area to learn how queries are built. The different parts of the query are: [ EVENTS ONLY]FROM: the event selected on the first block. SELECT: the plot or metric selected. This input plots only one value and one function. GROUP BY: represents the FACET clause, and groups the data by the selected dimension. LIMIT: type in the amount of values you want to see. WHERE: use this field to further filter results. This input plots n values. Each item can be deleted from the query by clicking on the x. NRQL query display You can see the full query, which is composed by the fields above and the time range selected with the time picker. Tip Need to do more advanced searches or customize your charts? From data explorer you can access query builder to edit the query. Chart area By default data is displayed on a line chart. You can easily change to Area chart, Pie chart, and Bar chart using the chart picker. You can also choose to see your results' raw data as a table, or as in JSON format. If you have selected a dimension, the chart is updated with the different facets. Below the chart you can see the facets' table with the list of facets and the value for each one. Use the facet table to drill down data. By clicking on a facet, it is applied as a filter. The table stays visible so you can easily select another facet to continue your exploration. Share and export You can get the chart as an image, share it as a link, or add it to a dashboard using the Options menu on the top right corner. You can also copy the URL and share your whole exploration with other New Relic users. Use cases See the following examples to learn how and when to use the data explorer. Discover your new data Iâve just connected new instrumentation and want to see if new data is available. Select the account and event or metric that's generating the new data. Use the different tools in the data explorer to toy around the new data that has become available: have a look at the raw data of that event or metric as a table, shape it as a list, or click to see it plotted as a chart. After selecting an event or metric, discover the shape of the data in its dimensions. Guided by cardinality, you can see the different points of view of any data. Found anything relevant? Save it to a dashboard or share it with a colleague. Validate your data I changed a custom event/metric and need to check if this change has been successful. In the data explorer tab, select the account, data type and event/metric you made changes to. Verify the entity is reporting data, and that all the attributes are being plotted. Find the attribute you made changes to and check the update was successful. Troubleshooting data issues I know thereâs something off with an event/metric from an alert or dashboard. I need to know the root cause about the event/metric/attribute behavior. In the data explorer, use the menus to select the event or metric that's not behaving as expected and let the data explorer plot that chart. From there, you can drill down in the dimensions of that data and filter by those attributes that are relevant. You can also see that data from different perspectives: its distribution, ranking of values, or evolution over time. Found anything relevant? Save it to a dashboard or share it with a colleague.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.34454,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to the <em>data</em> <em>explorer</em>",
        "sections": "<em>Query</em> <em>your</em> <em>data</em>",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": "With the <em>data</em> explorer you can navigate all <em>your</em> <em>data</em> visually, without any NRQL knowledge. Use the <em>data</em> explorer to access, <em>query</em> and customize <em>your</em> <em>data</em>, create visualizations, and make connections between <em>your</em> services in a consistent and curated experience. Tip To use the <em>data</em> explorer"
      },
      "id": "603e962e28ccbc6a92eba7a8"
    }
  ],
  "/docs/query-your-data/explore-query-data/dashboards/filter-new-relic-one-dashboards-facets": [
    {
      "sections": [
        "Introduction to dashboards",
        "Tip",
        "Why it matters",
        "Transitioning from Insights",
        "Get started with dashboards",
        "Create a dashboard",
        "Import a dashboard",
        "Clone a dashboard",
        "Delete a dashboard",
        "Mark a dashboard as favorite",
        "Search and sort dashboards",
        "Dashboard permissions",
        "Organize your dashboards with tags",
        "Key visual tools",
        "Consistent chart coloring",
        "Correlated needle",
        "Data scrubber",
        "Brush to zoom",
        "Custom visualizations"
      ],
      "title": "Introduction to dashboards",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Dashboards"
      ],
      "external_id": "caf20070eae1529315d1e0642bd2f853e2872b77",
      "image": "https://docs.newrelic.com/static/c9724f76b9c3ad86f9a22abab501a2af/c1b63/dashboards_intro.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/introduction-dashboards/",
      "published_at": "2021-05-22T05:25:43Z",
      "updated_at": "2021-05-22T05:25:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Envision your data as a complex system of roads: you need to navigate the signs and signals along the way to quickly see and make meaning of the information you collect. New Relic One dashboards gather and chart the specific data you want to see, the way you want to see it, from anywhere in the New Relic platform. Tip To use dashboards and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Why it matters With New Relic One dashboards you can customize and understand the data you collect. Explore your data and correlate connected sources with tailored, user-friendly charts, and quickly learn the state of your system and applications for faster, more efficient troubleshooting. Use dashboards to: Drive insight with custom, high-density interactive visualizations with a consistent UI. View dashboards across your organization using cross-account search. Chart all the events and attributes from everywhere across our platform. For more information, see Data collection. Add custom attributes or send custom event types to most events in order to better understand your business, and see specific details about how your customers interact with your platform, such as page views, host transactions, etc. Manage your charts and dashboards easily using our quick-access CRUD menus and editing options. Explore and contextualize data with advanced tooltips and zoom-in functions to monitor what your systems are doing in real time. Search your dashboards for attributes and metrics. Send data to your dashboards using our APIs. Transitioning from Insights Switching to using New Relic One dashboards from our deprecated Insights dashboards? See our transition guide. If you're using the Insights Dashboard API, we have have a migration guide that will help you transition to using the new API. Get started with dashboards To access dashboards, go to one.newrelic.com and click on Dashboards on the top navigation menu. In the dashboards index, you can view all the dashboards and data apps associated with your New Relic account. This includes the dashboards you've created within the New Relic One platform as well as the dashboards built in Insights. From the top bar, quickly access our explorer as well as all New Relic capabilities, such as APM, Browser and Infrastructure monitoring, Logs, or Applied Intelligence. You can also use the core New Relic One features such as Search or Query your data that are available across the platform. For each dashboard, the index displays the following information: Favorite status, indicated by a star Name: The name of the dashboard Account: The account the dashboard belongs to Created by: The user who created the dashboard Last edited: When the dashboard was last modified Created on: When the dashboard was created Here you can carry out the following actions: Create a dashboard You can easily create a dashboard in New Relic One from the dashboards index by selecting the + Create a dashboard button located at the top-right corner of the dashboards index. Name your dashboard. Names are searchable, so we recommend giving it a meaningful name (your service or application, for instance) using words that will help you locate your dashboard easily. Select the account the dashboard belongs to. Choose carefully because this action cannot be modified. Press Create to continue, or Cancel to return to the index. Tip By default a dashboard is created with Public - Read and write permissions. You can edit them from the settings menu once you access the dashboard. Alternatively, you can also create a new dashboard: By cloning an existing dashboard. From any chart: Copy any chart from any dashboard to a new or an existing dashboard. From the data explorer or the query builder: Add any chart you create from our querying features to a new or an existing dashboard. From the explorer: Take any custom view from the entity manager over to dashboards. To organize dashboards with multiple pages, see Add pages to a dashboard. Import a dashboard You can import a dashboard as JSON by selecting the Import a dashboard button located at the top-right corner of the dashboards index: Paste the JSON code. By default, the dashboard belongs to the same account as the original dashboard youâre importing. Select a different account if you want to change it. By default, the new dashboard has the same rights as the original dashboard youâre importing. Select different rights if you want to change them. Tip See how to obtain a dashboardâs JSON. Clone a dashboard Clone any dashboard by clicking the Clone dashboard button that appears when you hover over any dashboard row in the index. You can clone any dashboard regardless of your permission levels. The dashboard is automatically copied and the clone is added to the index. Access the new dashboard by clicking on the message that pops up on your screen. The cloned dashboard is named like the original dashboard followed by the word \"copy\". For example, if you clone a dashboard named this is my dashboard, the clone will be created as this is my dashboard copy. The clone has Public - Read and write permissions. You can edit the name and other properties of the dashboard, like the permissions, at any time. Tip The index displays dashboards according to sorting. To quickly find your cloned dashboard, sort the dashboards by creation date. The new dashboard appears on top. Delete a dashboard To delete a dashboard, hover over the dashboard row at the index until the Delete button appears. You can only delete a dashboard if you created it, or if it has Public - Read and write permissions. For more information, see the permissions information. You can also delete a dashboard from the settings panel of the dashboard. Mark a dashboard as favorite Clicking the star icon next to a dashboard toggles on or off the favorites. When you favorite a dashboard, itâs grouped with other favorite dashboards at the top of the list, and appears on the New Relic One home page. To remove a dashboard from your favorites, select the star icon again. New Relic One doesnât retrieve favorited dashboards from Insights. Learn how to make the transition from Insights to New Relic One. Search and sort dashboards You can search dashboards by dashboard name and author using the search box above the index. You can also sort the dashboards in the index. By default, dashboards you edited recently are at the top of the index in both the favorited and non-favorited sections. To change this order, you can sort both sections by any of the columns in the index, your most recent sort is displayed next time you access New Relic One. Dashboard permissions Dashboards have three types of permissions: Public - Read and write: All users have full rights to the dashboard. Public - Read only: All users are able to see the dashboard, but only you have full rights to work with the dashboard. Other users can access the dashboard but are not able to edit or delete it, although they can clone it. Private: Only you can see the dashboard. When you create a dashboard using the Create a dashboard button or by cloning another dashboard, it will have Public - Read and write rights by default. Access the new dashboard to change this setting. Organize your dashboards with tags You can add tags using our NerdGraph, our tagging API. You can also filter your dashboards by tags, which you can use to identify users, accounts, locations, etc. Click on the tag filter to see the available tags, you can easily select one or more tags from the list to narrow down the dashboards in the index. Key visual tools Dashboards offer intuitive visualization features and tools for advanced data exploration and fast troubleshooting. Consistent chart coloring So that you can quickly see and correlate your data, facets that you apply to more than one chart in a dashboard have a consistent facet color across all the charts. Correlated needle When you mouse over one chart, the correlated needle overlays across all charts or data points in the dashboard at the same time. The tooltip provides the relevant data points from the selected facet, such as maximum and minimum values in a line chart. It also highlights the selected attribute in a pie chart. Data scrubber The chart scrubber helps you select a data point or facet in a chart when the chart is too crowded and facets are too close to each other. Mouse along the needle to smoothly select the adjacent facets and view their associated data points. You can also lighten a heavily populated chart by unselecting one or more of the attributes that appear in the UI. Brush to zoom Drag to select a time segment on any chart and you automatically zoom to that time period on all the charts in the dashboard. The time picker reflects the new period on display in the dashboard. You can return to the default or any other time settings at any time. Custom visualizations You can also make custom visualizations for your dashboards. These enable you to include information from any data source. To learn more about working with custom visualizations, see Build a custom visualization for dashboards and Add custom visualizations to your dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 395.98166,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>dashboards</em>",
        "sections": "Organize <em>your</em> <em>dashboards</em> with tags",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": " and understand the <em>data</em> you collect. <em>Explore</em> <em>your</em> <em>data</em> and correlate connected sources with tailored, user-friendly charts, and quickly learn the state of <em>your</em> system and applications for faster, more efficient troubleshooting. Use <em>dashboards</em> to: Drive insight with custom, high-density interactive"
      },
      "id": "603ec16028ccbc8d07eba78d"
    },
    {
      "sections": [
        "Add custom visualizations to your dashboards",
        "Add a visualization to a dashboard",
        "Manage your dashboard visualizations"
      ],
      "title": "Add custom visualizations to your dashboards",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Dashboards"
      ],
      "external_id": "d6c9973ef2c2547a99539d1da027b54db23af42c",
      "image": "https://docs.newrelic.com/static/5f7bd9c6a2a163d1f19c5c8b0d844d2f/c1b63/dashboard_viz.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/add-custom-visualizations-your-dashboards/",
      "published_at": "2021-05-22T05:24:30Z",
      "updated_at": "2021-05-22T05:24:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can build your own visualizations and add them to a dashboard. This gives you great flexibility around what you display on dashboards, from a company logo to custom queries from any data source. This visualization shows the number of people in each city who are viewing New Relic within an organization. The visualization was created using the New Relic One CLI and Treemap from the Recharts library. If you have full user permissions, which include the Nerdpack manager role, you can add a visualization to a dashboard as described in the following section. The process for creating a visualization is covered in the guide, Build a custom visualization for dashboards. Add a visualization to a dashboard You can add a visualization to a new or existing dashboard. From New Relic, in the top right, click the Apps button, and then on the Apps page, click Custom Visualizations. Hint: if you don't see the Custom Visualizations tile, use the search to locate it. In Custom Visualizations, select the visualization you want to add to a dashboard and then enable it. If there are configuration options, fill those in. The visualization will update with your changes. Click Add to dashboard and then select a dashboard from the list of available dashboards, or select New dashboard. If you decide to create a new dashboard, select the account where you want to run the dashboard, and give the dashboard a name. Click Add to dashboard, then click the link to your dashboard to see the custom visualization. Manage your dashboard visualizations Deleting: To remove a visualization from a dashboard, click the ellipses button in the right-hand corner of the visualization and click Delete. Editing: To edit a visualization from a dashboard, click the ellipses button in the right-hand corner of the visualization and click Edit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 395.96158,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add custom visualizations to <em>your</em> <em>dashboards</em>",
        "sections": "Add custom visualizations to <em>your</em> <em>dashboards</em>",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": "You can build <em>your</em> own visualizations and add them to a <em>dashboard</em>. This gives you great flexibility around what you display on <em>dashboards</em>, from a company logo to custom queries from any <em>data</em> source. This visualization shows the number of people in each city who are viewing New Relic within"
      },
      "id": "603ec4e628ccbc9409eba7ab"
    },
    {
      "sections": [
        "Explore the Public API Performance dashboard",
        "Important",
        "Add the dashboard in New Relic",
        "Explore the dashboard",
        "More about dashboards and data"
      ],
      "title": "Explore the Public API Performance dashboard",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Dashboards"
      ],
      "external_id": "71646dd30d63a0c7e343f4d81061bbb27eceeb86",
      "image": "https://docs.newrelic.com/static/2c9a2621107e0114a2c345fcbb22356f/8c557/Public-API-Performance-Dash-for-GPD.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/explore-public-api-performance-dashboard/",
      "published_at": "2021-05-22T05:25:43Z",
      "updated_at": "2021-05-16T10:24:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Public API Performance dashboard is a dashboard supported by New Relicâs Global Performance data sets. Itâs an out-of-the-box dashboard included as part of your New Relic account. It provides both actionable general insights about the performance of public APIs and an opportunity for new customers to test-drive New Relicâs dashboarding capabilities before adding their own data. The dashboard works by showing real latencies experienced by an anonymized sampling of New Relic customers when accessing popular public APIs. Important Global Performance data sets are presented as-is. Global Performance data sets represent an aggregate of samples across a range of sources, and New Relic makes no effort to attempt to confirm the correctness, completeness, or veracity of the data. This data should not be relied on as the sole source of information for any purpose you may use it, and New Relic is not responsible for decisions made in reliance on this data. Global Performance data sets should not be viewed as either an endorsement or a recommendation by New Relic of the technologies represented in the data sets. Add the dashboard in New Relic If the Public API Performance dashboard isn't already visible in your UI, you can add it easily. Enable the dashboard from one.newrelic.com/: New customers: The dashboard is enabled by default and added to the favorites list for all new accounts. Existing customers: If the dashboard hasn't already been enabled, you can add it by clicking your avatar and selecting Add your data. Click the Public API Performance tile to open the account selector, then click Add and view pre-built dashboard On the Public API Performance dashboard page, start exploring! Click the ... at the corner of any pane to expand charts, view queries, and more. Public API Performance dashboard Explore the dashboard Below are some suggestions for how to explore the Public API Performance dashboard. Click â¦ in the corner of any of the charts and select View query to view the NRQL query used to create the chart. Click â¦ in the corner of any of the charts and select Get as image to view or download any chart as an image. Select specific domains from the bar chart or add a filter by clicking the text field along the at the top of the page. If youâve already added your own data, experiment with copying queries and modifying them for your own use. Important The Public API Performance dashboard is not currently available to EU customers. Important The Public API Performance dashboard does not currently support alerts. More about dashboards and data For more information about the Global Performance data sets that power the Public Performance API dashboard, see New Relic Global Performance data sets. For more information about New Relic dashboards, see our dashboards introduction. Customers can also dive into this data set in greater depth using our new data explorer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 311.82632,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Explore</em> the Public API Performance <em>dashboard</em>",
        "sections": "More about <em>dashboards</em> <em>and</em> <em>data</em>",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": "The Public API Performance <em>dashboard</em> is a <em>dashboard</em> supported by New Relicâs Global Performance <em>data</em> sets. Itâs an out-of-the-box <em>dashboard</em> included as part of <em>your</em> New Relic account. It provides both actionable general insights about the performance of public APIs and an opportunity for new"
      },
      "id": "603e97fa28ccbc013ceba7c1"
    }
  ],
  "/docs/query-your-data/explore-query-data/dashboards/introduction-dashboards": [
    {
      "sections": [
        "Add custom visualizations to your dashboards",
        "Add a visualization to a dashboard",
        "Manage your dashboard visualizations"
      ],
      "title": "Add custom visualizations to your dashboards",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Dashboards"
      ],
      "external_id": "d6c9973ef2c2547a99539d1da027b54db23af42c",
      "image": "https://docs.newrelic.com/static/5f7bd9c6a2a163d1f19c5c8b0d844d2f/c1b63/dashboard_viz.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/add-custom-visualizations-your-dashboards/",
      "published_at": "2021-05-22T05:24:30Z",
      "updated_at": "2021-05-22T05:24:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can build your own visualizations and add them to a dashboard. This gives you great flexibility around what you display on dashboards, from a company logo to custom queries from any data source. This visualization shows the number of people in each city who are viewing New Relic within an organization. The visualization was created using the New Relic One CLI and Treemap from the Recharts library. If you have full user permissions, which include the Nerdpack manager role, you can add a visualization to a dashboard as described in the following section. The process for creating a visualization is covered in the guide, Build a custom visualization for dashboards. Add a visualization to a dashboard You can add a visualization to a new or existing dashboard. From New Relic, in the top right, click the Apps button, and then on the Apps page, click Custom Visualizations. Hint: if you don't see the Custom Visualizations tile, use the search to locate it. In Custom Visualizations, select the visualization you want to add to a dashboard and then enable it. If there are configuration options, fill those in. The visualization will update with your changes. Click Add to dashboard and then select a dashboard from the list of available dashboards, or select New dashboard. If you decide to create a new dashboard, select the account where you want to run the dashboard, and give the dashboard a name. Click Add to dashboard, then click the link to your dashboard to see the custom visualization. Manage your dashboard visualizations Deleting: To remove a visualization from a dashboard, click the ellipses button in the right-hand corner of the visualization and click Delete. Editing: To edit a visualization from a dashboard, click the ellipses button in the right-hand corner of the visualization and click Edit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 395.9613,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add custom visualizations to <em>your</em> <em>dashboards</em>",
        "sections": "Add custom visualizations to <em>your</em> <em>dashboards</em>",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": "You can build <em>your</em> own visualizations and add them to a <em>dashboard</em>. This gives you great flexibility around what you display on <em>dashboards</em>, from a company logo to custom queries from any <em>data</em> source. This visualization shows the number of people in each city who are viewing New Relic within"
      },
      "id": "603ec4e628ccbc9409eba7ab"
    },
    {
      "sections": [
        "Explore the Public API Performance dashboard",
        "Important",
        "Add the dashboard in New Relic",
        "Explore the dashboard",
        "More about dashboards and data"
      ],
      "title": "Explore the Public API Performance dashboard",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Dashboards"
      ],
      "external_id": "71646dd30d63a0c7e343f4d81061bbb27eceeb86",
      "image": "https://docs.newrelic.com/static/2c9a2621107e0114a2c345fcbb22356f/8c557/Public-API-Performance-Dash-for-GPD.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/explore-public-api-performance-dashboard/",
      "published_at": "2021-05-22T05:25:43Z",
      "updated_at": "2021-05-16T10:24:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Public API Performance dashboard is a dashboard supported by New Relicâs Global Performance data sets. Itâs an out-of-the-box dashboard included as part of your New Relic account. It provides both actionable general insights about the performance of public APIs and an opportunity for new customers to test-drive New Relicâs dashboarding capabilities before adding their own data. The dashboard works by showing real latencies experienced by an anonymized sampling of New Relic customers when accessing popular public APIs. Important Global Performance data sets are presented as-is. Global Performance data sets represent an aggregate of samples across a range of sources, and New Relic makes no effort to attempt to confirm the correctness, completeness, or veracity of the data. This data should not be relied on as the sole source of information for any purpose you may use it, and New Relic is not responsible for decisions made in reliance on this data. Global Performance data sets should not be viewed as either an endorsement or a recommendation by New Relic of the technologies represented in the data sets. Add the dashboard in New Relic If the Public API Performance dashboard isn't already visible in your UI, you can add it easily. Enable the dashboard from one.newrelic.com/: New customers: The dashboard is enabled by default and added to the favorites list for all new accounts. Existing customers: If the dashboard hasn't already been enabled, you can add it by clicking your avatar and selecting Add your data. Click the Public API Performance tile to open the account selector, then click Add and view pre-built dashboard On the Public API Performance dashboard page, start exploring! Click the ... at the corner of any pane to expand charts, view queries, and more. Public API Performance dashboard Explore the dashboard Below are some suggestions for how to explore the Public API Performance dashboard. Click â¦ in the corner of any of the charts and select View query to view the NRQL query used to create the chart. Click â¦ in the corner of any of the charts and select Get as image to view or download any chart as an image. Select specific domains from the bar chart or add a filter by clicking the text field along the at the top of the page. If youâve already added your own data, experiment with copying queries and modifying them for your own use. Important The Public API Performance dashboard is not currently available to EU customers. Important The Public API Performance dashboard does not currently support alerts. More about dashboards and data For more information about the Global Performance data sets that power the Public Performance API dashboard, see New Relic Global Performance data sets. For more information about New Relic dashboards, see our dashboards introduction. Customers can also dive into this data set in greater depth using our new data explorer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 311.82623,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Explore</em> the Public API Performance <em>dashboard</em>",
        "sections": "More about <em>dashboards</em> <em>and</em> <em>data</em>",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": "The Public API Performance <em>dashboard</em> is a <em>dashboard</em> supported by New Relicâs Global Performance <em>data</em> sets. Itâs an out-of-the-box <em>dashboard</em> included as part of <em>your</em> New Relic account. It provides both actionable general insights about the performance of public APIs and an opportunity for new"
      },
      "id": "603e97fa28ccbc013ceba7c1"
    },
    {
      "sections": [
        "Introduction to the data explorer",
        "Tip",
        "Why it matters",
        "Query your data",
        "Use the data explorer",
        "Explore your events",
        "Explore your metrics",
        "Important",
        "Visualize and refine your exploration",
        "Querying area",
        "NRQL query display",
        "Chart area",
        "Share and export",
        "Use cases",
        "Discover your new data",
        "Validate your data",
        "Troubleshooting data issues"
      ],
      "title": "Introduction to the data explorer",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Explore data"
      ],
      "external_id": "9b8a2973c9d452ded5ee065240d210a7fd65d4b3",
      "image": "https://docs.newrelic.com/static/e31aec3eac2aa8c43b9e0332f87f033b/38cea/browse_data_explorer.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/get-started/introduction-data-explorer/",
      "published_at": "2021-05-22T05:31:57Z",
      "updated_at": "2021-05-22T05:31:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the data explorer you can navigate all your data visually, without any NRQL knowledge. Use the data explorer to access, query and customize your data, create visualizations, and make connections between your services in a consistent and curated experience. Tip To use the data explorer and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Why it matters Do you research the state of your systems? Do you need to plan resources, identify and respond to incidents, or troubleshoot faulty behaviors? The data explorer makes it easy to identify, fetch and visualize the data you are looking for through visual menus, without ever using NRQL or building queries. With the data explorer you can: Access events and metrics data in a quick, intuitive way. Exploit the dimensionality of data by making it visible and easily actionable upon. See data from different points of view: from raw data to different visualizations that provide insights on evolution, distribution, etc. Drill down into data with filters. Add your searches to a dashboard in a click. Understand how NRQL works: data explorer shows how queries are built while navigating the available data. Tip Want to switch to New Relic One from Insights? See our transition guide. Query your data To access the data explorer, go to one.newrelic.com and At the top of the page, click the Query your data icon. At the Browse data dropdown, select Events or Metrics. The data explorer is the portal to explore all the data you have in New Relic. You can explore events and metrics on the data explorer UI, or select the Logs and Traces query interfaces to explore those. You can also access the query builder any time by clicking on the tab. Use the data explorer The data explorer consists of a scoping section on the top (a), a data browsing area on the left (b), and a workspace (c). To use the data explorer: Define the scope of the exploration: select the account and data type (metric or event) you want to browse. Select the time range using the time picker. Use the blocks on the left to browse the available data for either events or metrics, and build your search. You can only select one element per block. Blocks are searchable. Explore your events Event type Lists all available events for the selected account. By default, events are sorted by Name. Plot Lists all the numeric attributes of the event previously selected. The first item on the list is count( * ), which is not an attribute. It calculates the count of the selected event. By default attributes are sorted by Name. Select the function that you want to plot. By default each attribute is set to the function Average. Dimensions Lists all the dimensions of the event and plot previously selected. Dimensions are string values that provide information on the event. They represent the cardinality, that is, the uniqueCount of the different values of that attribute in the selected time range. If there is only one element it shows the value of the attribute. By default, dimensions are sorted by Name. Explore your metrics To explore APM timeslice data, select AppID, AppName, or EntityGuid as dimensions (or group by those dimensions). Otherwise, you'll get aggregated data for all entities. Metric Lists all the metrics available for the selected account. By default, metrics are sorted by Name. Dimensions Lists all the dimensions of the metric previously selected. Dimensions are string values that provide information on the metric. They represent the cardinality, that is, the uniqueCount of the different values of that attribute in the selected time range. If there is only one element it shows the value of the attribute. By default, dimensions are by Name. Important We use the metric system (including metric SI prefixes) to display our units. Visualize and refine your exploration The result of your exploration is displayed in the working space on the right. Refine your exploration, or share your chart At the working space you can see: Querying area The querying area breaks down the query into its different constituents. Here you can easily read the result of your exploration as a NRQL query, and check the exact data being plotted. If you are not familiar with NRQL, check this area to learn how queries are built. The different parts of the query are: [ EVENTS ONLY]FROM: the event selected on the first block. SELECT: the plot or metric selected. This input plots only one value and one function. GROUP BY: represents the FACET clause, and groups the data by the selected dimension. LIMIT: type in the amount of values you want to see. WHERE: use this field to further filter results. This input plots n values. Each item can be deleted from the query by clicking on the x. NRQL query display You can see the full query, which is composed by the fields above and the time range selected with the time picker. Tip Need to do more advanced searches or customize your charts? From data explorer you can access query builder to edit the query. Chart area By default data is displayed on a line chart. You can easily change to Area chart, Pie chart, and Bar chart using the chart picker. You can also choose to see your results' raw data as a table, or as in JSON format. If you have selected a dimension, the chart is updated with the different facets. Below the chart you can see the facets' table with the list of facets and the value for each one. Use the facet table to drill down data. By clicking on a facet, it is applied as a filter. The table stays visible so you can easily select another facet to continue your exploration. Share and export You can get the chart as an image, share it as a link, or add it to a dashboard using the Options menu on the top right corner. You can also copy the URL and share your whole exploration with other New Relic users. Use cases See the following examples to learn how and when to use the data explorer. Discover your new data Iâve just connected new instrumentation and want to see if new data is available. Select the account and event or metric that's generating the new data. Use the different tools in the data explorer to toy around the new data that has become available: have a look at the raw data of that event or metric as a table, shape it as a list, or click to see it plotted as a chart. After selecting an event or metric, discover the shape of the data in its dimensions. Guided by cardinality, you can see the different points of view of any data. Found anything relevant? Save it to a dashboard or share it with a colleague. Validate your data I changed a custom event/metric and need to check if this change has been successful. In the data explorer tab, select the account, data type and event/metric you made changes to. Verify the entity is reporting data, and that all the attributes are being plotted. Find the attribute you made changes to and check the update was successful. Troubleshooting data issues I know thereâs something off with an event/metric from an alert or dashboard. I need to know the root cause about the event/metric/attribute behavior. In the data explorer, use the menus to select the event or metric that's not behaving as expected and let the data explorer plot that chart. From there, you can drill down in the dimensions of that data and filter by those attributes that are relevant. You can also see that data from different perspectives: its distribution, ranking of values, or evolution over time. Found anything relevant? Save it to a dashboard or share it with a colleague.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.34433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to the <em>data</em> <em>explorer</em>",
        "sections": "<em>Query</em> <em>your</em> <em>data</em>",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": "With the <em>data</em> explorer you can navigate all <em>your</em> <em>data</em> visually, without any NRQL knowledge. Use the <em>data</em> explorer to access, <em>query</em> and customize <em>your</em> <em>data</em>, create visualizations, and make connections between <em>your</em> services in a consistent and curated experience. Tip To use the <em>data</em> explorer"
      },
      "id": "603e962e28ccbc6a92eba7a8"
    }
  ],
  "/docs/query-your-data/explore-query-data/dashboards/manage-your-dashboard": [
    {
      "sections": [
        "Introduction to dashboards",
        "Tip",
        "Why it matters",
        "Transitioning from Insights",
        "Get started with dashboards",
        "Create a dashboard",
        "Import a dashboard",
        "Clone a dashboard",
        "Delete a dashboard",
        "Mark a dashboard as favorite",
        "Search and sort dashboards",
        "Dashboard permissions",
        "Organize your dashboards with tags",
        "Key visual tools",
        "Consistent chart coloring",
        "Correlated needle",
        "Data scrubber",
        "Brush to zoom",
        "Custom visualizations"
      ],
      "title": "Introduction to dashboards",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Dashboards"
      ],
      "external_id": "caf20070eae1529315d1e0642bd2f853e2872b77",
      "image": "https://docs.newrelic.com/static/c9724f76b9c3ad86f9a22abab501a2af/c1b63/dashboards_intro.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/introduction-dashboards/",
      "published_at": "2021-05-22T05:25:43Z",
      "updated_at": "2021-05-22T05:25:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Envision your data as a complex system of roads: you need to navigate the signs and signals along the way to quickly see and make meaning of the information you collect. New Relic One dashboards gather and chart the specific data you want to see, the way you want to see it, from anywhere in the New Relic platform. Tip To use dashboards and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Why it matters With New Relic One dashboards you can customize and understand the data you collect. Explore your data and correlate connected sources with tailored, user-friendly charts, and quickly learn the state of your system and applications for faster, more efficient troubleshooting. Use dashboards to: Drive insight with custom, high-density interactive visualizations with a consistent UI. View dashboards across your organization using cross-account search. Chart all the events and attributes from everywhere across our platform. For more information, see Data collection. Add custom attributes or send custom event types to most events in order to better understand your business, and see specific details about how your customers interact with your platform, such as page views, host transactions, etc. Manage your charts and dashboards easily using our quick-access CRUD menus and editing options. Explore and contextualize data with advanced tooltips and zoom-in functions to monitor what your systems are doing in real time. Search your dashboards for attributes and metrics. Send data to your dashboards using our APIs. Transitioning from Insights Switching to using New Relic One dashboards from our deprecated Insights dashboards? See our transition guide. If you're using the Insights Dashboard API, we have have a migration guide that will help you transition to using the new API. Get started with dashboards To access dashboards, go to one.newrelic.com and click on Dashboards on the top navigation menu. In the dashboards index, you can view all the dashboards and data apps associated with your New Relic account. This includes the dashboards you've created within the New Relic One platform as well as the dashboards built in Insights. From the top bar, quickly access our explorer as well as all New Relic capabilities, such as APM, Browser and Infrastructure monitoring, Logs, or Applied Intelligence. You can also use the core New Relic One features such as Search or Query your data that are available across the platform. For each dashboard, the index displays the following information: Favorite status, indicated by a star Name: The name of the dashboard Account: The account the dashboard belongs to Created by: The user who created the dashboard Last edited: When the dashboard was last modified Created on: When the dashboard was created Here you can carry out the following actions: Create a dashboard You can easily create a dashboard in New Relic One from the dashboards index by selecting the + Create a dashboard button located at the top-right corner of the dashboards index. Name your dashboard. Names are searchable, so we recommend giving it a meaningful name (your service or application, for instance) using words that will help you locate your dashboard easily. Select the account the dashboard belongs to. Choose carefully because this action cannot be modified. Press Create to continue, or Cancel to return to the index. Tip By default a dashboard is created with Public - Read and write permissions. You can edit them from the settings menu once you access the dashboard. Alternatively, you can also create a new dashboard: By cloning an existing dashboard. From any chart: Copy any chart from any dashboard to a new or an existing dashboard. From the data explorer or the query builder: Add any chart you create from our querying features to a new or an existing dashboard. From the explorer: Take any custom view from the entity manager over to dashboards. To organize dashboards with multiple pages, see Add pages to a dashboard. Import a dashboard You can import a dashboard as JSON by selecting the Import a dashboard button located at the top-right corner of the dashboards index: Paste the JSON code. By default, the dashboard belongs to the same account as the original dashboard youâre importing. Select a different account if you want to change it. By default, the new dashboard has the same rights as the original dashboard youâre importing. Select different rights if you want to change them. Tip See how to obtain a dashboardâs JSON. Clone a dashboard Clone any dashboard by clicking the Clone dashboard button that appears when you hover over any dashboard row in the index. You can clone any dashboard regardless of your permission levels. The dashboard is automatically copied and the clone is added to the index. Access the new dashboard by clicking on the message that pops up on your screen. The cloned dashboard is named like the original dashboard followed by the word \"copy\". For example, if you clone a dashboard named this is my dashboard, the clone will be created as this is my dashboard copy. The clone has Public - Read and write permissions. You can edit the name and other properties of the dashboard, like the permissions, at any time. Tip The index displays dashboards according to sorting. To quickly find your cloned dashboard, sort the dashboards by creation date. The new dashboard appears on top. Delete a dashboard To delete a dashboard, hover over the dashboard row at the index until the Delete button appears. You can only delete a dashboard if you created it, or if it has Public - Read and write permissions. For more information, see the permissions information. You can also delete a dashboard from the settings panel of the dashboard. Mark a dashboard as favorite Clicking the star icon next to a dashboard toggles on or off the favorites. When you favorite a dashboard, itâs grouped with other favorite dashboards at the top of the list, and appears on the New Relic One home page. To remove a dashboard from your favorites, select the star icon again. New Relic One doesnât retrieve favorited dashboards from Insights. Learn how to make the transition from Insights to New Relic One. Search and sort dashboards You can search dashboards by dashboard name and author using the search box above the index. You can also sort the dashboards in the index. By default, dashboards you edited recently are at the top of the index in both the favorited and non-favorited sections. To change this order, you can sort both sections by any of the columns in the index, your most recent sort is displayed next time you access New Relic One. Dashboard permissions Dashboards have three types of permissions: Public - Read and write: All users have full rights to the dashboard. Public - Read only: All users are able to see the dashboard, but only you have full rights to work with the dashboard. Other users can access the dashboard but are not able to edit or delete it, although they can clone it. Private: Only you can see the dashboard. When you create a dashboard using the Create a dashboard button or by cloning another dashboard, it will have Public - Read and write rights by default. Access the new dashboard to change this setting. Organize your dashboards with tags You can add tags using our NerdGraph, our tagging API. You can also filter your dashboards by tags, which you can use to identify users, accounts, locations, etc. Click on the tag filter to see the available tags, you can easily select one or more tags from the list to narrow down the dashboards in the index. Key visual tools Dashboards offer intuitive visualization features and tools for advanced data exploration and fast troubleshooting. Consistent chart coloring So that you can quickly see and correlate your data, facets that you apply to more than one chart in a dashboard have a consistent facet color across all the charts. Correlated needle When you mouse over one chart, the correlated needle overlays across all charts or data points in the dashboard at the same time. The tooltip provides the relevant data points from the selected facet, such as maximum and minimum values in a line chart. It also highlights the selected attribute in a pie chart. Data scrubber The chart scrubber helps you select a data point or facet in a chart when the chart is too crowded and facets are too close to each other. Mouse along the needle to smoothly select the adjacent facets and view their associated data points. You can also lighten a heavily populated chart by unselecting one or more of the attributes that appear in the UI. Brush to zoom Drag to select a time segment on any chart and you automatically zoom to that time period on all the charts in the dashboard. The time picker reflects the new period on display in the dashboard. You can return to the default or any other time settings at any time. Custom visualizations You can also make custom visualizations for your dashboards. These enable you to include information from any data source. To learn more about working with custom visualizations, see Build a custom visualization for dashboards and Add custom visualizations to your dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 395.98138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>dashboards</em>",
        "sections": "Organize <em>your</em> <em>dashboards</em> with tags",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": " and understand the <em>data</em> you collect. <em>Explore</em> <em>your</em> <em>data</em> and correlate connected sources with tailored, user-friendly charts, and quickly learn the state of <em>your</em> system and applications for faster, more efficient troubleshooting. Use <em>dashboards</em> to: Drive insight with custom, high-density interactive"
      },
      "id": "603ec16028ccbc8d07eba78d"
    },
    {
      "sections": [
        "Add custom visualizations to your dashboards",
        "Add a visualization to a dashboard",
        "Manage your dashboard visualizations"
      ],
      "title": "Add custom visualizations to your dashboards",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Dashboards"
      ],
      "external_id": "d6c9973ef2c2547a99539d1da027b54db23af42c",
      "image": "https://docs.newrelic.com/static/5f7bd9c6a2a163d1f19c5c8b0d844d2f/c1b63/dashboard_viz.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/add-custom-visualizations-your-dashboards/",
      "published_at": "2021-05-22T05:24:30Z",
      "updated_at": "2021-05-22T05:24:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can build your own visualizations and add them to a dashboard. This gives you great flexibility around what you display on dashboards, from a company logo to custom queries from any data source. This visualization shows the number of people in each city who are viewing New Relic within an organization. The visualization was created using the New Relic One CLI and Treemap from the Recharts library. If you have full user permissions, which include the Nerdpack manager role, you can add a visualization to a dashboard as described in the following section. The process for creating a visualization is covered in the guide, Build a custom visualization for dashboards. Add a visualization to a dashboard You can add a visualization to a new or existing dashboard. From New Relic, in the top right, click the Apps button, and then on the Apps page, click Custom Visualizations. Hint: if you don't see the Custom Visualizations tile, use the search to locate it. In Custom Visualizations, select the visualization you want to add to a dashboard and then enable it. If there are configuration options, fill those in. The visualization will update with your changes. Click Add to dashboard and then select a dashboard from the list of available dashboards, or select New dashboard. If you decide to create a new dashboard, select the account where you want to run the dashboard, and give the dashboard a name. Click Add to dashboard, then click the link to your dashboard to see the custom visualization. Manage your dashboard visualizations Deleting: To remove a visualization from a dashboard, click the ellipses button in the right-hand corner of the visualization and click Delete. Editing: To edit a visualization from a dashboard, click the ellipses button in the right-hand corner of the visualization and click Edit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 395.9613,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add custom visualizations to <em>your</em> <em>dashboards</em>",
        "sections": "Add custom visualizations to <em>your</em> <em>dashboards</em>",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": "You can build <em>your</em> own visualizations and add them to a <em>dashboard</em>. This gives you great flexibility around what you display on <em>dashboards</em>, from a company logo to custom queries from any <em>data</em> source. This visualization shows the number of people in each city who are viewing New Relic within"
      },
      "id": "603ec4e628ccbc9409eba7ab"
    },
    {
      "sections": [
        "Explore the Public API Performance dashboard",
        "Important",
        "Add the dashboard in New Relic",
        "Explore the dashboard",
        "More about dashboards and data"
      ],
      "title": "Explore the Public API Performance dashboard",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Dashboards"
      ],
      "external_id": "71646dd30d63a0c7e343f4d81061bbb27eceeb86",
      "image": "https://docs.newrelic.com/static/2c9a2621107e0114a2c345fcbb22356f/8c557/Public-API-Performance-Dash-for-GPD.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/explore-public-api-performance-dashboard/",
      "published_at": "2021-05-22T05:25:43Z",
      "updated_at": "2021-05-16T10:24:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Public API Performance dashboard is a dashboard supported by New Relicâs Global Performance data sets. Itâs an out-of-the-box dashboard included as part of your New Relic account. It provides both actionable general insights about the performance of public APIs and an opportunity for new customers to test-drive New Relicâs dashboarding capabilities before adding their own data. The dashboard works by showing real latencies experienced by an anonymized sampling of New Relic customers when accessing popular public APIs. Important Global Performance data sets are presented as-is. Global Performance data sets represent an aggregate of samples across a range of sources, and New Relic makes no effort to attempt to confirm the correctness, completeness, or veracity of the data. This data should not be relied on as the sole source of information for any purpose you may use it, and New Relic is not responsible for decisions made in reliance on this data. Global Performance data sets should not be viewed as either an endorsement or a recommendation by New Relic of the technologies represented in the data sets. Add the dashboard in New Relic If the Public API Performance dashboard isn't already visible in your UI, you can add it easily. Enable the dashboard from one.newrelic.com/: New customers: The dashboard is enabled by default and added to the favorites list for all new accounts. Existing customers: If the dashboard hasn't already been enabled, you can add it by clicking your avatar and selecting Add your data. Click the Public API Performance tile to open the account selector, then click Add and view pre-built dashboard On the Public API Performance dashboard page, start exploring! Click the ... at the corner of any pane to expand charts, view queries, and more. Public API Performance dashboard Explore the dashboard Below are some suggestions for how to explore the Public API Performance dashboard. Click â¦ in the corner of any of the charts and select View query to view the NRQL query used to create the chart. Click â¦ in the corner of any of the charts and select Get as image to view or download any chart as an image. Select specific domains from the bar chart or add a filter by clicking the text field along the at the top of the page. If youâve already added your own data, experiment with copying queries and modifying them for your own use. Important The Public API Performance dashboard is not currently available to EU customers. Important The Public API Performance dashboard does not currently support alerts. More about dashboards and data For more information about the Global Performance data sets that power the Public Performance API dashboard, see New Relic Global Performance data sets. For more information about New Relic dashboards, see our dashboards introduction. Customers can also dive into this data set in greater depth using our new data explorer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 311.82623,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Explore</em> the Public API Performance <em>dashboard</em>",
        "sections": "More about <em>dashboards</em> <em>and</em> <em>data</em>",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": "The Public API Performance <em>dashboard</em> is a <em>dashboard</em> supported by New Relicâs Global Performance <em>data</em> sets. Itâs an out-of-the-box <em>dashboard</em> included as part of <em>your</em> New Relic account. It provides both actionable general insights about the performance of public APIs and an opportunity for new"
      },
      "id": "603e97fa28ccbc013ceba7c1"
    }
  ],
  "/docs/query-your-data/explore-query-data/dashboards/new-relic-global-performance-data-sets": [
    {
      "sections": [
        "Introduction to dashboards",
        "Tip",
        "Why it matters",
        "Transitioning from Insights",
        "Get started with dashboards",
        "Create a dashboard",
        "Import a dashboard",
        "Clone a dashboard",
        "Delete a dashboard",
        "Mark a dashboard as favorite",
        "Search and sort dashboards",
        "Dashboard permissions",
        "Organize your dashboards with tags",
        "Key visual tools",
        "Consistent chart coloring",
        "Correlated needle",
        "Data scrubber",
        "Brush to zoom",
        "Custom visualizations"
      ],
      "title": "Introduction to dashboards",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Dashboards"
      ],
      "external_id": "caf20070eae1529315d1e0642bd2f853e2872b77",
      "image": "https://docs.newrelic.com/static/c9724f76b9c3ad86f9a22abab501a2af/c1b63/dashboards_intro.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/introduction-dashboards/",
      "published_at": "2021-05-22T05:25:43Z",
      "updated_at": "2021-05-22T05:25:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Envision your data as a complex system of roads: you need to navigate the signs and signals along the way to quickly see and make meaning of the information you collect. New Relic One dashboards gather and chart the specific data you want to see, the way you want to see it, from anywhere in the New Relic platform. Tip To use dashboards and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Why it matters With New Relic One dashboards you can customize and understand the data you collect. Explore your data and correlate connected sources with tailored, user-friendly charts, and quickly learn the state of your system and applications for faster, more efficient troubleshooting. Use dashboards to: Drive insight with custom, high-density interactive visualizations with a consistent UI. View dashboards across your organization using cross-account search. Chart all the events and attributes from everywhere across our platform. For more information, see Data collection. Add custom attributes or send custom event types to most events in order to better understand your business, and see specific details about how your customers interact with your platform, such as page views, host transactions, etc. Manage your charts and dashboards easily using our quick-access CRUD menus and editing options. Explore and contextualize data with advanced tooltips and zoom-in functions to monitor what your systems are doing in real time. Search your dashboards for attributes and metrics. Send data to your dashboards using our APIs. Transitioning from Insights Switching to using New Relic One dashboards from our deprecated Insights dashboards? See our transition guide. If you're using the Insights Dashboard API, we have have a migration guide that will help you transition to using the new API. Get started with dashboards To access dashboards, go to one.newrelic.com and click on Dashboards on the top navigation menu. In the dashboards index, you can view all the dashboards and data apps associated with your New Relic account. This includes the dashboards you've created within the New Relic One platform as well as the dashboards built in Insights. From the top bar, quickly access our explorer as well as all New Relic capabilities, such as APM, Browser and Infrastructure monitoring, Logs, or Applied Intelligence. You can also use the core New Relic One features such as Search or Query your data that are available across the platform. For each dashboard, the index displays the following information: Favorite status, indicated by a star Name: The name of the dashboard Account: The account the dashboard belongs to Created by: The user who created the dashboard Last edited: When the dashboard was last modified Created on: When the dashboard was created Here you can carry out the following actions: Create a dashboard You can easily create a dashboard in New Relic One from the dashboards index by selecting the + Create a dashboard button located at the top-right corner of the dashboards index. Name your dashboard. Names are searchable, so we recommend giving it a meaningful name (your service or application, for instance) using words that will help you locate your dashboard easily. Select the account the dashboard belongs to. Choose carefully because this action cannot be modified. Press Create to continue, or Cancel to return to the index. Tip By default a dashboard is created with Public - Read and write permissions. You can edit them from the settings menu once you access the dashboard. Alternatively, you can also create a new dashboard: By cloning an existing dashboard. From any chart: Copy any chart from any dashboard to a new or an existing dashboard. From the data explorer or the query builder: Add any chart you create from our querying features to a new or an existing dashboard. From the explorer: Take any custom view from the entity manager over to dashboards. To organize dashboards with multiple pages, see Add pages to a dashboard. Import a dashboard You can import a dashboard as JSON by selecting the Import a dashboard button located at the top-right corner of the dashboards index: Paste the JSON code. By default, the dashboard belongs to the same account as the original dashboard youâre importing. Select a different account if you want to change it. By default, the new dashboard has the same rights as the original dashboard youâre importing. Select different rights if you want to change them. Tip See how to obtain a dashboardâs JSON. Clone a dashboard Clone any dashboard by clicking the Clone dashboard button that appears when you hover over any dashboard row in the index. You can clone any dashboard regardless of your permission levels. The dashboard is automatically copied and the clone is added to the index. Access the new dashboard by clicking on the message that pops up on your screen. The cloned dashboard is named like the original dashboard followed by the word \"copy\". For example, if you clone a dashboard named this is my dashboard, the clone will be created as this is my dashboard copy. The clone has Public - Read and write permissions. You can edit the name and other properties of the dashboard, like the permissions, at any time. Tip The index displays dashboards according to sorting. To quickly find your cloned dashboard, sort the dashboards by creation date. The new dashboard appears on top. Delete a dashboard To delete a dashboard, hover over the dashboard row at the index until the Delete button appears. You can only delete a dashboard if you created it, or if it has Public - Read and write permissions. For more information, see the permissions information. You can also delete a dashboard from the settings panel of the dashboard. Mark a dashboard as favorite Clicking the star icon next to a dashboard toggles on or off the favorites. When you favorite a dashboard, itâs grouped with other favorite dashboards at the top of the list, and appears on the New Relic One home page. To remove a dashboard from your favorites, select the star icon again. New Relic One doesnât retrieve favorited dashboards from Insights. Learn how to make the transition from Insights to New Relic One. Search and sort dashboards You can search dashboards by dashboard name and author using the search box above the index. You can also sort the dashboards in the index. By default, dashboards you edited recently are at the top of the index in both the favorited and non-favorited sections. To change this order, you can sort both sections by any of the columns in the index, your most recent sort is displayed next time you access New Relic One. Dashboard permissions Dashboards have three types of permissions: Public - Read and write: All users have full rights to the dashboard. Public - Read only: All users are able to see the dashboard, but only you have full rights to work with the dashboard. Other users can access the dashboard but are not able to edit or delete it, although they can clone it. Private: Only you can see the dashboard. When you create a dashboard using the Create a dashboard button or by cloning another dashboard, it will have Public - Read and write rights by default. Access the new dashboard to change this setting. Organize your dashboards with tags You can add tags using our NerdGraph, our tagging API. You can also filter your dashboards by tags, which you can use to identify users, accounts, locations, etc. Click on the tag filter to see the available tags, you can easily select one or more tags from the list to narrow down the dashboards in the index. Key visual tools Dashboards offer intuitive visualization features and tools for advanced data exploration and fast troubleshooting. Consistent chart coloring So that you can quickly see and correlate your data, facets that you apply to more than one chart in a dashboard have a consistent facet color across all the charts. Correlated needle When you mouse over one chart, the correlated needle overlays across all charts or data points in the dashboard at the same time. The tooltip provides the relevant data points from the selected facet, such as maximum and minimum values in a line chart. It also highlights the selected attribute in a pie chart. Data scrubber The chart scrubber helps you select a data point or facet in a chart when the chart is too crowded and facets are too close to each other. Mouse along the needle to smoothly select the adjacent facets and view their associated data points. You can also lighten a heavily populated chart by unselecting one or more of the attributes that appear in the UI. Brush to zoom Drag to select a time segment on any chart and you automatically zoom to that time period on all the charts in the dashboard. The time picker reflects the new period on display in the dashboard. You can return to the default or any other time settings at any time. Custom visualizations You can also make custom visualizations for your dashboards. These enable you to include information from any data source. To learn more about working with custom visualizations, see Build a custom visualization for dashboards and Add custom visualizations to your dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 395.9811,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>dashboards</em>",
        "sections": "Organize <em>your</em> <em>dashboards</em> with tags",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": " and understand the <em>data</em> you collect. <em>Explore</em> <em>your</em> <em>data</em> and correlate connected sources with tailored, user-friendly charts, and quickly learn the state of <em>your</em> system and applications for faster, more efficient troubleshooting. Use <em>dashboards</em> to: Drive insight with custom, high-density interactive"
      },
      "id": "603ec16028ccbc8d07eba78d"
    },
    {
      "sections": [
        "Add custom visualizations to your dashboards",
        "Add a visualization to a dashboard",
        "Manage your dashboard visualizations"
      ],
      "title": "Add custom visualizations to your dashboards",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Dashboards"
      ],
      "external_id": "d6c9973ef2c2547a99539d1da027b54db23af42c",
      "image": "https://docs.newrelic.com/static/5f7bd9c6a2a163d1f19c5c8b0d844d2f/c1b63/dashboard_viz.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/add-custom-visualizations-your-dashboards/",
      "published_at": "2021-05-22T05:24:30Z",
      "updated_at": "2021-05-22T05:24:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can build your own visualizations and add them to a dashboard. This gives you great flexibility around what you display on dashboards, from a company logo to custom queries from any data source. This visualization shows the number of people in each city who are viewing New Relic within an organization. The visualization was created using the New Relic One CLI and Treemap from the Recharts library. If you have full user permissions, which include the Nerdpack manager role, you can add a visualization to a dashboard as described in the following section. The process for creating a visualization is covered in the guide, Build a custom visualization for dashboards. Add a visualization to a dashboard You can add a visualization to a new or existing dashboard. From New Relic, in the top right, click the Apps button, and then on the Apps page, click Custom Visualizations. Hint: if you don't see the Custom Visualizations tile, use the search to locate it. In Custom Visualizations, select the visualization you want to add to a dashboard and then enable it. If there are configuration options, fill those in. The visualization will update with your changes. Click Add to dashboard and then select a dashboard from the list of available dashboards, or select New dashboard. If you decide to create a new dashboard, select the account where you want to run the dashboard, and give the dashboard a name. Click Add to dashboard, then click the link to your dashboard to see the custom visualization. Manage your dashboard visualizations Deleting: To remove a visualization from a dashboard, click the ellipses button in the right-hand corner of the visualization and click Delete. Editing: To edit a visualization from a dashboard, click the ellipses button in the right-hand corner of the visualization and click Edit.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 395.96103,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add custom visualizations to <em>your</em> <em>dashboards</em>",
        "sections": "Add custom visualizations to <em>your</em> <em>dashboards</em>",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": "You can build <em>your</em> own visualizations and add them to a <em>dashboard</em>. This gives you great flexibility around what you display on <em>dashboards</em>, from a company logo to custom queries from any <em>data</em> source. This visualization shows the number of people in each city who are viewing New Relic within"
      },
      "id": "603ec4e628ccbc9409eba7ab"
    },
    {
      "sections": [
        "Explore the Public API Performance dashboard",
        "Important",
        "Add the dashboard in New Relic",
        "Explore the dashboard",
        "More about dashboards and data"
      ],
      "title": "Explore the Public API Performance dashboard",
      "type": "docs",
      "tags": [
        "Query your data",
        "Explore and query data",
        "Dashboards"
      ],
      "external_id": "71646dd30d63a0c7e343f4d81061bbb27eceeb86",
      "image": "https://docs.newrelic.com/static/2c9a2621107e0114a2c345fcbb22356f/8c557/Public-API-Performance-Dash-for-GPD.png",
      "url": "https://docs.newrelic.com/docs/query-your-data/explore-query-data/dashboards/explore-public-api-performance-dashboard/",
      "published_at": "2021-05-22T05:25:43Z",
      "updated_at": "2021-05-16T10:24:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Public API Performance dashboard is a dashboard supported by New Relicâs Global Performance data sets. Itâs an out-of-the-box dashboard included as part of your New Relic account. It provides both actionable general insights about the performance of public APIs and an opportunity for new customers to test-drive New Relicâs dashboarding capabilities before adding their own data. The dashboard works by showing real latencies experienced by an anonymized sampling of New Relic customers when accessing popular public APIs. Important Global Performance data sets are presented as-is. Global Performance data sets represent an aggregate of samples across a range of sources, and New Relic makes no effort to attempt to confirm the correctness, completeness, or veracity of the data. This data should not be relied on as the sole source of information for any purpose you may use it, and New Relic is not responsible for decisions made in reliance on this data. Global Performance data sets should not be viewed as either an endorsement or a recommendation by New Relic of the technologies represented in the data sets. Add the dashboard in New Relic If the Public API Performance dashboard isn't already visible in your UI, you can add it easily. Enable the dashboard from one.newrelic.com/: New customers: The dashboard is enabled by default and added to the favorites list for all new accounts. Existing customers: If the dashboard hasn't already been enabled, you can add it by clicking your avatar and selecting Add your data. Click the Public API Performance tile to open the account selector, then click Add and view pre-built dashboard On the Public API Performance dashboard page, start exploring! Click the ... at the corner of any pane to expand charts, view queries, and more. Public API Performance dashboard Explore the dashboard Below are some suggestions for how to explore the Public API Performance dashboard. Click â¦ in the corner of any of the charts and select View query to view the NRQL query used to create the chart. Click â¦ in the corner of any of the charts and select Get as image to view or download any chart as an image. Select specific domains from the bar chart or add a filter by clicking the text field along the at the top of the page. If youâve already added your own data, experiment with copying queries and modifying them for your own use. Important The Public API Performance dashboard is not currently available to EU customers. Important The Public API Performance dashboard does not currently support alerts. More about dashboards and data For more information about the Global Performance data sets that power the Public Performance API dashboard, see New Relic Global Performance data sets. For more information about New Relic dashboards, see our dashboards introduction. Customers can also dive into this data set in greater depth using our new data explorer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 311.8261,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Explore</em> the Public API Performance <em>dashboard</em>",
        "sections": "More about <em>dashboards</em> <em>and</em> <em>data</em>",
        "tags": "<em>Explore</em> <em>and</em> <em>query</em> <em>data</em>",
        "body": "The Public API Performance <em>dashboard</em> is a <em>dashboard</em> supported by New Relicâs Global Performance <em>data</em> sets. Itâs an out-of-the-box <em>dashboard</em> included as part of <em>your</em> New Relic account. It provides both actionable general insights about the performance of public APIs and an opportunity for new"
      },
      "id": "603e97fa28ccbc013ceba7c1"
    }
  ]
}