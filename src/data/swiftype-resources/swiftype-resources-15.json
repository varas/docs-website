{
  "/docs/new-relic-one/use-new-relic-one/ui-data/new-relic-feature-end-life-announcements-july-2020": [
    {
      "sections": [
        "What is an entity in New Relic?",
        "What is an entity?",
        "Find and explore entities",
        "Tip",
        "Entity synthesis",
        "Reserved attributes for synthesized entities",
        "Entity relationships",
        "Important",
        "Group and organize entities"
      ],
      "title": "What is an entity in New Relic?",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "52a3e08bc9103c717d27b153e4fd4f547d6ecc32",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/what-entity-new-relic/",
      "published_at": "2021-06-08T19:55:34Z",
      "updated_at": "2021-06-08T19:55:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic monitoring is built around the concept of the entity. An entity is anything that reports data to New Relic. This document explains: What entities are How to find entity data How to modify existing entity types or create new ones How entities are related to one another How to organize them into groups for easier analysis What is an entity? From a New Relic product perspective, entity is a broad concept. An entity is anything we can identify that has data you can monitor. \"Entity\" can refer to fundamental data-reporting components like applications, hosts, and database services, but it can also refer to larger groupings of those components. For example, to monitor a data center, you could aggregate those hosts in New Relic to be a workload (a custom grouping of entities). That workload is, itself, also an entity. This conceptual definition of \"entity\" is important because New Relic's goal is to give you practical information about the status of your business-important entities (and not just give you an unhelpfully large stream of assorted metrics and data). Our focus on entities, and the relationships between them, helps us optimize monitoring and troubleshooting of complex, modern systems. Find and explore entities You'll find your entities wherever you see your data reporting in New Relic. Tip You can create new entity types to monitor any data source. Learn more about entity synthesis. Some tips for finding and understanding entity data: To find an entity's unique global identifier (GUID): from any list of monitored entities in the New Relic Explorer, hover over a specific entity and click the icon to see the GUID and other metadata. An entity's GUID is reported as the attribute entityGuid. You can query for an entity using this attribute in the query builder. Use the Related Entities view in the New Relic Explorer, service maps, distributed tracing, and our relationships API in GraphQL to see connections between entities. Explore entity data using our NerdGraph GraphiQL explorer (api.newrelic.com/graphiql). Entity synthesis If you have telemetry from any source that's not supported by New Relic out of the box, you can propose a mapping for it. Once approved, any telemetry received by New Relic which matches your definition file will be synthesized into an entity. Tip For more information on how to modify existing entity types or create new ones please refer to our Entity Synthesis documentation. Reserved attributes for synthesized entities These attributes are meant to be synthesized from the telemetry we receive. Do not set them unless you are aware of the implications and consequences. Attribute Description entity.guid Generally, you should not set this attribute field on your telemetry data. New Relic may add this field to ingested data to store a unique identifier for the entity associated with the data point. If telemetry arrives with the entity.guid attribute already present, then New Relic will not change the value. However, it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. One use case for passing this attribute is to associate ingested telemetry with an entity already created by New Relic. When the entity.guid attribute is sent, the value will override New Relic’s entity identification system (such as entity synthesis definitions) and instead will use the attribute as the data. entity.name This attribute shouldn't be put on ingested telemetry data unless you're trying to override the entity name that would have been selected by New Relic’s entity identification system. While New Relic won't change the value if it's already present on the data, New Relic may add the attribute to your data. Therefore invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. If this field is present on ingested telemetry, its value will be used to name the entity associated with the data point. This name will be used instead of the name selected by New Relic’s entity identification system (for example, entity synthesis definitions). Note that many entities use the name as part of their identification, so changing this field may result in the generation of a new entity. entity.type This attribute shouldn't be put on ingested telemetry data except for certain legacy cases where it's required to distinguish entity types. Passing this field may interfere with entity detection, particularly if unrecognized values are sent in this field. While New Relic won't change the value if already present on the data, the field is not guaranteed to provide unambiguous filtering of telemetry at query-time. Existing entity definitions already have overlapping values, and we recommend avoiding entity.type in favor of other fields for filtering telemetry queries. This field is used by New Relic, meaning that invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. Entity relationships Connections between entities are automatically created by New Relic based on what we can infer from your telemetry. For example, when two services that communicate using HTTP are instrumented with New Relic, we infer a \"calls/called-by\" relationship between them. When viewing a single entity in either the New Relic Explorer, Navigator, or Lookout, you can see its Related Entities in the entity's mini overview. Related Entities is a visualization of the various entities connected directly to the current entity in focus. You can quickly view important metrics for these related entities and navigate from one entity to another, through all the connected parts of your stack. Tip You can learn more about how entities are related using our NerdGraph API. When relationships are not automatically detected, you can manually create them using the \"Add/edit related entities\" link in Related Entities. Important Currently, you can only manually create calls/called-by relationships between service entities. Tip To manage manual relationships, you need to have modify and delete capabilities on entity relationships. These are granted to user roles by default. Group and organize entities You can place entities into groups that reflect business-important relationships in your organization. For example, you might group all entities related to a specific team or department, or related to a specific service. Or you might group multiple hosts together to reflect their grouping in a data center. To group your entities, see: How to tag entities Create workloads (groups of related entities)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 219.94345,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "What is an entity in <em>New</em> <em>Relic</em>?",
        "sections": "What is an entity in <em>New</em> <em>Relic</em>?",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": ", it may cause undefined behavior such as missing entities in the <em>UI</em>, or telemetry not associating with the expected entities. <em>One</em> <em>use</em> case for passing this attribute is to associate ingested telemetry with an entity already created by <em>New</em> <em>Relic</em>. When the entity.guid attribute is sent, the value"
      },
      "id": "603ec160e7b9d295f72a07fc"
    },
    {
      "sections": [
        "Use tags to help organize and find your data",
        "Tip",
        "Tag format and limits",
        "Best practices and tips",
        "Tips on keeping tags simple:",
        "Tips on using tags consistently:",
        "Tips on cross-team implementation:",
        "Tag examples",
        "Team-related tags",
        "Environment-related tags",
        "Criticality-related tags",
        "How tags are added",
        "Add tags via UI or API",
        "APM agent tags",
        "Infrastructure data tags",
        "Automate tags with our CLI",
        "Use tags to filter the UI",
        "Custom queries, charts, and alerts",
        "Query and alert on APM tags",
        "Throughput across shards",
        "Transactions per team",
        "Alert on error rate for teams",
        "Query and alert on attributes"
      ],
      "title": "Use tags to help organize and find your data",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "e2e2d53776b9109965df9de2a20660e9f60bd479",
      "image": "https://docs.newrelic.com/static/529f55ef72f3e366e6cb4a7be67229b6/c1b63/new-relic-tags-workloads_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/use-tags-help-organize-find-your-data/",
      "published_at": "2021-06-08T19:54:20Z",
      "updated_at": "2021-06-08T19:54:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the software industry, a tag typically refers to a piece of metadata added to a data set for the purpose of improving data organization and findability. At New Relic, our tags are key:value pairs (like team: operations) added to various sets of data, like monitored apps and hosts, agents, dashboards, and workloads. We make some important attributes available as tags (for example, app metadata like app name and language, and host metadata like host name and AWS region), and you can also add your own custom tags. You can use tags in the UI to filter down to relevant data, as shown here: Here you can see an accountId tag being used to filter workloads to a specific account. You can use tags to: Help organize data coming from a large number of sources and/or to a large number of New Relic accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see example use cases) Better organize and search dashboards and workloads Help you query and chart APM data Tags are useful for organizing data at a high level. If you wanted to add more fine-grained detail, like capturing user names or other high-cardinality values, custom attributes or custom events would be a better solution. Tip At New Relic, tags were previously called \"labels.\" You may sometimes see \"label\" used in our code; for example, some of our APM agent config files use a label config option for tags. Tag format and limits Format requirements and limits for tags: The UI has limits on the total number of tags it can display per entity: Limit of 100 for tags reported by default or added via agent/integration configuration. Limit of 100 for custom tags added via UI or API. The following are maximum character length for tags: Key: 128 characters Value: 256 characters When using our API to add tags, a dash (-) in a tag key is interpreted as a minus symbol. If your tag key has a dash, use back ticks around it (like `key-name`). Best practices and tips Before adding tags, we recommend first seeing how our default tags work for you. When you're ready to add your own tags, read the best practices below to get the most out of them. Tips on keeping tags simple: Start by adding only tags you know you’ll definitely use. Unused tags create noise and may add confusion. Try to use short tags. Shorter tags are easier to parse, and also the UI may sometimes truncate longer tags. (See character limits.) When possible, use keys and values that are human-readable (for example, region: EMEA is better than Param8323 : 1229072). Avoid including several values like regions: EMEA | US | LATAM in a single tag. We recommend using three different tags for that, like region: emea, region: us, and region: latam. If you want to match multiple tags, you can do that using the advanced options in the filter UI. Tips on using tags consistently: Try to be consistent with tag language across your teams and entities. Be consistent with naming. For example, avoid using both region: emea and reg: emea. Be consistent with format. For example, avoid using both camelCase and kebab-case. Be consistent with capitalization. For example, avoid using both env: staging and env: Staging (although tag searching is case-insensitive in the UI and API) Tips on cross-team implementation: One reason for using tags is to improve observability and cost allocation. For this reason, responsibility for tag implementation is often assigned to an observability team, SREs, a group of architects, or a cross-team task force. We recommend the people responsible for implementing tags meet and create an internal policy to describe how the tags are defined and which conventions are to be used. Keep this reference manual up-to-date. Automate the definition of tags when you deploy New Relic agents, at the cloud provider, or through New Relic automation tools, such as the API or Terraform. Create recurring reports that identify entities that are non-compliant with your tagging standards. Tag examples Here are some examples of common ways to use tags to organize data: Team-related tags Creating tags for team names can be helpful to understand which team, group, department, or region was responsible for a change that led to a performance issue. Team examples: team: backend team: frontend team: db Role examples: roles: architecture roles: devops roles: pm Region examples: region: emea region: america region: asia Environment-related tags You can create entities for the environment they belong to. Examples: env: production env: qa env: development env: staging Criticality-related tags You can create tags related to criticality levels, which lets you easier track the most critical issues. Examples: layer: level1 layer: level2 layer: level3 How tags are added Some important attributes, by default, are available for use as tags. For example, the account name, the account ID, and some basic host/server metadata are available as default tags. You can't remove these available-by-default tags. Here are some details about how tags are added for some specific data sources: Add tags via UI or API When you add tags via the UI or API, this occurs at the entity level. This means that, for example, if you have multiple APM agents monitoring a single entity and apply a tag via the UI, that tag is available for all data coming from that entity. To add or delete tags via the UI: Select a monitored entity, like a monitored app or host. Near the entity’s name at the top of the page, select the See metadata and manage tags menu. In the menu that pops up, add or delete a tag. To manage tags via API: see our NerdGraph tagging docs. For a guide to using our CLI to automate tagging, see our developer site. APM agent tags You can add tags via the UI and API or you can add tags using APM agent configuration. There are differences in how these apply tags: Via agent config: These tags are applied at the agent-level, not the entity/application level. This would be a good option if you have multiple agents monitoring different aspects of the same app (for example, a blue-green deployment model). Via the UI or API: These tags are applied at the entity/application level. Here are links to the agent configuration options: C SDK: not available Java Go .NET Node.js PHP Python Ruby For information on querying APM tags, see Query APM tags. Infrastructure data tags There are several ways tags are added to infrastructure entities and services: Use the UI or API to add tags at the entity level. Infrastructure agent: some attributes are available by default as tags. You can also add custom attributes, which are also available as tags in the UI. On-host integrations: some attributes are available by default as tags. You can also add tags by using integration-specific labels config options (for an example, see the labels config for the Apache integration). Cloud service integrations: by default we report tags and labels that are defined in the cloud service. To add tags, you'd add them on the cloud-service-side. Automate tags with our CLI For a guide to automating tags using our CLI tool, see our developer site. Use tags to filter the UI Use the filter field at the top of the New Relic Explorer to filter down to the entities you care about. You can use multiple filter conditions. To filter down to certain entities using tags: From one.newrelic.com, click Explorer. Click the Filter by... field to see a dropdown of available attributes and tags. You can filter by multiple elements and use advanced search options. To find an entity’s metadata and tags from the UI, here are two options: From a list of entities in the UI, at the far right, select an entity's icon. OR Select an entity. Near the top of the page, select the icon. To use the API to view tags, see our NerdGraph docs. Learn about how to use tags with dashboards and how to use tags with workloads. Custom queries, charts, and alerts Different features handle tags differently. Here are some details about how you can use NRQL to query tag data, or create NRQL condition alerts. Query and alert on APM tags You can query APM tags using NRQL. Minimum agent versions: C: not available Go: 2.3.0 Java: 4.9.0 .NET: 8.17 Node: v4.13.0 PHP: not available Python: v4.10.0.112 Ruby: 6.1.0.352 Here are some query examples: Throughput across shards Given a service that is distributed across nine shards, each shard assigned as an environment, we can plot the transaction throughput on all shards using a wildcard query like: SELECT rate(count(apm.service.transaction.duration), 1 minute) FROM Metric WHERE appName LIKE 'MyApp (%' AND transactionType = 'Other' FACET tags.Environment TIMESERIES Copy Transactions per team To see the number of transactions per service for a specific team, we might use a query like: FROM Transaction SELECT count(*) WHERE tags.Team = 'team-a' FACET tags.Project TIMESERIES Copy Alert on error rate for teams You can use a query for your services’ error rate for setting an alert without having to create a rule for each service. Here is the error rate for all services on a team called team-b. And this alert will automatically monitor any new app names added with the team tag. FROM Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Team = 'team-b' FACET appName Copy Related to this, you might create a general rule for a specific service deployed across several environments, so that we have an alarm for a single service monitoring each environment individually: From Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Project = 'MyProject' FACET tags.Environment Copy Query and alert on attributes As explained in Tag sources, some important attributes are used as tags. You can query all attributes and create custom charts using NRQL, and create NRQL alert conditions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 219.93631,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Use</em> tags to help organize <em>and</em> find your <em>data</em>",
        "sections": "<em>Use</em> tags to help organize <em>and</em> find your <em>data</em>",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " you can see an accountId tag being used to filter workloads to a specific account. You can <em>use</em> tags to: Help organize <em>data</em> coming from a large number of sources and&#x2F;or to a large number of <em>New</em> <em>Relic</em> accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see"
      },
      "id": "603ebd1228ccbc6278eba754"
    },
    {
      "sections": [
        "Dependencies UI page: View an entity's upstream and downstream dependencies",
        "Requirements",
        "View dependencies"
      ],
      "title": "Dependencies UI page: View an entity's upstream and downstream dependencies",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "UI and data"
      ],
      "external_id": "2b2f328a6281bb155bcde07efec7f42eae943048",
      "image": "https://docs.newrelic.com/static/aabc5f64a91cc01b6e226df53c62458f/c1b63/new-relic-one-dependencies-UI.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/explore-downstream-dependencies-new-relic-one/",
      "published_at": "2021-06-08T22:22:15Z",
      "updated_at": "2021-03-30T08:53:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the New Relic Explorer, an entity's Dependencies page shows a filterable list of all the applications, services, databases, and hosts connected to the entity. It shows upstream and downstream dependencies, and provides paths to explore them. Similar to service maps, the dependencies page helps you understand how all of your upstream and downstream services are connected. It also uses the same color coding system used by service maps to show you what's performing well and what isn't. Requirements To view an entity's dependencies, make sure your app uses the minimum required APM agent version: C 1.0.0 or higher Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher View dependencies To view dependencies for applications, services, databases, and hosts connected to an entity: Go to one.newrelic.com, select Explorer, and select an entity. Select Dependencies. To drill down further, filter the apps, services, databases, or hosts. one.newrelic.com > Explorer > (select an entity) > Dependencies: View a filterable list of all the apps, services, databases, and hosts connected to an entity, and their color-coded health status. You can filter the dependencies page to view specific things that report to the entity. Dependencies include: Services: APM-monitored applications and services. Mobile applications: your mobile apps. Browser applications: your front-end browser apps. External services: external services monitored by APM. External services include out-of-process services such as web services, resources in the cloud, and any other network calls. Databases: your application's database and cache data. Databases are agentless. Because of this, alerts cannot be set for the database, as only the service call is reported to New Relic. Hosts: your infrastructure (servers and hosts).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 196.78064,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Dependencies <em>UI</em> page: View an entity&#x27;s upstream <em>and</em> downstream dependencies",
        "sections": "Dependencies <em>UI</em> page: View an entity&#x27;s upstream <em>and</em> downstream dependencies",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " services: external services monitored by APM. External services include out-of-process services such as web services, resources in the cloud, and any other network calls. Databases: your application&#x27;s database and cache <em>data</em>. Databases are agentless. Because of this, alerts cannot be set for the database, as only the service call is reported to <em>New</em> <em>Relic</em>. Hosts: your infrastructure (servers and hosts)."
      },
      "id": "603eb2e564441f0fe44e889b"
    }
  ],
  "/docs/new-relic-one/use-new-relic-one/workloads/use-workloads": [
    {
      "sections": [
        "Use tags to help organize and find your data",
        "Tip",
        "Tag format and limits",
        "Best practices and tips",
        "Tips on keeping tags simple:",
        "Tips on using tags consistently:",
        "Tips on cross-team implementation:",
        "Tag examples",
        "Team-related tags",
        "Environment-related tags",
        "Criticality-related tags",
        "How tags are added",
        "Add tags via UI or API",
        "APM agent tags",
        "Infrastructure data tags",
        "Automate tags with our CLI",
        "Use tags to filter the UI",
        "Custom queries, charts, and alerts",
        "Query and alert on APM tags",
        "Throughput across shards",
        "Transactions per team",
        "Alert on error rate for teams",
        "Query and alert on attributes"
      ],
      "title": "Use tags to help organize and find your data",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "e2e2d53776b9109965df9de2a20660e9f60bd479",
      "image": "https://docs.newrelic.com/static/529f55ef72f3e366e6cb4a7be67229b6/c1b63/new-relic-tags-workloads_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/use-tags-help-organize-find-your-data/",
      "published_at": "2021-06-08T19:54:20Z",
      "updated_at": "2021-06-08T19:54:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the software industry, a tag typically refers to a piece of metadata added to a data set for the purpose of improving data organization and findability. At New Relic, our tags are key:value pairs (like team: operations) added to various sets of data, like monitored apps and hosts, agents, dashboards, and workloads. We make some important attributes available as tags (for example, app metadata like app name and language, and host metadata like host name and AWS region), and you can also add your own custom tags. You can use tags in the UI to filter down to relevant data, as shown here: Here you can see an accountId tag being used to filter workloads to a specific account. You can use tags to: Help organize data coming from a large number of sources and/or to a large number of New Relic accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see example use cases) Better organize and search dashboards and workloads Help you query and chart APM data Tags are useful for organizing data at a high level. If you wanted to add more fine-grained detail, like capturing user names or other high-cardinality values, custom attributes or custom events would be a better solution. Tip At New Relic, tags were previously called \"labels.\" You may sometimes see \"label\" used in our code; for example, some of our APM agent config files use a label config option for tags. Tag format and limits Format requirements and limits for tags: The UI has limits on the total number of tags it can display per entity: Limit of 100 for tags reported by default or added via agent/integration configuration. Limit of 100 for custom tags added via UI or API. The following are maximum character length for tags: Key: 128 characters Value: 256 characters When using our API to add tags, a dash (-) in a tag key is interpreted as a minus symbol. If your tag key has a dash, use back ticks around it (like `key-name`). Best practices and tips Before adding tags, we recommend first seeing how our default tags work for you. When you're ready to add your own tags, read the best practices below to get the most out of them. Tips on keeping tags simple: Start by adding only tags you know you’ll definitely use. Unused tags create noise and may add confusion. Try to use short tags. Shorter tags are easier to parse, and also the UI may sometimes truncate longer tags. (See character limits.) When possible, use keys and values that are human-readable (for example, region: EMEA is better than Param8323 : 1229072). Avoid including several values like regions: EMEA | US | LATAM in a single tag. We recommend using three different tags for that, like region: emea, region: us, and region: latam. If you want to match multiple tags, you can do that using the advanced options in the filter UI. Tips on using tags consistently: Try to be consistent with tag language across your teams and entities. Be consistent with naming. For example, avoid using both region: emea and reg: emea. Be consistent with format. For example, avoid using both camelCase and kebab-case. Be consistent with capitalization. For example, avoid using both env: staging and env: Staging (although tag searching is case-insensitive in the UI and API) Tips on cross-team implementation: One reason for using tags is to improve observability and cost allocation. For this reason, responsibility for tag implementation is often assigned to an observability team, SREs, a group of architects, or a cross-team task force. We recommend the people responsible for implementing tags meet and create an internal policy to describe how the tags are defined and which conventions are to be used. Keep this reference manual up-to-date. Automate the definition of tags when you deploy New Relic agents, at the cloud provider, or through New Relic automation tools, such as the API or Terraform. Create recurring reports that identify entities that are non-compliant with your tagging standards. Tag examples Here are some examples of common ways to use tags to organize data: Team-related tags Creating tags for team names can be helpful to understand which team, group, department, or region was responsible for a change that led to a performance issue. Team examples: team: backend team: frontend team: db Role examples: roles: architecture roles: devops roles: pm Region examples: region: emea region: america region: asia Environment-related tags You can create entities for the environment they belong to. Examples: env: production env: qa env: development env: staging Criticality-related tags You can create tags related to criticality levels, which lets you easier track the most critical issues. Examples: layer: level1 layer: level2 layer: level3 How tags are added Some important attributes, by default, are available for use as tags. For example, the account name, the account ID, and some basic host/server metadata are available as default tags. You can't remove these available-by-default tags. Here are some details about how tags are added for some specific data sources: Add tags via UI or API When you add tags via the UI or API, this occurs at the entity level. This means that, for example, if you have multiple APM agents monitoring a single entity and apply a tag via the UI, that tag is available for all data coming from that entity. To add or delete tags via the UI: Select a monitored entity, like a monitored app or host. Near the entity’s name at the top of the page, select the See metadata and manage tags menu. In the menu that pops up, add or delete a tag. To manage tags via API: see our NerdGraph tagging docs. For a guide to using our CLI to automate tagging, see our developer site. APM agent tags You can add tags via the UI and API or you can add tags using APM agent configuration. There are differences in how these apply tags: Via agent config: These tags are applied at the agent-level, not the entity/application level. This would be a good option if you have multiple agents monitoring different aspects of the same app (for example, a blue-green deployment model). Via the UI or API: These tags are applied at the entity/application level. Here are links to the agent configuration options: C SDK: not available Java Go .NET Node.js PHP Python Ruby For information on querying APM tags, see Query APM tags. Infrastructure data tags There are several ways tags are added to infrastructure entities and services: Use the UI or API to add tags at the entity level. Infrastructure agent: some attributes are available by default as tags. You can also add custom attributes, which are also available as tags in the UI. On-host integrations: some attributes are available by default as tags. You can also add tags by using integration-specific labels config options (for an example, see the labels config for the Apache integration). Cloud service integrations: by default we report tags and labels that are defined in the cloud service. To add tags, you'd add them on the cloud-service-side. Automate tags with our CLI For a guide to automating tags using our CLI tool, see our developer site. Use tags to filter the UI Use the filter field at the top of the New Relic Explorer to filter down to the entities you care about. You can use multiple filter conditions. To filter down to certain entities using tags: From one.newrelic.com, click Explorer. Click the Filter by... field to see a dropdown of available attributes and tags. You can filter by multiple elements and use advanced search options. To find an entity’s metadata and tags from the UI, here are two options: From a list of entities in the UI, at the far right, select an entity's icon. OR Select an entity. Near the top of the page, select the icon. To use the API to view tags, see our NerdGraph docs. Learn about how to use tags with dashboards and how to use tags with workloads. Custom queries, charts, and alerts Different features handle tags differently. Here are some details about how you can use NRQL to query tag data, or create NRQL condition alerts. Query and alert on APM tags You can query APM tags using NRQL. Minimum agent versions: C: not available Go: 2.3.0 Java: 4.9.0 .NET: 8.17 Node: v4.13.0 PHP: not available Python: v4.10.0.112 Ruby: 6.1.0.352 Here are some query examples: Throughput across shards Given a service that is distributed across nine shards, each shard assigned as an environment, we can plot the transaction throughput on all shards using a wildcard query like: SELECT rate(count(apm.service.transaction.duration), 1 minute) FROM Metric WHERE appName LIKE 'MyApp (%' AND transactionType = 'Other' FACET tags.Environment TIMESERIES Copy Transactions per team To see the number of transactions per service for a specific team, we might use a query like: FROM Transaction SELECT count(*) WHERE tags.Team = 'team-a' FACET tags.Project TIMESERIES Copy Alert on error rate for teams You can use a query for your services’ error rate for setting an alert without having to create a rule for each service. Here is the error rate for all services on a team called team-b. And this alert will automatically monitor any new app names added with the team tag. FROM Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Team = 'team-b' FACET appName Copy Related to this, you might create a general rule for a specific service deployed across several environments, so that we have an alarm for a single service monitoring each environment individually: From Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Project = 'MyProject' FACET tags.Environment Copy Query and alert on attributes As explained in Tag sources, some important attributes are used as tags. You can query all attributes and create custom charts using NRQL, and create NRQL alert conditions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 281.32416,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Use</em> tags to help organize and find your data",
        "sections": "<em>Use</em> tags to help organize and find your data",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " you can see an accountId tag being used to filter <em>workloads</em> to a specific account. You can <em>use</em> tags to: Help organize data coming from a large number of sources and&#x2F;or to a large number of <em>New</em> <em>Relic</em> accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see"
      },
      "id": "603ebd1228ccbc6278eba754"
    },
    {
      "sections": [
        "What is an entity in New Relic?",
        "What is an entity?",
        "Find and explore entities",
        "Tip",
        "Entity synthesis",
        "Reserved attributes for synthesized entities",
        "Entity relationships",
        "Important",
        "Group and organize entities"
      ],
      "title": "What is an entity in New Relic?",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "52a3e08bc9103c717d27b153e4fd4f547d6ecc32",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/what-entity-new-relic/",
      "published_at": "2021-06-08T19:55:34Z",
      "updated_at": "2021-06-08T19:55:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic monitoring is built around the concept of the entity. An entity is anything that reports data to New Relic. This document explains: What entities are How to find entity data How to modify existing entity types or create new ones How entities are related to one another How to organize them into groups for easier analysis What is an entity? From a New Relic product perspective, entity is a broad concept. An entity is anything we can identify that has data you can monitor. \"Entity\" can refer to fundamental data-reporting components like applications, hosts, and database services, but it can also refer to larger groupings of those components. For example, to monitor a data center, you could aggregate those hosts in New Relic to be a workload (a custom grouping of entities). That workload is, itself, also an entity. This conceptual definition of \"entity\" is important because New Relic's goal is to give you practical information about the status of your business-important entities (and not just give you an unhelpfully large stream of assorted metrics and data). Our focus on entities, and the relationships between them, helps us optimize monitoring and troubleshooting of complex, modern systems. Find and explore entities You'll find your entities wherever you see your data reporting in New Relic. Tip You can create new entity types to monitor any data source. Learn more about entity synthesis. Some tips for finding and understanding entity data: To find an entity's unique global identifier (GUID): from any list of monitored entities in the New Relic Explorer, hover over a specific entity and click the icon to see the GUID and other metadata. An entity's GUID is reported as the attribute entityGuid. You can query for an entity using this attribute in the query builder. Use the Related Entities view in the New Relic Explorer, service maps, distributed tracing, and our relationships API in GraphQL to see connections between entities. Explore entity data using our NerdGraph GraphiQL explorer (api.newrelic.com/graphiql). Entity synthesis If you have telemetry from any source that's not supported by New Relic out of the box, you can propose a mapping for it. Once approved, any telemetry received by New Relic which matches your definition file will be synthesized into an entity. Tip For more information on how to modify existing entity types or create new ones please refer to our Entity Synthesis documentation. Reserved attributes for synthesized entities These attributes are meant to be synthesized from the telemetry we receive. Do not set them unless you are aware of the implications and consequences. Attribute Description entity.guid Generally, you should not set this attribute field on your telemetry data. New Relic may add this field to ingested data to store a unique identifier for the entity associated with the data point. If telemetry arrives with the entity.guid attribute already present, then New Relic will not change the value. However, it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. One use case for passing this attribute is to associate ingested telemetry with an entity already created by New Relic. When the entity.guid attribute is sent, the value will override New Relic’s entity identification system (such as entity synthesis definitions) and instead will use the attribute as the data. entity.name This attribute shouldn't be put on ingested telemetry data unless you're trying to override the entity name that would have been selected by New Relic’s entity identification system. While New Relic won't change the value if it's already present on the data, New Relic may add the attribute to your data. Therefore invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. If this field is present on ingested telemetry, its value will be used to name the entity associated with the data point. This name will be used instead of the name selected by New Relic’s entity identification system (for example, entity synthesis definitions). Note that many entities use the name as part of their identification, so changing this field may result in the generation of a new entity. entity.type This attribute shouldn't be put on ingested telemetry data except for certain legacy cases where it's required to distinguish entity types. Passing this field may interfere with entity detection, particularly if unrecognized values are sent in this field. While New Relic won't change the value if already present on the data, the field is not guaranteed to provide unambiguous filtering of telemetry at query-time. Existing entity definitions already have overlapping values, and we recommend avoiding entity.type in favor of other fields for filtering telemetry queries. This field is used by New Relic, meaning that invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. Entity relationships Connections between entities are automatically created by New Relic based on what we can infer from your telemetry. For example, when two services that communicate using HTTP are instrumented with New Relic, we infer a \"calls/called-by\" relationship between them. When viewing a single entity in either the New Relic Explorer, Navigator, or Lookout, you can see its Related Entities in the entity's mini overview. Related Entities is a visualization of the various entities connected directly to the current entity in focus. You can quickly view important metrics for these related entities and navigate from one entity to another, through all the connected parts of your stack. Tip You can learn more about how entities are related using our NerdGraph API. When relationships are not automatically detected, you can manually create them using the \"Add/edit related entities\" link in Related Entities. Important Currently, you can only manually create calls/called-by relationships between service entities. Tip To manage manual relationships, you need to have modify and delete capabilities on entity relationships. These are granted to user roles by default. Group and organize entities You can place entities into groups that reflect business-important relationships in your organization. For example, you might group all entities related to a specific team or department, or related to a specific service. Or you might group multiple hosts together to reflect their grouping in a data center. To group your entities, see: How to tag entities Create workloads (groups of related entities)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.4833,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "What is an entity in <em>New</em> <em>Relic</em>?",
        "sections": "What is an entity in <em>New</em> <em>Relic</em>?",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": ", it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. <em>One</em> <em>use</em> case for passing this attribute is to associate ingested telemetry with an entity already created by <em>New</em> <em>Relic</em>. When the entity.guid attribute is sent, the value"
      },
      "id": "603ec160e7b9d295f72a07fc"
    },
    {
      "sections": [
        "Workload status views and notifications",
        "Why it matters",
        "Get started with workload status",
        "Obtain your workload status",
        "Save views with sets of workloads",
        "Get notified when the workload status changes"
      ],
      "title": "Workload status views and notifications",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Workloads"
      ],
      "external_id": "1633f322d9f0c907a9636e0c71aee7a0a38ba85b",
      "image": "https://docs.newrelic.com/static/5ea6d75d1efb047eda59eee3f12e08a9/c1b63/workloads_views.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/workloads/workload-status-views-notifications/",
      "published_at": "2021-06-08T19:57:01Z",
      "updated_at": "2021-05-10T14:02:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The workload status, which is derived from the alerting status of the entities in your workload, informs you about how your workload is behaving. Why it matters Workload status: Is a quick indicator of how your system is doing, and tells you if you need to take action on any of your workloads in just a glance. Adapts to your needs and to how important each entity is. Allows you to share the status of your workloads. Other teams that depend on your services or infrastructure can learn the status of the workload without them needing to understand your system’s architecture details, or look at custom dashboards. Get started with workload status New Relic One provides a status value for all entities, which is based on the results of New Relic alerts. You can check the color-coded alert status for each entity on the New Relic Explorer, or consume the alert status value through the API. For example, you may see a red alert status indicating that a critical violation is in progress. With Workloads you can group entities that are part of a complex system and obtain a single, global value that summarizes the status of all the entities in your workload. Thus, you can quickly detect when the workload stops being operational, or anticipate any potential incident or loss of quality of service. Obtain your workload status A workload can have one of the following status values: Operational: The workload is working fine. Degraded: The workload is showing some degradation in performance or errors, but it’s still providing an acceptable level of service, and you don’t need to take any urgent action. Critical or Disrupted: The workload is not providing an acceptable level of service, and you need to take urgent action. Unknown: You haven’t configured how to calculate workload status, or there aren’t any alert conditions set up that can determine the status of the workload entities. To learn how to define or edit the workload status, refer to Workload status configuration. Save views with sets of workloads If you usually need to see the status of a certain group of workloads, you can save views that contain only those workloads. The tile view mode helps you quickly find your workloads and see their status at a glance. To create a view, follow these steps: Go to one.newrelic.com and click on More > Workload views. Click on Add view. Give the view a meaningful name (such as the name of a team or business unit), and select an account to associate the view with. Select the workloads you want to include in the view, by their name or tags. Save the new view. Status views are most useful for teams that are accountable for more than one workload, support roles, and business unit managers. Get notified when the workload status changes You may need to follow the status of a workload, either because it represents the services your team is accountable for, or because your own services depend on that workload, which is managed by another team. The status of all workloads is calculated regularly and the result is stored in NRDB through a WorkloadStatus event. This allows you to set up an alert condition to notify you whenever the Workload goes into a Disrupted or Degraded status. To set up the alert condition follow these steps: Go to one.newrelic.com and select Alerts & AI. Select the policy where you want to add the new alert condition, or create a new policy with the appropriate notification channel. Then click on Create a condition. Where prompted to Select a product, click NRQL. Add the following NRQL query: SELECT latest(statusValueCode) FROM WorkloadStatus WHERE workloadGuid = '<GUID>' FACET workloadGuid as 'entity.guid', entity.name Copy You can obtain the workload GUID by clicking on the See metadata and manage tags on the workload UI. Write the WHERE clause so the alert condition applies to just one workload (as in the example) or more than one. Or remove the WHERE clause if you want the alert condition to apply to all the workloads on the account. By adding the FACET you can use these fields on the alert description, as explained below. Set one of the following static thresholds: (Recommended) Critical when the query returns a value equal to 3 for at least 1 minute, if you want to be notified when the workload status is disrupted. Critical when the query returns a value equal to 2 for at least 1 minute, if you want to be notified when the workload status is degraded. Remember that a warning threshold doesn't generate an incident or send a notification. As a result, you need to create two alert conditions with a critical threshold (as explained above) if you want to be notified of any status change. Complete the alert condition: Set a violation time limit, to automatically force-close a long-lasting violation after the selected amount of time you select. Choose to fill data gaps with last known value. Optionally, you can also add a custom violation description that includes the workload name and permanent link to the UI in the alert notification: Workload: {{tag.entity.name}} Direct link: https://one.newrelic.com/redirect/entity/{{tag.entity.guid}} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.68423,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Workload</em> status views and notifications",
        "sections": "Save views with sets of <em>workloads</em>",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " at custom dashboards. Get started with <em>workload</em> status <em>New</em> <em>Relic</em> <em>One</em> provides a status value for all entities, which is based on the results of <em>New</em> <em>Relic</em> alerts. You can check the color-coded alert status for each entity on the <em>New</em> <em>Relic</em> Explorer, or consume the alert status value through the API"
      },
      "id": "603e967564441ff8cd4e8855"
    }
  ],
  "/docs/new-relic-one/use-new-relic-one/workloads/workload-status-configuration": [
    {
      "sections": [
        "Use tags to help organize and find your data",
        "Tip",
        "Tag format and limits",
        "Best practices and tips",
        "Tips on keeping tags simple:",
        "Tips on using tags consistently:",
        "Tips on cross-team implementation:",
        "Tag examples",
        "Team-related tags",
        "Environment-related tags",
        "Criticality-related tags",
        "How tags are added",
        "Add tags via UI or API",
        "APM agent tags",
        "Infrastructure data tags",
        "Automate tags with our CLI",
        "Use tags to filter the UI",
        "Custom queries, charts, and alerts",
        "Query and alert on APM tags",
        "Throughput across shards",
        "Transactions per team",
        "Alert on error rate for teams",
        "Query and alert on attributes"
      ],
      "title": "Use tags to help organize and find your data",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "e2e2d53776b9109965df9de2a20660e9f60bd479",
      "image": "https://docs.newrelic.com/static/529f55ef72f3e366e6cb4a7be67229b6/c1b63/new-relic-tags-workloads_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/use-tags-help-organize-find-your-data/",
      "published_at": "2021-06-08T19:54:20Z",
      "updated_at": "2021-06-08T19:54:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the software industry, a tag typically refers to a piece of metadata added to a data set for the purpose of improving data organization and findability. At New Relic, our tags are key:value pairs (like team: operations) added to various sets of data, like monitored apps and hosts, agents, dashboards, and workloads. We make some important attributes available as tags (for example, app metadata like app name and language, and host metadata like host name and AWS region), and you can also add your own custom tags. You can use tags in the UI to filter down to relevant data, as shown here: Here you can see an accountId tag being used to filter workloads to a specific account. You can use tags to: Help organize data coming from a large number of sources and/or to a large number of New Relic accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see example use cases) Better organize and search dashboards and workloads Help you query and chart APM data Tags are useful for organizing data at a high level. If you wanted to add more fine-grained detail, like capturing user names or other high-cardinality values, custom attributes or custom events would be a better solution. Tip At New Relic, tags were previously called \"labels.\" You may sometimes see \"label\" used in our code; for example, some of our APM agent config files use a label config option for tags. Tag format and limits Format requirements and limits for tags: The UI has limits on the total number of tags it can display per entity: Limit of 100 for tags reported by default or added via agent/integration configuration. Limit of 100 for custom tags added via UI or API. The following are maximum character length for tags: Key: 128 characters Value: 256 characters When using our API to add tags, a dash (-) in a tag key is interpreted as a minus symbol. If your tag key has a dash, use back ticks around it (like `key-name`). Best practices and tips Before adding tags, we recommend first seeing how our default tags work for you. When you're ready to add your own tags, read the best practices below to get the most out of them. Tips on keeping tags simple: Start by adding only tags you know you’ll definitely use. Unused tags create noise and may add confusion. Try to use short tags. Shorter tags are easier to parse, and also the UI may sometimes truncate longer tags. (See character limits.) When possible, use keys and values that are human-readable (for example, region: EMEA is better than Param8323 : 1229072). Avoid including several values like regions: EMEA | US | LATAM in a single tag. We recommend using three different tags for that, like region: emea, region: us, and region: latam. If you want to match multiple tags, you can do that using the advanced options in the filter UI. Tips on using tags consistently: Try to be consistent with tag language across your teams and entities. Be consistent with naming. For example, avoid using both region: emea and reg: emea. Be consistent with format. For example, avoid using both camelCase and kebab-case. Be consistent with capitalization. For example, avoid using both env: staging and env: Staging (although tag searching is case-insensitive in the UI and API) Tips on cross-team implementation: One reason for using tags is to improve observability and cost allocation. For this reason, responsibility for tag implementation is often assigned to an observability team, SREs, a group of architects, or a cross-team task force. We recommend the people responsible for implementing tags meet and create an internal policy to describe how the tags are defined and which conventions are to be used. Keep this reference manual up-to-date. Automate the definition of tags when you deploy New Relic agents, at the cloud provider, or through New Relic automation tools, such as the API or Terraform. Create recurring reports that identify entities that are non-compliant with your tagging standards. Tag examples Here are some examples of common ways to use tags to organize data: Team-related tags Creating tags for team names can be helpful to understand which team, group, department, or region was responsible for a change that led to a performance issue. Team examples: team: backend team: frontend team: db Role examples: roles: architecture roles: devops roles: pm Region examples: region: emea region: america region: asia Environment-related tags You can create entities for the environment they belong to. Examples: env: production env: qa env: development env: staging Criticality-related tags You can create tags related to criticality levels, which lets you easier track the most critical issues. Examples: layer: level1 layer: level2 layer: level3 How tags are added Some important attributes, by default, are available for use as tags. For example, the account name, the account ID, and some basic host/server metadata are available as default tags. You can't remove these available-by-default tags. Here are some details about how tags are added for some specific data sources: Add tags via UI or API When you add tags via the UI or API, this occurs at the entity level. This means that, for example, if you have multiple APM agents monitoring a single entity and apply a tag via the UI, that tag is available for all data coming from that entity. To add or delete tags via the UI: Select a monitored entity, like a monitored app or host. Near the entity’s name at the top of the page, select the See metadata and manage tags menu. In the menu that pops up, add or delete a tag. To manage tags via API: see our NerdGraph tagging docs. For a guide to using our CLI to automate tagging, see our developer site. APM agent tags You can add tags via the UI and API or you can add tags using APM agent configuration. There are differences in how these apply tags: Via agent config: These tags are applied at the agent-level, not the entity/application level. This would be a good option if you have multiple agents monitoring different aspects of the same app (for example, a blue-green deployment model). Via the UI or API: These tags are applied at the entity/application level. Here are links to the agent configuration options: C SDK: not available Java Go .NET Node.js PHP Python Ruby For information on querying APM tags, see Query APM tags. Infrastructure data tags There are several ways tags are added to infrastructure entities and services: Use the UI or API to add tags at the entity level. Infrastructure agent: some attributes are available by default as tags. You can also add custom attributes, which are also available as tags in the UI. On-host integrations: some attributes are available by default as tags. You can also add tags by using integration-specific labels config options (for an example, see the labels config for the Apache integration). Cloud service integrations: by default we report tags and labels that are defined in the cloud service. To add tags, you'd add them on the cloud-service-side. Automate tags with our CLI For a guide to automating tags using our CLI tool, see our developer site. Use tags to filter the UI Use the filter field at the top of the New Relic Explorer to filter down to the entities you care about. You can use multiple filter conditions. To filter down to certain entities using tags: From one.newrelic.com, click Explorer. Click the Filter by... field to see a dropdown of available attributes and tags. You can filter by multiple elements and use advanced search options. To find an entity’s metadata and tags from the UI, here are two options: From a list of entities in the UI, at the far right, select an entity's icon. OR Select an entity. Near the top of the page, select the icon. To use the API to view tags, see our NerdGraph docs. Learn about how to use tags with dashboards and how to use tags with workloads. Custom queries, charts, and alerts Different features handle tags differently. Here are some details about how you can use NRQL to query tag data, or create NRQL condition alerts. Query and alert on APM tags You can query APM tags using NRQL. Minimum agent versions: C: not available Go: 2.3.0 Java: 4.9.0 .NET: 8.17 Node: v4.13.0 PHP: not available Python: v4.10.0.112 Ruby: 6.1.0.352 Here are some query examples: Throughput across shards Given a service that is distributed across nine shards, each shard assigned as an environment, we can plot the transaction throughput on all shards using a wildcard query like: SELECT rate(count(apm.service.transaction.duration), 1 minute) FROM Metric WHERE appName LIKE 'MyApp (%' AND transactionType = 'Other' FACET tags.Environment TIMESERIES Copy Transactions per team To see the number of transactions per service for a specific team, we might use a query like: FROM Transaction SELECT count(*) WHERE tags.Team = 'team-a' FACET tags.Project TIMESERIES Copy Alert on error rate for teams You can use a query for your services’ error rate for setting an alert without having to create a rule for each service. Here is the error rate for all services on a team called team-b. And this alert will automatically monitor any new app names added with the team tag. FROM Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Team = 'team-b' FACET appName Copy Related to this, you might create a general rule for a specific service deployed across several environments, so that we have an alarm for a single service monitoring each environment individually: From Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Project = 'MyProject' FACET tags.Environment Copy Query and alert on attributes As explained in Tag sources, some important attributes are used as tags. You can query all attributes and create custom charts using NRQL, and create NRQL alert conditions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 281.32416,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Use</em> tags to help organize and find your data",
        "sections": "<em>Use</em> tags to help organize and find your data",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " you can see an accountId tag being used to filter <em>workloads</em> to a specific account. You can <em>use</em> tags to: Help organize data coming from a large number of sources and&#x2F;or to a large number of <em>New</em> <em>Relic</em> accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see"
      },
      "id": "603ebd1228ccbc6278eba754"
    },
    {
      "sections": [
        "Use workloads",
        "Create a workload",
        "Use tags to define the workload content",
        "How the dynamic query logic works",
        "Add dashboards to workloads",
        "Use the API"
      ],
      "title": "Use workloads",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Workloads"
      ],
      "external_id": "c39090bde9b797940e7f5ba0c9610ba39879677b",
      "image": "https://docs.newrelic.com/static/14c811e218cfc8793bb4d2bd4b2aad0b/c1b63/new-relic-workloads-add-dashboards.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/workloads/use-workloads/",
      "published_at": "2021-06-08T22:22:15Z",
      "updated_at": "2021-06-03T10:04:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view workloads, go to one.newrelic.com and find them on the Explorer. There are three main tabs (Health, Activity, and Owner) plus the header. The Health tab in a workload provides relevant status data that helps you operate the workload: It shows the global status of the workload, as well as the individual status of all the entities that make up the workload at each point in time. It looks like this: It comprises the following: The navigator view shows the entities that make up the workload, and provides controls to group and sort them. If you’ve used queries to dynamically select entities, the workload entities will change over time. The workload status informs about how your workload is performing, based on the individual alerting status of the entities in your workload. With health over time you’ll see whether and how the workload status has changed in the past three hours. If one or more entities are alerting, you’ll get a count of criticals and warnings and a summary of the open conditions, which will make it easier to identify and troubleshoot the most important issues. The Activity tab shows performance data related to the entities in the workload, along with the events that could explain any changes in those time series. It looks like this: Here's the most important sections: Linked dashboards. You can add links to dashboards from your workload, and create pre-filtered, workload-relevant links to dashboards. Golden metrics. These are charts with the most relevant metrics for each entity type, such as number of requests, response time, and error rate for an application. Explore the charts to detect correlations among different entities (for example, two applications) and different stack layers (for example, applications and hosts). The golden metrics that you see for each entity type on a workload can be customized either at the account or the workload level through the NerdGraph API. Events timeline. This includes the start and end time of incidents and anomalies that refer to the workload entities. It also shows other event types that can explain a change in the status or performance of the workload, such as deployments and configuration changes. The Owner tab gives you information about the team responsible for the workload. It looks like this: It contains: The team responsible for the workload. You can include more than one team. The workload description. Share the mission of the workload, and the business logic it represents: Is it a web application? An API? A backend process? Fill in any details that are relevant to your team, or to other teams in your organization. Contact information. From the drop-down menu, choose how your team prefers to be contacted. Links to the most relevant resources to operate the workload. Here you can add links to runbooks, code repositories, productivity tools, or anything else related to the workload that you need at hand. Finally, the header contains the filter bar and the edition controls: Filter bar. Use the advanced filtering options when you need to focus only on certain entities within the workload. Edit workload. Define the entities that are part of the workload, and the accounts they’ll be fetched from. Setup status. Configure how the global workload status will be determined, based on the workload entities health. Summary page. See all the tags that have been added to the workload, as well as metadata such as the workload's identifier (GUID) and account. Create a workload A workload should contain the entities you and your team want to see. Your choice of entities depends on your organization structure and goals. one.newrelic.com > Explorer > Workloads > Create a workload: When you create a workload, you choose the associated accounts and monitored entities. You can use New Relic One or the NerdGraph API to create a workload. Follow these steps to create a workload using the UI: Go to one.newrelic.com and click on the Explorer, and then click + Create a workload. Give the workload a name that will be meaningful for you and your team later. From the Select an account dropdown, select the workload account you'd like to use. Click Choose the scope accounts to check all of the accounts related to this workload. Find and choose the entities that make up the workload. When you have the results you're looking for, you can add specific entities or add the query to dynamically update the entities in the workload. You can search by entity type, tags, or attributes (like entity name, account ID, and AWS region). Click + Add this query to create a list of dynamically updated entities for your workload. We recommend this if you want your workload to update its entities as your system changes. Click + Add next to an entity to add it to your workload. This is a good choice if you know that the entities will stay useful even as your system changes. You can add a combination of queries and specific entities to the workload, which combine according to the query logic. Click Create a workload to save the workload. Once you've created the workload, you can edit it at any time If your workload contains one or more dashboards, you can set filters on those dashboard links. Below are more details about some aspects of how to define workloads: Use tags to define the workload content You can query and select workload entities using both tags and attributes. Therefore, to optimize your use of workloads, it helps to have a good entity-tagging strategy. We recommend reading the tagging documentation. How the dynamic query logic works You can add several individual entities and queries to define a workload. Queries can include multiple search terms. These are combined with an AND operator. Separate queries within a workload are combined with an OR operator. You can wrap strings between percent signs (%) to match exact substrings within a query. If you use substrings in entity names to categorize those entities (for example, <team>-<env>-<appName>), consider using tags complementarily, which are more powerful for filtering and grouping (for example, team:awesome, env:production). We recommend not to use percent signs (%) in dynamic queries that might return over 500 entities. This way, you get a more consistent experience in the user interface. Add dashboards to workloads If you have custom dashboards and you already know which data is relevant to your team for observing and operating their workloads, you can link those dashboards from your workload. You can also set filters on dashboards to scope them to a workload-specific context. When a user selects that dashboard from the workload, it opens with the filter already applied. one.newrelic.com > Apps > Workloads: You can add dashboards to a workload. To add dashboards to a workload: When creating or editing a workload, type Dashboard in the workload search bar to filter to dashboard entities. Add other search terms to filter to specific dashboards. Click Add. one.newrelic.com > Apps > Workloads: You can set filters on the dashboards you've linked to a workload. To filter a workload’s dashboard: From a workload’s Overview page, select a dashboard. Add search terms to filter the dashboard to a view that’s relevant for that workload. Select Save filter for this workload. Use the API You can query, create, and update workloads with our NerdGraph API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 264.47543,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Use</em> <em>workloads</em>",
        "sections": "<em>Use</em> <em>workloads</em>",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " on your organization structure and goals. <em>one</em>.newrelic.com &gt; Explorer &gt; <em>Workloads</em> &gt; Create a <em>workload</em>: When you create a <em>workload</em>, you choose the associated accounts and monitored entities. You can <em>use</em> <em>New</em> <em>Relic</em> <em>One</em> or the NerdGraph API to create a <em>workload</em>. Follow these steps to create a <em>workload</em> using"
      },
      "id": "603e81e8196a67c972a83db1"
    },
    {
      "sections": [
        "What is an entity in New Relic?",
        "What is an entity?",
        "Find and explore entities",
        "Tip",
        "Entity synthesis",
        "Reserved attributes for synthesized entities",
        "Entity relationships",
        "Important",
        "Group and organize entities"
      ],
      "title": "What is an entity in New Relic?",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "52a3e08bc9103c717d27b153e4fd4f547d6ecc32",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/what-entity-new-relic/",
      "published_at": "2021-06-08T19:55:34Z",
      "updated_at": "2021-06-08T19:55:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic monitoring is built around the concept of the entity. An entity is anything that reports data to New Relic. This document explains: What entities are How to find entity data How to modify existing entity types or create new ones How entities are related to one another How to organize them into groups for easier analysis What is an entity? From a New Relic product perspective, entity is a broad concept. An entity is anything we can identify that has data you can monitor. \"Entity\" can refer to fundamental data-reporting components like applications, hosts, and database services, but it can also refer to larger groupings of those components. For example, to monitor a data center, you could aggregate those hosts in New Relic to be a workload (a custom grouping of entities). That workload is, itself, also an entity. This conceptual definition of \"entity\" is important because New Relic's goal is to give you practical information about the status of your business-important entities (and not just give you an unhelpfully large stream of assorted metrics and data). Our focus on entities, and the relationships between them, helps us optimize monitoring and troubleshooting of complex, modern systems. Find and explore entities You'll find your entities wherever you see your data reporting in New Relic. Tip You can create new entity types to monitor any data source. Learn more about entity synthesis. Some tips for finding and understanding entity data: To find an entity's unique global identifier (GUID): from any list of monitored entities in the New Relic Explorer, hover over a specific entity and click the icon to see the GUID and other metadata. An entity's GUID is reported as the attribute entityGuid. You can query for an entity using this attribute in the query builder. Use the Related Entities view in the New Relic Explorer, service maps, distributed tracing, and our relationships API in GraphQL to see connections between entities. Explore entity data using our NerdGraph GraphiQL explorer (api.newrelic.com/graphiql). Entity synthesis If you have telemetry from any source that's not supported by New Relic out of the box, you can propose a mapping for it. Once approved, any telemetry received by New Relic which matches your definition file will be synthesized into an entity. Tip For more information on how to modify existing entity types or create new ones please refer to our Entity Synthesis documentation. Reserved attributes for synthesized entities These attributes are meant to be synthesized from the telemetry we receive. Do not set them unless you are aware of the implications and consequences. Attribute Description entity.guid Generally, you should not set this attribute field on your telemetry data. New Relic may add this field to ingested data to store a unique identifier for the entity associated with the data point. If telemetry arrives with the entity.guid attribute already present, then New Relic will not change the value. However, it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. One use case for passing this attribute is to associate ingested telemetry with an entity already created by New Relic. When the entity.guid attribute is sent, the value will override New Relic’s entity identification system (such as entity synthesis definitions) and instead will use the attribute as the data. entity.name This attribute shouldn't be put on ingested telemetry data unless you're trying to override the entity name that would have been selected by New Relic’s entity identification system. While New Relic won't change the value if it's already present on the data, New Relic may add the attribute to your data. Therefore invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. If this field is present on ingested telemetry, its value will be used to name the entity associated with the data point. This name will be used instead of the name selected by New Relic’s entity identification system (for example, entity synthesis definitions). Note that many entities use the name as part of their identification, so changing this field may result in the generation of a new entity. entity.type This attribute shouldn't be put on ingested telemetry data except for certain legacy cases where it's required to distinguish entity types. Passing this field may interfere with entity detection, particularly if unrecognized values are sent in this field. While New Relic won't change the value if already present on the data, the field is not guaranteed to provide unambiguous filtering of telemetry at query-time. Existing entity definitions already have overlapping values, and we recommend avoiding entity.type in favor of other fields for filtering telemetry queries. This field is used by New Relic, meaning that invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. Entity relationships Connections between entities are automatically created by New Relic based on what we can infer from your telemetry. For example, when two services that communicate using HTTP are instrumented with New Relic, we infer a \"calls/called-by\" relationship between them. When viewing a single entity in either the New Relic Explorer, Navigator, or Lookout, you can see its Related Entities in the entity's mini overview. Related Entities is a visualization of the various entities connected directly to the current entity in focus. You can quickly view important metrics for these related entities and navigate from one entity to another, through all the connected parts of your stack. Tip You can learn more about how entities are related using our NerdGraph API. When relationships are not automatically detected, you can manually create them using the \"Add/edit related entities\" link in Related Entities. Important Currently, you can only manually create calls/called-by relationships between service entities. Tip To manage manual relationships, you need to have modify and delete capabilities on entity relationships. These are granted to user roles by default. Group and organize entities You can place entities into groups that reflect business-important relationships in your organization. For example, you might group all entities related to a specific team or department, or related to a specific service. Or you might group multiple hosts together to reflect their grouping in a data center. To group your entities, see: How to tag entities Create workloads (groups of related entities)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.4833,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "What is an entity in <em>New</em> <em>Relic</em>?",
        "sections": "What is an entity in <em>New</em> <em>Relic</em>?",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": ", it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. <em>One</em> <em>use</em> case for passing this attribute is to associate ingested telemetry with an entity already created by <em>New</em> <em>Relic</em>. When the entity.guid attribute is sent, the value"
      },
      "id": "603ec160e7b9d295f72a07fc"
    }
  ],
  "/docs/new-relic-one/use-new-relic-one/workloads/workload-status-views-notifications": [
    {
      "sections": [
        "Use tags to help organize and find your data",
        "Tip",
        "Tag format and limits",
        "Best practices and tips",
        "Tips on keeping tags simple:",
        "Tips on using tags consistently:",
        "Tips on cross-team implementation:",
        "Tag examples",
        "Team-related tags",
        "Environment-related tags",
        "Criticality-related tags",
        "How tags are added",
        "Add tags via UI or API",
        "APM agent tags",
        "Infrastructure data tags",
        "Automate tags with our CLI",
        "Use tags to filter the UI",
        "Custom queries, charts, and alerts",
        "Query and alert on APM tags",
        "Throughput across shards",
        "Transactions per team",
        "Alert on error rate for teams",
        "Query and alert on attributes"
      ],
      "title": "Use tags to help organize and find your data",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "e2e2d53776b9109965df9de2a20660e9f60bd479",
      "image": "https://docs.newrelic.com/static/529f55ef72f3e366e6cb4a7be67229b6/c1b63/new-relic-tags-workloads_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/use-tags-help-organize-find-your-data/",
      "published_at": "2021-06-08T19:54:20Z",
      "updated_at": "2021-06-08T19:54:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the software industry, a tag typically refers to a piece of metadata added to a data set for the purpose of improving data organization and findability. At New Relic, our tags are key:value pairs (like team: operations) added to various sets of data, like monitored apps and hosts, agents, dashboards, and workloads. We make some important attributes available as tags (for example, app metadata like app name and language, and host metadata like host name and AWS region), and you can also add your own custom tags. You can use tags in the UI to filter down to relevant data, as shown here: Here you can see an accountId tag being used to filter workloads to a specific account. You can use tags to: Help organize data coming from a large number of sources and/or to a large number of New Relic accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see example use cases) Better organize and search dashboards and workloads Help you query and chart APM data Tags are useful for organizing data at a high level. If you wanted to add more fine-grained detail, like capturing user names or other high-cardinality values, custom attributes or custom events would be a better solution. Tip At New Relic, tags were previously called \"labels.\" You may sometimes see \"label\" used in our code; for example, some of our APM agent config files use a label config option for tags. Tag format and limits Format requirements and limits for tags: The UI has limits on the total number of tags it can display per entity: Limit of 100 for tags reported by default or added via agent/integration configuration. Limit of 100 for custom tags added via UI or API. The following are maximum character length for tags: Key: 128 characters Value: 256 characters When using our API to add tags, a dash (-) in a tag key is interpreted as a minus symbol. If your tag key has a dash, use back ticks around it (like `key-name`). Best practices and tips Before adding tags, we recommend first seeing how our default tags work for you. When you're ready to add your own tags, read the best practices below to get the most out of them. Tips on keeping tags simple: Start by adding only tags you know you’ll definitely use. Unused tags create noise and may add confusion. Try to use short tags. Shorter tags are easier to parse, and also the UI may sometimes truncate longer tags. (See character limits.) When possible, use keys and values that are human-readable (for example, region: EMEA is better than Param8323 : 1229072). Avoid including several values like regions: EMEA | US | LATAM in a single tag. We recommend using three different tags for that, like region: emea, region: us, and region: latam. If you want to match multiple tags, you can do that using the advanced options in the filter UI. Tips on using tags consistently: Try to be consistent with tag language across your teams and entities. Be consistent with naming. For example, avoid using both region: emea and reg: emea. Be consistent with format. For example, avoid using both camelCase and kebab-case. Be consistent with capitalization. For example, avoid using both env: staging and env: Staging (although tag searching is case-insensitive in the UI and API) Tips on cross-team implementation: One reason for using tags is to improve observability and cost allocation. For this reason, responsibility for tag implementation is often assigned to an observability team, SREs, a group of architects, or a cross-team task force. We recommend the people responsible for implementing tags meet and create an internal policy to describe how the tags are defined and which conventions are to be used. Keep this reference manual up-to-date. Automate the definition of tags when you deploy New Relic agents, at the cloud provider, or through New Relic automation tools, such as the API or Terraform. Create recurring reports that identify entities that are non-compliant with your tagging standards. Tag examples Here are some examples of common ways to use tags to organize data: Team-related tags Creating tags for team names can be helpful to understand which team, group, department, or region was responsible for a change that led to a performance issue. Team examples: team: backend team: frontend team: db Role examples: roles: architecture roles: devops roles: pm Region examples: region: emea region: america region: asia Environment-related tags You can create entities for the environment they belong to. Examples: env: production env: qa env: development env: staging Criticality-related tags You can create tags related to criticality levels, which lets you easier track the most critical issues. Examples: layer: level1 layer: level2 layer: level3 How tags are added Some important attributes, by default, are available for use as tags. For example, the account name, the account ID, and some basic host/server metadata are available as default tags. You can't remove these available-by-default tags. Here are some details about how tags are added for some specific data sources: Add tags via UI or API When you add tags via the UI or API, this occurs at the entity level. This means that, for example, if you have multiple APM agents monitoring a single entity and apply a tag via the UI, that tag is available for all data coming from that entity. To add or delete tags via the UI: Select a monitored entity, like a monitored app or host. Near the entity’s name at the top of the page, select the See metadata and manage tags menu. In the menu that pops up, add or delete a tag. To manage tags via API: see our NerdGraph tagging docs. For a guide to using our CLI to automate tagging, see our developer site. APM agent tags You can add tags via the UI and API or you can add tags using APM agent configuration. There are differences in how these apply tags: Via agent config: These tags are applied at the agent-level, not the entity/application level. This would be a good option if you have multiple agents monitoring different aspects of the same app (for example, a blue-green deployment model). Via the UI or API: These tags are applied at the entity/application level. Here are links to the agent configuration options: C SDK: not available Java Go .NET Node.js PHP Python Ruby For information on querying APM tags, see Query APM tags. Infrastructure data tags There are several ways tags are added to infrastructure entities and services: Use the UI or API to add tags at the entity level. Infrastructure agent: some attributes are available by default as tags. You can also add custom attributes, which are also available as tags in the UI. On-host integrations: some attributes are available by default as tags. You can also add tags by using integration-specific labels config options (for an example, see the labels config for the Apache integration). Cloud service integrations: by default we report tags and labels that are defined in the cloud service. To add tags, you'd add them on the cloud-service-side. Automate tags with our CLI For a guide to automating tags using our CLI tool, see our developer site. Use tags to filter the UI Use the filter field at the top of the New Relic Explorer to filter down to the entities you care about. You can use multiple filter conditions. To filter down to certain entities using tags: From one.newrelic.com, click Explorer. Click the Filter by... field to see a dropdown of available attributes and tags. You can filter by multiple elements and use advanced search options. To find an entity’s metadata and tags from the UI, here are two options: From a list of entities in the UI, at the far right, select an entity's icon. OR Select an entity. Near the top of the page, select the icon. To use the API to view tags, see our NerdGraph docs. Learn about how to use tags with dashboards and how to use tags with workloads. Custom queries, charts, and alerts Different features handle tags differently. Here are some details about how you can use NRQL to query tag data, or create NRQL condition alerts. Query and alert on APM tags You can query APM tags using NRQL. Minimum agent versions: C: not available Go: 2.3.0 Java: 4.9.0 .NET: 8.17 Node: v4.13.0 PHP: not available Python: v4.10.0.112 Ruby: 6.1.0.352 Here are some query examples: Throughput across shards Given a service that is distributed across nine shards, each shard assigned as an environment, we can plot the transaction throughput on all shards using a wildcard query like: SELECT rate(count(apm.service.transaction.duration), 1 minute) FROM Metric WHERE appName LIKE 'MyApp (%' AND transactionType = 'Other' FACET tags.Environment TIMESERIES Copy Transactions per team To see the number of transactions per service for a specific team, we might use a query like: FROM Transaction SELECT count(*) WHERE tags.Team = 'team-a' FACET tags.Project TIMESERIES Copy Alert on error rate for teams You can use a query for your services’ error rate for setting an alert without having to create a rule for each service. Here is the error rate for all services on a team called team-b. And this alert will automatically monitor any new app names added with the team tag. FROM Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Team = 'team-b' FACET appName Copy Related to this, you might create a general rule for a specific service deployed across several environments, so that we have an alarm for a single service monitoring each environment individually: From Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Project = 'MyProject' FACET tags.Environment Copy Query and alert on attributes As explained in Tag sources, some important attributes are used as tags. You can query all attributes and create custom charts using NRQL, and create NRQL alert conditions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 281.32404,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Use</em> tags to help organize and find your data",
        "sections": "<em>Use</em> tags to help organize and find your data",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " you can see an accountId tag being used to filter <em>workloads</em> to a specific account. You can <em>use</em> tags to: Help organize data coming from a large number of sources and&#x2F;or to a large number of <em>New</em> <em>Relic</em> accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see"
      },
      "id": "603ebd1228ccbc6278eba754"
    },
    {
      "sections": [
        "Use workloads",
        "Create a workload",
        "Use tags to define the workload content",
        "How the dynamic query logic works",
        "Add dashboards to workloads",
        "Use the API"
      ],
      "title": "Use workloads",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Workloads"
      ],
      "external_id": "c39090bde9b797940e7f5ba0c9610ba39879677b",
      "image": "https://docs.newrelic.com/static/14c811e218cfc8793bb4d2bd4b2aad0b/c1b63/new-relic-workloads-add-dashboards.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/workloads/use-workloads/",
      "published_at": "2021-06-08T22:22:15Z",
      "updated_at": "2021-06-03T10:04:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view workloads, go to one.newrelic.com and find them on the Explorer. There are three main tabs (Health, Activity, and Owner) plus the header. The Health tab in a workload provides relevant status data that helps you operate the workload: It shows the global status of the workload, as well as the individual status of all the entities that make up the workload at each point in time. It looks like this: It comprises the following: The navigator view shows the entities that make up the workload, and provides controls to group and sort them. If you’ve used queries to dynamically select entities, the workload entities will change over time. The workload status informs about how your workload is performing, based on the individual alerting status of the entities in your workload. With health over time you’ll see whether and how the workload status has changed in the past three hours. If one or more entities are alerting, you’ll get a count of criticals and warnings and a summary of the open conditions, which will make it easier to identify and troubleshoot the most important issues. The Activity tab shows performance data related to the entities in the workload, along with the events that could explain any changes in those time series. It looks like this: Here's the most important sections: Linked dashboards. You can add links to dashboards from your workload, and create pre-filtered, workload-relevant links to dashboards. Golden metrics. These are charts with the most relevant metrics for each entity type, such as number of requests, response time, and error rate for an application. Explore the charts to detect correlations among different entities (for example, two applications) and different stack layers (for example, applications and hosts). The golden metrics that you see for each entity type on a workload can be customized either at the account or the workload level through the NerdGraph API. Events timeline. This includes the start and end time of incidents and anomalies that refer to the workload entities. It also shows other event types that can explain a change in the status or performance of the workload, such as deployments and configuration changes. The Owner tab gives you information about the team responsible for the workload. It looks like this: It contains: The team responsible for the workload. You can include more than one team. The workload description. Share the mission of the workload, and the business logic it represents: Is it a web application? An API? A backend process? Fill in any details that are relevant to your team, or to other teams in your organization. Contact information. From the drop-down menu, choose how your team prefers to be contacted. Links to the most relevant resources to operate the workload. Here you can add links to runbooks, code repositories, productivity tools, or anything else related to the workload that you need at hand. Finally, the header contains the filter bar and the edition controls: Filter bar. Use the advanced filtering options when you need to focus only on certain entities within the workload. Edit workload. Define the entities that are part of the workload, and the accounts they’ll be fetched from. Setup status. Configure how the global workload status will be determined, based on the workload entities health. Summary page. See all the tags that have been added to the workload, as well as metadata such as the workload's identifier (GUID) and account. Create a workload A workload should contain the entities you and your team want to see. Your choice of entities depends on your organization structure and goals. one.newrelic.com > Explorer > Workloads > Create a workload: When you create a workload, you choose the associated accounts and monitored entities. You can use New Relic One or the NerdGraph API to create a workload. Follow these steps to create a workload using the UI: Go to one.newrelic.com and click on the Explorer, and then click + Create a workload. Give the workload a name that will be meaningful for you and your team later. From the Select an account dropdown, select the workload account you'd like to use. Click Choose the scope accounts to check all of the accounts related to this workload. Find and choose the entities that make up the workload. When you have the results you're looking for, you can add specific entities or add the query to dynamically update the entities in the workload. You can search by entity type, tags, or attributes (like entity name, account ID, and AWS region). Click + Add this query to create a list of dynamically updated entities for your workload. We recommend this if you want your workload to update its entities as your system changes. Click + Add next to an entity to add it to your workload. This is a good choice if you know that the entities will stay useful even as your system changes. You can add a combination of queries and specific entities to the workload, which combine according to the query logic. Click Create a workload to save the workload. Once you've created the workload, you can edit it at any time If your workload contains one or more dashboards, you can set filters on those dashboard links. Below are more details about some aspects of how to define workloads: Use tags to define the workload content You can query and select workload entities using both tags and attributes. Therefore, to optimize your use of workloads, it helps to have a good entity-tagging strategy. We recommend reading the tagging documentation. How the dynamic query logic works You can add several individual entities and queries to define a workload. Queries can include multiple search terms. These are combined with an AND operator. Separate queries within a workload are combined with an OR operator. You can wrap strings between percent signs (%) to match exact substrings within a query. If you use substrings in entity names to categorize those entities (for example, <team>-<env>-<appName>), consider using tags complementarily, which are more powerful for filtering and grouping (for example, team:awesome, env:production). We recommend not to use percent signs (%) in dynamic queries that might return over 500 entities. This way, you get a more consistent experience in the user interface. Add dashboards to workloads If you have custom dashboards and you already know which data is relevant to your team for observing and operating their workloads, you can link those dashboards from your workload. You can also set filters on dashboards to scope them to a workload-specific context. When a user selects that dashboard from the workload, it opens with the filter already applied. one.newrelic.com > Apps > Workloads: You can add dashboards to a workload. To add dashboards to a workload: When creating or editing a workload, type Dashboard in the workload search bar to filter to dashboard entities. Add other search terms to filter to specific dashboards. Click Add. one.newrelic.com > Apps > Workloads: You can set filters on the dashboards you've linked to a workload. To filter a workload’s dashboard: From a workload’s Overview page, select a dashboard. Add search terms to filter the dashboard to a view that’s relevant for that workload. Select Save filter for this workload. Use the API You can query, create, and update workloads with our NerdGraph API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 264.47537,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Use</em> <em>workloads</em>",
        "sections": "<em>Use</em> <em>workloads</em>",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " on your organization structure and goals. <em>one</em>.newrelic.com &gt; Explorer &gt; <em>Workloads</em> &gt; Create a <em>workload</em>: When you create a <em>workload</em>, you choose the associated accounts and monitored entities. You can <em>use</em> <em>New</em> <em>Relic</em> <em>One</em> or the NerdGraph API to create a <em>workload</em>. Follow these steps to create a <em>workload</em> using"
      },
      "id": "603e81e8196a67c972a83db1"
    },
    {
      "sections": [
        "What is an entity in New Relic?",
        "What is an entity?",
        "Find and explore entities",
        "Tip",
        "Entity synthesis",
        "Reserved attributes for synthesized entities",
        "Entity relationships",
        "Important",
        "Group and organize entities"
      ],
      "title": "What is an entity in New Relic?",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "52a3e08bc9103c717d27b153e4fd4f547d6ecc32",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/what-entity-new-relic/",
      "published_at": "2021-06-08T19:55:34Z",
      "updated_at": "2021-06-08T19:55:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic monitoring is built around the concept of the entity. An entity is anything that reports data to New Relic. This document explains: What entities are How to find entity data How to modify existing entity types or create new ones How entities are related to one another How to organize them into groups for easier analysis What is an entity? From a New Relic product perspective, entity is a broad concept. An entity is anything we can identify that has data you can monitor. \"Entity\" can refer to fundamental data-reporting components like applications, hosts, and database services, but it can also refer to larger groupings of those components. For example, to monitor a data center, you could aggregate those hosts in New Relic to be a workload (a custom grouping of entities). That workload is, itself, also an entity. This conceptual definition of \"entity\" is important because New Relic's goal is to give you practical information about the status of your business-important entities (and not just give you an unhelpfully large stream of assorted metrics and data). Our focus on entities, and the relationships between them, helps us optimize monitoring and troubleshooting of complex, modern systems. Find and explore entities You'll find your entities wherever you see your data reporting in New Relic. Tip You can create new entity types to monitor any data source. Learn more about entity synthesis. Some tips for finding and understanding entity data: To find an entity's unique global identifier (GUID): from any list of monitored entities in the New Relic Explorer, hover over a specific entity and click the icon to see the GUID and other metadata. An entity's GUID is reported as the attribute entityGuid. You can query for an entity using this attribute in the query builder. Use the Related Entities view in the New Relic Explorer, service maps, distributed tracing, and our relationships API in GraphQL to see connections between entities. Explore entity data using our NerdGraph GraphiQL explorer (api.newrelic.com/graphiql). Entity synthesis If you have telemetry from any source that's not supported by New Relic out of the box, you can propose a mapping for it. Once approved, any telemetry received by New Relic which matches your definition file will be synthesized into an entity. Tip For more information on how to modify existing entity types or create new ones please refer to our Entity Synthesis documentation. Reserved attributes for synthesized entities These attributes are meant to be synthesized from the telemetry we receive. Do not set them unless you are aware of the implications and consequences. Attribute Description entity.guid Generally, you should not set this attribute field on your telemetry data. New Relic may add this field to ingested data to store a unique identifier for the entity associated with the data point. If telemetry arrives with the entity.guid attribute already present, then New Relic will not change the value. However, it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. One use case for passing this attribute is to associate ingested telemetry with an entity already created by New Relic. When the entity.guid attribute is sent, the value will override New Relic’s entity identification system (such as entity synthesis definitions) and instead will use the attribute as the data. entity.name This attribute shouldn't be put on ingested telemetry data unless you're trying to override the entity name that would have been selected by New Relic’s entity identification system. While New Relic won't change the value if it's already present on the data, New Relic may add the attribute to your data. Therefore invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. If this field is present on ingested telemetry, its value will be used to name the entity associated with the data point. This name will be used instead of the name selected by New Relic’s entity identification system (for example, entity synthesis definitions). Note that many entities use the name as part of their identification, so changing this field may result in the generation of a new entity. entity.type This attribute shouldn't be put on ingested telemetry data except for certain legacy cases where it's required to distinguish entity types. Passing this field may interfere with entity detection, particularly if unrecognized values are sent in this field. While New Relic won't change the value if already present on the data, the field is not guaranteed to provide unambiguous filtering of telemetry at query-time. Existing entity definitions already have overlapping values, and we recommend avoiding entity.type in favor of other fields for filtering telemetry queries. This field is used by New Relic, meaning that invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. Entity relationships Connections between entities are automatically created by New Relic based on what we can infer from your telemetry. For example, when two services that communicate using HTTP are instrumented with New Relic, we infer a \"calls/called-by\" relationship between them. When viewing a single entity in either the New Relic Explorer, Navigator, or Lookout, you can see its Related Entities in the entity's mini overview. Related Entities is a visualization of the various entities connected directly to the current entity in focus. You can quickly view important metrics for these related entities and navigate from one entity to another, through all the connected parts of your stack. Tip You can learn more about how entities are related using our NerdGraph API. When relationships are not automatically detected, you can manually create them using the \"Add/edit related entities\" link in Related Entities. Important Currently, you can only manually create calls/called-by relationships between service entities. Tip To manage manual relationships, you need to have modify and delete capabilities on entity relationships. These are granted to user roles by default. Group and organize entities You can place entities into groups that reflect business-important relationships in your organization. For example, you might group all entities related to a specific team or department, or related to a specific service. Or you might group multiple hosts together to reflect their grouping in a data center. To group your entities, see: How to tag entities Create workloads (groups of related entities)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.48322,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "What is an entity in <em>New</em> <em>Relic</em>?",
        "sections": "What is an entity in <em>New</em> <em>Relic</em>?",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": ", it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. <em>One</em> <em>use</em> case for passing this attribute is to associate ingested telemetry with an entity already created by <em>New</em> <em>Relic</em>. When the entity.guid attribute is sent, the value"
      },
      "id": "603ec160e7b9d295f72a07fc"
    }
  ],
  "/docs/new-relic-one/use-new-relic-one/workloads/workloads-isolate-resolve-incidents-faster": [
    {
      "sections": [
        "Use tags to help organize and find your data",
        "Tip",
        "Tag format and limits",
        "Best practices and tips",
        "Tips on keeping tags simple:",
        "Tips on using tags consistently:",
        "Tips on cross-team implementation:",
        "Tag examples",
        "Team-related tags",
        "Environment-related tags",
        "Criticality-related tags",
        "How tags are added",
        "Add tags via UI or API",
        "APM agent tags",
        "Infrastructure data tags",
        "Automate tags with our CLI",
        "Use tags to filter the UI",
        "Custom queries, charts, and alerts",
        "Query and alert on APM tags",
        "Throughput across shards",
        "Transactions per team",
        "Alert on error rate for teams",
        "Query and alert on attributes"
      ],
      "title": "Use tags to help organize and find your data",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "e2e2d53776b9109965df9de2a20660e9f60bd479",
      "image": "https://docs.newrelic.com/static/529f55ef72f3e366e6cb4a7be67229b6/c1b63/new-relic-tags-workloads_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/use-tags-help-organize-find-your-data/",
      "published_at": "2021-06-08T19:54:20Z",
      "updated_at": "2021-06-08T19:54:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the software industry, a tag typically refers to a piece of metadata added to a data set for the purpose of improving data organization and findability. At New Relic, our tags are key:value pairs (like team: operations) added to various sets of data, like monitored apps and hosts, agents, dashboards, and workloads. We make some important attributes available as tags (for example, app metadata like app name and language, and host metadata like host name and AWS region), and you can also add your own custom tags. You can use tags in the UI to filter down to relevant data, as shown here: Here you can see an accountId tag being used to filter workloads to a specific account. You can use tags to: Help organize data coming from a large number of sources and/or to a large number of New Relic accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see example use cases) Better organize and search dashboards and workloads Help you query and chart APM data Tags are useful for organizing data at a high level. If you wanted to add more fine-grained detail, like capturing user names or other high-cardinality values, custom attributes or custom events would be a better solution. Tip At New Relic, tags were previously called \"labels.\" You may sometimes see \"label\" used in our code; for example, some of our APM agent config files use a label config option for tags. Tag format and limits Format requirements and limits for tags: The UI has limits on the total number of tags it can display per entity: Limit of 100 for tags reported by default or added via agent/integration configuration. Limit of 100 for custom tags added via UI or API. The following are maximum character length for tags: Key: 128 characters Value: 256 characters When using our API to add tags, a dash (-) in a tag key is interpreted as a minus symbol. If your tag key has a dash, use back ticks around it (like `key-name`). Best practices and tips Before adding tags, we recommend first seeing how our default tags work for you. When you're ready to add your own tags, read the best practices below to get the most out of them. Tips on keeping tags simple: Start by adding only tags you know you’ll definitely use. Unused tags create noise and may add confusion. Try to use short tags. Shorter tags are easier to parse, and also the UI may sometimes truncate longer tags. (See character limits.) When possible, use keys and values that are human-readable (for example, region: EMEA is better than Param8323 : 1229072). Avoid including several values like regions: EMEA | US | LATAM in a single tag. We recommend using three different tags for that, like region: emea, region: us, and region: latam. If you want to match multiple tags, you can do that using the advanced options in the filter UI. Tips on using tags consistently: Try to be consistent with tag language across your teams and entities. Be consistent with naming. For example, avoid using both region: emea and reg: emea. Be consistent with format. For example, avoid using both camelCase and kebab-case. Be consistent with capitalization. For example, avoid using both env: staging and env: Staging (although tag searching is case-insensitive in the UI and API) Tips on cross-team implementation: One reason for using tags is to improve observability and cost allocation. For this reason, responsibility for tag implementation is often assigned to an observability team, SREs, a group of architects, or a cross-team task force. We recommend the people responsible for implementing tags meet and create an internal policy to describe how the tags are defined and which conventions are to be used. Keep this reference manual up-to-date. Automate the definition of tags when you deploy New Relic agents, at the cloud provider, or through New Relic automation tools, such as the API or Terraform. Create recurring reports that identify entities that are non-compliant with your tagging standards. Tag examples Here are some examples of common ways to use tags to organize data: Team-related tags Creating tags for team names can be helpful to understand which team, group, department, or region was responsible for a change that led to a performance issue. Team examples: team: backend team: frontend team: db Role examples: roles: architecture roles: devops roles: pm Region examples: region: emea region: america region: asia Environment-related tags You can create entities for the environment they belong to. Examples: env: production env: qa env: development env: staging Criticality-related tags You can create tags related to criticality levels, which lets you easier track the most critical issues. Examples: layer: level1 layer: level2 layer: level3 How tags are added Some important attributes, by default, are available for use as tags. For example, the account name, the account ID, and some basic host/server metadata are available as default tags. You can't remove these available-by-default tags. Here are some details about how tags are added for some specific data sources: Add tags via UI or API When you add tags via the UI or API, this occurs at the entity level. This means that, for example, if you have multiple APM agents monitoring a single entity and apply a tag via the UI, that tag is available for all data coming from that entity. To add or delete tags via the UI: Select a monitored entity, like a monitored app or host. Near the entity’s name at the top of the page, select the See metadata and manage tags menu. In the menu that pops up, add or delete a tag. To manage tags via API: see our NerdGraph tagging docs. For a guide to using our CLI to automate tagging, see our developer site. APM agent tags You can add tags via the UI and API or you can add tags using APM agent configuration. There are differences in how these apply tags: Via agent config: These tags are applied at the agent-level, not the entity/application level. This would be a good option if you have multiple agents monitoring different aspects of the same app (for example, a blue-green deployment model). Via the UI or API: These tags are applied at the entity/application level. Here are links to the agent configuration options: C SDK: not available Java Go .NET Node.js PHP Python Ruby For information on querying APM tags, see Query APM tags. Infrastructure data tags There are several ways tags are added to infrastructure entities and services: Use the UI or API to add tags at the entity level. Infrastructure agent: some attributes are available by default as tags. You can also add custom attributes, which are also available as tags in the UI. On-host integrations: some attributes are available by default as tags. You can also add tags by using integration-specific labels config options (for an example, see the labels config for the Apache integration). Cloud service integrations: by default we report tags and labels that are defined in the cloud service. To add tags, you'd add them on the cloud-service-side. Automate tags with our CLI For a guide to automating tags using our CLI tool, see our developer site. Use tags to filter the UI Use the filter field at the top of the New Relic Explorer to filter down to the entities you care about. You can use multiple filter conditions. To filter down to certain entities using tags: From one.newrelic.com, click Explorer. Click the Filter by... field to see a dropdown of available attributes and tags. You can filter by multiple elements and use advanced search options. To find an entity’s metadata and tags from the UI, here are two options: From a list of entities in the UI, at the far right, select an entity's icon. OR Select an entity. Near the top of the page, select the icon. To use the API to view tags, see our NerdGraph docs. Learn about how to use tags with dashboards and how to use tags with workloads. Custom queries, charts, and alerts Different features handle tags differently. Here are some details about how you can use NRQL to query tag data, or create NRQL condition alerts. Query and alert on APM tags You can query APM tags using NRQL. Minimum agent versions: C: not available Go: 2.3.0 Java: 4.9.0 .NET: 8.17 Node: v4.13.0 PHP: not available Python: v4.10.0.112 Ruby: 6.1.0.352 Here are some query examples: Throughput across shards Given a service that is distributed across nine shards, each shard assigned as an environment, we can plot the transaction throughput on all shards using a wildcard query like: SELECT rate(count(apm.service.transaction.duration), 1 minute) FROM Metric WHERE appName LIKE 'MyApp (%' AND transactionType = 'Other' FACET tags.Environment TIMESERIES Copy Transactions per team To see the number of transactions per service for a specific team, we might use a query like: FROM Transaction SELECT count(*) WHERE tags.Team = 'team-a' FACET tags.Project TIMESERIES Copy Alert on error rate for teams You can use a query for your services’ error rate for setting an alert without having to create a rule for each service. Here is the error rate for all services on a team called team-b. And this alert will automatically monitor any new app names added with the team tag. FROM Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Team = 'team-b' FACET appName Copy Related to this, you might create a general rule for a specific service deployed across several environments, so that we have an alarm for a single service monitoring each environment individually: From Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Project = 'MyProject' FACET tags.Environment Copy Query and alert on attributes As explained in Tag sources, some important attributes are used as tags. You can query all attributes and create custom charts using NRQL, and create NRQL alert conditions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 281.32404,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Use</em> tags to help organize and find your data",
        "sections": "<em>Use</em> tags to help organize and find your data",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " you can see an accountId tag being used to filter <em>workloads</em> to a specific account. You can <em>use</em> tags to: Help organize data coming from a large number of sources and&#x2F;or to a large number of <em>New</em> <em>Relic</em> accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see"
      },
      "id": "603ebd1228ccbc6278eba754"
    },
    {
      "sections": [
        "Use workloads",
        "Create a workload",
        "Use tags to define the workload content",
        "How the dynamic query logic works",
        "Add dashboards to workloads",
        "Use the API"
      ],
      "title": "Use workloads",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Workloads"
      ],
      "external_id": "c39090bde9b797940e7f5ba0c9610ba39879677b",
      "image": "https://docs.newrelic.com/static/14c811e218cfc8793bb4d2bd4b2aad0b/c1b63/new-relic-workloads-add-dashboards.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/workloads/use-workloads/",
      "published_at": "2021-06-08T22:22:15Z",
      "updated_at": "2021-06-03T10:04:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view workloads, go to one.newrelic.com and find them on the Explorer. There are three main tabs (Health, Activity, and Owner) plus the header. The Health tab in a workload provides relevant status data that helps you operate the workload: It shows the global status of the workload, as well as the individual status of all the entities that make up the workload at each point in time. It looks like this: It comprises the following: The navigator view shows the entities that make up the workload, and provides controls to group and sort them. If you’ve used queries to dynamically select entities, the workload entities will change over time. The workload status informs about how your workload is performing, based on the individual alerting status of the entities in your workload. With health over time you’ll see whether and how the workload status has changed in the past three hours. If one or more entities are alerting, you’ll get a count of criticals and warnings and a summary of the open conditions, which will make it easier to identify and troubleshoot the most important issues. The Activity tab shows performance data related to the entities in the workload, along with the events that could explain any changes in those time series. It looks like this: Here's the most important sections: Linked dashboards. You can add links to dashboards from your workload, and create pre-filtered, workload-relevant links to dashboards. Golden metrics. These are charts with the most relevant metrics for each entity type, such as number of requests, response time, and error rate for an application. Explore the charts to detect correlations among different entities (for example, two applications) and different stack layers (for example, applications and hosts). The golden metrics that you see for each entity type on a workload can be customized either at the account or the workload level through the NerdGraph API. Events timeline. This includes the start and end time of incidents and anomalies that refer to the workload entities. It also shows other event types that can explain a change in the status or performance of the workload, such as deployments and configuration changes. The Owner tab gives you information about the team responsible for the workload. It looks like this: It contains: The team responsible for the workload. You can include more than one team. The workload description. Share the mission of the workload, and the business logic it represents: Is it a web application? An API? A backend process? Fill in any details that are relevant to your team, or to other teams in your organization. Contact information. From the drop-down menu, choose how your team prefers to be contacted. Links to the most relevant resources to operate the workload. Here you can add links to runbooks, code repositories, productivity tools, or anything else related to the workload that you need at hand. Finally, the header contains the filter bar and the edition controls: Filter bar. Use the advanced filtering options when you need to focus only on certain entities within the workload. Edit workload. Define the entities that are part of the workload, and the accounts they’ll be fetched from. Setup status. Configure how the global workload status will be determined, based on the workload entities health. Summary page. See all the tags that have been added to the workload, as well as metadata such as the workload's identifier (GUID) and account. Create a workload A workload should contain the entities you and your team want to see. Your choice of entities depends on your organization structure and goals. one.newrelic.com > Explorer > Workloads > Create a workload: When you create a workload, you choose the associated accounts and monitored entities. You can use New Relic One or the NerdGraph API to create a workload. Follow these steps to create a workload using the UI: Go to one.newrelic.com and click on the Explorer, and then click + Create a workload. Give the workload a name that will be meaningful for you and your team later. From the Select an account dropdown, select the workload account you'd like to use. Click Choose the scope accounts to check all of the accounts related to this workload. Find and choose the entities that make up the workload. When you have the results you're looking for, you can add specific entities or add the query to dynamically update the entities in the workload. You can search by entity type, tags, or attributes (like entity name, account ID, and AWS region). Click + Add this query to create a list of dynamically updated entities for your workload. We recommend this if you want your workload to update its entities as your system changes. Click + Add next to an entity to add it to your workload. This is a good choice if you know that the entities will stay useful even as your system changes. You can add a combination of queries and specific entities to the workload, which combine according to the query logic. Click Create a workload to save the workload. Once you've created the workload, you can edit it at any time If your workload contains one or more dashboards, you can set filters on those dashboard links. Below are more details about some aspects of how to define workloads: Use tags to define the workload content You can query and select workload entities using both tags and attributes. Therefore, to optimize your use of workloads, it helps to have a good entity-tagging strategy. We recommend reading the tagging documentation. How the dynamic query logic works You can add several individual entities and queries to define a workload. Queries can include multiple search terms. These are combined with an AND operator. Separate queries within a workload are combined with an OR operator. You can wrap strings between percent signs (%) to match exact substrings within a query. If you use substrings in entity names to categorize those entities (for example, <team>-<env>-<appName>), consider using tags complementarily, which are more powerful for filtering and grouping (for example, team:awesome, env:production). We recommend not to use percent signs (%) in dynamic queries that might return over 500 entities. This way, you get a more consistent experience in the user interface. Add dashboards to workloads If you have custom dashboards and you already know which data is relevant to your team for observing and operating their workloads, you can link those dashboards from your workload. You can also set filters on dashboards to scope them to a workload-specific context. When a user selects that dashboard from the workload, it opens with the filter already applied. one.newrelic.com > Apps > Workloads: You can add dashboards to a workload. To add dashboards to a workload: When creating or editing a workload, type Dashboard in the workload search bar to filter to dashboard entities. Add other search terms to filter to specific dashboards. Click Add. one.newrelic.com > Apps > Workloads: You can set filters on the dashboards you've linked to a workload. To filter a workload’s dashboard: From a workload’s Overview page, select a dashboard. Add search terms to filter the dashboard to a view that’s relevant for that workload. Select Save filter for this workload. Use the API You can query, create, and update workloads with our NerdGraph API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 264.47537,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Use</em> <em>workloads</em>",
        "sections": "<em>Use</em> <em>workloads</em>",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " on your organization structure and goals. <em>one</em>.newrelic.com &gt; Explorer &gt; <em>Workloads</em> &gt; Create a <em>workload</em>: When you create a <em>workload</em>, you choose the associated accounts and monitored entities. You can <em>use</em> <em>New</em> <em>Relic</em> <em>One</em> or the NerdGraph API to create a <em>workload</em>. Follow these steps to create a <em>workload</em> using"
      },
      "id": "603e81e8196a67c972a83db1"
    },
    {
      "sections": [
        "What is an entity in New Relic?",
        "What is an entity?",
        "Find and explore entities",
        "Tip",
        "Entity synthesis",
        "Reserved attributes for synthesized entities",
        "Entity relationships",
        "Important",
        "Group and organize entities"
      ],
      "title": "What is an entity in New Relic?",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "52a3e08bc9103c717d27b153e4fd4f547d6ecc32",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/what-entity-new-relic/",
      "published_at": "2021-06-08T19:55:34Z",
      "updated_at": "2021-06-08T19:55:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic monitoring is built around the concept of the entity. An entity is anything that reports data to New Relic. This document explains: What entities are How to find entity data How to modify existing entity types or create new ones How entities are related to one another How to organize them into groups for easier analysis What is an entity? From a New Relic product perspective, entity is a broad concept. An entity is anything we can identify that has data you can monitor. \"Entity\" can refer to fundamental data-reporting components like applications, hosts, and database services, but it can also refer to larger groupings of those components. For example, to monitor a data center, you could aggregate those hosts in New Relic to be a workload (a custom grouping of entities). That workload is, itself, also an entity. This conceptual definition of \"entity\" is important because New Relic's goal is to give you practical information about the status of your business-important entities (and not just give you an unhelpfully large stream of assorted metrics and data). Our focus on entities, and the relationships between them, helps us optimize monitoring and troubleshooting of complex, modern systems. Find and explore entities You'll find your entities wherever you see your data reporting in New Relic. Tip You can create new entity types to monitor any data source. Learn more about entity synthesis. Some tips for finding and understanding entity data: To find an entity's unique global identifier (GUID): from any list of monitored entities in the New Relic Explorer, hover over a specific entity and click the icon to see the GUID and other metadata. An entity's GUID is reported as the attribute entityGuid. You can query for an entity using this attribute in the query builder. Use the Related Entities view in the New Relic Explorer, service maps, distributed tracing, and our relationships API in GraphQL to see connections between entities. Explore entity data using our NerdGraph GraphiQL explorer (api.newrelic.com/graphiql). Entity synthesis If you have telemetry from any source that's not supported by New Relic out of the box, you can propose a mapping for it. Once approved, any telemetry received by New Relic which matches your definition file will be synthesized into an entity. Tip For more information on how to modify existing entity types or create new ones please refer to our Entity Synthesis documentation. Reserved attributes for synthesized entities These attributes are meant to be synthesized from the telemetry we receive. Do not set them unless you are aware of the implications and consequences. Attribute Description entity.guid Generally, you should not set this attribute field on your telemetry data. New Relic may add this field to ingested data to store a unique identifier for the entity associated with the data point. If telemetry arrives with the entity.guid attribute already present, then New Relic will not change the value. However, it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. One use case for passing this attribute is to associate ingested telemetry with an entity already created by New Relic. When the entity.guid attribute is sent, the value will override New Relic’s entity identification system (such as entity synthesis definitions) and instead will use the attribute as the data. entity.name This attribute shouldn't be put on ingested telemetry data unless you're trying to override the entity name that would have been selected by New Relic’s entity identification system. While New Relic won't change the value if it's already present on the data, New Relic may add the attribute to your data. Therefore invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. If this field is present on ingested telemetry, its value will be used to name the entity associated with the data point. This name will be used instead of the name selected by New Relic’s entity identification system (for example, entity synthesis definitions). Note that many entities use the name as part of their identification, so changing this field may result in the generation of a new entity. entity.type This attribute shouldn't be put on ingested telemetry data except for certain legacy cases where it's required to distinguish entity types. Passing this field may interfere with entity detection, particularly if unrecognized values are sent in this field. While New Relic won't change the value if already present on the data, the field is not guaranteed to provide unambiguous filtering of telemetry at query-time. Existing entity definitions already have overlapping values, and we recommend avoiding entity.type in favor of other fields for filtering telemetry queries. This field is used by New Relic, meaning that invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. Entity relationships Connections between entities are automatically created by New Relic based on what we can infer from your telemetry. For example, when two services that communicate using HTTP are instrumented with New Relic, we infer a \"calls/called-by\" relationship between them. When viewing a single entity in either the New Relic Explorer, Navigator, or Lookout, you can see its Related Entities in the entity's mini overview. Related Entities is a visualization of the various entities connected directly to the current entity in focus. You can quickly view important metrics for these related entities and navigate from one entity to another, through all the connected parts of your stack. Tip You can learn more about how entities are related using our NerdGraph API. When relationships are not automatically detected, you can manually create them using the \"Add/edit related entities\" link in Related Entities. Important Currently, you can only manually create calls/called-by relationships between service entities. Tip To manage manual relationships, you need to have modify and delete capabilities on entity relationships. These are granted to user roles by default. Group and organize entities You can place entities into groups that reflect business-important relationships in your organization. For example, you might group all entities related to a specific team or department, or related to a specific service. Or you might group multiple hosts together to reflect their grouping in a data center. To group your entities, see: How to tag entities Create workloads (groups of related entities)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.48322,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "What is an entity in <em>New</em> <em>Relic</em>?",
        "sections": "What is an entity in <em>New</em> <em>Relic</em>?",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": ", it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. <em>One</em> <em>use</em> case for passing this attribute is to associate ingested telemetry with an entity already created by <em>New</em> <em>Relic</em>. When the entity.guid attribute is sent, the value"
      },
      "id": "603ec160e7b9d295f72a07fc"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/appendix/version-history": [
    {
      "sections": [
        "Partnership admin console",
        "Console components",
        "Partnership configuration settings",
        "Customer activity monitoring",
        "State-of-the-Partnership report",
        "Partner customer monitoring",
        "View an arbitrary customer",
        "Viewing detailed customer data"
      ],
      "title": "Partnership admin console",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "670e4d2e1db957100b23a7b8b0af6bf50cc8c996",
      "image": "https://docs.newrelic.com/static/43369c88523ebf526ae58fa5719d4efe/0abdd/crop-partnership-owner-account-settings.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partnership-admin-console/",
      "published_at": "2021-06-09T00:07:14Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Partnership Admin Console is the interface for managing your customers' accounts and integration with New Relic. To access the console, sign into the partnership owner account, and go to: https://partner-admin-console.newrelic.com/accounts/ACCOUNT_ID/admin_console/ Copy You can also access the console from the New Relic UI: Go to one.newrelic.com > (account dropdown) > Account settings. From the left menu bar, select Partnerships. one.newrelic.com > (account dropdown) > Account settings > Partnerships: Partnership owners can access the Partnership Admin Console from their account settings in the New Relic UI. Console components The Partnership Admin Console has two main components: Partnership configuration settings Customer activity monitoring If multiple partnerships are associated with the New Relic master account, the menu also includes an option to switch partnership accounts. Partnership configuration settings In developing your integration with New Relic, you must specify a number of settings. For your convenience these settings are grouped together in the partnership console, including URLs for header/footer and various redirects, SSO configuration, and keys and the ability to manipulate them. Customer activity monitoring New Relic provides you with two tools for managing your customers: State-of-the-Partnership reports and live monitoring of all deployed New Relic agents in your partnership. Both of these tools provide insight into your customers who are using New Relic. They can be used to identify up-sale opportunities or to assist your support group in proactive support. State-of-the-Partnership report The State-of-the-Partnership report provides a summary of your customers with New Relic accounts and their activities. The report is broken down by language of the agents deployed, the agent version and the language version for each account. This report is run weekly for each partner. It is available on request from your New Relic Business Development contact. This report is an excellent way to see which of your customers with New Relic accounts are in fact using the service. Partner customer monitoring The Partner customer monitoring facility provides application performance data on the New Relic enabled applications that are running on your service. This facility allows you to easily identify customers experiencing performance problems. Where the performance problems are caused by under capacity, these customers are excellent sales opportunities. Alternatively your support or services organization will find this information useful in pre-emptively identifying customer issues or as good prospects for consulting services. View an arbitrary customer To view activity of a customer that does not appear in any of the filtered views: Go to one.newrelic.com > (account dropdown) > Switch accounts > Other accounts. New Relic will list all of the reporting accounts in the partnership. You can filter or search the list. Viewing detailed customer data Under normal circumstances a partner will be able to see only the summary level data in a customer's New Relic account. Through the Partnership Admin Console, partners will be permitted to drill down to the more detailed presentation. If you want to drill down from the Partnership Admin Console, add your user (typically support@partner.com or something similar) to the account. Typically this will be done at account creation. Avoid provisioning this user as the account Owner.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.19933,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> admin console",
        "sections": "<em>Partnership</em> admin console",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "The <em>Partnership</em> Admin Console is the interface for managing your customers&#x27; accounts and <em>integration</em> with <em>New</em> <em>Relic</em>. To access the console, sign into the <em>partnership</em> owner account, and go to: https:&#x2F;&#x2F;<em>partner</em>-admin-console.newrelic.com&#x2F;accounts&#x2F;ACCOUNT_ID&#x2F;admin_console&#x2F; Copy You can also access"
      },
      "id": "603ed3e3196a6735baa83dad"
    },
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-06-09T00:08:02Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.19933,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "This document is for <em>New</em> <em>Relic</em> partners. After you complete your <em>partnership</em> <em>integration</em>, you will be introduced to your technical contacts at <em>New</em> <em>Relic</em>. Use these channels for non-urgent escalations. Tip If you are not a <em>New</em> <em>Relic</em> <em>partner</em>, see <em>New</em> <em>Relic</em>&#x27;s resources for finding help or filing"
      },
      "id": "60450ecf28ccbc45632c6095"
    },
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-06-08T19:57:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.08871,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> products, pricing, and billing",
        "sections": "Customized <em>partnership</em> pricing",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " by <em>partnership</em>--the actual pricing model used is subject to the contractual terms of the <em>partner</em>&#x27;s agreement with <em>New</em> <em>Relic</em>. Contact your Alliance &amp; Channels representative at <em>New</em> <em>Relic</em> to learn more. <em>Partnership</em> billing options <em>New</em> <em>Relic</em> supports the following billing options for <em>partnerships</em>. All"
      },
      "id": "603ece55e7b9d254192a080c"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/getting-started/co-branding-new-relic-partners": [
    {
      "sections": [
        "Partnership admin console",
        "Console components",
        "Partnership configuration settings",
        "Customer activity monitoring",
        "State-of-the-Partnership report",
        "Partner customer monitoring",
        "View an arbitrary customer",
        "Viewing detailed customer data"
      ],
      "title": "Partnership admin console",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "670e4d2e1db957100b23a7b8b0af6bf50cc8c996",
      "image": "https://docs.newrelic.com/static/43369c88523ebf526ae58fa5719d4efe/0abdd/crop-partnership-owner-account-settings.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partnership-admin-console/",
      "published_at": "2021-06-09T00:07:14Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Partnership Admin Console is the interface for managing your customers' accounts and integration with New Relic. To access the console, sign into the partnership owner account, and go to: https://partner-admin-console.newrelic.com/accounts/ACCOUNT_ID/admin_console/ Copy You can also access the console from the New Relic UI: Go to one.newrelic.com > (account dropdown) > Account settings. From the left menu bar, select Partnerships. one.newrelic.com > (account dropdown) > Account settings > Partnerships: Partnership owners can access the Partnership Admin Console from their account settings in the New Relic UI. Console components The Partnership Admin Console has two main components: Partnership configuration settings Customer activity monitoring If multiple partnerships are associated with the New Relic master account, the menu also includes an option to switch partnership accounts. Partnership configuration settings In developing your integration with New Relic, you must specify a number of settings. For your convenience these settings are grouped together in the partnership console, including URLs for header/footer and various redirects, SSO configuration, and keys and the ability to manipulate them. Customer activity monitoring New Relic provides you with two tools for managing your customers: State-of-the-Partnership reports and live monitoring of all deployed New Relic agents in your partnership. Both of these tools provide insight into your customers who are using New Relic. They can be used to identify up-sale opportunities or to assist your support group in proactive support. State-of-the-Partnership report The State-of-the-Partnership report provides a summary of your customers with New Relic accounts and their activities. The report is broken down by language of the agents deployed, the agent version and the language version for each account. This report is run weekly for each partner. It is available on request from your New Relic Business Development contact. This report is an excellent way to see which of your customers with New Relic accounts are in fact using the service. Partner customer monitoring The Partner customer monitoring facility provides application performance data on the New Relic enabled applications that are running on your service. This facility allows you to easily identify customers experiencing performance problems. Where the performance problems are caused by under capacity, these customers are excellent sales opportunities. Alternatively your support or services organization will find this information useful in pre-emptively identifying customer issues or as good prospects for consulting services. View an arbitrary customer To view activity of a customer that does not appear in any of the filtered views: Go to one.newrelic.com > (account dropdown) > Switch accounts > Other accounts. New Relic will list all of the reporting accounts in the partnership. You can filter or search the list. Viewing detailed customer data Under normal circumstances a partner will be able to see only the summary level data in a customer's New Relic account. Through the Partnership Admin Console, partners will be permitted to drill down to the more detailed presentation. If you want to drill down from the Partnership Admin Console, add your user (typically support@partner.com or something similar) to the account. Typically this will be done at account creation. Avoid provisioning this user as the account Owner.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.6398,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> admin console",
        "sections": "<em>Partnership</em> admin console",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "The <em>Partnership</em> Admin Console is the interface for managing your customers&#x27; accounts and <em>integration</em> with <em>New</em> <em>Relic</em>. To access the console, sign into the <em>partnership</em> owner account, and go to: https:&#x2F;&#x2F;<em>partner</em>-admin-console.newrelic.com&#x2F;accounts&#x2F;ACCOUNT_ID&#x2F;admin_console&#x2F; Copy You can also access"
      },
      "id": "603ed3e3196a6735baa83dad"
    },
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-06-09T00:08:02Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.6398,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "This document is for <em>New</em> <em>Relic</em> partners. After you complete your <em>partnership</em> <em>integration</em>, you will be introduced to your technical contacts at <em>New</em> <em>Relic</em>. Use these channels for non-urgent escalations. Tip If you are not a <em>New</em> <em>Relic</em> <em>partner</em>, see <em>New</em> <em>Relic</em>&#x27;s resources for finding help or filing"
      },
      "id": "60450ecf28ccbc45632c6095"
    },
    {
      "sections": [
        "Partner integration requirements",
        "Process",
        "Accelerated process",
        "Typical component tasks"
      ],
      "title": "Partner integration requirements",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "5df8f0dc281afba95823d8896a55ceec56cd4a8a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partner-integration-requirements/",
      "published_at": "2021-06-08T22:48:08Z",
      "updated_at": "2021-03-16T10:06:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Thank you for your interest in partnering with New Relic. We look forward to providing your customers with powerful, easy-to-use application performance monitoring. This guide explains how to bundle New Relic services with yours. An effective bundling includes technical tasks (such as agent provisioning and console integration) as well as marketing and promotional activities (such as branding and awareness generation). Process To achieve a full and productive integration with New Relic you will need to: What How Integrate your user console with New Relic. Update your user portal to automatically create New Relic accounts and make them available to your customers in a convenient, compelling, co-branded way. Provision the New Relic agent. For your customers to benefit from New Relic, they will need our monitoring agent installed into their apps. Update your provisioning systems to install New Relic automatically. Generate awareness. Integrate and deploy New Relic facilities for displaying sample application reporting data to customers. Establish support and sustaining engineering processes. Agree on a process for support coordination and refresh of New Relic software. Set up communication. Tip: We've found that partners typically complete integration with one to two developer weeks of effort. For more information, see Typical component tasks. Accelerated process Where circumstances and/or proximity permit, we have found that bringing your developers on site to New Relic's San Francisco offices can dramatically accelerate development of your integration. At New Relic's offices your developers will work in close proximity to the engineering team that is responsible for the development and maintenance of New Relic's APIs. Development issues that would under other circumstances require hours or days to resolve can be addressed in minutes. Typically development time for an integration can be cut in half. Should you elect to pursue this option, please talk to your New Relic technical contact. Typical component tasks The checklist for creating a successful integration will vary with each partner and specific circumstances. As a general guide, here's a typical outline of the components and rough sequencing of tasks involved in creating an integration with New Relic. Done Component tasks of a typical partner integration Finalize business relationship. Have introductory conference call or meeting for technical team. Review partner integration documentation and other integration materials. Review roles and responsibilities. Develop integration plan with timeline. Plan account and agent provisioning. Create and deploy account provisioning system. Determine which agents and how to provision. Create and deploy webpages to support provisioning and deployment. Set up test partnership and accounts on New Relic's staging server. Plan for co-branding. Create and deploy CSS. Create and deploy header and footer. Create branded URL (cname). Drive adoption through creating awareness. Add the New Relic widget to the user console. Use data API integration. Test integration on staging. Set up partnership on New Relic's production server. Modify integration to point to production server. Test integration on production. Establish a support plan. Designate support contacts. Introduce New Relic Support to your technical support team. Create sustaining engineering plans. Get test account. Prepare for launch. Walk through integration review and signoff (conference call). Document final signup flow. Coordinate on launch co-marketing and PR. Go live!",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.51955,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>integration</em> requirements",
        "sections": "<em>Partner</em> <em>integration</em> requirements",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " will vary with each <em>partner</em> and specific circumstances. As a general <em>guide</em>, here&#x27;s a typical outline of the components and rough sequencing of tasks involved in creating an <em>integration</em> with <em>New</em> <em>Relic</em>. Done Component tasks of a typical <em>partner</em> <em>integration</em> Finalize business relationship. Have"
      },
      "id": "603ed3e728ccbcba09eba7b7"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/getting-started/partner-integration-requirements": [
    {
      "sections": [
        "Partnership admin console",
        "Console components",
        "Partnership configuration settings",
        "Customer activity monitoring",
        "State-of-the-Partnership report",
        "Partner customer monitoring",
        "View an arbitrary customer",
        "Viewing detailed customer data"
      ],
      "title": "Partnership admin console",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "670e4d2e1db957100b23a7b8b0af6bf50cc8c996",
      "image": "https://docs.newrelic.com/static/43369c88523ebf526ae58fa5719d4efe/0abdd/crop-partnership-owner-account-settings.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partnership-admin-console/",
      "published_at": "2021-06-09T00:07:14Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Partnership Admin Console is the interface for managing your customers' accounts and integration with New Relic. To access the console, sign into the partnership owner account, and go to: https://partner-admin-console.newrelic.com/accounts/ACCOUNT_ID/admin_console/ Copy You can also access the console from the New Relic UI: Go to one.newrelic.com > (account dropdown) > Account settings. From the left menu bar, select Partnerships. one.newrelic.com > (account dropdown) > Account settings > Partnerships: Partnership owners can access the Partnership Admin Console from their account settings in the New Relic UI. Console components The Partnership Admin Console has two main components: Partnership configuration settings Customer activity monitoring If multiple partnerships are associated with the New Relic master account, the menu also includes an option to switch partnership accounts. Partnership configuration settings In developing your integration with New Relic, you must specify a number of settings. For your convenience these settings are grouped together in the partnership console, including URLs for header/footer and various redirects, SSO configuration, and keys and the ability to manipulate them. Customer activity monitoring New Relic provides you with two tools for managing your customers: State-of-the-Partnership reports and live monitoring of all deployed New Relic agents in your partnership. Both of these tools provide insight into your customers who are using New Relic. They can be used to identify up-sale opportunities or to assist your support group in proactive support. State-of-the-Partnership report The State-of-the-Partnership report provides a summary of your customers with New Relic accounts and their activities. The report is broken down by language of the agents deployed, the agent version and the language version for each account. This report is run weekly for each partner. It is available on request from your New Relic Business Development contact. This report is an excellent way to see which of your customers with New Relic accounts are in fact using the service. Partner customer monitoring The Partner customer monitoring facility provides application performance data on the New Relic enabled applications that are running on your service. This facility allows you to easily identify customers experiencing performance problems. Where the performance problems are caused by under capacity, these customers are excellent sales opportunities. Alternatively your support or services organization will find this information useful in pre-emptively identifying customer issues or as good prospects for consulting services. View an arbitrary customer To view activity of a customer that does not appear in any of the filtered views: Go to one.newrelic.com > (account dropdown) > Switch accounts > Other accounts. New Relic will list all of the reporting accounts in the partnership. You can filter or search the list. Viewing detailed customer data Under normal circumstances a partner will be able to see only the summary level data in a customer's New Relic account. Through the Partnership Admin Console, partners will be permitted to drill down to the more detailed presentation. If you want to drill down from the Partnership Admin Console, add your user (typically support@partner.com or something similar) to the account. Typically this will be done at account creation. Avoid provisioning this user as the account Owner.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.63979,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> admin console",
        "sections": "<em>Partnership</em> admin console",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "The <em>Partnership</em> Admin Console is the interface for managing your customers&#x27; accounts and <em>integration</em> with <em>New</em> <em>Relic</em>. To access the console, sign into the <em>partnership</em> owner account, and go to: https:&#x2F;&#x2F;<em>partner</em>-admin-console.newrelic.com&#x2F;accounts&#x2F;ACCOUNT_ID&#x2F;admin_console&#x2F; Copy You can also access"
      },
      "id": "603ed3e3196a6735baa83dad"
    },
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-06-09T00:08:02Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.63979,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "This document is for <em>New</em> <em>Relic</em> partners. After you complete your <em>partnership</em> <em>integration</em>, you will be introduced to your technical contacts at <em>New</em> <em>Relic</em>. Use these channels for non-urgent escalations. Tip If you are not a <em>New</em> <em>Relic</em> <em>partner</em>, see <em>New</em> <em>Relic</em>&#x27;s resources for finding help or filing"
      },
      "id": "60450ecf28ccbc45632c6095"
    },
    {
      "sections": [
        "Co-branding for New Relic partners",
        "Co-branding example",
        "Headers and footers",
        "Tip",
        "Layouts and styles",
        "Sub-domains"
      ],
      "title": "Co-branding for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "62a555ec5ade26eda9c5f40b96ab25873c89da1a",
      "image": "https://docs.newrelic.com/static/9bc57293646e4fe206ffe0a20ce06406/3996e/screen-co-branding-heroku.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/co-branding-new-relic-partners/",
      "published_at": "2021-06-08T19:22:32Z",
      "updated_at": "2021-03-16T10:06:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Partners who bundle New Relic into their console can \"skin\" New Relic with their own look and feel, including customized layouts, menus, and sub-domains. Co-branding example This example is from Heroku's New Relic integration. In this case Heroku has chosen to use a header only. New Relic partner co-branding example: Here is an example of co-branding with New Relic by using a header. Headers and footers To implement headers and footers: Create a header and/or footer page, consisting of content enclosed in < div> tags. Make sure the pages do not import any CSS or contain any inline CSS. Take any CSS needed for the header and footer, and make it available in a separate CSS file. For example, prepend a custom string such as yourcompany_ to the various style names, to avoid overriding New Relic's standard style definitions. Post the three files to publicly accessible locations hosted by the partner. Use https so your customers do not see any mixed content warnings. For example: https://yourcompany.com/newrelic_header.htm https://yourcompany.com/newrelic_footer.htm https://yourcompany.com/newrelic_styles.css Copy Enter the URLs for the header, footer, and CSS page locations into the appropriate fields in the New Relic Partnership console. Tip To view the headers, log in to one of the accounts in the partnership. Layouts and styles Header and footer layouts and styles are loaded and cached on New Relic's collector servers for insertion into each page output. Updates made to the layout on the partner's site are automatically refreshed hourly. Customized links to the partner's website may be added to the layout. If single sign-on is enabled, the partner may inject customer-specific information into the New Relic user session for use by the layout. For more information, see Single sign on and access control. Sub-domains Partners can optionally display a custom subdomain; for example, yourcompany.newrelic.com, to customers accessing New Relic accounts. To arrange this, contact New Relic's Business Enablement team.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.51955,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Co-branding for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Co-branding for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Partners who bundle <em>New</em> <em>Relic</em> into their console can &quot;skin&quot; <em>New</em> <em>Relic</em> with their own look and feel, including customized layouts, menus, and sub-domains. Co-branding example This example is from Heroku&#x27;s <em>New</em> <em>Relic</em> <em>integration</em>. In this case Heroku has chosen to use a header only. <em>New</em> <em>Relic</em> <em>partner</em>"
      },
      "id": "603ec8b428ccbc9be1eba7a8"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/getting-started/partners-contact-new-relic": [
    {
      "sections": [
        "Partnership admin console",
        "Console components",
        "Partnership configuration settings",
        "Customer activity monitoring",
        "State-of-the-Partnership report",
        "Partner customer monitoring",
        "View an arbitrary customer",
        "Viewing detailed customer data"
      ],
      "title": "Partnership admin console",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "670e4d2e1db957100b23a7b8b0af6bf50cc8c996",
      "image": "https://docs.newrelic.com/static/43369c88523ebf526ae58fa5719d4efe/0abdd/crop-partnership-owner-account-settings.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partnership-admin-console/",
      "published_at": "2021-06-09T00:07:14Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Partnership Admin Console is the interface for managing your customers' accounts and integration with New Relic. To access the console, sign into the partnership owner account, and go to: https://partner-admin-console.newrelic.com/accounts/ACCOUNT_ID/admin_console/ Copy You can also access the console from the New Relic UI: Go to one.newrelic.com > (account dropdown) > Account settings. From the left menu bar, select Partnerships. one.newrelic.com > (account dropdown) > Account settings > Partnerships: Partnership owners can access the Partnership Admin Console from their account settings in the New Relic UI. Console components The Partnership Admin Console has two main components: Partnership configuration settings Customer activity monitoring If multiple partnerships are associated with the New Relic master account, the menu also includes an option to switch partnership accounts. Partnership configuration settings In developing your integration with New Relic, you must specify a number of settings. For your convenience these settings are grouped together in the partnership console, including URLs for header/footer and various redirects, SSO configuration, and keys and the ability to manipulate them. Customer activity monitoring New Relic provides you with two tools for managing your customers: State-of-the-Partnership reports and live monitoring of all deployed New Relic agents in your partnership. Both of these tools provide insight into your customers who are using New Relic. They can be used to identify up-sale opportunities or to assist your support group in proactive support. State-of-the-Partnership report The State-of-the-Partnership report provides a summary of your customers with New Relic accounts and their activities. The report is broken down by language of the agents deployed, the agent version and the language version for each account. This report is run weekly for each partner. It is available on request from your New Relic Business Development contact. This report is an excellent way to see which of your customers with New Relic accounts are in fact using the service. Partner customer monitoring The Partner customer monitoring facility provides application performance data on the New Relic enabled applications that are running on your service. This facility allows you to easily identify customers experiencing performance problems. Where the performance problems are caused by under capacity, these customers are excellent sales opportunities. Alternatively your support or services organization will find this information useful in pre-emptively identifying customer issues or as good prospects for consulting services. View an arbitrary customer To view activity of a customer that does not appear in any of the filtered views: Go to one.newrelic.com > (account dropdown) > Switch accounts > Other accounts. New Relic will list all of the reporting accounts in the partnership. You can filter or search the list. Viewing detailed customer data Under normal circumstances a partner will be able to see only the summary level data in a customer's New Relic account. Through the Partnership Admin Console, partners will be permitted to drill down to the more detailed presentation. If you want to drill down from the Partnership Admin Console, add your user (typically support@partner.com or something similar) to the account. Typically this will be done at account creation. Avoid provisioning this user as the account Owner.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.63979,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> admin console",
        "sections": "<em>Partnership</em> admin console",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "The <em>Partnership</em> Admin Console is the interface for managing your customers&#x27; accounts and <em>integration</em> with <em>New</em> <em>Relic</em>. To access the console, sign into the <em>partnership</em> owner account, and go to: https:&#x2F;&#x2F;<em>partner</em>-admin-console.newrelic.com&#x2F;accounts&#x2F;ACCOUNT_ID&#x2F;admin_console&#x2F; Copy You can also access"
      },
      "id": "603ed3e3196a6735baa83dad"
    },
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-06-09T00:08:02Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.63979,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "This document is for <em>New</em> <em>Relic</em> partners. After you complete your <em>partnership</em> <em>integration</em>, you will be introduced to your technical contacts at <em>New</em> <em>Relic</em>. Use these channels for non-urgent escalations. Tip If you are not a <em>New</em> <em>Relic</em> <em>partner</em>, see <em>New</em> <em>Relic</em>&#x27;s resources for finding help or filing"
      },
      "id": "60450ecf28ccbc45632c6095"
    },
    {
      "sections": [
        "Partner integration requirements",
        "Process",
        "Accelerated process",
        "Typical component tasks"
      ],
      "title": "Partner integration requirements",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "5df8f0dc281afba95823d8896a55ceec56cd4a8a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partner-integration-requirements/",
      "published_at": "2021-06-08T22:48:08Z",
      "updated_at": "2021-03-16T10:06:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Thank you for your interest in partnering with New Relic. We look forward to providing your customers with powerful, easy-to-use application performance monitoring. This guide explains how to bundle New Relic services with yours. An effective bundling includes technical tasks (such as agent provisioning and console integration) as well as marketing and promotional activities (such as branding and awareness generation). Process To achieve a full and productive integration with New Relic you will need to: What How Integrate your user console with New Relic. Update your user portal to automatically create New Relic accounts and make them available to your customers in a convenient, compelling, co-branded way. Provision the New Relic agent. For your customers to benefit from New Relic, they will need our monitoring agent installed into their apps. Update your provisioning systems to install New Relic automatically. Generate awareness. Integrate and deploy New Relic facilities for displaying sample application reporting data to customers. Establish support and sustaining engineering processes. Agree on a process for support coordination and refresh of New Relic software. Set up communication. Tip: We've found that partners typically complete integration with one to two developer weeks of effort. For more information, see Typical component tasks. Accelerated process Where circumstances and/or proximity permit, we have found that bringing your developers on site to New Relic's San Francisco offices can dramatically accelerate development of your integration. At New Relic's offices your developers will work in close proximity to the engineering team that is responsible for the development and maintenance of New Relic's APIs. Development issues that would under other circumstances require hours or days to resolve can be addressed in minutes. Typically development time for an integration can be cut in half. Should you elect to pursue this option, please talk to your New Relic technical contact. Typical component tasks The checklist for creating a successful integration will vary with each partner and specific circumstances. As a general guide, here's a typical outline of the components and rough sequencing of tasks involved in creating an integration with New Relic. Done Component tasks of a typical partner integration Finalize business relationship. Have introductory conference call or meeting for technical team. Review partner integration documentation and other integration materials. Review roles and responsibilities. Develop integration plan with timeline. Plan account and agent provisioning. Create and deploy account provisioning system. Determine which agents and how to provision. Create and deploy webpages to support provisioning and deployment. Set up test partnership and accounts on New Relic's staging server. Plan for co-branding. Create and deploy CSS. Create and deploy header and footer. Create branded URL (cname). Drive adoption through creating awareness. Add the New Relic widget to the user console. Use data API integration. Test integration on staging. Set up partnership on New Relic's production server. Modify integration to point to production server. Test integration on production. Establish a support plan. Designate support contacts. Introduce New Relic Support to your technical support team. Create sustaining engineering plans. Get test account. Prepare for launch. Walk through integration review and signoff (conference call). Document final signup flow. Coordinate on launch co-marketing and PR. Go live!",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.51955,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>integration</em> requirements",
        "sections": "<em>Partner</em> <em>integration</em> requirements",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " will vary with each <em>partner</em> and specific circumstances. As a general <em>guide</em>, here&#x27;s a typical outline of the components and rough sequencing of tasks involved in creating an <em>integration</em> with <em>New</em> <em>Relic</em>. Done Component tasks of a typical <em>partner</em> <em>integration</em> Finalize business relationship. Have"
      },
      "id": "603ed3e728ccbcba09eba7b7"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/getting-started/partnership-admin-console": [
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-06-09T00:08:02Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.63977,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "This document is for <em>New</em> <em>Relic</em> partners. After you complete your <em>partnership</em> <em>integration</em>, you will be introduced to your technical contacts at <em>New</em> <em>Relic</em>. Use these channels for non-urgent escalations. Tip If you are not a <em>New</em> <em>Relic</em> <em>partner</em>, see <em>New</em> <em>Relic</em>&#x27;s resources for finding help or filing"
      },
      "id": "60450ecf28ccbc45632c6095"
    },
    {
      "sections": [
        "Partner integration requirements",
        "Process",
        "Accelerated process",
        "Typical component tasks"
      ],
      "title": "Partner integration requirements",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "5df8f0dc281afba95823d8896a55ceec56cd4a8a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partner-integration-requirements/",
      "published_at": "2021-06-08T22:48:08Z",
      "updated_at": "2021-03-16T10:06:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Thank you for your interest in partnering with New Relic. We look forward to providing your customers with powerful, easy-to-use application performance monitoring. This guide explains how to bundle New Relic services with yours. An effective bundling includes technical tasks (such as agent provisioning and console integration) as well as marketing and promotional activities (such as branding and awareness generation). Process To achieve a full and productive integration with New Relic you will need to: What How Integrate your user console with New Relic. Update your user portal to automatically create New Relic accounts and make them available to your customers in a convenient, compelling, co-branded way. Provision the New Relic agent. For your customers to benefit from New Relic, they will need our monitoring agent installed into their apps. Update your provisioning systems to install New Relic automatically. Generate awareness. Integrate and deploy New Relic facilities for displaying sample application reporting data to customers. Establish support and sustaining engineering processes. Agree on a process for support coordination and refresh of New Relic software. Set up communication. Tip: We've found that partners typically complete integration with one to two developer weeks of effort. For more information, see Typical component tasks. Accelerated process Where circumstances and/or proximity permit, we have found that bringing your developers on site to New Relic's San Francisco offices can dramatically accelerate development of your integration. At New Relic's offices your developers will work in close proximity to the engineering team that is responsible for the development and maintenance of New Relic's APIs. Development issues that would under other circumstances require hours or days to resolve can be addressed in minutes. Typically development time for an integration can be cut in half. Should you elect to pursue this option, please talk to your New Relic technical contact. Typical component tasks The checklist for creating a successful integration will vary with each partner and specific circumstances. As a general guide, here's a typical outline of the components and rough sequencing of tasks involved in creating an integration with New Relic. Done Component tasks of a typical partner integration Finalize business relationship. Have introductory conference call or meeting for technical team. Review partner integration documentation and other integration materials. Review roles and responsibilities. Develop integration plan with timeline. Plan account and agent provisioning. Create and deploy account provisioning system. Determine which agents and how to provision. Create and deploy webpages to support provisioning and deployment. Set up test partnership and accounts on New Relic's staging server. Plan for co-branding. Create and deploy CSS. Create and deploy header and footer. Create branded URL (cname). Drive adoption through creating awareness. Add the New Relic widget to the user console. Use data API integration. Test integration on staging. Set up partnership on New Relic's production server. Modify integration to point to production server. Test integration on production. Establish a support plan. Designate support contacts. Introduce New Relic Support to your technical support team. Create sustaining engineering plans. Get test account. Prepare for launch. Walk through integration review and signoff (conference call). Document final signup flow. Coordinate on launch co-marketing and PR. Go live!",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.51955,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>integration</em> requirements",
        "sections": "<em>Partner</em> <em>integration</em> requirements",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " will vary with each <em>partner</em> and specific circumstances. As a general <em>guide</em>, here&#x27;s a typical outline of the components and rough sequencing of tasks involved in creating an <em>integration</em> with <em>New</em> <em>Relic</em>. Done Component tasks of a typical <em>partner</em> <em>integration</em> Finalize business relationship. Have"
      },
      "id": "603ed3e728ccbcba09eba7b7"
    },
    {
      "sections": [
        "Co-branding for New Relic partners",
        "Co-branding example",
        "Headers and footers",
        "Tip",
        "Layouts and styles",
        "Sub-domains"
      ],
      "title": "Co-branding for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "62a555ec5ade26eda9c5f40b96ab25873c89da1a",
      "image": "https://docs.newrelic.com/static/9bc57293646e4fe206ffe0a20ce06406/3996e/screen-co-branding-heroku.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/co-branding-new-relic-partners/",
      "published_at": "2021-06-08T19:22:32Z",
      "updated_at": "2021-03-16T10:06:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Partners who bundle New Relic into their console can \"skin\" New Relic with their own look and feel, including customized layouts, menus, and sub-domains. Co-branding example This example is from Heroku's New Relic integration. In this case Heroku has chosen to use a header only. New Relic partner co-branding example: Here is an example of co-branding with New Relic by using a header. Headers and footers To implement headers and footers: Create a header and/or footer page, consisting of content enclosed in < div> tags. Make sure the pages do not import any CSS or contain any inline CSS. Take any CSS needed for the header and footer, and make it available in a separate CSS file. For example, prepend a custom string such as yourcompany_ to the various style names, to avoid overriding New Relic's standard style definitions. Post the three files to publicly accessible locations hosted by the partner. Use https so your customers do not see any mixed content warnings. For example: https://yourcompany.com/newrelic_header.htm https://yourcompany.com/newrelic_footer.htm https://yourcompany.com/newrelic_styles.css Copy Enter the URLs for the header, footer, and CSS page locations into the appropriate fields in the New Relic Partnership console. Tip To view the headers, log in to one of the accounts in the partnership. Layouts and styles Header and footer layouts and styles are loaded and cached on New Relic's collector servers for insertion into each page output. Updates made to the layout on the partner's site are automatically refreshed hourly. Customized links to the partner's website may be added to the layout. If single sign-on is enabled, the partner may inject customer-specific information into the New Relic user session for use by the layout. For more information, see Single sign on and access control. Sub-domains Partners can optionally display a custom subdomain; for example, yourcompany.newrelic.com, to customers accessing New Relic accounts. To arrange this, contact New Relic's Business Enablement team.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.51955,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Co-branding for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Co-branding for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Partners who bundle <em>New</em> <em>Relic</em> into their console can &quot;skin&quot; <em>New</em> <em>Relic</em> with their own look and feel, including customized layouts, menus, and sub-domains. Co-branding example This example is from Heroku&#x27;s <em>New</em> <em>Relic</em> <em>integration</em>. In this case Heroku has chosen to use a header only. <em>New</em> <em>Relic</em> <em>partner</em>"
      },
      "id": "603ec8b428ccbc9be1eba7a8"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners": [
    {
      "sections": [
        "Partnership admin console",
        "Console components",
        "Partnership configuration settings",
        "Customer activity monitoring",
        "State-of-the-Partnership report",
        "Partner customer monitoring",
        "View an arbitrary customer",
        "Viewing detailed customer data"
      ],
      "title": "Partnership admin console",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "670e4d2e1db957100b23a7b8b0af6bf50cc8c996",
      "image": "https://docs.newrelic.com/static/43369c88523ebf526ae58fa5719d4efe/0abdd/crop-partnership-owner-account-settings.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partnership-admin-console/",
      "published_at": "2021-06-09T00:07:14Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Partnership Admin Console is the interface for managing your customers' accounts and integration with New Relic. To access the console, sign into the partnership owner account, and go to: https://partner-admin-console.newrelic.com/accounts/ACCOUNT_ID/admin_console/ Copy You can also access the console from the New Relic UI: Go to one.newrelic.com > (account dropdown) > Account settings. From the left menu bar, select Partnerships. one.newrelic.com > (account dropdown) > Account settings > Partnerships: Partnership owners can access the Partnership Admin Console from their account settings in the New Relic UI. Console components The Partnership Admin Console has two main components: Partnership configuration settings Customer activity monitoring If multiple partnerships are associated with the New Relic master account, the menu also includes an option to switch partnership accounts. Partnership configuration settings In developing your integration with New Relic, you must specify a number of settings. For your convenience these settings are grouped together in the partnership console, including URLs for header/footer and various redirects, SSO configuration, and keys and the ability to manipulate them. Customer activity monitoring New Relic provides you with two tools for managing your customers: State-of-the-Partnership reports and live monitoring of all deployed New Relic agents in your partnership. Both of these tools provide insight into your customers who are using New Relic. They can be used to identify up-sale opportunities or to assist your support group in proactive support. State-of-the-Partnership report The State-of-the-Partnership report provides a summary of your customers with New Relic accounts and their activities. The report is broken down by language of the agents deployed, the agent version and the language version for each account. This report is run weekly for each partner. It is available on request from your New Relic Business Development contact. This report is an excellent way to see which of your customers with New Relic accounts are in fact using the service. Partner customer monitoring The Partner customer monitoring facility provides application performance data on the New Relic enabled applications that are running on your service. This facility allows you to easily identify customers experiencing performance problems. Where the performance problems are caused by under capacity, these customers are excellent sales opportunities. Alternatively your support or services organization will find this information useful in pre-emptively identifying customer issues or as good prospects for consulting services. View an arbitrary customer To view activity of a customer that does not appear in any of the filtered views: Go to one.newrelic.com > (account dropdown) > Switch accounts > Other accounts. New Relic will list all of the reporting accounts in the partnership. You can filter or search the list. Viewing detailed customer data Under normal circumstances a partner will be able to see only the summary level data in a customer's New Relic account. Through the Partnership Admin Console, partners will be permitted to drill down to the more detailed presentation. If you want to drill down from the Partnership Admin Console, add your user (typically support@partner.com or something similar) to the account. Typically this will be done at account creation. Avoid provisioning this user as the account Owner.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.63977,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> admin console",
        "sections": "<em>Partnership</em> admin console",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "The <em>Partnership</em> Admin Console is the interface for managing your customers&#x27; accounts and <em>integration</em> with <em>New</em> <em>Relic</em>. To access the console, sign into the <em>partnership</em> owner account, and go to: https:&#x2F;&#x2F;<em>partner</em>-admin-console.newrelic.com&#x2F;accounts&#x2F;ACCOUNT_ID&#x2F;admin_console&#x2F; Copy You can also access"
      },
      "id": "603ed3e3196a6735baa83dad"
    },
    {
      "sections": [
        "Partner integration requirements",
        "Process",
        "Accelerated process",
        "Typical component tasks"
      ],
      "title": "Partner integration requirements",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "5df8f0dc281afba95823d8896a55ceec56cd4a8a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partner-integration-requirements/",
      "published_at": "2021-06-08T22:48:08Z",
      "updated_at": "2021-03-16T10:06:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Thank you for your interest in partnering with New Relic. We look forward to providing your customers with powerful, easy-to-use application performance monitoring. This guide explains how to bundle New Relic services with yours. An effective bundling includes technical tasks (such as agent provisioning and console integration) as well as marketing and promotional activities (such as branding and awareness generation). Process To achieve a full and productive integration with New Relic you will need to: What How Integrate your user console with New Relic. Update your user portal to automatically create New Relic accounts and make them available to your customers in a convenient, compelling, co-branded way. Provision the New Relic agent. For your customers to benefit from New Relic, they will need our monitoring agent installed into their apps. Update your provisioning systems to install New Relic automatically. Generate awareness. Integrate and deploy New Relic facilities for displaying sample application reporting data to customers. Establish support and sustaining engineering processes. Agree on a process for support coordination and refresh of New Relic software. Set up communication. Tip: We've found that partners typically complete integration with one to two developer weeks of effort. For more information, see Typical component tasks. Accelerated process Where circumstances and/or proximity permit, we have found that bringing your developers on site to New Relic's San Francisco offices can dramatically accelerate development of your integration. At New Relic's offices your developers will work in close proximity to the engineering team that is responsible for the development and maintenance of New Relic's APIs. Development issues that would under other circumstances require hours or days to resolve can be addressed in minutes. Typically development time for an integration can be cut in half. Should you elect to pursue this option, please talk to your New Relic technical contact. Typical component tasks The checklist for creating a successful integration will vary with each partner and specific circumstances. As a general guide, here's a typical outline of the components and rough sequencing of tasks involved in creating an integration with New Relic. Done Component tasks of a typical partner integration Finalize business relationship. Have introductory conference call or meeting for technical team. Review partner integration documentation and other integration materials. Review roles and responsibilities. Develop integration plan with timeline. Plan account and agent provisioning. Create and deploy account provisioning system. Determine which agents and how to provision. Create and deploy webpages to support provisioning and deployment. Set up test partnership and accounts on New Relic's staging server. Plan for co-branding. Create and deploy CSS. Create and deploy header and footer. Create branded URL (cname). Drive adoption through creating awareness. Add the New Relic widget to the user console. Use data API integration. Test integration on staging. Set up partnership on New Relic's production server. Modify integration to point to production server. Test integration on production. Establish a support plan. Designate support contacts. Introduce New Relic Support to your technical support team. Create sustaining engineering plans. Get test account. Prepare for launch. Walk through integration review and signoff (conference call). Document final signup flow. Coordinate on launch co-marketing and PR. Go live!",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.51955,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>integration</em> requirements",
        "sections": "<em>Partner</em> <em>integration</em> requirements",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " will vary with each <em>partner</em> and specific circumstances. As a general <em>guide</em>, here&#x27;s a typical outline of the components and rough sequencing of tasks involved in creating an <em>integration</em> with <em>New</em> <em>Relic</em>. Done Component tasks of a typical <em>partner</em> <em>integration</em> Finalize business relationship. Have"
      },
      "id": "603ed3e728ccbcba09eba7b7"
    },
    {
      "sections": [
        "Co-branding for New Relic partners",
        "Co-branding example",
        "Headers and footers",
        "Tip",
        "Layouts and styles",
        "Sub-domains"
      ],
      "title": "Co-branding for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "62a555ec5ade26eda9c5f40b96ab25873c89da1a",
      "image": "https://docs.newrelic.com/static/9bc57293646e4fe206ffe0a20ce06406/3996e/screen-co-branding-heroku.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/co-branding-new-relic-partners/",
      "published_at": "2021-06-08T19:22:32Z",
      "updated_at": "2021-03-16T10:06:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Partners who bundle New Relic into their console can \"skin\" New Relic with their own look and feel, including customized layouts, menus, and sub-domains. Co-branding example This example is from Heroku's New Relic integration. In this case Heroku has chosen to use a header only. New Relic partner co-branding example: Here is an example of co-branding with New Relic by using a header. Headers and footers To implement headers and footers: Create a header and/or footer page, consisting of content enclosed in < div> tags. Make sure the pages do not import any CSS or contain any inline CSS. Take any CSS needed for the header and footer, and make it available in a separate CSS file. For example, prepend a custom string such as yourcompany_ to the various style names, to avoid overriding New Relic's standard style definitions. Post the three files to publicly accessible locations hosted by the partner. Use https so your customers do not see any mixed content warnings. For example: https://yourcompany.com/newrelic_header.htm https://yourcompany.com/newrelic_footer.htm https://yourcompany.com/newrelic_styles.css Copy Enter the URLs for the header, footer, and CSS page locations into the appropriate fields in the New Relic Partnership console. Tip To view the headers, log in to one of the accounts in the partnership. Layouts and styles Header and footer layouts and styles are loaded and cached on New Relic's collector servers for insertion into each page output. Updates made to the layout on the partner's site are automatically refreshed hourly. Customized links to the partner's website may be added to the layout. If single sign-on is enabled, the partner may inject customer-specific information into the New Relic user session for use by the layout. For more information, see Single sign on and access control. Sub-domains Partners can optionally display a custom subdomain; for example, yourcompany.newrelic.com, to customers accessing New Relic accounts. To arrange this, contact New Relic's Business Enablement team.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.51955,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Co-branding for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Co-branding for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Partners who bundle <em>New</em> <em>Relic</em> into their console can &quot;skin&quot; <em>New</em> <em>Relic</em> with their own look and feel, including customized layouts, menus, and sub-domains. Co-branding example This example is from Heroku&#x27;s <em>New</em> <em>Relic</em> <em>integration</em>. In this case Heroku has chosen to use a header only. <em>New</em> <em>Relic</em> <em>partner</em>"
      },
      "id": "603ec8b428ccbc9be1eba7a8"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/getting-started/walkthrough-signoff": [
    {
      "sections": [
        "Partnership admin console",
        "Console components",
        "Partnership configuration settings",
        "Customer activity monitoring",
        "State-of-the-Partnership report",
        "Partner customer monitoring",
        "View an arbitrary customer",
        "Viewing detailed customer data"
      ],
      "title": "Partnership admin console",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "670e4d2e1db957100b23a7b8b0af6bf50cc8c996",
      "image": "https://docs.newrelic.com/static/43369c88523ebf526ae58fa5719d4efe/0abdd/crop-partnership-owner-account-settings.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partnership-admin-console/",
      "published_at": "2021-06-09T00:07:14Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Partnership Admin Console is the interface for managing your customers' accounts and integration with New Relic. To access the console, sign into the partnership owner account, and go to: https://partner-admin-console.newrelic.com/accounts/ACCOUNT_ID/admin_console/ Copy You can also access the console from the New Relic UI: Go to one.newrelic.com > (account dropdown) > Account settings. From the left menu bar, select Partnerships. one.newrelic.com > (account dropdown) > Account settings > Partnerships: Partnership owners can access the Partnership Admin Console from their account settings in the New Relic UI. Console components The Partnership Admin Console has two main components: Partnership configuration settings Customer activity monitoring If multiple partnerships are associated with the New Relic master account, the menu also includes an option to switch partnership accounts. Partnership configuration settings In developing your integration with New Relic, you must specify a number of settings. For your convenience these settings are grouped together in the partnership console, including URLs for header/footer and various redirects, SSO configuration, and keys and the ability to manipulate them. Customer activity monitoring New Relic provides you with two tools for managing your customers: State-of-the-Partnership reports and live monitoring of all deployed New Relic agents in your partnership. Both of these tools provide insight into your customers who are using New Relic. They can be used to identify up-sale opportunities or to assist your support group in proactive support. State-of-the-Partnership report The State-of-the-Partnership report provides a summary of your customers with New Relic accounts and their activities. The report is broken down by language of the agents deployed, the agent version and the language version for each account. This report is run weekly for each partner. It is available on request from your New Relic Business Development contact. This report is an excellent way to see which of your customers with New Relic accounts are in fact using the service. Partner customer monitoring The Partner customer monitoring facility provides application performance data on the New Relic enabled applications that are running on your service. This facility allows you to easily identify customers experiencing performance problems. Where the performance problems are caused by under capacity, these customers are excellent sales opportunities. Alternatively your support or services organization will find this information useful in pre-emptively identifying customer issues or as good prospects for consulting services. View an arbitrary customer To view activity of a customer that does not appear in any of the filtered views: Go to one.newrelic.com > (account dropdown) > Switch accounts > Other accounts. New Relic will list all of the reporting accounts in the partnership. You can filter or search the list. Viewing detailed customer data Under normal circumstances a partner will be able to see only the summary level data in a customer's New Relic account. Through the Partnership Admin Console, partners will be permitted to drill down to the more detailed presentation. If you want to drill down from the Partnership Admin Console, add your user (typically support@partner.com or something similar) to the account. Typically this will be done at account creation. Avoid provisioning this user as the account Owner.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.63976,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> admin console",
        "sections": "<em>Partnership</em> admin console",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "The <em>Partnership</em> Admin Console is the interface for managing your customers&#x27; accounts and <em>integration</em> with <em>New</em> <em>Relic</em>. To access the console, sign into the <em>partnership</em> owner account, and go to: https:&#x2F;&#x2F;<em>partner</em>-admin-console.newrelic.com&#x2F;accounts&#x2F;ACCOUNT_ID&#x2F;admin_console&#x2F; Copy You can also access"
      },
      "id": "603ed3e3196a6735baa83dad"
    },
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-06-09T00:08:02Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.63976,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "This document is for <em>New</em> <em>Relic</em> partners. After you complete your <em>partnership</em> <em>integration</em>, you will be introduced to your technical contacts at <em>New</em> <em>Relic</em>. Use these channels for non-urgent escalations. Tip If you are not a <em>New</em> <em>Relic</em> <em>partner</em>, see <em>New</em> <em>Relic</em>&#x27;s resources for finding help or filing"
      },
      "id": "60450ecf28ccbc45632c6095"
    },
    {
      "sections": [
        "Partner integration requirements",
        "Process",
        "Accelerated process",
        "Typical component tasks"
      ],
      "title": "Partner integration requirements",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "5df8f0dc281afba95823d8896a55ceec56cd4a8a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partner-integration-requirements/",
      "published_at": "2021-06-08T22:48:08Z",
      "updated_at": "2021-03-16T10:06:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Thank you for your interest in partnering with New Relic. We look forward to providing your customers with powerful, easy-to-use application performance monitoring. This guide explains how to bundle New Relic services with yours. An effective bundling includes technical tasks (such as agent provisioning and console integration) as well as marketing and promotional activities (such as branding and awareness generation). Process To achieve a full and productive integration with New Relic you will need to: What How Integrate your user console with New Relic. Update your user portal to automatically create New Relic accounts and make them available to your customers in a convenient, compelling, co-branded way. Provision the New Relic agent. For your customers to benefit from New Relic, they will need our monitoring agent installed into their apps. Update your provisioning systems to install New Relic automatically. Generate awareness. Integrate and deploy New Relic facilities for displaying sample application reporting data to customers. Establish support and sustaining engineering processes. Agree on a process for support coordination and refresh of New Relic software. Set up communication. Tip: We've found that partners typically complete integration with one to two developer weeks of effort. For more information, see Typical component tasks. Accelerated process Where circumstances and/or proximity permit, we have found that bringing your developers on site to New Relic's San Francisco offices can dramatically accelerate development of your integration. At New Relic's offices your developers will work in close proximity to the engineering team that is responsible for the development and maintenance of New Relic's APIs. Development issues that would under other circumstances require hours or days to resolve can be addressed in minutes. Typically development time for an integration can be cut in half. Should you elect to pursue this option, please talk to your New Relic technical contact. Typical component tasks The checklist for creating a successful integration will vary with each partner and specific circumstances. As a general guide, here's a typical outline of the components and rough sequencing of tasks involved in creating an integration with New Relic. Done Component tasks of a typical partner integration Finalize business relationship. Have introductory conference call or meeting for technical team. Review partner integration documentation and other integration materials. Review roles and responsibilities. Develop integration plan with timeline. Plan account and agent provisioning. Create and deploy account provisioning system. Determine which agents and how to provision. Create and deploy webpages to support provisioning and deployment. Set up test partnership and accounts on New Relic's staging server. Plan for co-branding. Create and deploy CSS. Create and deploy header and footer. Create branded URL (cname). Drive adoption through creating awareness. Add the New Relic widget to the user console. Use data API integration. Test integration on staging. Set up partnership on New Relic's production server. Modify integration to point to production server. Test integration on production. Establish a support plan. Designate support contacts. Introduce New Relic Support to your technical support team. Create sustaining engineering plans. Get test account. Prepare for launch. Walk through integration review and signoff (conference call). Document final signup flow. Coordinate on launch co-marketing and PR. Go live!",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.51955,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>integration</em> requirements",
        "sections": "<em>Partner</em> <em>integration</em> requirements",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " will vary with each <em>partner</em> and specific circumstances. As a general <em>guide</em>, here&#x27;s a typical outline of the components and rough sequencing of tasks involved in creating an <em>integration</em> with <em>New</em> <em>Relic</em>. Done Component tasks of a typical <em>partner</em> <em>integration</em> Finalize business relationship. Have"
      },
      "id": "603ed3e728ccbcba09eba7b7"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/other-partnership-settings": [
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-06-08T19:57:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 243.89977,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>products</em>, pricing, and billing",
        "sections": "<em>Partner</em> <em>products</em>, pricing, and billing",
        "tags": "<em>New</em> <em>Relic</em> <em>products</em> <em>features</em>",
        "body": " API user object (defined as an array within the account object) <em>Partnership</em> API subscription object (the level of service a customer purchases for one or more <em>New</em> <em>Relic</em> <em>products</em>) Billing <em>integration</em> API (functions to replace a customer&#x27;s existing subscription with a <em>new</em> one, or to update invoice information for <em>New</em> <em>Relic</em> <em>partner</em> accounts)"
      },
      "id": "603ece55e7b9d254192a080c"
    },
    {
      "sections": [
        "Partnership accounts: Single sign on and access control",
        "Implement Single Sign On",
        "Use shared secret method",
        "SSO API",
        "Description",
        "Method",
        "URI",
        "Parameters",
        "**cURL examples**",
        "For more help"
      ],
      "title": "Partnership accounts: Single sign on and access control",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "7054f72ececf6692e3abdcc1573276559be841ca",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/single-sign-access-control/",
      "published_at": "2021-06-09T00:08:03Z",
      "updated_at": "2021-03-13T02:45:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic supports Single Sign On (SSO) as a convenience for partner customers. Partners implementing SSO also have the option to restrict access by requiring customers to access New Relic via the partner's management site or product login. Single Sign On is a convenience for your customers, eliminating the requirement of entering sign on credentials multiple times, and it creates a more unified experience for the user. In situations where this distinction is desired, SSO is recommended. Where it is desirable to maintain a distinction between the services or where technical considerations preclude implementing SSO, a fully functioning integration is still achievable. Implement Single Sign On Two methods for SSO are supported by New Relic. New Relic upgraded its single sign on system during 2011. If you implemented single sign on with New Relic prior to September 2011, you will have used the old system. That method of implementing SSO has been deprecated. All new integrations must use the new system. Existing implementations using the old system will continue to work indefinitely. However, we encourage all partners using the old system to upgrade to the new model. Use shared secret method The upgraded shared secret version of New Relic's SSO implementation offers several improvements over the old handshake version. Most important, the system is more secure. Security is enhanced by the use of passing a SHA1 digest of a shared secret, a timestamp, and request specific data in the authentication SSO request. The shared secret can be any string. Whatever shared secret is chosen, enter it in the appropriate field in the New Relic Partner console. To edit the SSO settings: Log in to the partnership owner account. From the account dropdown in the New Relic UI, select Account settings > Partnerships > Edit settings. For SSO type, select signature. For SSO data, type the shared secret. Select Save. In addition to enhanced security, the new SSO method supports a session cookie. Nav data may be stored in the session cookie to support enhanced functionality of headers and footers. The name of the cookie is specified through the Partner console. If unspecified the cookie name defaults to nav_data. To successfully use this SSO method, the SSO URI must be invoked from the user's browser. On success the browser will be automatically logged into New Relic and the redirect URL to that account returned. The SSO URI however should not be generated on the browser, as this would expose the shared secret and allow the login to be spoofed. The URI should be generated on a host and passed to the user's browser. SSO API Description SSO authentication request Method POST or GET URI https://rpm.newrelic.com/accounts/sso_access Copy Parameters Name Required Description id Yes ID of the New Relic account. email No Email address of user logging in (optional). If given, the user must already have been added to the account. By default, the account Owner role is used. Account Owners have full privileges on accounts. If some lesser degree of account privileges or a different user is desired, the email must be provided. timestamp Yes Timestamp used to generate token, in seconds since the epoch. Only timestamps within five minutes (300 seconds) of the New Relic system clock are accepted. nav-data OR nav_data No Partner navigation data. This data will be set in the session cookie using the name as specified in the partnership configuration, or nav_data by default. token Yes Signed token. The signature token is generated by applying a SHA1 hex digest on a seed string, which is composed as Account_id:secret:timestamp or Account_id:secret:timestamp:email. Each component is separated by a colon (:). Example without email: \"12345:MySecret:0987654321\" Using Ruby syntax: \"#{account_id}:#{secret}:#{timestamp}\" Example with email: \"12345:MySecret:0987654321:user@host.com\" Using Ruby syntax: \"#{account_id}:#{secret}:#{timestamp}:#{email}\" remote_url No Relative path of a New Relic page to which the users will be directed. ** cURL examples * * curl -X POST -d \"id=63790\" -d \"timestamp=1319659982\" -d \"token=a4d30d6f1f1a5b6c2872ab\" https://rpm.newrelic.com/accounts/sso_access Copy curl -X POST -d \"id=63790\" -d \"timestamp=1319659982\" -d \"token=a4d30d6f1f1a5b6c2872ab\" -d \"remote_url=/account/63790/servers\" https://rpm.newrelic.com/accounts/sso_access Copy On success returns: <html><body>You are being redirected.</body></html> Copy For more help Additional documentation resources include: SAML service providers (overview of New Relic's SSO feature, providers supported by New Relic) New Relic Partners and SAML SSO (additional options for partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 207.73389,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> accounts: Single sign on and access control",
        "sections": "<em>Partnership</em> accounts: Single sign on and access control",
        "tags": "<em>New</em> <em>Relic</em> <em>products</em> <em>features</em>",
        "body": "<em>New</em> <em>Relic</em> supports Single Sign On (SSO) as a convenience for <em>partner</em> customers. Partners implementing SSO also have the option to restrict access by requiring customers to access <em>New</em> <em>Relic</em> via the <em>partner</em>&#x27;s management site or <em>product</em> login. Single Sign On is a convenience for your customers"
      },
      "id": "6044175564441fd3fa378f1f"
    },
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-06-09T00:08:02Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.39871,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>New</em> <em>Relic</em> <em>products</em> and <em>features</em> by category. Tip The Docs site includes a <em>Partnerships</em> category with information for <em>New</em> <em>Relic</em> partners and some <em>partnership</em> customers. Here are the five most commonly consulted articles on the <em>New</em> <em>Relic</em> Docs site. Providing easily found and direct links"
      },
      "id": "60450ecf28ccbc45632c6095"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing": [
    {
      "sections": [
        "Other partnership settings",
        "Types of settings",
        "For more help"
      ],
      "title": "Other partnership settings",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "df23328a14acab54c7f100c723f6feee68927c6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/other-partnership-settings/",
      "published_at": "2021-06-09T00:08:03Z",
      "updated_at": "2021-03-16T10:07:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There are a number of miscellaneous settings that are available to partners for customization of their partnership integration. Most of these settings enable or disable the presentation of New Relic features. These settings must be set by New Relic and are not configurable through the Partnership Console. Types of settings Contact your partnership technical contact to have any of these settings modified. Download links: Show agent link Show configuration file link Welcome messages: Signup message: A customized welcome message Hide or show banner welcome message Hide or show invoice message Email control: Send deploy reminders Send trial emails Billing email: This is for partnerships where the billing method is \"Reseller\" and invoices should be directed to the attention of a specific party. Feature access: Server monitoring User administration For more help Additional documentation resources include: Partnership console (overview of how to use the Partnership Console to change account settings in New Relic) The New Relic user interface (overview of how to use the UI)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.43436,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Other <em>partnership</em> settings",
        "sections": "Other <em>partnership</em> settings",
        "tags": "<em>New</em> <em>Relic</em> <em>products</em> <em>features</em>",
        "body": "There are a number of miscellaneous settings that are available to partners for customization of their <em>partnership</em> <em>integration</em>. Most of these settings enable or disable the presentation of <em>New</em> <em>Relic</em> <em>features</em>. These settings must be set by <em>New</em> <em>Relic</em> and are not configurable through the <em>Partnership</em>"
      },
      "id": "603ed42364441fb51f4e88a9"
    },
    {
      "sections": [
        "Partnership accounts: Single sign on and access control",
        "Implement Single Sign On",
        "Use shared secret method",
        "SSO API",
        "Description",
        "Method",
        "URI",
        "Parameters",
        "**cURL examples**",
        "For more help"
      ],
      "title": "Partnership accounts: Single sign on and access control",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "7054f72ececf6692e3abdcc1573276559be841ca",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/single-sign-access-control/",
      "published_at": "2021-06-09T00:08:03Z",
      "updated_at": "2021-03-13T02:45:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic supports Single Sign On (SSO) as a convenience for partner customers. Partners implementing SSO also have the option to restrict access by requiring customers to access New Relic via the partner's management site or product login. Single Sign On is a convenience for your customers, eliminating the requirement of entering sign on credentials multiple times, and it creates a more unified experience for the user. In situations where this distinction is desired, SSO is recommended. Where it is desirable to maintain a distinction between the services or where technical considerations preclude implementing SSO, a fully functioning integration is still achievable. Implement Single Sign On Two methods for SSO are supported by New Relic. New Relic upgraded its single sign on system during 2011. If you implemented single sign on with New Relic prior to September 2011, you will have used the old system. That method of implementing SSO has been deprecated. All new integrations must use the new system. Existing implementations using the old system will continue to work indefinitely. However, we encourage all partners using the old system to upgrade to the new model. Use shared secret method The upgraded shared secret version of New Relic's SSO implementation offers several improvements over the old handshake version. Most important, the system is more secure. Security is enhanced by the use of passing a SHA1 digest of a shared secret, a timestamp, and request specific data in the authentication SSO request. The shared secret can be any string. Whatever shared secret is chosen, enter it in the appropriate field in the New Relic Partner console. To edit the SSO settings: Log in to the partnership owner account. From the account dropdown in the New Relic UI, select Account settings > Partnerships > Edit settings. For SSO type, select signature. For SSO data, type the shared secret. Select Save. In addition to enhanced security, the new SSO method supports a session cookie. Nav data may be stored in the session cookie to support enhanced functionality of headers and footers. The name of the cookie is specified through the Partner console. If unspecified the cookie name defaults to nav_data. To successfully use this SSO method, the SSO URI must be invoked from the user's browser. On success the browser will be automatically logged into New Relic and the redirect URL to that account returned. The SSO URI however should not be generated on the browser, as this would expose the shared secret and allow the login to be spoofed. The URI should be generated on a host and passed to the user's browser. SSO API Description SSO authentication request Method POST or GET URI https://rpm.newrelic.com/accounts/sso_access Copy Parameters Name Required Description id Yes ID of the New Relic account. email No Email address of user logging in (optional). If given, the user must already have been added to the account. By default, the account Owner role is used. Account Owners have full privileges on accounts. If some lesser degree of account privileges or a different user is desired, the email must be provided. timestamp Yes Timestamp used to generate token, in seconds since the epoch. Only timestamps within five minutes (300 seconds) of the New Relic system clock are accepted. nav-data OR nav_data No Partner navigation data. This data will be set in the session cookie using the name as specified in the partnership configuration, or nav_data by default. token Yes Signed token. The signature token is generated by applying a SHA1 hex digest on a seed string, which is composed as Account_id:secret:timestamp or Account_id:secret:timestamp:email. Each component is separated by a colon (:). Example without email: \"12345:MySecret:0987654321\" Using Ruby syntax: \"#{account_id}:#{secret}:#{timestamp}\" Example with email: \"12345:MySecret:0987654321:user@host.com\" Using Ruby syntax: \"#{account_id}:#{secret}:#{timestamp}:#{email}\" remote_url No Relative path of a New Relic page to which the users will be directed. ** cURL examples * * curl -X POST -d \"id=63790\" -d \"timestamp=1319659982\" -d \"token=a4d30d6f1f1a5b6c2872ab\" https://rpm.newrelic.com/accounts/sso_access Copy curl -X POST -d \"id=63790\" -d \"timestamp=1319659982\" -d \"token=a4d30d6f1f1a5b6c2872ab\" -d \"remote_url=/account/63790/servers\" https://rpm.newrelic.com/accounts/sso_access Copy On success returns: <html><body>You are being redirected.</body></html> Copy For more help Additional documentation resources include: SAML service providers (overview of New Relic's SSO feature, providers supported by New Relic) New Relic Partners and SAML SSO (additional options for partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 207.73389,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> accounts: Single sign on and access control",
        "sections": "<em>Partnership</em> accounts: Single sign on and access control",
        "tags": "<em>New</em> <em>Relic</em> <em>products</em> <em>features</em>",
        "body": "<em>New</em> <em>Relic</em> supports Single Sign On (SSO) as a convenience for <em>partner</em> customers. Partners implementing SSO also have the option to restrict access by requiring customers to access <em>New</em> <em>Relic</em> via the <em>partner</em>&#x27;s management site or <em>product</em> login. Single Sign On is a convenience for your customers"
      },
      "id": "6044175564441fd3fa378f1f"
    },
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-06-09T00:08:02Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.39871,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>New</em> <em>Relic</em> <em>products</em> and <em>features</em> by category. Tip The Docs site includes a <em>Partnerships</em> category with information for <em>New</em> <em>Relic</em> partners and some <em>partnership</em> customers. Here are the five most commonly consulted articles on the <em>New</em> <em>Relic</em> Docs site. Providing easily found and direct links"
      },
      "id": "60450ecf28ccbc45632c6095"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/single-sign-access-control": [
    {
      "sections": [
        "Partner products, pricing, and billing",
        "Important",
        "Commitment levels",
        "Customized partnership pricing",
        "Partnership billing options",
        "Cancellations",
        "Promotions",
        "Legacy products and commitment levels",
        "For more help"
      ],
      "title": "Partner products, pricing, and billing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "05d2d31e3eb7c18d7d0b13eac2d3fead6fd58bbf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/partner-products-pricing-billing/",
      "published_at": "2021-06-08T19:57:01Z",
      "updated_at": "2021-05-16T01:10:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This information is for New Relic partners. If you are not a New Relic partner, refer to the information about pricing and billing for New Relic accounts. Partners: For account setup procedures, see New Relic's Partner API documentation. For specific product pricing details (such as New Relic APM), visit New Relic's website, or contact your Alliance & Channels representative at New Relic. Commitment levels When customers choose a product, they also choose a monthly or annual commitment level. Existing partnerships have the option of limiting available product offerings for their customers. Reseller partners may be able to modify these subscription terms based on the contractual terms in the partner agreement with New Relic. Customized partnership pricing Partnership accounts may offer customized pricing. Customized pricing models, rates, minimums, discounts, and options vary by partnership--the actual pricing model used is subject to the contractual terms of the partner's agreement with New Relic. Contact your Alliance & Channels representative at New Relic to learn more. Partnership billing options New Relic supports the following billing options for partnerships. All subscriptions commence and expire at midnight GMT. For host-based subscriptions, fees are charged in advance for the month. Upgrade requests are honored immediately without any billing for partial use during the month. Downgrades take effect at the next payment date. To view New Relic account billing details and history from the user interface: From one.newrelic.com, select (account dropdown) > Account settings > Account > Billing. Billing option Description Credit card When partners choose credit card billing, your customers are directly charged using the credit card information provided during their New Relic subscription signup. This does not include any license fees paid directly by the partner for their customers' accounts. Invoice When partners choose invoice billing, your customers are billed directly by New Relic via invoice for their subscriptions. This option is normally provided on special request to customers with large monthly costs for which credit card billing would be impractical. Reseller For resellers, partners are billed directly for all customer accounts based on the calendar month. Partners may be responsible for accounting for customer usage, pricing, and subscriptions. Resellers have the option to implement an integration between our respective accounting systems. New Relic will invoice the partner monthly, using the Billing integration API for each of the paying accounts under the partnership. Cancellations Once a New Relic account cancellation takes effect, you must uninstall and/or delete all agents or other data-reporting integrations. For uninstallation details, see the documentation for the relevant agents and integrations. Customers may continue to access their data on New Relic until it is purged in accordance with the data retention policy corresponding to the product level. For existing accounts with paid, fixed host subscriptions, cancellations take effect at the next payment date. New Relic will continue to accept data for cancelled accounts until this date. Cancellations for accounts with free or paid based subscriptions take effect immediately. Promotions New Relic allows promotions for accounts offered through partnerships. Promotions associated with a specific partnership may only be redeemed on accounts associated with the partnership. Each promotion has a unique code. This promotion code may be applied only once per account. New Relic may impose further limits on the number of promotions that a customer may apply to an account. Promotion Description Free trials New Relic may include a free trial period for features normally available only through a paid subscription level. This option is provided for a specified number of days. The customer's subscription automatically reverts to its prior level at the conclusion of the trial. Payments for paid subscriptions are not interrupted by the redemption of a free trial promotion on the account. Single use Single use trials expire after they are used once. Discount (deprecated) A one-time percentage discount is applied to a paid subscription. This discount is applied in addition to any volume discounts and customized partner prices. The discount remains in effect until the subscription is modified or cancelled. Legacy products and commitment levels If you have questions about older New Relic products that have been converted to new pricing models, contact your Alliance & Channels representative at New Relic. For more help Additional documentation resources include: Partnership API account object (the primary JSON container object in the API) Partnership API user object (defined as an array within the account object) Partnership API subscription object (the level of service a customer purchases for one or more New Relic products) Billing integration API (functions to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 243.89975,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>products</em>, pricing, and billing",
        "sections": "<em>Partner</em> <em>products</em>, pricing, and billing",
        "tags": "<em>New</em> <em>Relic</em> <em>products</em> <em>features</em>",
        "body": " API user object (defined as an array within the account object) <em>Partnership</em> API subscription object (the level of service a customer purchases for one or more <em>New</em> <em>Relic</em> <em>products</em>) Billing <em>integration</em> API (functions to replace a customer&#x27;s existing subscription with a <em>new</em> one, or to update invoice information for <em>New</em> <em>Relic</em> <em>partner</em> accounts)"
      },
      "id": "603ece55e7b9d254192a080c"
    },
    {
      "sections": [
        "Other partnership settings",
        "Types of settings",
        "For more help"
      ],
      "title": "Other partnership settings",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "New Relic products features"
      ],
      "external_id": "df23328a14acab54c7f100c723f6feee68927c6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/new-relic-products-features/other-partnership-settings/",
      "published_at": "2021-06-09T00:08:03Z",
      "updated_at": "2021-03-16T10:07:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There are a number of miscellaneous settings that are available to partners for customization of their partnership integration. Most of these settings enable or disable the presentation of New Relic features. These settings must be set by New Relic and are not configurable through the Partnership Console. Types of settings Contact your partnership technical contact to have any of these settings modified. Download links: Show agent link Show configuration file link Welcome messages: Signup message: A customized welcome message Hide or show banner welcome message Hide or show invoice message Email control: Send deploy reminders Send trial emails Billing email: This is for partnerships where the billing method is \"Reseller\" and invoices should be directed to the attention of a specific party. Feature access: Server monitoring User administration For more help Additional documentation resources include: Partnership console (overview of how to use the Partnership Console to change account settings in New Relic) The New Relic user interface (overview of how to use the UI)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.43436,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Other <em>partnership</em> settings",
        "sections": "Other <em>partnership</em> settings",
        "tags": "<em>New</em> <em>Relic</em> <em>products</em> <em>features</em>",
        "body": "There are a number of miscellaneous settings that are available to partners for customization of their <em>partnership</em> <em>integration</em>. Most of these settings enable or disable the presentation of <em>New</em> <em>Relic</em> <em>features</em>. These settings must be set by <em>New</em> <em>Relic</em> and are not configurable through the <em>Partnership</em>"
      },
      "id": "603ed42364441fb51f4e88a9"
    },
    {
      "sections": [
        "Support resources for New Relic partners",
        "Tip",
        "New Relic Support",
        "Documentation",
        "Agent documentation",
        "Agent release notes",
        "Online Technical Community"
      ],
      "title": "Support resources for New Relic partners",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "56246fb8462659d929766125f8afbbc429f42ee5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/support-resources-new-relic-partners/",
      "published_at": "2021-06-09T00:08:02Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document is for New Relic partners. After you complete your partnership integration, you will be introduced to your technical contacts at New Relic. Use these channels for non-urgent escalations. Tip If you are not a New Relic partner, see New Relic's resources for finding help or filing a support ticket. New Relic Support To obtain support for partner accounts, create a ticket at support.newrelic.com. If you need to call New Relic directly, contact your Business Development representative. Documentation Documentation from New Relic's Docs site is an important resource for your support group when providing Level 1 support to your New Relic subscribers. Posting these links on your support pages is an effective way to encourage self help and reduce your support efforts. Top level entry point for New Relic documentation: docs.newrelic.com. From here you can select information about New Relic products and features by category. Tip The Docs site includes a Partnerships category with information for New Relic partners and some partnership customers. Here are the five most commonly consulted articles on the New Relic Docs site. Providing easily found and direct links to these articles can provide many users with self-serve answers to their questions. Create your New Relic account Name your application Configure the agent Not seeing data Apdex: Measuring user satisfaction Agent documentation Here are links to New Relic documentation categories organized by APM agent languages: Go Java .NET Node.js PHP Python Ruby Agent release notes Here are links to New Relic release notes organized by agent languages: Go Java .NET Node.js PHP Python Ruby Online Technical Community The New Relic Explorers Hub brings together the expertise of New Relic employees, our Partners, and our community regarding all things New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.39871,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "sections": "Support resources for <em>New</em> <em>Relic</em> <em>partners</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>New</em> <em>Relic</em> <em>products</em> and <em>features</em> by category. Tip The Docs site includes a <em>Partnerships</em> category with information for <em>New</em> <em>Relic</em> partners and some <em>partnership</em> customers. Here are the five most commonly consulted articles on the <em>New</em> <em>Relic</em> Docs site. Providing easily found and direct links"
      },
      "id": "60450ecf28ccbc45632c6095"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-account-access-administrators": [
    {
      "sections": [
        "Intro to Partnership API",
        "Requirements",
        "Customer partnership restrictions",
        "Password requirements",
        "Things you can do",
        "Get started"
      ],
      "title": "Intro to Partnership API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "074cf4e7c590dfa2332284a7b7f394e2f7ba45ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-api/",
      "published_at": "2021-06-09T00:09:01Z",
      "updated_at": "2021-03-29T20:10:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Partnership API allows New Relic partners, and New Relic accounts set up as customer partnerships, to manage accounts, users, and subscription-related settings. Requirements The Partnership API can be used by two types of New Relic accounts: partners (managed service providers, resellers) and customer partnerships (larger customers who have been given access to our partnership account structure). These docs are for version 2 of the Partner API. Earlier versions have been deprecated. If you have problems with an older integration, upgrade to version 2. Access to the partnership account structure and the Partnership API requires prior setup and approval by New Relic. Partnership API calls require authentication with both your partnership owner account's REST API key and your Partner ID. Accounts that are genuine New Relic partners (managed service providers, resellers) have no restrictions on using the API. Accounts set up as customer partnerships have restrictions that follow. Customer partnership restrictions If your New Relic organization is set up as a customer partnership, there are some restrictions in place if your organization is on our newer pricing plan or our newer account/user model. Details: Pricing plan. If you’re on New Relic One pricing, you can't use API calls that govern our original pricing plan. The API impacts are: You can't use the subscription object You can't use the NerdGraph Provisioning API. User model. If your New Relic account has been converted to be entirely on the New Relic One account/user model, you can no longer use API calls that create or govern users on our original user model. The API impacts are: You can't use the user object. Instead, you'd manage users with these user management docs. For the account object: you can't add users via the users field. Instead, you'd manage users with these user management docs. To determine your pricing plan or account/user model, see Overview of pricing and user model changes. Password requirements Passwords passed for account creation have these requirements: 8 to 50 characters in length Only contain letters, numbers, or special characters Cannot contain spaces Must contain at least 1 letter Must contain at least 1 number or special character Things you can do Here is an overview of the API's functionality. Account: The account object is what you use to create and update accounts. You can do the following with it: Create new Show Update Cancel Show usage Set primary admin (some accounts) Set subscription (some accounts) There is also a sub-account object for creating sub-accounts. Users: Some organizations that meet the requirements can use the user object to: Add user access to account Remove user access from account Subscription: Organizations that meet the requirements and are on our original product pricing plan can use the subscription object to configure various subscription-related traits. Get started To start using the Partnership API, see the Partner API reference docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 197.12758,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to <em>Partnership</em> API",
        "sections": "Intro to <em>Partnership</em> API",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": ") and customer <em>partnerships</em> (larger customers who have been given access to our <em>partnership</em> <em>account</em> structure). These docs are for version 2 of the <em>Partner</em> API. Earlier versions have been deprecated. If you have problems with an older <em>integration</em>, upgrade to version 2. Access to the <em>partnership</em> <em>account</em>"
      },
      "id": "603ed42328ccbcd4b3eba7ca"
    },
    {
      "sections": [
        "Partnership accounts, users, and subscriptions",
        "Partnerships with New Relic",
        "Account hierarchy",
        "Tip",
        "Partnership owner accounts (POA)",
        "Sub-accounts with partnerships",
        "Account users",
        "Partnership pricing"
      ],
      "title": "Partnership accounts, users, and subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ae2f39a8ff0395815b3e31a9d8ad9361beca2c4e",
      "image": "https://docs.newrelic.com/static/acecf0ec89c448506faef0e4eeff87e6/db3a5/partnership-hierarchy.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partnership-accounts-users-subscriptions/",
      "published_at": "2021-06-09T05:31:31Z",
      "updated_at": "2021-03-29T16:17:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic organizations set up as partnership accounts have access to an enhanced hierarchical way of organizing their account structure. Partnerships with New Relic There are two types of New Relic organizations that are able to use our partnership account structure and the Partnership API: An actual partnership: A partnership refers to managed service providers or resellers, who offer New Relic products to their customers. Heroku is one example of such a New Relic partner. A customer partnership: some of our larger organizations also make use of our partnership account structure. We call these customers \"customer partnerships.\" Use of our partnership account structure requires prior approval and set up by New Relic representatives. For customer partnerships, New Relic contacts organizations that would benefit from such a structure. Partnerships are identified by a numeric PARTNER_ID. In some cases, a New Relic customer may have more than one partnership; for example, when one section of New Relic users must be managed differently from another. Partnerships are administered by a partnership owner account. The account that owns a partnership functions differently from a regular account. If multiple partnerships have been set up, each has a unique PARTNER_ID. Account hierarchy New Relic partnership organizations consist of the partnership owning account, partnerships, master accounts, and sub-accounts. A partnership can have multiple master accounts and sub-accounts. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you do not have a partnership organization, you can only have one master account. For more information, see Manage apps or users with sub-accounts. All master accounts and sub-accounts roll up to your partnership account. Partnership owner accounts (POA) The partnership owner account (POA) is the entity that is used to administer a partnership. It controls which users manage accounts under partnerships, have access to the partner API, and manage other aspects of the partnership. Do not monitor your own applications from the partnership owner account. Instead, create an account within the partnership and monitor apps from that account. Users on the partnership owner account can access accounts under their partnerships and enjoy User level privileges. Admins on the POA can access accounts under their partnerships and enjoy Admin level privileges, including permission to manage users. The Owner of the partnership owner account will still only have Admin level access on accounts under the partnership. That means that the owner cannot enable SAML SSO, change the account owner, cancel the account via the UI, etc. The partnership owner account enjoys special privileges, and it lets you exercise the capabilities defined in your partnership agreement with New Relic. For example, you may use your partnership owner account with the New Relic Partnership API to set up and manage users on your accounts or to view your customers' performance data in the New Relic UI. Tip Many of the Partnership API calls return an account status as part of the XML. Sub-accounts with partnerships Sub-accounts behave differently than other New Relic accounts provisioned through your partnership: Sub-accounts Comments Account creation Sub-accounts can be created through the Partnership API or New Relic user interface. In order to group accounts through the New Relic user interface, your partnership must have Admin privileges, and the account must have the appropriate subscription level. If you have any questions about partnership privileges or subscription levels, contact your New Relic account representative. Sub-accounts do not have a New Relic subscription of their own. They inherit the master account's subscription. Billing Billing is applied at the master account level. Exception: Reseller partnerships receive consolidated billing for all accounts under the partnership. Permissions Admin-level users on a master account have the ability to create, modify, and delete sub-accounts for the master account. Users that have been granted access permissions on a master account automatically inherit the same level of access for all sub-accounts. This is also true for add-on roles. Exception: Sub-account users will not receive alert emails or weekly report emails unless they are explicitly granted permission on these sub-accounts. Account users You can use the Partnership user API to add and maintain your customer users. An account must always have at least one person (the Owner) associated with it. For security purposes, you cannot change an account Owner with the Partnership user API. Instead, you must change the account Owner from the Users page in the New Relic UI. In addition, a specific user may be associated with multiple accounts. For example, many New Relic users have accounts through a partnership, and they also have accounts they created directly with New Relic. Partnership pricing Accounts within a partnership organization may have different levels of access to New Relic products. Tip Many of the Partnership API calls return a subscription status as part of the XML. For accounts set up through a partnership: An account can have multiple New Relic products associated with it. However, only one subscription per product may be active at any time. For example, a user may have both an Essentials subscription and a higher service level Pro Trial subscription. When the Pro Trial subscription expires, the service level returns to the Essentials subscription. Promotions may appear as a subscription change. Several factors affect starting and stopping subscriptions, including how New Relic handles pricing and billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 197.08328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>accounts</em>, users, and subscriptions",
        "sections": "<em>Partnerships</em> with <em>New</em> <em>Relic</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " these customers &quot;customer <em>partnerships</em>.&quot; Use of our <em>partnership</em> <em>account</em> structure requires prior approval and set up by <em>New</em> <em>Relic</em> representatives. For customer <em>partnerships</em>, <em>New</em> <em>Relic</em> contacts organizations that would benefit from such a structure. <em>Partnerships</em> are identified by a numeric <em>PARTNER</em>"
      },
      "id": "603ece55e7b9d273782a0804"
    },
    {
      "sections": [
        "Tips and tricks",
        "Account creation and deletion",
        "Partnership owner account"
      ],
      "title": "Tips and tricks",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ba123e58f5acafea5b65e09350eba65abf430b2e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/tips-tricks/",
      "published_at": "2021-06-08T18:52:00Z",
      "updated_at": "2021-03-13T03:11:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some tips and tricks for creating and deleting New Relic partner accounts. Account creation and deletion When you create an account through the New Relic Partner API, the system checks the string submitted as the account name to ensure it is unique. If it is not unique, the system will append a number to the submitted string to ensure uniqueness; for example, account-name_1. When an account is canceled, it is not deleted from the New Relic database. Rather, it is made inactive by removing all subscriptions from the account. If you attempt to reinstate an account by calling the Account Creation API using the same account name, the system will check for uniqueness, determine that the name is not unique and create a new account with an appended number. This is in most cases not what is desired. To avoid this problem, as part of account creation, store the numeric account_id with the account name. When re-creating an account, check for the existence of this ID. If detected, rather than using the Account Creation API, use the Change Subscription API to add a new subscription to the account. Adding an active subscription to the account will re-activate the account. Partnership owner account The Partnership Owner Account is not part of the partnership. It owns the partnership. Attempts to treat it as if it were in the partnership will fail. This includes but is not limited to: Attempting to SSO into the partnership owner account using the partnership shared secret Expecting the partnership pricing to apply to the partnership owner account",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 193.30501,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Partnership</em> owner <em>account</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Here are some tips and tricks for creating and deleting <em>New</em> <em>Relic</em> <em>partner</em> accounts. <em>Account</em> creation and deletion When you create an <em>account</em> through the <em>New</em> <em>Relic</em> <em>Partner</em> API, the system checks the string submitted as the <em>account</em> name to ensure it is unique. If it is not unique, the system"
      },
      "id": "60441785196a676aed960f46"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-api": [
    {
      "sections": [
        "Partnership accounts, users, and subscriptions",
        "Partnerships with New Relic",
        "Account hierarchy",
        "Tip",
        "Partnership owner accounts (POA)",
        "Sub-accounts with partnerships",
        "Account users",
        "Partnership pricing"
      ],
      "title": "Partnership accounts, users, and subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ae2f39a8ff0395815b3e31a9d8ad9361beca2c4e",
      "image": "https://docs.newrelic.com/static/acecf0ec89c448506faef0e4eeff87e6/db3a5/partnership-hierarchy.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partnership-accounts-users-subscriptions/",
      "published_at": "2021-06-09T05:31:31Z",
      "updated_at": "2021-03-29T16:17:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic organizations set up as partnership accounts have access to an enhanced hierarchical way of organizing their account structure. Partnerships with New Relic There are two types of New Relic organizations that are able to use our partnership account structure and the Partnership API: An actual partnership: A partnership refers to managed service providers or resellers, who offer New Relic products to their customers. Heroku is one example of such a New Relic partner. A customer partnership: some of our larger organizations also make use of our partnership account structure. We call these customers \"customer partnerships.\" Use of our partnership account structure requires prior approval and set up by New Relic representatives. For customer partnerships, New Relic contacts organizations that would benefit from such a structure. Partnerships are identified by a numeric PARTNER_ID. In some cases, a New Relic customer may have more than one partnership; for example, when one section of New Relic users must be managed differently from another. Partnerships are administered by a partnership owner account. The account that owns a partnership functions differently from a regular account. If multiple partnerships have been set up, each has a unique PARTNER_ID. Account hierarchy New Relic partnership organizations consist of the partnership owning account, partnerships, master accounts, and sub-accounts. A partnership can have multiple master accounts and sub-accounts. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you do not have a partnership organization, you can only have one master account. For more information, see Manage apps or users with sub-accounts. All master accounts and sub-accounts roll up to your partnership account. Partnership owner accounts (POA) The partnership owner account (POA) is the entity that is used to administer a partnership. It controls which users manage accounts under partnerships, have access to the partner API, and manage other aspects of the partnership. Do not monitor your own applications from the partnership owner account. Instead, create an account within the partnership and monitor apps from that account. Users on the partnership owner account can access accounts under their partnerships and enjoy User level privileges. Admins on the POA can access accounts under their partnerships and enjoy Admin level privileges, including permission to manage users. The Owner of the partnership owner account will still only have Admin level access on accounts under the partnership. That means that the owner cannot enable SAML SSO, change the account owner, cancel the account via the UI, etc. The partnership owner account enjoys special privileges, and it lets you exercise the capabilities defined in your partnership agreement with New Relic. For example, you may use your partnership owner account with the New Relic Partnership API to set up and manage users on your accounts or to view your customers' performance data in the New Relic UI. Tip Many of the Partnership API calls return an account status as part of the XML. Sub-accounts with partnerships Sub-accounts behave differently than other New Relic accounts provisioned through your partnership: Sub-accounts Comments Account creation Sub-accounts can be created through the Partnership API or New Relic user interface. In order to group accounts through the New Relic user interface, your partnership must have Admin privileges, and the account must have the appropriate subscription level. If you have any questions about partnership privileges or subscription levels, contact your New Relic account representative. Sub-accounts do not have a New Relic subscription of their own. They inherit the master account's subscription. Billing Billing is applied at the master account level. Exception: Reseller partnerships receive consolidated billing for all accounts under the partnership. Permissions Admin-level users on a master account have the ability to create, modify, and delete sub-accounts for the master account. Users that have been granted access permissions on a master account automatically inherit the same level of access for all sub-accounts. This is also true for add-on roles. Exception: Sub-account users will not receive alert emails or weekly report emails unless they are explicitly granted permission on these sub-accounts. Account users You can use the Partnership user API to add and maintain your customer users. An account must always have at least one person (the Owner) associated with it. For security purposes, you cannot change an account Owner with the Partnership user API. Instead, you must change the account Owner from the Users page in the New Relic UI. In addition, a specific user may be associated with multiple accounts. For example, many New Relic users have accounts through a partnership, and they also have accounts they created directly with New Relic. Partnership pricing Accounts within a partnership organization may have different levels of access to New Relic products. Tip Many of the Partnership API calls return a subscription status as part of the XML. For accounts set up through a partnership: An account can have multiple New Relic products associated with it. However, only one subscription per product may be active at any time. For example, a user may have both an Essentials subscription and a higher service level Pro Trial subscription. When the Pro Trial subscription expires, the service level returns to the Essentials subscription. Promotions may appear as a subscription change. Several factors affect starting and stopping subscriptions, including how New Relic handles pricing and billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 197.08328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>accounts</em>, users, and subscriptions",
        "sections": "<em>Partnerships</em> with <em>New</em> <em>Relic</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " these customers &quot;customer <em>partnerships</em>.&quot; Use of our <em>partnership</em> <em>account</em> structure requires prior approval and set up by <em>New</em> <em>Relic</em> representatives. For customer <em>partnerships</em>, <em>New</em> <em>Relic</em> contacts organizations that would benefit from such a structure. <em>Partnerships</em> are identified by a numeric <em>PARTNER</em>"
      },
      "id": "603ece55e7b9d273782a0804"
    },
    {
      "sections": [
        "Partner account access for administrators",
        "Guest level access",
        "Administrative level access"
      ],
      "title": "Partner account access for administrators",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "619eaa0ec75341c74c05afc0b888d2cc46d08767",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-account-access-administrators/",
      "published_at": "2021-06-09T00:09:01Z",
      "updated_at": "2021-03-16T10:08:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers the option for partner administrators to access their customers' accounts, subject to the contractual terms of the partnership agreement. These settings are controlled by a New Relic admin. For permissions for non-partner accounts, see Users and roles. Guest level access Guest level access allows administrators to view application data on their customers' accounts. This is particularly useful for troubleshooting customer issues related to performance. Administrative level access Administrative level access, in addition to viewing application data, allows partner administrators to modify the account and subscription terms, and add or remove users from an account. This access level is required for partners who will remotely administer customer accounts using the API or who enable Restricted access on their accounts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 193.95346,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>account</em> access for administrators",
        "sections": "<em>Partner</em> <em>account</em> access for administrators",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em> offers the option for <em>partner</em> administrators to access their customers&#x27; accounts, subject to the contractual terms of the <em>partnership</em> agreement. These settings are controlled by a <em>New</em> <em>Relic</em> admin. For permissions for non-<em>partner</em> accounts, see Users and roles. Guest level access Guest"
      },
      "id": "603ec86ee7b9d2756c2a07c7"
    },
    {
      "sections": [
        "Tips and tricks",
        "Account creation and deletion",
        "Partnership owner account"
      ],
      "title": "Tips and tricks",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ba123e58f5acafea5b65e09350eba65abf430b2e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/tips-tricks/",
      "published_at": "2021-06-08T18:52:00Z",
      "updated_at": "2021-03-13T03:11:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some tips and tricks for creating and deleting New Relic partner accounts. Account creation and deletion When you create an account through the New Relic Partner API, the system checks the string submitted as the account name to ensure it is unique. If it is not unique, the system will append a number to the submitted string to ensure uniqueness; for example, account-name_1. When an account is canceled, it is not deleted from the New Relic database. Rather, it is made inactive by removing all subscriptions from the account. If you attempt to reinstate an account by calling the Account Creation API using the same account name, the system will check for uniqueness, determine that the name is not unique and create a new account with an appended number. This is in most cases not what is desired. To avoid this problem, as part of account creation, store the numeric account_id with the account name. When re-creating an account, check for the existence of this ID. If detected, rather than using the Account Creation API, use the Change Subscription API to add a new subscription to the account. Adding an active subscription to the account will re-activate the account. Partnership owner account The Partnership Owner Account is not part of the partnership. It owns the partnership. Attempts to treat it as if it were in the partnership will fail. This includes but is not limited to: Attempting to SSO into the partnership owner account using the partnership shared secret Expecting the partnership pricing to apply to the partnership owner account",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 193.30501,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Partnership</em> owner <em>account</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Here are some tips and tricks for creating and deleting <em>New</em> <em>Relic</em> <em>partner</em> accounts. <em>Account</em> creation and deletion When you create an <em>account</em> through the <em>New</em> <em>Relic</em> <em>Partner</em> API, the system checks the string submitted as the <em>account</em> name to ensure it is unique. If it is not unique, the system"
      },
      "id": "60441785196a676aed960f46"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partnership-accounts-users-subscriptions": [
    {
      "sections": [
        "Intro to Partnership API",
        "Requirements",
        "Customer partnership restrictions",
        "Password requirements",
        "Things you can do",
        "Get started"
      ],
      "title": "Intro to Partnership API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "074cf4e7c590dfa2332284a7b7f394e2f7ba45ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-api/",
      "published_at": "2021-06-09T00:09:01Z",
      "updated_at": "2021-03-29T20:10:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Partnership API allows New Relic partners, and New Relic accounts set up as customer partnerships, to manage accounts, users, and subscription-related settings. Requirements The Partnership API can be used by two types of New Relic accounts: partners (managed service providers, resellers) and customer partnerships (larger customers who have been given access to our partnership account structure). These docs are for version 2 of the Partner API. Earlier versions have been deprecated. If you have problems with an older integration, upgrade to version 2. Access to the partnership account structure and the Partnership API requires prior setup and approval by New Relic. Partnership API calls require authentication with both your partnership owner account's REST API key and your Partner ID. Accounts that are genuine New Relic partners (managed service providers, resellers) have no restrictions on using the API. Accounts set up as customer partnerships have restrictions that follow. Customer partnership restrictions If your New Relic organization is set up as a customer partnership, there are some restrictions in place if your organization is on our newer pricing plan or our newer account/user model. Details: Pricing plan. If you’re on New Relic One pricing, you can't use API calls that govern our original pricing plan. The API impacts are: You can't use the subscription object You can't use the NerdGraph Provisioning API. User model. If your New Relic account has been converted to be entirely on the New Relic One account/user model, you can no longer use API calls that create or govern users on our original user model. The API impacts are: You can't use the user object. Instead, you'd manage users with these user management docs. For the account object: you can't add users via the users field. Instead, you'd manage users with these user management docs. To determine your pricing plan or account/user model, see Overview of pricing and user model changes. Password requirements Passwords passed for account creation have these requirements: 8 to 50 characters in length Only contain letters, numbers, or special characters Cannot contain spaces Must contain at least 1 letter Must contain at least 1 number or special character Things you can do Here is an overview of the API's functionality. Account: The account object is what you use to create and update accounts. You can do the following with it: Create new Show Update Cancel Show usage Set primary admin (some accounts) Set subscription (some accounts) There is also a sub-account object for creating sub-accounts. Users: Some organizations that meet the requirements can use the user object to: Add user access to account Remove user access from account Subscription: Organizations that meet the requirements and are on our original product pricing plan can use the subscription object to configure various subscription-related traits. Get started To start using the Partnership API, see the Partner API reference docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 197.12758,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to <em>Partnership</em> API",
        "sections": "Intro to <em>Partnership</em> API",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": ") and customer <em>partnerships</em> (larger customers who have been given access to our <em>partnership</em> <em>account</em> structure). These docs are for version 2 of the <em>Partner</em> API. Earlier versions have been deprecated. If you have problems with an older <em>integration</em>, upgrade to version 2. Access to the <em>partnership</em> <em>account</em>"
      },
      "id": "603ed42328ccbcd4b3eba7ca"
    },
    {
      "sections": [
        "Partner account access for administrators",
        "Guest level access",
        "Administrative level access"
      ],
      "title": "Partner account access for administrators",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "619eaa0ec75341c74c05afc0b888d2cc46d08767",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-account-access-administrators/",
      "published_at": "2021-06-09T00:09:01Z",
      "updated_at": "2021-03-16T10:08:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers the option for partner administrators to access their customers' accounts, subject to the contractual terms of the partnership agreement. These settings are controlled by a New Relic admin. For permissions for non-partner accounts, see Users and roles. Guest level access Guest level access allows administrators to view application data on their customers' accounts. This is particularly useful for troubleshooting customer issues related to performance. Administrative level access Administrative level access, in addition to viewing application data, allows partner administrators to modify the account and subscription terms, and add or remove users from an account. This access level is required for partners who will remotely administer customer accounts using the API or who enable Restricted access on their accounts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 193.95346,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>account</em> access for administrators",
        "sections": "<em>Partner</em> <em>account</em> access for administrators",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em> offers the option for <em>partner</em> administrators to access their customers&#x27; accounts, subject to the contractual terms of the <em>partnership</em> agreement. These settings are controlled by a <em>New</em> <em>Relic</em> admin. For permissions for non-<em>partner</em> accounts, see Users and roles. Guest level access Guest"
      },
      "id": "603ec86ee7b9d2756c2a07c7"
    },
    {
      "sections": [
        "Tips and tricks",
        "Account creation and deletion",
        "Partnership owner account"
      ],
      "title": "Tips and tricks",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ba123e58f5acafea5b65e09350eba65abf430b2e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/tips-tricks/",
      "published_at": "2021-06-08T18:52:00Z",
      "updated_at": "2021-03-13T03:11:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some tips and tricks for creating and deleting New Relic partner accounts. Account creation and deletion When you create an account through the New Relic Partner API, the system checks the string submitted as the account name to ensure it is unique. If it is not unique, the system will append a number to the submitted string to ensure uniqueness; for example, account-name_1. When an account is canceled, it is not deleted from the New Relic database. Rather, it is made inactive by removing all subscriptions from the account. If you attempt to reinstate an account by calling the Account Creation API using the same account name, the system will check for uniqueness, determine that the name is not unique and create a new account with an appended number. This is in most cases not what is desired. To avoid this problem, as part of account creation, store the numeric account_id with the account name. When re-creating an account, check for the existence of this ID. If detected, rather than using the Account Creation API, use the Change Subscription API to add a new subscription to the account. Adding an active subscription to the account will re-activate the account. Partnership owner account The Partnership Owner Account is not part of the partnership. It owns the partnership. Attempts to treat it as if it were in the partnership will fail. This includes but is not limited to: Attempting to SSO into the partnership owner account using the partnership shared secret Expecting the partnership pricing to apply to the partnership owner account",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 193.30501,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Partnership</em> owner <em>account</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Here are some tips and tricks for creating and deleting <em>New</em> <em>Relic</em> <em>partner</em> accounts. <em>Account</em> creation and deletion When you create an <em>account</em> through the <em>New</em> <em>Relic</em> <em>Partner</em> API, the system checks the string submitted as the <em>account</em> name to ensure it is unique. If it is not unique, the system"
      },
      "id": "60441785196a676aed960f46"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/restricted-access-partnerships": [
    {
      "sections": [
        "Intro to Partnership API",
        "Requirements",
        "Customer partnership restrictions",
        "Password requirements",
        "Things you can do",
        "Get started"
      ],
      "title": "Intro to Partnership API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "074cf4e7c590dfa2332284a7b7f394e2f7ba45ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-api/",
      "published_at": "2021-06-09T00:09:01Z",
      "updated_at": "2021-03-29T20:10:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Partnership API allows New Relic partners, and New Relic accounts set up as customer partnerships, to manage accounts, users, and subscription-related settings. Requirements The Partnership API can be used by two types of New Relic accounts: partners (managed service providers, resellers) and customer partnerships (larger customers who have been given access to our partnership account structure). These docs are for version 2 of the Partner API. Earlier versions have been deprecated. If you have problems with an older integration, upgrade to version 2. Access to the partnership account structure and the Partnership API requires prior setup and approval by New Relic. Partnership API calls require authentication with both your partnership owner account's REST API key and your Partner ID. Accounts that are genuine New Relic partners (managed service providers, resellers) have no restrictions on using the API. Accounts set up as customer partnerships have restrictions that follow. Customer partnership restrictions If your New Relic organization is set up as a customer partnership, there are some restrictions in place if your organization is on our newer pricing plan or our newer account/user model. Details: Pricing plan. If you’re on New Relic One pricing, you can't use API calls that govern our original pricing plan. The API impacts are: You can't use the subscription object You can't use the NerdGraph Provisioning API. User model. If your New Relic account has been converted to be entirely on the New Relic One account/user model, you can no longer use API calls that create or govern users on our original user model. The API impacts are: You can't use the user object. Instead, you'd manage users with these user management docs. For the account object: you can't add users via the users field. Instead, you'd manage users with these user management docs. To determine your pricing plan or account/user model, see Overview of pricing and user model changes. Password requirements Passwords passed for account creation have these requirements: 8 to 50 characters in length Only contain letters, numbers, or special characters Cannot contain spaces Must contain at least 1 letter Must contain at least 1 number or special character Things you can do Here is an overview of the API's functionality. Account: The account object is what you use to create and update accounts. You can do the following with it: Create new Show Update Cancel Show usage Set primary admin (some accounts) Set subscription (some accounts) There is also a sub-account object for creating sub-accounts. Users: Some organizations that meet the requirements can use the user object to: Add user access to account Remove user access from account Subscription: Organizations that meet the requirements and are on our original product pricing plan can use the subscription object to configure various subscription-related traits. Get started To start using the Partnership API, see the Partner API reference docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 197.12758,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to <em>Partnership</em> API",
        "sections": "Intro to <em>Partnership</em> API",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": ") and customer <em>partnerships</em> (larger customers who have been given access to our <em>partnership</em> <em>account</em> structure). These docs are for version 2 of the <em>Partner</em> API. Earlier versions have been deprecated. If you have problems with an older <em>integration</em>, upgrade to version 2. Access to the <em>partnership</em> <em>account</em>"
      },
      "id": "603ed42328ccbcd4b3eba7ca"
    },
    {
      "sections": [
        "Partnership accounts, users, and subscriptions",
        "Partnerships with New Relic",
        "Account hierarchy",
        "Tip",
        "Partnership owner accounts (POA)",
        "Sub-accounts with partnerships",
        "Account users",
        "Partnership pricing"
      ],
      "title": "Partnership accounts, users, and subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ae2f39a8ff0395815b3e31a9d8ad9361beca2c4e",
      "image": "https://docs.newrelic.com/static/acecf0ec89c448506faef0e4eeff87e6/db3a5/partnership-hierarchy.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partnership-accounts-users-subscriptions/",
      "published_at": "2021-06-09T05:31:31Z",
      "updated_at": "2021-03-29T16:17:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic organizations set up as partnership accounts have access to an enhanced hierarchical way of organizing their account structure. Partnerships with New Relic There are two types of New Relic organizations that are able to use our partnership account structure and the Partnership API: An actual partnership: A partnership refers to managed service providers or resellers, who offer New Relic products to their customers. Heroku is one example of such a New Relic partner. A customer partnership: some of our larger organizations also make use of our partnership account structure. We call these customers \"customer partnerships.\" Use of our partnership account structure requires prior approval and set up by New Relic representatives. For customer partnerships, New Relic contacts organizations that would benefit from such a structure. Partnerships are identified by a numeric PARTNER_ID. In some cases, a New Relic customer may have more than one partnership; for example, when one section of New Relic users must be managed differently from another. Partnerships are administered by a partnership owner account. The account that owns a partnership functions differently from a regular account. If multiple partnerships have been set up, each has a unique PARTNER_ID. Account hierarchy New Relic partnership organizations consist of the partnership owning account, partnerships, master accounts, and sub-accounts. A partnership can have multiple master accounts and sub-accounts. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you do not have a partnership organization, you can only have one master account. For more information, see Manage apps or users with sub-accounts. All master accounts and sub-accounts roll up to your partnership account. Partnership owner accounts (POA) The partnership owner account (POA) is the entity that is used to administer a partnership. It controls which users manage accounts under partnerships, have access to the partner API, and manage other aspects of the partnership. Do not monitor your own applications from the partnership owner account. Instead, create an account within the partnership and monitor apps from that account. Users on the partnership owner account can access accounts under their partnerships and enjoy User level privileges. Admins on the POA can access accounts under their partnerships and enjoy Admin level privileges, including permission to manage users. The Owner of the partnership owner account will still only have Admin level access on accounts under the partnership. That means that the owner cannot enable SAML SSO, change the account owner, cancel the account via the UI, etc. The partnership owner account enjoys special privileges, and it lets you exercise the capabilities defined in your partnership agreement with New Relic. For example, you may use your partnership owner account with the New Relic Partnership API to set up and manage users on your accounts or to view your customers' performance data in the New Relic UI. Tip Many of the Partnership API calls return an account status as part of the XML. Sub-accounts with partnerships Sub-accounts behave differently than other New Relic accounts provisioned through your partnership: Sub-accounts Comments Account creation Sub-accounts can be created through the Partnership API or New Relic user interface. In order to group accounts through the New Relic user interface, your partnership must have Admin privileges, and the account must have the appropriate subscription level. If you have any questions about partnership privileges or subscription levels, contact your New Relic account representative. Sub-accounts do not have a New Relic subscription of their own. They inherit the master account's subscription. Billing Billing is applied at the master account level. Exception: Reseller partnerships receive consolidated billing for all accounts under the partnership. Permissions Admin-level users on a master account have the ability to create, modify, and delete sub-accounts for the master account. Users that have been granted access permissions on a master account automatically inherit the same level of access for all sub-accounts. This is also true for add-on roles. Exception: Sub-account users will not receive alert emails or weekly report emails unless they are explicitly granted permission on these sub-accounts. Account users You can use the Partnership user API to add and maintain your customer users. An account must always have at least one person (the Owner) associated with it. For security purposes, you cannot change an account Owner with the Partnership user API. Instead, you must change the account Owner from the Users page in the New Relic UI. In addition, a specific user may be associated with multiple accounts. For example, many New Relic users have accounts through a partnership, and they also have accounts they created directly with New Relic. Partnership pricing Accounts within a partnership organization may have different levels of access to New Relic products. Tip Many of the Partnership API calls return a subscription status as part of the XML. For accounts set up through a partnership: An account can have multiple New Relic products associated with it. However, only one subscription per product may be active at any time. For example, a user may have both an Essentials subscription and a higher service level Pro Trial subscription. When the Pro Trial subscription expires, the service level returns to the Essentials subscription. Promotions may appear as a subscription change. Several factors affect starting and stopping subscriptions, including how New Relic handles pricing and billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 197.08328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>accounts</em>, users, and subscriptions",
        "sections": "<em>Partnerships</em> with <em>New</em> <em>Relic</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " these customers &quot;customer <em>partnerships</em>.&quot; Use of our <em>partnership</em> <em>account</em> structure requires prior approval and set up by <em>New</em> <em>Relic</em> representatives. For customer <em>partnerships</em>, <em>New</em> <em>Relic</em> contacts organizations that would benefit from such a structure. <em>Partnerships</em> are identified by a numeric <em>PARTNER</em>"
      },
      "id": "603ece55e7b9d273782a0804"
    },
    {
      "sections": [
        "Partner account access for administrators",
        "Guest level access",
        "Administrative level access"
      ],
      "title": "Partner account access for administrators",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "619eaa0ec75341c74c05afc0b888d2cc46d08767",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-account-access-administrators/",
      "published_at": "2021-06-09T00:09:01Z",
      "updated_at": "2021-03-16T10:08:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers the option for partner administrators to access their customers' accounts, subject to the contractual terms of the partnership agreement. These settings are controlled by a New Relic admin. For permissions for non-partner accounts, see Users and roles. Guest level access Guest level access allows administrators to view application data on their customers' accounts. This is particularly useful for troubleshooting customer issues related to performance. Administrative level access Administrative level access, in addition to viewing application data, allows partner administrators to modify the account and subscription terms, and add or remove users from an account. This access level is required for partners who will remotely administer customer accounts using the API or who enable Restricted access on their accounts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 193.95346,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>account</em> access for administrators",
        "sections": "<em>Partner</em> <em>account</em> access for administrators",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em> offers the option for <em>partner</em> administrators to access their customers&#x27; accounts, subject to the contractual terms of the <em>partnership</em> agreement. These settings are controlled by a <em>New</em> <em>Relic</em> admin. For permissions for non-<em>partner</em> accounts, see Users and roles. Guest level access Guest"
      },
      "id": "603ec86ee7b9d2756c2a07c7"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/staging-production": [
    {
      "sections": [
        "Intro to Partnership API",
        "Requirements",
        "Customer partnership restrictions",
        "Password requirements",
        "Things you can do",
        "Get started"
      ],
      "title": "Intro to Partnership API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "074cf4e7c590dfa2332284a7b7f394e2f7ba45ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-api/",
      "published_at": "2021-06-09T00:09:01Z",
      "updated_at": "2021-03-29T20:10:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Partnership API allows New Relic partners, and New Relic accounts set up as customer partnerships, to manage accounts, users, and subscription-related settings. Requirements The Partnership API can be used by two types of New Relic accounts: partners (managed service providers, resellers) and customer partnerships (larger customers who have been given access to our partnership account structure). These docs are for version 2 of the Partner API. Earlier versions have been deprecated. If you have problems with an older integration, upgrade to version 2. Access to the partnership account structure and the Partnership API requires prior setup and approval by New Relic. Partnership API calls require authentication with both your partnership owner account's REST API key and your Partner ID. Accounts that are genuine New Relic partners (managed service providers, resellers) have no restrictions on using the API. Accounts set up as customer partnerships have restrictions that follow. Customer partnership restrictions If your New Relic organization is set up as a customer partnership, there are some restrictions in place if your organization is on our newer pricing plan or our newer account/user model. Details: Pricing plan. If you’re on New Relic One pricing, you can't use API calls that govern our original pricing plan. The API impacts are: You can't use the subscription object You can't use the NerdGraph Provisioning API. User model. If your New Relic account has been converted to be entirely on the New Relic One account/user model, you can no longer use API calls that create or govern users on our original user model. The API impacts are: You can't use the user object. Instead, you'd manage users with these user management docs. For the account object: you can't add users via the users field. Instead, you'd manage users with these user management docs. To determine your pricing plan or account/user model, see Overview of pricing and user model changes. Password requirements Passwords passed for account creation have these requirements: 8 to 50 characters in length Only contain letters, numbers, or special characters Cannot contain spaces Must contain at least 1 letter Must contain at least 1 number or special character Things you can do Here is an overview of the API's functionality. Account: The account object is what you use to create and update accounts. You can do the following with it: Create new Show Update Cancel Show usage Set primary admin (some accounts) Set subscription (some accounts) There is also a sub-account object for creating sub-accounts. Users: Some organizations that meet the requirements can use the user object to: Add user access to account Remove user access from account Subscription: Organizations that meet the requirements and are on our original product pricing plan can use the subscription object to configure various subscription-related traits. Get started To start using the Partnership API, see the Partner API reference docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 197.12758,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to <em>Partnership</em> API",
        "sections": "Intro to <em>Partnership</em> API",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": ") and customer <em>partnerships</em> (larger customers who have been given access to our <em>partnership</em> <em>account</em> structure). These docs are for version 2 of the <em>Partner</em> API. Earlier versions have been deprecated. If you have problems with an older <em>integration</em>, upgrade to version 2. Access to the <em>partnership</em> <em>account</em>"
      },
      "id": "603ed42328ccbcd4b3eba7ca"
    },
    {
      "sections": [
        "Partnership accounts, users, and subscriptions",
        "Partnerships with New Relic",
        "Account hierarchy",
        "Tip",
        "Partnership owner accounts (POA)",
        "Sub-accounts with partnerships",
        "Account users",
        "Partnership pricing"
      ],
      "title": "Partnership accounts, users, and subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ae2f39a8ff0395815b3e31a9d8ad9361beca2c4e",
      "image": "https://docs.newrelic.com/static/acecf0ec89c448506faef0e4eeff87e6/db3a5/partnership-hierarchy.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partnership-accounts-users-subscriptions/",
      "published_at": "2021-06-09T05:31:31Z",
      "updated_at": "2021-03-29T16:17:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic organizations set up as partnership accounts have access to an enhanced hierarchical way of organizing their account structure. Partnerships with New Relic There are two types of New Relic organizations that are able to use our partnership account structure and the Partnership API: An actual partnership: A partnership refers to managed service providers or resellers, who offer New Relic products to their customers. Heroku is one example of such a New Relic partner. A customer partnership: some of our larger organizations also make use of our partnership account structure. We call these customers \"customer partnerships.\" Use of our partnership account structure requires prior approval and set up by New Relic representatives. For customer partnerships, New Relic contacts organizations that would benefit from such a structure. Partnerships are identified by a numeric PARTNER_ID. In some cases, a New Relic customer may have more than one partnership; for example, when one section of New Relic users must be managed differently from another. Partnerships are administered by a partnership owner account. The account that owns a partnership functions differently from a regular account. If multiple partnerships have been set up, each has a unique PARTNER_ID. Account hierarchy New Relic partnership organizations consist of the partnership owning account, partnerships, master accounts, and sub-accounts. A partnership can have multiple master accounts and sub-accounts. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you do not have a partnership organization, you can only have one master account. For more information, see Manage apps or users with sub-accounts. All master accounts and sub-accounts roll up to your partnership account. Partnership owner accounts (POA) The partnership owner account (POA) is the entity that is used to administer a partnership. It controls which users manage accounts under partnerships, have access to the partner API, and manage other aspects of the partnership. Do not monitor your own applications from the partnership owner account. Instead, create an account within the partnership and monitor apps from that account. Users on the partnership owner account can access accounts under their partnerships and enjoy User level privileges. Admins on the POA can access accounts under their partnerships and enjoy Admin level privileges, including permission to manage users. The Owner of the partnership owner account will still only have Admin level access on accounts under the partnership. That means that the owner cannot enable SAML SSO, change the account owner, cancel the account via the UI, etc. The partnership owner account enjoys special privileges, and it lets you exercise the capabilities defined in your partnership agreement with New Relic. For example, you may use your partnership owner account with the New Relic Partnership API to set up and manage users on your accounts or to view your customers' performance data in the New Relic UI. Tip Many of the Partnership API calls return an account status as part of the XML. Sub-accounts with partnerships Sub-accounts behave differently than other New Relic accounts provisioned through your partnership: Sub-accounts Comments Account creation Sub-accounts can be created through the Partnership API or New Relic user interface. In order to group accounts through the New Relic user interface, your partnership must have Admin privileges, and the account must have the appropriate subscription level. If you have any questions about partnership privileges or subscription levels, contact your New Relic account representative. Sub-accounts do not have a New Relic subscription of their own. They inherit the master account's subscription. Billing Billing is applied at the master account level. Exception: Reseller partnerships receive consolidated billing for all accounts under the partnership. Permissions Admin-level users on a master account have the ability to create, modify, and delete sub-accounts for the master account. Users that have been granted access permissions on a master account automatically inherit the same level of access for all sub-accounts. This is also true for add-on roles. Exception: Sub-account users will not receive alert emails or weekly report emails unless they are explicitly granted permission on these sub-accounts. Account users You can use the Partnership user API to add and maintain your customer users. An account must always have at least one person (the Owner) associated with it. For security purposes, you cannot change an account Owner with the Partnership user API. Instead, you must change the account Owner from the Users page in the New Relic UI. In addition, a specific user may be associated with multiple accounts. For example, many New Relic users have accounts through a partnership, and they also have accounts they created directly with New Relic. Partnership pricing Accounts within a partnership organization may have different levels of access to New Relic products. Tip Many of the Partnership API calls return a subscription status as part of the XML. For accounts set up through a partnership: An account can have multiple New Relic products associated with it. However, only one subscription per product may be active at any time. For example, a user may have both an Essentials subscription and a higher service level Pro Trial subscription. When the Pro Trial subscription expires, the service level returns to the Essentials subscription. Promotions may appear as a subscription change. Several factors affect starting and stopping subscriptions, including how New Relic handles pricing and billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 197.08328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>accounts</em>, users, and subscriptions",
        "sections": "<em>Partnerships</em> with <em>New</em> <em>Relic</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " these customers &quot;customer <em>partnerships</em>.&quot; Use of our <em>partnership</em> <em>account</em> structure requires prior approval and set up by <em>New</em> <em>Relic</em> representatives. For customer <em>partnerships</em>, <em>New</em> <em>Relic</em> contacts organizations that would benefit from such a structure. <em>Partnerships</em> are identified by a numeric <em>PARTNER</em>"
      },
      "id": "603ece55e7b9d273782a0804"
    },
    {
      "sections": [
        "Partner account access for administrators",
        "Guest level access",
        "Administrative level access"
      ],
      "title": "Partner account access for administrators",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "619eaa0ec75341c74c05afc0b888d2cc46d08767",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-account-access-administrators/",
      "published_at": "2021-06-09T00:09:01Z",
      "updated_at": "2021-03-16T10:08:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers the option for partner administrators to access their customers' accounts, subject to the contractual terms of the partnership agreement. These settings are controlled by a New Relic admin. For permissions for non-partner accounts, see Users and roles. Guest level access Guest level access allows administrators to view application data on their customers' accounts. This is particularly useful for troubleshooting customer issues related to performance. Administrative level access Administrative level access, in addition to viewing application data, allows partner administrators to modify the account and subscription terms, and add or remove users from an account. This access level is required for partners who will remotely administer customer accounts using the API or who enable Restricted access on their accounts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 193.95346,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>account</em> access for administrators",
        "sections": "<em>Partner</em> <em>account</em> access for administrators",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em> offers the option for <em>partner</em> administrators to access their customers&#x27; accounts, subject to the contractual terms of the <em>partnership</em> agreement. These settings are controlled by a <em>New</em> <em>Relic</em> admin. For permissions for non-<em>partner</em> accounts, see Users and roles. Guest level access Guest"
      },
      "id": "603ec86ee7b9d2756c2a07c7"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/tips-tricks": [
    {
      "sections": [
        "Intro to Partnership API",
        "Requirements",
        "Customer partnership restrictions",
        "Password requirements",
        "Things you can do",
        "Get started"
      ],
      "title": "Intro to Partnership API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "074cf4e7c590dfa2332284a7b7f394e2f7ba45ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-api/",
      "published_at": "2021-06-09T00:09:01Z",
      "updated_at": "2021-03-29T20:10:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Partnership API allows New Relic partners, and New Relic accounts set up as customer partnerships, to manage accounts, users, and subscription-related settings. Requirements The Partnership API can be used by two types of New Relic accounts: partners (managed service providers, resellers) and customer partnerships (larger customers who have been given access to our partnership account structure). These docs are for version 2 of the Partner API. Earlier versions have been deprecated. If you have problems with an older integration, upgrade to version 2. Access to the partnership account structure and the Partnership API requires prior setup and approval by New Relic. Partnership API calls require authentication with both your partnership owner account's REST API key and your Partner ID. Accounts that are genuine New Relic partners (managed service providers, resellers) have no restrictions on using the API. Accounts set up as customer partnerships have restrictions that follow. Customer partnership restrictions If your New Relic organization is set up as a customer partnership, there are some restrictions in place if your organization is on our newer pricing plan or our newer account/user model. Details: Pricing plan. If you’re on New Relic One pricing, you can't use API calls that govern our original pricing plan. The API impacts are: You can't use the subscription object You can't use the NerdGraph Provisioning API. User model. If your New Relic account has been converted to be entirely on the New Relic One account/user model, you can no longer use API calls that create or govern users on our original user model. The API impacts are: You can't use the user object. Instead, you'd manage users with these user management docs. For the account object: you can't add users via the users field. Instead, you'd manage users with these user management docs. To determine your pricing plan or account/user model, see Overview of pricing and user model changes. Password requirements Passwords passed for account creation have these requirements: 8 to 50 characters in length Only contain letters, numbers, or special characters Cannot contain spaces Must contain at least 1 letter Must contain at least 1 number or special character Things you can do Here is an overview of the API's functionality. Account: The account object is what you use to create and update accounts. You can do the following with it: Create new Show Update Cancel Show usage Set primary admin (some accounts) Set subscription (some accounts) There is also a sub-account object for creating sub-accounts. Users: Some organizations that meet the requirements can use the user object to: Add user access to account Remove user access from account Subscription: Organizations that meet the requirements and are on our original product pricing plan can use the subscription object to configure various subscription-related traits. Get started To start using the Partnership API, see the Partner API reference docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 197.12758,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to <em>Partnership</em> API",
        "sections": "Intro to <em>Partnership</em> API",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": ") and customer <em>partnerships</em> (larger customers who have been given access to our <em>partnership</em> <em>account</em> structure). These docs are for version 2 of the <em>Partner</em> API. Earlier versions have been deprecated. If you have problems with an older <em>integration</em>, upgrade to version 2. Access to the <em>partnership</em> <em>account</em>"
      },
      "id": "603ed42328ccbcd4b3eba7ca"
    },
    {
      "sections": [
        "Partnership accounts, users, and subscriptions",
        "Partnerships with New Relic",
        "Account hierarchy",
        "Tip",
        "Partnership owner accounts (POA)",
        "Sub-accounts with partnerships",
        "Account users",
        "Partnership pricing"
      ],
      "title": "Partnership accounts, users, and subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ae2f39a8ff0395815b3e31a9d8ad9361beca2c4e",
      "image": "https://docs.newrelic.com/static/acecf0ec89c448506faef0e4eeff87e6/db3a5/partnership-hierarchy.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partnership-accounts-users-subscriptions/",
      "published_at": "2021-06-09T05:31:31Z",
      "updated_at": "2021-03-29T16:17:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic organizations set up as partnership accounts have access to an enhanced hierarchical way of organizing their account structure. Partnerships with New Relic There are two types of New Relic organizations that are able to use our partnership account structure and the Partnership API: An actual partnership: A partnership refers to managed service providers or resellers, who offer New Relic products to their customers. Heroku is one example of such a New Relic partner. A customer partnership: some of our larger organizations also make use of our partnership account structure. We call these customers \"customer partnerships.\" Use of our partnership account structure requires prior approval and set up by New Relic representatives. For customer partnerships, New Relic contacts organizations that would benefit from such a structure. Partnerships are identified by a numeric PARTNER_ID. In some cases, a New Relic customer may have more than one partnership; for example, when one section of New Relic users must be managed differently from another. Partnerships are administered by a partnership owner account. The account that owns a partnership functions differently from a regular account. If multiple partnerships have been set up, each has a unique PARTNER_ID. Account hierarchy New Relic partnership organizations consist of the partnership owning account, partnerships, master accounts, and sub-accounts. A partnership can have multiple master accounts and sub-accounts. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you do not have a partnership organization, you can only have one master account. For more information, see Manage apps or users with sub-accounts. All master accounts and sub-accounts roll up to your partnership account. Partnership owner accounts (POA) The partnership owner account (POA) is the entity that is used to administer a partnership. It controls which users manage accounts under partnerships, have access to the partner API, and manage other aspects of the partnership. Do not monitor your own applications from the partnership owner account. Instead, create an account within the partnership and monitor apps from that account. Users on the partnership owner account can access accounts under their partnerships and enjoy User level privileges. Admins on the POA can access accounts under their partnerships and enjoy Admin level privileges, including permission to manage users. The Owner of the partnership owner account will still only have Admin level access on accounts under the partnership. That means that the owner cannot enable SAML SSO, change the account owner, cancel the account via the UI, etc. The partnership owner account enjoys special privileges, and it lets you exercise the capabilities defined in your partnership agreement with New Relic. For example, you may use your partnership owner account with the New Relic Partnership API to set up and manage users on your accounts or to view your customers' performance data in the New Relic UI. Tip Many of the Partnership API calls return an account status as part of the XML. Sub-accounts with partnerships Sub-accounts behave differently than other New Relic accounts provisioned through your partnership: Sub-accounts Comments Account creation Sub-accounts can be created through the Partnership API or New Relic user interface. In order to group accounts through the New Relic user interface, your partnership must have Admin privileges, and the account must have the appropriate subscription level. If you have any questions about partnership privileges or subscription levels, contact your New Relic account representative. Sub-accounts do not have a New Relic subscription of their own. They inherit the master account's subscription. Billing Billing is applied at the master account level. Exception: Reseller partnerships receive consolidated billing for all accounts under the partnership. Permissions Admin-level users on a master account have the ability to create, modify, and delete sub-accounts for the master account. Users that have been granted access permissions on a master account automatically inherit the same level of access for all sub-accounts. This is also true for add-on roles. Exception: Sub-account users will not receive alert emails or weekly report emails unless they are explicitly granted permission on these sub-accounts. Account users You can use the Partnership user API to add and maintain your customer users. An account must always have at least one person (the Owner) associated with it. For security purposes, you cannot change an account Owner with the Partnership user API. Instead, you must change the account Owner from the Users page in the New Relic UI. In addition, a specific user may be associated with multiple accounts. For example, many New Relic users have accounts through a partnership, and they also have accounts they created directly with New Relic. Partnership pricing Accounts within a partnership organization may have different levels of access to New Relic products. Tip Many of the Partnership API calls return a subscription status as part of the XML. For accounts set up through a partnership: An account can have multiple New Relic products associated with it. However, only one subscription per product may be active at any time. For example, a user may have both an Essentials subscription and a higher service level Pro Trial subscription. When the Pro Trial subscription expires, the service level returns to the Essentials subscription. Promotions may appear as a subscription change. Several factors affect starting and stopping subscriptions, including how New Relic handles pricing and billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 197.08328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>accounts</em>, users, and subscriptions",
        "sections": "<em>Partnerships</em> with <em>New</em> <em>Relic</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " these customers &quot;customer <em>partnerships</em>.&quot; Use of our <em>partnership</em> <em>account</em> structure requires prior approval and set up by <em>New</em> <em>Relic</em> representatives. For customer <em>partnerships</em>, <em>New</em> <em>Relic</em> contacts organizations that would benefit from such a structure. <em>Partnerships</em> are identified by a numeric <em>PARTNER</em>"
      },
      "id": "603ece55e7b9d273782a0804"
    },
    {
      "sections": [
        "Partner account access for administrators",
        "Guest level access",
        "Administrative level access"
      ],
      "title": "Partner account access for administrators",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "619eaa0ec75341c74c05afc0b888d2cc46d08767",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-account-access-administrators/",
      "published_at": "2021-06-09T00:09:01Z",
      "updated_at": "2021-03-16T10:08:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers the option for partner administrators to access their customers' accounts, subject to the contractual terms of the partnership agreement. These settings are controlled by a New Relic admin. For permissions for non-partner accounts, see Users and roles. Guest level access Guest level access allows administrators to view application data on their customers' accounts. This is particularly useful for troubleshooting customer issues related to performance. Administrative level access Administrative level access, in addition to viewing application data, allows partner administrators to modify the account and subscription terms, and add or remove users from an account. This access level is required for partners who will remotely administer customer accounts using the API or who enable Restricted access on their accounts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 193.95346,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>account</em> access for administrators",
        "sections": "<em>Partner</em> <em>account</em> access for administrators",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em> offers the option for <em>partner</em> administrators to access their customers&#x27; accounts, subject to the contractual terms of the <em>partnership</em> agreement. These settings are controlled by a <em>New</em> <em>Relic</em> admin. For permissions for non-<em>partner</em> accounts, see Users and roles. Guest level access Guest"
      },
      "id": "603ec86ee7b9d2756c2a07c7"
    }
  ],
  "/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/welcome-messages-partnerships": [
    {
      "sections": [
        "Intro to Partnership API",
        "Requirements",
        "Customer partnership restrictions",
        "Password requirements",
        "Things you can do",
        "Get started"
      ],
      "title": "Intro to Partnership API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "074cf4e7c590dfa2332284a7b7f394e2f7ba45ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-api/",
      "published_at": "2021-06-09T00:09:01Z",
      "updated_at": "2021-03-29T20:10:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Partnership API allows New Relic partners, and New Relic accounts set up as customer partnerships, to manage accounts, users, and subscription-related settings. Requirements The Partnership API can be used by two types of New Relic accounts: partners (managed service providers, resellers) and customer partnerships (larger customers who have been given access to our partnership account structure). These docs are for version 2 of the Partner API. Earlier versions have been deprecated. If you have problems with an older integration, upgrade to version 2. Access to the partnership account structure and the Partnership API requires prior setup and approval by New Relic. Partnership API calls require authentication with both your partnership owner account's REST API key and your Partner ID. Accounts that are genuine New Relic partners (managed service providers, resellers) have no restrictions on using the API. Accounts set up as customer partnerships have restrictions that follow. Customer partnership restrictions If your New Relic organization is set up as a customer partnership, there are some restrictions in place if your organization is on our newer pricing plan or our newer account/user model. Details: Pricing plan. If you’re on New Relic One pricing, you can't use API calls that govern our original pricing plan. The API impacts are: You can't use the subscription object You can't use the NerdGraph Provisioning API. User model. If your New Relic account has been converted to be entirely on the New Relic One account/user model, you can no longer use API calls that create or govern users on our original user model. The API impacts are: You can't use the user object. Instead, you'd manage users with these user management docs. For the account object: you can't add users via the users field. Instead, you'd manage users with these user management docs. To determine your pricing plan or account/user model, see Overview of pricing and user model changes. Password requirements Passwords passed for account creation have these requirements: 8 to 50 characters in length Only contain letters, numbers, or special characters Cannot contain spaces Must contain at least 1 letter Must contain at least 1 number or special character Things you can do Here is an overview of the API's functionality. Account: The account object is what you use to create and update accounts. You can do the following with it: Create new Show Update Cancel Show usage Set primary admin (some accounts) Set subscription (some accounts) There is also a sub-account object for creating sub-accounts. Users: Some organizations that meet the requirements can use the user object to: Add user access to account Remove user access from account Subscription: Organizations that meet the requirements and are on our original product pricing plan can use the subscription object to configure various subscription-related traits. Get started To start using the Partnership API, see the Partner API reference docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 197.12758,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to <em>Partnership</em> API",
        "sections": "Intro to <em>Partnership</em> API",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": ") and customer <em>partnerships</em> (larger customers who have been given access to our <em>partnership</em> <em>account</em> structure). These docs are for version 2 of the <em>Partner</em> API. Earlier versions have been deprecated. If you have problems with an older <em>integration</em>, upgrade to version 2. Access to the <em>partnership</em> <em>account</em>"
      },
      "id": "603ed42328ccbcd4b3eba7ca"
    },
    {
      "sections": [
        "Partnership accounts, users, and subscriptions",
        "Partnerships with New Relic",
        "Account hierarchy",
        "Tip",
        "Partnership owner accounts (POA)",
        "Sub-accounts with partnerships",
        "Account users",
        "Partnership pricing"
      ],
      "title": "Partnership accounts, users, and subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "ae2f39a8ff0395815b3e31a9d8ad9361beca2c4e",
      "image": "https://docs.newrelic.com/static/acecf0ec89c448506faef0e4eeff87e6/db3a5/partnership-hierarchy.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partnership-accounts-users-subscriptions/",
      "published_at": "2021-06-09T05:31:31Z",
      "updated_at": "2021-03-29T16:17:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic organizations set up as partnership accounts have access to an enhanced hierarchical way of organizing their account structure. Partnerships with New Relic There are two types of New Relic organizations that are able to use our partnership account structure and the Partnership API: An actual partnership: A partnership refers to managed service providers or resellers, who offer New Relic products to their customers. Heroku is one example of such a New Relic partner. A customer partnership: some of our larger organizations also make use of our partnership account structure. We call these customers \"customer partnerships.\" Use of our partnership account structure requires prior approval and set up by New Relic representatives. For customer partnerships, New Relic contacts organizations that would benefit from such a structure. Partnerships are identified by a numeric PARTNER_ID. In some cases, a New Relic customer may have more than one partnership; for example, when one section of New Relic users must be managed differently from another. Partnerships are administered by a partnership owner account. The account that owns a partnership functions differently from a regular account. If multiple partnerships have been set up, each has a unique PARTNER_ID. Account hierarchy New Relic partnership organizations consist of the partnership owning account, partnerships, master accounts, and sub-accounts. A partnership can have multiple master accounts and sub-accounts. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you do not have a partnership organization, you can only have one master account. For more information, see Manage apps or users with sub-accounts. All master accounts and sub-accounts roll up to your partnership account. Partnership owner accounts (POA) The partnership owner account (POA) is the entity that is used to administer a partnership. It controls which users manage accounts under partnerships, have access to the partner API, and manage other aspects of the partnership. Do not monitor your own applications from the partnership owner account. Instead, create an account within the partnership and monitor apps from that account. Users on the partnership owner account can access accounts under their partnerships and enjoy User level privileges. Admins on the POA can access accounts under their partnerships and enjoy Admin level privileges, including permission to manage users. The Owner of the partnership owner account will still only have Admin level access on accounts under the partnership. That means that the owner cannot enable SAML SSO, change the account owner, cancel the account via the UI, etc. The partnership owner account enjoys special privileges, and it lets you exercise the capabilities defined in your partnership agreement with New Relic. For example, you may use your partnership owner account with the New Relic Partnership API to set up and manage users on your accounts or to view your customers' performance data in the New Relic UI. Tip Many of the Partnership API calls return an account status as part of the XML. Sub-accounts with partnerships Sub-accounts behave differently than other New Relic accounts provisioned through your partnership: Sub-accounts Comments Account creation Sub-accounts can be created through the Partnership API or New Relic user interface. In order to group accounts through the New Relic user interface, your partnership must have Admin privileges, and the account must have the appropriate subscription level. If you have any questions about partnership privileges or subscription levels, contact your New Relic account representative. Sub-accounts do not have a New Relic subscription of their own. They inherit the master account's subscription. Billing Billing is applied at the master account level. Exception: Reseller partnerships receive consolidated billing for all accounts under the partnership. Permissions Admin-level users on a master account have the ability to create, modify, and delete sub-accounts for the master account. Users that have been granted access permissions on a master account automatically inherit the same level of access for all sub-accounts. This is also true for add-on roles. Exception: Sub-account users will not receive alert emails or weekly report emails unless they are explicitly granted permission on these sub-accounts. Account users You can use the Partnership user API to add and maintain your customer users. An account must always have at least one person (the Owner) associated with it. For security purposes, you cannot change an account Owner with the Partnership user API. Instead, you must change the account Owner from the Users page in the New Relic UI. In addition, a specific user may be associated with multiple accounts. For example, many New Relic users have accounts through a partnership, and they also have accounts they created directly with New Relic. Partnership pricing Accounts within a partnership organization may have different levels of access to New Relic products. Tip Many of the Partnership API calls return a subscription status as part of the XML. For accounts set up through a partnership: An account can have multiple New Relic products associated with it. However, only one subscription per product may be active at any time. For example, a user may have both an Essentials subscription and a higher service level Pro Trial subscription. When the Pro Trial subscription expires, the service level returns to the Essentials subscription. Promotions may appear as a subscription change. Several factors affect starting and stopping subscriptions, including how New Relic handles pricing and billing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 197.08328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>accounts</em>, users, and subscriptions",
        "sections": "<em>Partnerships</em> with <em>New</em> <em>Relic</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " these customers &quot;customer <em>partnerships</em>.&quot; Use of our <em>partnership</em> <em>account</em> structure requires prior approval and set up by <em>New</em> <em>Relic</em> representatives. For customer <em>partnerships</em>, <em>New</em> <em>Relic</em> contacts organizations that would benefit from such a structure. <em>Partnerships</em> are identified by a numeric <em>PARTNER</em>"
      },
      "id": "603ece55e7b9d273782a0804"
    },
    {
      "sections": [
        "Partner account access for administrators",
        "Guest level access",
        "Administrative level access"
      ],
      "title": "Partner account access for administrators",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "619eaa0ec75341c74c05afc0b888d2cc46d08767",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-account-access-administrators/",
      "published_at": "2021-06-09T00:09:01Z",
      "updated_at": "2021-03-16T10:08:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers the option for partner administrators to access their customers' accounts, subject to the contractual terms of the partnership agreement. These settings are controlled by a New Relic admin. For permissions for non-partner accounts, see Users and roles. Guest level access Guest level access allows administrators to view application data on their customers' accounts. This is particularly useful for troubleshooting customer issues related to performance. Administrative level access Administrative level access, in addition to viewing application data, allows partner administrators to modify the account and subscription terms, and add or remove users from an account. This access level is required for partners who will remotely administer customer accounts using the API or who enable Restricted access on their accounts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 193.95346,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partner</em> <em>account</em> access for administrators",
        "sections": "<em>Partner</em> <em>account</em> access for administrators",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em> offers the option for <em>partner</em> administrators to access their customers&#x27; accounts, subject to the contractual terms of the <em>partnership</em> agreement. These settings are controlled by a <em>New</em> <em>Relic</em> admin. For permissions for non-<em>partner</em> accounts, see Users and roles. Guest level access Guest"
      },
      "id": "603ec86ee7b9d2756c2a07c7"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/getting-started/partner-marketing": [
    {
      "sections": [
        "NerdGraph tutorial: Partner and reseller subscriptions",
        "Important",
        "Get started: endpoint and API key",
        "Product subscriptions for an account",
        "Tip",
        "Mapping for products (productId)",
        "APM",
        "Example Requests",
        "Mobile",
        "Example Request",
        "Insights",
        "Browser",
        "Synthetics",
        "Infrastructure",
        "Serverless for Lambda",
        "Traces",
        "Logs",
        "Metrics",
        "GraphQL Types",
        "Subscription",
        "Product",
        "Unit of measure",
        "Examples",
        "Create (replace existing) subscription with many products",
        "Create (replace existing) subscription with one product - Logs",
        "Variations from the Partnership API"
      ],
      "title": "NerdGraph tutorial: Partner and reseller subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Getting started"
      ],
      "external_id": "b5831e3798a6356482988d72fc3b5dc2d39c6aad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/provisions-your-subscriptions-nerdgraph/",
      "published_at": "2021-06-09T06:36:21Z",
      "updated_at": "2021-05-11T05:05:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The Provisioning API is only available for Partner accounts. The Provisioning NerdGraph API allows you, as a New Relic partner to create subscriptions for your accounts containing a more extensive range of New Relic products than the Partner API. The Provisioning API and Partnership API are compatible when it comes to the products supported by both (APM, Mobile, Insights, Browser, Synthetics, and Infrastructure). If you use the Provisioning API to create a subscription for any of the newer products, you will no longer be able to update the account using the Partnership API V2. The Provisioning API is a GraphQL mutation field named organizationProvisioningUpdatePartnerSubscription. To learn more about how to use this mutation, see Introduction to NerdGraph. Get started: endpoint and API key The provisioning API uses your user key. The endpoint for the Provisioning API is: https://api.newrelic.com/graphql Copy To get started, run the following command: curl -v -d'{\"query\": \"mutation { organizationProvisioningUpdatePartnerSubscription(accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [{id: 9200, name: \\\"Traces\\\", unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 40}]}]) {enqueued errors {message path } } }\"}' -H'Content-type: application/json' -H'Api-key: PERSONAL_API_KEY' https://api.newrelic.com/graphql Copy Product subscriptions for an account The Provisioning API does not allow you to upgrade or downgrade individual product subscriptions for an account. Instead, the API requires you to replace (add) the configuration for all product subscriptions for the account. Tip If any product configurations are not included, the Provisioning API automatically provisions the account with a free product (when available). Mapping for products (productId) With each account creation call, you must supply at least one New Relic product type. The mutation query only accepts the numeric productId for the type. APM The number of allowable hosts per account and the data retention period vary by subscription level within New Relic APM’s pricing structure. For example, New Relic APM allows an unlimited number of allowable hosts for Lite accounts, but only a 24-hour data retention period. In addition, pricing and data retention depend on whether you select pricing plans based on hosts or compute units (CU). Use the product ID’s integer format to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Lite 18 Not applicable Standard 41 HOSTS Standard Annual 38 HOSTS Pro (Host) 42 HOSTS Pro Annual (Host) 39 HOSTS Enterprise 43 HOSTS Enterprise Annual 40 HOSTS If you select pricing plans based on compute units (CU), use these product ID integer formats to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Pro CU 126 COMPUTE_UNIT Pro Annual CU 127 COMPUTE_UNIT APM Essentials CU 128 COMPUTE_UNIT APM Essentials Annual CU 129 COMPUTE_UNIT Example Requests APM Pro with 5 hosts mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: HOSTS, quantity: 5 } ] } ] ) { enqueued errors { message path } } } Copy APM Pro CU with 3000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 126, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Mobile New Relic Mobile’s pricing structure allows 100,000 monthly active users per account at the Enterprise subscription level. Data retention varies by subscription level. Use the product ID’s integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Lite 49 Not applicable Not applicable Enterprise 54 APPS USERS Enterprise Annual 55 APPS USERS Example Request Mobile Enterprise with 1 App and 100,000 Monthly Active user mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 54, unitsOfMeasure: [ { unit: APPS, quantity: 1 }, { unit: USERS, quantity: 100000 } ] } ] ) { enqueued errors { message path } } } Copy Insights New Relic Insights bases the pricing structure on the number of allowable events stored and the associated data retention policy. For example, data retention for Insights Free is one day. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Free 67 Not applicable Not applicable None 65 Not applicable Not applicable Pro 66 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Pro Annual 69 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Example Request Insights Pro with 7 days data retention and 25 million events mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 66, unitsOfMeasure: [ { unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, { unit: EVENTS_IN_MILLIONS, quantity: 25 } ] } ] ) { enqueued errors { message path } } } Copy Browser New Relic Browser’s pricing structure allows an unlimited number of app users, regardless of subscription level. However, the number of allowable page views per month and the data retention period vary by subscription level. For example: Lite accounts include an unlimited number of page views per month and 24-hour data retention. Pro account pricing starts at 500,000 page views per month and three months data retention. Use the product ID’s integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Lite 76 Not applicable Pro 72 PAGE_VIEWS Pro Annual 73 PAGE_VIEWS Example Request Browser Pro with 500,000 page views mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: PAGE_VIEWS, quantity: 500000 } ] } ] ) { enqueued errors { message path } } } Copy Synthetics With New Relic Synthetics' pricing structure, the default number of allowable monitoring checks and the data retention period vary by subscription level. Use the product ID’s integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 Lite 81 Not applicable Pro 77 CHECKS Pro Annual 78 CHECKS Example Request Synthetics Pro with 10,000 checks mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 77, unitsOfMeasure: [ { unit: CHECKS, quantity: 10000 } ] } ] ) { enqueued errors { message path } } } Copy Infrastructure With New Relic Infrastructure’s pricing structure, the default number of instances and the data retention period vary by subscription level. Infrastructure events do not count against your New Relic Insights quota, even though you can query them in Insights. New Relic Infrastructure offers pricing plans based on Compute Units (CU) only. Use the product ID’s integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Infrastructure None 142 Not applicable Infrastructure Pro (CU) 134 COMPUTE_UNIT Infrastructure Pro Annual (CU) 135 COMPUTE_UNIT Infrastructure Essentials (CU) 136 COMPUTE_UNIT Infrastructure Essentials Annual (CU) 137 COMPUTE_UNIT Example Request Infrastructure Pro with 5,000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 134, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 5000 } ] } ] ) { enqueued errors { message path } } } Copy Serverless for Lambda Subscription level products.id unitsOfMeasure.unit.1 Serverless Annual 9010 INGESTED_EVENTS Serverless Monthly 9000 INGESTED_EVENTS Example Request Serverless Monthly with 3,000 ingested events in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9000, unitsOfMeasure: [ { unit: INGESTED_EVENTS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Traces Subscription level products.id unitsOfMeasure.unit.1 Traces Annual 9200 SPANS_IN_MILLIONS Traces Monthly 9210 SPANS_IN_MILLIONS Example Request Traces Annual with 3,000 spans in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9200, unitsOfMeasure: [ { unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Logs Subscription level products.id unitsOfMeasure.unit.1 Logs Annual Commit - 8 Days 9110 GB_PER_DAY Logs Annual Commit - 15 Days 9111 GB_PER_DAY Logs Annual Commit - 30 Days 9112 GB_PER_DAY Logs Monthly Commit - 8 Days 9100 GB_PER_DAY Logs Monthly Commit - 15 Days 9101 GB_PER_DAY Logs Monthly Commit - 30 Days 9102 GB_PER_DAY Example Request Logs with 8 days data retention and 100 Gigabytes per day mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9100, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 } ] } ] ) { enqueued errors { message path } } } Copy Metrics Subscription level products.id unitsOfMeasure.unit.1 Metrics Annual Commit 9310 DPM Metrics Monthly Commit 9300 DPM Example Request Metrics Monthly Commitment with 50 Data Points Per Minute mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9300, unitsOfMeasure: [ { unit: DPM, quantity: 50 } ] } ] ) { enqueued errors { message path } } } Copy GraphQL Types The Provisioning API uses the following GraphQL types: Subscription Name Type Description account_id Integer Numeric ID of the partner account for the partnership to which the affected account belongs. affected_account_id Integer Numeric ID of the account to which the changes described in the products field will be applied. products Array of Product Collection of type Product representing the values that will compose the new Subscription for the Affected Account. Product Name Type Description Id Integer Numeric ID for the Product to be added to the Subscription. Name String Name of the Product to be added to the Subscription. Unit of Measure Array of Unit of Measure Collection of type Unit of Measure for this single product. Unit of measure Name Type Description quantity Integer Numeric value for the amount of units to be applied to the Subscription. unit String Name of the unit to be applied to the product (varies by product line). Examples Here are examples of an API call to create a subscription and the JSON response. Create (replace existing) subscription with many products mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9410, unitsOfMeasure: [{unit: INCIDENT_EVENTS, quantity: 50}] }, { id: 42, unitsOfMeasure: [{unit: HOSTS, quantity: 5 }] }, { id: 42, unitsOfMeasure: [{unit: PAGE_VIEWS, quantity: 500000}] }, { id: 134, unitsOfMeasure: [{unit: COMPUTE_UNIT, quantity: 5000}] }, { id: 66, unitsOfMeasure: [ {unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, {unit: EVENTS_IN_MILLIONS, quantity: 25 } ] }, { id: 9100, unitsOfMeasure: [{unit: GB_PER_DAY, quantity: 100 } ] }, { id: 9300, unitsOfMeasure: [{unit: DPM, quantity: 50 } ] }, { id: 54, unitsOfMeasure: [ {unit: APPS, quantity: 1 }, {unit: USERS, quantity: 100000 } ] }, { id: 9000, unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] }, { id: 77, unitsOfMeasure: [{unit: CHECKS, quantity: 10000 } ] }, { id: 9200, unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Create (replace existing) subscription with one product - Logs mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 9110, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 }, { unit: DATA_RETENTION_IN_DAYS, quantity: 8 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Response: Once the Provisioning API has received your request and has validated it is in the right format it will respond with a message like this. This does not mean that your message has been successfully processed or applied; but it has been validated to be in the right format and it enqueued for processing. { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Variations from the Partnership API These are some key differences between the Provisioning API and the Partner API that frequent Partner API users should know: Feature Description API keys The Provisioning API uses a Personal API key. The Partner API uses the Partnership API key. productId and product_id The product id’s used for the Provisioning API are different than the ones documented for the Partner API. Curl request format To make a curl request to the Provisioning API, the format will be different than the Partner API: The url endpoint is different The required api key is your personal API key Provisioning API responds only to HTTP POST requests Serverless INGESTED_EVENTS units are in millions sending unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] will be interpreted by the Provisioning API as 3,000 million events. Insights and Mobile require 2 units of measure Insights requires DATA_RETENTION_IN_DAYS and EVENTS_IN_MILLIONS Mobile requires APPS and USERS. Logs data retention unit of measure is determined by productID This is specified in the product name: Logs Annual Commit - 8 Days | product ID: 9110 Logs Annual Commit - 15 Days | product ID: 9111 Logs Annual Commit - 30 Days | product ID: 9112 Logs Monthly Commit - 8 Days | product ID: 9100 Logs Monthly Commit - 15 Days | product ID: 9101 Logs Monthly Commit - 30 Days | product ID: 9102",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07472,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Get</em> <em>started</em>: endpoint and API key",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Important The Provisioning API is only available for Partner accounts. The Provisioning NerdGraph API allows you, as a <em>New</em> <em>Relic</em> partner to create subscriptions for your accounts containing a more extensive range of <em>New</em> <em>Relic</em> products than the Partner API. The Provisioning API and <em>Partnership</em> API"
      },
      "id": "6043ff97e7b9d25a6f5799c1"
    },
    {
      "sections": [
        "Partnership admin console",
        "Console components",
        "Partnership configuration settings",
        "Customer activity monitoring",
        "State-of-the-Partnership report",
        "Partner customer monitoring",
        "View an arbitrary customer",
        "Viewing detailed customer data"
      ],
      "title": "Partnership admin console",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "670e4d2e1db957100b23a7b8b0af6bf50cc8c996",
      "image": "https://docs.newrelic.com/static/43369c88523ebf526ae58fa5719d4efe/0abdd/crop-partnership-owner-account-settings.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partnership-admin-console/",
      "published_at": "2021-06-09T00:07:14Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Partnership Admin Console is the interface for managing your customers' accounts and integration with New Relic. To access the console, sign into the partnership owner account, and go to: https://partner-admin-console.newrelic.com/accounts/ACCOUNT_ID/admin_console/ Copy You can also access the console from the New Relic UI: Go to one.newrelic.com > (account dropdown) > Account settings. From the left menu bar, select Partnerships. one.newrelic.com > (account dropdown) > Account settings > Partnerships: Partnership owners can access the Partnership Admin Console from their account settings in the New Relic UI. Console components The Partnership Admin Console has two main components: Partnership configuration settings Customer activity monitoring If multiple partnerships are associated with the New Relic master account, the menu also includes an option to switch partnership accounts. Partnership configuration settings In developing your integration with New Relic, you must specify a number of settings. For your convenience these settings are grouped together in the partnership console, including URLs for header/footer and various redirects, SSO configuration, and keys and the ability to manipulate them. Customer activity monitoring New Relic provides you with two tools for managing your customers: State-of-the-Partnership reports and live monitoring of all deployed New Relic agents in your partnership. Both of these tools provide insight into your customers who are using New Relic. They can be used to identify up-sale opportunities or to assist your support group in proactive support. State-of-the-Partnership report The State-of-the-Partnership report provides a summary of your customers with New Relic accounts and their activities. The report is broken down by language of the agents deployed, the agent version and the language version for each account. This report is run weekly for each partner. It is available on request from your New Relic Business Development contact. This report is an excellent way to see which of your customers with New Relic accounts are in fact using the service. Partner customer monitoring The Partner customer monitoring facility provides application performance data on the New Relic enabled applications that are running on your service. This facility allows you to easily identify customers experiencing performance problems. Where the performance problems are caused by under capacity, these customers are excellent sales opportunities. Alternatively your support or services organization will find this information useful in pre-emptively identifying customer issues or as good prospects for consulting services. View an arbitrary customer To view activity of a customer that does not appear in any of the filtered views: Go to one.newrelic.com > (account dropdown) > Switch accounts > Other accounts. New Relic will list all of the reporting accounts in the partnership. You can filter or search the list. Viewing detailed customer data Under normal circumstances a partner will be able to see only the summary level data in a customer's New Relic account. Through the Partnership Admin Console, partners will be permitted to drill down to the more detailed presentation. If you want to drill down from the Partnership Admin Console, add your user (typically support@partner.com or something similar) to the account. Typically this will be done at account creation. Avoid provisioning this user as the account Owner.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.02829,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> admin console",
        "sections": "<em>Partnership</em> admin console",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " the console from the <em>New</em> <em>Relic</em> UI: Go to one.newrelic.com &gt; (account dropdown) &gt; Account settings. From the left menu bar, select <em>Partnerships</em>. one.newrelic.com &gt; (account dropdown) &gt; Account settings &gt; <em>Partnerships</em>: <em>Partnership</em> owners can access the <em>Partnership</em> Admin Console from their account settings"
      },
      "id": "603ed3e3196a6735baa83dad"
    },
    {
      "sections": [
        "Using the Partner Portal",
        "For more help"
      ],
      "title": "Using the Partner Portal",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Getting started"
      ],
      "external_id": "2f149ab0c15dadf598fa1833be58caeecb6ed493",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/getting-started/using-partner-portal/",
      "published_at": "2021-06-09T05:32:39Z",
      "updated_at": "2021-03-16T10:09:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic provides a web portal for partners to easily access valuable resources provided to them by the New Relic Partner Program, such as partner sales enablement content, training, marketing materials, etc. If you are a partner and do not have access to this already, contact your Partner Sales Manager or email partnersales @ newrelic.com. To access the Partner Portal: From your browser, type (or bookmark) the following URL, and then log in with your user name and password. https://partners.newrelic-external.com/English/ Copy For more help For more information about partner content provided by New Relic, see Partner marketing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.64374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em> provides a web portal for partners to easily access valuable resources provided to them by the <em>New</em> <em>Relic</em> Partner Program, such as partner sales enablement content, training, marketing materials, etc. If you are a partner and do not have access to this already, contact your Partner Sales"
      },
      "id": "603ebb3528ccbc63d5eba791"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/getting-started/using-partner-portal": [
    {
      "sections": [
        "NerdGraph tutorial: Partner and reseller subscriptions",
        "Important",
        "Get started: endpoint and API key",
        "Product subscriptions for an account",
        "Tip",
        "Mapping for products (productId)",
        "APM",
        "Example Requests",
        "Mobile",
        "Example Request",
        "Insights",
        "Browser",
        "Synthetics",
        "Infrastructure",
        "Serverless for Lambda",
        "Traces",
        "Logs",
        "Metrics",
        "GraphQL Types",
        "Subscription",
        "Product",
        "Unit of measure",
        "Examples",
        "Create (replace existing) subscription with many products",
        "Create (replace existing) subscription with one product - Logs",
        "Variations from the Partnership API"
      ],
      "title": "NerdGraph tutorial: Partner and reseller subscriptions",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Getting started"
      ],
      "external_id": "b5831e3798a6356482988d72fc3b5dc2d39c6aad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/provisions-your-subscriptions-nerdgraph/",
      "published_at": "2021-06-09T06:36:21Z",
      "updated_at": "2021-05-11T05:05:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The Provisioning API is only available for Partner accounts. The Provisioning NerdGraph API allows you, as a New Relic partner to create subscriptions for your accounts containing a more extensive range of New Relic products than the Partner API. The Provisioning API and Partnership API are compatible when it comes to the products supported by both (APM, Mobile, Insights, Browser, Synthetics, and Infrastructure). If you use the Provisioning API to create a subscription for any of the newer products, you will no longer be able to update the account using the Partnership API V2. The Provisioning API is a GraphQL mutation field named organizationProvisioningUpdatePartnerSubscription. To learn more about how to use this mutation, see Introduction to NerdGraph. Get started: endpoint and API key The provisioning API uses your user key. The endpoint for the Provisioning API is: https://api.newrelic.com/graphql Copy To get started, run the following command: curl -v -d'{\"query\": \"mutation { organizationProvisioningUpdatePartnerSubscription(accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [{id: 9200, name: \\\"Traces\\\", unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 40}]}]) {enqueued errors {message path } } }\"}' -H'Content-type: application/json' -H'Api-key: PERSONAL_API_KEY' https://api.newrelic.com/graphql Copy Product subscriptions for an account The Provisioning API does not allow you to upgrade or downgrade individual product subscriptions for an account. Instead, the API requires you to replace (add) the configuration for all product subscriptions for the account. Tip If any product configurations are not included, the Provisioning API automatically provisions the account with a free product (when available). Mapping for products (productId) With each account creation call, you must supply at least one New Relic product type. The mutation query only accepts the numeric productId for the type. APM The number of allowable hosts per account and the data retention period vary by subscription level within New Relic APM’s pricing structure. For example, New Relic APM allows an unlimited number of allowable hosts for Lite accounts, but only a 24-hour data retention period. In addition, pricing and data retention depend on whether you select pricing plans based on hosts or compute units (CU). Use the product ID’s integer format to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Lite 18 Not applicable Standard 41 HOSTS Standard Annual 38 HOSTS Pro (Host) 42 HOSTS Pro Annual (Host) 39 HOSTS Enterprise 43 HOSTS Enterprise Annual 40 HOSTS If you select pricing plans based on compute units (CU), use these product ID integer formats to identify the subscription level and type of plan. Subscription level products.id unitsOfMeasure.unit Pro CU 126 COMPUTE_UNIT Pro Annual CU 127 COMPUTE_UNIT APM Essentials CU 128 COMPUTE_UNIT APM Essentials Annual CU 129 COMPUTE_UNIT Example Requests APM Pro with 5 hosts mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: HOSTS, quantity: 5 } ] } ] ) { enqueued errors { message path } } } Copy APM Pro CU with 3000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 126, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Mobile New Relic Mobile’s pricing structure allows 100,000 monthly active users per account at the Enterprise subscription level. Data retention varies by subscription level. Use the product ID’s integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Lite 49 Not applicable Not applicable Enterprise 54 APPS USERS Enterprise Annual 55 APPS USERS Example Request Mobile Enterprise with 1 App and 100,000 Monthly Active user mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 54, unitsOfMeasure: [ { unit: APPS, quantity: 1 }, { unit: USERS, quantity: 100000 } ] } ] ) { enqueued errors { message path } } } Copy Insights New Relic Insights bases the pricing structure on the number of allowable events stored and the associated data retention policy. For example, data retention for Insights Free is one day. Subscription level products.id unitsOfMeasure.unit.1 unitsOfMeasure.unit.2 Free 67 Not applicable Not applicable None 65 Not applicable Not applicable Pro 66 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Pro Annual 69 DATA_RETENTION_IN_DAYS EVENTS_IN_MILLIONS Example Request Insights Pro with 7 days data retention and 25 million events mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 66, unitsOfMeasure: [ { unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, { unit: EVENTS_IN_MILLIONS, quantity: 25 } ] } ] ) { enqueued errors { message path } } } Copy Browser New Relic Browser’s pricing structure allows an unlimited number of app users, regardless of subscription level. However, the number of allowable page views per month and the data retention period vary by subscription level. For example: Lite accounts include an unlimited number of page views per month and 24-hour data retention. Pro account pricing starts at 500,000 page views per month and three months data retention. Use the product ID’s integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Lite 76 Not applicable Pro 72 PAGE_VIEWS Pro Annual 73 PAGE_VIEWS Example Request Browser Pro with 500,000 page views mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 42, unitsOfMeasure: [ { unit: PAGE_VIEWS, quantity: 500000 } ] } ] ) { enqueued errors { message path } } } Copy Synthetics With New Relic Synthetics' pricing structure, the default number of allowable monitoring checks and the data retention period vary by subscription level. Use the product ID’s integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit.1 Lite 81 Not applicable Pro 77 CHECKS Pro Annual 78 CHECKS Example Request Synthetics Pro with 10,000 checks mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 77, unitsOfMeasure: [ { unit: CHECKS, quantity: 10000 } ] } ] ) { enqueued errors { message path } } } Copy Infrastructure With New Relic Infrastructure’s pricing structure, the default number of instances and the data retention period vary by subscription level. Infrastructure events do not count against your New Relic Insights quota, even though you can query them in Insights. New Relic Infrastructure offers pricing plans based on Compute Units (CU) only. Use the product ID’s integer format to identify the subscription level. Subscription level products.id unitsOfMeasure.unit Infrastructure None 142 Not applicable Infrastructure Pro (CU) 134 COMPUTE_UNIT Infrastructure Pro Annual (CU) 135 COMPUTE_UNIT Infrastructure Essentials (CU) 136 COMPUTE_UNIT Infrastructure Essentials Annual (CU) 137 COMPUTE_UNIT Example Request Infrastructure Pro with 5,000 Compute Units mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 134, unitsOfMeasure: [ { unit: COMPUTE_UNIT, quantity: 5000 } ] } ] ) { enqueued errors { message path } } } Copy Serverless for Lambda Subscription level products.id unitsOfMeasure.unit.1 Serverless Annual 9010 INGESTED_EVENTS Serverless Monthly 9000 INGESTED_EVENTS Example Request Serverless Monthly with 3,000 ingested events in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9000, unitsOfMeasure: [ { unit: INGESTED_EVENTS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Traces Subscription level products.id unitsOfMeasure.unit.1 Traces Annual 9200 SPANS_IN_MILLIONS Traces Monthly 9210 SPANS_IN_MILLIONS Example Request Traces Annual with 3,000 spans in millions mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9200, unitsOfMeasure: [ { unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy Logs Subscription level products.id unitsOfMeasure.unit.1 Logs Annual Commit - 8 Days 9110 GB_PER_DAY Logs Annual Commit - 15 Days 9111 GB_PER_DAY Logs Annual Commit - 30 Days 9112 GB_PER_DAY Logs Monthly Commit - 8 Days 9100 GB_PER_DAY Logs Monthly Commit - 15 Days 9101 GB_PER_DAY Logs Monthly Commit - 30 Days 9102 GB_PER_DAY Example Request Logs with 8 days data retention and 100 Gigabytes per day mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9100, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 } ] } ] ) { enqueued errors { message path } } } Copy Metrics Subscription level products.id unitsOfMeasure.unit.1 Metrics Annual Commit 9310 DPM Metrics Monthly Commit 9300 DPM Example Request Metrics Monthly Commitment with 50 Data Points Per Minute mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9300, unitsOfMeasure: [ { unit: DPM, quantity: 50 } ] } ] ) { enqueued errors { message path } } } Copy GraphQL Types The Provisioning API uses the following GraphQL types: Subscription Name Type Description account_id Integer Numeric ID of the partner account for the partnership to which the affected account belongs. affected_account_id Integer Numeric ID of the account to which the changes described in the products field will be applied. products Array of Product Collection of type Product representing the values that will compose the new Subscription for the Affected Account. Product Name Type Description Id Integer Numeric ID for the Product to be added to the Subscription. Name String Name of the Product to be added to the Subscription. Unit of Measure Array of Unit of Measure Collection of type Unit of Measure for this single product. Unit of measure Name Type Description quantity Integer Numeric value for the amount of units to be applied to the Subscription. unit String Name of the unit to be applied to the product (varies by product line). Examples Here are examples of an API call to create a subscription and the JSON response. Create (replace existing) subscription with many products mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: PARTNER_ACCOUNT_ID, affectedAccountId: ACCOUNT_ID, products: [ { id: 9410, unitsOfMeasure: [{unit: INCIDENT_EVENTS, quantity: 50}] }, { id: 42, unitsOfMeasure: [{unit: HOSTS, quantity: 5 }] }, { id: 42, unitsOfMeasure: [{unit: PAGE_VIEWS, quantity: 500000}] }, { id: 134, unitsOfMeasure: [{unit: COMPUTE_UNIT, quantity: 5000}] }, { id: 66, unitsOfMeasure: [ {unit: DATA_RETENTION_IN_DAYS, quantity: 7 }, {unit: EVENTS_IN_MILLIONS, quantity: 25 } ] }, { id: 9100, unitsOfMeasure: [{unit: GB_PER_DAY, quantity: 100 } ] }, { id: 9300, unitsOfMeasure: [{unit: DPM, quantity: 50 } ] }, { id: 54, unitsOfMeasure: [ {unit: APPS, quantity: 1 }, {unit: USERS, quantity: 100000 } ] }, { id: 9000, unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] }, { id: 77, unitsOfMeasure: [{unit: CHECKS, quantity: 10000 } ] }, { id: 9200, unitsOfMeasure: [{unit: SPANS_IN_MILLIONS, quantity: 3000 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Create (replace existing) subscription with one product - Logs mutation { organizationProvisioningUpdatePartnerSubscription ( accountId: :PARTNER_ACCOUNT_ID, affectedAccountId: :ACCOUNT_ID, products: [ { id: 9110, unitsOfMeasure: [ { unit: GB_PER_DAY, quantity: 100 }, { unit: DATA_RETENTION_IN_DAYS, quantity: 8 } ] } ] ) { enqueued errors { message path } } } Copy This query returns the following: { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Response: Once the Provisioning API has received your request and has validated it is in the right format it will respond with a message like this. This does not mean that your message has been successfully processed or applied; but it has been validated to be in the right format and it enqueued for processing. { \"data\": { \"organizationProvisioningUpdatePartnerSubscription\": { \"enqueued\": true, \"errors\": [] } } } Copy Variations from the Partnership API These are some key differences between the Provisioning API and the Partner API that frequent Partner API users should know: Feature Description API keys The Provisioning API uses a Personal API key. The Partner API uses the Partnership API key. productId and product_id The product id’s used for the Provisioning API are different than the ones documented for the Partner API. Curl request format To make a curl request to the Provisioning API, the format will be different than the Partner API: The url endpoint is different The required api key is your personal API key Provisioning API responds only to HTTP POST requests Serverless INGESTED_EVENTS units are in millions sending unitsOfMeasure: [{unit: INGESTED_EVENTS, quantity: 3000 } ] will be interpreted by the Provisioning API as 3,000 million events. Insights and Mobile require 2 units of measure Insights requires DATA_RETENTION_IN_DAYS and EVENTS_IN_MILLIONS Mobile requires APPS and USERS. Logs data retention unit of measure is determined by productID This is specified in the product name: Logs Annual Commit - 8 Days | product ID: 9110 Logs Annual Commit - 15 Days | product ID: 9111 Logs Annual Commit - 30 Days | product ID: 9112 Logs Monthly Commit - 8 Days | product ID: 9100 Logs Monthly Commit - 15 Days | product ID: 9101 Logs Monthly Commit - 30 Days | product ID: 9102",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07472,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Get</em> <em>started</em>: endpoint and API key",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "Important The Provisioning API is only available for Partner accounts. The Provisioning NerdGraph API allows you, as a <em>New</em> <em>Relic</em> partner to create subscriptions for your accounts containing a more extensive range of <em>New</em> <em>Relic</em> products than the Partner API. The Provisioning API and <em>Partnership</em> API"
      },
      "id": "6043ff97e7b9d25a6f5799c1"
    },
    {
      "sections": [
        "Partnership admin console",
        "Console components",
        "Partnership configuration settings",
        "Customer activity monitoring",
        "State-of-the-Partnership report",
        "Partner customer monitoring",
        "View an arbitrary customer",
        "Viewing detailed customer data"
      ],
      "title": "Partnership admin console",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Getting started"
      ],
      "external_id": "670e4d2e1db957100b23a7b8b0af6bf50cc8c996",
      "image": "https://docs.newrelic.com/static/43369c88523ebf526ae58fa5719d4efe/0abdd/crop-partnership-owner-account-settings.png",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/getting-started/partnership-admin-console/",
      "published_at": "2021-06-09T00:07:14Z",
      "updated_at": "2021-05-16T01:08:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Partnership Admin Console is the interface for managing your customers' accounts and integration with New Relic. To access the console, sign into the partnership owner account, and go to: https://partner-admin-console.newrelic.com/accounts/ACCOUNT_ID/admin_console/ Copy You can also access the console from the New Relic UI: Go to one.newrelic.com > (account dropdown) > Account settings. From the left menu bar, select Partnerships. one.newrelic.com > (account dropdown) > Account settings > Partnerships: Partnership owners can access the Partnership Admin Console from their account settings in the New Relic UI. Console components The Partnership Admin Console has two main components: Partnership configuration settings Customer activity monitoring If multiple partnerships are associated with the New Relic master account, the menu also includes an option to switch partnership accounts. Partnership configuration settings In developing your integration with New Relic, you must specify a number of settings. For your convenience these settings are grouped together in the partnership console, including URLs for header/footer and various redirects, SSO configuration, and keys and the ability to manipulate them. Customer activity monitoring New Relic provides you with two tools for managing your customers: State-of-the-Partnership reports and live monitoring of all deployed New Relic agents in your partnership. Both of these tools provide insight into your customers who are using New Relic. They can be used to identify up-sale opportunities or to assist your support group in proactive support. State-of-the-Partnership report The State-of-the-Partnership report provides a summary of your customers with New Relic accounts and their activities. The report is broken down by language of the agents deployed, the agent version and the language version for each account. This report is run weekly for each partner. It is available on request from your New Relic Business Development contact. This report is an excellent way to see which of your customers with New Relic accounts are in fact using the service. Partner customer monitoring The Partner customer monitoring facility provides application performance data on the New Relic enabled applications that are running on your service. This facility allows you to easily identify customers experiencing performance problems. Where the performance problems are caused by under capacity, these customers are excellent sales opportunities. Alternatively your support or services organization will find this information useful in pre-emptively identifying customer issues or as good prospects for consulting services. View an arbitrary customer To view activity of a customer that does not appear in any of the filtered views: Go to one.newrelic.com > (account dropdown) > Switch accounts > Other accounts. New Relic will list all of the reporting accounts in the partnership. You can filter or search the list. Viewing detailed customer data Under normal circumstances a partner will be able to see only the summary level data in a customer's New Relic account. Through the Partnership Admin Console, partners will be permitted to drill down to the more detailed presentation. If you want to drill down from the Partnership Admin Console, add your user (typically support@partner.com or something similar) to the account. Typically this will be done at account creation. Avoid provisioning this user as the account Owner.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.02829,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> admin console",
        "sections": "<em>Partnership</em> admin console",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " the console from the <em>New</em> <em>Relic</em> UI: Go to one.newrelic.com &gt; (account dropdown) &gt; Account settings. From the left menu bar, select <em>Partnerships</em>. one.newrelic.com &gt; (account dropdown) &gt; Account settings &gt; <em>Partnerships</em>: <em>Partnership</em> owners can access the <em>Partnership</em> Admin Console from their account settings"
      },
      "id": "603ed3e3196a6735baa83dad"
    },
    {
      "sections": [
        "Partner marketing",
        "Marketing tools",
        "Marketing activities",
        "Guest blog posts",
        "What's in it for you?",
        "How does it work?",
        "How do you create a great blog post?"
      ],
      "title": "Partner marketing",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Getting started"
      ],
      "external_id": "3c8149518849df6b00f17244aec711aad64f3952",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/getting-started/partner-marketing/",
      "published_at": "2021-06-09T00:09:01Z",
      "updated_at": "2021-03-16T10:09:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic loves to help our partners tell the world about our joint offerings. Here is a non-exhaustive list of marketing activities that we can pull into our co-marketing plan. To proceed with any co-marketing activity or to plan your strategy, email your Business Development rep at New Relic or email partners @ newrelic.com. Marketing tools If you have new ideas that are not listed here, let us know! Marketing tools Description Email template Use New Relic's HTML and/or plain text email templates to send to your customers to introduce them to New Relic. To request templates, email your Business Development rep at New Relic, or email partners @ newrelic.com. Content boilerplate New Relic's content boilerplate has everything you need to create a New Relic page on your website. To request it, email your Business Development rep at New Relic, or email partners @ newrelic.com. Blog content Follow New Relic's guidelines to post on New Relic's blog. Twitter Use sample tweets to promote our partnership, include appropriate links, and mention @newrelic. To request re-tweets, email your Business Development rep at New Relic, or email partners @ newrelic.com. New Relic media assets Get our logo and other materials from New Relic's media assets webpage. To request additional assets, email your Business Development rep at New Relic, or email partners @ newrelic.com. Joint customer case study Identify a joint customer, and work with New Relic to write and publish a joint customer case study. For more information, contact your Business Development rep at New Relic, or email partners @ newrelic.com. Marketing activities If you have new ideas that are not listed here, let us know! Marketing activity Description Social media support Let New Relic help amplify your social media through tweets, retweets, Facebook likes, shares, etc. Event opportunities Participate in local meetups or find out about other events or co-sponsorship opportunities. Webinar Co-host a webinar; for example, see: Three Powerful Tools for Improving the Performance of Your Drupal Site Six Tips for Improving Ruby Application Performance Guest blog posts New Relic loves great blog content, and partners are often an essential source; for example: Magento Auth0 Flood IO You are encouraged to write a guest blog post for http://blog.newrelic.com. What's in it for you? It's a great opportunity for you to promote your company and the integration you've built. Our blog is popular reading for the New Relic community, and our customers are frequently among the fastest growing innovators. How does it work? You draft the post and supply screenshots and/or video as applicable. New Relic will edit, format, publish, and promote the post. You'll get credit as the author, and you can include a paragraph at the end mentioning your product. How do you create a great blog post? The goal is to be insightful, useful, thought provoking, smart, surprising, and entertaining—or at least some combination of those elements. Blog post guidelines Comments Writing style Recommendation: Write your blog post in the first person. New Relic's target audience includes developers, DevOps, IT ops, execs, marketers, and data scientists working with big data, but we have no problem attracting a wider readership than that. We want to intrigue them and help them do their jobs better and more passionately. Passion and connection are essential. If you do not care about the topic you are blogging about or, more importantly, you do not appear to care about it, neither will the reader. Length A typical blog post runs approximately 500 words, but it may be longer or shorter if there is a good reason. Technical blog posts may run much longer, while posts with video may not need much text at all. Content Each post should focus on a single main idea. If you have a mashup of multiple ideas, consider breaking them up into a series of multiple, related posts. Posts do not have to be based on the latest news, but they shouldn't pretend that old news is new. If you're writing about something that's not brand new, you need to acknowledge that and come up with a fresh take or new angle. Posts should be fact based, and not mere opinion without a grounding in reality. The magic is in the details. Posts should be grounded in specifics, not just general pronouncements. If you say something is bad, you need to describe why; for example, what can or did happen because of it. Similarly, if you suggest best practices, the more specific examples you provide, the better. Links Links to outside content are encouraged, but just pointing to something on the web is not enough for a post, no matter how interesting the link is. You need to bring something unique to the post.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.64374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " Follow <em>New</em> <em>Relic</em>&#x27;s guidelines to post on <em>New</em> <em>Relic</em>&#x27;s blog. Twitter Use sample tweets to promote our <em>partnership</em>, include appropriate links, and mention @newrelic. To request re-tweets, email your Business Development rep at <em>New</em> <em>Relic</em>, or email partners @ newrelic.com. <em>New</em> <em>Relic</em> media assets <em>Get</em> our"
      },
      "id": "603eb147e7b9d2f0012a07de"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference": [
    {
      "sections": [
        "Partnership billing integration API",
        "Requirements",
        "Communication endpoint",
        "Billing API",
        "Customer subscription notification API",
        "Invoice notification API"
      ],
      "title": "Partnership billing integration API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "73da7e096ce56bb45e39bb95a1c2e0a0011be597",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partnership-billing-integration-api/",
      "published_at": "2021-06-09T05:33:50Z",
      "updated_at": "2021-03-30T21:12:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Partnership API includes functionality for partners to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts. This is particularly useful for partners acting as resellers or managed service providers of New Relic accounts. For example, when customers of a New Relic reseller partner purchase a higher subscription level from New Relic's Sales team, New Relic replaces the old subscription with a new subscription. New Relic then uses the API to communicate this information to the partner. Requirements Before using this object, please read the Partnership API requirements. Communication endpoint Partners must implement a billing communication endpoint that identifies the partner's URL and PARTNER_ID. New Relic uses this endpoint to notify the partner that New Relic has made a change to a partner account's subscription or invoice information. The endpoint must support HTTPS. The partner-specified portion of the URL is identified from the Settings tab of New Relic's Partner Portal. The PARTNER_ID is the partner's external ID for this account. This value must be passed when the account is created by using the partner_external_identifier parameter. Billing API Supported functionality for the Partnership billing API includes: Customer subscription notification Invoice information notification Customer subscription notification API To communicate changes to a partner about a customer's subscription, New Relic uses the POST method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy Authentication is done via headers with the partner's REST API key or Admin user's API key. The Partnership API returns the results as JSON. Parameters: Name Type Description id String The customer's New Relic account ID subscription_id Integer Subscription's numeric ID subscription_string String Description of subscription for display price Integer Monthly price of subscription in cents number_of_hosts Integer Number of hosts starts Date Subscription's start date (yyyymmdd) expires Date Subscription's end date (yyyymmdd) Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed. Invoice notification API New Relic uses this endpoint to notify the partner of changes to a partner account's subscription level and invoice information. New Relic uses the PUT method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy OR https://partner-specified/partner-specified/PARTNER_ID.xml Copy The Partnership API returns the results as JSON or XML. Parameters: Name Type Description id string The customer's New Relic account ID subscription_id integer Subscription's numeric ID subscription_string string Description of subscription for display price integer Monthly price of subscription in cents Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.3781,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> billing integration <em>API</em>",
        "sections": "<em>Partnership</em> billing integration <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s <em>Partnership</em> <em>API</em> includes functionality for partners to replace a customer&#x27;s existing subscription with a <em>new</em> one, or to update invoice information for <em>New</em> <em>Relic</em> <em>partner</em> accounts. This is particularly useful for partners acting as resellers or managed service providers of <em>New</em> <em>Relic</em>"
      },
      "id": "603ec86e64441f09e44e8871"
    },
    {
      "sections": [
        "Partnership API sub-account object",
        "Requirements",
        "Introduction to using sub-accounts",
        "Sub-account object attributes",
        "name (REQUIRED)",
        "allow_api_access",
        "testing",
        "users (REQUIRED for some accounts)",
        "password (REQUIRED)",
        "Sub-account API calls",
        "JSON example",
        "Sub-account object JSON request",
        "JSON response",
        "Sub-account object API examples",
        "Create"
      ],
      "title": "Partnership API sub-account object",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7fb13302d892a5f89c6c9371f35a60bf1ed9f6a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-sub-account-object/",
      "published_at": "2021-06-08T19:57:01Z",
      "updated_at": "2021-03-30T12:15:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains how to use the Partnership API to manage sub-accounts. For accounts, you'd use the sub-account object. Requirements You may not have access to using this object. Before using the Partnership API, first read the requirements. Introduction to using sub-accounts Some notes about using the sub-account object: To manage existing master accounts or existing sub-accounts, use the Partnership API account object. A parent account may have more than one associated sub-account, but every sub-account must correspond to one and only one parent account. Every sub-account must have at least a primary_admin user. You cannot create a sub-account without connecting it to an existing parent account and adding at least one user. Sub-account object attributes Before using the Partnership API, first read the requirements. Here are the Partnership API sub-account object's attributes: name (REQUIRED) Type: String Default: (none) This name must be unique in New Relic's database. If the specified name is not unique, it will be auto-incremented with a numeric suffix as follows: conflicting_name_1 conflicting_name_2 etc. Copy allow_api_access Type: Boolean Default: False This flag allows API access to application data. This must be set to true for partnerships remotely administering accounts. testing Type: Boolean Default: False Use this flag to indicate a test account. Test accounts are assumed to contain garbage data and are ignored by internal systems. The data they generate may be deleted at any time. users (REQUIRED for some accounts) Type: Array Default: (none) An array defining a list of users. There are some restrictions in place dependent on the status of your account: For customer partnerships who have switched to the New Relic One user model: do not define users. If you add users with this field, they will be ignored. Instead, to add users, you'd use these user management procedures. For all other accounts, which have users on our original user model: When you create the sub-account, you can define only one user: the account Owner. To add additional users, use the Partnership API user object. For more about restrictions, read the Requirements. password (REQUIRED) Type: String Default: (none) If you are creating a sub-account with an existing user as the account Owner, the password must match the user's current password. For some New Relic organizations, sub-accounts can also be created via the master account's Account settings page in the New Relic UI. Sub-account API calls Here is the URL pattern to create sub-accounts. Notice that the Parent Account ID must be specified. If using this URL pattern, send the JSON object along with an HTTP header containing the Partner API key. For example: POST .../api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts​ x-api-key:PARTNER_ACCOUNT_KEY Content-Type: application/json { JSON data } Copy Call Resource URL pattern Create a sub-account with the given parameters. POST /api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts Copy JSON example Here is an example of a JSON request and response using the Partnership API sub-account object. Note that this is just an example, and that for some accounts, the users attribute is unnecessary and will be ignored. Sub-account object JSON request { \"account\": { \"name\": \"Sample Sub-Account\", \"users\": [ { \"email\": \"sample_user@sample.org\", \"password\": \"XXXXXXXX\", \"owner\": true, \"role\": \"admin\", \"first_name\": \"Sample\", \"last_name\": \"User\" } ], \"allow_api_access\": true, \"phone_number\": \"555-555-5555\" } } Copy JSON response { \"id\": XXXXXX, \"name\": \"Sample Account\", \"status\": \"pending\", \"license_key\": \"XXXXXX\", \"api_key\": \"XXXXXX\", \"browser_monitoring_key\": \"XXXXXX\", \"allow_api_access\": true, \"high_security\": false, \"testing\": null, \"partner_external_identifier\": null, \"parent_account_id\":XXXXXX, \"subscription\": { \"id\": XXXXXX, \"starts_on\": \"2016-05-17\", \"expires_on\": null, \"annual_renewal_on\": null, \"products\": [ { \"product_id\": 4, \"name\": \"Pro\", \"units\": 10, \"price\": 1990.0 }, { \"product_id\": 10, \"name\": \"Mobile Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 20, \"name\": \"Browser Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 16, \"name\": \"Insights None\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 23, \"name\": \"Synthetics Lite\", \"units\": 0, \"price\": 0.0 } ] }, \"primary admin\": { \"id\": XXXXXX, \"email\": \"sample_user@sample.org\", \"first_name\": \"Sample\", \"last_name\": \"User\", \"state\": \"active\" } } Copy Sub-account object API examples Here is an example of an API call using the Partnership API sub-account object. Note that this is just an example, and that for some accounts, the users attribute is unnecessary and will be ignored. Create Request: curl -X POST \\ -H 'x-api-key:PARTNER_ACCOUNT_KEY' \\ -H 'Content-Type:application/json' \\ -d '{\"sub_account\":{\"name\":\"Sample Sub-Account\"}, \"users\":[{\"email\":\"sample_user@sample.org\", \"password\":\"XXXXXX\", \"first_name\":\"Sample\", \"last_name\":\"User\", \"role\":\"admin\", \"owner\":\"true\"}]}' \\ https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts Copy Response (line breaks are for readability): { \"id\": XXXXXX, \"name\": \"Sample Sub-Account\", \"status\": \"pending\", \"license_key\": \"XXXXXX\", \"api_key\": \"XXXXXX\", \"browser_monitoring_key\": \"XXXXXX\", \"allow_api_access\": false, \"high_security\": false, \"testing\": null, \"partner_external_identifier\": null, \"parent_account_id\":XXXXXX, \"subscription\": { \"id\": XXXXXX, \"starts_on\": \"2016-05-17\", \"expires_on\": null, \"annual_renewal_on\": null, \"products\": [ { \"product_id\": 4, \"name\": \"Pro\", \"units\": 10, \"price\": 1999.0 }, { \"product_id\": 10, \"name\": \"Mobile Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 20, \"name\": \"Browser Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 16, \"name\": \"Insights None\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 23, \"name\": \"Synthetics Lite\", \"units\": 0, \"price\": 0.0 } ] }, \"primary admin\": { \"id\": XXXXXX, \"email\": \"sample_user@sample.org\", \"first_name\": \"Sample\", \"last_name\": \"User\", \"state\": \"active\" } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.29633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> sub-account object",
        "sections": "<em>Partnership</em> <em>API</em> sub-account object",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " the <em>Partnership</em> <em>API</em> user object. For more about restrictions, read the Requirements. password (REQUIRED) Type: String Default: (none) If you are creating a sub-account with an existing user as the account Owner, the password must match the user&#x27;s current password. For some <em>New</em> <em>Relic</em> organizations"
      },
      "id": "603eba3ae7b9d2b8e32a07b5"
    },
    {
      "sections": [
        "Product buckets",
        "Requirements",
        "Overview (#overview)",
        "Quantity by product",
        "Insights Events quantity",
        "Browser PageViews quantity",
        "Synthetics Checks quantity"
      ],
      "title": "Product buckets",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "fe7632af0936f9878b04ba0c25f7cf8a7f684399",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/product-buckets/",
      "published_at": "2021-06-09T05:34:07Z",
      "updated_at": "2021-03-29T21:27:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For partnership accounts on our original product pricing, you can use the Partnership API for managing subscriptions. This doc explains some details for using the Browser, Synthetics, and Insights products. Requirements This doc applies only for partnership accounts on our original pricing plan. Before using this API, please read the Partnership API requirements. Overview (#overview) When using the Partnership API for Insights, Browser, and Synthetics products, you must provide a valid quantity value. This indicates the number of Insights Events, Browser PageViews, and Synthetics Checks provisioned to that account. New Relic uses this \"bucket\" pricing structure based on the quantity value in order to offer discounts on large volume purchases. Be sure to select an available bucket value. Otherwise, the New Relic Partnership API will return an error response. Quantity by product Here are the valid quantity values by New Relic product. Insights Events quantity Insights Pro Insights Pro Annual 25 25 50 50 75 75 300 300 625 625 1250 1250 2500 2500 5000 5000 10000 10000 20000 20000 40000 40000 60000 60000 80000 80000 100000 100000 120000 120000 140000 140000 Browser PageViews quantity Browser Pro Browser Pro Annualynthetics Checks quantity Synthetics Pro Synthetics Pro Annual 10000 10000 15000 15000 25000 25000 35000 35000 50000 50000 75000 75000 100000 100000 150000 150000 250000 250000 300000 300000 400000 400000 500000 500000 600000 600000 750000 750000 900000 900000 1000000 1000000 1150000 1150000 1300000 1300000 1500000 1500000 1750000 1750000 2000000 2000000 2500000 2500000 3000000 3000000 3500000 3500000 5000000 5000000 7000000 7000000 8500000 8500000 10000000 10000000 12500000 12500000 14000000 14000000 15000000 15000000 17500000 17500000 20000000 20000000",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.16275,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " provisioned to that account. <em>New</em> <em>Relic</em> uses this &quot;bucket&quot; pricing structure based on the quantity value in order to offer discounts on large volume purchases. Be sure to select an available bucket value. Otherwise, the <em>New</em> <em>Relic</em> <em>Partnership</em> <em>API</em> will return an error response. Quantity by product Here"
      },
      "id": "6044181d28ccbc2ea42c608a"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-account-object": [
    {
      "sections": [
        "Partnership billing integration API",
        "Requirements",
        "Communication endpoint",
        "Billing API",
        "Customer subscription notification API",
        "Invoice notification API"
      ],
      "title": "Partnership billing integration API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "73da7e096ce56bb45e39bb95a1c2e0a0011be597",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partnership-billing-integration-api/",
      "published_at": "2021-06-09T05:33:50Z",
      "updated_at": "2021-03-30T21:12:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Partnership API includes functionality for partners to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts. This is particularly useful for partners acting as resellers or managed service providers of New Relic accounts. For example, when customers of a New Relic reseller partner purchase a higher subscription level from New Relic's Sales team, New Relic replaces the old subscription with a new subscription. New Relic then uses the API to communicate this information to the partner. Requirements Before using this object, please read the Partnership API requirements. Communication endpoint Partners must implement a billing communication endpoint that identifies the partner's URL and PARTNER_ID. New Relic uses this endpoint to notify the partner that New Relic has made a change to a partner account's subscription or invoice information. The endpoint must support HTTPS. The partner-specified portion of the URL is identified from the Settings tab of New Relic's Partner Portal. The PARTNER_ID is the partner's external ID for this account. This value must be passed when the account is created by using the partner_external_identifier parameter. Billing API Supported functionality for the Partnership billing API includes: Customer subscription notification Invoice information notification Customer subscription notification API To communicate changes to a partner about a customer's subscription, New Relic uses the POST method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy Authentication is done via headers with the partner's REST API key or Admin user's API key. The Partnership API returns the results as JSON. Parameters: Name Type Description id String The customer's New Relic account ID subscription_id Integer Subscription's numeric ID subscription_string String Description of subscription for display price Integer Monthly price of subscription in cents number_of_hosts Integer Number of hosts starts Date Subscription's start date (yyyymmdd) expires Date Subscription's end date (yyyymmdd) Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed. Invoice notification API New Relic uses this endpoint to notify the partner of changes to a partner account's subscription level and invoice information. New Relic uses the PUT method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy OR https://partner-specified/partner-specified/PARTNER_ID.xml Copy The Partnership API returns the results as JSON or XML. Parameters: Name Type Description id string The customer's New Relic account ID subscription_id integer Subscription's numeric ID subscription_string string Description of subscription for display price integer Monthly price of subscription in cents Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.3781,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> billing integration <em>API</em>",
        "sections": "<em>Partnership</em> billing integration <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s <em>Partnership</em> <em>API</em> includes functionality for partners to replace a customer&#x27;s existing subscription with a <em>new</em> one, or to update invoice information for <em>New</em> <em>Relic</em> <em>partner</em> accounts. This is particularly useful for partners acting as resellers or managed service providers of <em>New</em> <em>Relic</em>"
      },
      "id": "603ec86e64441f09e44e8871"
    },
    {
      "sections": [
        "Partnership API sub-account object",
        "Requirements",
        "Introduction to using sub-accounts",
        "Sub-account object attributes",
        "name (REQUIRED)",
        "allow_api_access",
        "testing",
        "users (REQUIRED for some accounts)",
        "password (REQUIRED)",
        "Sub-account API calls",
        "JSON example",
        "Sub-account object JSON request",
        "JSON response",
        "Sub-account object API examples",
        "Create"
      ],
      "title": "Partnership API sub-account object",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7fb13302d892a5f89c6c9371f35a60bf1ed9f6a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-sub-account-object/",
      "published_at": "2021-06-08T19:57:01Z",
      "updated_at": "2021-03-30T12:15:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains how to use the Partnership API to manage sub-accounts. For accounts, you'd use the sub-account object. Requirements You may not have access to using this object. Before using the Partnership API, first read the requirements. Introduction to using sub-accounts Some notes about using the sub-account object: To manage existing master accounts or existing sub-accounts, use the Partnership API account object. A parent account may have more than one associated sub-account, but every sub-account must correspond to one and only one parent account. Every sub-account must have at least a primary_admin user. You cannot create a sub-account without connecting it to an existing parent account and adding at least one user. Sub-account object attributes Before using the Partnership API, first read the requirements. Here are the Partnership API sub-account object's attributes: name (REQUIRED) Type: String Default: (none) This name must be unique in New Relic's database. If the specified name is not unique, it will be auto-incremented with a numeric suffix as follows: conflicting_name_1 conflicting_name_2 etc. Copy allow_api_access Type: Boolean Default: False This flag allows API access to application data. This must be set to true for partnerships remotely administering accounts. testing Type: Boolean Default: False Use this flag to indicate a test account. Test accounts are assumed to contain garbage data and are ignored by internal systems. The data they generate may be deleted at any time. users (REQUIRED for some accounts) Type: Array Default: (none) An array defining a list of users. There are some restrictions in place dependent on the status of your account: For customer partnerships who have switched to the New Relic One user model: do not define users. If you add users with this field, they will be ignored. Instead, to add users, you'd use these user management procedures. For all other accounts, which have users on our original user model: When you create the sub-account, you can define only one user: the account Owner. To add additional users, use the Partnership API user object. For more about restrictions, read the Requirements. password (REQUIRED) Type: String Default: (none) If you are creating a sub-account with an existing user as the account Owner, the password must match the user's current password. For some New Relic organizations, sub-accounts can also be created via the master account's Account settings page in the New Relic UI. Sub-account API calls Here is the URL pattern to create sub-accounts. Notice that the Parent Account ID must be specified. If using this URL pattern, send the JSON object along with an HTTP header containing the Partner API key. For example: POST .../api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts​ x-api-key:PARTNER_ACCOUNT_KEY Content-Type: application/json { JSON data } Copy Call Resource URL pattern Create a sub-account with the given parameters. POST /api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts Copy JSON example Here is an example of a JSON request and response using the Partnership API sub-account object. Note that this is just an example, and that for some accounts, the users attribute is unnecessary and will be ignored. Sub-account object JSON request { \"account\": { \"name\": \"Sample Sub-Account\", \"users\": [ { \"email\": \"sample_user@sample.org\", \"password\": \"XXXXXXXX\", \"owner\": true, \"role\": \"admin\", \"first_name\": \"Sample\", \"last_name\": \"User\" } ], \"allow_api_access\": true, \"phone_number\": \"555-555-5555\" } } Copy JSON response { \"id\": XXXXXX, \"name\": \"Sample Account\", \"status\": \"pending\", \"license_key\": \"XXXXXX\", \"api_key\": \"XXXXXX\", \"browser_monitoring_key\": \"XXXXXX\", \"allow_api_access\": true, \"high_security\": false, \"testing\": null, \"partner_external_identifier\": null, \"parent_account_id\":XXXXXX, \"subscription\": { \"id\": XXXXXX, \"starts_on\": \"2016-05-17\", \"expires_on\": null, \"annual_renewal_on\": null, \"products\": [ { \"product_id\": 4, \"name\": \"Pro\", \"units\": 10, \"price\": 1990.0 }, { \"product_id\": 10, \"name\": \"Mobile Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 20, \"name\": \"Browser Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 16, \"name\": \"Insights None\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 23, \"name\": \"Synthetics Lite\", \"units\": 0, \"price\": 0.0 } ] }, \"primary admin\": { \"id\": XXXXXX, \"email\": \"sample_user@sample.org\", \"first_name\": \"Sample\", \"last_name\": \"User\", \"state\": \"active\" } } Copy Sub-account object API examples Here is an example of an API call using the Partnership API sub-account object. Note that this is just an example, and that for some accounts, the users attribute is unnecessary and will be ignored. Create Request: curl -X POST \\ -H 'x-api-key:PARTNER_ACCOUNT_KEY' \\ -H 'Content-Type:application/json' \\ -d '{\"sub_account\":{\"name\":\"Sample Sub-Account\"}, \"users\":[{\"email\":\"sample_user@sample.org\", \"password\":\"XXXXXX\", \"first_name\":\"Sample\", \"last_name\":\"User\", \"role\":\"admin\", \"owner\":\"true\"}]}' \\ https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts Copy Response (line breaks are for readability): { \"id\": XXXXXX, \"name\": \"Sample Sub-Account\", \"status\": \"pending\", \"license_key\": \"XXXXXX\", \"api_key\": \"XXXXXX\", \"browser_monitoring_key\": \"XXXXXX\", \"allow_api_access\": false, \"high_security\": false, \"testing\": null, \"partner_external_identifier\": null, \"parent_account_id\":XXXXXX, \"subscription\": { \"id\": XXXXXX, \"starts_on\": \"2016-05-17\", \"expires_on\": null, \"annual_renewal_on\": null, \"products\": [ { \"product_id\": 4, \"name\": \"Pro\", \"units\": 10, \"price\": 1999.0 }, { \"product_id\": 10, \"name\": \"Mobile Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 20, \"name\": \"Browser Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 16, \"name\": \"Insights None\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 23, \"name\": \"Synthetics Lite\", \"units\": 0, \"price\": 0.0 } ] }, \"primary admin\": { \"id\": XXXXXX, \"email\": \"sample_user@sample.org\", \"first_name\": \"Sample\", \"last_name\": \"User\", \"state\": \"active\" } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.29633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> sub-account object",
        "sections": "<em>Partnership</em> <em>API</em> sub-account object",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " the <em>Partnership</em> <em>API</em> user object. For more about restrictions, read the Requirements. password (REQUIRED) Type: String Default: (none) If you are creating a sub-account with an existing user as the account Owner, the password must match the user&#x27;s current password. For some <em>New</em> <em>Relic</em> organizations"
      },
      "id": "603eba3ae7b9d2b8e32a07b5"
    },
    {
      "sections": [
        "Partnership API reference",
        "Requirements",
        "Find your Partnership API key",
        "Find your Partner ID",
        "Authenticate the API call",
        "Notes for partners who manage New Relic accounts",
        "Errors"
      ],
      "title": "Partnership API reference",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7bc374ae0e6f6917aa82a70e582606ea4a9878ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference/",
      "published_at": "2021-06-09T00:10:04Z",
      "updated_at": "2021-03-30T03:04:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains technical details about using the Partnership API. For an introduction and requirements, first read Intro to Partnership API. Requirements For requirements, see Intro to Partnership API. Find your Partnership API key The Partnership API requires that you authenticate with the REST API key that is specific to your partnership owner account (you cannot use the other REST API keys). When using your Partnership API key with calls to REST API (v2) endpoints that require the use of an Admin user's API key, see Admin user's API Key and partnerships. Find your Partner ID The Partnership API also requires that you authenticate by providing a Partner ID specific to your partnership. This is unique from the account ID for your partnership owner account. To obtain your Partner ID, go to your partner admin console and retrieve the partner ID number that is listed in your URL: https://partner-admin-console.newrelic.com/accounts/​$ACCOUNT_ID/admin_console/partnerships/$PARTNER_ID Copy You must include the Partner ID as part of the base URL for the Partner API. URL component URL pattern Partner API endpoint https://rpm.newrelic.com/api/v2/partners/PARTNER_ID Copy Resource URL patterns /accounts /accounts/ACCOUNT_ID /accounts/ACCOUNT_ID/users /accounts/ACCOUNT_ID/users/USER_ID /accounts/ACCOUNT_ID/subscriptions /accounts/ACCOUNT_ID/subscriptions/SUBSCRIPTION_ID Copy Example https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/ACCOUNT_ID Copy Authenticate the API call To authenticate to the Partner API when making an API call: Add a request header labeled x-api-key and set its value to your Partner API key. Include your Partner ID at the specified point in the request URI. Notes for partners who manage New Relic accounts For partners who manage New Relic accounts for their customers, the initial API call for all account-level interactions is to \"create account.\" This call returns an xml record of the newly created account. Part of this record is the account_id. All of the other calls in the Partnership API require the account_id as a parameter. Provision will need to be made by the partner to parse the returned xml extract, store the account_id, and associate it with the users' partner account record. Errors New Relic uses conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success and codes in the 4xx range indicate an error that resulted from the provided information (for example, a required parameter was missing). Error Probable cause 400 Bad Request Most commonly the call is missing a required parameter. 401 Unauthorized A valid API key was not provided. 402 Request Failed Parameters were valid but request failed for some reason. 404 Not Found The requested item doesn't exist. 422 Unprocessable Entity Your account has special terms and cannot be changed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.21326,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> reference",
        "sections": "Notes for <em>partners</em> who manage <em>New</em> <em>Relic</em> accounts",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>API</em> key that is specific to your <em>partnership</em> owner account (you cannot use the other REST <em>API</em> keys). When using your <em>Partnership</em> <em>API</em> key with calls to REST <em>API</em> (v2) endpoints that require the use of an Admin user&#x27;s <em>API</em> key, see Admin user&#x27;s <em>API</em> Key and <em>partnerships</em>. Find your <em>Partner</em> ID"
      },
      "id": "603ebc5f28ccbc22b6eba780"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-keys": [
    {
      "sections": [
        "Partnership billing integration API",
        "Requirements",
        "Communication endpoint",
        "Billing API",
        "Customer subscription notification API",
        "Invoice notification API"
      ],
      "title": "Partnership billing integration API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "73da7e096ce56bb45e39bb95a1c2e0a0011be597",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partnership-billing-integration-api/",
      "published_at": "2021-06-09T05:33:50Z",
      "updated_at": "2021-03-30T21:12:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Partnership API includes functionality for partners to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts. This is particularly useful for partners acting as resellers or managed service providers of New Relic accounts. For example, when customers of a New Relic reseller partner purchase a higher subscription level from New Relic's Sales team, New Relic replaces the old subscription with a new subscription. New Relic then uses the API to communicate this information to the partner. Requirements Before using this object, please read the Partnership API requirements. Communication endpoint Partners must implement a billing communication endpoint that identifies the partner's URL and PARTNER_ID. New Relic uses this endpoint to notify the partner that New Relic has made a change to a partner account's subscription or invoice information. The endpoint must support HTTPS. The partner-specified portion of the URL is identified from the Settings tab of New Relic's Partner Portal. The PARTNER_ID is the partner's external ID for this account. This value must be passed when the account is created by using the partner_external_identifier parameter. Billing API Supported functionality for the Partnership billing API includes: Customer subscription notification Invoice information notification Customer subscription notification API To communicate changes to a partner about a customer's subscription, New Relic uses the POST method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy Authentication is done via headers with the partner's REST API key or Admin user's API key. The Partnership API returns the results as JSON. Parameters: Name Type Description id String The customer's New Relic account ID subscription_id Integer Subscription's numeric ID subscription_string String Description of subscription for display price Integer Monthly price of subscription in cents number_of_hosts Integer Number of hosts starts Date Subscription's start date (yyyymmdd) expires Date Subscription's end date (yyyymmdd) Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed. Invoice notification API New Relic uses this endpoint to notify the partner of changes to a partner account's subscription level and invoice information. New Relic uses the PUT method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy OR https://partner-specified/partner-specified/PARTNER_ID.xml Copy The Partnership API returns the results as JSON or XML. Parameters: Name Type Description id string The customer's New Relic account ID subscription_id integer Subscription's numeric ID subscription_string string Description of subscription for display price integer Monthly price of subscription in cents Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.3781,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> billing integration <em>API</em>",
        "sections": "<em>Partnership</em> billing integration <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s <em>Partnership</em> <em>API</em> includes functionality for partners to replace a customer&#x27;s existing subscription with a <em>new</em> one, or to update invoice information for <em>New</em> <em>Relic</em> <em>partner</em> accounts. This is particularly useful for partners acting as resellers or managed service providers of <em>New</em> <em>Relic</em>"
      },
      "id": "603ec86e64441f09e44e8871"
    },
    {
      "sections": [
        "Partnership API sub-account object",
        "Requirements",
        "Introduction to using sub-accounts",
        "Sub-account object attributes",
        "name (REQUIRED)",
        "allow_api_access",
        "testing",
        "users (REQUIRED for some accounts)",
        "password (REQUIRED)",
        "Sub-account API calls",
        "JSON example",
        "Sub-account object JSON request",
        "JSON response",
        "Sub-account object API examples",
        "Create"
      ],
      "title": "Partnership API sub-account object",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7fb13302d892a5f89c6c9371f35a60bf1ed9f6a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-sub-account-object/",
      "published_at": "2021-06-08T19:57:01Z",
      "updated_at": "2021-03-30T12:15:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains how to use the Partnership API to manage sub-accounts. For accounts, you'd use the sub-account object. Requirements You may not have access to using this object. Before using the Partnership API, first read the requirements. Introduction to using sub-accounts Some notes about using the sub-account object: To manage existing master accounts or existing sub-accounts, use the Partnership API account object. A parent account may have more than one associated sub-account, but every sub-account must correspond to one and only one parent account. Every sub-account must have at least a primary_admin user. You cannot create a sub-account without connecting it to an existing parent account and adding at least one user. Sub-account object attributes Before using the Partnership API, first read the requirements. Here are the Partnership API sub-account object's attributes: name (REQUIRED) Type: String Default: (none) This name must be unique in New Relic's database. If the specified name is not unique, it will be auto-incremented with a numeric suffix as follows: conflicting_name_1 conflicting_name_2 etc. Copy allow_api_access Type: Boolean Default: False This flag allows API access to application data. This must be set to true for partnerships remotely administering accounts. testing Type: Boolean Default: False Use this flag to indicate a test account. Test accounts are assumed to contain garbage data and are ignored by internal systems. The data they generate may be deleted at any time. users (REQUIRED for some accounts) Type: Array Default: (none) An array defining a list of users. There are some restrictions in place dependent on the status of your account: For customer partnerships who have switched to the New Relic One user model: do not define users. If you add users with this field, they will be ignored. Instead, to add users, you'd use these user management procedures. For all other accounts, which have users on our original user model: When you create the sub-account, you can define only one user: the account Owner. To add additional users, use the Partnership API user object. For more about restrictions, read the Requirements. password (REQUIRED) Type: String Default: (none) If you are creating a sub-account with an existing user as the account Owner, the password must match the user's current password. For some New Relic organizations, sub-accounts can also be created via the master account's Account settings page in the New Relic UI. Sub-account API calls Here is the URL pattern to create sub-accounts. Notice that the Parent Account ID must be specified. If using this URL pattern, send the JSON object along with an HTTP header containing the Partner API key. For example: POST .../api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts​ x-api-key:PARTNER_ACCOUNT_KEY Content-Type: application/json { JSON data } Copy Call Resource URL pattern Create a sub-account with the given parameters. POST /api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts Copy JSON example Here is an example of a JSON request and response using the Partnership API sub-account object. Note that this is just an example, and that for some accounts, the users attribute is unnecessary and will be ignored. Sub-account object JSON request { \"account\": { \"name\": \"Sample Sub-Account\", \"users\": [ { \"email\": \"sample_user@sample.org\", \"password\": \"XXXXXXXX\", \"owner\": true, \"role\": \"admin\", \"first_name\": \"Sample\", \"last_name\": \"User\" } ], \"allow_api_access\": true, \"phone_number\": \"555-555-5555\" } } Copy JSON response { \"id\": XXXXXX, \"name\": \"Sample Account\", \"status\": \"pending\", \"license_key\": \"XXXXXX\", \"api_key\": \"XXXXXX\", \"browser_monitoring_key\": \"XXXXXX\", \"allow_api_access\": true, \"high_security\": false, \"testing\": null, \"partner_external_identifier\": null, \"parent_account_id\":XXXXXX, \"subscription\": { \"id\": XXXXXX, \"starts_on\": \"2016-05-17\", \"expires_on\": null, \"annual_renewal_on\": null, \"products\": [ { \"product_id\": 4, \"name\": \"Pro\", \"units\": 10, \"price\": 1990.0 }, { \"product_id\": 10, \"name\": \"Mobile Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 20, \"name\": \"Browser Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 16, \"name\": \"Insights None\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 23, \"name\": \"Synthetics Lite\", \"units\": 0, \"price\": 0.0 } ] }, \"primary admin\": { \"id\": XXXXXX, \"email\": \"sample_user@sample.org\", \"first_name\": \"Sample\", \"last_name\": \"User\", \"state\": \"active\" } } Copy Sub-account object API examples Here is an example of an API call using the Partnership API sub-account object. Note that this is just an example, and that for some accounts, the users attribute is unnecessary and will be ignored. Create Request: curl -X POST \\ -H 'x-api-key:PARTNER_ACCOUNT_KEY' \\ -H 'Content-Type:application/json' \\ -d '{\"sub_account\":{\"name\":\"Sample Sub-Account\"}, \"users\":[{\"email\":\"sample_user@sample.org\", \"password\":\"XXXXXX\", \"first_name\":\"Sample\", \"last_name\":\"User\", \"role\":\"admin\", \"owner\":\"true\"}]}' \\ https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts Copy Response (line breaks are for readability): { \"id\": XXXXXX, \"name\": \"Sample Sub-Account\", \"status\": \"pending\", \"license_key\": \"XXXXXX\", \"api_key\": \"XXXXXX\", \"browser_monitoring_key\": \"XXXXXX\", \"allow_api_access\": false, \"high_security\": false, \"testing\": null, \"partner_external_identifier\": null, \"parent_account_id\":XXXXXX, \"subscription\": { \"id\": XXXXXX, \"starts_on\": \"2016-05-17\", \"expires_on\": null, \"annual_renewal_on\": null, \"products\": [ { \"product_id\": 4, \"name\": \"Pro\", \"units\": 10, \"price\": 1999.0 }, { \"product_id\": 10, \"name\": \"Mobile Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 20, \"name\": \"Browser Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 16, \"name\": \"Insights None\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 23, \"name\": \"Synthetics Lite\", \"units\": 0, \"price\": 0.0 } ] }, \"primary admin\": { \"id\": XXXXXX, \"email\": \"sample_user@sample.org\", \"first_name\": \"Sample\", \"last_name\": \"User\", \"state\": \"active\" } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.29633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> sub-account object",
        "sections": "<em>Partnership</em> <em>API</em> sub-account object",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " the <em>Partnership</em> <em>API</em> user object. For more about restrictions, read the Requirements. password (REQUIRED) Type: String Default: (none) If you are creating a sub-account with an existing user as the account Owner, the password must match the user&#x27;s current password. For some <em>New</em> <em>Relic</em> organizations"
      },
      "id": "603eba3ae7b9d2b8e32a07b5"
    },
    {
      "sections": [
        "Partnership API reference",
        "Requirements",
        "Find your Partnership API key",
        "Find your Partner ID",
        "Authenticate the API call",
        "Notes for partners who manage New Relic accounts",
        "Errors"
      ],
      "title": "Partnership API reference",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7bc374ae0e6f6917aa82a70e582606ea4a9878ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference/",
      "published_at": "2021-06-09T00:10:04Z",
      "updated_at": "2021-03-30T03:04:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains technical details about using the Partnership API. For an introduction and requirements, first read Intro to Partnership API. Requirements For requirements, see Intro to Partnership API. Find your Partnership API key The Partnership API requires that you authenticate with the REST API key that is specific to your partnership owner account (you cannot use the other REST API keys). When using your Partnership API key with calls to REST API (v2) endpoints that require the use of an Admin user's API key, see Admin user's API Key and partnerships. Find your Partner ID The Partnership API also requires that you authenticate by providing a Partner ID specific to your partnership. This is unique from the account ID for your partnership owner account. To obtain your Partner ID, go to your partner admin console and retrieve the partner ID number that is listed in your URL: https://partner-admin-console.newrelic.com/accounts/​$ACCOUNT_ID/admin_console/partnerships/$PARTNER_ID Copy You must include the Partner ID as part of the base URL for the Partner API. URL component URL pattern Partner API endpoint https://rpm.newrelic.com/api/v2/partners/PARTNER_ID Copy Resource URL patterns /accounts /accounts/ACCOUNT_ID /accounts/ACCOUNT_ID/users /accounts/ACCOUNT_ID/users/USER_ID /accounts/ACCOUNT_ID/subscriptions /accounts/ACCOUNT_ID/subscriptions/SUBSCRIPTION_ID Copy Example https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/ACCOUNT_ID Copy Authenticate the API call To authenticate to the Partner API when making an API call: Add a request header labeled x-api-key and set its value to your Partner API key. Include your Partner ID at the specified point in the request URI. Notes for partners who manage New Relic accounts For partners who manage New Relic accounts for their customers, the initial API call for all account-level interactions is to \"create account.\" This call returns an xml record of the newly created account. Part of this record is the account_id. All of the other calls in the Partnership API require the account_id as a parameter. Provision will need to be made by the partner to parse the returned xml extract, store the account_id, and associate it with the users' partner account record. Errors New Relic uses conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success and codes in the 4xx range indicate an error that resulted from the provided information (for example, a required parameter was missing). Error Probable cause 400 Bad Request Most commonly the call is missing a required parameter. 401 Unauthorized A valid API key was not provided. 402 Request Failed Parameters were valid but request failed for some reason. 404 Not Found The requested item doesn't exist. 422 Unprocessable Entity Your account has special terms and cannot be changed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.21326,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> reference",
        "sections": "Notes for <em>partners</em> who manage <em>New</em> <em>Relic</em> accounts",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>API</em> key that is specific to your <em>partnership</em> owner account (you cannot use the other REST <em>API</em> keys). When using your <em>Partnership</em> <em>API</em> key with calls to REST <em>API</em> (v2) endpoints that require the use of an Admin user&#x27;s <em>API</em> key, see Admin user&#x27;s <em>API</em> Key and <em>partnerships</em>. Find your <em>Partner</em> ID"
      },
      "id": "603ebc5f28ccbc22b6eba780"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-sub-account-object": [
    {
      "sections": [
        "Partnership billing integration API",
        "Requirements",
        "Communication endpoint",
        "Billing API",
        "Customer subscription notification API",
        "Invoice notification API"
      ],
      "title": "Partnership billing integration API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "73da7e096ce56bb45e39bb95a1c2e0a0011be597",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partnership-billing-integration-api/",
      "published_at": "2021-06-09T05:33:50Z",
      "updated_at": "2021-03-30T21:12:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Partnership API includes functionality for partners to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts. This is particularly useful for partners acting as resellers or managed service providers of New Relic accounts. For example, when customers of a New Relic reseller partner purchase a higher subscription level from New Relic's Sales team, New Relic replaces the old subscription with a new subscription. New Relic then uses the API to communicate this information to the partner. Requirements Before using this object, please read the Partnership API requirements. Communication endpoint Partners must implement a billing communication endpoint that identifies the partner's URL and PARTNER_ID. New Relic uses this endpoint to notify the partner that New Relic has made a change to a partner account's subscription or invoice information. The endpoint must support HTTPS. The partner-specified portion of the URL is identified from the Settings tab of New Relic's Partner Portal. The PARTNER_ID is the partner's external ID for this account. This value must be passed when the account is created by using the partner_external_identifier parameter. Billing API Supported functionality for the Partnership billing API includes: Customer subscription notification Invoice information notification Customer subscription notification API To communicate changes to a partner about a customer's subscription, New Relic uses the POST method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy Authentication is done via headers with the partner's REST API key or Admin user's API key. The Partnership API returns the results as JSON. Parameters: Name Type Description id String The customer's New Relic account ID subscription_id Integer Subscription's numeric ID subscription_string String Description of subscription for display price Integer Monthly price of subscription in cents number_of_hosts Integer Number of hosts starts Date Subscription's start date (yyyymmdd) expires Date Subscription's end date (yyyymmdd) Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed. Invoice notification API New Relic uses this endpoint to notify the partner of changes to a partner account's subscription level and invoice information. New Relic uses the PUT method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy OR https://partner-specified/partner-specified/PARTNER_ID.xml Copy The Partnership API returns the results as JSON or XML. Parameters: Name Type Description id string The customer's New Relic account ID subscription_id integer Subscription's numeric ID subscription_string string Description of subscription for display price integer Monthly price of subscription in cents Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.3781,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> billing integration <em>API</em>",
        "sections": "<em>Partnership</em> billing integration <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s <em>Partnership</em> <em>API</em> includes functionality for partners to replace a customer&#x27;s existing subscription with a <em>new</em> one, or to update invoice information for <em>New</em> <em>Relic</em> <em>partner</em> accounts. This is particularly useful for partners acting as resellers or managed service providers of <em>New</em> <em>Relic</em>"
      },
      "id": "603ec86e64441f09e44e8871"
    },
    {
      "sections": [
        "Partnership API reference",
        "Requirements",
        "Find your Partnership API key",
        "Find your Partner ID",
        "Authenticate the API call",
        "Notes for partners who manage New Relic accounts",
        "Errors"
      ],
      "title": "Partnership API reference",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7bc374ae0e6f6917aa82a70e582606ea4a9878ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference/",
      "published_at": "2021-06-09T00:10:04Z",
      "updated_at": "2021-03-30T03:04:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains technical details about using the Partnership API. For an introduction and requirements, first read Intro to Partnership API. Requirements For requirements, see Intro to Partnership API. Find your Partnership API key The Partnership API requires that you authenticate with the REST API key that is specific to your partnership owner account (you cannot use the other REST API keys). When using your Partnership API key with calls to REST API (v2) endpoints that require the use of an Admin user's API key, see Admin user's API Key and partnerships. Find your Partner ID The Partnership API also requires that you authenticate by providing a Partner ID specific to your partnership. This is unique from the account ID for your partnership owner account. To obtain your Partner ID, go to your partner admin console and retrieve the partner ID number that is listed in your URL: https://partner-admin-console.newrelic.com/accounts/​$ACCOUNT_ID/admin_console/partnerships/$PARTNER_ID Copy You must include the Partner ID as part of the base URL for the Partner API. URL component URL pattern Partner API endpoint https://rpm.newrelic.com/api/v2/partners/PARTNER_ID Copy Resource URL patterns /accounts /accounts/ACCOUNT_ID /accounts/ACCOUNT_ID/users /accounts/ACCOUNT_ID/users/USER_ID /accounts/ACCOUNT_ID/subscriptions /accounts/ACCOUNT_ID/subscriptions/SUBSCRIPTION_ID Copy Example https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/ACCOUNT_ID Copy Authenticate the API call To authenticate to the Partner API when making an API call: Add a request header labeled x-api-key and set its value to your Partner API key. Include your Partner ID at the specified point in the request URI. Notes for partners who manage New Relic accounts For partners who manage New Relic accounts for their customers, the initial API call for all account-level interactions is to \"create account.\" This call returns an xml record of the newly created account. Part of this record is the account_id. All of the other calls in the Partnership API require the account_id as a parameter. Provision will need to be made by the partner to parse the returned xml extract, store the account_id, and associate it with the users' partner account record. Errors New Relic uses conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success and codes in the 4xx range indicate an error that resulted from the provided information (for example, a required parameter was missing). Error Probable cause 400 Bad Request Most commonly the call is missing a required parameter. 401 Unauthorized A valid API key was not provided. 402 Request Failed Parameters were valid but request failed for some reason. 404 Not Found The requested item doesn't exist. 422 Unprocessable Entity Your account has special terms and cannot be changed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.21326,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> reference",
        "sections": "Notes for <em>partners</em> who manage <em>New</em> <em>Relic</em> accounts",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>API</em> key that is specific to your <em>partnership</em> owner account (you cannot use the other REST <em>API</em> keys). When using your <em>Partnership</em> <em>API</em> key with calls to REST <em>API</em> (v2) endpoints that require the use of an Admin user&#x27;s <em>API</em> key, see Admin user&#x27;s <em>API</em> Key and <em>partnerships</em>. Find your <em>Partner</em> ID"
      },
      "id": "603ebc5f28ccbc22b6eba780"
    },
    {
      "sections": [
        "Product buckets",
        "Requirements",
        "Overview (#overview)",
        "Quantity by product",
        "Insights Events quantity",
        "Browser PageViews quantity",
        "Synthetics Checks quantity"
      ],
      "title": "Product buckets",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "fe7632af0936f9878b04ba0c25f7cf8a7f684399",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/product-buckets/",
      "published_at": "2021-06-09T05:34:07Z",
      "updated_at": "2021-03-29T21:27:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For partnership accounts on our original product pricing, you can use the Partnership API for managing subscriptions. This doc explains some details for using the Browser, Synthetics, and Insights products. Requirements This doc applies only for partnership accounts on our original pricing plan. Before using this API, please read the Partnership API requirements. Overview (#overview) When using the Partnership API for Insights, Browser, and Synthetics products, you must provide a valid quantity value. This indicates the number of Insights Events, Browser PageViews, and Synthetics Checks provisioned to that account. New Relic uses this \"bucket\" pricing structure based on the quantity value in order to offer discounts on large volume purchases. Be sure to select an available bucket value. Otherwise, the New Relic Partnership API will return an error response. Quantity by product Here are the valid quantity values by New Relic product. Insights Events quantity Insights Pro Insights Pro Annual 25 25 50 50 75 75 300 300 625 625 1250 1250 2500 2500 5000 5000 10000 10000 20000 20000 40000 40000 60000 60000 80000 80000 100000 100000 120000 120000 140000 140000 Browser PageViews quantity Browser Pro Browser Pro Annualynthetics Checks quantity Synthetics Pro Synthetics Pro Annual 10000 10000 15000 15000 25000 25000 35000 35000 50000 50000 75000 75000 100000 100000 150000 150000 250000 250000 300000 300000 400000 400000 500000 500000 600000 600000 750000 750000 900000 900000 1000000 1000000 1150000 1150000 1300000 1300000 1500000 1500000 1750000 1750000 2000000 2000000 2500000 2500000 3000000 3000000 3500000 3500000 5000000 5000000 7000000 7000000 8500000 8500000 10000000 10000000 12500000 12500000 14000000 14000000 15000000 15000000 17500000 17500000 20000000 20000000",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.16275,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " provisioned to that account. <em>New</em> <em>Relic</em> uses this &quot;bucket&quot; pricing structure based on the quantity value in order to offer discounts on large volume purchases. Be sure to select an available bucket value. Otherwise, the <em>New</em> <em>Relic</em> <em>Partnership</em> <em>API</em> will return an error response. Quantity by product Here"
      },
      "id": "6044181d28ccbc2ea42c608a"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-subscription-object": [
    {
      "sections": [
        "Partnership billing integration API",
        "Requirements",
        "Communication endpoint",
        "Billing API",
        "Customer subscription notification API",
        "Invoice notification API"
      ],
      "title": "Partnership billing integration API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "73da7e096ce56bb45e39bb95a1c2e0a0011be597",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partnership-billing-integration-api/",
      "published_at": "2021-06-09T05:33:50Z",
      "updated_at": "2021-03-30T21:12:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Partnership API includes functionality for partners to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts. This is particularly useful for partners acting as resellers or managed service providers of New Relic accounts. For example, when customers of a New Relic reseller partner purchase a higher subscription level from New Relic's Sales team, New Relic replaces the old subscription with a new subscription. New Relic then uses the API to communicate this information to the partner. Requirements Before using this object, please read the Partnership API requirements. Communication endpoint Partners must implement a billing communication endpoint that identifies the partner's URL and PARTNER_ID. New Relic uses this endpoint to notify the partner that New Relic has made a change to a partner account's subscription or invoice information. The endpoint must support HTTPS. The partner-specified portion of the URL is identified from the Settings tab of New Relic's Partner Portal. The PARTNER_ID is the partner's external ID for this account. This value must be passed when the account is created by using the partner_external_identifier parameter. Billing API Supported functionality for the Partnership billing API includes: Customer subscription notification Invoice information notification Customer subscription notification API To communicate changes to a partner about a customer's subscription, New Relic uses the POST method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy Authentication is done via headers with the partner's REST API key or Admin user's API key. The Partnership API returns the results as JSON. Parameters: Name Type Description id String The customer's New Relic account ID subscription_id Integer Subscription's numeric ID subscription_string String Description of subscription for display price Integer Monthly price of subscription in cents number_of_hosts Integer Number of hosts starts Date Subscription's start date (yyyymmdd) expires Date Subscription's end date (yyyymmdd) Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed. Invoice notification API New Relic uses this endpoint to notify the partner of changes to a partner account's subscription level and invoice information. New Relic uses the PUT method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy OR https://partner-specified/partner-specified/PARTNER_ID.xml Copy The Partnership API returns the results as JSON or XML. Parameters: Name Type Description id string The customer's New Relic account ID subscription_id integer Subscription's numeric ID subscription_string string Description of subscription for display price integer Monthly price of subscription in cents Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.37808,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> billing integration <em>API</em>",
        "sections": "<em>Partnership</em> billing integration <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s <em>Partnership</em> <em>API</em> includes functionality for partners to replace a customer&#x27;s existing subscription with a <em>new</em> one, or to update invoice information for <em>New</em> <em>Relic</em> <em>partner</em> accounts. This is particularly useful for partners acting as resellers or managed service providers of <em>New</em> <em>Relic</em>"
      },
      "id": "603ec86e64441f09e44e8871"
    },
    {
      "sections": [
        "Partnership API sub-account object",
        "Requirements",
        "Introduction to using sub-accounts",
        "Sub-account object attributes",
        "name (REQUIRED)",
        "allow_api_access",
        "testing",
        "users (REQUIRED for some accounts)",
        "password (REQUIRED)",
        "Sub-account API calls",
        "JSON example",
        "Sub-account object JSON request",
        "JSON response",
        "Sub-account object API examples",
        "Create"
      ],
      "title": "Partnership API sub-account object",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7fb13302d892a5f89c6c9371f35a60bf1ed9f6a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-sub-account-object/",
      "published_at": "2021-06-08T19:57:01Z",
      "updated_at": "2021-03-30T12:15:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains how to use the Partnership API to manage sub-accounts. For accounts, you'd use the sub-account object. Requirements You may not have access to using this object. Before using the Partnership API, first read the requirements. Introduction to using sub-accounts Some notes about using the sub-account object: To manage existing master accounts or existing sub-accounts, use the Partnership API account object. A parent account may have more than one associated sub-account, but every sub-account must correspond to one and only one parent account. Every sub-account must have at least a primary_admin user. You cannot create a sub-account without connecting it to an existing parent account and adding at least one user. Sub-account object attributes Before using the Partnership API, first read the requirements. Here are the Partnership API sub-account object's attributes: name (REQUIRED) Type: String Default: (none) This name must be unique in New Relic's database. If the specified name is not unique, it will be auto-incremented with a numeric suffix as follows: conflicting_name_1 conflicting_name_2 etc. Copy allow_api_access Type: Boolean Default: False This flag allows API access to application data. This must be set to true for partnerships remotely administering accounts. testing Type: Boolean Default: False Use this flag to indicate a test account. Test accounts are assumed to contain garbage data and are ignored by internal systems. The data they generate may be deleted at any time. users (REQUIRED for some accounts) Type: Array Default: (none) An array defining a list of users. There are some restrictions in place dependent on the status of your account: For customer partnerships who have switched to the New Relic One user model: do not define users. If you add users with this field, they will be ignored. Instead, to add users, you'd use these user management procedures. For all other accounts, which have users on our original user model: When you create the sub-account, you can define only one user: the account Owner. To add additional users, use the Partnership API user object. For more about restrictions, read the Requirements. password (REQUIRED) Type: String Default: (none) If you are creating a sub-account with an existing user as the account Owner, the password must match the user's current password. For some New Relic organizations, sub-accounts can also be created via the master account's Account settings page in the New Relic UI. Sub-account API calls Here is the URL pattern to create sub-accounts. Notice that the Parent Account ID must be specified. If using this URL pattern, send the JSON object along with an HTTP header containing the Partner API key. For example: POST .../api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts​ x-api-key:PARTNER_ACCOUNT_KEY Content-Type: application/json { JSON data } Copy Call Resource URL pattern Create a sub-account with the given parameters. POST /api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts Copy JSON example Here is an example of a JSON request and response using the Partnership API sub-account object. Note that this is just an example, and that for some accounts, the users attribute is unnecessary and will be ignored. Sub-account object JSON request { \"account\": { \"name\": \"Sample Sub-Account\", \"users\": [ { \"email\": \"sample_user@sample.org\", \"password\": \"XXXXXXXX\", \"owner\": true, \"role\": \"admin\", \"first_name\": \"Sample\", \"last_name\": \"User\" } ], \"allow_api_access\": true, \"phone_number\": \"555-555-5555\" } } Copy JSON response { \"id\": XXXXXX, \"name\": \"Sample Account\", \"status\": \"pending\", \"license_key\": \"XXXXXX\", \"api_key\": \"XXXXXX\", \"browser_monitoring_key\": \"XXXXXX\", \"allow_api_access\": true, \"high_security\": false, \"testing\": null, \"partner_external_identifier\": null, \"parent_account_id\":XXXXXX, \"subscription\": { \"id\": XXXXXX, \"starts_on\": \"2016-05-17\", \"expires_on\": null, \"annual_renewal_on\": null, \"products\": [ { \"product_id\": 4, \"name\": \"Pro\", \"units\": 10, \"price\": 1990.0 }, { \"product_id\": 10, \"name\": \"Mobile Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 20, \"name\": \"Browser Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 16, \"name\": \"Insights None\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 23, \"name\": \"Synthetics Lite\", \"units\": 0, \"price\": 0.0 } ] }, \"primary admin\": { \"id\": XXXXXX, \"email\": \"sample_user@sample.org\", \"first_name\": \"Sample\", \"last_name\": \"User\", \"state\": \"active\" } } Copy Sub-account object API examples Here is an example of an API call using the Partnership API sub-account object. Note that this is just an example, and that for some accounts, the users attribute is unnecessary and will be ignored. Create Request: curl -X POST \\ -H 'x-api-key:PARTNER_ACCOUNT_KEY' \\ -H 'Content-Type:application/json' \\ -d '{\"sub_account\":{\"name\":\"Sample Sub-Account\"}, \"users\":[{\"email\":\"sample_user@sample.org\", \"password\":\"XXXXXX\", \"first_name\":\"Sample\", \"last_name\":\"User\", \"role\":\"admin\", \"owner\":\"true\"}]}' \\ https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts Copy Response (line breaks are for readability): { \"id\": XXXXXX, \"name\": \"Sample Sub-Account\", \"status\": \"pending\", \"license_key\": \"XXXXXX\", \"api_key\": \"XXXXXX\", \"browser_monitoring_key\": \"XXXXXX\", \"allow_api_access\": false, \"high_security\": false, \"testing\": null, \"partner_external_identifier\": null, \"parent_account_id\":XXXXXX, \"subscription\": { \"id\": XXXXXX, \"starts_on\": \"2016-05-17\", \"expires_on\": null, \"annual_renewal_on\": null, \"products\": [ { \"product_id\": 4, \"name\": \"Pro\", \"units\": 10, \"price\": 1999.0 }, { \"product_id\": 10, \"name\": \"Mobile Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 20, \"name\": \"Browser Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 16, \"name\": \"Insights None\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 23, \"name\": \"Synthetics Lite\", \"units\": 0, \"price\": 0.0 } ] }, \"primary admin\": { \"id\": XXXXXX, \"email\": \"sample_user@sample.org\", \"first_name\": \"Sample\", \"last_name\": \"User\", \"state\": \"active\" } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.29633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> sub-account object",
        "sections": "<em>Partnership</em> <em>API</em> sub-account object",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " the <em>Partnership</em> <em>API</em> user object. For more about restrictions, read the Requirements. password (REQUIRED) Type: String Default: (none) If you are creating a sub-account with an existing user as the account Owner, the password must match the user&#x27;s current password. For some <em>New</em> <em>Relic</em> organizations"
      },
      "id": "603eba3ae7b9d2b8e32a07b5"
    },
    {
      "sections": [
        "Partnership API reference",
        "Requirements",
        "Find your Partnership API key",
        "Find your Partner ID",
        "Authenticate the API call",
        "Notes for partners who manage New Relic accounts",
        "Errors"
      ],
      "title": "Partnership API reference",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7bc374ae0e6f6917aa82a70e582606ea4a9878ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference/",
      "published_at": "2021-06-09T00:10:04Z",
      "updated_at": "2021-03-30T03:04:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains technical details about using the Partnership API. For an introduction and requirements, first read Intro to Partnership API. Requirements For requirements, see Intro to Partnership API. Find your Partnership API key The Partnership API requires that you authenticate with the REST API key that is specific to your partnership owner account (you cannot use the other REST API keys). When using your Partnership API key with calls to REST API (v2) endpoints that require the use of an Admin user's API key, see Admin user's API Key and partnerships. Find your Partner ID The Partnership API also requires that you authenticate by providing a Partner ID specific to your partnership. This is unique from the account ID for your partnership owner account. To obtain your Partner ID, go to your partner admin console and retrieve the partner ID number that is listed in your URL: https://partner-admin-console.newrelic.com/accounts/​$ACCOUNT_ID/admin_console/partnerships/$PARTNER_ID Copy You must include the Partner ID as part of the base URL for the Partner API. URL component URL pattern Partner API endpoint https://rpm.newrelic.com/api/v2/partners/PARTNER_ID Copy Resource URL patterns /accounts /accounts/ACCOUNT_ID /accounts/ACCOUNT_ID/users /accounts/ACCOUNT_ID/users/USER_ID /accounts/ACCOUNT_ID/subscriptions /accounts/ACCOUNT_ID/subscriptions/SUBSCRIPTION_ID Copy Example https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/ACCOUNT_ID Copy Authenticate the API call To authenticate to the Partner API when making an API call: Add a request header labeled x-api-key and set its value to your Partner API key. Include your Partner ID at the specified point in the request URI. Notes for partners who manage New Relic accounts For partners who manage New Relic accounts for their customers, the initial API call for all account-level interactions is to \"create account.\" This call returns an xml record of the newly created account. Part of this record is the account_id. All of the other calls in the Partnership API require the account_id as a parameter. Provision will need to be made by the partner to parse the returned xml extract, store the account_id, and associate it with the users' partner account record. Errors New Relic uses conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success and codes in the 4xx range indicate an error that resulted from the provided information (for example, a required parameter was missing). Error Probable cause 400 Bad Request Most commonly the call is missing a required parameter. 401 Unauthorized A valid API key was not provided. 402 Request Failed Parameters were valid but request failed for some reason. 404 Not Found The requested item doesn't exist. 422 Unprocessable Entity Your account has special terms and cannot be changed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.21324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> reference",
        "sections": "Notes for <em>partners</em> who manage <em>New</em> <em>Relic</em> accounts",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>API</em> key that is specific to your <em>partnership</em> owner account (you cannot use the other REST <em>API</em> keys). When using your <em>Partnership</em> <em>API</em> key with calls to REST <em>API</em> (v2) endpoints that require the use of an Admin user&#x27;s <em>API</em> key, see Admin user&#x27;s <em>API</em> Key and <em>partnerships</em>. Find your <em>Partner</em> ID"
      },
      "id": "603ebc5f28ccbc22b6eba780"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-user-object": [
    {
      "sections": [
        "Partnership billing integration API",
        "Requirements",
        "Communication endpoint",
        "Billing API",
        "Customer subscription notification API",
        "Invoice notification API"
      ],
      "title": "Partnership billing integration API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "73da7e096ce56bb45e39bb95a1c2e0a0011be597",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partnership-billing-integration-api/",
      "published_at": "2021-06-09T05:33:50Z",
      "updated_at": "2021-03-30T21:12:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Partnership API includes functionality for partners to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts. This is particularly useful for partners acting as resellers or managed service providers of New Relic accounts. For example, when customers of a New Relic reseller partner purchase a higher subscription level from New Relic's Sales team, New Relic replaces the old subscription with a new subscription. New Relic then uses the API to communicate this information to the partner. Requirements Before using this object, please read the Partnership API requirements. Communication endpoint Partners must implement a billing communication endpoint that identifies the partner's URL and PARTNER_ID. New Relic uses this endpoint to notify the partner that New Relic has made a change to a partner account's subscription or invoice information. The endpoint must support HTTPS. The partner-specified portion of the URL is identified from the Settings tab of New Relic's Partner Portal. The PARTNER_ID is the partner's external ID for this account. This value must be passed when the account is created by using the partner_external_identifier parameter. Billing API Supported functionality for the Partnership billing API includes: Customer subscription notification Invoice information notification Customer subscription notification API To communicate changes to a partner about a customer's subscription, New Relic uses the POST method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy Authentication is done via headers with the partner's REST API key or Admin user's API key. The Partnership API returns the results as JSON. Parameters: Name Type Description id String The customer's New Relic account ID subscription_id Integer Subscription's numeric ID subscription_string String Description of subscription for display price Integer Monthly price of subscription in cents number_of_hosts Integer Number of hosts starts Date Subscription's start date (yyyymmdd) expires Date Subscription's end date (yyyymmdd) Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed. Invoice notification API New Relic uses this endpoint to notify the partner of changes to a partner account's subscription level and invoice information. New Relic uses the PUT method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy OR https://partner-specified/partner-specified/PARTNER_ID.xml Copy The Partnership API returns the results as JSON or XML. Parameters: Name Type Description id string The customer's New Relic account ID subscription_id integer Subscription's numeric ID subscription_string string Description of subscription for display price integer Monthly price of subscription in cents Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.37808,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> billing integration <em>API</em>",
        "sections": "<em>Partnership</em> billing integration <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s <em>Partnership</em> <em>API</em> includes functionality for partners to replace a customer&#x27;s existing subscription with a <em>new</em> one, or to update invoice information for <em>New</em> <em>Relic</em> <em>partner</em> accounts. This is particularly useful for partners acting as resellers or managed service providers of <em>New</em> <em>Relic</em>"
      },
      "id": "603ec86e64441f09e44e8871"
    },
    {
      "sections": [
        "Partnership API sub-account object",
        "Requirements",
        "Introduction to using sub-accounts",
        "Sub-account object attributes",
        "name (REQUIRED)",
        "allow_api_access",
        "testing",
        "users (REQUIRED for some accounts)",
        "password (REQUIRED)",
        "Sub-account API calls",
        "JSON example",
        "Sub-account object JSON request",
        "JSON response",
        "Sub-account object API examples",
        "Create"
      ],
      "title": "Partnership API sub-account object",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7fb13302d892a5f89c6c9371f35a60bf1ed9f6a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-sub-account-object/",
      "published_at": "2021-06-08T19:57:01Z",
      "updated_at": "2021-03-30T12:15:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains how to use the Partnership API to manage sub-accounts. For accounts, you'd use the sub-account object. Requirements You may not have access to using this object. Before using the Partnership API, first read the requirements. Introduction to using sub-accounts Some notes about using the sub-account object: To manage existing master accounts or existing sub-accounts, use the Partnership API account object. A parent account may have more than one associated sub-account, but every sub-account must correspond to one and only one parent account. Every sub-account must have at least a primary_admin user. You cannot create a sub-account without connecting it to an existing parent account and adding at least one user. Sub-account object attributes Before using the Partnership API, first read the requirements. Here are the Partnership API sub-account object's attributes: name (REQUIRED) Type: String Default: (none) This name must be unique in New Relic's database. If the specified name is not unique, it will be auto-incremented with a numeric suffix as follows: conflicting_name_1 conflicting_name_2 etc. Copy allow_api_access Type: Boolean Default: False This flag allows API access to application data. This must be set to true for partnerships remotely administering accounts. testing Type: Boolean Default: False Use this flag to indicate a test account. Test accounts are assumed to contain garbage data and are ignored by internal systems. The data they generate may be deleted at any time. users (REQUIRED for some accounts) Type: Array Default: (none) An array defining a list of users. There are some restrictions in place dependent on the status of your account: For customer partnerships who have switched to the New Relic One user model: do not define users. If you add users with this field, they will be ignored. Instead, to add users, you'd use these user management procedures. For all other accounts, which have users on our original user model: When you create the sub-account, you can define only one user: the account Owner. To add additional users, use the Partnership API user object. For more about restrictions, read the Requirements. password (REQUIRED) Type: String Default: (none) If you are creating a sub-account with an existing user as the account Owner, the password must match the user's current password. For some New Relic organizations, sub-accounts can also be created via the master account's Account settings page in the New Relic UI. Sub-account API calls Here is the URL pattern to create sub-accounts. Notice that the Parent Account ID must be specified. If using this URL pattern, send the JSON object along with an HTTP header containing the Partner API key. For example: POST .../api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts​ x-api-key:PARTNER_ACCOUNT_KEY Content-Type: application/json { JSON data } Copy Call Resource URL pattern Create a sub-account with the given parameters. POST /api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts Copy JSON example Here is an example of a JSON request and response using the Partnership API sub-account object. Note that this is just an example, and that for some accounts, the users attribute is unnecessary and will be ignored. Sub-account object JSON request { \"account\": { \"name\": \"Sample Sub-Account\", \"users\": [ { \"email\": \"sample_user@sample.org\", \"password\": \"XXXXXXXX\", \"owner\": true, \"role\": \"admin\", \"first_name\": \"Sample\", \"last_name\": \"User\" } ], \"allow_api_access\": true, \"phone_number\": \"555-555-5555\" } } Copy JSON response { \"id\": XXXXXX, \"name\": \"Sample Account\", \"status\": \"pending\", \"license_key\": \"XXXXXX\", \"api_key\": \"XXXXXX\", \"browser_monitoring_key\": \"XXXXXX\", \"allow_api_access\": true, \"high_security\": false, \"testing\": null, \"partner_external_identifier\": null, \"parent_account_id\":XXXXXX, \"subscription\": { \"id\": XXXXXX, \"starts_on\": \"2016-05-17\", \"expires_on\": null, \"annual_renewal_on\": null, \"products\": [ { \"product_id\": 4, \"name\": \"Pro\", \"units\": 10, \"price\": 1990.0 }, { \"product_id\": 10, \"name\": \"Mobile Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 20, \"name\": \"Browser Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 16, \"name\": \"Insights None\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 23, \"name\": \"Synthetics Lite\", \"units\": 0, \"price\": 0.0 } ] }, \"primary admin\": { \"id\": XXXXXX, \"email\": \"sample_user@sample.org\", \"first_name\": \"Sample\", \"last_name\": \"User\", \"state\": \"active\" } } Copy Sub-account object API examples Here is an example of an API call using the Partnership API sub-account object. Note that this is just an example, and that for some accounts, the users attribute is unnecessary and will be ignored. Create Request: curl -X POST \\ -H 'x-api-key:PARTNER_ACCOUNT_KEY' \\ -H 'Content-Type:application/json' \\ -d '{\"sub_account\":{\"name\":\"Sample Sub-Account\"}, \"users\":[{\"email\":\"sample_user@sample.org\", \"password\":\"XXXXXX\", \"first_name\":\"Sample\", \"last_name\":\"User\", \"role\":\"admin\", \"owner\":\"true\"}]}' \\ https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts Copy Response (line breaks are for readability): { \"id\": XXXXXX, \"name\": \"Sample Sub-Account\", \"status\": \"pending\", \"license_key\": \"XXXXXX\", \"api_key\": \"XXXXXX\", \"browser_monitoring_key\": \"XXXXXX\", \"allow_api_access\": false, \"high_security\": false, \"testing\": null, \"partner_external_identifier\": null, \"parent_account_id\":XXXXXX, \"subscription\": { \"id\": XXXXXX, \"starts_on\": \"2016-05-17\", \"expires_on\": null, \"annual_renewal_on\": null, \"products\": [ { \"product_id\": 4, \"name\": \"Pro\", \"units\": 10, \"price\": 1999.0 }, { \"product_id\": 10, \"name\": \"Mobile Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 20, \"name\": \"Browser Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 16, \"name\": \"Insights None\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 23, \"name\": \"Synthetics Lite\", \"units\": 0, \"price\": 0.0 } ] }, \"primary admin\": { \"id\": XXXXXX, \"email\": \"sample_user@sample.org\", \"first_name\": \"Sample\", \"last_name\": \"User\", \"state\": \"active\" } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.29633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> sub-account object",
        "sections": "<em>Partnership</em> <em>API</em> sub-account object",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " the <em>Partnership</em> <em>API</em> user object. For more about restrictions, read the Requirements. password (REQUIRED) Type: String Default: (none) If you are creating a sub-account with an existing user as the account Owner, the password must match the user&#x27;s current password. For some <em>New</em> <em>Relic</em> organizations"
      },
      "id": "603eba3ae7b9d2b8e32a07b5"
    },
    {
      "sections": [
        "Partnership API reference",
        "Requirements",
        "Find your Partnership API key",
        "Find your Partner ID",
        "Authenticate the API call",
        "Notes for partners who manage New Relic accounts",
        "Errors"
      ],
      "title": "Partnership API reference",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7bc374ae0e6f6917aa82a70e582606ea4a9878ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference/",
      "published_at": "2021-06-09T00:10:04Z",
      "updated_at": "2021-03-30T03:04:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains technical details about using the Partnership API. For an introduction and requirements, first read Intro to Partnership API. Requirements For requirements, see Intro to Partnership API. Find your Partnership API key The Partnership API requires that you authenticate with the REST API key that is specific to your partnership owner account (you cannot use the other REST API keys). When using your Partnership API key with calls to REST API (v2) endpoints that require the use of an Admin user's API key, see Admin user's API Key and partnerships. Find your Partner ID The Partnership API also requires that you authenticate by providing a Partner ID specific to your partnership. This is unique from the account ID for your partnership owner account. To obtain your Partner ID, go to your partner admin console and retrieve the partner ID number that is listed in your URL: https://partner-admin-console.newrelic.com/accounts/​$ACCOUNT_ID/admin_console/partnerships/$PARTNER_ID Copy You must include the Partner ID as part of the base URL for the Partner API. URL component URL pattern Partner API endpoint https://rpm.newrelic.com/api/v2/partners/PARTNER_ID Copy Resource URL patterns /accounts /accounts/ACCOUNT_ID /accounts/ACCOUNT_ID/users /accounts/ACCOUNT_ID/users/USER_ID /accounts/ACCOUNT_ID/subscriptions /accounts/ACCOUNT_ID/subscriptions/SUBSCRIPTION_ID Copy Example https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/ACCOUNT_ID Copy Authenticate the API call To authenticate to the Partner API when making an API call: Add a request header labeled x-api-key and set its value to your Partner API key. Include your Partner ID at the specified point in the request URI. Notes for partners who manage New Relic accounts For partners who manage New Relic accounts for their customers, the initial API call for all account-level interactions is to \"create account.\" This call returns an xml record of the newly created account. Part of this record is the account_id. All of the other calls in the Partnership API require the account_id as a parameter. Provision will need to be made by the partner to parse the returned xml extract, store the account_id, and associate it with the users' partner account record. Errors New Relic uses conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success and codes in the 4xx range indicate an error that resulted from the provided information (for example, a required parameter was missing). Error Probable cause 400 Bad Request Most commonly the call is missing a required parameter. 401 Unauthorized A valid API key was not provided. 402 Request Failed Parameters were valid but request failed for some reason. 404 Not Found The requested item doesn't exist. 422 Unprocessable Entity Your account has special terms and cannot be changed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.21324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> reference",
        "sections": "Notes for <em>partners</em> who manage <em>New</em> <em>Relic</em> accounts",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>API</em> key that is specific to your <em>partnership</em> owner account (you cannot use the other REST <em>API</em> keys). When using your <em>Partnership</em> <em>API</em> key with calls to REST <em>API</em> (v2) endpoints that require the use of an Admin user&#x27;s <em>API</em> key, see Admin user&#x27;s <em>API</em> Key and <em>partnerships</em>. Find your <em>Partner</em> ID"
      },
      "id": "603ebc5f28ccbc22b6eba780"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/partnership-billing-integration-api": [
    {
      "sections": [
        "Partnership API sub-account object",
        "Requirements",
        "Introduction to using sub-accounts",
        "Sub-account object attributes",
        "name (REQUIRED)",
        "allow_api_access",
        "testing",
        "users (REQUIRED for some accounts)",
        "password (REQUIRED)",
        "Sub-account API calls",
        "JSON example",
        "Sub-account object JSON request",
        "JSON response",
        "Sub-account object API examples",
        "Create"
      ],
      "title": "Partnership API sub-account object",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7fb13302d892a5f89c6c9371f35a60bf1ed9f6a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-sub-account-object/",
      "published_at": "2021-06-08T19:57:01Z",
      "updated_at": "2021-03-30T12:15:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains how to use the Partnership API to manage sub-accounts. For accounts, you'd use the sub-account object. Requirements You may not have access to using this object. Before using the Partnership API, first read the requirements. Introduction to using sub-accounts Some notes about using the sub-account object: To manage existing master accounts or existing sub-accounts, use the Partnership API account object. A parent account may have more than one associated sub-account, but every sub-account must correspond to one and only one parent account. Every sub-account must have at least a primary_admin user. You cannot create a sub-account without connecting it to an existing parent account and adding at least one user. Sub-account object attributes Before using the Partnership API, first read the requirements. Here are the Partnership API sub-account object's attributes: name (REQUIRED) Type: String Default: (none) This name must be unique in New Relic's database. If the specified name is not unique, it will be auto-incremented with a numeric suffix as follows: conflicting_name_1 conflicting_name_2 etc. Copy allow_api_access Type: Boolean Default: False This flag allows API access to application data. This must be set to true for partnerships remotely administering accounts. testing Type: Boolean Default: False Use this flag to indicate a test account. Test accounts are assumed to contain garbage data and are ignored by internal systems. The data they generate may be deleted at any time. users (REQUIRED for some accounts) Type: Array Default: (none) An array defining a list of users. There are some restrictions in place dependent on the status of your account: For customer partnerships who have switched to the New Relic One user model: do not define users. If you add users with this field, they will be ignored. Instead, to add users, you'd use these user management procedures. For all other accounts, which have users on our original user model: When you create the sub-account, you can define only one user: the account Owner. To add additional users, use the Partnership API user object. For more about restrictions, read the Requirements. password (REQUIRED) Type: String Default: (none) If you are creating a sub-account with an existing user as the account Owner, the password must match the user's current password. For some New Relic organizations, sub-accounts can also be created via the master account's Account settings page in the New Relic UI. Sub-account API calls Here is the URL pattern to create sub-accounts. Notice that the Parent Account ID must be specified. If using this URL pattern, send the JSON object along with an HTTP header containing the Partner API key. For example: POST .../api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts​ x-api-key:PARTNER_ACCOUNT_KEY Content-Type: application/json { JSON data } Copy Call Resource URL pattern Create a sub-account with the given parameters. POST /api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts Copy JSON example Here is an example of a JSON request and response using the Partnership API sub-account object. Note that this is just an example, and that for some accounts, the users attribute is unnecessary and will be ignored. Sub-account object JSON request { \"account\": { \"name\": \"Sample Sub-Account\", \"users\": [ { \"email\": \"sample_user@sample.org\", \"password\": \"XXXXXXXX\", \"owner\": true, \"role\": \"admin\", \"first_name\": \"Sample\", \"last_name\": \"User\" } ], \"allow_api_access\": true, \"phone_number\": \"555-555-5555\" } } Copy JSON response { \"id\": XXXXXX, \"name\": \"Sample Account\", \"status\": \"pending\", \"license_key\": \"XXXXXX\", \"api_key\": \"XXXXXX\", \"browser_monitoring_key\": \"XXXXXX\", \"allow_api_access\": true, \"high_security\": false, \"testing\": null, \"partner_external_identifier\": null, \"parent_account_id\":XXXXXX, \"subscription\": { \"id\": XXXXXX, \"starts_on\": \"2016-05-17\", \"expires_on\": null, \"annual_renewal_on\": null, \"products\": [ { \"product_id\": 4, \"name\": \"Pro\", \"units\": 10, \"price\": 1990.0 }, { \"product_id\": 10, \"name\": \"Mobile Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 20, \"name\": \"Browser Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 16, \"name\": \"Insights None\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 23, \"name\": \"Synthetics Lite\", \"units\": 0, \"price\": 0.0 } ] }, \"primary admin\": { \"id\": XXXXXX, \"email\": \"sample_user@sample.org\", \"first_name\": \"Sample\", \"last_name\": \"User\", \"state\": \"active\" } } Copy Sub-account object API examples Here is an example of an API call using the Partnership API sub-account object. Note that this is just an example, and that for some accounts, the users attribute is unnecessary and will be ignored. Create Request: curl -X POST \\ -H 'x-api-key:PARTNER_ACCOUNT_KEY' \\ -H 'Content-Type:application/json' \\ -d '{\"sub_account\":{\"name\":\"Sample Sub-Account\"}, \"users\":[{\"email\":\"sample_user@sample.org\", \"password\":\"XXXXXX\", \"first_name\":\"Sample\", \"last_name\":\"User\", \"role\":\"admin\", \"owner\":\"true\"}]}' \\ https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts Copy Response (line breaks are for readability): { \"id\": XXXXXX, \"name\": \"Sample Sub-Account\", \"status\": \"pending\", \"license_key\": \"XXXXXX\", \"api_key\": \"XXXXXX\", \"browser_monitoring_key\": \"XXXXXX\", \"allow_api_access\": false, \"high_security\": false, \"testing\": null, \"partner_external_identifier\": null, \"parent_account_id\":XXXXXX, \"subscription\": { \"id\": XXXXXX, \"starts_on\": \"2016-05-17\", \"expires_on\": null, \"annual_renewal_on\": null, \"products\": [ { \"product_id\": 4, \"name\": \"Pro\", \"units\": 10, \"price\": 1999.0 }, { \"product_id\": 10, \"name\": \"Mobile Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 20, \"name\": \"Browser Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 16, \"name\": \"Insights None\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 23, \"name\": \"Synthetics Lite\", \"units\": 0, \"price\": 0.0 } ] }, \"primary admin\": { \"id\": XXXXXX, \"email\": \"sample_user@sample.org\", \"first_name\": \"Sample\", \"last_name\": \"User\", \"state\": \"active\" } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.29633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> sub-account object",
        "sections": "<em>Partnership</em> <em>API</em> sub-account object",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " the <em>Partnership</em> <em>API</em> user object. For more about restrictions, read the Requirements. password (REQUIRED) Type: String Default: (none) If you are creating a sub-account with an existing user as the account Owner, the password must match the user&#x27;s current password. For some <em>New</em> <em>Relic</em> organizations"
      },
      "id": "603eba3ae7b9d2b8e32a07b5"
    },
    {
      "sections": [
        "Partnership API reference",
        "Requirements",
        "Find your Partnership API key",
        "Find your Partner ID",
        "Authenticate the API call",
        "Notes for partners who manage New Relic accounts",
        "Errors"
      ],
      "title": "Partnership API reference",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7bc374ae0e6f6917aa82a70e582606ea4a9878ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference/",
      "published_at": "2021-06-09T00:10:04Z",
      "updated_at": "2021-03-30T03:04:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains technical details about using the Partnership API. For an introduction and requirements, first read Intro to Partnership API. Requirements For requirements, see Intro to Partnership API. Find your Partnership API key The Partnership API requires that you authenticate with the REST API key that is specific to your partnership owner account (you cannot use the other REST API keys). When using your Partnership API key with calls to REST API (v2) endpoints that require the use of an Admin user's API key, see Admin user's API Key and partnerships. Find your Partner ID The Partnership API also requires that you authenticate by providing a Partner ID specific to your partnership. This is unique from the account ID for your partnership owner account. To obtain your Partner ID, go to your partner admin console and retrieve the partner ID number that is listed in your URL: https://partner-admin-console.newrelic.com/accounts/​$ACCOUNT_ID/admin_console/partnerships/$PARTNER_ID Copy You must include the Partner ID as part of the base URL for the Partner API. URL component URL pattern Partner API endpoint https://rpm.newrelic.com/api/v2/partners/PARTNER_ID Copy Resource URL patterns /accounts /accounts/ACCOUNT_ID /accounts/ACCOUNT_ID/users /accounts/ACCOUNT_ID/users/USER_ID /accounts/ACCOUNT_ID/subscriptions /accounts/ACCOUNT_ID/subscriptions/SUBSCRIPTION_ID Copy Example https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/ACCOUNT_ID Copy Authenticate the API call To authenticate to the Partner API when making an API call: Add a request header labeled x-api-key and set its value to your Partner API key. Include your Partner ID at the specified point in the request URI. Notes for partners who manage New Relic accounts For partners who manage New Relic accounts for their customers, the initial API call for all account-level interactions is to \"create account.\" This call returns an xml record of the newly created account. Part of this record is the account_id. All of the other calls in the Partnership API require the account_id as a parameter. Provision will need to be made by the partner to parse the returned xml extract, store the account_id, and associate it with the users' partner account record. Errors New Relic uses conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success and codes in the 4xx range indicate an error that resulted from the provided information (for example, a required parameter was missing). Error Probable cause 400 Bad Request Most commonly the call is missing a required parameter. 401 Unauthorized A valid API key was not provided. 402 Request Failed Parameters were valid but request failed for some reason. 404 Not Found The requested item doesn't exist. 422 Unprocessable Entity Your account has special terms and cannot be changed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.21324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> reference",
        "sections": "Notes for <em>partners</em> who manage <em>New</em> <em>Relic</em> accounts",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>API</em> key that is specific to your <em>partnership</em> owner account (you cannot use the other REST <em>API</em> keys). When using your <em>Partnership</em> <em>API</em> key with calls to REST <em>API</em> (v2) endpoints that require the use of an Admin user&#x27;s <em>API</em> key, see Admin user&#x27;s <em>API</em> Key and <em>partnerships</em>. Find your <em>Partner</em> ID"
      },
      "id": "603ebc5f28ccbc22b6eba780"
    },
    {
      "sections": [
        "Product buckets",
        "Requirements",
        "Overview (#overview)",
        "Quantity by product",
        "Insights Events quantity",
        "Browser PageViews quantity",
        "Synthetics Checks quantity"
      ],
      "title": "Product buckets",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "fe7632af0936f9878b04ba0c25f7cf8a7f684399",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/product-buckets/",
      "published_at": "2021-06-09T05:34:07Z",
      "updated_at": "2021-03-29T21:27:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For partnership accounts on our original product pricing, you can use the Partnership API for managing subscriptions. This doc explains some details for using the Browser, Synthetics, and Insights products. Requirements This doc applies only for partnership accounts on our original pricing plan. Before using this API, please read the Partnership API requirements. Overview (#overview) When using the Partnership API for Insights, Browser, and Synthetics products, you must provide a valid quantity value. This indicates the number of Insights Events, Browser PageViews, and Synthetics Checks provisioned to that account. New Relic uses this \"bucket\" pricing structure based on the quantity value in order to offer discounts on large volume purchases. Be sure to select an available bucket value. Otherwise, the New Relic Partnership API will return an error response. Quantity by product Here are the valid quantity values by New Relic product. Insights Events quantity Insights Pro Insights Pro Annual 25 25 50 50 75 75 300 300 625 625 1250 1250 2500 2500 5000 5000 10000 10000 20000 20000 40000 40000 60000 60000 80000 80000 100000 100000 120000 120000 140000 140000 Browser PageViews quantity Browser Pro Browser Pro Annualynthetics Checks quantity Synthetics Pro Synthetics Pro Annual 10000 10000 15000 15000 25000 25000 35000 35000 50000 50000 75000 75000 100000 100000 150000 150000 250000 250000 300000 300000 400000 400000 500000 500000 600000 600000 750000 750000 900000 900000 1000000 1000000 1150000 1150000 1300000 1300000 1500000 1500000 1750000 1750000 2000000 2000000 2500000 2500000 3000000 3000000 3500000 3500000 5000000 5000000 7000000 7000000 8500000 8500000 10000000 10000000 12500000 12500000 14000000 14000000 15000000 15000000 17500000 17500000 20000000 20000000",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.16273,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " provisioned to that account. <em>New</em> <em>Relic</em> uses this &quot;bucket&quot; pricing structure based on the quantity value in order to offer discounts on large volume purchases. Be sure to select an available bucket value. Otherwise, the <em>New</em> <em>Relic</em> <em>Partnership</em> <em>API</em> will return an error response. Quantity by product Here"
      },
      "id": "6044181d28ccbc2ea42c608a"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/product-buckets": [
    {
      "sections": [
        "Partnership billing integration API",
        "Requirements",
        "Communication endpoint",
        "Billing API",
        "Customer subscription notification API",
        "Invoice notification API"
      ],
      "title": "Partnership billing integration API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "73da7e096ce56bb45e39bb95a1c2e0a0011be597",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partnership-billing-integration-api/",
      "published_at": "2021-06-09T05:33:50Z",
      "updated_at": "2021-03-30T21:12:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Partnership API includes functionality for partners to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts. This is particularly useful for partners acting as resellers or managed service providers of New Relic accounts. For example, when customers of a New Relic reseller partner purchase a higher subscription level from New Relic's Sales team, New Relic replaces the old subscription with a new subscription. New Relic then uses the API to communicate this information to the partner. Requirements Before using this object, please read the Partnership API requirements. Communication endpoint Partners must implement a billing communication endpoint that identifies the partner's URL and PARTNER_ID. New Relic uses this endpoint to notify the partner that New Relic has made a change to a partner account's subscription or invoice information. The endpoint must support HTTPS. The partner-specified portion of the URL is identified from the Settings tab of New Relic's Partner Portal. The PARTNER_ID is the partner's external ID for this account. This value must be passed when the account is created by using the partner_external_identifier parameter. Billing API Supported functionality for the Partnership billing API includes: Customer subscription notification Invoice information notification Customer subscription notification API To communicate changes to a partner about a customer's subscription, New Relic uses the POST method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy Authentication is done via headers with the partner's REST API key or Admin user's API key. The Partnership API returns the results as JSON. Parameters: Name Type Description id String The customer's New Relic account ID subscription_id Integer Subscription's numeric ID subscription_string String Description of subscription for display price Integer Monthly price of subscription in cents number_of_hosts Integer Number of hosts starts Date Subscription's start date (yyyymmdd) expires Date Subscription's end date (yyyymmdd) Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed. Invoice notification API New Relic uses this endpoint to notify the partner of changes to a partner account's subscription level and invoice information. New Relic uses the PUT method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy OR https://partner-specified/partner-specified/PARTNER_ID.xml Copy The Partnership API returns the results as JSON or XML. Parameters: Name Type Description id string The customer's New Relic account ID subscription_id integer Subscription's numeric ID subscription_string string Description of subscription for display price integer Monthly price of subscription in cents Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.37808,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> billing integration <em>API</em>",
        "sections": "<em>Partnership</em> billing integration <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s <em>Partnership</em> <em>API</em> includes functionality for partners to replace a customer&#x27;s existing subscription with a <em>new</em> one, or to update invoice information for <em>New</em> <em>Relic</em> <em>partner</em> accounts. This is particularly useful for partners acting as resellers or managed service providers of <em>New</em> <em>Relic</em>"
      },
      "id": "603ec86e64441f09e44e8871"
    },
    {
      "sections": [
        "Partnership API sub-account object",
        "Requirements",
        "Introduction to using sub-accounts",
        "Sub-account object attributes",
        "name (REQUIRED)",
        "allow_api_access",
        "testing",
        "users (REQUIRED for some accounts)",
        "password (REQUIRED)",
        "Sub-account API calls",
        "JSON example",
        "Sub-account object JSON request",
        "JSON response",
        "Sub-account object API examples",
        "Create"
      ],
      "title": "Partnership API sub-account object",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7fb13302d892a5f89c6c9371f35a60bf1ed9f6a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-sub-account-object/",
      "published_at": "2021-06-08T19:57:01Z",
      "updated_at": "2021-03-30T12:15:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains how to use the Partnership API to manage sub-accounts. For accounts, you'd use the sub-account object. Requirements You may not have access to using this object. Before using the Partnership API, first read the requirements. Introduction to using sub-accounts Some notes about using the sub-account object: To manage existing master accounts or existing sub-accounts, use the Partnership API account object. A parent account may have more than one associated sub-account, but every sub-account must correspond to one and only one parent account. Every sub-account must have at least a primary_admin user. You cannot create a sub-account without connecting it to an existing parent account and adding at least one user. Sub-account object attributes Before using the Partnership API, first read the requirements. Here are the Partnership API sub-account object's attributes: name (REQUIRED) Type: String Default: (none) This name must be unique in New Relic's database. If the specified name is not unique, it will be auto-incremented with a numeric suffix as follows: conflicting_name_1 conflicting_name_2 etc. Copy allow_api_access Type: Boolean Default: False This flag allows API access to application data. This must be set to true for partnerships remotely administering accounts. testing Type: Boolean Default: False Use this flag to indicate a test account. Test accounts are assumed to contain garbage data and are ignored by internal systems. The data they generate may be deleted at any time. users (REQUIRED for some accounts) Type: Array Default: (none) An array defining a list of users. There are some restrictions in place dependent on the status of your account: For customer partnerships who have switched to the New Relic One user model: do not define users. If you add users with this field, they will be ignored. Instead, to add users, you'd use these user management procedures. For all other accounts, which have users on our original user model: When you create the sub-account, you can define only one user: the account Owner. To add additional users, use the Partnership API user object. For more about restrictions, read the Requirements. password (REQUIRED) Type: String Default: (none) If you are creating a sub-account with an existing user as the account Owner, the password must match the user's current password. For some New Relic organizations, sub-accounts can also be created via the master account's Account settings page in the New Relic UI. Sub-account API calls Here is the URL pattern to create sub-accounts. Notice that the Parent Account ID must be specified. If using this URL pattern, send the JSON object along with an HTTP header containing the Partner API key. For example: POST .../api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts​ x-api-key:PARTNER_ACCOUNT_KEY Content-Type: application/json { JSON data } Copy Call Resource URL pattern Create a sub-account with the given parameters. POST /api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts Copy JSON example Here is an example of a JSON request and response using the Partnership API sub-account object. Note that this is just an example, and that for some accounts, the users attribute is unnecessary and will be ignored. Sub-account object JSON request { \"account\": { \"name\": \"Sample Sub-Account\", \"users\": [ { \"email\": \"sample_user@sample.org\", \"password\": \"XXXXXXXX\", \"owner\": true, \"role\": \"admin\", \"first_name\": \"Sample\", \"last_name\": \"User\" } ], \"allow_api_access\": true, \"phone_number\": \"555-555-5555\" } } Copy JSON response { \"id\": XXXXXX, \"name\": \"Sample Account\", \"status\": \"pending\", \"license_key\": \"XXXXXX\", \"api_key\": \"XXXXXX\", \"browser_monitoring_key\": \"XXXXXX\", \"allow_api_access\": true, \"high_security\": false, \"testing\": null, \"partner_external_identifier\": null, \"parent_account_id\":XXXXXX, \"subscription\": { \"id\": XXXXXX, \"starts_on\": \"2016-05-17\", \"expires_on\": null, \"annual_renewal_on\": null, \"products\": [ { \"product_id\": 4, \"name\": \"Pro\", \"units\": 10, \"price\": 1990.0 }, { \"product_id\": 10, \"name\": \"Mobile Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 20, \"name\": \"Browser Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 16, \"name\": \"Insights None\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 23, \"name\": \"Synthetics Lite\", \"units\": 0, \"price\": 0.0 } ] }, \"primary admin\": { \"id\": XXXXXX, \"email\": \"sample_user@sample.org\", \"first_name\": \"Sample\", \"last_name\": \"User\", \"state\": \"active\" } } Copy Sub-account object API examples Here is an example of an API call using the Partnership API sub-account object. Note that this is just an example, and that for some accounts, the users attribute is unnecessary and will be ignored. Create Request: curl -X POST \\ -H 'x-api-key:PARTNER_ACCOUNT_KEY' \\ -H 'Content-Type:application/json' \\ -d '{\"sub_account\":{\"name\":\"Sample Sub-Account\"}, \"users\":[{\"email\":\"sample_user@sample.org\", \"password\":\"XXXXXX\", \"first_name\":\"Sample\", \"last_name\":\"User\", \"role\":\"admin\", \"owner\":\"true\"}]}' \\ https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts Copy Response (line breaks are for readability): { \"id\": XXXXXX, \"name\": \"Sample Sub-Account\", \"status\": \"pending\", \"license_key\": \"XXXXXX\", \"api_key\": \"XXXXXX\", \"browser_monitoring_key\": \"XXXXXX\", \"allow_api_access\": false, \"high_security\": false, \"testing\": null, \"partner_external_identifier\": null, \"parent_account_id\":XXXXXX, \"subscription\": { \"id\": XXXXXX, \"starts_on\": \"2016-05-17\", \"expires_on\": null, \"annual_renewal_on\": null, \"products\": [ { \"product_id\": 4, \"name\": \"Pro\", \"units\": 10, \"price\": 1999.0 }, { \"product_id\": 10, \"name\": \"Mobile Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 20, \"name\": \"Browser Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 16, \"name\": \"Insights None\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 23, \"name\": \"Synthetics Lite\", \"units\": 0, \"price\": 0.0 } ] }, \"primary admin\": { \"id\": XXXXXX, \"email\": \"sample_user@sample.org\", \"first_name\": \"Sample\", \"last_name\": \"User\", \"state\": \"active\" } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.29633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> sub-account object",
        "sections": "<em>Partnership</em> <em>API</em> sub-account object",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " the <em>Partnership</em> <em>API</em> user object. For more about restrictions, read the Requirements. password (REQUIRED) Type: String Default: (none) If you are creating a sub-account with an existing user as the account Owner, the password must match the user&#x27;s current password. For some <em>New</em> <em>Relic</em> organizations"
      },
      "id": "603eba3ae7b9d2b8e32a07b5"
    },
    {
      "sections": [
        "Partnership API reference",
        "Requirements",
        "Find your Partnership API key",
        "Find your Partner ID",
        "Authenticate the API call",
        "Notes for partners who manage New Relic accounts",
        "Errors"
      ],
      "title": "Partnership API reference",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7bc374ae0e6f6917aa82a70e582606ea4a9878ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference/",
      "published_at": "2021-06-09T00:10:04Z",
      "updated_at": "2021-03-30T03:04:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains technical details about using the Partnership API. For an introduction and requirements, first read Intro to Partnership API. Requirements For requirements, see Intro to Partnership API. Find your Partnership API key The Partnership API requires that you authenticate with the REST API key that is specific to your partnership owner account (you cannot use the other REST API keys). When using your Partnership API key with calls to REST API (v2) endpoints that require the use of an Admin user's API key, see Admin user's API Key and partnerships. Find your Partner ID The Partnership API also requires that you authenticate by providing a Partner ID specific to your partnership. This is unique from the account ID for your partnership owner account. To obtain your Partner ID, go to your partner admin console and retrieve the partner ID number that is listed in your URL: https://partner-admin-console.newrelic.com/accounts/​$ACCOUNT_ID/admin_console/partnerships/$PARTNER_ID Copy You must include the Partner ID as part of the base URL for the Partner API. URL component URL pattern Partner API endpoint https://rpm.newrelic.com/api/v2/partners/PARTNER_ID Copy Resource URL patterns /accounts /accounts/ACCOUNT_ID /accounts/ACCOUNT_ID/users /accounts/ACCOUNT_ID/users/USER_ID /accounts/ACCOUNT_ID/subscriptions /accounts/ACCOUNT_ID/subscriptions/SUBSCRIPTION_ID Copy Example https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/ACCOUNT_ID Copy Authenticate the API call To authenticate to the Partner API when making an API call: Add a request header labeled x-api-key and set its value to your Partner API key. Include your Partner ID at the specified point in the request URI. Notes for partners who manage New Relic accounts For partners who manage New Relic accounts for their customers, the initial API call for all account-level interactions is to \"create account.\" This call returns an xml record of the newly created account. Part of this record is the account_id. All of the other calls in the Partnership API require the account_id as a parameter. Provision will need to be made by the partner to parse the returned xml extract, store the account_id, and associate it with the users' partner account record. Errors New Relic uses conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success and codes in the 4xx range indicate an error that resulted from the provided information (for example, a required parameter was missing). Error Probable cause 400 Bad Request Most commonly the call is missing a required parameter. 401 Unauthorized A valid API key was not provided. 402 Request Failed Parameters were valid but request failed for some reason. 404 Not Found The requested item doesn't exist. 422 Unprocessable Entity Your account has special terms and cannot be changed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.21324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> reference",
        "sections": "Notes for <em>partners</em> who manage <em>New</em> <em>Relic</em> accounts",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>API</em> key that is specific to your <em>partnership</em> owner account (you cannot use the other REST <em>API</em> keys). When using your <em>Partnership</em> <em>API</em> key with calls to REST <em>API</em> (v2) endpoints that require the use of an Admin user&#x27;s <em>API</em> key, see Admin user&#x27;s <em>API</em> Key and <em>partnerships</em>. Find your <em>Partner</em> ID"
      },
      "id": "603ebc5f28ccbc22b6eba780"
    }
  ],
  "/docs/new-relic-partnerships/partnerships/partner-api/typical-integration-example": [
    {
      "sections": [
        "Partnership billing integration API",
        "Requirements",
        "Communication endpoint",
        "Billing API",
        "Customer subscription notification API",
        "Invoice notification API"
      ],
      "title": "Partnership billing integration API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "73da7e096ce56bb45e39bb95a1c2e0a0011be597",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partnership-billing-integration-api/",
      "published_at": "2021-06-09T05:33:50Z",
      "updated_at": "2021-03-30T21:12:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Partnership API includes functionality for partners to replace a customer's existing subscription with a new one, or to update invoice information for New Relic partner accounts. This is particularly useful for partners acting as resellers or managed service providers of New Relic accounts. For example, when customers of a New Relic reseller partner purchase a higher subscription level from New Relic's Sales team, New Relic replaces the old subscription with a new subscription. New Relic then uses the API to communicate this information to the partner. Requirements Before using this object, please read the Partnership API requirements. Communication endpoint Partners must implement a billing communication endpoint that identifies the partner's URL and PARTNER_ID. New Relic uses this endpoint to notify the partner that New Relic has made a change to a partner account's subscription or invoice information. The endpoint must support HTTPS. The partner-specified portion of the URL is identified from the Settings tab of New Relic's Partner Portal. The PARTNER_ID is the partner's external ID for this account. This value must be passed when the account is created by using the partner_external_identifier parameter. Billing API Supported functionality for the Partnership billing API includes: Customer subscription notification Invoice information notification Customer subscription notification API To communicate changes to a partner about a customer's subscription, New Relic uses the POST method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy Authentication is done via headers with the partner's REST API key or Admin user's API key. The Partnership API returns the results as JSON. Parameters: Name Type Description id String The customer's New Relic account ID subscription_id Integer Subscription's numeric ID subscription_string String Description of subscription for display price Integer Monthly price of subscription in cents number_of_hosts Integer Number of hosts starts Date Subscription's start date (yyyymmdd) expires Date Subscription's end date (yyyymmdd) Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed. Invoice notification API New Relic uses this endpoint to notify the partner of changes to a partner account's subscription level and invoice information. New Relic uses the PUT method with this URI: https://partner-specified/partner-specified/PARTNER_ID.json Copy OR https://partner-specified/partner-specified/PARTNER_ID.xml Copy The Partnership API returns the results as JSON or XML. Parameters: Name Type Description id string The customer's New Relic account ID subscription_id integer Subscription's numeric ID subscription_string string Description of subscription for display price integer Monthly price of subscription in cents Return codes: 200: Successfully updated. 404: Account not found. 422: Missing or invalid parameters. Authentication failed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.37808,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> billing integration <em>API</em>",
        "sections": "<em>Partnership</em> billing integration <em>API</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s <em>Partnership</em> <em>API</em> includes functionality for partners to replace a customer&#x27;s existing subscription with a <em>new</em> one, or to update invoice information for <em>New</em> <em>Relic</em> <em>partner</em> accounts. This is particularly useful for partners acting as resellers or managed service providers of <em>New</em> <em>Relic</em>"
      },
      "id": "603ec86e64441f09e44e8871"
    },
    {
      "sections": [
        "Partnership API sub-account object",
        "Requirements",
        "Introduction to using sub-accounts",
        "Sub-account object attributes",
        "name (REQUIRED)",
        "allow_api_access",
        "testing",
        "users (REQUIRED for some accounts)",
        "password (REQUIRED)",
        "Sub-account API calls",
        "JSON example",
        "Sub-account object JSON request",
        "JSON response",
        "Sub-account object API examples",
        "Create"
      ],
      "title": "Partnership API sub-account object",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7fb13302d892a5f89c6c9371f35a60bf1ed9f6a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partnership-api-sub-account-object/",
      "published_at": "2021-06-08T19:57:01Z",
      "updated_at": "2021-03-30T12:15:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains how to use the Partnership API to manage sub-accounts. For accounts, you'd use the sub-account object. Requirements You may not have access to using this object. Before using the Partnership API, first read the requirements. Introduction to using sub-accounts Some notes about using the sub-account object: To manage existing master accounts or existing sub-accounts, use the Partnership API account object. A parent account may have more than one associated sub-account, but every sub-account must correspond to one and only one parent account. Every sub-account must have at least a primary_admin user. You cannot create a sub-account without connecting it to an existing parent account and adding at least one user. Sub-account object attributes Before using the Partnership API, first read the requirements. Here are the Partnership API sub-account object's attributes: name (REQUIRED) Type: String Default: (none) This name must be unique in New Relic's database. If the specified name is not unique, it will be auto-incremented with a numeric suffix as follows: conflicting_name_1 conflicting_name_2 etc. Copy allow_api_access Type: Boolean Default: False This flag allows API access to application data. This must be set to true for partnerships remotely administering accounts. testing Type: Boolean Default: False Use this flag to indicate a test account. Test accounts are assumed to contain garbage data and are ignored by internal systems. The data they generate may be deleted at any time. users (REQUIRED for some accounts) Type: Array Default: (none) An array defining a list of users. There are some restrictions in place dependent on the status of your account: For customer partnerships who have switched to the New Relic One user model: do not define users. If you add users with this field, they will be ignored. Instead, to add users, you'd use these user management procedures. For all other accounts, which have users on our original user model: When you create the sub-account, you can define only one user: the account Owner. To add additional users, use the Partnership API user object. For more about restrictions, read the Requirements. password (REQUIRED) Type: String Default: (none) If you are creating a sub-account with an existing user as the account Owner, the password must match the user's current password. For some New Relic organizations, sub-accounts can also be created via the master account's Account settings page in the New Relic UI. Sub-account API calls Here is the URL pattern to create sub-accounts. Notice that the Parent Account ID must be specified. If using this URL pattern, send the JSON object along with an HTTP header containing the Partner API key. For example: POST .../api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts​ x-api-key:PARTNER_ACCOUNT_KEY Content-Type: application/json { JSON data } Copy Call Resource URL pattern Create a sub-account with the given parameters. POST /api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts Copy JSON example Here is an example of a JSON request and response using the Partnership API sub-account object. Note that this is just an example, and that for some accounts, the users attribute is unnecessary and will be ignored. Sub-account object JSON request { \"account\": { \"name\": \"Sample Sub-Account\", \"users\": [ { \"email\": \"sample_user@sample.org\", \"password\": \"XXXXXXXX\", \"owner\": true, \"role\": \"admin\", \"first_name\": \"Sample\", \"last_name\": \"User\" } ], \"allow_api_access\": true, \"phone_number\": \"555-555-5555\" } } Copy JSON response { \"id\": XXXXXX, \"name\": \"Sample Account\", \"status\": \"pending\", \"license_key\": \"XXXXXX\", \"api_key\": \"XXXXXX\", \"browser_monitoring_key\": \"XXXXXX\", \"allow_api_access\": true, \"high_security\": false, \"testing\": null, \"partner_external_identifier\": null, \"parent_account_id\":XXXXXX, \"subscription\": { \"id\": XXXXXX, \"starts_on\": \"2016-05-17\", \"expires_on\": null, \"annual_renewal_on\": null, \"products\": [ { \"product_id\": 4, \"name\": \"Pro\", \"units\": 10, \"price\": 1990.0 }, { \"product_id\": 10, \"name\": \"Mobile Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 20, \"name\": \"Browser Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 16, \"name\": \"Insights None\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 23, \"name\": \"Synthetics Lite\", \"units\": 0, \"price\": 0.0 } ] }, \"primary admin\": { \"id\": XXXXXX, \"email\": \"sample_user@sample.org\", \"first_name\": \"Sample\", \"last_name\": \"User\", \"state\": \"active\" } } Copy Sub-account object API examples Here is an example of an API call using the Partnership API sub-account object. Note that this is just an example, and that for some accounts, the users attribute is unnecessary and will be ignored. Create Request: curl -X POST \\ -H 'x-api-key:PARTNER_ACCOUNT_KEY' \\ -H 'Content-Type:application/json' \\ -d '{\"sub_account\":{\"name\":\"Sample Sub-Account\"}, \"users\":[{\"email\":\"sample_user@sample.org\", \"password\":\"XXXXXX\", \"first_name\":\"Sample\", \"last_name\":\"User\", \"role\":\"admin\", \"owner\":\"true\"}]}' \\ https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/PARENT_ACCOUNT_ID/sub_accounts Copy Response (line breaks are for readability): { \"id\": XXXXXX, \"name\": \"Sample Sub-Account\", \"status\": \"pending\", \"license_key\": \"XXXXXX\", \"api_key\": \"XXXXXX\", \"browser_monitoring_key\": \"XXXXXX\", \"allow_api_access\": false, \"high_security\": false, \"testing\": null, \"partner_external_identifier\": null, \"parent_account_id\":XXXXXX, \"subscription\": { \"id\": XXXXXX, \"starts_on\": \"2016-05-17\", \"expires_on\": null, \"annual_renewal_on\": null, \"products\": [ { \"product_id\": 4, \"name\": \"Pro\", \"units\": 10, \"price\": 1999.0 }, { \"product_id\": 10, \"name\": \"Mobile Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 20, \"name\": \"Browser Lite\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 16, \"name\": \"Insights None\", \"units\": 0, \"price\": 0.0 }, { \"product_id\": 23, \"name\": \"Synthetics Lite\", \"units\": 0, \"price\": 0.0 } ] }, \"primary admin\": { \"id\": XXXXXX, \"email\": \"sample_user@sample.org\", \"first_name\": \"Sample\", \"last_name\": \"User\", \"state\": \"active\" } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.29633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> sub-account object",
        "sections": "<em>Partnership</em> <em>API</em> sub-account object",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " the <em>Partnership</em> <em>API</em> user object. For more about restrictions, read the Requirements. password (REQUIRED) Type: String Default: (none) If you are creating a sub-account with an existing user as the account Owner, the password must match the user&#x27;s current password. For some <em>New</em> <em>Relic</em> organizations"
      },
      "id": "603eba3ae7b9d2b8e32a07b5"
    },
    {
      "sections": [
        "Partnership API reference",
        "Requirements",
        "Find your Partnership API key",
        "Find your Partner ID",
        "Authenticate the API call",
        "Notes for partners who manage New Relic accounts",
        "Errors"
      ],
      "title": "Partnership API reference",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partnerships",
        "Partner API"
      ],
      "external_id": "7bc374ae0e6f6917aa82a70e582606ea4a9878ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partnerships/partner-api/partner-api-reference/",
      "published_at": "2021-06-09T00:10:04Z",
      "updated_at": "2021-03-30T03:04:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc explains technical details about using the Partnership API. For an introduction and requirements, first read Intro to Partnership API. Requirements For requirements, see Intro to Partnership API. Find your Partnership API key The Partnership API requires that you authenticate with the REST API key that is specific to your partnership owner account (you cannot use the other REST API keys). When using your Partnership API key with calls to REST API (v2) endpoints that require the use of an Admin user's API key, see Admin user's API Key and partnerships. Find your Partner ID The Partnership API also requires that you authenticate by providing a Partner ID specific to your partnership. This is unique from the account ID for your partnership owner account. To obtain your Partner ID, go to your partner admin console and retrieve the partner ID number that is listed in your URL: https://partner-admin-console.newrelic.com/accounts/​$ACCOUNT_ID/admin_console/partnerships/$PARTNER_ID Copy You must include the Partner ID as part of the base URL for the Partner API. URL component URL pattern Partner API endpoint https://rpm.newrelic.com/api/v2/partners/PARTNER_ID Copy Resource URL patterns /accounts /accounts/ACCOUNT_ID /accounts/ACCOUNT_ID/users /accounts/ACCOUNT_ID/users/USER_ID /accounts/ACCOUNT_ID/subscriptions /accounts/ACCOUNT_ID/subscriptions/SUBSCRIPTION_ID Copy Example https://rpm.newrelic.com/api/v2/partners/PARTNER_ID/accounts/ACCOUNT_ID Copy Authenticate the API call To authenticate to the Partner API when making an API call: Add a request header labeled x-api-key and set its value to your Partner API key. Include your Partner ID at the specified point in the request URI. Notes for partners who manage New Relic accounts For partners who manage New Relic accounts for their customers, the initial API call for all account-level interactions is to \"create account.\" This call returns an xml record of the newly created account. Part of this record is the account_id. All of the other calls in the Partnership API require the account_id as a parameter. Provision will need to be made by the partner to parse the returned xml extract, store the account_id, and associate it with the users' partner account record. Errors New Relic uses conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success and codes in the 4xx range indicate an error that resulted from the provided information (for example, a required parameter was missing). Error Probable cause 400 Bad Request Most commonly the call is missing a required parameter. 401 Unauthorized A valid API key was not provided. 402 Request Failed Parameters were valid but request failed for some reason. 404 Not Found The requested item doesn't exist. 422 Unprocessable Entity Your account has special terms and cannot be changed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.21324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Partnership</em> <em>API</em> reference",
        "sections": "Notes for <em>partners</em> who manage <em>New</em> <em>Relic</em> accounts",
        "tags": "<em>New</em> <em>Relic</em> <em>partnerships</em>",
        "body": " <em>API</em> key that is specific to your <em>partnership</em> owner account (you cannot use the other REST <em>API</em> keys). When using your <em>Partnership</em> <em>API</em> key with calls to REST <em>API</em> (v2) endpoints that require the use of an Admin user&#x27;s <em>API</em> key, see Admin user&#x27;s <em>API</em> Key and <em>partnerships</em>. Find your <em>Partner</em> ID"
      },
      "id": "603ebc5f28ccbc22b6eba780"
    }
  ],
  "/docs/new-relic-solutions/best-practices-guides/alerts-applied-intelligence/alerts-best-practices": [
    {
      "sections": [
        "APM best practices guide",
        "Tip",
        "1. Standardize application names",
        "How to do it",
        "2. Add tags to your applications",
        "Caution",
        "3. Create and evaluate alert policies",
        "4. Identify and set up key transactions",
        "5. Track deployment history",
        "6. Review APM reports",
        "7. Review your environment with service maps",
        "8. Keep current",
        "9. Manage user access",
        "Important"
      ],
      "title": "APM best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "368a1a5688384d5bebf128604a9b8f190d335524",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide/",
      "published_at": "2021-06-08T18:52:55Z",
      "updated_at": "2021-06-08T18:52:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application Monitoring Tips You Need To Know It's one thing to know how to use APM, but it's another thing to know how to use New Relic's application performance monitoring software well. Here are some best practices designed to help you become an APM master—and a key asset to your team! Tip To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. 1. Standardize application names Most New Relic agents provide a default application name, such as \"My Application\" or \"PHP Application,\" if you don't specify one in your New Relic configuration file. You don't want to end up with 20 identically named applications, be sure to select a descriptive identifier for your apps as soon you deploy them. To keep things consistent and easy to navigate, New Relic recommends standardizing your application naming (for example, all apps in Staging append [ Staging] or the like at the end of their names). Ideally, you want your new Java applications to be named automatically to reduce the chances of typographical errors and misnaming. How to do it For Java applications, automatic application naming can come from the following sources: Request attribute Servlet init parameter Filter init parameter Web app context parameter Web app context name (display name) Web app context path Choose the method that fits best your needs and follow these steps. For non-Java applications, there are no automatic naming methods, so refer to the documentation for your APM agent. 2. Add tags to your applications When several different applications use the same account, and each application spans multiple environments (for example, development, test, pre-production, production), it can be hard to find a specific application in your overview dashboard. That's why we recommend adding tags to your apps so that you can segment them into logical groups. The two most common tags that mature APM customers use are application name and environment. So, for example, if you wanted to view the billing application in Test, you could simply filter by \"billing app\" (name tag) and \"test\" (environment tag). Caution In the APM agent configuration settings files, use the labels field to add tags to your data. For example, see this description of the Python labels setting. APM is designed so that apps can roll up into an unlimited number of meaningful tag categories. How to do it Learn about tags. Learn how to add tags.. Learn how to query tags. 3. Create and evaluate alert policies When key performance indicators spike or drop, individuals and teams in your organization need to be notified. Alerting in New Relic provides a set of tools including dynamic baselines that allow you to detect problems before they impact your end users. Alert policies can be set up in two primary ways: Static threshold alerts are great when you already know the nature of an application and its normal behaviors aren't likely to change anytime soon. Apdex score, response time, error rate, throughput are some of the static thresholds you can create alert policies on. Dynamic baseline alerts make it easy to determine and set dynamic alert thresholds for applications with varying seasonal patterns and growth trends (which make it difficult to set thresholds that define normal behavior). These alerts use baselines modeled from your application’s historical metric data. Each alert policy can contain as many conditions as you need, and each alert condition includes three components: Type of condition (metric, external service, and so on) Entities that the policy targets (for example, apps monitored by New Relic APM or New Relic Browser, hosts monitored by New Relic Infrastructure, and so on) Thresholds that escalate into alerting situations with increasing severity Once you have your alerting set up, you then want to make sure you're taking advantage of all viable notification channels. After all, what good are alerts if no one knows about them? You can manage alerts by creating specific user groups and by leveraging New Relic's integrated alert channels, including Slack, PagerDuty, webhooks, and email. Be sure to evaluate alert policies on a regular basis to ensure that they are always valid. How to do it See the detailed documentation: To set up dynamic baseline alerts and choose an application, follow standard procedures. You will see a preview of the metric with the predicted baseline You can select a metric for that application and see the corresponding baseline. Then, using the threshold sliders, you can set how closely you want your threshold to follow the baseline prediction. To set up static threshold alerts for your Apdex settings, follow standard procedures. To set up your alert notification channels, follow standard procedures. 4. Identify and set up key transactions Depending on the nature of your application, some transactions may be more important to you than others. New Relic's key transactions feature is designed to help you closely monitor what you consider to be your app's most business-critical transactions, whether that's end-user or app response time, call counts, error rates, or something else. You can also set alert threshold levels for notifications when your key transactions are performing poorly. How to do it In the menu bar, select More > Key transactions, and then select Add more. Then select the app and web transaction or, from the selected transaction, select Track as key transaction. Type a name for the key transaction, and select Track key transaction. Optional: If the agent for the selected app supports custom alerting, use the default values that New Relic automatically fills, or select Edit key alert transaction policy to set the Apdex and alert threshold values. To view the key transactions dashboard details, select View new key transaction. 5. Track deployment history When development teams are pushing new code out as frequently as possible, it can be hard to measure the impact that each deployment is having on performance. One way to stay in tune with how these changes are affecting your application is with deployment reports. These reports list recent deployments and their impact on end-users and app servers' Apdex scores, along with response times, throughput, and errors. You can also view and drill down into the details to catch errors related to recent deployments, or file a ticket and share details with your team. How to do it From the New Relic menu bar, select APM > (selected app) > Events > Deployments. To view performance after a deployment, go to the selected app's Overview dashboard in the Recent events section. A blue vertical bar on a chart indicates a deployment. To view summary information about the deployment, point to the blue bar. 6. Review APM reports From SLA, deployment, and capacity to scalability, host usage reports, and more, New Relic APM offers a variety of downloadable reporting tools surfacing historical trends—all great ways to report to senior executive teams or customers. Take a look at the full list of reports and use them to your advantage. How to do it From the New Relic APM menu bar, select Applications > (selected app) > Reports. Select the report you'd like to see. If you want to save or export a report to share, select Download this report as .csv, which will create a report with comma-separated values. 7. Review your environment with service maps Use New Relic service maps, a feature included in APM, to understand how apps and services in your architecture connect and talk to each other. Service maps are visual, customizable representations of your application architecture. Maps automatically show you your app's connections and dependencies, including databases and external services. Health indicators and performance metrics show you the current operational status for every part of your architecture. How to do it Go to one.newrelic.com > More > service maps. To get started, read the instructions in Introduction to service maps. 8. Keep current With New Relic’s SaaS platform, getting new features is as easy as updating your agent. Most likely your organization already has a set of scripts for deploying application upgrades into your environment. In a similar fashion, you can also automate your New Relic agent deployment to ensure that your systems are up to date. Both Puppet and Chef scripts are great examples of deployment frameworks that make life easier by allowing you to automate your entire deployment and management process. How to do it Regularly review which version of the agent you're using so that you know when an update is needed. If the latest agent release contains a needed fix or added functionality, download it. To deploy the agent automatically (preferred as a method to avoid errors): Use existing deployment scripts, provided they can be adapted to handle the deployment. OR Create and maintain a script that specifically deploys and configures the New Relic agent. Ideally, the script would pull the agent files from a repository where the files are versioned (for rollback purposes). Once the script has been created, shut down the application (unless script handles this). Run the deployment script. Start the application (unless script handles this). If problems arise, run the script to roll back to the previous version. To deploy the agent manually: Back up the current agent directory. Deploy the updated agent into the existing agent directory. Modify configuration files by comparing new files with existing files. In particular, make sure things like license key and custom extensions are copied over to the new configuration. Restart the application. If problems arise, restore the old agent using the backup and restart. 9. Manage user access Important This is available only for accounts on our original product-based pricing plan. Enable role-based access control (RBAC) and single sign-on (SSO) New Relic allows authorized individuals to access the broadest possible amount of data, regardless of their assigned role. As an Owner or Administrator of your New Relic account, you can control the permissions of individual users or entire roles with RBAC. To find out what is possible and how to make changes, see Users and roles. Security is no doubt of utmost concern to your organization. To simplify password management for your employees and strengthen security, you may already be using SSO with your other systems. You should do the same with New Relic. Using New Relic's SSO integration feature, account administrators will be able to enforce strong passwords and restrict login via a corporate authentication mechanism. This way, New Relic users who have already authenticated using a corporate SSO system will be able to bypass the New Relic login prompt. How to do it Log in to New Relic as an admin and go to the SSO configuration page. From the New Relic title bar, select (your account name) > Account Settings > Integrations > Single Sign On. From the SAML Single Sign On page, review your New Relic SAML Service Provider details. To upload your SAML Identity Provider certificate, select Choose File, and then follow standard procedures to select and save the file. Copy and paste in (or type) the Remove login URL that your users will use for Single Sign-On. If your organization’s SAML integration provides a redirect URL for logout, copy and paste in (or type) the Logout landing URL; otherwise leave blank. Save, test, and enable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 215.17287,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Application Monitoring Tips You Need To Know It&#x27;s one thing to know how to use APM, but it&#x27;s another thing to know how to use <em>New</em> <em>Relic</em>&#x27;s application performance monitoring software well. Here are some <em>best</em> <em>practices</em> designed to help you become an APM master—and a key asset to your team! Tip To get"
      },
      "id": "6044186564441f1f94378ecc"
    },
    {
      "sections": [
        "Synthetic monitoring best practices guide",
        "Tip",
        "1. Match your monitor type to monitoring need",
        "How to do it",
        "2. View all monitors with the Monitors index page",
        "How to view your monitors in the New Relic One:",
        "New Relic Explorer",
        "Monitors index page",
        "3. View individual monitor results",
        "How to do it:",
        "4. Understand the load-time impact of each resource",
        "5. Configure and develop a scripted browser test"
      ],
      "title": "Synthetic monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e76eb0669a1433bb9d0de70d90413e19749adf61",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/synthetic-monitoring-best-practices-guide/",
      "published_at": "2021-06-08T19:58:15Z",
      "updated_at": "2021-03-29T20:29:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's synthetic monitoring—powered by a Selenium-driven Chrome browser—allows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its full power. Tip To use synthetic monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. 1. Match your monitor type to monitoring need Synthetic monitors are virtual browsers that measure the performance of your website, recording each check in detail. They also capture aggregate numbers for load time, uptime, and average download size, as well as an overview, detailed statistics for each page resource, and downtime incidents. There are four types of synthetic monitors; the ones you deploy will depend on the things you want to monitor: Ping monitors—to ensure that your site is accessible. Simple browser monitors—to ensure end-user performance. Scripted browsers—to ensure that particular resources are present. API monitors—to ensure that your app server works as well as your website. How to do it To add a monitor, go to one.newrelic.com > Synthetics (or one.eu.newrelic.com if you have an EU-based account) and click Create monitor. Specify monitor type, name, and URL. Optional: Add a validation string (available for ping and simple browser) or advanced options, which enable substring monitoring for the following types of response validation: Verify SSL (for Ping and Simple Browser). This option verifies the validity of the SSL certificate chain. It can be duplicated by running the following syntax: openssl s_client -servername {YOUR_HOSTNAME} -connect {YOUR_HOSTNAME}:443 -CApath /etc/ssl/certs > /dev/null Copy Bypass HEAD request (for Ping). This option skips the default HEAD request and instead uses the GET verb with a ping check. Redirect is Failure (for Ping). If a redirect result occurs when Redirect is Failure is enabled, Synthetics categorizes it as a failure (rather than following the redirect and checking the resulting URL). Select the locations where you want your monitor to run. Choose a frequency to determine how often each location will run your monitor. Optional: Set up alert notifications. Select Create my monitor to confirm. Wait a few minutes; then from the Monitors index check your monitor. 2. View all monitors with the Monitors index page Continuous application performance monitoring is essential to ensure that web services are in place, working correctly, and error-free. Synthetic monitoring provides this type of assurance by performing automated tests on your web application for each selected location—noting downtime instances (“violations”) and collecting aggregate numbers, results, and detailed statistics for each page resource. Use the Monitors index page to get a high level view of this information, or select an individual monitor to view the Summary, for ping monitors, or Overview, for simple and scripted monitors, page and get a deeper insight into its performance over time. How to view your monitors in the New Relic One: New Relic Explorer To view a list of monitors using the New Relic One Monitors index page: Go to one.newrelic.com > Explorer > Synthetic monitors. For more information, see the documentation about navigating core UI components in New Relic One. Monitors index page To view a list of monitors using the Monitors index page: Go to one.newrelic.com > Synthetics. 3. View individual monitor results It’s not enough to understand how your web apps are performing for your West Coast customers; you need to be able to view how they’re performing across the country and around the globe. By taking advantage of synthetic monitors and visiting your Results page, you can see how everything from development to production affects user experience. You can locate interesting results by sorting the list to identify slow, fast, or other unusual results. Or filter by location to understand how monitor performance varies with geography. (The “Network timings” graph below provides a snapshot of webpage performance over a given period.) How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors tab, select your monitor. Select Monitor > Results. Gain an up-to-the-minute view of the slowest page loads for every monitored location. 4. Understand the load-time impact of each resource Visit the synthetics Resources page to see how each resource on your website—including CSS, JavaScript, images, HTML and more—is affecting your overall load. You can drill into detailed metrics collected at run time, locate performance information for time spent by third-party resources, and identify HTTP response codes for each resource. How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors drop-down menu, select your monitor. Select Monitor > Resources. 5. Configure and develop a scripted browser test Using scripted browsers, you can build complex monitoring workflows using the Selenium JavaScript Webdriver bindings. For instance, you can log in to the application, navigate to a particular link, and wait for a page element to load and add an assertion. How to do it: Go to one.newrelic.com > Synthetics. Choose your monitor type (for example, Scripted Browser). Enter the name and details of your monitor (for example, Sitename.com Scripted Browser) Select the locations from which you want your monitor to run (for example, Mumbai, Seoul, Columbus, and Montreal). Choose a frequency to determine how often each location will run your monitor (for example, five minutes). Set a notification method to alert your team when performance violations occur. You are now ready to write your script. (Below is an example of a script used to test the performance of a main navigation page.) var assert = require('chai').assert; // script-wide timeout for all wait and waitandfind functions (in ms) var default_element_timeout = 190000; //3 mins var default_pageload_timeout = 240000; //4 mins var navlinks = [\"css-locator-1\",\"css-locator-2\"]; //sets element load timeout to 3 mins $browser.manage().timeouts().implicitlyWait(default_element_timeout); //sets page load timoeout to 4 mins $browser.manage().timeouts().pageloadTimeout(default_pageload_timeout); //test all the main nav page performances $browser.get(\"http://www.sitename.com\").then(function(){ return $browser.findelement($driver.by.classname(\"site-theme-example\")); }).then(function(){ //verifies the nav list has loaded return $browser.findelement($driver.by.classname(\"site-nav-list-example\")); }).then(function(){ //loops through the navlinks array navlinks.foreach(function(val, i, arr){ //finds and navigates to each navlink page return $browser.findelement($driver.by.classname(navlinks[i])).click().then(function(){ //verifies that the nav list loaded before moving on return $browser.findelement($driver.by.classname(\"site-nav-list-example\")).then(function(){ //verifies that the page logo footer at bottom of page has loaded return $browser.findelement($driver.by.classname(\"site-footer-logo\")); }) }) }) }); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.81339,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s synthetic monitoring—powered by a Selenium-driven Chrome browser—allows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its full power. Tip To use synthetic monitoring and the rest of our"
      },
      "id": "603e84bb28ccbce555eba771"
    },
    {
      "sections": [
        "Infrastructure monitoring best practices guide",
        "1. Install the infrastructure agent across your entire environment",
        "How to do it",
        "Tip",
        "2. Configure the native EC2 integration",
        "3. Activate the integrations",
        "4. Create filter sets",
        "5. Create alert conditions",
        "6. View infrastructure data alongside APM data",
        "7. Access Infrastructure data using the Data explorer",
        "8. Update your agents regularly",
        "Want more user tips?"
      ],
      "title": "Infrastructure monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "931ea7767d73381ca0cb3502ec14f88d66ce5eaf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/infrastructure-monitoring-best-practices-guide/",
      "published_at": "2021-06-09T00:10:58Z",
      "updated_at": "2021-03-13T07:39:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Want even longer periods of uninterrupted sleep? Here are eight best practices to make dynamic infrastructure and server monitoring even easier with New Relic's infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution was designed to help enterprise customers monitor their large and dynamically changing environments at scale. In order to facilitate this, the UI is completely driven by tags that let you visualize aggregated metrics, events, and inventory for a large number of servers. To really get the most out of infrastructure monitoring, we recommend installing it across your entire environment, preferably even across multiple regions and clusters. This will provide a more accurate picture of the health of your host ecosystem and the impact your infrastructure has on your applications. Want to achieve faster Mean Time To Resolution (MTTR)? Install the infrastructure agent on database servers, web servers, and any other host that supports your applications. When deploying the agent, leverage custom attributes to tag your hosts so that you can use those for filtering the data presented in the UI and for setting alerts. This is in addition to any Amazon EC2 tags you may be using which will auto-import when you enable the EC2 integration. You may also prefer to keep the agent logs separate from the system logs, which you can do through the configuration. How to do it Leverage our install modules for config management tools such as Chef, Puppet and Ansible to easily deploy your agent across all your infrastructure. Read the instructions in the github repo for your config management tool referenced in the link above and define the custom_attributes you want to use to tag your hosts. Set the log_file attribute to your preferred location for the infrastructure agent logs. Tip If you are installing the agent on a single host, the process should only take a few minutes and you can find detailed instructions in our documentation. 2. Configure the native EC2 integration If you have an AWS environment, in addition to installing the infrastructure agent on your EC2 instances to monitor them, we also recommend configuring the EC2 integration so that New Relic can automatically import all the tags and metadata associated with your AWS instances. This allows you to filter down to a part of your infrastructure using the same AWS tags (example, ECTag_Role='Kafka'), and slice-and-dice your data in multiple ways. Additionally, our ‘Alerts’ and ‘Saved Filter Sets’ are completely tag-driven and dynamic, so they automatically add/remove instances matching these tags to give our users the most real-time views that scale with your cloud infrastructure. 3. Activate the integrations Monitoring your infrastructure extends beyond just CPU, memory, and storage utilization. That’s why New Relic has out-of-the-box integrations that allow you to monitor all the services that support your hosts as well. Activate any of our integrations, including AWS Billing, AWS ELB, Amazon S3, MySQL, NGINX, and more, to extend monitoring to your AWS or on-host applications, and access the pre-configured dashboards that appear for each of them. 4. Create filter sets With New Relic, users can create filter sets to organize hosts, cluster roles, and other resources based on criteria that matter the most to users. This allows you to optimize your resources by using a focused view to monitor, detect, and resolve any problems proactively. The attributes for filtering are populated from the auto-imported EC2 tags or custom tags that may be applied to hosts. You can combine as many filters as you want in a filter set, and save them to share with other people in your account. You’ll also be able to see the color-coded health status of each host inside the filter set, so you can quickly identify problematic areas of your infrastructure. Additionally, filter sets can be used in the health map to get an overview of your infrastructure performance at a glance based on the filters that matter to your teams. 5. Create alert conditions With New Relic, you can create alert conditions directly within the context of what you are currently monitoring with New Relic. For example, if you are viewing a filter set comprised of a large number of hosts and notice a problem, you don’t need to create an individual alert condition for every host within. Instead, we recommend initiating the alert condition directly from the chart of the metric you are viewing and creating it based on the filter tags. This will create an alert condition for any hosts that match those tags, allowing our infrastructure monitoring to automatically remove hosts that go offline and add new hosts to the alert condition if they match those tags. Alerts configured once for the appropriate tags will scale correctly across all future hosts. And know that you can also leverage existing alert policies for infrastructure alert conditions. 6. View infrastructure data alongside APM data The integration between New Relic APM and infrastructure monitoring lets you see your APM data and infrastructure data side by side, so you can find the root cause of problems more quickly, no matter where they originate. This allows users to view the performance relationship of your hosts and the applications running on them, allowing for quicker diagnosis of the issue and impact on the business’ health. Use health maps to quickly spot any issues or alerts related to the health of your applications and how that connects to the supporting infrastructure. The first boxes starting from the top left are those that require your attention. 7. Access Infrastructure data using the Data explorer Teams that use multiple New Relic capabilities find it useful to create a single dashboard to visually correlate the infrastructure’s health with application, browser and synthetics metrics. That’s where New Relic data exploration features comes in. All the granular metrics and events collected by infrastructure monitoring are stored in New Relic and are accessible to you immediately. Having access to the raw metrics means you can run more custom queries using NRQL, and also create dashboards to share infrastructure metrics with your team. 8. Update your agents regularly New Relic’s software engineering team is constantly pushing out improvements and new features to improve our customers’ overall monitoring experience. In order to take advantage of all the awesomeness they’re delivering, we recommend regularly updating to the latest version of the infrastructure agent. Want more user tips? View training videos at New Relic University. Read the documentation. Check out our Tutorials. Ask a question in the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.31713,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Want even longer periods of uninterrupted sleep? Here are eight <em>best</em> <em>practices</em> to make dynamic infrastructure and server monitoring even easier with <em>New</em> <em>Relic</em>&#x27;s infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution"
      },
      "id": "6044151c28ccbc4b4f2c60af"
    }
  ],
  "/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide": [
    {
      "sections": [
        "Synthetic monitoring best practices guide",
        "Tip",
        "1. Match your monitor type to monitoring need",
        "How to do it",
        "2. View all monitors with the Monitors index page",
        "How to view your monitors in the New Relic One:",
        "New Relic Explorer",
        "Monitors index page",
        "3. View individual monitor results",
        "How to do it:",
        "4. Understand the load-time impact of each resource",
        "5. Configure and develop a scripted browser test"
      ],
      "title": "Synthetic monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e76eb0669a1433bb9d0de70d90413e19749adf61",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/synthetic-monitoring-best-practices-guide/",
      "published_at": "2021-06-08T19:58:15Z",
      "updated_at": "2021-03-29T20:29:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's synthetic monitoring—powered by a Selenium-driven Chrome browser—allows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its full power. Tip To use synthetic monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. 1. Match your monitor type to monitoring need Synthetic monitors are virtual browsers that measure the performance of your website, recording each check in detail. They also capture aggregate numbers for load time, uptime, and average download size, as well as an overview, detailed statistics for each page resource, and downtime incidents. There are four types of synthetic monitors; the ones you deploy will depend on the things you want to monitor: Ping monitors—to ensure that your site is accessible. Simple browser monitors—to ensure end-user performance. Scripted browsers—to ensure that particular resources are present. API monitors—to ensure that your app server works as well as your website. How to do it To add a monitor, go to one.newrelic.com > Synthetics (or one.eu.newrelic.com if you have an EU-based account) and click Create monitor. Specify monitor type, name, and URL. Optional: Add a validation string (available for ping and simple browser) or advanced options, which enable substring monitoring for the following types of response validation: Verify SSL (for Ping and Simple Browser). This option verifies the validity of the SSL certificate chain. It can be duplicated by running the following syntax: openssl s_client -servername {YOUR_HOSTNAME} -connect {YOUR_HOSTNAME}:443 -CApath /etc/ssl/certs > /dev/null Copy Bypass HEAD request (for Ping). This option skips the default HEAD request and instead uses the GET verb with a ping check. Redirect is Failure (for Ping). If a redirect result occurs when Redirect is Failure is enabled, Synthetics categorizes it as a failure (rather than following the redirect and checking the resulting URL). Select the locations where you want your monitor to run. Choose a frequency to determine how often each location will run your monitor. Optional: Set up alert notifications. Select Create my monitor to confirm. Wait a few minutes; then from the Monitors index check your monitor. 2. View all monitors with the Monitors index page Continuous application performance monitoring is essential to ensure that web services are in place, working correctly, and error-free. Synthetic monitoring provides this type of assurance by performing automated tests on your web application for each selected location—noting downtime instances (“violations”) and collecting aggregate numbers, results, and detailed statistics for each page resource. Use the Monitors index page to get a high level view of this information, or select an individual monitor to view the Summary, for ping monitors, or Overview, for simple and scripted monitors, page and get a deeper insight into its performance over time. How to view your monitors in the New Relic One: New Relic Explorer To view a list of monitors using the New Relic One Monitors index page: Go to one.newrelic.com > Explorer > Synthetic monitors. For more information, see the documentation about navigating core UI components in New Relic One. Monitors index page To view a list of monitors using the Monitors index page: Go to one.newrelic.com > Synthetics. 3. View individual monitor results It’s not enough to understand how your web apps are performing for your West Coast customers; you need to be able to view how they’re performing across the country and around the globe. By taking advantage of synthetic monitors and visiting your Results page, you can see how everything from development to production affects user experience. You can locate interesting results by sorting the list to identify slow, fast, or other unusual results. Or filter by location to understand how monitor performance varies with geography. (The “Network timings” graph below provides a snapshot of webpage performance over a given period.) How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors tab, select your monitor. Select Monitor > Results. Gain an up-to-the-minute view of the slowest page loads for every monitored location. 4. Understand the load-time impact of each resource Visit the synthetics Resources page to see how each resource on your website—including CSS, JavaScript, images, HTML and more—is affecting your overall load. You can drill into detailed metrics collected at run time, locate performance information for time spent by third-party resources, and identify HTTP response codes for each resource. How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors drop-down menu, select your monitor. Select Monitor > Resources. 5. Configure and develop a scripted browser test Using scripted browsers, you can build complex monitoring workflows using the Selenium JavaScript Webdriver bindings. For instance, you can log in to the application, navigate to a particular link, and wait for a page element to load and add an assertion. How to do it: Go to one.newrelic.com > Synthetics. Choose your monitor type (for example, Scripted Browser). Enter the name and details of your monitor (for example, Sitename.com Scripted Browser) Select the locations from which you want your monitor to run (for example, Mumbai, Seoul, Columbus, and Montreal). Choose a frequency to determine how often each location will run your monitor (for example, five minutes). Set a notification method to alert your team when performance violations occur. You are now ready to write your script. (Below is an example of a script used to test the performance of a main navigation page.) var assert = require('chai').assert; // script-wide timeout for all wait and waitandfind functions (in ms) var default_element_timeout = 190000; //3 mins var default_pageload_timeout = 240000; //4 mins var navlinks = [\"css-locator-1\",\"css-locator-2\"]; //sets element load timeout to 3 mins $browser.manage().timeouts().implicitlyWait(default_element_timeout); //sets page load timoeout to 4 mins $browser.manage().timeouts().pageloadTimeout(default_pageload_timeout); //test all the main nav page performances $browser.get(\"http://www.sitename.com\").then(function(){ return $browser.findelement($driver.by.classname(\"site-theme-example\")); }).then(function(){ //verifies the nav list has loaded return $browser.findelement($driver.by.classname(\"site-nav-list-example\")); }).then(function(){ //loops through the navlinks array navlinks.foreach(function(val, i, arr){ //finds and navigates to each navlink page return $browser.findelement($driver.by.classname(navlinks[i])).click().then(function(){ //verifies that the nav list loaded before moving on return $browser.findelement($driver.by.classname(\"site-nav-list-example\")).then(function(){ //verifies that the page logo footer at bottom of page has loaded return $browser.findelement($driver.by.classname(\"site-footer-logo\")); }) }) }) }); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 225.70113,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s synthetic monitoring—powered by a Selenium-driven Chrome browser—allows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its <em>full</em> power. Tip To use synthetic monitoring and the rest of our"
      },
      "id": "603e84bb28ccbce555eba771"
    },
    {
      "sections": [
        "Infrastructure monitoring best practices guide",
        "1. Install the infrastructure agent across your entire environment",
        "How to do it",
        "Tip",
        "2. Configure the native EC2 integration",
        "3. Activate the integrations",
        "4. Create filter sets",
        "5. Create alert conditions",
        "6. View infrastructure data alongside APM data",
        "7. Access Infrastructure data using the Data explorer",
        "8. Update your agents regularly",
        "Want more user tips?"
      ],
      "title": "Infrastructure monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "931ea7767d73381ca0cb3502ec14f88d66ce5eaf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/infrastructure-monitoring-best-practices-guide/",
      "published_at": "2021-06-09T00:10:58Z",
      "updated_at": "2021-03-13T07:39:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Want even longer periods of uninterrupted sleep? Here are eight best practices to make dynamic infrastructure and server monitoring even easier with New Relic's infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution was designed to help enterprise customers monitor their large and dynamically changing environments at scale. In order to facilitate this, the UI is completely driven by tags that let you visualize aggregated metrics, events, and inventory for a large number of servers. To really get the most out of infrastructure monitoring, we recommend installing it across your entire environment, preferably even across multiple regions and clusters. This will provide a more accurate picture of the health of your host ecosystem and the impact your infrastructure has on your applications. Want to achieve faster Mean Time To Resolution (MTTR)? Install the infrastructure agent on database servers, web servers, and any other host that supports your applications. When deploying the agent, leverage custom attributes to tag your hosts so that you can use those for filtering the data presented in the UI and for setting alerts. This is in addition to any Amazon EC2 tags you may be using which will auto-import when you enable the EC2 integration. You may also prefer to keep the agent logs separate from the system logs, which you can do through the configuration. How to do it Leverage our install modules for config management tools such as Chef, Puppet and Ansible to easily deploy your agent across all your infrastructure. Read the instructions in the github repo for your config management tool referenced in the link above and define the custom_attributes you want to use to tag your hosts. Set the log_file attribute to your preferred location for the infrastructure agent logs. Tip If you are installing the agent on a single host, the process should only take a few minutes and you can find detailed instructions in our documentation. 2. Configure the native EC2 integration If you have an AWS environment, in addition to installing the infrastructure agent on your EC2 instances to monitor them, we also recommend configuring the EC2 integration so that New Relic can automatically import all the tags and metadata associated with your AWS instances. This allows you to filter down to a part of your infrastructure using the same AWS tags (example, ECTag_Role='Kafka'), and slice-and-dice your data in multiple ways. Additionally, our ‘Alerts’ and ‘Saved Filter Sets’ are completely tag-driven and dynamic, so they automatically add/remove instances matching these tags to give our users the most real-time views that scale with your cloud infrastructure. 3. Activate the integrations Monitoring your infrastructure extends beyond just CPU, memory, and storage utilization. That’s why New Relic has out-of-the-box integrations that allow you to monitor all the services that support your hosts as well. Activate any of our integrations, including AWS Billing, AWS ELB, Amazon S3, MySQL, NGINX, and more, to extend monitoring to your AWS or on-host applications, and access the pre-configured dashboards that appear for each of them. 4. Create filter sets With New Relic, users can create filter sets to organize hosts, cluster roles, and other resources based on criteria that matter the most to users. This allows you to optimize your resources by using a focused view to monitor, detect, and resolve any problems proactively. The attributes for filtering are populated from the auto-imported EC2 tags or custom tags that may be applied to hosts. You can combine as many filters as you want in a filter set, and save them to share with other people in your account. You’ll also be able to see the color-coded health status of each host inside the filter set, so you can quickly identify problematic areas of your infrastructure. Additionally, filter sets can be used in the health map to get an overview of your infrastructure performance at a glance based on the filters that matter to your teams. 5. Create alert conditions With New Relic, you can create alert conditions directly within the context of what you are currently monitoring with New Relic. For example, if you are viewing a filter set comprised of a large number of hosts and notice a problem, you don’t need to create an individual alert condition for every host within. Instead, we recommend initiating the alert condition directly from the chart of the metric you are viewing and creating it based on the filter tags. This will create an alert condition for any hosts that match those tags, allowing our infrastructure monitoring to automatically remove hosts that go offline and add new hosts to the alert condition if they match those tags. Alerts configured once for the appropriate tags will scale correctly across all future hosts. And know that you can also leverage existing alert policies for infrastructure alert conditions. 6. View infrastructure data alongside APM data The integration between New Relic APM and infrastructure monitoring lets you see your APM data and infrastructure data side by side, so you can find the root cause of problems more quickly, no matter where they originate. This allows users to view the performance relationship of your hosts and the applications running on them, allowing for quicker diagnosis of the issue and impact on the business’ health. Use health maps to quickly spot any issues or alerts related to the health of your applications and how that connects to the supporting infrastructure. The first boxes starting from the top left are those that require your attention. 7. Access Infrastructure data using the Data explorer Teams that use multiple New Relic capabilities find it useful to create a single dashboard to visually correlate the infrastructure’s health with application, browser and synthetics metrics. That’s where New Relic data exploration features comes in. All the granular metrics and events collected by infrastructure monitoring are stored in New Relic and are accessible to you immediately. Having access to the raw metrics means you can run more custom queries using NRQL, and also create dashboards to share infrastructure metrics with your team. 8. Update your agents regularly New Relic’s software engineering team is constantly pushing out improvements and new features to improve our customers’ overall monitoring experience. In order to take advantage of all the awesomeness they’re delivering, we recommend regularly updating to the latest version of the infrastructure agent. Want more user tips? View training videos at New Relic University. Read the documentation. Check out our Tutorials. Ask a question in the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.361,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Want even longer periods of uninterrupted sleep? Here are eight <em>best</em> <em>practices</em> to make dynamic infrastructure and server monitoring even easier with <em>New</em> <em>Relic</em>&#x27;s infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution"
      },
      "id": "6044151c28ccbc4b4f2c60af"
    },
    {
      "sections": [
        "Monitor apps and hosts with health maps",
        "Best practices",
        "Features",
        "Entities prioritized by health",
        "Tip",
        "Entity sort order criteria",
        "Views, filters, toggles",
        "View and use health maps",
        "Use cases",
        "The system's current health at a glance",
        "Scope of the problem: What else is broken?",
        "Scale of the problem: Use context to find a noisy neighbor",
        "Troubleshooting"
      ],
      "title": "Monitor apps and hosts with health maps",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e7d1c9a1f713b33c4aa42c2cb5e1b7a6ac23c2e3",
      "image": "https://docs.newrelic.com/static/2a20f997d494faa0658b6d93c6ab1fd3/c1b63/health-map-demo-ss_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/monitor-apps-hosts-health-maps/",
      "published_at": "2021-06-09T05:34:54Z",
      "updated_at": "2021-03-13T07:37:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The health map provides a single place to visually monitor the health of all your apps and their related hosts, prioritized by health status. You can customize the page by using different views, filters, and toggles to organize the map in a way most relevant to you or your team. Use your health map to monitor applications and hosts in real-time, and quickly track down problems as they occur. Best practices The health map pulls data together from several New Relic solutions. To get the most out of the health map, we recommend using the following features: Infrastructure monitoring: Create filter sets to meaningfully categorize hosts. APM: Create tags to meaningfully categorize your applications. Alerts: Create alert policies that cover all your alerting scenarios. The health map is also especially useful if you're using containerized apps on hosts, with many instances of apps per host. Features one.newrelic.com > More > Health maps: The health map combines data from APM, infrastructure monitoring, and alerts to display your applications and hosts prioritized by health status. Health map features include: Entities prioritized by health The health map organizes the page by primary entity boxes. Primary entity boxes contain current (refreshes every two minutes), at-a-glance health and performance data, secondary entities related to it, and links to relevant APM or Infrastructure UI pages for detailed performance data. Example of a health map primary entity box with secondary entities. The health map prioritizes entities based on the health status of primary then secondary entities. The health status is determined using data from Alerts. The health map prioritizes the entities by first sorting the primary entities by health status, then sorting those by the health status of their secondary entities (related apps or hosts). The health map supports red, yellow, green, light green (not targeted by any conditions), and gray (application stopped reporting data) statuses for applications. The health map supports red, yellow, and green statuses for hosts. Tip If you have a host not targeted by any conditions, it appears green on the health map. If a host is not reporting data, it does not display on the health map unless you create a host-not-reporting condition. Entities are prioritized to the top based on this order: Entity sort order criteria Primary entities that have critical (red) health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Primary entities that have warning (yellow) health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Primary entities that have green health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Count of secondary entities Name of entity Views, filters, toggles Use the Views dropdown to see the health of your system organized by your applications or your hosts. You can then filter those views by tags (apps) or filter set (hosts) to only see data most relevant to you or your team. Use the Show metrics/hosts toggles to show more/less information in the entity boxes. View Description Applications and related hosts Organizes the map by application entities to display for each app: Health status color Condition violation information, if any Summary metrics Health of related hosts the application is running on as reported by New Relic Infrastructure Map includes an optional app tag filter. Hosts and related applications Organizes the map by host entities to display for each host: Health status color Condition violation information, if any Summary metrics Health of related applications running on the host reported by New Relic APM Map includes an optional host filter. Filter sets and related hosts Uses data reported by our infrastructure monitoring to display: Health of the hosts in each filter set in Infrastructure View and use health maps Tip To get the most out of your health map, see health maps best practices. The health map represents the current state of your system. The map refreshes every two minutes. To view the health map: From one.newrelic.com, select More, then select Health maps. Select a view from the View dropdown to organize the map by application, host, or infrastructure filter sets. If using the views Applications and related hosts or Hosts and related applications, use the Filter dropdown to only display entities most interesting to you or your team. Optional: Toggle Show metrics or Show hosts to display more or less entity data. Optional: Display the health map on a TV / wallboard in your operations center to see your system's current health at a glance. If entities start showing critical (red) or warning (yellow) health statuses, hover over the entity or the Related hosts/apps tiles for violation information to quickly ascertain the scope and scale of the problem. Click through to the relevant APM or Infrastructure UI pages to get detailed information to start troubleshooting. Use cases The health map is designed to help operations and DevOps professionals, who are responsible for the health of large, complex environments, understand: The system's current health at a glance You like to have a view up on the TV wallboard in your network operations center (NOC) that represents the health of all systems. You may be focused on a task and not notice when an alert comes in. With a wallboard you can feel assured that you can always glance up to see if anything is on fire. Conversely, even though something is alerting, you like to see the applications and hosts that are healthy to help keep things in perspective. Scope of the problem: What else is broken? You are responsible for many applications at your company. At any point in time, something is alerting and because there are many applications deployed across many hosts, it’s difficult for you to keep track of everything and know what is experiencing problems. The health map gives you a single place to see the health and relationship between all applications and hosts. You can easily correlate the alerting host with applications deployed to it and easily answer the question: What else is broken right now? Scale of the problem: Use context to find a noisy neighbor With container orchestration deploying containerized applications across many hosts, it’s difficult for you to understand the scale of the problem when you receive an alert for a host or groups of hosts. By using the application view of the health map, you can see the alerting host along with all the other hosts serving the application. If the issue is isolated to a single host, you can change to the host view of the health map to see what other applications are deployed on that host. In that view, you see that the host has four applications running and one of the applications is alerting on higher than normal throughput. Troubleshooting If health map host boxes do not display their installed apps, or if application boxes do not display the Infrastructure-monitored hosts where they are running, see APM data missing from infrastructure monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.36073,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Best</em> <em>practices</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": " to monitor applications and hosts in real-time, and quickly track down problems as they occur. <em>Best</em> <em>practices</em> The health map pulls data together from several <em>New</em> <em>Relic</em> <em>solutions</em>. To get the most out of the health map, we recommend using the following features: Infrastructure monitoring: Create"
      },
      "id": "6044155e28ccbc6f972ea01c"
    }
  ],
  "/docs/new-relic-solutions/best-practices-guides/full-stack-observability/browser-monitoring-best-practices-guide": [
    {
      "sections": [
        "APM best practices guide",
        "Tip",
        "1. Standardize application names",
        "How to do it",
        "2. Add tags to your applications",
        "Caution",
        "3. Create and evaluate alert policies",
        "4. Identify and set up key transactions",
        "5. Track deployment history",
        "6. Review APM reports",
        "7. Review your environment with service maps",
        "8. Keep current",
        "9. Manage user access",
        "Important"
      ],
      "title": "APM best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "368a1a5688384d5bebf128604a9b8f190d335524",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide/",
      "published_at": "2021-06-08T18:52:55Z",
      "updated_at": "2021-06-08T18:52:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application Monitoring Tips You Need To Know It's one thing to know how to use APM, but it's another thing to know how to use New Relic's application performance monitoring software well. Here are some best practices designed to help you become an APM master—and a key asset to your team! Tip To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. 1. Standardize application names Most New Relic agents provide a default application name, such as \"My Application\" or \"PHP Application,\" if you don't specify one in your New Relic configuration file. You don't want to end up with 20 identically named applications, be sure to select a descriptive identifier for your apps as soon you deploy them. To keep things consistent and easy to navigate, New Relic recommends standardizing your application naming (for example, all apps in Staging append [ Staging] or the like at the end of their names). Ideally, you want your new Java applications to be named automatically to reduce the chances of typographical errors and misnaming. How to do it For Java applications, automatic application naming can come from the following sources: Request attribute Servlet init parameter Filter init parameter Web app context parameter Web app context name (display name) Web app context path Choose the method that fits best your needs and follow these steps. For non-Java applications, there are no automatic naming methods, so refer to the documentation for your APM agent. 2. Add tags to your applications When several different applications use the same account, and each application spans multiple environments (for example, development, test, pre-production, production), it can be hard to find a specific application in your overview dashboard. That's why we recommend adding tags to your apps so that you can segment them into logical groups. The two most common tags that mature APM customers use are application name and environment. So, for example, if you wanted to view the billing application in Test, you could simply filter by \"billing app\" (name tag) and \"test\" (environment tag). Caution In the APM agent configuration settings files, use the labels field to add tags to your data. For example, see this description of the Python labels setting. APM is designed so that apps can roll up into an unlimited number of meaningful tag categories. How to do it Learn about tags. Learn how to add tags.. Learn how to query tags. 3. Create and evaluate alert policies When key performance indicators spike or drop, individuals and teams in your organization need to be notified. Alerting in New Relic provides a set of tools including dynamic baselines that allow you to detect problems before they impact your end users. Alert policies can be set up in two primary ways: Static threshold alerts are great when you already know the nature of an application and its normal behaviors aren't likely to change anytime soon. Apdex score, response time, error rate, throughput are some of the static thresholds you can create alert policies on. Dynamic baseline alerts make it easy to determine and set dynamic alert thresholds for applications with varying seasonal patterns and growth trends (which make it difficult to set thresholds that define normal behavior). These alerts use baselines modeled from your application’s historical metric data. Each alert policy can contain as many conditions as you need, and each alert condition includes three components: Type of condition (metric, external service, and so on) Entities that the policy targets (for example, apps monitored by New Relic APM or New Relic Browser, hosts monitored by New Relic Infrastructure, and so on) Thresholds that escalate into alerting situations with increasing severity Once you have your alerting set up, you then want to make sure you're taking advantage of all viable notification channels. After all, what good are alerts if no one knows about them? You can manage alerts by creating specific user groups and by leveraging New Relic's integrated alert channels, including Slack, PagerDuty, webhooks, and email. Be sure to evaluate alert policies on a regular basis to ensure that they are always valid. How to do it See the detailed documentation: To set up dynamic baseline alerts and choose an application, follow standard procedures. You will see a preview of the metric with the predicted baseline You can select a metric for that application and see the corresponding baseline. Then, using the threshold sliders, you can set how closely you want your threshold to follow the baseline prediction. To set up static threshold alerts for your Apdex settings, follow standard procedures. To set up your alert notification channels, follow standard procedures. 4. Identify and set up key transactions Depending on the nature of your application, some transactions may be more important to you than others. New Relic's key transactions feature is designed to help you closely monitor what you consider to be your app's most business-critical transactions, whether that's end-user or app response time, call counts, error rates, or something else. You can also set alert threshold levels for notifications when your key transactions are performing poorly. How to do it In the menu bar, select More > Key transactions, and then select Add more. Then select the app and web transaction or, from the selected transaction, select Track as key transaction. Type a name for the key transaction, and select Track key transaction. Optional: If the agent for the selected app supports custom alerting, use the default values that New Relic automatically fills, or select Edit key alert transaction policy to set the Apdex and alert threshold values. To view the key transactions dashboard details, select View new key transaction. 5. Track deployment history When development teams are pushing new code out as frequently as possible, it can be hard to measure the impact that each deployment is having on performance. One way to stay in tune with how these changes are affecting your application is with deployment reports. These reports list recent deployments and their impact on end-users and app servers' Apdex scores, along with response times, throughput, and errors. You can also view and drill down into the details to catch errors related to recent deployments, or file a ticket and share details with your team. How to do it From the New Relic menu bar, select APM > (selected app) > Events > Deployments. To view performance after a deployment, go to the selected app's Overview dashboard in the Recent events section. A blue vertical bar on a chart indicates a deployment. To view summary information about the deployment, point to the blue bar. 6. Review APM reports From SLA, deployment, and capacity to scalability, host usage reports, and more, New Relic APM offers a variety of downloadable reporting tools surfacing historical trends—all great ways to report to senior executive teams or customers. Take a look at the full list of reports and use them to your advantage. How to do it From the New Relic APM menu bar, select Applications > (selected app) > Reports. Select the report you'd like to see. If you want to save or export a report to share, select Download this report as .csv, which will create a report with comma-separated values. 7. Review your environment with service maps Use New Relic service maps, a feature included in APM, to understand how apps and services in your architecture connect and talk to each other. Service maps are visual, customizable representations of your application architecture. Maps automatically show you your app's connections and dependencies, including databases and external services. Health indicators and performance metrics show you the current operational status for every part of your architecture. How to do it Go to one.newrelic.com > More > service maps. To get started, read the instructions in Introduction to service maps. 8. Keep current With New Relic’s SaaS platform, getting new features is as easy as updating your agent. Most likely your organization already has a set of scripts for deploying application upgrades into your environment. In a similar fashion, you can also automate your New Relic agent deployment to ensure that your systems are up to date. Both Puppet and Chef scripts are great examples of deployment frameworks that make life easier by allowing you to automate your entire deployment and management process. How to do it Regularly review which version of the agent you're using so that you know when an update is needed. If the latest agent release contains a needed fix or added functionality, download it. To deploy the agent automatically (preferred as a method to avoid errors): Use existing deployment scripts, provided they can be adapted to handle the deployment. OR Create and maintain a script that specifically deploys and configures the New Relic agent. Ideally, the script would pull the agent files from a repository where the files are versioned (for rollback purposes). Once the script has been created, shut down the application (unless script handles this). Run the deployment script. Start the application (unless script handles this). If problems arise, run the script to roll back to the previous version. To deploy the agent manually: Back up the current agent directory. Deploy the updated agent into the existing agent directory. Modify configuration files by comparing new files with existing files. In particular, make sure things like license key and custom extensions are copied over to the new configuration. Restart the application. If problems arise, restore the old agent using the backup and restart. 9. Manage user access Important This is available only for accounts on our original product-based pricing plan. Enable role-based access control (RBAC) and single sign-on (SSO) New Relic allows authorized individuals to access the broadest possible amount of data, regardless of their assigned role. As an Owner or Administrator of your New Relic account, you can control the permissions of individual users or entire roles with RBAC. To find out what is possible and how to make changes, see Users and roles. Security is no doubt of utmost concern to your organization. To simplify password management for your employees and strengthen security, you may already be using SSO with your other systems. You should do the same with New Relic. Using New Relic's SSO integration feature, account administrators will be able to enforce strong passwords and restrict login via a corporate authentication mechanism. This way, New Relic users who have already authenticated using a corporate SSO system will be able to bypass the New Relic login prompt. How to do it Log in to New Relic as an admin and go to the SSO configuration page. From the New Relic title bar, select (your account name) > Account Settings > Integrations > Single Sign On. From the SAML Single Sign On page, review your New Relic SAML Service Provider details. To upload your SAML Identity Provider certificate, select Choose File, and then follow standard procedures to select and save the file. Copy and paste in (or type) the Remove login URL that your users will use for Single Sign-On. If your organization’s SAML integration provides a redirect URL for logout, copy and paste in (or type) the Logout landing URL; otherwise leave blank. Save, test, and enable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 374.11194,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Application Monitoring Tips You Need To Know It&#x27;s one thing to know how to use APM, but it&#x27;s another thing to know how to use <em>New</em> <em>Relic</em>&#x27;s application performance monitoring software well. Here are some <em>best</em> <em>practices</em> designed to help you become an APM master—and a key asset to your team! Tip To get"
      },
      "id": "6044186564441f1f94378ecc"
    },
    {
      "sections": [
        "Synthetic monitoring best practices guide",
        "Tip",
        "1. Match your monitor type to monitoring need",
        "How to do it",
        "2. View all monitors with the Monitors index page",
        "How to view your monitors in the New Relic One:",
        "New Relic Explorer",
        "Monitors index page",
        "3. View individual monitor results",
        "How to do it:",
        "4. Understand the load-time impact of each resource",
        "5. Configure and develop a scripted browser test"
      ],
      "title": "Synthetic monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e76eb0669a1433bb9d0de70d90413e19749adf61",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/synthetic-monitoring-best-practices-guide/",
      "published_at": "2021-06-08T19:58:15Z",
      "updated_at": "2021-03-29T20:29:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's synthetic monitoring—powered by a Selenium-driven Chrome browser—allows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its full power. Tip To use synthetic monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. 1. Match your monitor type to monitoring need Synthetic monitors are virtual browsers that measure the performance of your website, recording each check in detail. They also capture aggregate numbers for load time, uptime, and average download size, as well as an overview, detailed statistics for each page resource, and downtime incidents. There are four types of synthetic monitors; the ones you deploy will depend on the things you want to monitor: Ping monitors—to ensure that your site is accessible. Simple browser monitors—to ensure end-user performance. Scripted browsers—to ensure that particular resources are present. API monitors—to ensure that your app server works as well as your website. How to do it To add a monitor, go to one.newrelic.com > Synthetics (or one.eu.newrelic.com if you have an EU-based account) and click Create monitor. Specify monitor type, name, and URL. Optional: Add a validation string (available for ping and simple browser) or advanced options, which enable substring monitoring for the following types of response validation: Verify SSL (for Ping and Simple Browser). This option verifies the validity of the SSL certificate chain. It can be duplicated by running the following syntax: openssl s_client -servername {YOUR_HOSTNAME} -connect {YOUR_HOSTNAME}:443 -CApath /etc/ssl/certs > /dev/null Copy Bypass HEAD request (for Ping). This option skips the default HEAD request and instead uses the GET verb with a ping check. Redirect is Failure (for Ping). If a redirect result occurs when Redirect is Failure is enabled, Synthetics categorizes it as a failure (rather than following the redirect and checking the resulting URL). Select the locations where you want your monitor to run. Choose a frequency to determine how often each location will run your monitor. Optional: Set up alert notifications. Select Create my monitor to confirm. Wait a few minutes; then from the Monitors index check your monitor. 2. View all monitors with the Monitors index page Continuous application performance monitoring is essential to ensure that web services are in place, working correctly, and error-free. Synthetic monitoring provides this type of assurance by performing automated tests on your web application for each selected location—noting downtime instances (“violations”) and collecting aggregate numbers, results, and detailed statistics for each page resource. Use the Monitors index page to get a high level view of this information, or select an individual monitor to view the Summary, for ping monitors, or Overview, for simple and scripted monitors, page and get a deeper insight into its performance over time. How to view your monitors in the New Relic One: New Relic Explorer To view a list of monitors using the New Relic One Monitors index page: Go to one.newrelic.com > Explorer > Synthetic monitors. For more information, see the documentation about navigating core UI components in New Relic One. Monitors index page To view a list of monitors using the Monitors index page: Go to one.newrelic.com > Synthetics. 3. View individual monitor results It’s not enough to understand how your web apps are performing for your West Coast customers; you need to be able to view how they’re performing across the country and around the globe. By taking advantage of synthetic monitors and visiting your Results page, you can see how everything from development to production affects user experience. You can locate interesting results by sorting the list to identify slow, fast, or other unusual results. Or filter by location to understand how monitor performance varies with geography. (The “Network timings” graph below provides a snapshot of webpage performance over a given period.) How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors tab, select your monitor. Select Monitor > Results. Gain an up-to-the-minute view of the slowest page loads for every monitored location. 4. Understand the load-time impact of each resource Visit the synthetics Resources page to see how each resource on your website—including CSS, JavaScript, images, HTML and more—is affecting your overall load. You can drill into detailed metrics collected at run time, locate performance information for time spent by third-party resources, and identify HTTP response codes for each resource. How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors drop-down menu, select your monitor. Select Monitor > Resources. 5. Configure and develop a scripted browser test Using scripted browsers, you can build complex monitoring workflows using the Selenium JavaScript Webdriver bindings. For instance, you can log in to the application, navigate to a particular link, and wait for a page element to load and add an assertion. How to do it: Go to one.newrelic.com > Synthetics. Choose your monitor type (for example, Scripted Browser). Enter the name and details of your monitor (for example, Sitename.com Scripted Browser) Select the locations from which you want your monitor to run (for example, Mumbai, Seoul, Columbus, and Montreal). Choose a frequency to determine how often each location will run your monitor (for example, five minutes). Set a notification method to alert your team when performance violations occur. You are now ready to write your script. (Below is an example of a script used to test the performance of a main navigation page.) var assert = require('chai').assert; // script-wide timeout for all wait and waitandfind functions (in ms) var default_element_timeout = 190000; //3 mins var default_pageload_timeout = 240000; //4 mins var navlinks = [\"css-locator-1\",\"css-locator-2\"]; //sets element load timeout to 3 mins $browser.manage().timeouts().implicitlyWait(default_element_timeout); //sets page load timoeout to 4 mins $browser.manage().timeouts().pageloadTimeout(default_pageload_timeout); //test all the main nav page performances $browser.get(\"http://www.sitename.com\").then(function(){ return $browser.findelement($driver.by.classname(\"site-theme-example\")); }).then(function(){ //verifies the nav list has loaded return $browser.findelement($driver.by.classname(\"site-nav-list-example\")); }).then(function(){ //loops through the navlinks array navlinks.foreach(function(val, i, arr){ //finds and navigates to each navlink page return $browser.findelement($driver.by.classname(navlinks[i])).click().then(function(){ //verifies that the nav list loaded before moving on return $browser.findelement($driver.by.classname(\"site-nav-list-example\")).then(function(){ //verifies that the page logo footer at bottom of page has loaded return $browser.findelement($driver.by.classname(\"site-footer-logo\")); }) }) }) }); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 225.70113,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s synthetic monitoring—powered by a Selenium-driven Chrome browser—allows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its <em>full</em> power. Tip To use synthetic monitoring and the rest of our"
      },
      "id": "603e84bb28ccbce555eba771"
    },
    {
      "sections": [
        "Infrastructure monitoring best practices guide",
        "1. Install the infrastructure agent across your entire environment",
        "How to do it",
        "Tip",
        "2. Configure the native EC2 integration",
        "3. Activate the integrations",
        "4. Create filter sets",
        "5. Create alert conditions",
        "6. View infrastructure data alongside APM data",
        "7. Access Infrastructure data using the Data explorer",
        "8. Update your agents regularly",
        "Want more user tips?"
      ],
      "title": "Infrastructure monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "931ea7767d73381ca0cb3502ec14f88d66ce5eaf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/infrastructure-monitoring-best-practices-guide/",
      "published_at": "2021-06-09T00:10:58Z",
      "updated_at": "2021-03-13T07:39:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Want even longer periods of uninterrupted sleep? Here are eight best practices to make dynamic infrastructure and server monitoring even easier with New Relic's infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution was designed to help enterprise customers monitor their large and dynamically changing environments at scale. In order to facilitate this, the UI is completely driven by tags that let you visualize aggregated metrics, events, and inventory for a large number of servers. To really get the most out of infrastructure monitoring, we recommend installing it across your entire environment, preferably even across multiple regions and clusters. This will provide a more accurate picture of the health of your host ecosystem and the impact your infrastructure has on your applications. Want to achieve faster Mean Time To Resolution (MTTR)? Install the infrastructure agent on database servers, web servers, and any other host that supports your applications. When deploying the agent, leverage custom attributes to tag your hosts so that you can use those for filtering the data presented in the UI and for setting alerts. This is in addition to any Amazon EC2 tags you may be using which will auto-import when you enable the EC2 integration. You may also prefer to keep the agent logs separate from the system logs, which you can do through the configuration. How to do it Leverage our install modules for config management tools such as Chef, Puppet and Ansible to easily deploy your agent across all your infrastructure. Read the instructions in the github repo for your config management tool referenced in the link above and define the custom_attributes you want to use to tag your hosts. Set the log_file attribute to your preferred location for the infrastructure agent logs. Tip If you are installing the agent on a single host, the process should only take a few minutes and you can find detailed instructions in our documentation. 2. Configure the native EC2 integration If you have an AWS environment, in addition to installing the infrastructure agent on your EC2 instances to monitor them, we also recommend configuring the EC2 integration so that New Relic can automatically import all the tags and metadata associated with your AWS instances. This allows you to filter down to a part of your infrastructure using the same AWS tags (example, ECTag_Role='Kafka'), and slice-and-dice your data in multiple ways. Additionally, our ‘Alerts’ and ‘Saved Filter Sets’ are completely tag-driven and dynamic, so they automatically add/remove instances matching these tags to give our users the most real-time views that scale with your cloud infrastructure. 3. Activate the integrations Monitoring your infrastructure extends beyond just CPU, memory, and storage utilization. That’s why New Relic has out-of-the-box integrations that allow you to monitor all the services that support your hosts as well. Activate any of our integrations, including AWS Billing, AWS ELB, Amazon S3, MySQL, NGINX, and more, to extend monitoring to your AWS or on-host applications, and access the pre-configured dashboards that appear for each of them. 4. Create filter sets With New Relic, users can create filter sets to organize hosts, cluster roles, and other resources based on criteria that matter the most to users. This allows you to optimize your resources by using a focused view to monitor, detect, and resolve any problems proactively. The attributes for filtering are populated from the auto-imported EC2 tags or custom tags that may be applied to hosts. You can combine as many filters as you want in a filter set, and save them to share with other people in your account. You’ll also be able to see the color-coded health status of each host inside the filter set, so you can quickly identify problematic areas of your infrastructure. Additionally, filter sets can be used in the health map to get an overview of your infrastructure performance at a glance based on the filters that matter to your teams. 5. Create alert conditions With New Relic, you can create alert conditions directly within the context of what you are currently monitoring with New Relic. For example, if you are viewing a filter set comprised of a large number of hosts and notice a problem, you don’t need to create an individual alert condition for every host within. Instead, we recommend initiating the alert condition directly from the chart of the metric you are viewing and creating it based on the filter tags. This will create an alert condition for any hosts that match those tags, allowing our infrastructure monitoring to automatically remove hosts that go offline and add new hosts to the alert condition if they match those tags. Alerts configured once for the appropriate tags will scale correctly across all future hosts. And know that you can also leverage existing alert policies for infrastructure alert conditions. 6. View infrastructure data alongside APM data The integration between New Relic APM and infrastructure monitoring lets you see your APM data and infrastructure data side by side, so you can find the root cause of problems more quickly, no matter where they originate. This allows users to view the performance relationship of your hosts and the applications running on them, allowing for quicker diagnosis of the issue and impact on the business’ health. Use health maps to quickly spot any issues or alerts related to the health of your applications and how that connects to the supporting infrastructure. The first boxes starting from the top left are those that require your attention. 7. Access Infrastructure data using the Data explorer Teams that use multiple New Relic capabilities find it useful to create a single dashboard to visually correlate the infrastructure’s health with application, browser and synthetics metrics. That’s where New Relic data exploration features comes in. All the granular metrics and events collected by infrastructure monitoring are stored in New Relic and are accessible to you immediately. Having access to the raw metrics means you can run more custom queries using NRQL, and also create dashboards to share infrastructure metrics with your team. 8. Update your agents regularly New Relic’s software engineering team is constantly pushing out improvements and new features to improve our customers’ overall monitoring experience. In order to take advantage of all the awesomeness they’re delivering, we recommend regularly updating to the latest version of the infrastructure agent. Want more user tips? View training videos at New Relic University. Read the documentation. Check out our Tutorials. Ask a question in the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.361,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Want even longer periods of uninterrupted sleep? Here are eight <em>best</em> <em>practices</em> to make dynamic infrastructure and server monitoring even easier with <em>New</em> <em>Relic</em>&#x27;s infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution"
      },
      "id": "6044151c28ccbc4b4f2c60af"
    }
  ],
  "/docs/new-relic-solutions/best-practices-guides/full-stack-observability/browser-monitoring-best-practices-java": [
    {
      "sections": [
        "APM best practices guide",
        "Tip",
        "1. Standardize application names",
        "How to do it",
        "2. Add tags to your applications",
        "Caution",
        "3. Create and evaluate alert policies",
        "4. Identify and set up key transactions",
        "5. Track deployment history",
        "6. Review APM reports",
        "7. Review your environment with service maps",
        "8. Keep current",
        "9. Manage user access",
        "Important"
      ],
      "title": "APM best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "368a1a5688384d5bebf128604a9b8f190d335524",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide/",
      "published_at": "2021-06-08T18:52:55Z",
      "updated_at": "2021-06-08T18:52:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application Monitoring Tips You Need To Know It's one thing to know how to use APM, but it's another thing to know how to use New Relic's application performance monitoring software well. Here are some best practices designed to help you become an APM master—and a key asset to your team! Tip To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. 1. Standardize application names Most New Relic agents provide a default application name, such as \"My Application\" or \"PHP Application,\" if you don't specify one in your New Relic configuration file. You don't want to end up with 20 identically named applications, be sure to select a descriptive identifier for your apps as soon you deploy them. To keep things consistent and easy to navigate, New Relic recommends standardizing your application naming (for example, all apps in Staging append [ Staging] or the like at the end of their names). Ideally, you want your new Java applications to be named automatically to reduce the chances of typographical errors and misnaming. How to do it For Java applications, automatic application naming can come from the following sources: Request attribute Servlet init parameter Filter init parameter Web app context parameter Web app context name (display name) Web app context path Choose the method that fits best your needs and follow these steps. For non-Java applications, there are no automatic naming methods, so refer to the documentation for your APM agent. 2. Add tags to your applications When several different applications use the same account, and each application spans multiple environments (for example, development, test, pre-production, production), it can be hard to find a specific application in your overview dashboard. That's why we recommend adding tags to your apps so that you can segment them into logical groups. The two most common tags that mature APM customers use are application name and environment. So, for example, if you wanted to view the billing application in Test, you could simply filter by \"billing app\" (name tag) and \"test\" (environment tag). Caution In the APM agent configuration settings files, use the labels field to add tags to your data. For example, see this description of the Python labels setting. APM is designed so that apps can roll up into an unlimited number of meaningful tag categories. How to do it Learn about tags. Learn how to add tags.. Learn how to query tags. 3. Create and evaluate alert policies When key performance indicators spike or drop, individuals and teams in your organization need to be notified. Alerting in New Relic provides a set of tools including dynamic baselines that allow you to detect problems before they impact your end users. Alert policies can be set up in two primary ways: Static threshold alerts are great when you already know the nature of an application and its normal behaviors aren't likely to change anytime soon. Apdex score, response time, error rate, throughput are some of the static thresholds you can create alert policies on. Dynamic baseline alerts make it easy to determine and set dynamic alert thresholds for applications with varying seasonal patterns and growth trends (which make it difficult to set thresholds that define normal behavior). These alerts use baselines modeled from your application’s historical metric data. Each alert policy can contain as many conditions as you need, and each alert condition includes three components: Type of condition (metric, external service, and so on) Entities that the policy targets (for example, apps monitored by New Relic APM or New Relic Browser, hosts monitored by New Relic Infrastructure, and so on) Thresholds that escalate into alerting situations with increasing severity Once you have your alerting set up, you then want to make sure you're taking advantage of all viable notification channels. After all, what good are alerts if no one knows about them? You can manage alerts by creating specific user groups and by leveraging New Relic's integrated alert channels, including Slack, PagerDuty, webhooks, and email. Be sure to evaluate alert policies on a regular basis to ensure that they are always valid. How to do it See the detailed documentation: To set up dynamic baseline alerts and choose an application, follow standard procedures. You will see a preview of the metric with the predicted baseline You can select a metric for that application and see the corresponding baseline. Then, using the threshold sliders, you can set how closely you want your threshold to follow the baseline prediction. To set up static threshold alerts for your Apdex settings, follow standard procedures. To set up your alert notification channels, follow standard procedures. 4. Identify and set up key transactions Depending on the nature of your application, some transactions may be more important to you than others. New Relic's key transactions feature is designed to help you closely monitor what you consider to be your app's most business-critical transactions, whether that's end-user or app response time, call counts, error rates, or something else. You can also set alert threshold levels for notifications when your key transactions are performing poorly. How to do it In the menu bar, select More > Key transactions, and then select Add more. Then select the app and web transaction or, from the selected transaction, select Track as key transaction. Type a name for the key transaction, and select Track key transaction. Optional: If the agent for the selected app supports custom alerting, use the default values that New Relic automatically fills, or select Edit key alert transaction policy to set the Apdex and alert threshold values. To view the key transactions dashboard details, select View new key transaction. 5. Track deployment history When development teams are pushing new code out as frequently as possible, it can be hard to measure the impact that each deployment is having on performance. One way to stay in tune with how these changes are affecting your application is with deployment reports. These reports list recent deployments and their impact on end-users and app servers' Apdex scores, along with response times, throughput, and errors. You can also view and drill down into the details to catch errors related to recent deployments, or file a ticket and share details with your team. How to do it From the New Relic menu bar, select APM > (selected app) > Events > Deployments. To view performance after a deployment, go to the selected app's Overview dashboard in the Recent events section. A blue vertical bar on a chart indicates a deployment. To view summary information about the deployment, point to the blue bar. 6. Review APM reports From SLA, deployment, and capacity to scalability, host usage reports, and more, New Relic APM offers a variety of downloadable reporting tools surfacing historical trends—all great ways to report to senior executive teams or customers. Take a look at the full list of reports and use them to your advantage. How to do it From the New Relic APM menu bar, select Applications > (selected app) > Reports. Select the report you'd like to see. If you want to save or export a report to share, select Download this report as .csv, which will create a report with comma-separated values. 7. Review your environment with service maps Use New Relic service maps, a feature included in APM, to understand how apps and services in your architecture connect and talk to each other. Service maps are visual, customizable representations of your application architecture. Maps automatically show you your app's connections and dependencies, including databases and external services. Health indicators and performance metrics show you the current operational status for every part of your architecture. How to do it Go to one.newrelic.com > More > service maps. To get started, read the instructions in Introduction to service maps. 8. Keep current With New Relic’s SaaS platform, getting new features is as easy as updating your agent. Most likely your organization already has a set of scripts for deploying application upgrades into your environment. In a similar fashion, you can also automate your New Relic agent deployment to ensure that your systems are up to date. Both Puppet and Chef scripts are great examples of deployment frameworks that make life easier by allowing you to automate your entire deployment and management process. How to do it Regularly review which version of the agent you're using so that you know when an update is needed. If the latest agent release contains a needed fix or added functionality, download it. To deploy the agent automatically (preferred as a method to avoid errors): Use existing deployment scripts, provided they can be adapted to handle the deployment. OR Create and maintain a script that specifically deploys and configures the New Relic agent. Ideally, the script would pull the agent files from a repository where the files are versioned (for rollback purposes). Once the script has been created, shut down the application (unless script handles this). Run the deployment script. Start the application (unless script handles this). If problems arise, run the script to roll back to the previous version. To deploy the agent manually: Back up the current agent directory. Deploy the updated agent into the existing agent directory. Modify configuration files by comparing new files with existing files. In particular, make sure things like license key and custom extensions are copied over to the new configuration. Restart the application. If problems arise, restore the old agent using the backup and restart. 9. Manage user access Important This is available only for accounts on our original product-based pricing plan. Enable role-based access control (RBAC) and single sign-on (SSO) New Relic allows authorized individuals to access the broadest possible amount of data, regardless of their assigned role. As an Owner or Administrator of your New Relic account, you can control the permissions of individual users or entire roles with RBAC. To find out what is possible and how to make changes, see Users and roles. Security is no doubt of utmost concern to your organization. To simplify password management for your employees and strengthen security, you may already be using SSO with your other systems. You should do the same with New Relic. Using New Relic's SSO integration feature, account administrators will be able to enforce strong passwords and restrict login via a corporate authentication mechanism. This way, New Relic users who have already authenticated using a corporate SSO system will be able to bypass the New Relic login prompt. How to do it Log in to New Relic as an admin and go to the SSO configuration page. From the New Relic title bar, select (your account name) > Account Settings > Integrations > Single Sign On. From the SAML Single Sign On page, review your New Relic SAML Service Provider details. To upload your SAML Identity Provider certificate, select Choose File, and then follow standard procedures to select and save the file. Copy and paste in (or type) the Remove login URL that your users will use for Single Sign-On. If your organization’s SAML integration provides a redirect URL for logout, copy and paste in (or type) the Logout landing URL; otherwise leave blank. Save, test, and enable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 374.11194,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Application Monitoring Tips You Need To Know It&#x27;s one thing to know how to use APM, but it&#x27;s another thing to know how to use <em>New</em> <em>Relic</em>&#x27;s application performance monitoring software well. Here are some <em>best</em> <em>practices</em> designed to help you become an APM master—and a key asset to your team! Tip To get"
      },
      "id": "6044186564441f1f94378ecc"
    },
    {
      "sections": [
        "Synthetic monitoring best practices guide",
        "Tip",
        "1. Match your monitor type to monitoring need",
        "How to do it",
        "2. View all monitors with the Monitors index page",
        "How to view your monitors in the New Relic One:",
        "New Relic Explorer",
        "Monitors index page",
        "3. View individual monitor results",
        "How to do it:",
        "4. Understand the load-time impact of each resource",
        "5. Configure and develop a scripted browser test"
      ],
      "title": "Synthetic monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e76eb0669a1433bb9d0de70d90413e19749adf61",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/synthetic-monitoring-best-practices-guide/",
      "published_at": "2021-06-08T19:58:15Z",
      "updated_at": "2021-03-29T20:29:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's synthetic monitoring—powered by a Selenium-driven Chrome browser—allows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its full power. Tip To use synthetic monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. 1. Match your monitor type to monitoring need Synthetic monitors are virtual browsers that measure the performance of your website, recording each check in detail. They also capture aggregate numbers for load time, uptime, and average download size, as well as an overview, detailed statistics for each page resource, and downtime incidents. There are four types of synthetic monitors; the ones you deploy will depend on the things you want to monitor: Ping monitors—to ensure that your site is accessible. Simple browser monitors—to ensure end-user performance. Scripted browsers—to ensure that particular resources are present. API monitors—to ensure that your app server works as well as your website. How to do it To add a monitor, go to one.newrelic.com > Synthetics (or one.eu.newrelic.com if you have an EU-based account) and click Create monitor. Specify monitor type, name, and URL. Optional: Add a validation string (available for ping and simple browser) or advanced options, which enable substring monitoring for the following types of response validation: Verify SSL (for Ping and Simple Browser). This option verifies the validity of the SSL certificate chain. It can be duplicated by running the following syntax: openssl s_client -servername {YOUR_HOSTNAME} -connect {YOUR_HOSTNAME}:443 -CApath /etc/ssl/certs > /dev/null Copy Bypass HEAD request (for Ping). This option skips the default HEAD request and instead uses the GET verb with a ping check. Redirect is Failure (for Ping). If a redirect result occurs when Redirect is Failure is enabled, Synthetics categorizes it as a failure (rather than following the redirect and checking the resulting URL). Select the locations where you want your monitor to run. Choose a frequency to determine how often each location will run your monitor. Optional: Set up alert notifications. Select Create my monitor to confirm. Wait a few minutes; then from the Monitors index check your monitor. 2. View all monitors with the Monitors index page Continuous application performance monitoring is essential to ensure that web services are in place, working correctly, and error-free. Synthetic monitoring provides this type of assurance by performing automated tests on your web application for each selected location—noting downtime instances (“violations”) and collecting aggregate numbers, results, and detailed statistics for each page resource. Use the Monitors index page to get a high level view of this information, or select an individual monitor to view the Summary, for ping monitors, or Overview, for simple and scripted monitors, page and get a deeper insight into its performance over time. How to view your monitors in the New Relic One: New Relic Explorer To view a list of monitors using the New Relic One Monitors index page: Go to one.newrelic.com > Explorer > Synthetic monitors. For more information, see the documentation about navigating core UI components in New Relic One. Monitors index page To view a list of monitors using the Monitors index page: Go to one.newrelic.com > Synthetics. 3. View individual monitor results It’s not enough to understand how your web apps are performing for your West Coast customers; you need to be able to view how they’re performing across the country and around the globe. By taking advantage of synthetic monitors and visiting your Results page, you can see how everything from development to production affects user experience. You can locate interesting results by sorting the list to identify slow, fast, or other unusual results. Or filter by location to understand how monitor performance varies with geography. (The “Network timings” graph below provides a snapshot of webpage performance over a given period.) How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors tab, select your monitor. Select Monitor > Results. Gain an up-to-the-minute view of the slowest page loads for every monitored location. 4. Understand the load-time impact of each resource Visit the synthetics Resources page to see how each resource on your website—including CSS, JavaScript, images, HTML and more—is affecting your overall load. You can drill into detailed metrics collected at run time, locate performance information for time spent by third-party resources, and identify HTTP response codes for each resource. How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors drop-down menu, select your monitor. Select Monitor > Resources. 5. Configure and develop a scripted browser test Using scripted browsers, you can build complex monitoring workflows using the Selenium JavaScript Webdriver bindings. For instance, you can log in to the application, navigate to a particular link, and wait for a page element to load and add an assertion. How to do it: Go to one.newrelic.com > Synthetics. Choose your monitor type (for example, Scripted Browser). Enter the name and details of your monitor (for example, Sitename.com Scripted Browser) Select the locations from which you want your monitor to run (for example, Mumbai, Seoul, Columbus, and Montreal). Choose a frequency to determine how often each location will run your monitor (for example, five minutes). Set a notification method to alert your team when performance violations occur. You are now ready to write your script. (Below is an example of a script used to test the performance of a main navigation page.) var assert = require('chai').assert; // script-wide timeout for all wait and waitandfind functions (in ms) var default_element_timeout = 190000; //3 mins var default_pageload_timeout = 240000; //4 mins var navlinks = [\"css-locator-1\",\"css-locator-2\"]; //sets element load timeout to 3 mins $browser.manage().timeouts().implicitlyWait(default_element_timeout); //sets page load timoeout to 4 mins $browser.manage().timeouts().pageloadTimeout(default_pageload_timeout); //test all the main nav page performances $browser.get(\"http://www.sitename.com\").then(function(){ return $browser.findelement($driver.by.classname(\"site-theme-example\")); }).then(function(){ //verifies the nav list has loaded return $browser.findelement($driver.by.classname(\"site-nav-list-example\")); }).then(function(){ //loops through the navlinks array navlinks.foreach(function(val, i, arr){ //finds and navigates to each navlink page return $browser.findelement($driver.by.classname(navlinks[i])).click().then(function(){ //verifies that the nav list loaded before moving on return $browser.findelement($driver.by.classname(\"site-nav-list-example\")).then(function(){ //verifies that the page logo footer at bottom of page has loaded return $browser.findelement($driver.by.classname(\"site-footer-logo\")); }) }) }) }); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 225.70113,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s synthetic monitoring—powered by a Selenium-driven Chrome browser—allows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its <em>full</em> power. Tip To use synthetic monitoring and the rest of our"
      },
      "id": "603e84bb28ccbce555eba771"
    },
    {
      "sections": [
        "Infrastructure monitoring best practices guide",
        "1. Install the infrastructure agent across your entire environment",
        "How to do it",
        "Tip",
        "2. Configure the native EC2 integration",
        "3. Activate the integrations",
        "4. Create filter sets",
        "5. Create alert conditions",
        "6. View infrastructure data alongside APM data",
        "7. Access Infrastructure data using the Data explorer",
        "8. Update your agents regularly",
        "Want more user tips?"
      ],
      "title": "Infrastructure monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "931ea7767d73381ca0cb3502ec14f88d66ce5eaf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/infrastructure-monitoring-best-practices-guide/",
      "published_at": "2021-06-09T00:10:58Z",
      "updated_at": "2021-03-13T07:39:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Want even longer periods of uninterrupted sleep? Here are eight best practices to make dynamic infrastructure and server monitoring even easier with New Relic's infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution was designed to help enterprise customers monitor their large and dynamically changing environments at scale. In order to facilitate this, the UI is completely driven by tags that let you visualize aggregated metrics, events, and inventory for a large number of servers. To really get the most out of infrastructure monitoring, we recommend installing it across your entire environment, preferably even across multiple regions and clusters. This will provide a more accurate picture of the health of your host ecosystem and the impact your infrastructure has on your applications. Want to achieve faster Mean Time To Resolution (MTTR)? Install the infrastructure agent on database servers, web servers, and any other host that supports your applications. When deploying the agent, leverage custom attributes to tag your hosts so that you can use those for filtering the data presented in the UI and for setting alerts. This is in addition to any Amazon EC2 tags you may be using which will auto-import when you enable the EC2 integration. You may also prefer to keep the agent logs separate from the system logs, which you can do through the configuration. How to do it Leverage our install modules for config management tools such as Chef, Puppet and Ansible to easily deploy your agent across all your infrastructure. Read the instructions in the github repo for your config management tool referenced in the link above and define the custom_attributes you want to use to tag your hosts. Set the log_file attribute to your preferred location for the infrastructure agent logs. Tip If you are installing the agent on a single host, the process should only take a few minutes and you can find detailed instructions in our documentation. 2. Configure the native EC2 integration If you have an AWS environment, in addition to installing the infrastructure agent on your EC2 instances to monitor them, we also recommend configuring the EC2 integration so that New Relic can automatically import all the tags and metadata associated with your AWS instances. This allows you to filter down to a part of your infrastructure using the same AWS tags (example, ECTag_Role='Kafka'), and slice-and-dice your data in multiple ways. Additionally, our ‘Alerts’ and ‘Saved Filter Sets’ are completely tag-driven and dynamic, so they automatically add/remove instances matching these tags to give our users the most real-time views that scale with your cloud infrastructure. 3. Activate the integrations Monitoring your infrastructure extends beyond just CPU, memory, and storage utilization. That’s why New Relic has out-of-the-box integrations that allow you to monitor all the services that support your hosts as well. Activate any of our integrations, including AWS Billing, AWS ELB, Amazon S3, MySQL, NGINX, and more, to extend monitoring to your AWS or on-host applications, and access the pre-configured dashboards that appear for each of them. 4. Create filter sets With New Relic, users can create filter sets to organize hosts, cluster roles, and other resources based on criteria that matter the most to users. This allows you to optimize your resources by using a focused view to monitor, detect, and resolve any problems proactively. The attributes for filtering are populated from the auto-imported EC2 tags or custom tags that may be applied to hosts. You can combine as many filters as you want in a filter set, and save them to share with other people in your account. You’ll also be able to see the color-coded health status of each host inside the filter set, so you can quickly identify problematic areas of your infrastructure. Additionally, filter sets can be used in the health map to get an overview of your infrastructure performance at a glance based on the filters that matter to your teams. 5. Create alert conditions With New Relic, you can create alert conditions directly within the context of what you are currently monitoring with New Relic. For example, if you are viewing a filter set comprised of a large number of hosts and notice a problem, you don’t need to create an individual alert condition for every host within. Instead, we recommend initiating the alert condition directly from the chart of the metric you are viewing and creating it based on the filter tags. This will create an alert condition for any hosts that match those tags, allowing our infrastructure monitoring to automatically remove hosts that go offline and add new hosts to the alert condition if they match those tags. Alerts configured once for the appropriate tags will scale correctly across all future hosts. And know that you can also leverage existing alert policies for infrastructure alert conditions. 6. View infrastructure data alongside APM data The integration between New Relic APM and infrastructure monitoring lets you see your APM data and infrastructure data side by side, so you can find the root cause of problems more quickly, no matter where they originate. This allows users to view the performance relationship of your hosts and the applications running on them, allowing for quicker diagnosis of the issue and impact on the business’ health. Use health maps to quickly spot any issues or alerts related to the health of your applications and how that connects to the supporting infrastructure. The first boxes starting from the top left are those that require your attention. 7. Access Infrastructure data using the Data explorer Teams that use multiple New Relic capabilities find it useful to create a single dashboard to visually correlate the infrastructure’s health with application, browser and synthetics metrics. That’s where New Relic data exploration features comes in. All the granular metrics and events collected by infrastructure monitoring are stored in New Relic and are accessible to you immediately. Having access to the raw metrics means you can run more custom queries using NRQL, and also create dashboards to share infrastructure metrics with your team. 8. Update your agents regularly New Relic’s software engineering team is constantly pushing out improvements and new features to improve our customers’ overall monitoring experience. In order to take advantage of all the awesomeness they’re delivering, we recommend regularly updating to the latest version of the infrastructure agent. Want more user tips? View training videos at New Relic University. Read the documentation. Check out our Tutorials. Ask a question in the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.361,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Want even longer periods of uninterrupted sleep? Here are eight <em>best</em> <em>practices</em> to make dynamic infrastructure and server monitoring even easier with <em>New</em> <em>Relic</em>&#x27;s infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution"
      },
      "id": "6044151c28ccbc4b4f2c60af"
    }
  ],
  "/docs/new-relic-solutions/best-practices-guides/full-stack-observability/infrastructure-monitoring-best-practices-guide": [
    {
      "sections": [
        "APM best practices guide",
        "Tip",
        "1. Standardize application names",
        "How to do it",
        "2. Add tags to your applications",
        "Caution",
        "3. Create and evaluate alert policies",
        "4. Identify and set up key transactions",
        "5. Track deployment history",
        "6. Review APM reports",
        "7. Review your environment with service maps",
        "8. Keep current",
        "9. Manage user access",
        "Important"
      ],
      "title": "APM best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "368a1a5688384d5bebf128604a9b8f190d335524",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide/",
      "published_at": "2021-06-08T18:52:55Z",
      "updated_at": "2021-06-08T18:52:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application Monitoring Tips You Need To Know It's one thing to know how to use APM, but it's another thing to know how to use New Relic's application performance monitoring software well. Here are some best practices designed to help you become an APM master—and a key asset to your team! Tip To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. 1. Standardize application names Most New Relic agents provide a default application name, such as \"My Application\" or \"PHP Application,\" if you don't specify one in your New Relic configuration file. You don't want to end up with 20 identically named applications, be sure to select a descriptive identifier for your apps as soon you deploy them. To keep things consistent and easy to navigate, New Relic recommends standardizing your application naming (for example, all apps in Staging append [ Staging] or the like at the end of their names). Ideally, you want your new Java applications to be named automatically to reduce the chances of typographical errors and misnaming. How to do it For Java applications, automatic application naming can come from the following sources: Request attribute Servlet init parameter Filter init parameter Web app context parameter Web app context name (display name) Web app context path Choose the method that fits best your needs and follow these steps. For non-Java applications, there are no automatic naming methods, so refer to the documentation for your APM agent. 2. Add tags to your applications When several different applications use the same account, and each application spans multiple environments (for example, development, test, pre-production, production), it can be hard to find a specific application in your overview dashboard. That's why we recommend adding tags to your apps so that you can segment them into logical groups. The two most common tags that mature APM customers use are application name and environment. So, for example, if you wanted to view the billing application in Test, you could simply filter by \"billing app\" (name tag) and \"test\" (environment tag). Caution In the APM agent configuration settings files, use the labels field to add tags to your data. For example, see this description of the Python labels setting. APM is designed so that apps can roll up into an unlimited number of meaningful tag categories. How to do it Learn about tags. Learn how to add tags.. Learn how to query tags. 3. Create and evaluate alert policies When key performance indicators spike or drop, individuals and teams in your organization need to be notified. Alerting in New Relic provides a set of tools including dynamic baselines that allow you to detect problems before they impact your end users. Alert policies can be set up in two primary ways: Static threshold alerts are great when you already know the nature of an application and its normal behaviors aren't likely to change anytime soon. Apdex score, response time, error rate, throughput are some of the static thresholds you can create alert policies on. Dynamic baseline alerts make it easy to determine and set dynamic alert thresholds for applications with varying seasonal patterns and growth trends (which make it difficult to set thresholds that define normal behavior). These alerts use baselines modeled from your application’s historical metric data. Each alert policy can contain as many conditions as you need, and each alert condition includes three components: Type of condition (metric, external service, and so on) Entities that the policy targets (for example, apps monitored by New Relic APM or New Relic Browser, hosts monitored by New Relic Infrastructure, and so on) Thresholds that escalate into alerting situations with increasing severity Once you have your alerting set up, you then want to make sure you're taking advantage of all viable notification channels. After all, what good are alerts if no one knows about them? You can manage alerts by creating specific user groups and by leveraging New Relic's integrated alert channels, including Slack, PagerDuty, webhooks, and email. Be sure to evaluate alert policies on a regular basis to ensure that they are always valid. How to do it See the detailed documentation: To set up dynamic baseline alerts and choose an application, follow standard procedures. You will see a preview of the metric with the predicted baseline You can select a metric for that application and see the corresponding baseline. Then, using the threshold sliders, you can set how closely you want your threshold to follow the baseline prediction. To set up static threshold alerts for your Apdex settings, follow standard procedures. To set up your alert notification channels, follow standard procedures. 4. Identify and set up key transactions Depending on the nature of your application, some transactions may be more important to you than others. New Relic's key transactions feature is designed to help you closely monitor what you consider to be your app's most business-critical transactions, whether that's end-user or app response time, call counts, error rates, or something else. You can also set alert threshold levels for notifications when your key transactions are performing poorly. How to do it In the menu bar, select More > Key transactions, and then select Add more. Then select the app and web transaction or, from the selected transaction, select Track as key transaction. Type a name for the key transaction, and select Track key transaction. Optional: If the agent for the selected app supports custom alerting, use the default values that New Relic automatically fills, or select Edit key alert transaction policy to set the Apdex and alert threshold values. To view the key transactions dashboard details, select View new key transaction. 5. Track deployment history When development teams are pushing new code out as frequently as possible, it can be hard to measure the impact that each deployment is having on performance. One way to stay in tune with how these changes are affecting your application is with deployment reports. These reports list recent deployments and their impact on end-users and app servers' Apdex scores, along with response times, throughput, and errors. You can also view and drill down into the details to catch errors related to recent deployments, or file a ticket and share details with your team. How to do it From the New Relic menu bar, select APM > (selected app) > Events > Deployments. To view performance after a deployment, go to the selected app's Overview dashboard in the Recent events section. A blue vertical bar on a chart indicates a deployment. To view summary information about the deployment, point to the blue bar. 6. Review APM reports From SLA, deployment, and capacity to scalability, host usage reports, and more, New Relic APM offers a variety of downloadable reporting tools surfacing historical trends—all great ways to report to senior executive teams or customers. Take a look at the full list of reports and use them to your advantage. How to do it From the New Relic APM menu bar, select Applications > (selected app) > Reports. Select the report you'd like to see. If you want to save or export a report to share, select Download this report as .csv, which will create a report with comma-separated values. 7. Review your environment with service maps Use New Relic service maps, a feature included in APM, to understand how apps and services in your architecture connect and talk to each other. Service maps are visual, customizable representations of your application architecture. Maps automatically show you your app's connections and dependencies, including databases and external services. Health indicators and performance metrics show you the current operational status for every part of your architecture. How to do it Go to one.newrelic.com > More > service maps. To get started, read the instructions in Introduction to service maps. 8. Keep current With New Relic’s SaaS platform, getting new features is as easy as updating your agent. Most likely your organization already has a set of scripts for deploying application upgrades into your environment. In a similar fashion, you can also automate your New Relic agent deployment to ensure that your systems are up to date. Both Puppet and Chef scripts are great examples of deployment frameworks that make life easier by allowing you to automate your entire deployment and management process. How to do it Regularly review which version of the agent you're using so that you know when an update is needed. If the latest agent release contains a needed fix or added functionality, download it. To deploy the agent automatically (preferred as a method to avoid errors): Use existing deployment scripts, provided they can be adapted to handle the deployment. OR Create and maintain a script that specifically deploys and configures the New Relic agent. Ideally, the script would pull the agent files from a repository where the files are versioned (for rollback purposes). Once the script has been created, shut down the application (unless script handles this). Run the deployment script. Start the application (unless script handles this). If problems arise, run the script to roll back to the previous version. To deploy the agent manually: Back up the current agent directory. Deploy the updated agent into the existing agent directory. Modify configuration files by comparing new files with existing files. In particular, make sure things like license key and custom extensions are copied over to the new configuration. Restart the application. If problems arise, restore the old agent using the backup and restart. 9. Manage user access Important This is available only for accounts on our original product-based pricing plan. Enable role-based access control (RBAC) and single sign-on (SSO) New Relic allows authorized individuals to access the broadest possible amount of data, regardless of their assigned role. As an Owner or Administrator of your New Relic account, you can control the permissions of individual users or entire roles with RBAC. To find out what is possible and how to make changes, see Users and roles. Security is no doubt of utmost concern to your organization. To simplify password management for your employees and strengthen security, you may already be using SSO with your other systems. You should do the same with New Relic. Using New Relic's SSO integration feature, account administrators will be able to enforce strong passwords and restrict login via a corporate authentication mechanism. This way, New Relic users who have already authenticated using a corporate SSO system will be able to bypass the New Relic login prompt. How to do it Log in to New Relic as an admin and go to the SSO configuration page. From the New Relic title bar, select (your account name) > Account Settings > Integrations > Single Sign On. From the SAML Single Sign On page, review your New Relic SAML Service Provider details. To upload your SAML Identity Provider certificate, select Choose File, and then follow standard procedures to select and save the file. Copy and paste in (or type) the Remove login URL that your users will use for Single Sign-On. If your organization’s SAML integration provides a redirect URL for logout, copy and paste in (or type) the Logout landing URL; otherwise leave blank. Save, test, and enable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 374.1118,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Application Monitoring Tips You Need To Know It&#x27;s one thing to know how to use APM, but it&#x27;s another thing to know how to use <em>New</em> <em>Relic</em>&#x27;s application performance monitoring software well. Here are some <em>best</em> <em>practices</em> designed to help you become an APM master—and a key asset to your team! Tip To get"
      },
      "id": "6044186564441f1f94378ecc"
    },
    {
      "sections": [
        "Synthetic monitoring best practices guide",
        "Tip",
        "1. Match your monitor type to monitoring need",
        "How to do it",
        "2. View all monitors with the Monitors index page",
        "How to view your monitors in the New Relic One:",
        "New Relic Explorer",
        "Monitors index page",
        "3. View individual monitor results",
        "How to do it:",
        "4. Understand the load-time impact of each resource",
        "5. Configure and develop a scripted browser test"
      ],
      "title": "Synthetic monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e76eb0669a1433bb9d0de70d90413e19749adf61",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/synthetic-monitoring-best-practices-guide/",
      "published_at": "2021-06-08T19:58:15Z",
      "updated_at": "2021-03-29T20:29:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's synthetic monitoring—powered by a Selenium-driven Chrome browser—allows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its full power. Tip To use synthetic monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. 1. Match your monitor type to monitoring need Synthetic monitors are virtual browsers that measure the performance of your website, recording each check in detail. They also capture aggregate numbers for load time, uptime, and average download size, as well as an overview, detailed statistics for each page resource, and downtime incidents. There are four types of synthetic monitors; the ones you deploy will depend on the things you want to monitor: Ping monitors—to ensure that your site is accessible. Simple browser monitors—to ensure end-user performance. Scripted browsers—to ensure that particular resources are present. API monitors—to ensure that your app server works as well as your website. How to do it To add a monitor, go to one.newrelic.com > Synthetics (or one.eu.newrelic.com if you have an EU-based account) and click Create monitor. Specify monitor type, name, and URL. Optional: Add a validation string (available for ping and simple browser) or advanced options, which enable substring monitoring for the following types of response validation: Verify SSL (for Ping and Simple Browser). This option verifies the validity of the SSL certificate chain. It can be duplicated by running the following syntax: openssl s_client -servername {YOUR_HOSTNAME} -connect {YOUR_HOSTNAME}:443 -CApath /etc/ssl/certs > /dev/null Copy Bypass HEAD request (for Ping). This option skips the default HEAD request and instead uses the GET verb with a ping check. Redirect is Failure (for Ping). If a redirect result occurs when Redirect is Failure is enabled, Synthetics categorizes it as a failure (rather than following the redirect and checking the resulting URL). Select the locations where you want your monitor to run. Choose a frequency to determine how often each location will run your monitor. Optional: Set up alert notifications. Select Create my monitor to confirm. Wait a few minutes; then from the Monitors index check your monitor. 2. View all monitors with the Monitors index page Continuous application performance monitoring is essential to ensure that web services are in place, working correctly, and error-free. Synthetic monitoring provides this type of assurance by performing automated tests on your web application for each selected location—noting downtime instances (“violations”) and collecting aggregate numbers, results, and detailed statistics for each page resource. Use the Monitors index page to get a high level view of this information, or select an individual monitor to view the Summary, for ping monitors, or Overview, for simple and scripted monitors, page and get a deeper insight into its performance over time. How to view your monitors in the New Relic One: New Relic Explorer To view a list of monitors using the New Relic One Monitors index page: Go to one.newrelic.com > Explorer > Synthetic monitors. For more information, see the documentation about navigating core UI components in New Relic One. Monitors index page To view a list of monitors using the Monitors index page: Go to one.newrelic.com > Synthetics. 3. View individual monitor results It’s not enough to understand how your web apps are performing for your West Coast customers; you need to be able to view how they’re performing across the country and around the globe. By taking advantage of synthetic monitors and visiting your Results page, you can see how everything from development to production affects user experience. You can locate interesting results by sorting the list to identify slow, fast, or other unusual results. Or filter by location to understand how monitor performance varies with geography. (The “Network timings” graph below provides a snapshot of webpage performance over a given period.) How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors tab, select your monitor. Select Monitor > Results. Gain an up-to-the-minute view of the slowest page loads for every monitored location. 4. Understand the load-time impact of each resource Visit the synthetics Resources page to see how each resource on your website—including CSS, JavaScript, images, HTML and more—is affecting your overall load. You can drill into detailed metrics collected at run time, locate performance information for time spent by third-party resources, and identify HTTP response codes for each resource. How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors drop-down menu, select your monitor. Select Monitor > Resources. 5. Configure and develop a scripted browser test Using scripted browsers, you can build complex monitoring workflows using the Selenium JavaScript Webdriver bindings. For instance, you can log in to the application, navigate to a particular link, and wait for a page element to load and add an assertion. How to do it: Go to one.newrelic.com > Synthetics. Choose your monitor type (for example, Scripted Browser). Enter the name and details of your monitor (for example, Sitename.com Scripted Browser) Select the locations from which you want your monitor to run (for example, Mumbai, Seoul, Columbus, and Montreal). Choose a frequency to determine how often each location will run your monitor (for example, five minutes). Set a notification method to alert your team when performance violations occur. You are now ready to write your script. (Below is an example of a script used to test the performance of a main navigation page.) var assert = require('chai').assert; // script-wide timeout for all wait and waitandfind functions (in ms) var default_element_timeout = 190000; //3 mins var default_pageload_timeout = 240000; //4 mins var navlinks = [\"css-locator-1\",\"css-locator-2\"]; //sets element load timeout to 3 mins $browser.manage().timeouts().implicitlyWait(default_element_timeout); //sets page load timoeout to 4 mins $browser.manage().timeouts().pageloadTimeout(default_pageload_timeout); //test all the main nav page performances $browser.get(\"http://www.sitename.com\").then(function(){ return $browser.findelement($driver.by.classname(\"site-theme-example\")); }).then(function(){ //verifies the nav list has loaded return $browser.findelement($driver.by.classname(\"site-nav-list-example\")); }).then(function(){ //loops through the navlinks array navlinks.foreach(function(val, i, arr){ //finds and navigates to each navlink page return $browser.findelement($driver.by.classname(navlinks[i])).click().then(function(){ //verifies that the nav list loaded before moving on return $browser.findelement($driver.by.classname(\"site-nav-list-example\")).then(function(){ //verifies that the page logo footer at bottom of page has loaded return $browser.findelement($driver.by.classname(\"site-footer-logo\")); }) }) }) }); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 225.70111,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s synthetic monitoring—powered by a Selenium-driven Chrome browser—allows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its <em>full</em> power. Tip To use synthetic monitoring and the rest of our"
      },
      "id": "603e84bb28ccbce555eba771"
    },
    {
      "sections": [
        "Monitor apps and hosts with health maps",
        "Best practices",
        "Features",
        "Entities prioritized by health",
        "Tip",
        "Entity sort order criteria",
        "Views, filters, toggles",
        "View and use health maps",
        "Use cases",
        "The system's current health at a glance",
        "Scope of the problem: What else is broken?",
        "Scale of the problem: Use context to find a noisy neighbor",
        "Troubleshooting"
      ],
      "title": "Monitor apps and hosts with health maps",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e7d1c9a1f713b33c4aa42c2cb5e1b7a6ac23c2e3",
      "image": "https://docs.newrelic.com/static/2a20f997d494faa0658b6d93c6ab1fd3/c1b63/health-map-demo-ss_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/monitor-apps-hosts-health-maps/",
      "published_at": "2021-06-09T05:34:54Z",
      "updated_at": "2021-03-13T07:37:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The health map provides a single place to visually monitor the health of all your apps and their related hosts, prioritized by health status. You can customize the page by using different views, filters, and toggles to organize the map in a way most relevant to you or your team. Use your health map to monitor applications and hosts in real-time, and quickly track down problems as they occur. Best practices The health map pulls data together from several New Relic solutions. To get the most out of the health map, we recommend using the following features: Infrastructure monitoring: Create filter sets to meaningfully categorize hosts. APM: Create tags to meaningfully categorize your applications. Alerts: Create alert policies that cover all your alerting scenarios. The health map is also especially useful if you're using containerized apps on hosts, with many instances of apps per host. Features one.newrelic.com > More > Health maps: The health map combines data from APM, infrastructure monitoring, and alerts to display your applications and hosts prioritized by health status. Health map features include: Entities prioritized by health The health map organizes the page by primary entity boxes. Primary entity boxes contain current (refreshes every two minutes), at-a-glance health and performance data, secondary entities related to it, and links to relevant APM or Infrastructure UI pages for detailed performance data. Example of a health map primary entity box with secondary entities. The health map prioritizes entities based on the health status of primary then secondary entities. The health status is determined using data from Alerts. The health map prioritizes the entities by first sorting the primary entities by health status, then sorting those by the health status of their secondary entities (related apps or hosts). The health map supports red, yellow, green, light green (not targeted by any conditions), and gray (application stopped reporting data) statuses for applications. The health map supports red, yellow, and green statuses for hosts. Tip If you have a host not targeted by any conditions, it appears green on the health map. If a host is not reporting data, it does not display on the health map unless you create a host-not-reporting condition. Entities are prioritized to the top based on this order: Entity sort order criteria Primary entities that have critical (red) health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Primary entities that have warning (yellow) health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Primary entities that have green health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Count of secondary entities Name of entity Views, filters, toggles Use the Views dropdown to see the health of your system organized by your applications or your hosts. You can then filter those views by tags (apps) or filter set (hosts) to only see data most relevant to you or your team. Use the Show metrics/hosts toggles to show more/less information in the entity boxes. View Description Applications and related hosts Organizes the map by application entities to display for each app: Health status color Condition violation information, if any Summary metrics Health of related hosts the application is running on as reported by New Relic Infrastructure Map includes an optional app tag filter. Hosts and related applications Organizes the map by host entities to display for each host: Health status color Condition violation information, if any Summary metrics Health of related applications running on the host reported by New Relic APM Map includes an optional host filter. Filter sets and related hosts Uses data reported by our infrastructure monitoring to display: Health of the hosts in each filter set in Infrastructure View and use health maps Tip To get the most out of your health map, see health maps best practices. The health map represents the current state of your system. The map refreshes every two minutes. To view the health map: From one.newrelic.com, select More, then select Health maps. Select a view from the View dropdown to organize the map by application, host, or infrastructure filter sets. If using the views Applications and related hosts or Hosts and related applications, use the Filter dropdown to only display entities most interesting to you or your team. Optional: Toggle Show metrics or Show hosts to display more or less entity data. Optional: Display the health map on a TV / wallboard in your operations center to see your system's current health at a glance. If entities start showing critical (red) or warning (yellow) health statuses, hover over the entity or the Related hosts/apps tiles for violation information to quickly ascertain the scope and scale of the problem. Click through to the relevant APM or Infrastructure UI pages to get detailed information to start troubleshooting. Use cases The health map is designed to help operations and DevOps professionals, who are responsible for the health of large, complex environments, understand: The system's current health at a glance You like to have a view up on the TV wallboard in your network operations center (NOC) that represents the health of all systems. You may be focused on a task and not notice when an alert comes in. With a wallboard you can feel assured that you can always glance up to see if anything is on fire. Conversely, even though something is alerting, you like to see the applications and hosts that are healthy to help keep things in perspective. Scope of the problem: What else is broken? You are responsible for many applications at your company. At any point in time, something is alerting and because there are many applications deployed across many hosts, it’s difficult for you to keep track of everything and know what is experiencing problems. The health map gives you a single place to see the health and relationship between all applications and hosts. You can easily correlate the alerting host with applications deployed to it and easily answer the question: What else is broken right now? Scale of the problem: Use context to find a noisy neighbor With container orchestration deploying containerized applications across many hosts, it’s difficult for you to understand the scale of the problem when you receive an alert for a host or groups of hosts. By using the application view of the health map, you can see the alerting host along with all the other hosts serving the application. If the issue is isolated to a single host, you can change to the host view of the health map to see what other applications are deployed on that host. In that view, you see that the host has four applications running and one of the applications is alerting on higher than normal throughput. Troubleshooting If health map host boxes do not display their installed apps, or if application boxes do not display the Infrastructure-monitored hosts where they are running, see APM data missing from infrastructure monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.36072,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Best</em> <em>practices</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": " to monitor applications and hosts in real-time, and quickly track down problems as they occur. <em>Best</em> <em>practices</em> The health map pulls data together from several <em>New</em> <em>Relic</em> <em>solutions</em>. To get the most out of the health map, we recommend using the following features: Infrastructure monitoring: Create"
      },
      "id": "6044155e28ccbc6f972ea01c"
    }
  ],
  "/docs/new-relic-solutions/best-practices-guides/full-stack-observability/mobile-monitoring-best-practices-guide": [
    {
      "sections": [
        "APM best practices guide",
        "Tip",
        "1. Standardize application names",
        "How to do it",
        "2. Add tags to your applications",
        "Caution",
        "3. Create and evaluate alert policies",
        "4. Identify and set up key transactions",
        "5. Track deployment history",
        "6. Review APM reports",
        "7. Review your environment with service maps",
        "8. Keep current",
        "9. Manage user access",
        "Important"
      ],
      "title": "APM best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "368a1a5688384d5bebf128604a9b8f190d335524",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide/",
      "published_at": "2021-06-08T18:52:55Z",
      "updated_at": "2021-06-08T18:52:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application Monitoring Tips You Need To Know It's one thing to know how to use APM, but it's another thing to know how to use New Relic's application performance monitoring software well. Here are some best practices designed to help you become an APM master—and a key asset to your team! Tip To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. 1. Standardize application names Most New Relic agents provide a default application name, such as \"My Application\" or \"PHP Application,\" if you don't specify one in your New Relic configuration file. You don't want to end up with 20 identically named applications, be sure to select a descriptive identifier for your apps as soon you deploy them. To keep things consistent and easy to navigate, New Relic recommends standardizing your application naming (for example, all apps in Staging append [ Staging] or the like at the end of their names). Ideally, you want your new Java applications to be named automatically to reduce the chances of typographical errors and misnaming. How to do it For Java applications, automatic application naming can come from the following sources: Request attribute Servlet init parameter Filter init parameter Web app context parameter Web app context name (display name) Web app context path Choose the method that fits best your needs and follow these steps. For non-Java applications, there are no automatic naming methods, so refer to the documentation for your APM agent. 2. Add tags to your applications When several different applications use the same account, and each application spans multiple environments (for example, development, test, pre-production, production), it can be hard to find a specific application in your overview dashboard. That's why we recommend adding tags to your apps so that you can segment them into logical groups. The two most common tags that mature APM customers use are application name and environment. So, for example, if you wanted to view the billing application in Test, you could simply filter by \"billing app\" (name tag) and \"test\" (environment tag). Caution In the APM agent configuration settings files, use the labels field to add tags to your data. For example, see this description of the Python labels setting. APM is designed so that apps can roll up into an unlimited number of meaningful tag categories. How to do it Learn about tags. Learn how to add tags.. Learn how to query tags. 3. Create and evaluate alert policies When key performance indicators spike or drop, individuals and teams in your organization need to be notified. Alerting in New Relic provides a set of tools including dynamic baselines that allow you to detect problems before they impact your end users. Alert policies can be set up in two primary ways: Static threshold alerts are great when you already know the nature of an application and its normal behaviors aren't likely to change anytime soon. Apdex score, response time, error rate, throughput are some of the static thresholds you can create alert policies on. Dynamic baseline alerts make it easy to determine and set dynamic alert thresholds for applications with varying seasonal patterns and growth trends (which make it difficult to set thresholds that define normal behavior). These alerts use baselines modeled from your application’s historical metric data. Each alert policy can contain as many conditions as you need, and each alert condition includes three components: Type of condition (metric, external service, and so on) Entities that the policy targets (for example, apps monitored by New Relic APM or New Relic Browser, hosts monitored by New Relic Infrastructure, and so on) Thresholds that escalate into alerting situations with increasing severity Once you have your alerting set up, you then want to make sure you're taking advantage of all viable notification channels. After all, what good are alerts if no one knows about them? You can manage alerts by creating specific user groups and by leveraging New Relic's integrated alert channels, including Slack, PagerDuty, webhooks, and email. Be sure to evaluate alert policies on a regular basis to ensure that they are always valid. How to do it See the detailed documentation: To set up dynamic baseline alerts and choose an application, follow standard procedures. You will see a preview of the metric with the predicted baseline You can select a metric for that application and see the corresponding baseline. Then, using the threshold sliders, you can set how closely you want your threshold to follow the baseline prediction. To set up static threshold alerts for your Apdex settings, follow standard procedures. To set up your alert notification channels, follow standard procedures. 4. Identify and set up key transactions Depending on the nature of your application, some transactions may be more important to you than others. New Relic's key transactions feature is designed to help you closely monitor what you consider to be your app's most business-critical transactions, whether that's end-user or app response time, call counts, error rates, or something else. You can also set alert threshold levels for notifications when your key transactions are performing poorly. How to do it In the menu bar, select More > Key transactions, and then select Add more. Then select the app and web transaction or, from the selected transaction, select Track as key transaction. Type a name for the key transaction, and select Track key transaction. Optional: If the agent for the selected app supports custom alerting, use the default values that New Relic automatically fills, or select Edit key alert transaction policy to set the Apdex and alert threshold values. To view the key transactions dashboard details, select View new key transaction. 5. Track deployment history When development teams are pushing new code out as frequently as possible, it can be hard to measure the impact that each deployment is having on performance. One way to stay in tune with how these changes are affecting your application is with deployment reports. These reports list recent deployments and their impact on end-users and app servers' Apdex scores, along with response times, throughput, and errors. You can also view and drill down into the details to catch errors related to recent deployments, or file a ticket and share details with your team. How to do it From the New Relic menu bar, select APM > (selected app) > Events > Deployments. To view performance after a deployment, go to the selected app's Overview dashboard in the Recent events section. A blue vertical bar on a chart indicates a deployment. To view summary information about the deployment, point to the blue bar. 6. Review APM reports From SLA, deployment, and capacity to scalability, host usage reports, and more, New Relic APM offers a variety of downloadable reporting tools surfacing historical trends—all great ways to report to senior executive teams or customers. Take a look at the full list of reports and use them to your advantage. How to do it From the New Relic APM menu bar, select Applications > (selected app) > Reports. Select the report you'd like to see. If you want to save or export a report to share, select Download this report as .csv, which will create a report with comma-separated values. 7. Review your environment with service maps Use New Relic service maps, a feature included in APM, to understand how apps and services in your architecture connect and talk to each other. Service maps are visual, customizable representations of your application architecture. Maps automatically show you your app's connections and dependencies, including databases and external services. Health indicators and performance metrics show you the current operational status for every part of your architecture. How to do it Go to one.newrelic.com > More > service maps. To get started, read the instructions in Introduction to service maps. 8. Keep current With New Relic’s SaaS platform, getting new features is as easy as updating your agent. Most likely your organization already has a set of scripts for deploying application upgrades into your environment. In a similar fashion, you can also automate your New Relic agent deployment to ensure that your systems are up to date. Both Puppet and Chef scripts are great examples of deployment frameworks that make life easier by allowing you to automate your entire deployment and management process. How to do it Regularly review which version of the agent you're using so that you know when an update is needed. If the latest agent release contains a needed fix or added functionality, download it. To deploy the agent automatically (preferred as a method to avoid errors): Use existing deployment scripts, provided they can be adapted to handle the deployment. OR Create and maintain a script that specifically deploys and configures the New Relic agent. Ideally, the script would pull the agent files from a repository where the files are versioned (for rollback purposes). Once the script has been created, shut down the application (unless script handles this). Run the deployment script. Start the application (unless script handles this). If problems arise, run the script to roll back to the previous version. To deploy the agent manually: Back up the current agent directory. Deploy the updated agent into the existing agent directory. Modify configuration files by comparing new files with existing files. In particular, make sure things like license key and custom extensions are copied over to the new configuration. Restart the application. If problems arise, restore the old agent using the backup and restart. 9. Manage user access Important This is available only for accounts on our original product-based pricing plan. Enable role-based access control (RBAC) and single sign-on (SSO) New Relic allows authorized individuals to access the broadest possible amount of data, regardless of their assigned role. As an Owner or Administrator of your New Relic account, you can control the permissions of individual users or entire roles with RBAC. To find out what is possible and how to make changes, see Users and roles. Security is no doubt of utmost concern to your organization. To simplify password management for your employees and strengthen security, you may already be using SSO with your other systems. You should do the same with New Relic. Using New Relic's SSO integration feature, account administrators will be able to enforce strong passwords and restrict login via a corporate authentication mechanism. This way, New Relic users who have already authenticated using a corporate SSO system will be able to bypass the New Relic login prompt. How to do it Log in to New Relic as an admin and go to the SSO configuration page. From the New Relic title bar, select (your account name) > Account Settings > Integrations > Single Sign On. From the SAML Single Sign On page, review your New Relic SAML Service Provider details. To upload your SAML Identity Provider certificate, select Choose File, and then follow standard procedures to select and save the file. Copy and paste in (or type) the Remove login URL that your users will use for Single Sign-On. If your organization’s SAML integration provides a redirect URL for logout, copy and paste in (or type) the Logout landing URL; otherwise leave blank. Save, test, and enable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 374.1118,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Application Monitoring Tips You Need To Know It&#x27;s one thing to know how to use APM, but it&#x27;s another thing to know how to use <em>New</em> <em>Relic</em>&#x27;s application performance monitoring software well. Here are some <em>best</em> <em>practices</em> designed to help you become an APM master—and a key asset to your team! Tip To get"
      },
      "id": "6044186564441f1f94378ecc"
    },
    {
      "sections": [
        "Synthetic monitoring best practices guide",
        "Tip",
        "1. Match your monitor type to monitoring need",
        "How to do it",
        "2. View all monitors with the Monitors index page",
        "How to view your monitors in the New Relic One:",
        "New Relic Explorer",
        "Monitors index page",
        "3. View individual monitor results",
        "How to do it:",
        "4. Understand the load-time impact of each resource",
        "5. Configure and develop a scripted browser test"
      ],
      "title": "Synthetic monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e76eb0669a1433bb9d0de70d90413e19749adf61",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/synthetic-monitoring-best-practices-guide/",
      "published_at": "2021-06-08T19:58:15Z",
      "updated_at": "2021-03-29T20:29:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's synthetic monitoring—powered by a Selenium-driven Chrome browser—allows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its full power. Tip To use synthetic monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. 1. Match your monitor type to monitoring need Synthetic monitors are virtual browsers that measure the performance of your website, recording each check in detail. They also capture aggregate numbers for load time, uptime, and average download size, as well as an overview, detailed statistics for each page resource, and downtime incidents. There are four types of synthetic monitors; the ones you deploy will depend on the things you want to monitor: Ping monitors—to ensure that your site is accessible. Simple browser monitors—to ensure end-user performance. Scripted browsers—to ensure that particular resources are present. API monitors—to ensure that your app server works as well as your website. How to do it To add a monitor, go to one.newrelic.com > Synthetics (or one.eu.newrelic.com if you have an EU-based account) and click Create monitor. Specify monitor type, name, and URL. Optional: Add a validation string (available for ping and simple browser) or advanced options, which enable substring monitoring for the following types of response validation: Verify SSL (for Ping and Simple Browser). This option verifies the validity of the SSL certificate chain. It can be duplicated by running the following syntax: openssl s_client -servername {YOUR_HOSTNAME} -connect {YOUR_HOSTNAME}:443 -CApath /etc/ssl/certs > /dev/null Copy Bypass HEAD request (for Ping). This option skips the default HEAD request and instead uses the GET verb with a ping check. Redirect is Failure (for Ping). If a redirect result occurs when Redirect is Failure is enabled, Synthetics categorizes it as a failure (rather than following the redirect and checking the resulting URL). Select the locations where you want your monitor to run. Choose a frequency to determine how often each location will run your monitor. Optional: Set up alert notifications. Select Create my monitor to confirm. Wait a few minutes; then from the Monitors index check your monitor. 2. View all monitors with the Monitors index page Continuous application performance monitoring is essential to ensure that web services are in place, working correctly, and error-free. Synthetic monitoring provides this type of assurance by performing automated tests on your web application for each selected location—noting downtime instances (“violations”) and collecting aggregate numbers, results, and detailed statistics for each page resource. Use the Monitors index page to get a high level view of this information, or select an individual monitor to view the Summary, for ping monitors, or Overview, for simple and scripted monitors, page and get a deeper insight into its performance over time. How to view your monitors in the New Relic One: New Relic Explorer To view a list of monitors using the New Relic One Monitors index page: Go to one.newrelic.com > Explorer > Synthetic monitors. For more information, see the documentation about navigating core UI components in New Relic One. Monitors index page To view a list of monitors using the Monitors index page: Go to one.newrelic.com > Synthetics. 3. View individual monitor results It’s not enough to understand how your web apps are performing for your West Coast customers; you need to be able to view how they’re performing across the country and around the globe. By taking advantage of synthetic monitors and visiting your Results page, you can see how everything from development to production affects user experience. You can locate interesting results by sorting the list to identify slow, fast, or other unusual results. Or filter by location to understand how monitor performance varies with geography. (The “Network timings” graph below provides a snapshot of webpage performance over a given period.) How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors tab, select your monitor. Select Monitor > Results. Gain an up-to-the-minute view of the slowest page loads for every monitored location. 4. Understand the load-time impact of each resource Visit the synthetics Resources page to see how each resource on your website—including CSS, JavaScript, images, HTML and more—is affecting your overall load. You can drill into detailed metrics collected at run time, locate performance information for time spent by third-party resources, and identify HTTP response codes for each resource. How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors drop-down menu, select your monitor. Select Monitor > Resources. 5. Configure and develop a scripted browser test Using scripted browsers, you can build complex monitoring workflows using the Selenium JavaScript Webdriver bindings. For instance, you can log in to the application, navigate to a particular link, and wait for a page element to load and add an assertion. How to do it: Go to one.newrelic.com > Synthetics. Choose your monitor type (for example, Scripted Browser). Enter the name and details of your monitor (for example, Sitename.com Scripted Browser) Select the locations from which you want your monitor to run (for example, Mumbai, Seoul, Columbus, and Montreal). Choose a frequency to determine how often each location will run your monitor (for example, five minutes). Set a notification method to alert your team when performance violations occur. You are now ready to write your script. (Below is an example of a script used to test the performance of a main navigation page.) var assert = require('chai').assert; // script-wide timeout for all wait and waitandfind functions (in ms) var default_element_timeout = 190000; //3 mins var default_pageload_timeout = 240000; //4 mins var navlinks = [\"css-locator-1\",\"css-locator-2\"]; //sets element load timeout to 3 mins $browser.manage().timeouts().implicitlyWait(default_element_timeout); //sets page load timoeout to 4 mins $browser.manage().timeouts().pageloadTimeout(default_pageload_timeout); //test all the main nav page performances $browser.get(\"http://www.sitename.com\").then(function(){ return $browser.findelement($driver.by.classname(\"site-theme-example\")); }).then(function(){ //verifies the nav list has loaded return $browser.findelement($driver.by.classname(\"site-nav-list-example\")); }).then(function(){ //loops through the navlinks array navlinks.foreach(function(val, i, arr){ //finds and navigates to each navlink page return $browser.findelement($driver.by.classname(navlinks[i])).click().then(function(){ //verifies that the nav list loaded before moving on return $browser.findelement($driver.by.classname(\"site-nav-list-example\")).then(function(){ //verifies that the page logo footer at bottom of page has loaded return $browser.findelement($driver.by.classname(\"site-footer-logo\")); }) }) }) }); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 225.70111,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s synthetic monitoring—powered by a Selenium-driven Chrome browser—allows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its <em>full</em> power. Tip To use synthetic monitoring and the rest of our"
      },
      "id": "603e84bb28ccbce555eba771"
    },
    {
      "sections": [
        "Infrastructure monitoring best practices guide",
        "1. Install the infrastructure agent across your entire environment",
        "How to do it",
        "Tip",
        "2. Configure the native EC2 integration",
        "3. Activate the integrations",
        "4. Create filter sets",
        "5. Create alert conditions",
        "6. View infrastructure data alongside APM data",
        "7. Access Infrastructure data using the Data explorer",
        "8. Update your agents regularly",
        "Want more user tips?"
      ],
      "title": "Infrastructure monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "931ea7767d73381ca0cb3502ec14f88d66ce5eaf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/infrastructure-monitoring-best-practices-guide/",
      "published_at": "2021-06-09T00:10:58Z",
      "updated_at": "2021-03-13T07:39:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Want even longer periods of uninterrupted sleep? Here are eight best practices to make dynamic infrastructure and server monitoring even easier with New Relic's infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution was designed to help enterprise customers monitor their large and dynamically changing environments at scale. In order to facilitate this, the UI is completely driven by tags that let you visualize aggregated metrics, events, and inventory for a large number of servers. To really get the most out of infrastructure monitoring, we recommend installing it across your entire environment, preferably even across multiple regions and clusters. This will provide a more accurate picture of the health of your host ecosystem and the impact your infrastructure has on your applications. Want to achieve faster Mean Time To Resolution (MTTR)? Install the infrastructure agent on database servers, web servers, and any other host that supports your applications. When deploying the agent, leverage custom attributes to tag your hosts so that you can use those for filtering the data presented in the UI and for setting alerts. This is in addition to any Amazon EC2 tags you may be using which will auto-import when you enable the EC2 integration. You may also prefer to keep the agent logs separate from the system logs, which you can do through the configuration. How to do it Leverage our install modules for config management tools such as Chef, Puppet and Ansible to easily deploy your agent across all your infrastructure. Read the instructions in the github repo for your config management tool referenced in the link above and define the custom_attributes you want to use to tag your hosts. Set the log_file attribute to your preferred location for the infrastructure agent logs. Tip If you are installing the agent on a single host, the process should only take a few minutes and you can find detailed instructions in our documentation. 2. Configure the native EC2 integration If you have an AWS environment, in addition to installing the infrastructure agent on your EC2 instances to monitor them, we also recommend configuring the EC2 integration so that New Relic can automatically import all the tags and metadata associated with your AWS instances. This allows you to filter down to a part of your infrastructure using the same AWS tags (example, ECTag_Role='Kafka'), and slice-and-dice your data in multiple ways. Additionally, our ‘Alerts’ and ‘Saved Filter Sets’ are completely tag-driven and dynamic, so they automatically add/remove instances matching these tags to give our users the most real-time views that scale with your cloud infrastructure. 3. Activate the integrations Monitoring your infrastructure extends beyond just CPU, memory, and storage utilization. That’s why New Relic has out-of-the-box integrations that allow you to monitor all the services that support your hosts as well. Activate any of our integrations, including AWS Billing, AWS ELB, Amazon S3, MySQL, NGINX, and more, to extend monitoring to your AWS or on-host applications, and access the pre-configured dashboards that appear for each of them. 4. Create filter sets With New Relic, users can create filter sets to organize hosts, cluster roles, and other resources based on criteria that matter the most to users. This allows you to optimize your resources by using a focused view to monitor, detect, and resolve any problems proactively. The attributes for filtering are populated from the auto-imported EC2 tags or custom tags that may be applied to hosts. You can combine as many filters as you want in a filter set, and save them to share with other people in your account. You’ll also be able to see the color-coded health status of each host inside the filter set, so you can quickly identify problematic areas of your infrastructure. Additionally, filter sets can be used in the health map to get an overview of your infrastructure performance at a glance based on the filters that matter to your teams. 5. Create alert conditions With New Relic, you can create alert conditions directly within the context of what you are currently monitoring with New Relic. For example, if you are viewing a filter set comprised of a large number of hosts and notice a problem, you don’t need to create an individual alert condition for every host within. Instead, we recommend initiating the alert condition directly from the chart of the metric you are viewing and creating it based on the filter tags. This will create an alert condition for any hosts that match those tags, allowing our infrastructure monitoring to automatically remove hosts that go offline and add new hosts to the alert condition if they match those tags. Alerts configured once for the appropriate tags will scale correctly across all future hosts. And know that you can also leverage existing alert policies for infrastructure alert conditions. 6. View infrastructure data alongside APM data The integration between New Relic APM and infrastructure monitoring lets you see your APM data and infrastructure data side by side, so you can find the root cause of problems more quickly, no matter where they originate. This allows users to view the performance relationship of your hosts and the applications running on them, allowing for quicker diagnosis of the issue and impact on the business’ health. Use health maps to quickly spot any issues or alerts related to the health of your applications and how that connects to the supporting infrastructure. The first boxes starting from the top left are those that require your attention. 7. Access Infrastructure data using the Data explorer Teams that use multiple New Relic capabilities find it useful to create a single dashboard to visually correlate the infrastructure’s health with application, browser and synthetics metrics. That’s where New Relic data exploration features comes in. All the granular metrics and events collected by infrastructure monitoring are stored in New Relic and are accessible to you immediately. Having access to the raw metrics means you can run more custom queries using NRQL, and also create dashboards to share infrastructure metrics with your team. 8. Update your agents regularly New Relic’s software engineering team is constantly pushing out improvements and new features to improve our customers’ overall monitoring experience. In order to take advantage of all the awesomeness they’re delivering, we recommend regularly updating to the latest version of the infrastructure agent. Want more user tips? View training videos at New Relic University. Read the documentation. Check out our Tutorials. Ask a question in the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.361,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Want even longer periods of uninterrupted sleep? Here are eight <em>best</em> <em>practices</em> to make dynamic infrastructure and server monitoring even easier with <em>New</em> <em>Relic</em>&#x27;s infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution"
      },
      "id": "6044151c28ccbc4b4f2c60af"
    }
  ],
  "/docs/new-relic-solutions/best-practices-guides/full-stack-observability/monitor-apps-hosts-health-maps": [
    {
      "sections": [
        "APM best practices guide",
        "Tip",
        "1. Standardize application names",
        "How to do it",
        "2. Add tags to your applications",
        "Caution",
        "3. Create and evaluate alert policies",
        "4. Identify and set up key transactions",
        "5. Track deployment history",
        "6. Review APM reports",
        "7. Review your environment with service maps",
        "8. Keep current",
        "9. Manage user access",
        "Important"
      ],
      "title": "APM best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "368a1a5688384d5bebf128604a9b8f190d335524",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide/",
      "published_at": "2021-06-08T18:52:55Z",
      "updated_at": "2021-06-08T18:52:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application Monitoring Tips You Need To Know It's one thing to know how to use APM, but it's another thing to know how to use New Relic's application performance monitoring software well. Here are some best practices designed to help you become an APM master—and a key asset to your team! Tip To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. 1. Standardize application names Most New Relic agents provide a default application name, such as \"My Application\" or \"PHP Application,\" if you don't specify one in your New Relic configuration file. You don't want to end up with 20 identically named applications, be sure to select a descriptive identifier for your apps as soon you deploy them. To keep things consistent and easy to navigate, New Relic recommends standardizing your application naming (for example, all apps in Staging append [ Staging] or the like at the end of their names). Ideally, you want your new Java applications to be named automatically to reduce the chances of typographical errors and misnaming. How to do it For Java applications, automatic application naming can come from the following sources: Request attribute Servlet init parameter Filter init parameter Web app context parameter Web app context name (display name) Web app context path Choose the method that fits best your needs and follow these steps. For non-Java applications, there are no automatic naming methods, so refer to the documentation for your APM agent. 2. Add tags to your applications When several different applications use the same account, and each application spans multiple environments (for example, development, test, pre-production, production), it can be hard to find a specific application in your overview dashboard. That's why we recommend adding tags to your apps so that you can segment them into logical groups. The two most common tags that mature APM customers use are application name and environment. So, for example, if you wanted to view the billing application in Test, you could simply filter by \"billing app\" (name tag) and \"test\" (environment tag). Caution In the APM agent configuration settings files, use the labels field to add tags to your data. For example, see this description of the Python labels setting. APM is designed so that apps can roll up into an unlimited number of meaningful tag categories. How to do it Learn about tags. Learn how to add tags.. Learn how to query tags. 3. Create and evaluate alert policies When key performance indicators spike or drop, individuals and teams in your organization need to be notified. Alerting in New Relic provides a set of tools including dynamic baselines that allow you to detect problems before they impact your end users. Alert policies can be set up in two primary ways: Static threshold alerts are great when you already know the nature of an application and its normal behaviors aren't likely to change anytime soon. Apdex score, response time, error rate, throughput are some of the static thresholds you can create alert policies on. Dynamic baseline alerts make it easy to determine and set dynamic alert thresholds for applications with varying seasonal patterns and growth trends (which make it difficult to set thresholds that define normal behavior). These alerts use baselines modeled from your application’s historical metric data. Each alert policy can contain as many conditions as you need, and each alert condition includes three components: Type of condition (metric, external service, and so on) Entities that the policy targets (for example, apps monitored by New Relic APM or New Relic Browser, hosts monitored by New Relic Infrastructure, and so on) Thresholds that escalate into alerting situations with increasing severity Once you have your alerting set up, you then want to make sure you're taking advantage of all viable notification channels. After all, what good are alerts if no one knows about them? You can manage alerts by creating specific user groups and by leveraging New Relic's integrated alert channels, including Slack, PagerDuty, webhooks, and email. Be sure to evaluate alert policies on a regular basis to ensure that they are always valid. How to do it See the detailed documentation: To set up dynamic baseline alerts and choose an application, follow standard procedures. You will see a preview of the metric with the predicted baseline You can select a metric for that application and see the corresponding baseline. Then, using the threshold sliders, you can set how closely you want your threshold to follow the baseline prediction. To set up static threshold alerts for your Apdex settings, follow standard procedures. To set up your alert notification channels, follow standard procedures. 4. Identify and set up key transactions Depending on the nature of your application, some transactions may be more important to you than others. New Relic's key transactions feature is designed to help you closely monitor what you consider to be your app's most business-critical transactions, whether that's end-user or app response time, call counts, error rates, or something else. You can also set alert threshold levels for notifications when your key transactions are performing poorly. How to do it In the menu bar, select More > Key transactions, and then select Add more. Then select the app and web transaction or, from the selected transaction, select Track as key transaction. Type a name for the key transaction, and select Track key transaction. Optional: If the agent for the selected app supports custom alerting, use the default values that New Relic automatically fills, or select Edit key alert transaction policy to set the Apdex and alert threshold values. To view the key transactions dashboard details, select View new key transaction. 5. Track deployment history When development teams are pushing new code out as frequently as possible, it can be hard to measure the impact that each deployment is having on performance. One way to stay in tune with how these changes are affecting your application is with deployment reports. These reports list recent deployments and their impact on end-users and app servers' Apdex scores, along with response times, throughput, and errors. You can also view and drill down into the details to catch errors related to recent deployments, or file a ticket and share details with your team. How to do it From the New Relic menu bar, select APM > (selected app) > Events > Deployments. To view performance after a deployment, go to the selected app's Overview dashboard in the Recent events section. A blue vertical bar on a chart indicates a deployment. To view summary information about the deployment, point to the blue bar. 6. Review APM reports From SLA, deployment, and capacity to scalability, host usage reports, and more, New Relic APM offers a variety of downloadable reporting tools surfacing historical trends—all great ways to report to senior executive teams or customers. Take a look at the full list of reports and use them to your advantage. How to do it From the New Relic APM menu bar, select Applications > (selected app) > Reports. Select the report you'd like to see. If you want to save or export a report to share, select Download this report as .csv, which will create a report with comma-separated values. 7. Review your environment with service maps Use New Relic service maps, a feature included in APM, to understand how apps and services in your architecture connect and talk to each other. Service maps are visual, customizable representations of your application architecture. Maps automatically show you your app's connections and dependencies, including databases and external services. Health indicators and performance metrics show you the current operational status for every part of your architecture. How to do it Go to one.newrelic.com > More > service maps. To get started, read the instructions in Introduction to service maps. 8. Keep current With New Relic’s SaaS platform, getting new features is as easy as updating your agent. Most likely your organization already has a set of scripts for deploying application upgrades into your environment. In a similar fashion, you can also automate your New Relic agent deployment to ensure that your systems are up to date. Both Puppet and Chef scripts are great examples of deployment frameworks that make life easier by allowing you to automate your entire deployment and management process. How to do it Regularly review which version of the agent you're using so that you know when an update is needed. If the latest agent release contains a needed fix or added functionality, download it. To deploy the agent automatically (preferred as a method to avoid errors): Use existing deployment scripts, provided they can be adapted to handle the deployment. OR Create and maintain a script that specifically deploys and configures the New Relic agent. Ideally, the script would pull the agent files from a repository where the files are versioned (for rollback purposes). Once the script has been created, shut down the application (unless script handles this). Run the deployment script. Start the application (unless script handles this). If problems arise, run the script to roll back to the previous version. To deploy the agent manually: Back up the current agent directory. Deploy the updated agent into the existing agent directory. Modify configuration files by comparing new files with existing files. In particular, make sure things like license key and custom extensions are copied over to the new configuration. Restart the application. If problems arise, restore the old agent using the backup and restart. 9. Manage user access Important This is available only for accounts on our original product-based pricing plan. Enable role-based access control (RBAC) and single sign-on (SSO) New Relic allows authorized individuals to access the broadest possible amount of data, regardless of their assigned role. As an Owner or Administrator of your New Relic account, you can control the permissions of individual users or entire roles with RBAC. To find out what is possible and how to make changes, see Users and roles. Security is no doubt of utmost concern to your organization. To simplify password management for your employees and strengthen security, you may already be using SSO with your other systems. You should do the same with New Relic. Using New Relic's SSO integration feature, account administrators will be able to enforce strong passwords and restrict login via a corporate authentication mechanism. This way, New Relic users who have already authenticated using a corporate SSO system will be able to bypass the New Relic login prompt. How to do it Log in to New Relic as an admin and go to the SSO configuration page. From the New Relic title bar, select (your account name) > Account Settings > Integrations > Single Sign On. From the SAML Single Sign On page, review your New Relic SAML Service Provider details. To upload your SAML Identity Provider certificate, select Choose File, and then follow standard procedures to select and save the file. Copy and paste in (or type) the Remove login URL that your users will use for Single Sign-On. If your organization’s SAML integration provides a redirect URL for logout, copy and paste in (or type) the Logout landing URL; otherwise leave blank. Save, test, and enable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 374.11163,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Application Monitoring Tips You Need To Know It&#x27;s one thing to know how to use APM, but it&#x27;s another thing to know how to use <em>New</em> <em>Relic</em>&#x27;s application performance monitoring software well. Here are some <em>best</em> <em>practices</em> designed to help you become an APM master—and a key asset to your team! Tip To get"
      },
      "id": "6044186564441f1f94378ecc"
    },
    {
      "sections": [
        "Synthetic monitoring best practices guide",
        "Tip",
        "1. Match your monitor type to monitoring need",
        "How to do it",
        "2. View all monitors with the Monitors index page",
        "How to view your monitors in the New Relic One:",
        "New Relic Explorer",
        "Monitors index page",
        "3. View individual monitor results",
        "How to do it:",
        "4. Understand the load-time impact of each resource",
        "5. Configure and develop a scripted browser test"
      ],
      "title": "Synthetic monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e76eb0669a1433bb9d0de70d90413e19749adf61",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/synthetic-monitoring-best-practices-guide/",
      "published_at": "2021-06-08T19:58:15Z",
      "updated_at": "2021-03-29T20:29:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's synthetic monitoring—powered by a Selenium-driven Chrome browser—allows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its full power. Tip To use synthetic monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. 1. Match your monitor type to monitoring need Synthetic monitors are virtual browsers that measure the performance of your website, recording each check in detail. They also capture aggregate numbers for load time, uptime, and average download size, as well as an overview, detailed statistics for each page resource, and downtime incidents. There are four types of synthetic monitors; the ones you deploy will depend on the things you want to monitor: Ping monitors—to ensure that your site is accessible. Simple browser monitors—to ensure end-user performance. Scripted browsers—to ensure that particular resources are present. API monitors—to ensure that your app server works as well as your website. How to do it To add a monitor, go to one.newrelic.com > Synthetics (or one.eu.newrelic.com if you have an EU-based account) and click Create monitor. Specify monitor type, name, and URL. Optional: Add a validation string (available for ping and simple browser) or advanced options, which enable substring monitoring for the following types of response validation: Verify SSL (for Ping and Simple Browser). This option verifies the validity of the SSL certificate chain. It can be duplicated by running the following syntax: openssl s_client -servername {YOUR_HOSTNAME} -connect {YOUR_HOSTNAME}:443 -CApath /etc/ssl/certs > /dev/null Copy Bypass HEAD request (for Ping). This option skips the default HEAD request and instead uses the GET verb with a ping check. Redirect is Failure (for Ping). If a redirect result occurs when Redirect is Failure is enabled, Synthetics categorizes it as a failure (rather than following the redirect and checking the resulting URL). Select the locations where you want your monitor to run. Choose a frequency to determine how often each location will run your monitor. Optional: Set up alert notifications. Select Create my monitor to confirm. Wait a few minutes; then from the Monitors index check your monitor. 2. View all monitors with the Monitors index page Continuous application performance monitoring is essential to ensure that web services are in place, working correctly, and error-free. Synthetic monitoring provides this type of assurance by performing automated tests on your web application for each selected location—noting downtime instances (“violations”) and collecting aggregate numbers, results, and detailed statistics for each page resource. Use the Monitors index page to get a high level view of this information, or select an individual monitor to view the Summary, for ping monitors, or Overview, for simple and scripted monitors, page and get a deeper insight into its performance over time. How to view your monitors in the New Relic One: New Relic Explorer To view a list of monitors using the New Relic One Monitors index page: Go to one.newrelic.com > Explorer > Synthetic monitors. For more information, see the documentation about navigating core UI components in New Relic One. Monitors index page To view a list of monitors using the Monitors index page: Go to one.newrelic.com > Synthetics. 3. View individual monitor results It’s not enough to understand how your web apps are performing for your West Coast customers; you need to be able to view how they’re performing across the country and around the globe. By taking advantage of synthetic monitors and visiting your Results page, you can see how everything from development to production affects user experience. You can locate interesting results by sorting the list to identify slow, fast, or other unusual results. Or filter by location to understand how monitor performance varies with geography. (The “Network timings” graph below provides a snapshot of webpage performance over a given period.) How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors tab, select your monitor. Select Monitor > Results. Gain an up-to-the-minute view of the slowest page loads for every monitored location. 4. Understand the load-time impact of each resource Visit the synthetics Resources page to see how each resource on your website—including CSS, JavaScript, images, HTML and more—is affecting your overall load. You can drill into detailed metrics collected at run time, locate performance information for time spent by third-party resources, and identify HTTP response codes for each resource. How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors drop-down menu, select your monitor. Select Monitor > Resources. 5. Configure and develop a scripted browser test Using scripted browsers, you can build complex monitoring workflows using the Selenium JavaScript Webdriver bindings. For instance, you can log in to the application, navigate to a particular link, and wait for a page element to load and add an assertion. How to do it: Go to one.newrelic.com > Synthetics. Choose your monitor type (for example, Scripted Browser). Enter the name and details of your monitor (for example, Sitename.com Scripted Browser) Select the locations from which you want your monitor to run (for example, Mumbai, Seoul, Columbus, and Montreal). Choose a frequency to determine how often each location will run your monitor (for example, five minutes). Set a notification method to alert your team when performance violations occur. You are now ready to write your script. (Below is an example of a script used to test the performance of a main navigation page.) var assert = require('chai').assert; // script-wide timeout for all wait and waitandfind functions (in ms) var default_element_timeout = 190000; //3 mins var default_pageload_timeout = 240000; //4 mins var navlinks = [\"css-locator-1\",\"css-locator-2\"]; //sets element load timeout to 3 mins $browser.manage().timeouts().implicitlyWait(default_element_timeout); //sets page load timoeout to 4 mins $browser.manage().timeouts().pageloadTimeout(default_pageload_timeout); //test all the main nav page performances $browser.get(\"http://www.sitename.com\").then(function(){ return $browser.findelement($driver.by.classname(\"site-theme-example\")); }).then(function(){ //verifies the nav list has loaded return $browser.findelement($driver.by.classname(\"site-nav-list-example\")); }).then(function(){ //loops through the navlinks array navlinks.foreach(function(val, i, arr){ //finds and navigates to each navlink page return $browser.findelement($driver.by.classname(navlinks[i])).click().then(function(){ //verifies that the nav list loaded before moving on return $browser.findelement($driver.by.classname(\"site-nav-list-example\")).then(function(){ //verifies that the page logo footer at bottom of page has loaded return $browser.findelement($driver.by.classname(\"site-footer-logo\")); }) }) }) }); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 225.70111,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Synthetic monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s synthetic monitoring—powered by a Selenium-driven Chrome browser—allows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its <em>full</em> power. Tip To use synthetic monitoring and the rest of our"
      },
      "id": "603e84bb28ccbce555eba771"
    },
    {
      "sections": [
        "Infrastructure monitoring best practices guide",
        "1. Install the infrastructure agent across your entire environment",
        "How to do it",
        "Tip",
        "2. Configure the native EC2 integration",
        "3. Activate the integrations",
        "4. Create filter sets",
        "5. Create alert conditions",
        "6. View infrastructure data alongside APM data",
        "7. Access Infrastructure data using the Data explorer",
        "8. Update your agents regularly",
        "Want more user tips?"
      ],
      "title": "Infrastructure monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "931ea7767d73381ca0cb3502ec14f88d66ce5eaf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/infrastructure-monitoring-best-practices-guide/",
      "published_at": "2021-06-09T00:10:58Z",
      "updated_at": "2021-03-13T07:39:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Want even longer periods of uninterrupted sleep? Here are eight best practices to make dynamic infrastructure and server monitoring even easier with New Relic's infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution was designed to help enterprise customers monitor their large and dynamically changing environments at scale. In order to facilitate this, the UI is completely driven by tags that let you visualize aggregated metrics, events, and inventory for a large number of servers. To really get the most out of infrastructure monitoring, we recommend installing it across your entire environment, preferably even across multiple regions and clusters. This will provide a more accurate picture of the health of your host ecosystem and the impact your infrastructure has on your applications. Want to achieve faster Mean Time To Resolution (MTTR)? Install the infrastructure agent on database servers, web servers, and any other host that supports your applications. When deploying the agent, leverage custom attributes to tag your hosts so that you can use those for filtering the data presented in the UI and for setting alerts. This is in addition to any Amazon EC2 tags you may be using which will auto-import when you enable the EC2 integration. You may also prefer to keep the agent logs separate from the system logs, which you can do through the configuration. How to do it Leverage our install modules for config management tools such as Chef, Puppet and Ansible to easily deploy your agent across all your infrastructure. Read the instructions in the github repo for your config management tool referenced in the link above and define the custom_attributes you want to use to tag your hosts. Set the log_file attribute to your preferred location for the infrastructure agent logs. Tip If you are installing the agent on a single host, the process should only take a few minutes and you can find detailed instructions in our documentation. 2. Configure the native EC2 integration If you have an AWS environment, in addition to installing the infrastructure agent on your EC2 instances to monitor them, we also recommend configuring the EC2 integration so that New Relic can automatically import all the tags and metadata associated with your AWS instances. This allows you to filter down to a part of your infrastructure using the same AWS tags (example, ECTag_Role='Kafka'), and slice-and-dice your data in multiple ways. Additionally, our ‘Alerts’ and ‘Saved Filter Sets’ are completely tag-driven and dynamic, so they automatically add/remove instances matching these tags to give our users the most real-time views that scale with your cloud infrastructure. 3. Activate the integrations Monitoring your infrastructure extends beyond just CPU, memory, and storage utilization. That’s why New Relic has out-of-the-box integrations that allow you to monitor all the services that support your hosts as well. Activate any of our integrations, including AWS Billing, AWS ELB, Amazon S3, MySQL, NGINX, and more, to extend monitoring to your AWS or on-host applications, and access the pre-configured dashboards that appear for each of them. 4. Create filter sets With New Relic, users can create filter sets to organize hosts, cluster roles, and other resources based on criteria that matter the most to users. This allows you to optimize your resources by using a focused view to monitor, detect, and resolve any problems proactively. The attributes for filtering are populated from the auto-imported EC2 tags or custom tags that may be applied to hosts. You can combine as many filters as you want in a filter set, and save them to share with other people in your account. You’ll also be able to see the color-coded health status of each host inside the filter set, so you can quickly identify problematic areas of your infrastructure. Additionally, filter sets can be used in the health map to get an overview of your infrastructure performance at a glance based on the filters that matter to your teams. 5. Create alert conditions With New Relic, you can create alert conditions directly within the context of what you are currently monitoring with New Relic. For example, if you are viewing a filter set comprised of a large number of hosts and notice a problem, you don’t need to create an individual alert condition for every host within. Instead, we recommend initiating the alert condition directly from the chart of the metric you are viewing and creating it based on the filter tags. This will create an alert condition for any hosts that match those tags, allowing our infrastructure monitoring to automatically remove hosts that go offline and add new hosts to the alert condition if they match those tags. Alerts configured once for the appropriate tags will scale correctly across all future hosts. And know that you can also leverage existing alert policies for infrastructure alert conditions. 6. View infrastructure data alongside APM data The integration between New Relic APM and infrastructure monitoring lets you see your APM data and infrastructure data side by side, so you can find the root cause of problems more quickly, no matter where they originate. This allows users to view the performance relationship of your hosts and the applications running on them, allowing for quicker diagnosis of the issue and impact on the business’ health. Use health maps to quickly spot any issues or alerts related to the health of your applications and how that connects to the supporting infrastructure. The first boxes starting from the top left are those that require your attention. 7. Access Infrastructure data using the Data explorer Teams that use multiple New Relic capabilities find it useful to create a single dashboard to visually correlate the infrastructure’s health with application, browser and synthetics metrics. That’s where New Relic data exploration features comes in. All the granular metrics and events collected by infrastructure monitoring are stored in New Relic and are accessible to you immediately. Having access to the raw metrics means you can run more custom queries using NRQL, and also create dashboards to share infrastructure metrics with your team. 8. Update your agents regularly New Relic’s software engineering team is constantly pushing out improvements and new features to improve our customers’ overall monitoring experience. In order to take advantage of all the awesomeness they’re delivering, we recommend regularly updating to the latest version of the infrastructure agent. Want more user tips? View training videos at New Relic University. Read the documentation. Check out our Tutorials. Ask a question in the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.36098,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Want even longer periods of uninterrupted sleep? Here are eight <em>best</em> <em>practices</em> to make dynamic infrastructure and server monitoring even easier with <em>New</em> <em>Relic</em>&#x27;s infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution"
      },
      "id": "6044151c28ccbc4b4f2c60af"
    }
  ],
  "/docs/new-relic-solutions/best-practices-guides/full-stack-observability/synthetic-monitoring-best-practices-guide": [
    {
      "sections": [
        "APM best practices guide",
        "Tip",
        "1. Standardize application names",
        "How to do it",
        "2. Add tags to your applications",
        "Caution",
        "3. Create and evaluate alert policies",
        "4. Identify and set up key transactions",
        "5. Track deployment history",
        "6. Review APM reports",
        "7. Review your environment with service maps",
        "8. Keep current",
        "9. Manage user access",
        "Important"
      ],
      "title": "APM best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "368a1a5688384d5bebf128604a9b8f190d335524",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/apm-best-practices-guide/",
      "published_at": "2021-06-08T18:52:55Z",
      "updated_at": "2021-06-08T18:52:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application Monitoring Tips You Need To Know It's one thing to know how to use APM, but it's another thing to know how to use New Relic's application performance monitoring software well. Here are some best practices designed to help you become an APM master—and a key asset to your team! Tip To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. 1. Standardize application names Most New Relic agents provide a default application name, such as \"My Application\" or \"PHP Application,\" if you don't specify one in your New Relic configuration file. You don't want to end up with 20 identically named applications, be sure to select a descriptive identifier for your apps as soon you deploy them. To keep things consistent and easy to navigate, New Relic recommends standardizing your application naming (for example, all apps in Staging append [ Staging] or the like at the end of their names). Ideally, you want your new Java applications to be named automatically to reduce the chances of typographical errors and misnaming. How to do it For Java applications, automatic application naming can come from the following sources: Request attribute Servlet init parameter Filter init parameter Web app context parameter Web app context name (display name) Web app context path Choose the method that fits best your needs and follow these steps. For non-Java applications, there are no automatic naming methods, so refer to the documentation for your APM agent. 2. Add tags to your applications When several different applications use the same account, and each application spans multiple environments (for example, development, test, pre-production, production), it can be hard to find a specific application in your overview dashboard. That's why we recommend adding tags to your apps so that you can segment them into logical groups. The two most common tags that mature APM customers use are application name and environment. So, for example, if you wanted to view the billing application in Test, you could simply filter by \"billing app\" (name tag) and \"test\" (environment tag). Caution In the APM agent configuration settings files, use the labels field to add tags to your data. For example, see this description of the Python labels setting. APM is designed so that apps can roll up into an unlimited number of meaningful tag categories. How to do it Learn about tags. Learn how to add tags.. Learn how to query tags. 3. Create and evaluate alert policies When key performance indicators spike or drop, individuals and teams in your organization need to be notified. Alerting in New Relic provides a set of tools including dynamic baselines that allow you to detect problems before they impact your end users. Alert policies can be set up in two primary ways: Static threshold alerts are great when you already know the nature of an application and its normal behaviors aren't likely to change anytime soon. Apdex score, response time, error rate, throughput are some of the static thresholds you can create alert policies on. Dynamic baseline alerts make it easy to determine and set dynamic alert thresholds for applications with varying seasonal patterns and growth trends (which make it difficult to set thresholds that define normal behavior). These alerts use baselines modeled from your application’s historical metric data. Each alert policy can contain as many conditions as you need, and each alert condition includes three components: Type of condition (metric, external service, and so on) Entities that the policy targets (for example, apps monitored by New Relic APM or New Relic Browser, hosts monitored by New Relic Infrastructure, and so on) Thresholds that escalate into alerting situations with increasing severity Once you have your alerting set up, you then want to make sure you're taking advantage of all viable notification channels. After all, what good are alerts if no one knows about them? You can manage alerts by creating specific user groups and by leveraging New Relic's integrated alert channels, including Slack, PagerDuty, webhooks, and email. Be sure to evaluate alert policies on a regular basis to ensure that they are always valid. How to do it See the detailed documentation: To set up dynamic baseline alerts and choose an application, follow standard procedures. You will see a preview of the metric with the predicted baseline You can select a metric for that application and see the corresponding baseline. Then, using the threshold sliders, you can set how closely you want your threshold to follow the baseline prediction. To set up static threshold alerts for your Apdex settings, follow standard procedures. To set up your alert notification channels, follow standard procedures. 4. Identify and set up key transactions Depending on the nature of your application, some transactions may be more important to you than others. New Relic's key transactions feature is designed to help you closely monitor what you consider to be your app's most business-critical transactions, whether that's end-user or app response time, call counts, error rates, or something else. You can also set alert threshold levels for notifications when your key transactions are performing poorly. How to do it In the menu bar, select More > Key transactions, and then select Add more. Then select the app and web transaction or, from the selected transaction, select Track as key transaction. Type a name for the key transaction, and select Track key transaction. Optional: If the agent for the selected app supports custom alerting, use the default values that New Relic automatically fills, or select Edit key alert transaction policy to set the Apdex and alert threshold values. To view the key transactions dashboard details, select View new key transaction. 5. Track deployment history When development teams are pushing new code out as frequently as possible, it can be hard to measure the impact that each deployment is having on performance. One way to stay in tune with how these changes are affecting your application is with deployment reports. These reports list recent deployments and their impact on end-users and app servers' Apdex scores, along with response times, throughput, and errors. You can also view and drill down into the details to catch errors related to recent deployments, or file a ticket and share details with your team. How to do it From the New Relic menu bar, select APM > (selected app) > Events > Deployments. To view performance after a deployment, go to the selected app's Overview dashboard in the Recent events section. A blue vertical bar on a chart indicates a deployment. To view summary information about the deployment, point to the blue bar. 6. Review APM reports From SLA, deployment, and capacity to scalability, host usage reports, and more, New Relic APM offers a variety of downloadable reporting tools surfacing historical trends—all great ways to report to senior executive teams or customers. Take a look at the full list of reports and use them to your advantage. How to do it From the New Relic APM menu bar, select Applications > (selected app) > Reports. Select the report you'd like to see. If you want to save or export a report to share, select Download this report as .csv, which will create a report with comma-separated values. 7. Review your environment with service maps Use New Relic service maps, a feature included in APM, to understand how apps and services in your architecture connect and talk to each other. Service maps are visual, customizable representations of your application architecture. Maps automatically show you your app's connections and dependencies, including databases and external services. Health indicators and performance metrics show you the current operational status for every part of your architecture. How to do it Go to one.newrelic.com > More > service maps. To get started, read the instructions in Introduction to service maps. 8. Keep current With New Relic’s SaaS platform, getting new features is as easy as updating your agent. Most likely your organization already has a set of scripts for deploying application upgrades into your environment. In a similar fashion, you can also automate your New Relic agent deployment to ensure that your systems are up to date. Both Puppet and Chef scripts are great examples of deployment frameworks that make life easier by allowing you to automate your entire deployment and management process. How to do it Regularly review which version of the agent you're using so that you know when an update is needed. If the latest agent release contains a needed fix or added functionality, download it. To deploy the agent automatically (preferred as a method to avoid errors): Use existing deployment scripts, provided they can be adapted to handle the deployment. OR Create and maintain a script that specifically deploys and configures the New Relic agent. Ideally, the script would pull the agent files from a repository where the files are versioned (for rollback purposes). Once the script has been created, shut down the application (unless script handles this). Run the deployment script. Start the application (unless script handles this). If problems arise, run the script to roll back to the previous version. To deploy the agent manually: Back up the current agent directory. Deploy the updated agent into the existing agent directory. Modify configuration files by comparing new files with existing files. In particular, make sure things like license key and custom extensions are copied over to the new configuration. Restart the application. If problems arise, restore the old agent using the backup and restart. 9. Manage user access Important This is available only for accounts on our original product-based pricing plan. Enable role-based access control (RBAC) and single sign-on (SSO) New Relic allows authorized individuals to access the broadest possible amount of data, regardless of their assigned role. As an Owner or Administrator of your New Relic account, you can control the permissions of individual users or entire roles with RBAC. To find out what is possible and how to make changes, see Users and roles. Security is no doubt of utmost concern to your organization. To simplify password management for your employees and strengthen security, you may already be using SSO with your other systems. You should do the same with New Relic. Using New Relic's SSO integration feature, account administrators will be able to enforce strong passwords and restrict login via a corporate authentication mechanism. This way, New Relic users who have already authenticated using a corporate SSO system will be able to bypass the New Relic login prompt. How to do it Log in to New Relic as an admin and go to the SSO configuration page. From the New Relic title bar, select (your account name) > Account Settings > Integrations > Single Sign On. From the SAML Single Sign On page, review your New Relic SAML Service Provider details. To upload your SAML Identity Provider certificate, select Choose File, and then follow standard procedures to select and save the file. Copy and paste in (or type) the Remove login URL that your users will use for Single Sign-On. If your organization’s SAML integration provides a redirect URL for logout, copy and paste in (or type) the Logout landing URL; otherwise leave blank. Save, test, and enable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 374.11163,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "APM <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Application Monitoring Tips You Need To Know It&#x27;s one thing to know how to use APM, but it&#x27;s another thing to know how to use <em>New</em> <em>Relic</em>&#x27;s application performance monitoring software well. Here are some <em>best</em> <em>practices</em> designed to help you become an APM master—and a key asset to your team! Tip To get"
      },
      "id": "6044186564441f1f94378ecc"
    },
    {
      "sections": [
        "Infrastructure monitoring best practices guide",
        "1. Install the infrastructure agent across your entire environment",
        "How to do it",
        "Tip",
        "2. Configure the native EC2 integration",
        "3. Activate the integrations",
        "4. Create filter sets",
        "5. Create alert conditions",
        "6. View infrastructure data alongside APM data",
        "7. Access Infrastructure data using the Data explorer",
        "8. Update your agents regularly",
        "Want more user tips?"
      ],
      "title": "Infrastructure monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "931ea7767d73381ca0cb3502ec14f88d66ce5eaf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/infrastructure-monitoring-best-practices-guide/",
      "published_at": "2021-06-09T00:10:58Z",
      "updated_at": "2021-03-13T07:39:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Want even longer periods of uninterrupted sleep? Here are eight best practices to make dynamic infrastructure and server monitoring even easier with New Relic's infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution was designed to help enterprise customers monitor their large and dynamically changing environments at scale. In order to facilitate this, the UI is completely driven by tags that let you visualize aggregated metrics, events, and inventory for a large number of servers. To really get the most out of infrastructure monitoring, we recommend installing it across your entire environment, preferably even across multiple regions and clusters. This will provide a more accurate picture of the health of your host ecosystem and the impact your infrastructure has on your applications. Want to achieve faster Mean Time To Resolution (MTTR)? Install the infrastructure agent on database servers, web servers, and any other host that supports your applications. When deploying the agent, leverage custom attributes to tag your hosts so that you can use those for filtering the data presented in the UI and for setting alerts. This is in addition to any Amazon EC2 tags you may be using which will auto-import when you enable the EC2 integration. You may also prefer to keep the agent logs separate from the system logs, which you can do through the configuration. How to do it Leverage our install modules for config management tools such as Chef, Puppet and Ansible to easily deploy your agent across all your infrastructure. Read the instructions in the github repo for your config management tool referenced in the link above and define the custom_attributes you want to use to tag your hosts. Set the log_file attribute to your preferred location for the infrastructure agent logs. Tip If you are installing the agent on a single host, the process should only take a few minutes and you can find detailed instructions in our documentation. 2. Configure the native EC2 integration If you have an AWS environment, in addition to installing the infrastructure agent on your EC2 instances to monitor them, we also recommend configuring the EC2 integration so that New Relic can automatically import all the tags and metadata associated with your AWS instances. This allows you to filter down to a part of your infrastructure using the same AWS tags (example, ECTag_Role='Kafka'), and slice-and-dice your data in multiple ways. Additionally, our ‘Alerts’ and ‘Saved Filter Sets’ are completely tag-driven and dynamic, so they automatically add/remove instances matching these tags to give our users the most real-time views that scale with your cloud infrastructure. 3. Activate the integrations Monitoring your infrastructure extends beyond just CPU, memory, and storage utilization. That’s why New Relic has out-of-the-box integrations that allow you to monitor all the services that support your hosts as well. Activate any of our integrations, including AWS Billing, AWS ELB, Amazon S3, MySQL, NGINX, and more, to extend monitoring to your AWS or on-host applications, and access the pre-configured dashboards that appear for each of them. 4. Create filter sets With New Relic, users can create filter sets to organize hosts, cluster roles, and other resources based on criteria that matter the most to users. This allows you to optimize your resources by using a focused view to monitor, detect, and resolve any problems proactively. The attributes for filtering are populated from the auto-imported EC2 tags or custom tags that may be applied to hosts. You can combine as many filters as you want in a filter set, and save them to share with other people in your account. You’ll also be able to see the color-coded health status of each host inside the filter set, so you can quickly identify problematic areas of your infrastructure. Additionally, filter sets can be used in the health map to get an overview of your infrastructure performance at a glance based on the filters that matter to your teams. 5. Create alert conditions With New Relic, you can create alert conditions directly within the context of what you are currently monitoring with New Relic. For example, if you are viewing a filter set comprised of a large number of hosts and notice a problem, you don’t need to create an individual alert condition for every host within. Instead, we recommend initiating the alert condition directly from the chart of the metric you are viewing and creating it based on the filter tags. This will create an alert condition for any hosts that match those tags, allowing our infrastructure monitoring to automatically remove hosts that go offline and add new hosts to the alert condition if they match those tags. Alerts configured once for the appropriate tags will scale correctly across all future hosts. And know that you can also leverage existing alert policies for infrastructure alert conditions. 6. View infrastructure data alongside APM data The integration between New Relic APM and infrastructure monitoring lets you see your APM data and infrastructure data side by side, so you can find the root cause of problems more quickly, no matter where they originate. This allows users to view the performance relationship of your hosts and the applications running on them, allowing for quicker diagnosis of the issue and impact on the business’ health. Use health maps to quickly spot any issues or alerts related to the health of your applications and how that connects to the supporting infrastructure. The first boxes starting from the top left are those that require your attention. 7. Access Infrastructure data using the Data explorer Teams that use multiple New Relic capabilities find it useful to create a single dashboard to visually correlate the infrastructure’s health with application, browser and synthetics metrics. That’s where New Relic data exploration features comes in. All the granular metrics and events collected by infrastructure monitoring are stored in New Relic and are accessible to you immediately. Having access to the raw metrics means you can run more custom queries using NRQL, and also create dashboards to share infrastructure metrics with your team. 8. Update your agents regularly New Relic’s software engineering team is constantly pushing out improvements and new features to improve our customers’ overall monitoring experience. In order to take advantage of all the awesomeness they’re delivering, we recommend regularly updating to the latest version of the infrastructure agent. Want more user tips? View training videos at New Relic University. Read the documentation. Check out our Tutorials. Ask a question in the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.36098,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "sections": "Infrastructure monitoring <em>best</em> <em>practices</em> <em>guide</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": "Want even longer periods of uninterrupted sleep? Here are eight <em>best</em> <em>practices</em> to make dynamic infrastructure and server monitoring even easier with <em>New</em> <em>Relic</em>&#x27;s infrastructure monitoring. 1. Install the infrastructure agent across your entire environment Our infrastructure monitoring solution"
      },
      "id": "6044151c28ccbc4b4f2c60af"
    },
    {
      "sections": [
        "Monitor apps and hosts with health maps",
        "Best practices",
        "Features",
        "Entities prioritized by health",
        "Tip",
        "Entity sort order criteria",
        "Views, filters, toggles",
        "View and use health maps",
        "Use cases",
        "The system's current health at a glance",
        "Scope of the problem: What else is broken?",
        "Scale of the problem: Use context to find a noisy neighbor",
        "Troubleshooting"
      ],
      "title": "Monitor apps and hosts with health maps",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "e7d1c9a1f713b33c4aa42c2cb5e1b7a6ac23c2e3",
      "image": "https://docs.newrelic.com/static/2a20f997d494faa0658b6d93c6ab1fd3/c1b63/health-map-demo-ss_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/monitor-apps-hosts-health-maps/",
      "published_at": "2021-06-09T05:34:54Z",
      "updated_at": "2021-03-13T07:37:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The health map provides a single place to visually monitor the health of all your apps and their related hosts, prioritized by health status. You can customize the page by using different views, filters, and toggles to organize the map in a way most relevant to you or your team. Use your health map to monitor applications and hosts in real-time, and quickly track down problems as they occur. Best practices The health map pulls data together from several New Relic solutions. To get the most out of the health map, we recommend using the following features: Infrastructure monitoring: Create filter sets to meaningfully categorize hosts. APM: Create tags to meaningfully categorize your applications. Alerts: Create alert policies that cover all your alerting scenarios. The health map is also especially useful if you're using containerized apps on hosts, with many instances of apps per host. Features one.newrelic.com > More > Health maps: The health map combines data from APM, infrastructure monitoring, and alerts to display your applications and hosts prioritized by health status. Health map features include: Entities prioritized by health The health map organizes the page by primary entity boxes. Primary entity boxes contain current (refreshes every two minutes), at-a-glance health and performance data, secondary entities related to it, and links to relevant APM or Infrastructure UI pages for detailed performance data. Example of a health map primary entity box with secondary entities. The health map prioritizes entities based on the health status of primary then secondary entities. The health status is determined using data from Alerts. The health map prioritizes the entities by first sorting the primary entities by health status, then sorting those by the health status of their secondary entities (related apps or hosts). The health map supports red, yellow, green, light green (not targeted by any conditions), and gray (application stopped reporting data) statuses for applications. The health map supports red, yellow, and green statuses for hosts. Tip If you have a host not targeted by any conditions, it appears green on the health map. If a host is not reporting data, it does not display on the health map unless you create a host-not-reporting condition. Entities are prioritized to the top based on this order: Entity sort order criteria Primary entities that have critical (red) health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Primary entities that have warning (yellow) health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Primary entities that have green health status ordered by: Count of secondary entities with critical (red) health status Count of secondary entities with warning (yellow) health status Count of secondary entities with green health status Count of secondary entities with light green health status (host view only) Count of secondary entities Name of entity Views, filters, toggles Use the Views dropdown to see the health of your system organized by your applications or your hosts. You can then filter those views by tags (apps) or filter set (hosts) to only see data most relevant to you or your team. Use the Show metrics/hosts toggles to show more/less information in the entity boxes. View Description Applications and related hosts Organizes the map by application entities to display for each app: Health status color Condition violation information, if any Summary metrics Health of related hosts the application is running on as reported by New Relic Infrastructure Map includes an optional app tag filter. Hosts and related applications Organizes the map by host entities to display for each host: Health status color Condition violation information, if any Summary metrics Health of related applications running on the host reported by New Relic APM Map includes an optional host filter. Filter sets and related hosts Uses data reported by our infrastructure monitoring to display: Health of the hosts in each filter set in Infrastructure View and use health maps Tip To get the most out of your health map, see health maps best practices. The health map represents the current state of your system. The map refreshes every two minutes. To view the health map: From one.newrelic.com, select More, then select Health maps. Select a view from the View dropdown to organize the map by application, host, or infrastructure filter sets. If using the views Applications and related hosts or Hosts and related applications, use the Filter dropdown to only display entities most interesting to you or your team. Optional: Toggle Show metrics or Show hosts to display more or less entity data. Optional: Display the health map on a TV / wallboard in your operations center to see your system's current health at a glance. If entities start showing critical (red) or warning (yellow) health statuses, hover over the entity or the Related hosts/apps tiles for violation information to quickly ascertain the scope and scale of the problem. Click through to the relevant APM or Infrastructure UI pages to get detailed information to start troubleshooting. Use cases The health map is designed to help operations and DevOps professionals, who are responsible for the health of large, complex environments, understand: The system's current health at a glance You like to have a view up on the TV wallboard in your network operations center (NOC) that represents the health of all systems. You may be focused on a task and not notice when an alert comes in. With a wallboard you can feel assured that you can always glance up to see if anything is on fire. Conversely, even though something is alerting, you like to see the applications and hosts that are healthy to help keep things in perspective. Scope of the problem: What else is broken? You are responsible for many applications at your company. At any point in time, something is alerting and because there are many applications deployed across many hosts, it’s difficult for you to keep track of everything and know what is experiencing problems. The health map gives you a single place to see the health and relationship between all applications and hosts. You can easily correlate the alerting host with applications deployed to it and easily answer the question: What else is broken right now? Scale of the problem: Use context to find a noisy neighbor With container orchestration deploying containerized applications across many hosts, it’s difficult for you to understand the scale of the problem when you receive an alert for a host or groups of hosts. By using the application view of the health map, you can see the alerting host along with all the other hosts serving the application. If the issue is isolated to a single host, you can change to the host view of the health map to see what other applications are deployed on that host. In that view, you see that the host has four applications running and one of the applications is alerting on higher than normal throughput. Troubleshooting If health map host boxes do not display their installed apps, or if application boxes do not display the Infrastructure-monitored hosts where they are running, see APM data missing from infrastructure monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.36072,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Best</em> <em>practices</em>",
        "tags": "<em>Best</em> <em>practices</em> <em>guides</em>",
        "body": " to monitor applications and hosts in real-time, and quickly track down problems as they occur. <em>Best</em> <em>practices</em> The health map pulls data together from several <em>New</em> <em>Relic</em> <em>solutions</em>. To get the most out of the health map, we recommend using the following features: Infrastructure monitoring: Create"
      },
      "id": "6044155e28ccbc6f972ea01c"
    }
  ],
  "/docs/new-relic-solutions/index": [
    {
      "sections": [
        "Establish objectives and baselines: define team SLOs",
        "Service level components",
        "Resources",
        "1. Build an inventory of services requiring SLOs",
        "2. Research customer expectations for SLOs",
        "3. Define SLOs",
        "4. Determine what can be instrumented",
        "New Relic products",
        "APM installation",
        "Infrastructure installation",
        "Infrastructure on-host integrations",
        "Synthetics",
        "Browser monitoring",
        "Mobile monitoring",
        "5. Review the default metrics",
        "6. Set up custom instrumentation",
        "7. Create dashboards to track SLIs"
      ],
      "title": "Establish objectives and baselines: define team SLOs",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "8988bb84fc5add9019fdc3ded2eb4de431ea63db",
      "image": "https://docs.newrelic.com/static/3a9f13f0b98dead811d9f7f56cc2a594/1f083/catalyst-establish-objectives-1_4.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-objectives-baselines-define-team-slos/",
      "published_at": "2021-06-09T18:11:26Z",
      "updated_at": "2021-06-02T16:58:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A DevOps transformation requires a cultural shift so that teams can build new skills and motivations for the type of cross-team work required in a true DevOps practice. The transformation can be difficult when the people involved do not see the benefits of change as a clear objective. Service level objectives (SLOs) provide a powerful mechanism to codify the goals of a DevOps team in a way that can be measured and shared. They also provide clear boundaries on service expectations that help teams achieve greater velocity and freedom in experimenting with new approaches. This tutorial defines SLOs for successful service delivery objectives and utilize New Relic instrumentation to surface the current performance metrics relative to those objectives. Measurable SLOs and visibility into your current progress against those SLOs ensure that you will be able to properly assess future optimization efforts. Service level components An SLO is an agreed upon means of measuring the performance of your service. The SLO defines a target value of a specified quantitative measure, which is called a service level indicator (SLI); for example: Average response time Response time percentile Application availability SLOs clarify a target value for SLIs; for example: Average response time should be less than 200 ms 95% of requests should be completed within 250 ms Availability of the service should be 99.99% Logically group SLOs together to provide an overall boolean indicator of whether or not the service is meeting expectations. For example, a helpful SLO for alerting purposes could be: 95% of requests completed within 250 ms AND availability is 99.99% Copy Service level components Example values SLI (Indicator) HTTP status codes SLO (Objective) < 1% HTTP 500s over 30 days SLA (Agreement) For every additional .1% of HTTP 500s, 5% refund of total contract Resources Value stream mapping can be a useful exercise to work through before setting SLOs. Work with your teams to clarify key components of your service and the appropriate metrics. Use these inputs as starting points for this tutorial. In addition: Learn about SLOs, SLIs, and SLAs from the Google Cloud Platform blog. Learn how New Relic has applied SLOs and SLIs into its reliability practices form this SREcon18 Americas presentation (approximately 21 minutes). 1. Build an inventory of services requiring SLOs Start defining SLOs for your application by first taking an inventory of the services that your application provides to both your internal and external customers. Draft a list of services. Make the scope of services you consider as comprehensive as possible. Engage your team members and other stakeholders to validate the list for completeness. Segment your application stack to understand the potential components that might require SLOs. For example, most applications can be segmented as: Application (backend/microservices) Dependency services (such as the message queue) Database Website Underlying servers This example lists components that would benefit from SLOs: Customer type Component name Owner Language stack Operating system External Service 1 John D. Java RHEL 6 Internal Service 2 Jane A. .NET Win2003 R2 Internal ActiveMQ John D. Java AIX External Website Jane A. Classic ASP Win2000 Internal MS SQL Dave Z. n/a Win2003 R2 Building a definitive list of services that require an SLO can be challenging, because an application often consists of many endpoints with complex interdependencies. Begin your SLO journey with pragmatism. Start by defining a broader, simpler set of SLOs that are driven by what your customers care about most and what your team can control. As your teams better align around SLOs, you can then begin to fine-tune and add more complexity. 2. Research customer expectations for SLOs Once you have an inventory of services, begin to gather the information you need to define the SLOs for those services. Interviews with customers that depend on your services are often valuable for understanding service expectations. For example, to define SLOs for internal teams, New Relic, ask questions such as: If possible, can you broadly categorize the types of requests we can expect from you and your service? To what extent do you or your service depend on timely responses to requests? Are there requests for which response time is not critical? How does your service handle unavailable dependencies or data? What is the maximum amount of unavailable data that your service can handle? At what threshold does your service fail if a request takes too long? What are acceptable rates of errors? What would a SLA look like between our product and yours? Existing usage data can also be a helpful research input. 3. Define SLOs Using the research on customer expectations that you gathered, draft a focused set of SLOs. New Relic recommends setting SLOs against one or more of the following SLIs: Application availability percentage Average response time Response percentile Error rate Apdex value Also, consider instrumenting and tracking the following SLIs: Throughput (peak and trough) Database call count and duration DNS and SSL timing DOM processing and page rendering Mean-time-to-detection (MTTD) For a more comprehensive list of potential areas to measure, see Measuring DevOps. Recommendation: To determine if your application is performing to customer expectations: Consider combining multiple SLIs (for example, availability and response time) into one SLO. Aim to define a consistent set of conditions across all of the services in your list. Consult your team and stakeholders to validate that the SLOs you set are reasonable, consistently attainable (even if you are not currently meeting them), and aligned to customer expectations. After you finish this step, you should have a set of well-defined SLOs and SLIs. 4. Determine what can be instrumented Now you're ready to deploy agents or monitors to establish a performance baseline for the SLIs you created. With proper instrumentation in place, you'll have visibility into the performance indicators that matter for your team and your customers. In addition, you'll also have a clear understanding of how to meet your SLOs. Identify the service components your team will optimize. Verify which application tiers meet New Relic monitoring requirements. To ensure you have robust baselines from which to work, determine the level of instrumentation that is possible (or allowed) within your organization. It's best practice to instrument everything you can, but there may be situations where instrumentation isn't viable. In that case, you should determine what other data is available or can be created. For example, you can gather logs to query them for SLO data and set alerts for them. one.newrelic.com > Logs: Use the New Relic log management UI to leverage your logs. If the application has a web front end in these situations, use New Relic synthetic monitors. Our synthetic monitors offer non-agent monitoring while still providing the ability to establish a baseline. To instrument the example applications and components in this tutorial, use these New Relic features: New Relic products Customer type Component name Tier owner Language stack Server OS New Relic products External Service 1 John D. Java RHEL 6 APM, infrastructure monitoring, synthetic monitors Internal Service 2 Jane A. .Net Win2003 R2 APM, infrastructure monitoring Internal ActiveMQ John D. Java AIX APM External Website Jane A. Classic ASP Win2000 Synthetic monitors Internal MS SQL Dave Z. NA Win2003 R2 Infrastructure monitoring, on-host integrations APM installation After reviewing the compatibility and requirements for New Relic APM, install an APM agent on your application stack. Steps for installing APM agents vary based on language agent type. Follow the install procedures for a specific APM agents. Infrastructure installation After reviewing the requirements for New Relic infrastructure monitoring, follow the install procedures to install the infrastructure agent on instances that host your applications. The infrastructure agent requires the following host permissions: Linux: To install and run the agent, you must have root privileges. Windows: To install and run the agent, you must have Administrator privileges. Infrastructure on-host integrations To gain extended visibility into applications that your code depends on, deploy on-host integrations based on their availability. New Relic supports several commonly used application components, including MySQL, Apache, NGINX, and more. For more information, see our on-host integration docs. Synthetics New Relic synthetic monitoring gives you a suite of automated, scriptable tools to monitor your websites, critical business transactions, and API endpoints. Follow the procedures to create a simple browser check. Be sure to verify that your website URL is accessible from the Synthetics public network locations. Browser monitoring New Relic browser monitoring provides deep insights into how your users are interacting with your application or website. Browser monitoring complements synthetic monitors with data based on actual user experiences, which is useful in discerning how DevOps efforts are ultimately improving the experience for the customer. For more information, see the compatibility and requirements, then install the New Relic browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs new performance data needs. Installation of New Relic mobile monitoring lets DevOps teams instrument iOS and Android applications to gain a fuller understanding of service delivery quality. 5. Review the default metrics After you deploy the agents and monitors, use service maps to review the default metrics that New Relic captures. For example, a typical service map show many of the common SLIs that application teams rely on, including response time, Apdex, throughput, and error rate metrics from APM. It also shows page load time, Ajax response, throughput, and error rate from browser monitoring. rpm.newrelic.com > Service maps: To explore detailed granularity for any area, use the service map's nodes. 6. Set up custom instrumentation To close any remaining gaps in visibility for your SLIs, use custom instrumentation. New Relic provides several avenues for adding custom instrumentation, including: Making API calls to agents from inside your source code Packaging XML-based custom instrumentation modules with deployed applications Adding UI-based instrumentation without a code deploy In addition, you can add custom attributes to each transaction event that match application performance factors to critical business information. Then you can track those attributes in Insights dashboards. For more information, see the custom instrumentation documentation for your application: APM Browser Infrastructure Insights Mobile Synthetics 7. Create dashboards to track SLIs Once you implement the appropriate instrumentation, it's easy to visualize your service level indicators with New Relic dashboards, which provide a single location to query and view all the data that New Relic tools gather. To learn more about how to run queries to produce charts and dashboards, see Introduction to query builder. For more about the data you can query, see New Relic data types. The metrics you capture will become your application's baseline. Share dashboards with your application team and stakeholders to provide visibility into what is happening with your application and to monitor future performance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 878.90497,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>New</em> <em>Relic</em> products",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " SLOs for successful service delivery objectives and utilize <em>New</em> <em>Relic</em> instrumentation to surface the current performance metrics relative to those objectives. Measurable SLOs and visibility into your current progress against those SLOs ensure that you will be able to properly assess future"
      },
      "id": "6044151ee7b9d259ef5799ea"
    },
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T17:37:49Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they’re consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s DevOps transformation. 2. Add automated deployment markers It’s important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM’s deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or “marker”, on charts and graphs at the deployment event’s timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you’re satisfied with the application’s performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 720.2693,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ". 2. Add automated deployment markers It’s important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. <em>New</em> <em>Relic</em> APM’s deployment markers feature allows you to record deployments for each application. A deployment marker is an event"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-06-08T22:24:00Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your application’s performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your application’s architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the application’s environment searchable. Any convention you use should be unique to your organization’s structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your application’s performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our application’s overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue you’re investigating. In this example, we’ve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, it’s obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If you’re not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, it’s responsible for 99.9% of the app server time, which means we’re getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issues—the red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that it’s highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customers—which will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the “norm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, it’s important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 720.2515,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). <em>New</em> <em>Relic</em> provides views of your application’s performance to help you"
      },
      "id": "60440e5328ccbccc972c60c0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services": [
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-06-09T19:00:10Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where I’m Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps team’s auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence “machine-learn” your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.68318,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-06-09T19:02:32Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your application’s performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relic’s reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.63535,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    },
    {
      "sections": [
        "Prioritize migration order",
        "1. Identify components",
        "2. Instrument applications",
        "3. Instrument hosts",
        "Tip",
        "4. Identify and track issues",
        "5. Create baselines",
        "6. Determine next steps",
        "Use service maps to find connections",
        "Use the New Relic Explorer to analyze health",
        "Use the Inventory page to identify components",
        "Expert tips for organizing your data"
      ],
      "title": "Prioritize migration order",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "f728804bace8dbe4a8176df74986fbf094e1ba62",
      "image": "https://docs.newrelic.com/static/9c3844bf72e803766bcb7b5146bf279b/c1b63/screen-service-maps_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/prioritize-migration-order/",
      "published_at": "2021-06-09T19:02:32Z",
      "updated_at": "2021-03-30T01:17:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you migrate any applications to the cloud, verify that the applications and their underlying server infrastructures are candidates for migration. When you instrument every layer of an application’s architecture, you get end-to-end visibility and are able to identify additional cloud migration risks or dependencies. Such analysis provides a more focused cloud migration priority list. 1. Identify components Create a list all of applications, services, and their underlying server infrastructures in your application portfolio that you want to migrate to the cloud. 2. Instrument applications Before you install any New Relic agents, review the compatibility and requirements for New Relic agents. Then, install the agents in your environment. After installing the agents, review the architecture of all the applications that you instrumented with an agent. Take note of the host for each tier of the application stack (database, application, web server, etc.), as you will install Infrastructure agents on each of those hosts in the next step. 3. Instrument hosts After reviewing the requirements for New Relic Infrastructure, follow the instructions for installing the Infrastructure agent on all hosts in your application stack: Install for Linux Install for Windows Server Install on AWS Elastic Beanstalk Install with a configuration management tool Also, in order to report data to New Relic, Infrastructure agents must have outbound access to certain domains and ports. If your system requires a proxy to connect to these domains, use the proxy setting. To gain extended visibility into applications that your code depends on, deploy on-host integrations. New Relic supports several commonly used application components, such as MySQL, Apache, and NGINX. Tip If you discover any applications, dependencies, or server infrastructure that you did not include in your list of components, instrument them with New Relic by installing the appropriate agents before moving forward. 4. Identify and track issues After installing, New Relic APM and Browser show you error events, error metrics, and detailed error traces for your applications. If an error or unhandled exception happens, the data appears on the Browser JavaScript errors page and the APM Error analytics page. From these pages, you can quickly troubleshoot runtime errors. Then, further analyze errors by grouping them according to attributes, by filtering them, or by searching for keywords in the event data. Each unhandled exception generates a transaction error event in Insights, and the dashboards are updated in real time. Event data is a record of a single event at a particular moment in time and consists of default attributes, like a timestamp, and an event type. You can also add custom attributes to provide more context. Tip Once you start capturing JavaScript errors as events in Insights, set up NRQL alerting so you can stay on top of your error data. 5. Create baselines One of the benefits of using APM while you are planning your cloud migration is that you get a deeper understanding of your application’s baseline. A baseline is a measurement of the current performance and availability of your application, which you then use as a comparison after your migration to validate your business case. 6. Determine next steps Use the following New Relic features to determine the next steps for your application: Use service maps to find connections After you install the APM agent, use service maps to get a full view into your application’s architecture. service maps allow you to identify any external services, web services, databases, or APIs that the application might be connecting to. Once you have an application node on the map, you can add its connections to the map, including New Relic Browser apps, databases, or external services (for example, third-party APIs). Every node you add is automatically connected to the map, so you see the shape of your application’s architecture emerge. one.newrelic.com > APM > (select an application) > Service map: Use service maps to understand the connections between different parts of your architecture. Use the New Relic Explorer to analyze health Use the explorer to see a high level overview of your services, which includes applications. Select the service to view a summary of your instrumented applications. You can then select dependencies to view the underlying infrastructure. To view this information at a glance, use the New Relic Explorer by going to one.newrelic.com > Explorer. From the explorer, you can: Sort applications by labels: Name Response Time Throughput Error Rate Identify owners Identify which users will be affected by a migration Discover application architecture details, such as the number of tiers and data sources Discover any dependencies Extract operational costs of each application or group one.newrelic.com > Explorer: The explorer allows you to see an overview of your services. Use the Inventory page to identify components Infrastructure's inventory page gives you visibility into the software packages installed on your servers. New Relic Infrastructure reports detailed information about a system’s per-host configuration, including system modules, configuration files, metadata, packages, services, user sessions, and more. The inventory page provides a real-time, filterable, searchable view into each host’s configuration. Use this data to identify various components of the applications you want to migrate. one.newrelic.com > Infrastructure > Inventory: Use the filter and search functions to find information for specific items across all your hosts. Analyze these criteria for each of your apps to determine the next steps for your migration: Should you move your app to a new host or platform, or re-factor its code before migrating it? Should you retire the application without moving it to the cloud? By using the information that New Relic provides, you are better equipped to create a prioritized list of applications ready for cloud migration. Expert tips for organizing your data In APM, use labels to group the instrumented applications into meaningful categories like environments, functional areas, technologies, business units. Or, you can separate them for development or operational teams. In Infrastructure, use filter sets to organize hosts into cluster, environment, role, or any Infrastructure attribute based on criteria that you define.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.66823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Use the <em>New</em> <em>Relic</em> Explorer to analyze health",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " to determine the next steps for your migration: Should you move your app to a <em>new</em> host or platform, or re-factor its code before migrating it? Should you retire the application without moving it to the <em>cloud</em>? By using the information that <em>New</em> <em>Relic</em> provides, you are better equipped to create a prioritized list"
      },
      "id": "604458bd64441f87e0378ebf"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics": [
    {
      "sections": [
        "Establish objectives and baselines: define team SLOs",
        "Service level components",
        "Resources",
        "1. Build an inventory of services requiring SLOs",
        "2. Research customer expectations for SLOs",
        "3. Define SLOs",
        "4. Determine what can be instrumented",
        "New Relic products",
        "APM installation",
        "Infrastructure installation",
        "Infrastructure on-host integrations",
        "Synthetics",
        "Browser monitoring",
        "Mobile monitoring",
        "5. Review the default metrics",
        "6. Set up custom instrumentation",
        "7. Create dashboards to track SLIs"
      ],
      "title": "Establish objectives and baselines: define team SLOs",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "8988bb84fc5add9019fdc3ded2eb4de431ea63db",
      "image": "https://docs.newrelic.com/static/3a9f13f0b98dead811d9f7f56cc2a594/1f083/catalyst-establish-objectives-1_4.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-objectives-baselines-define-team-slos/",
      "published_at": "2021-06-09T18:11:26Z",
      "updated_at": "2021-06-02T16:58:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A DevOps transformation requires a cultural shift so that teams can build new skills and motivations for the type of cross-team work required in a true DevOps practice. The transformation can be difficult when the people involved do not see the benefits of change as a clear objective. Service level objectives (SLOs) provide a powerful mechanism to codify the goals of a DevOps team in a way that can be measured and shared. They also provide clear boundaries on service expectations that help teams achieve greater velocity and freedom in experimenting with new approaches. This tutorial defines SLOs for successful service delivery objectives and utilize New Relic instrumentation to surface the current performance metrics relative to those objectives. Measurable SLOs and visibility into your current progress against those SLOs ensure that you will be able to properly assess future optimization efforts. Service level components An SLO is an agreed upon means of measuring the performance of your service. The SLO defines a target value of a specified quantitative measure, which is called a service level indicator (SLI); for example: Average response time Response time percentile Application availability SLOs clarify a target value for SLIs; for example: Average response time should be less than 200 ms 95% of requests should be completed within 250 ms Availability of the service should be 99.99% Logically group SLOs together to provide an overall boolean indicator of whether or not the service is meeting expectations. For example, a helpful SLO for alerting purposes could be: 95% of requests completed within 250 ms AND availability is 99.99% Copy Service level components Example values SLI (Indicator) HTTP status codes SLO (Objective) < 1% HTTP 500s over 30 days SLA (Agreement) For every additional .1% of HTTP 500s, 5% refund of total contract Resources Value stream mapping can be a useful exercise to work through before setting SLOs. Work with your teams to clarify key components of your service and the appropriate metrics. Use these inputs as starting points for this tutorial. In addition: Learn about SLOs, SLIs, and SLAs from the Google Cloud Platform blog. Learn how New Relic has applied SLOs and SLIs into its reliability practices form this SREcon18 Americas presentation (approximately 21 minutes). 1. Build an inventory of services requiring SLOs Start defining SLOs for your application by first taking an inventory of the services that your application provides to both your internal and external customers. Draft a list of services. Make the scope of services you consider as comprehensive as possible. Engage your team members and other stakeholders to validate the list for completeness. Segment your application stack to understand the potential components that might require SLOs. For example, most applications can be segmented as: Application (backend/microservices) Dependency services (such as the message queue) Database Website Underlying servers This example lists components that would benefit from SLOs: Customer type Component name Owner Language stack Operating system External Service 1 John D. Java RHEL 6 Internal Service 2 Jane A. .NET Win2003 R2 Internal ActiveMQ John D. Java AIX External Website Jane A. Classic ASP Win2000 Internal MS SQL Dave Z. n/a Win2003 R2 Building a definitive list of services that require an SLO can be challenging, because an application often consists of many endpoints with complex interdependencies. Begin your SLO journey with pragmatism. Start by defining a broader, simpler set of SLOs that are driven by what your customers care about most and what your team can control. As your teams better align around SLOs, you can then begin to fine-tune and add more complexity. 2. Research customer expectations for SLOs Once you have an inventory of services, begin to gather the information you need to define the SLOs for those services. Interviews with customers that depend on your services are often valuable for understanding service expectations. For example, to define SLOs for internal teams, New Relic, ask questions such as: If possible, can you broadly categorize the types of requests we can expect from you and your service? To what extent do you or your service depend on timely responses to requests? Are there requests for which response time is not critical? How does your service handle unavailable dependencies or data? What is the maximum amount of unavailable data that your service can handle? At what threshold does your service fail if a request takes too long? What are acceptable rates of errors? What would a SLA look like between our product and yours? Existing usage data can also be a helpful research input. 3. Define SLOs Using the research on customer expectations that you gathered, draft a focused set of SLOs. New Relic recommends setting SLOs against one or more of the following SLIs: Application availability percentage Average response time Response percentile Error rate Apdex value Also, consider instrumenting and tracking the following SLIs: Throughput (peak and trough) Database call count and duration DNS and SSL timing DOM processing and page rendering Mean-time-to-detection (MTTD) For a more comprehensive list of potential areas to measure, see Measuring DevOps. Recommendation: To determine if your application is performing to customer expectations: Consider combining multiple SLIs (for example, availability and response time) into one SLO. Aim to define a consistent set of conditions across all of the services in your list. Consult your team and stakeholders to validate that the SLOs you set are reasonable, consistently attainable (even if you are not currently meeting them), and aligned to customer expectations. After you finish this step, you should have a set of well-defined SLOs and SLIs. 4. Determine what can be instrumented Now you're ready to deploy agents or monitors to establish a performance baseline for the SLIs you created. With proper instrumentation in place, you'll have visibility into the performance indicators that matter for your team and your customers. In addition, you'll also have a clear understanding of how to meet your SLOs. Identify the service components your team will optimize. Verify which application tiers meet New Relic monitoring requirements. To ensure you have robust baselines from which to work, determine the level of instrumentation that is possible (or allowed) within your organization. It's best practice to instrument everything you can, but there may be situations where instrumentation isn't viable. In that case, you should determine what other data is available or can be created. For example, you can gather logs to query them for SLO data and set alerts for them. one.newrelic.com > Logs: Use the New Relic log management UI to leverage your logs. If the application has a web front end in these situations, use New Relic synthetic monitors. Our synthetic monitors offer non-agent monitoring while still providing the ability to establish a baseline. To instrument the example applications and components in this tutorial, use these New Relic features: New Relic products Customer type Component name Tier owner Language stack Server OS New Relic products External Service 1 John D. Java RHEL 6 APM, infrastructure monitoring, synthetic monitors Internal Service 2 Jane A. .Net Win2003 R2 APM, infrastructure monitoring Internal ActiveMQ John D. Java AIX APM External Website Jane A. Classic ASP Win2000 Synthetic monitors Internal MS SQL Dave Z. NA Win2003 R2 Infrastructure monitoring, on-host integrations APM installation After reviewing the compatibility and requirements for New Relic APM, install an APM agent on your application stack. Steps for installing APM agents vary based on language agent type. Follow the install procedures for a specific APM agents. Infrastructure installation After reviewing the requirements for New Relic infrastructure monitoring, follow the install procedures to install the infrastructure agent on instances that host your applications. The infrastructure agent requires the following host permissions: Linux: To install and run the agent, you must have root privileges. Windows: To install and run the agent, you must have Administrator privileges. Infrastructure on-host integrations To gain extended visibility into applications that your code depends on, deploy on-host integrations based on their availability. New Relic supports several commonly used application components, including MySQL, Apache, NGINX, and more. For more information, see our on-host integration docs. Synthetics New Relic synthetic monitoring gives you a suite of automated, scriptable tools to monitor your websites, critical business transactions, and API endpoints. Follow the procedures to create a simple browser check. Be sure to verify that your website URL is accessible from the Synthetics public network locations. Browser monitoring New Relic browser monitoring provides deep insights into how your users are interacting with your application or website. Browser monitoring complements synthetic monitors with data based on actual user experiences, which is useful in discerning how DevOps efforts are ultimately improving the experience for the customer. For more information, see the compatibility and requirements, then install the New Relic browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs new performance data needs. Installation of New Relic mobile monitoring lets DevOps teams instrument iOS and Android applications to gain a fuller understanding of service delivery quality. 5. Review the default metrics After you deploy the agents and monitors, use service maps to review the default metrics that New Relic captures. For example, a typical service map show many of the common SLIs that application teams rely on, including response time, Apdex, throughput, and error rate metrics from APM. It also shows page load time, Ajax response, throughput, and error rate from browser monitoring. rpm.newrelic.com > Service maps: To explore detailed granularity for any area, use the service map's nodes. 6. Set up custom instrumentation To close any remaining gaps in visibility for your SLIs, use custom instrumentation. New Relic provides several avenues for adding custom instrumentation, including: Making API calls to agents from inside your source code Packaging XML-based custom instrumentation modules with deployed applications Adding UI-based instrumentation without a code deploy In addition, you can add custom attributes to each transaction event that match application performance factors to critical business information. Then you can track those attributes in Insights dashboards. For more information, see the custom instrumentation documentation for your application: APM Browser Infrastructure Insights Mobile Synthetics 7. Create dashboards to track SLIs Once you implement the appropriate instrumentation, it's easy to visualize your service level indicators with New Relic dashboards, which provide a single location to query and view all the data that New Relic tools gather. To learn more about how to run queries to produce charts and dashboards, see Introduction to query builder. For more about the data you can query, see New Relic data types. The metrics you capture will become your application's baseline. Share dashboards with your application team and stakeholders to provide visibility into what is happening with your application and to monitor future performance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7434,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>New</em> <em>Relic</em> products",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": ". For more information, see the compatibility and requirements, then install the <em>New</em> <em>Relic</em> browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs <em>new</em> performance data needs. Installation of <em>New</em> <em>Relic</em> mobile monitoring lets <em>DevOps</em> teams instrument iOS"
      },
      "id": "6044151ee7b9d259ef5799ea"
    },
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T17:37:49Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they’re consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s DevOps transformation. 2. Add automated deployment markers It’s important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM’s deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or “marker”, on charts and graphs at the deployment event’s timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you’re satisfied with the application’s performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.82248,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "Resolve dependency risk: identify and analyze potential issues",
        "Prerequisites",
        "1. Analyze dependencies with service maps",
        "2. Identify back-end application dependency risks",
        "Tip",
        "3. Identify front-end dependency risk",
        "4. Identify Microservice Dependencies",
        "5. Create an action plan for risk mitigation"
      ],
      "title": "Resolve dependency risk: identify and analyze potential issues",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "4911ddf0c6fca572b52e22fbe464f21f0c6f338f",
      "image": "https://docs.newrelic.com/static/d1d4cf78d193ae770219cfdb9f6f792f/c1b63/distributed-trace_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues/",
      "published_at": "2021-06-09T16:30:30Z",
      "updated_at": "2021-05-15T22:15:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Successfully scaling DevOps requires a robust understanding of dependencies across application teams and related services. Use New Relics service maps to discover and mitigate risky dependencies from upstream and downstream services. Prerequisites This tutorial assumes you’ve completed the previous DevOps procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. New Relic recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com > Service Maps > App/Service list This initial view shows all applications that are configured in your account. Applications that have violated a warning threshold are shown in yellow, and those with an active alert are shown in red. Healthy applications appear in green. New Relic uses a bold line to map applications to the services (such as databases) they connect to. Familiarize yourself with these maps to see how applications and their services fit together. Take note of which applications have the most dependencies and which rely on the same dependency, such as an API. Click an application to see high level metrics about that app, including throughput, response time, Apdex score, and error rate for the last 30 minutes. Tracking throughput is a good way to determine which of your applications are serving the most traffic. After looking at the architecture as a whole, review the applications that have the most dependencies. Select the App/Services list to see a full list of your applications. one.newrelic.com > Service Maps > App/Service list In this example, we’ve chosen Tower-Chicago from the App/Services list. All of the traffic being sent to Tower-Chicago is coming from Proxy-East. In this case, Tower-Chicago is showing 48.3 requests per minute, or 11.3% of the 426 requests per minute flowing through Proxy-East. one.newrelic.com > Service Maps > App/Service list In most cases, the separate applications and services represented in service maps are created and maintained by separate teams. This exercise of walking through the dependencies of your architecture should involve representatives from each of those teams. Teams should work together to ask questions such as: How critical is this particular dependency? What would happen if it were to go down? What happened last time it went down? Was there a revenue loss? 2. Identify back-end application dependency risks Once you’ve analyzed your applications’ dependencies, you’ll want to examine the quality of dependency execution. For example, is the dependency stable and predictable for each application or transaction you’ve identified? To do this, you’ll first need to gather as much information as you can about the applications from New Relic Insights, which helps you analyze data that is collected about the applications in more detail. Here is an example NRQL query to further analyze back-end service performance: SELECT count(appName)/30 as 'Throughput', apdex(duration), average(duration), stddev(duration), max(duration), count(error_type), uniquecount(host) FROM Transaction FACET appName SINCE 30 MINUTES AGO Copy This query shows you each application’s request per minute (throughput), Apdex score, and an overview of how the application is performing overall (through the standard deviation calculation, in which lower numbers are generally better). It also shows errors for the time period and the number of hosts on which the application is running. insights.newrelic.com > query results Next, gather information on incidents and events related to the services from New Relic Alerts: Click Alerts > Incidents > All Incidents. alerts.newrelic.com > Incidents > All Incidents Click Alerts > Events > All Events. alerts.newrelic.com > Incidents > All Events Tip Using webhooks to send alert events to New Relic Insights, allows you to supplement your dashboards with Alerts data. The process is outlined in this community discussion post. Here is a simplified example of the results of this exercise: Application Number of dependencies RPM Hosts APDEX (avg) Last outage TTR (hrs) Routing Service 10 983 4 .93 2/19/18 .75 Tower Austin 1 58 1 .95 10/11/17 1.5 Proxy-East 11 498 4 .92 1/4/18 .25 Proxy-West 11 495 4 .97 12/3/17 .25 WebPortal 7 396 8 .98 4/1/18 2.5 Supplement this data with the data that your teams know about your service and that you gathered from the dependency exercise in step 1, and use that data to develop hypotheses about the highest risk areas in your services that should be mitigated. 3. Identify front-end dependency risk Once you’ve analyzed back-end dependencies, explore front-end dependencies. This is a critical step because as you walk higher up the stack and closer to the user, you will likely have more dependencies and abstractions. Service maps seamlessly integrate data from New Relic Browser and New Relic Mobile to help you understand the dependencies from front-end user interfaces to back-end services. one.newrelic.com > Service Maps Use the service map view to drill into front-end dependencies, and execute a similar exercise to the one you executed for back-end dependencies. This exercise will again expose data to help you identify risk areas you should address and optimize. We recommend that you conduct the analysis with user interface (UI) teams so that you can also gather a complementary qualitative understanding of what the UI teams consider critical based on their experience. A ranking from the UI teams of the most critical dependency is a useful output of this work. 4. Identify Microservice Dependencies If you are using microservices, you can have dozens, if not hundreds, of services that are calling each other. Use Distributed Tracing to see how all those services connect together and how your requests flow through those different services. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. A distributed trace is composed of multiple \"spans,\" which represent time spent in services or resources of those services. Click on the Distributed tracing menu in New Relic APM left nav. You can see “trace listing” view where you’ll be able to quickly identify slow traces and traces with errors. The scatter plot lets you easily see outliers. Below that are the trace summaries, click on a trace to see details. Dive into distributed traces to see how long each span takes. Click into each span to see historical performance charts and associated attributes that layer in the context you need to understand and troubleshoot issues. one.newrelic.com > APM > (select an app) > Distributed tracing This rounds out your list of dependencies. 5. Create an action plan for risk mitigation Once you’ve analyzed the dependencies across your application from both front-end and back-end services, create an action plan to reduce dependency risks and achieve your service level objectives (SLO). As you prioritize these next steps, we recommend you keep these four principles in mind: Understand your risk tolerance. It’s helpful to have a clear picture of your tolerance for risk, which ideally should be informed by your service level objectives (refer to the Establish Objectives and Baselines tutorial for more information). Set an alert policy to monitor dependencies that you’ve determined have a high relationship to SLO achievement. Minimize dependencies. The simpler you keep your code, the less functions you'll have referring to other modules. Removing unnecessary complexity is an important way to ensure you have a maintainable system that meets your customers’ expectations. Localize dependencies. For the code you write, package together functions that depend on each other whenever possible. Stabilize dependencies. When dependencies are unavoidable, mitigate risks by ensuring these dependencies point to modules that are the least likely to change or are easier to substitute. When your action plan is complete, monitor the results of the efforts. The efficacy of your actions to resolve dependency risks should ultimately be measured by your SLOs",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.61246,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>DevOps</em> procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. <em>New</em> <em>Relic</em> recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com &gt; Service Maps"
      },
      "id": "60440f13e7b9d2ec025799f0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/automate-instrumentation": [
    {
      "sections": [
        "Establish objectives and baselines: define team SLOs",
        "Service level components",
        "Resources",
        "1. Build an inventory of services requiring SLOs",
        "2. Research customer expectations for SLOs",
        "3. Define SLOs",
        "4. Determine what can be instrumented",
        "New Relic products",
        "APM installation",
        "Infrastructure installation",
        "Infrastructure on-host integrations",
        "Synthetics",
        "Browser monitoring",
        "Mobile monitoring",
        "5. Review the default metrics",
        "6. Set up custom instrumentation",
        "7. Create dashboards to track SLIs"
      ],
      "title": "Establish objectives and baselines: define team SLOs",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "8988bb84fc5add9019fdc3ded2eb4de431ea63db",
      "image": "https://docs.newrelic.com/static/3a9f13f0b98dead811d9f7f56cc2a594/1f083/catalyst-establish-objectives-1_4.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-objectives-baselines-define-team-slos/",
      "published_at": "2021-06-09T18:11:26Z",
      "updated_at": "2021-06-02T16:58:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A DevOps transformation requires a cultural shift so that teams can build new skills and motivations for the type of cross-team work required in a true DevOps practice. The transformation can be difficult when the people involved do not see the benefits of change as a clear objective. Service level objectives (SLOs) provide a powerful mechanism to codify the goals of a DevOps team in a way that can be measured and shared. They also provide clear boundaries on service expectations that help teams achieve greater velocity and freedom in experimenting with new approaches. This tutorial defines SLOs for successful service delivery objectives and utilize New Relic instrumentation to surface the current performance metrics relative to those objectives. Measurable SLOs and visibility into your current progress against those SLOs ensure that you will be able to properly assess future optimization efforts. Service level components An SLO is an agreed upon means of measuring the performance of your service. The SLO defines a target value of a specified quantitative measure, which is called a service level indicator (SLI); for example: Average response time Response time percentile Application availability SLOs clarify a target value for SLIs; for example: Average response time should be less than 200 ms 95% of requests should be completed within 250 ms Availability of the service should be 99.99% Logically group SLOs together to provide an overall boolean indicator of whether or not the service is meeting expectations. For example, a helpful SLO for alerting purposes could be: 95% of requests completed within 250 ms AND availability is 99.99% Copy Service level components Example values SLI (Indicator) HTTP status codes SLO (Objective) < 1% HTTP 500s over 30 days SLA (Agreement) For every additional .1% of HTTP 500s, 5% refund of total contract Resources Value stream mapping can be a useful exercise to work through before setting SLOs. Work with your teams to clarify key components of your service and the appropriate metrics. Use these inputs as starting points for this tutorial. In addition: Learn about SLOs, SLIs, and SLAs from the Google Cloud Platform blog. Learn how New Relic has applied SLOs and SLIs into its reliability practices form this SREcon18 Americas presentation (approximately 21 minutes). 1. Build an inventory of services requiring SLOs Start defining SLOs for your application by first taking an inventory of the services that your application provides to both your internal and external customers. Draft a list of services. Make the scope of services you consider as comprehensive as possible. Engage your team members and other stakeholders to validate the list for completeness. Segment your application stack to understand the potential components that might require SLOs. For example, most applications can be segmented as: Application (backend/microservices) Dependency services (such as the message queue) Database Website Underlying servers This example lists components that would benefit from SLOs: Customer type Component name Owner Language stack Operating system External Service 1 John D. Java RHEL 6 Internal Service 2 Jane A. .NET Win2003 R2 Internal ActiveMQ John D. Java AIX External Website Jane A. Classic ASP Win2000 Internal MS SQL Dave Z. n/a Win2003 R2 Building a definitive list of services that require an SLO can be challenging, because an application often consists of many endpoints with complex interdependencies. Begin your SLO journey with pragmatism. Start by defining a broader, simpler set of SLOs that are driven by what your customers care about most and what your team can control. As your teams better align around SLOs, you can then begin to fine-tune and add more complexity. 2. Research customer expectations for SLOs Once you have an inventory of services, begin to gather the information you need to define the SLOs for those services. Interviews with customers that depend on your services are often valuable for understanding service expectations. For example, to define SLOs for internal teams, New Relic, ask questions such as: If possible, can you broadly categorize the types of requests we can expect from you and your service? To what extent do you or your service depend on timely responses to requests? Are there requests for which response time is not critical? How does your service handle unavailable dependencies or data? What is the maximum amount of unavailable data that your service can handle? At what threshold does your service fail if a request takes too long? What are acceptable rates of errors? What would a SLA look like between our product and yours? Existing usage data can also be a helpful research input. 3. Define SLOs Using the research on customer expectations that you gathered, draft a focused set of SLOs. New Relic recommends setting SLOs against one or more of the following SLIs: Application availability percentage Average response time Response percentile Error rate Apdex value Also, consider instrumenting and tracking the following SLIs: Throughput (peak and trough) Database call count and duration DNS and SSL timing DOM processing and page rendering Mean-time-to-detection (MTTD) For a more comprehensive list of potential areas to measure, see Measuring DevOps. Recommendation: To determine if your application is performing to customer expectations: Consider combining multiple SLIs (for example, availability and response time) into one SLO. Aim to define a consistent set of conditions across all of the services in your list. Consult your team and stakeholders to validate that the SLOs you set are reasonable, consistently attainable (even if you are not currently meeting them), and aligned to customer expectations. After you finish this step, you should have a set of well-defined SLOs and SLIs. 4. Determine what can be instrumented Now you're ready to deploy agents or monitors to establish a performance baseline for the SLIs you created. With proper instrumentation in place, you'll have visibility into the performance indicators that matter for your team and your customers. In addition, you'll also have a clear understanding of how to meet your SLOs. Identify the service components your team will optimize. Verify which application tiers meet New Relic monitoring requirements. To ensure you have robust baselines from which to work, determine the level of instrumentation that is possible (or allowed) within your organization. It's best practice to instrument everything you can, but there may be situations where instrumentation isn't viable. In that case, you should determine what other data is available or can be created. For example, you can gather logs to query them for SLO data and set alerts for them. one.newrelic.com > Logs: Use the New Relic log management UI to leverage your logs. If the application has a web front end in these situations, use New Relic synthetic monitors. Our synthetic monitors offer non-agent monitoring while still providing the ability to establish a baseline. To instrument the example applications and components in this tutorial, use these New Relic features: New Relic products Customer type Component name Tier owner Language stack Server OS New Relic products External Service 1 John D. Java RHEL 6 APM, infrastructure monitoring, synthetic monitors Internal Service 2 Jane A. .Net Win2003 R2 APM, infrastructure monitoring Internal ActiveMQ John D. Java AIX APM External Website Jane A. Classic ASP Win2000 Synthetic monitors Internal MS SQL Dave Z. NA Win2003 R2 Infrastructure monitoring, on-host integrations APM installation After reviewing the compatibility and requirements for New Relic APM, install an APM agent on your application stack. Steps for installing APM agents vary based on language agent type. Follow the install procedures for a specific APM agents. Infrastructure installation After reviewing the requirements for New Relic infrastructure monitoring, follow the install procedures to install the infrastructure agent on instances that host your applications. The infrastructure agent requires the following host permissions: Linux: To install and run the agent, you must have root privileges. Windows: To install and run the agent, you must have Administrator privileges. Infrastructure on-host integrations To gain extended visibility into applications that your code depends on, deploy on-host integrations based on their availability. New Relic supports several commonly used application components, including MySQL, Apache, NGINX, and more. For more information, see our on-host integration docs. Synthetics New Relic synthetic monitoring gives you a suite of automated, scriptable tools to monitor your websites, critical business transactions, and API endpoints. Follow the procedures to create a simple browser check. Be sure to verify that your website URL is accessible from the Synthetics public network locations. Browser monitoring New Relic browser monitoring provides deep insights into how your users are interacting with your application or website. Browser monitoring complements synthetic monitors with data based on actual user experiences, which is useful in discerning how DevOps efforts are ultimately improving the experience for the customer. For more information, see the compatibility and requirements, then install the New Relic browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs new performance data needs. Installation of New Relic mobile monitoring lets DevOps teams instrument iOS and Android applications to gain a fuller understanding of service delivery quality. 5. Review the default metrics After you deploy the agents and monitors, use service maps to review the default metrics that New Relic captures. For example, a typical service map show many of the common SLIs that application teams rely on, including response time, Apdex, throughput, and error rate metrics from APM. It also shows page load time, Ajax response, throughput, and error rate from browser monitoring. rpm.newrelic.com > Service maps: To explore detailed granularity for any area, use the service map's nodes. 6. Set up custom instrumentation To close any remaining gaps in visibility for your SLIs, use custom instrumentation. New Relic provides several avenues for adding custom instrumentation, including: Making API calls to agents from inside your source code Packaging XML-based custom instrumentation modules with deployed applications Adding UI-based instrumentation without a code deploy In addition, you can add custom attributes to each transaction event that match application performance factors to critical business information. Then you can track those attributes in Insights dashboards. For more information, see the custom instrumentation documentation for your application: APM Browser Infrastructure Insights Mobile Synthetics 7. Create dashboards to track SLIs Once you implement the appropriate instrumentation, it's easy to visualize your service level indicators with New Relic dashboards, which provide a single location to query and view all the data that New Relic tools gather. To learn more about how to run queries to produce charts and dashboards, see Introduction to query builder. For more about the data you can query, see New Relic data types. The metrics you capture will become your application's baseline. Share dashboards with your application team and stakeholders to provide visibility into what is happening with your application and to monitor future performance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.74335,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>New</em> <em>Relic</em> products",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": ". For more information, see the compatibility and requirements, then install the <em>New</em> <em>Relic</em> browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs <em>new</em> performance data needs. Installation of <em>New</em> <em>Relic</em> mobile monitoring lets <em>DevOps</em> teams instrument iOS"
      },
      "id": "6044151ee7b9d259ef5799ea"
    },
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T17:37:49Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they’re consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s DevOps transformation. 2. Add automated deployment markers It’s important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM’s deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or “marker”, on charts and graphs at the deployment event’s timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you’re satisfied with the application’s performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.82245,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-06-08T22:24:00Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your application’s performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your application’s architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the application’s environment searchable. Any convention you use should be unique to your organization’s structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your application’s performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our application’s overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue you’re investigating. In this example, we’ve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, it’s obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If you’re not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, it’s responsible for 99.9% of the app server time, which means we’re getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issues—the red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that it’s highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customers—which will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the “norm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, it’s important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.81642,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/customer-experience-improvement-track-experience-indicators": [
    {
      "sections": [
        "Establish objectives and baselines: define team SLOs",
        "Service level components",
        "Resources",
        "1. Build an inventory of services requiring SLOs",
        "2. Research customer expectations for SLOs",
        "3. Define SLOs",
        "4. Determine what can be instrumented",
        "New Relic products",
        "APM installation",
        "Infrastructure installation",
        "Infrastructure on-host integrations",
        "Synthetics",
        "Browser monitoring",
        "Mobile monitoring",
        "5. Review the default metrics",
        "6. Set up custom instrumentation",
        "7. Create dashboards to track SLIs"
      ],
      "title": "Establish objectives and baselines: define team SLOs",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "8988bb84fc5add9019fdc3ded2eb4de431ea63db",
      "image": "https://docs.newrelic.com/static/3a9f13f0b98dead811d9f7f56cc2a594/1f083/catalyst-establish-objectives-1_4.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-objectives-baselines-define-team-slos/",
      "published_at": "2021-06-09T18:11:26Z",
      "updated_at": "2021-06-02T16:58:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A DevOps transformation requires a cultural shift so that teams can build new skills and motivations for the type of cross-team work required in a true DevOps practice. The transformation can be difficult when the people involved do not see the benefits of change as a clear objective. Service level objectives (SLOs) provide a powerful mechanism to codify the goals of a DevOps team in a way that can be measured and shared. They also provide clear boundaries on service expectations that help teams achieve greater velocity and freedom in experimenting with new approaches. This tutorial defines SLOs for successful service delivery objectives and utilize New Relic instrumentation to surface the current performance metrics relative to those objectives. Measurable SLOs and visibility into your current progress against those SLOs ensure that you will be able to properly assess future optimization efforts. Service level components An SLO is an agreed upon means of measuring the performance of your service. The SLO defines a target value of a specified quantitative measure, which is called a service level indicator (SLI); for example: Average response time Response time percentile Application availability SLOs clarify a target value for SLIs; for example: Average response time should be less than 200 ms 95% of requests should be completed within 250 ms Availability of the service should be 99.99% Logically group SLOs together to provide an overall boolean indicator of whether or not the service is meeting expectations. For example, a helpful SLO for alerting purposes could be: 95% of requests completed within 250 ms AND availability is 99.99% Copy Service level components Example values SLI (Indicator) HTTP status codes SLO (Objective) < 1% HTTP 500s over 30 days SLA (Agreement) For every additional .1% of HTTP 500s, 5% refund of total contract Resources Value stream mapping can be a useful exercise to work through before setting SLOs. Work with your teams to clarify key components of your service and the appropriate metrics. Use these inputs as starting points for this tutorial. In addition: Learn about SLOs, SLIs, and SLAs from the Google Cloud Platform blog. Learn how New Relic has applied SLOs and SLIs into its reliability practices form this SREcon18 Americas presentation (approximately 21 minutes). 1. Build an inventory of services requiring SLOs Start defining SLOs for your application by first taking an inventory of the services that your application provides to both your internal and external customers. Draft a list of services. Make the scope of services you consider as comprehensive as possible. Engage your team members and other stakeholders to validate the list for completeness. Segment your application stack to understand the potential components that might require SLOs. For example, most applications can be segmented as: Application (backend/microservices) Dependency services (such as the message queue) Database Website Underlying servers This example lists components that would benefit from SLOs: Customer type Component name Owner Language stack Operating system External Service 1 John D. Java RHEL 6 Internal Service 2 Jane A. .NET Win2003 R2 Internal ActiveMQ John D. Java AIX External Website Jane A. Classic ASP Win2000 Internal MS SQL Dave Z. n/a Win2003 R2 Building a definitive list of services that require an SLO can be challenging, because an application often consists of many endpoints with complex interdependencies. Begin your SLO journey with pragmatism. Start by defining a broader, simpler set of SLOs that are driven by what your customers care about most and what your team can control. As your teams better align around SLOs, you can then begin to fine-tune and add more complexity. 2. Research customer expectations for SLOs Once you have an inventory of services, begin to gather the information you need to define the SLOs for those services. Interviews with customers that depend on your services are often valuable for understanding service expectations. For example, to define SLOs for internal teams, New Relic, ask questions such as: If possible, can you broadly categorize the types of requests we can expect from you and your service? To what extent do you or your service depend on timely responses to requests? Are there requests for which response time is not critical? How does your service handle unavailable dependencies or data? What is the maximum amount of unavailable data that your service can handle? At what threshold does your service fail if a request takes too long? What are acceptable rates of errors? What would a SLA look like between our product and yours? Existing usage data can also be a helpful research input. 3. Define SLOs Using the research on customer expectations that you gathered, draft a focused set of SLOs. New Relic recommends setting SLOs against one or more of the following SLIs: Application availability percentage Average response time Response percentile Error rate Apdex value Also, consider instrumenting and tracking the following SLIs: Throughput (peak and trough) Database call count and duration DNS and SSL timing DOM processing and page rendering Mean-time-to-detection (MTTD) For a more comprehensive list of potential areas to measure, see Measuring DevOps. Recommendation: To determine if your application is performing to customer expectations: Consider combining multiple SLIs (for example, availability and response time) into one SLO. Aim to define a consistent set of conditions across all of the services in your list. Consult your team and stakeholders to validate that the SLOs you set are reasonable, consistently attainable (even if you are not currently meeting them), and aligned to customer expectations. After you finish this step, you should have a set of well-defined SLOs and SLIs. 4. Determine what can be instrumented Now you're ready to deploy agents or monitors to establish a performance baseline for the SLIs you created. With proper instrumentation in place, you'll have visibility into the performance indicators that matter for your team and your customers. In addition, you'll also have a clear understanding of how to meet your SLOs. Identify the service components your team will optimize. Verify which application tiers meet New Relic monitoring requirements. To ensure you have robust baselines from which to work, determine the level of instrumentation that is possible (or allowed) within your organization. It's best practice to instrument everything you can, but there may be situations where instrumentation isn't viable. In that case, you should determine what other data is available or can be created. For example, you can gather logs to query them for SLO data and set alerts for them. one.newrelic.com > Logs: Use the New Relic log management UI to leverage your logs. If the application has a web front end in these situations, use New Relic synthetic monitors. Our synthetic monitors offer non-agent monitoring while still providing the ability to establish a baseline. To instrument the example applications and components in this tutorial, use these New Relic features: New Relic products Customer type Component name Tier owner Language stack Server OS New Relic products External Service 1 John D. Java RHEL 6 APM, infrastructure monitoring, synthetic monitors Internal Service 2 Jane A. .Net Win2003 R2 APM, infrastructure monitoring Internal ActiveMQ John D. Java AIX APM External Website Jane A. Classic ASP Win2000 Synthetic monitors Internal MS SQL Dave Z. NA Win2003 R2 Infrastructure monitoring, on-host integrations APM installation After reviewing the compatibility and requirements for New Relic APM, install an APM agent on your application stack. Steps for installing APM agents vary based on language agent type. Follow the install procedures for a specific APM agents. Infrastructure installation After reviewing the requirements for New Relic infrastructure monitoring, follow the install procedures to install the infrastructure agent on instances that host your applications. The infrastructure agent requires the following host permissions: Linux: To install and run the agent, you must have root privileges. Windows: To install and run the agent, you must have Administrator privileges. Infrastructure on-host integrations To gain extended visibility into applications that your code depends on, deploy on-host integrations based on their availability. New Relic supports several commonly used application components, including MySQL, Apache, NGINX, and more. For more information, see our on-host integration docs. Synthetics New Relic synthetic monitoring gives you a suite of automated, scriptable tools to monitor your websites, critical business transactions, and API endpoints. Follow the procedures to create a simple browser check. Be sure to verify that your website URL is accessible from the Synthetics public network locations. Browser monitoring New Relic browser monitoring provides deep insights into how your users are interacting with your application or website. Browser monitoring complements synthetic monitors with data based on actual user experiences, which is useful in discerning how DevOps efforts are ultimately improving the experience for the customer. For more information, see the compatibility and requirements, then install the New Relic browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs new performance data needs. Installation of New Relic mobile monitoring lets DevOps teams instrument iOS and Android applications to gain a fuller understanding of service delivery quality. 5. Review the default metrics After you deploy the agents and monitors, use service maps to review the default metrics that New Relic captures. For example, a typical service map show many of the common SLIs that application teams rely on, including response time, Apdex, throughput, and error rate metrics from APM. It also shows page load time, Ajax response, throughput, and error rate from browser monitoring. rpm.newrelic.com > Service maps: To explore detailed granularity for any area, use the service map's nodes. 6. Set up custom instrumentation To close any remaining gaps in visibility for your SLIs, use custom instrumentation. New Relic provides several avenues for adding custom instrumentation, including: Making API calls to agents from inside your source code Packaging XML-based custom instrumentation modules with deployed applications Adding UI-based instrumentation without a code deploy In addition, you can add custom attributes to each transaction event that match application performance factors to critical business information. Then you can track those attributes in Insights dashboards. For more information, see the custom instrumentation documentation for your application: APM Browser Infrastructure Insights Mobile Synthetics 7. Create dashboards to track SLIs Once you implement the appropriate instrumentation, it's easy to visualize your service level indicators with New Relic dashboards, which provide a single location to query and view all the data that New Relic tools gather. To learn more about how to run queries to produce charts and dashboards, see Introduction to query builder. For more about the data you can query, see New Relic data types. The metrics you capture will become your application's baseline. Share dashboards with your application team and stakeholders to provide visibility into what is happening with your application and to monitor future performance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.74335,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>New</em> <em>Relic</em> products",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": ". For more information, see the compatibility and requirements, then install the <em>New</em> <em>Relic</em> browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs <em>new</em> performance data needs. Installation of <em>New</em> <em>Relic</em> mobile monitoring lets <em>DevOps</em> teams instrument iOS"
      },
      "id": "6044151ee7b9d259ef5799ea"
    },
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T17:37:49Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they’re consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s DevOps transformation. 2. Add automated deployment markers It’s important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM’s deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or “marker”, on charts and graphs at the deployment event’s timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you’re satisfied with the application’s performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.82245,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-06-08T22:24:00Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your application’s performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your application’s architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the application’s environment searchable. Any convention you use should be unique to your organization’s structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your application’s performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our application’s overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue you’re investigating. In this example, we’ve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, it’s obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If you’re not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, it’s responsible for 99.9% of the app server time, which means we’re getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issues—the red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that it’s highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customers—which will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the “norm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, it’s important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.81642,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-objectives-baselines-define-team-slos": [
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T17:37:49Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they’re consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s DevOps transformation. 2. Add automated deployment markers It’s important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM’s deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or “marker”, on charts and graphs at the deployment event’s timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you’re satisfied with the application’s performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.82243,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-06-08T22:24:00Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your application’s performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your application’s architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the application’s environment searchable. Any convention you use should be unique to your organization’s structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your application’s performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our application’s overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue you’re investigating. In this example, we’ve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, it’s obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If you’re not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, it’s responsible for 99.9% of the app server time, which means we’re getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issues—the red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that it’s highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customers—which will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the “norm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, it’s important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.8164,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    },
    {
      "sections": [
        "Resolve dependency risk: identify and analyze potential issues",
        "Prerequisites",
        "1. Analyze dependencies with service maps",
        "2. Identify back-end application dependency risks",
        "Tip",
        "3. Identify front-end dependency risk",
        "4. Identify Microservice Dependencies",
        "5. Create an action plan for risk mitigation"
      ],
      "title": "Resolve dependency risk: identify and analyze potential issues",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "4911ddf0c6fca572b52e22fbe464f21f0c6f338f",
      "image": "https://docs.newrelic.com/static/d1d4cf78d193ae770219cfdb9f6f792f/c1b63/distributed-trace_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues/",
      "published_at": "2021-06-09T16:30:30Z",
      "updated_at": "2021-05-15T22:15:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Successfully scaling DevOps requires a robust understanding of dependencies across application teams and related services. Use New Relics service maps to discover and mitigate risky dependencies from upstream and downstream services. Prerequisites This tutorial assumes you’ve completed the previous DevOps procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. New Relic recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com > Service Maps > App/Service list This initial view shows all applications that are configured in your account. Applications that have violated a warning threshold are shown in yellow, and those with an active alert are shown in red. Healthy applications appear in green. New Relic uses a bold line to map applications to the services (such as databases) they connect to. Familiarize yourself with these maps to see how applications and their services fit together. Take note of which applications have the most dependencies and which rely on the same dependency, such as an API. Click an application to see high level metrics about that app, including throughput, response time, Apdex score, and error rate for the last 30 minutes. Tracking throughput is a good way to determine which of your applications are serving the most traffic. After looking at the architecture as a whole, review the applications that have the most dependencies. Select the App/Services list to see a full list of your applications. one.newrelic.com > Service Maps > App/Service list In this example, we’ve chosen Tower-Chicago from the App/Services list. All of the traffic being sent to Tower-Chicago is coming from Proxy-East. In this case, Tower-Chicago is showing 48.3 requests per minute, or 11.3% of the 426 requests per minute flowing through Proxy-East. one.newrelic.com > Service Maps > App/Service list In most cases, the separate applications and services represented in service maps are created and maintained by separate teams. This exercise of walking through the dependencies of your architecture should involve representatives from each of those teams. Teams should work together to ask questions such as: How critical is this particular dependency? What would happen if it were to go down? What happened last time it went down? Was there a revenue loss? 2. Identify back-end application dependency risks Once you’ve analyzed your applications’ dependencies, you’ll want to examine the quality of dependency execution. For example, is the dependency stable and predictable for each application or transaction you’ve identified? To do this, you’ll first need to gather as much information as you can about the applications from New Relic Insights, which helps you analyze data that is collected about the applications in more detail. Here is an example NRQL query to further analyze back-end service performance: SELECT count(appName)/30 as 'Throughput', apdex(duration), average(duration), stddev(duration), max(duration), count(error_type), uniquecount(host) FROM Transaction FACET appName SINCE 30 MINUTES AGO Copy This query shows you each application’s request per minute (throughput), Apdex score, and an overview of how the application is performing overall (through the standard deviation calculation, in which lower numbers are generally better). It also shows errors for the time period and the number of hosts on which the application is running. insights.newrelic.com > query results Next, gather information on incidents and events related to the services from New Relic Alerts: Click Alerts > Incidents > All Incidents. alerts.newrelic.com > Incidents > All Incidents Click Alerts > Events > All Events. alerts.newrelic.com > Incidents > All Events Tip Using webhooks to send alert events to New Relic Insights, allows you to supplement your dashboards with Alerts data. The process is outlined in this community discussion post. Here is a simplified example of the results of this exercise: Application Number of dependencies RPM Hosts APDEX (avg) Last outage TTR (hrs) Routing Service 10 983 4 .93 2/19/18 .75 Tower Austin 1 58 1 .95 10/11/17 1.5 Proxy-East 11 498 4 .92 1/4/18 .25 Proxy-West 11 495 4 .97 12/3/17 .25 WebPortal 7 396 8 .98 4/1/18 2.5 Supplement this data with the data that your teams know about your service and that you gathered from the dependency exercise in step 1, and use that data to develop hypotheses about the highest risk areas in your services that should be mitigated. 3. Identify front-end dependency risk Once you’ve analyzed back-end dependencies, explore front-end dependencies. This is a critical step because as you walk higher up the stack and closer to the user, you will likely have more dependencies and abstractions. Service maps seamlessly integrate data from New Relic Browser and New Relic Mobile to help you understand the dependencies from front-end user interfaces to back-end services. one.newrelic.com > Service Maps Use the service map view to drill into front-end dependencies, and execute a similar exercise to the one you executed for back-end dependencies. This exercise will again expose data to help you identify risk areas you should address and optimize. We recommend that you conduct the analysis with user interface (UI) teams so that you can also gather a complementary qualitative understanding of what the UI teams consider critical based on their experience. A ranking from the UI teams of the most critical dependency is a useful output of this work. 4. Identify Microservice Dependencies If you are using microservices, you can have dozens, if not hundreds, of services that are calling each other. Use Distributed Tracing to see how all those services connect together and how your requests flow through those different services. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. A distributed trace is composed of multiple \"spans,\" which represent time spent in services or resources of those services. Click on the Distributed tracing menu in New Relic APM left nav. You can see “trace listing” view where you’ll be able to quickly identify slow traces and traces with errors. The scatter plot lets you easily see outliers. Below that are the trace summaries, click on a trace to see details. Dive into distributed traces to see how long each span takes. Click into each span to see historical performance charts and associated attributes that layer in the context you need to understand and troubleshoot issues. one.newrelic.com > APM > (select an app) > Distributed tracing This rounds out your list of dependencies. 5. Create an action plan for risk mitigation Once you’ve analyzed the dependencies across your application from both front-end and back-end services, create an action plan to reduce dependency risks and achieve your service level objectives (SLO). As you prioritize these next steps, we recommend you keep these four principles in mind: Understand your risk tolerance. It’s helpful to have a clear picture of your tolerance for risk, which ideally should be informed by your service level objectives (refer to the Establish Objectives and Baselines tutorial for more information). Set an alert policy to monitor dependencies that you’ve determined have a high relationship to SLO achievement. Minimize dependencies. The simpler you keep your code, the less functions you'll have referring to other modules. Removing unnecessary complexity is an important way to ensure you have a maintainable system that meets your customers’ expectations. Localize dependencies. For the code you write, package together functions that depend on each other whenever possible. Stabilize dependencies. When dependencies are unavoidable, mitigate risks by ensuring these dependencies point to modules that are the least likely to change or are easier to substitute. When your action plan is complete, monitor the results of the efforts. The efficacy of your actions to resolve dependency risks should ultimately be measured by your SLOs",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.61241,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>DevOps</em> procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. <em>New</em> <em>Relic</em> recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com &gt; Service Maps"
      },
      "id": "60440f13e7b9d2ec025799f0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-team-dashboards-gather-visualize-key-metrics": [
    {
      "sections": [
        "Establish objectives and baselines: define team SLOs",
        "Service level components",
        "Resources",
        "1. Build an inventory of services requiring SLOs",
        "2. Research customer expectations for SLOs",
        "3. Define SLOs",
        "4. Determine what can be instrumented",
        "New Relic products",
        "APM installation",
        "Infrastructure installation",
        "Infrastructure on-host integrations",
        "Synthetics",
        "Browser monitoring",
        "Mobile monitoring",
        "5. Review the default metrics",
        "6. Set up custom instrumentation",
        "7. Create dashboards to track SLIs"
      ],
      "title": "Establish objectives and baselines: define team SLOs",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "8988bb84fc5add9019fdc3ded2eb4de431ea63db",
      "image": "https://docs.newrelic.com/static/3a9f13f0b98dead811d9f7f56cc2a594/1f083/catalyst-establish-objectives-1_4.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-objectives-baselines-define-team-slos/",
      "published_at": "2021-06-09T18:11:26Z",
      "updated_at": "2021-06-02T16:58:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A DevOps transformation requires a cultural shift so that teams can build new skills and motivations for the type of cross-team work required in a true DevOps practice. The transformation can be difficult when the people involved do not see the benefits of change as a clear objective. Service level objectives (SLOs) provide a powerful mechanism to codify the goals of a DevOps team in a way that can be measured and shared. They also provide clear boundaries on service expectations that help teams achieve greater velocity and freedom in experimenting with new approaches. This tutorial defines SLOs for successful service delivery objectives and utilize New Relic instrumentation to surface the current performance metrics relative to those objectives. Measurable SLOs and visibility into your current progress against those SLOs ensure that you will be able to properly assess future optimization efforts. Service level components An SLO is an agreed upon means of measuring the performance of your service. The SLO defines a target value of a specified quantitative measure, which is called a service level indicator (SLI); for example: Average response time Response time percentile Application availability SLOs clarify a target value for SLIs; for example: Average response time should be less than 200 ms 95% of requests should be completed within 250 ms Availability of the service should be 99.99% Logically group SLOs together to provide an overall boolean indicator of whether or not the service is meeting expectations. For example, a helpful SLO for alerting purposes could be: 95% of requests completed within 250 ms AND availability is 99.99% Copy Service level components Example values SLI (Indicator) HTTP status codes SLO (Objective) < 1% HTTP 500s over 30 days SLA (Agreement) For every additional .1% of HTTP 500s, 5% refund of total contract Resources Value stream mapping can be a useful exercise to work through before setting SLOs. Work with your teams to clarify key components of your service and the appropriate metrics. Use these inputs as starting points for this tutorial. In addition: Learn about SLOs, SLIs, and SLAs from the Google Cloud Platform blog. Learn how New Relic has applied SLOs and SLIs into its reliability practices form this SREcon18 Americas presentation (approximately 21 minutes). 1. Build an inventory of services requiring SLOs Start defining SLOs for your application by first taking an inventory of the services that your application provides to both your internal and external customers. Draft a list of services. Make the scope of services you consider as comprehensive as possible. Engage your team members and other stakeholders to validate the list for completeness. Segment your application stack to understand the potential components that might require SLOs. For example, most applications can be segmented as: Application (backend/microservices) Dependency services (such as the message queue) Database Website Underlying servers This example lists components that would benefit from SLOs: Customer type Component name Owner Language stack Operating system External Service 1 John D. Java RHEL 6 Internal Service 2 Jane A. .NET Win2003 R2 Internal ActiveMQ John D. Java AIX External Website Jane A. Classic ASP Win2000 Internal MS SQL Dave Z. n/a Win2003 R2 Building a definitive list of services that require an SLO can be challenging, because an application often consists of many endpoints with complex interdependencies. Begin your SLO journey with pragmatism. Start by defining a broader, simpler set of SLOs that are driven by what your customers care about most and what your team can control. As your teams better align around SLOs, you can then begin to fine-tune and add more complexity. 2. Research customer expectations for SLOs Once you have an inventory of services, begin to gather the information you need to define the SLOs for those services. Interviews with customers that depend on your services are often valuable for understanding service expectations. For example, to define SLOs for internal teams, New Relic, ask questions such as: If possible, can you broadly categorize the types of requests we can expect from you and your service? To what extent do you or your service depend on timely responses to requests? Are there requests for which response time is not critical? How does your service handle unavailable dependencies or data? What is the maximum amount of unavailable data that your service can handle? At what threshold does your service fail if a request takes too long? What are acceptable rates of errors? What would a SLA look like between our product and yours? Existing usage data can also be a helpful research input. 3. Define SLOs Using the research on customer expectations that you gathered, draft a focused set of SLOs. New Relic recommends setting SLOs against one or more of the following SLIs: Application availability percentage Average response time Response percentile Error rate Apdex value Also, consider instrumenting and tracking the following SLIs: Throughput (peak and trough) Database call count and duration DNS and SSL timing DOM processing and page rendering Mean-time-to-detection (MTTD) For a more comprehensive list of potential areas to measure, see Measuring DevOps. Recommendation: To determine if your application is performing to customer expectations: Consider combining multiple SLIs (for example, availability and response time) into one SLO. Aim to define a consistent set of conditions across all of the services in your list. Consult your team and stakeholders to validate that the SLOs you set are reasonable, consistently attainable (even if you are not currently meeting them), and aligned to customer expectations. After you finish this step, you should have a set of well-defined SLOs and SLIs. 4. Determine what can be instrumented Now you're ready to deploy agents or monitors to establish a performance baseline for the SLIs you created. With proper instrumentation in place, you'll have visibility into the performance indicators that matter for your team and your customers. In addition, you'll also have a clear understanding of how to meet your SLOs. Identify the service components your team will optimize. Verify which application tiers meet New Relic monitoring requirements. To ensure you have robust baselines from which to work, determine the level of instrumentation that is possible (or allowed) within your organization. It's best practice to instrument everything you can, but there may be situations where instrumentation isn't viable. In that case, you should determine what other data is available or can be created. For example, you can gather logs to query them for SLO data and set alerts for them. one.newrelic.com > Logs: Use the New Relic log management UI to leverage your logs. If the application has a web front end in these situations, use New Relic synthetic monitors. Our synthetic monitors offer non-agent monitoring while still providing the ability to establish a baseline. To instrument the example applications and components in this tutorial, use these New Relic features: New Relic products Customer type Component name Tier owner Language stack Server OS New Relic products External Service 1 John D. Java RHEL 6 APM, infrastructure monitoring, synthetic monitors Internal Service 2 Jane A. .Net Win2003 R2 APM, infrastructure monitoring Internal ActiveMQ John D. Java AIX APM External Website Jane A. Classic ASP Win2000 Synthetic monitors Internal MS SQL Dave Z. NA Win2003 R2 Infrastructure monitoring, on-host integrations APM installation After reviewing the compatibility and requirements for New Relic APM, install an APM agent on your application stack. Steps for installing APM agents vary based on language agent type. Follow the install procedures for a specific APM agents. Infrastructure installation After reviewing the requirements for New Relic infrastructure monitoring, follow the install procedures to install the infrastructure agent on instances that host your applications. The infrastructure agent requires the following host permissions: Linux: To install and run the agent, you must have root privileges. Windows: To install and run the agent, you must have Administrator privileges. Infrastructure on-host integrations To gain extended visibility into applications that your code depends on, deploy on-host integrations based on their availability. New Relic supports several commonly used application components, including MySQL, Apache, NGINX, and more. For more information, see our on-host integration docs. Synthetics New Relic synthetic monitoring gives you a suite of automated, scriptable tools to monitor your websites, critical business transactions, and API endpoints. Follow the procedures to create a simple browser check. Be sure to verify that your website URL is accessible from the Synthetics public network locations. Browser monitoring New Relic browser monitoring provides deep insights into how your users are interacting with your application or website. Browser monitoring complements synthetic monitors with data based on actual user experiences, which is useful in discerning how DevOps efforts are ultimately improving the experience for the customer. For more information, see the compatibility and requirements, then install the New Relic browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs new performance data needs. Installation of New Relic mobile monitoring lets DevOps teams instrument iOS and Android applications to gain a fuller understanding of service delivery quality. 5. Review the default metrics After you deploy the agents and monitors, use service maps to review the default metrics that New Relic captures. For example, a typical service map show many of the common SLIs that application teams rely on, including response time, Apdex, throughput, and error rate metrics from APM. It also shows page load time, Ajax response, throughput, and error rate from browser monitoring. rpm.newrelic.com > Service maps: To explore detailed granularity for any area, use the service map's nodes. 6. Set up custom instrumentation To close any remaining gaps in visibility for your SLIs, use custom instrumentation. New Relic provides several avenues for adding custom instrumentation, including: Making API calls to agents from inside your source code Packaging XML-based custom instrumentation modules with deployed applications Adding UI-based instrumentation without a code deploy In addition, you can add custom attributes to each transaction event that match application performance factors to critical business information. Then you can track those attributes in Insights dashboards. For more information, see the custom instrumentation documentation for your application: APM Browser Infrastructure Insights Mobile Synthetics 7. Create dashboards to track SLIs Once you implement the appropriate instrumentation, it's easy to visualize your service level indicators with New Relic dashboards, which provide a single location to query and view all the data that New Relic tools gather. To learn more about how to run queries to produce charts and dashboards, see Introduction to query builder. For more about the data you can query, see New Relic data types. The metrics you capture will become your application's baseline. Share dashboards with your application team and stakeholders to provide visibility into what is happening with your application and to monitor future performance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.74326,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>New</em> <em>Relic</em> products",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": ". For more information, see the compatibility and requirements, then install the <em>New</em> <em>Relic</em> browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs <em>new</em> performance data needs. Installation of <em>New</em> <em>Relic</em> mobile monitoring lets <em>DevOps</em> teams instrument iOS"
      },
      "id": "6044151ee7b9d259ef5799ea"
    },
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T17:37:49Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they’re consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s DevOps transformation. 2. Add automated deployment markers It’s important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM’s deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or “marker”, on charts and graphs at the deployment event’s timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you’re satisfied with the application’s performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.82243,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-06-08T22:24:00Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your application’s performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your application’s architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the application’s environment searchable. Any convention you use should be unique to your organization’s structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your application’s performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our application’s overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue you’re investigating. In this example, we’ve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, it’s obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If you’re not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, it’s responsible for 99.9% of the app server time, which means we’re getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issues—the red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that it’s highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customers—which will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the “norm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, it’s important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.8164,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/guide-measuring-devops-success": [
    {
      "sections": [
        "Establish objectives and baselines: define team SLOs",
        "Service level components",
        "Resources",
        "1. Build an inventory of services requiring SLOs",
        "2. Research customer expectations for SLOs",
        "3. Define SLOs",
        "4. Determine what can be instrumented",
        "New Relic products",
        "APM installation",
        "Infrastructure installation",
        "Infrastructure on-host integrations",
        "Synthetics",
        "Browser monitoring",
        "Mobile monitoring",
        "5. Review the default metrics",
        "6. Set up custom instrumentation",
        "7. Create dashboards to track SLIs"
      ],
      "title": "Establish objectives and baselines: define team SLOs",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "8988bb84fc5add9019fdc3ded2eb4de431ea63db",
      "image": "https://docs.newrelic.com/static/3a9f13f0b98dead811d9f7f56cc2a594/1f083/catalyst-establish-objectives-1_4.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-objectives-baselines-define-team-slos/",
      "published_at": "2021-06-09T18:11:26Z",
      "updated_at": "2021-06-02T16:58:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A DevOps transformation requires a cultural shift so that teams can build new skills and motivations for the type of cross-team work required in a true DevOps practice. The transformation can be difficult when the people involved do not see the benefits of change as a clear objective. Service level objectives (SLOs) provide a powerful mechanism to codify the goals of a DevOps team in a way that can be measured and shared. They also provide clear boundaries on service expectations that help teams achieve greater velocity and freedom in experimenting with new approaches. This tutorial defines SLOs for successful service delivery objectives and utilize New Relic instrumentation to surface the current performance metrics relative to those objectives. Measurable SLOs and visibility into your current progress against those SLOs ensure that you will be able to properly assess future optimization efforts. Service level components An SLO is an agreed upon means of measuring the performance of your service. The SLO defines a target value of a specified quantitative measure, which is called a service level indicator (SLI); for example: Average response time Response time percentile Application availability SLOs clarify a target value for SLIs; for example: Average response time should be less than 200 ms 95% of requests should be completed within 250 ms Availability of the service should be 99.99% Logically group SLOs together to provide an overall boolean indicator of whether or not the service is meeting expectations. For example, a helpful SLO for alerting purposes could be: 95% of requests completed within 250 ms AND availability is 99.99% Copy Service level components Example values SLI (Indicator) HTTP status codes SLO (Objective) < 1% HTTP 500s over 30 days SLA (Agreement) For every additional .1% of HTTP 500s, 5% refund of total contract Resources Value stream mapping can be a useful exercise to work through before setting SLOs. Work with your teams to clarify key components of your service and the appropriate metrics. Use these inputs as starting points for this tutorial. In addition: Learn about SLOs, SLIs, and SLAs from the Google Cloud Platform blog. Learn how New Relic has applied SLOs and SLIs into its reliability practices form this SREcon18 Americas presentation (approximately 21 minutes). 1. Build an inventory of services requiring SLOs Start defining SLOs for your application by first taking an inventory of the services that your application provides to both your internal and external customers. Draft a list of services. Make the scope of services you consider as comprehensive as possible. Engage your team members and other stakeholders to validate the list for completeness. Segment your application stack to understand the potential components that might require SLOs. For example, most applications can be segmented as: Application (backend/microservices) Dependency services (such as the message queue) Database Website Underlying servers This example lists components that would benefit from SLOs: Customer type Component name Owner Language stack Operating system External Service 1 John D. Java RHEL 6 Internal Service 2 Jane A. .NET Win2003 R2 Internal ActiveMQ John D. Java AIX External Website Jane A. Classic ASP Win2000 Internal MS SQL Dave Z. n/a Win2003 R2 Building a definitive list of services that require an SLO can be challenging, because an application often consists of many endpoints with complex interdependencies. Begin your SLO journey with pragmatism. Start by defining a broader, simpler set of SLOs that are driven by what your customers care about most and what your team can control. As your teams better align around SLOs, you can then begin to fine-tune and add more complexity. 2. Research customer expectations for SLOs Once you have an inventory of services, begin to gather the information you need to define the SLOs for those services. Interviews with customers that depend on your services are often valuable for understanding service expectations. For example, to define SLOs for internal teams, New Relic, ask questions such as: If possible, can you broadly categorize the types of requests we can expect from you and your service? To what extent do you or your service depend on timely responses to requests? Are there requests for which response time is not critical? How does your service handle unavailable dependencies or data? What is the maximum amount of unavailable data that your service can handle? At what threshold does your service fail if a request takes too long? What are acceptable rates of errors? What would a SLA look like between our product and yours? Existing usage data can also be a helpful research input. 3. Define SLOs Using the research on customer expectations that you gathered, draft a focused set of SLOs. New Relic recommends setting SLOs against one or more of the following SLIs: Application availability percentage Average response time Response percentile Error rate Apdex value Also, consider instrumenting and tracking the following SLIs: Throughput (peak and trough) Database call count and duration DNS and SSL timing DOM processing and page rendering Mean-time-to-detection (MTTD) For a more comprehensive list of potential areas to measure, see Measuring DevOps. Recommendation: To determine if your application is performing to customer expectations: Consider combining multiple SLIs (for example, availability and response time) into one SLO. Aim to define a consistent set of conditions across all of the services in your list. Consult your team and stakeholders to validate that the SLOs you set are reasonable, consistently attainable (even if you are not currently meeting them), and aligned to customer expectations. After you finish this step, you should have a set of well-defined SLOs and SLIs. 4. Determine what can be instrumented Now you're ready to deploy agents or monitors to establish a performance baseline for the SLIs you created. With proper instrumentation in place, you'll have visibility into the performance indicators that matter for your team and your customers. In addition, you'll also have a clear understanding of how to meet your SLOs. Identify the service components your team will optimize. Verify which application tiers meet New Relic monitoring requirements. To ensure you have robust baselines from which to work, determine the level of instrumentation that is possible (or allowed) within your organization. It's best practice to instrument everything you can, but there may be situations where instrumentation isn't viable. In that case, you should determine what other data is available or can be created. For example, you can gather logs to query them for SLO data and set alerts for them. one.newrelic.com > Logs: Use the New Relic log management UI to leverage your logs. If the application has a web front end in these situations, use New Relic synthetic monitors. Our synthetic monitors offer non-agent monitoring while still providing the ability to establish a baseline. To instrument the example applications and components in this tutorial, use these New Relic features: New Relic products Customer type Component name Tier owner Language stack Server OS New Relic products External Service 1 John D. Java RHEL 6 APM, infrastructure monitoring, synthetic monitors Internal Service 2 Jane A. .Net Win2003 R2 APM, infrastructure monitoring Internal ActiveMQ John D. Java AIX APM External Website Jane A. Classic ASP Win2000 Synthetic monitors Internal MS SQL Dave Z. NA Win2003 R2 Infrastructure monitoring, on-host integrations APM installation After reviewing the compatibility and requirements for New Relic APM, install an APM agent on your application stack. Steps for installing APM agents vary based on language agent type. Follow the install procedures for a specific APM agents. Infrastructure installation After reviewing the requirements for New Relic infrastructure monitoring, follow the install procedures to install the infrastructure agent on instances that host your applications. The infrastructure agent requires the following host permissions: Linux: To install and run the agent, you must have root privileges. Windows: To install and run the agent, you must have Administrator privileges. Infrastructure on-host integrations To gain extended visibility into applications that your code depends on, deploy on-host integrations based on their availability. New Relic supports several commonly used application components, including MySQL, Apache, NGINX, and more. For more information, see our on-host integration docs. Synthetics New Relic synthetic monitoring gives you a suite of automated, scriptable tools to monitor your websites, critical business transactions, and API endpoints. Follow the procedures to create a simple browser check. Be sure to verify that your website URL is accessible from the Synthetics public network locations. Browser monitoring New Relic browser monitoring provides deep insights into how your users are interacting with your application or website. Browser monitoring complements synthetic monitors with data based on actual user experiences, which is useful in discerning how DevOps efforts are ultimately improving the experience for the customer. For more information, see the compatibility and requirements, then install the New Relic browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs new performance data needs. Installation of New Relic mobile monitoring lets DevOps teams instrument iOS and Android applications to gain a fuller understanding of service delivery quality. 5. Review the default metrics After you deploy the agents and monitors, use service maps to review the default metrics that New Relic captures. For example, a typical service map show many of the common SLIs that application teams rely on, including response time, Apdex, throughput, and error rate metrics from APM. It also shows page load time, Ajax response, throughput, and error rate from browser monitoring. rpm.newrelic.com > Service maps: To explore detailed granularity for any area, use the service map's nodes. 6. Set up custom instrumentation To close any remaining gaps in visibility for your SLIs, use custom instrumentation. New Relic provides several avenues for adding custom instrumentation, including: Making API calls to agents from inside your source code Packaging XML-based custom instrumentation modules with deployed applications Adding UI-based instrumentation without a code deploy In addition, you can add custom attributes to each transaction event that match application performance factors to critical business information. Then you can track those attributes in Insights dashboards. For more information, see the custom instrumentation documentation for your application: APM Browser Infrastructure Insights Mobile Synthetics 7. Create dashboards to track SLIs Once you implement the appropriate instrumentation, it's easy to visualize your service level indicators with New Relic dashboards, which provide a single location to query and view all the data that New Relic tools gather. To learn more about how to run queries to produce charts and dashboards, see Introduction to query builder. For more about the data you can query, see New Relic data types. The metrics you capture will become your application's baseline. Share dashboards with your application team and stakeholders to provide visibility into what is happening with your application and to monitor future performance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>New</em> <em>Relic</em> products",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": ". For more information, see the compatibility and requirements, then install the <em>New</em> <em>Relic</em> browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs <em>new</em> performance data needs. Installation of <em>New</em> <em>Relic</em> mobile monitoring lets <em>DevOps</em> teams instrument iOS"
      },
      "id": "6044151ee7b9d259ef5799ea"
    },
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T17:37:49Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they’re consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s DevOps transformation. 2. Add automated deployment markers It’s important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM’s deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or “marker”, on charts and graphs at the deployment event’s timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you’re satisfied with the application’s performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.82242,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-06-08T22:24:00Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your application’s performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your application’s architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the application’s environment searchable. Any convention you use should be unique to your organization’s structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your application’s performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our application’s overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue you’re investigating. In this example, we’ve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, it’s obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If you’re not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, it’s responsible for 99.9% of the app server time, which means we’re getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issues—the red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that it’s highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customers—which will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the “norm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, it’s important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.81639,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/incident-learning-retrospectives": [
    {
      "sections": [
        "Establish objectives and baselines: define team SLOs",
        "Service level components",
        "Resources",
        "1. Build an inventory of services requiring SLOs",
        "2. Research customer expectations for SLOs",
        "3. Define SLOs",
        "4. Determine what can be instrumented",
        "New Relic products",
        "APM installation",
        "Infrastructure installation",
        "Infrastructure on-host integrations",
        "Synthetics",
        "Browser monitoring",
        "Mobile monitoring",
        "5. Review the default metrics",
        "6. Set up custom instrumentation",
        "7. Create dashboards to track SLIs"
      ],
      "title": "Establish objectives and baselines: define team SLOs",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "8988bb84fc5add9019fdc3ded2eb4de431ea63db",
      "image": "https://docs.newrelic.com/static/3a9f13f0b98dead811d9f7f56cc2a594/1f083/catalyst-establish-objectives-1_4.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-objectives-baselines-define-team-slos/",
      "published_at": "2021-06-09T18:11:26Z",
      "updated_at": "2021-06-02T16:58:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A DevOps transformation requires a cultural shift so that teams can build new skills and motivations for the type of cross-team work required in a true DevOps practice. The transformation can be difficult when the people involved do not see the benefits of change as a clear objective. Service level objectives (SLOs) provide a powerful mechanism to codify the goals of a DevOps team in a way that can be measured and shared. They also provide clear boundaries on service expectations that help teams achieve greater velocity and freedom in experimenting with new approaches. This tutorial defines SLOs for successful service delivery objectives and utilize New Relic instrumentation to surface the current performance metrics relative to those objectives. Measurable SLOs and visibility into your current progress against those SLOs ensure that you will be able to properly assess future optimization efforts. Service level components An SLO is an agreed upon means of measuring the performance of your service. The SLO defines a target value of a specified quantitative measure, which is called a service level indicator (SLI); for example: Average response time Response time percentile Application availability SLOs clarify a target value for SLIs; for example: Average response time should be less than 200 ms 95% of requests should be completed within 250 ms Availability of the service should be 99.99% Logically group SLOs together to provide an overall boolean indicator of whether or not the service is meeting expectations. For example, a helpful SLO for alerting purposes could be: 95% of requests completed within 250 ms AND availability is 99.99% Copy Service level components Example values SLI (Indicator) HTTP status codes SLO (Objective) < 1% HTTP 500s over 30 days SLA (Agreement) For every additional .1% of HTTP 500s, 5% refund of total contract Resources Value stream mapping can be a useful exercise to work through before setting SLOs. Work with your teams to clarify key components of your service and the appropriate metrics. Use these inputs as starting points for this tutorial. In addition: Learn about SLOs, SLIs, and SLAs from the Google Cloud Platform blog. Learn how New Relic has applied SLOs and SLIs into its reliability practices form this SREcon18 Americas presentation (approximately 21 minutes). 1. Build an inventory of services requiring SLOs Start defining SLOs for your application by first taking an inventory of the services that your application provides to both your internal and external customers. Draft a list of services. Make the scope of services you consider as comprehensive as possible. Engage your team members and other stakeholders to validate the list for completeness. Segment your application stack to understand the potential components that might require SLOs. For example, most applications can be segmented as: Application (backend/microservices) Dependency services (such as the message queue) Database Website Underlying servers This example lists components that would benefit from SLOs: Customer type Component name Owner Language stack Operating system External Service 1 John D. Java RHEL 6 Internal Service 2 Jane A. .NET Win2003 R2 Internal ActiveMQ John D. Java AIX External Website Jane A. Classic ASP Win2000 Internal MS SQL Dave Z. n/a Win2003 R2 Building a definitive list of services that require an SLO can be challenging, because an application often consists of many endpoints with complex interdependencies. Begin your SLO journey with pragmatism. Start by defining a broader, simpler set of SLOs that are driven by what your customers care about most and what your team can control. As your teams better align around SLOs, you can then begin to fine-tune and add more complexity. 2. Research customer expectations for SLOs Once you have an inventory of services, begin to gather the information you need to define the SLOs for those services. Interviews with customers that depend on your services are often valuable for understanding service expectations. For example, to define SLOs for internal teams, New Relic, ask questions such as: If possible, can you broadly categorize the types of requests we can expect from you and your service? To what extent do you or your service depend on timely responses to requests? Are there requests for which response time is not critical? How does your service handle unavailable dependencies or data? What is the maximum amount of unavailable data that your service can handle? At what threshold does your service fail if a request takes too long? What are acceptable rates of errors? What would a SLA look like between our product and yours? Existing usage data can also be a helpful research input. 3. Define SLOs Using the research on customer expectations that you gathered, draft a focused set of SLOs. New Relic recommends setting SLOs against one or more of the following SLIs: Application availability percentage Average response time Response percentile Error rate Apdex value Also, consider instrumenting and tracking the following SLIs: Throughput (peak and trough) Database call count and duration DNS and SSL timing DOM processing and page rendering Mean-time-to-detection (MTTD) For a more comprehensive list of potential areas to measure, see Measuring DevOps. Recommendation: To determine if your application is performing to customer expectations: Consider combining multiple SLIs (for example, availability and response time) into one SLO. Aim to define a consistent set of conditions across all of the services in your list. Consult your team and stakeholders to validate that the SLOs you set are reasonable, consistently attainable (even if you are not currently meeting them), and aligned to customer expectations. After you finish this step, you should have a set of well-defined SLOs and SLIs. 4. Determine what can be instrumented Now you're ready to deploy agents or monitors to establish a performance baseline for the SLIs you created. With proper instrumentation in place, you'll have visibility into the performance indicators that matter for your team and your customers. In addition, you'll also have a clear understanding of how to meet your SLOs. Identify the service components your team will optimize. Verify which application tiers meet New Relic monitoring requirements. To ensure you have robust baselines from which to work, determine the level of instrumentation that is possible (or allowed) within your organization. It's best practice to instrument everything you can, but there may be situations where instrumentation isn't viable. In that case, you should determine what other data is available or can be created. For example, you can gather logs to query them for SLO data and set alerts for them. one.newrelic.com > Logs: Use the New Relic log management UI to leverage your logs. If the application has a web front end in these situations, use New Relic synthetic monitors. Our synthetic monitors offer non-agent monitoring while still providing the ability to establish a baseline. To instrument the example applications and components in this tutorial, use these New Relic features: New Relic products Customer type Component name Tier owner Language stack Server OS New Relic products External Service 1 John D. Java RHEL 6 APM, infrastructure monitoring, synthetic monitors Internal Service 2 Jane A. .Net Win2003 R2 APM, infrastructure monitoring Internal ActiveMQ John D. Java AIX APM External Website Jane A. Classic ASP Win2000 Synthetic monitors Internal MS SQL Dave Z. NA Win2003 R2 Infrastructure monitoring, on-host integrations APM installation After reviewing the compatibility and requirements for New Relic APM, install an APM agent on your application stack. Steps for installing APM agents vary based on language agent type. Follow the install procedures for a specific APM agents. Infrastructure installation After reviewing the requirements for New Relic infrastructure monitoring, follow the install procedures to install the infrastructure agent on instances that host your applications. The infrastructure agent requires the following host permissions: Linux: To install and run the agent, you must have root privileges. Windows: To install and run the agent, you must have Administrator privileges. Infrastructure on-host integrations To gain extended visibility into applications that your code depends on, deploy on-host integrations based on their availability. New Relic supports several commonly used application components, including MySQL, Apache, NGINX, and more. For more information, see our on-host integration docs. Synthetics New Relic synthetic monitoring gives you a suite of automated, scriptable tools to monitor your websites, critical business transactions, and API endpoints. Follow the procedures to create a simple browser check. Be sure to verify that your website URL is accessible from the Synthetics public network locations. Browser monitoring New Relic browser monitoring provides deep insights into how your users are interacting with your application or website. Browser monitoring complements synthetic monitors with data based on actual user experiences, which is useful in discerning how DevOps efforts are ultimately improving the experience for the customer. For more information, see the compatibility and requirements, then install the New Relic browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs new performance data needs. Installation of New Relic mobile monitoring lets DevOps teams instrument iOS and Android applications to gain a fuller understanding of service delivery quality. 5. Review the default metrics After you deploy the agents and monitors, use service maps to review the default metrics that New Relic captures. For example, a typical service map show many of the common SLIs that application teams rely on, including response time, Apdex, throughput, and error rate metrics from APM. It also shows page load time, Ajax response, throughput, and error rate from browser monitoring. rpm.newrelic.com > Service maps: To explore detailed granularity for any area, use the service map's nodes. 6. Set up custom instrumentation To close any remaining gaps in visibility for your SLIs, use custom instrumentation. New Relic provides several avenues for adding custom instrumentation, including: Making API calls to agents from inside your source code Packaging XML-based custom instrumentation modules with deployed applications Adding UI-based instrumentation without a code deploy In addition, you can add custom attributes to each transaction event that match application performance factors to critical business information. Then you can track those attributes in Insights dashboards. For more information, see the custom instrumentation documentation for your application: APM Browser Infrastructure Insights Mobile Synthetics 7. Create dashboards to track SLIs Once you implement the appropriate instrumentation, it's easy to visualize your service level indicators with New Relic dashboards, which provide a single location to query and view all the data that New Relic tools gather. To learn more about how to run queries to produce charts and dashboards, see Introduction to query builder. For more about the data you can query, see New Relic data types. The metrics you capture will become your application's baseline. Share dashboards with your application team and stakeholders to provide visibility into what is happening with your application and to monitor future performance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.7432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>New</em> <em>Relic</em> products",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": ". For more information, see the compatibility and requirements, then install the <em>New</em> <em>Relic</em> browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs <em>new</em> performance data needs. Installation of <em>New</em> <em>Relic</em> mobile monitoring lets <em>DevOps</em> teams instrument iOS"
      },
      "id": "6044151ee7b9d259ef5799ea"
    },
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T17:37:49Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they’re consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s DevOps transformation. 2. Add automated deployment markers It’s important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM’s deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or “marker”, on charts and graphs at the deployment event’s timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you’re satisfied with the application’s performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.82242,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-06-08T22:24:00Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your application’s performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your application’s architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the application’s environment searchable. Any convention you use should be unique to your organization’s structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your application’s performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our application’s overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue you’re investigating. In this example, we’ve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, it’s obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If you’re not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, it’s responsible for 99.9% of the app server time, which means we’re getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issues—the red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that it’s highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customers—which will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the “norm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, it’s important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.81639,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/incident-orchestration-align-teams-tools-processes": [
    {
      "sections": [
        "Establish objectives and baselines: define team SLOs",
        "Service level components",
        "Resources",
        "1. Build an inventory of services requiring SLOs",
        "2. Research customer expectations for SLOs",
        "3. Define SLOs",
        "4. Determine what can be instrumented",
        "New Relic products",
        "APM installation",
        "Infrastructure installation",
        "Infrastructure on-host integrations",
        "Synthetics",
        "Browser monitoring",
        "Mobile monitoring",
        "5. Review the default metrics",
        "6. Set up custom instrumentation",
        "7. Create dashboards to track SLIs"
      ],
      "title": "Establish objectives and baselines: define team SLOs",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "8988bb84fc5add9019fdc3ded2eb4de431ea63db",
      "image": "https://docs.newrelic.com/static/3a9f13f0b98dead811d9f7f56cc2a594/1f083/catalyst-establish-objectives-1_4.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-objectives-baselines-define-team-slos/",
      "published_at": "2021-06-09T18:11:26Z",
      "updated_at": "2021-06-02T16:58:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A DevOps transformation requires a cultural shift so that teams can build new skills and motivations for the type of cross-team work required in a true DevOps practice. The transformation can be difficult when the people involved do not see the benefits of change as a clear objective. Service level objectives (SLOs) provide a powerful mechanism to codify the goals of a DevOps team in a way that can be measured and shared. They also provide clear boundaries on service expectations that help teams achieve greater velocity and freedom in experimenting with new approaches. This tutorial defines SLOs for successful service delivery objectives and utilize New Relic instrumentation to surface the current performance metrics relative to those objectives. Measurable SLOs and visibility into your current progress against those SLOs ensure that you will be able to properly assess future optimization efforts. Service level components An SLO is an agreed upon means of measuring the performance of your service. The SLO defines a target value of a specified quantitative measure, which is called a service level indicator (SLI); for example: Average response time Response time percentile Application availability SLOs clarify a target value for SLIs; for example: Average response time should be less than 200 ms 95% of requests should be completed within 250 ms Availability of the service should be 99.99% Logically group SLOs together to provide an overall boolean indicator of whether or not the service is meeting expectations. For example, a helpful SLO for alerting purposes could be: 95% of requests completed within 250 ms AND availability is 99.99% Copy Service level components Example values SLI (Indicator) HTTP status codes SLO (Objective) < 1% HTTP 500s over 30 days SLA (Agreement) For every additional .1% of HTTP 500s, 5% refund of total contract Resources Value stream mapping can be a useful exercise to work through before setting SLOs. Work with your teams to clarify key components of your service and the appropriate metrics. Use these inputs as starting points for this tutorial. In addition: Learn about SLOs, SLIs, and SLAs from the Google Cloud Platform blog. Learn how New Relic has applied SLOs and SLIs into its reliability practices form this SREcon18 Americas presentation (approximately 21 minutes). 1. Build an inventory of services requiring SLOs Start defining SLOs for your application by first taking an inventory of the services that your application provides to both your internal and external customers. Draft a list of services. Make the scope of services you consider as comprehensive as possible. Engage your team members and other stakeholders to validate the list for completeness. Segment your application stack to understand the potential components that might require SLOs. For example, most applications can be segmented as: Application (backend/microservices) Dependency services (such as the message queue) Database Website Underlying servers This example lists components that would benefit from SLOs: Customer type Component name Owner Language stack Operating system External Service 1 John D. Java RHEL 6 Internal Service 2 Jane A. .NET Win2003 R2 Internal ActiveMQ John D. Java AIX External Website Jane A. Classic ASP Win2000 Internal MS SQL Dave Z. n/a Win2003 R2 Building a definitive list of services that require an SLO can be challenging, because an application often consists of many endpoints with complex interdependencies. Begin your SLO journey with pragmatism. Start by defining a broader, simpler set of SLOs that are driven by what your customers care about most and what your team can control. As your teams better align around SLOs, you can then begin to fine-tune and add more complexity. 2. Research customer expectations for SLOs Once you have an inventory of services, begin to gather the information you need to define the SLOs for those services. Interviews with customers that depend on your services are often valuable for understanding service expectations. For example, to define SLOs for internal teams, New Relic, ask questions such as: If possible, can you broadly categorize the types of requests we can expect from you and your service? To what extent do you or your service depend on timely responses to requests? Are there requests for which response time is not critical? How does your service handle unavailable dependencies or data? What is the maximum amount of unavailable data that your service can handle? At what threshold does your service fail if a request takes too long? What are acceptable rates of errors? What would a SLA look like between our product and yours? Existing usage data can also be a helpful research input. 3. Define SLOs Using the research on customer expectations that you gathered, draft a focused set of SLOs. New Relic recommends setting SLOs against one or more of the following SLIs: Application availability percentage Average response time Response percentile Error rate Apdex value Also, consider instrumenting and tracking the following SLIs: Throughput (peak and trough) Database call count and duration DNS and SSL timing DOM processing and page rendering Mean-time-to-detection (MTTD) For a more comprehensive list of potential areas to measure, see Measuring DevOps. Recommendation: To determine if your application is performing to customer expectations: Consider combining multiple SLIs (for example, availability and response time) into one SLO. Aim to define a consistent set of conditions across all of the services in your list. Consult your team and stakeholders to validate that the SLOs you set are reasonable, consistently attainable (even if you are not currently meeting them), and aligned to customer expectations. After you finish this step, you should have a set of well-defined SLOs and SLIs. 4. Determine what can be instrumented Now you're ready to deploy agents or monitors to establish a performance baseline for the SLIs you created. With proper instrumentation in place, you'll have visibility into the performance indicators that matter for your team and your customers. In addition, you'll also have a clear understanding of how to meet your SLOs. Identify the service components your team will optimize. Verify which application tiers meet New Relic monitoring requirements. To ensure you have robust baselines from which to work, determine the level of instrumentation that is possible (or allowed) within your organization. It's best practice to instrument everything you can, but there may be situations where instrumentation isn't viable. In that case, you should determine what other data is available or can be created. For example, you can gather logs to query them for SLO data and set alerts for them. one.newrelic.com > Logs: Use the New Relic log management UI to leverage your logs. If the application has a web front end in these situations, use New Relic synthetic monitors. Our synthetic monitors offer non-agent monitoring while still providing the ability to establish a baseline. To instrument the example applications and components in this tutorial, use these New Relic features: New Relic products Customer type Component name Tier owner Language stack Server OS New Relic products External Service 1 John D. Java RHEL 6 APM, infrastructure monitoring, synthetic monitors Internal Service 2 Jane A. .Net Win2003 R2 APM, infrastructure monitoring Internal ActiveMQ John D. Java AIX APM External Website Jane A. Classic ASP Win2000 Synthetic monitors Internal MS SQL Dave Z. NA Win2003 R2 Infrastructure monitoring, on-host integrations APM installation After reviewing the compatibility and requirements for New Relic APM, install an APM agent on your application stack. Steps for installing APM agents vary based on language agent type. Follow the install procedures for a specific APM agents. Infrastructure installation After reviewing the requirements for New Relic infrastructure monitoring, follow the install procedures to install the infrastructure agent on instances that host your applications. The infrastructure agent requires the following host permissions: Linux: To install and run the agent, you must have root privileges. Windows: To install and run the agent, you must have Administrator privileges. Infrastructure on-host integrations To gain extended visibility into applications that your code depends on, deploy on-host integrations based on their availability. New Relic supports several commonly used application components, including MySQL, Apache, NGINX, and more. For more information, see our on-host integration docs. Synthetics New Relic synthetic monitoring gives you a suite of automated, scriptable tools to monitor your websites, critical business transactions, and API endpoints. Follow the procedures to create a simple browser check. Be sure to verify that your website URL is accessible from the Synthetics public network locations. Browser monitoring New Relic browser monitoring provides deep insights into how your users are interacting with your application or website. Browser monitoring complements synthetic monitors with data based on actual user experiences, which is useful in discerning how DevOps efforts are ultimately improving the experience for the customer. For more information, see the compatibility and requirements, then install the New Relic browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs new performance data needs. Installation of New Relic mobile monitoring lets DevOps teams instrument iOS and Android applications to gain a fuller understanding of service delivery quality. 5. Review the default metrics After you deploy the agents and monitors, use service maps to review the default metrics that New Relic captures. For example, a typical service map show many of the common SLIs that application teams rely on, including response time, Apdex, throughput, and error rate metrics from APM. It also shows page load time, Ajax response, throughput, and error rate from browser monitoring. rpm.newrelic.com > Service maps: To explore detailed granularity for any area, use the service map's nodes. 6. Set up custom instrumentation To close any remaining gaps in visibility for your SLIs, use custom instrumentation. New Relic provides several avenues for adding custom instrumentation, including: Making API calls to agents from inside your source code Packaging XML-based custom instrumentation modules with deployed applications Adding UI-based instrumentation without a code deploy In addition, you can add custom attributes to each transaction event that match application performance factors to critical business information. Then you can track those attributes in Insights dashboards. For more information, see the custom instrumentation documentation for your application: APM Browser Infrastructure Insights Mobile Synthetics 7. Create dashboards to track SLIs Once you implement the appropriate instrumentation, it's easy to visualize your service level indicators with New Relic dashboards, which provide a single location to query and view all the data that New Relic tools gather. To learn more about how to run queries to produce charts and dashboards, see Introduction to query builder. For more about the data you can query, see New Relic data types. The metrics you capture will become your application's baseline. Share dashboards with your application team and stakeholders to provide visibility into what is happening with your application and to monitor future performance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.74313,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>New</em> <em>Relic</em> products",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": ". For more information, see the compatibility and requirements, then install the <em>New</em> <em>Relic</em> browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs <em>new</em> performance data needs. Installation of <em>New</em> <em>Relic</em> mobile monitoring lets <em>DevOps</em> teams instrument iOS"
      },
      "id": "6044151ee7b9d259ef5799ea"
    },
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T17:37:49Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they’re consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s DevOps transformation. 2. Add automated deployment markers It’s important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM’s deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or “marker”, on charts and graphs at the deployment event’s timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you’re satisfied with the application’s performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.8224,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-06-08T22:24:00Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your application’s performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your application’s architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the application’s environment searchable. Any convention you use should be unique to your organization’s structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your application’s performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our application’s overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue you’re investigating. In this example, we’ve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, it’s obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If you’re not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, it’s responsible for 99.9% of the app server time, which means we’re getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issues—the red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that it’s highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customers—which will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the “norm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, it’s important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.81638,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/infrastructure-resource-sizing-analyze-operation-metrics": [
    {
      "sections": [
        "Establish objectives and baselines: define team SLOs",
        "Service level components",
        "Resources",
        "1. Build an inventory of services requiring SLOs",
        "2. Research customer expectations for SLOs",
        "3. Define SLOs",
        "4. Determine what can be instrumented",
        "New Relic products",
        "APM installation",
        "Infrastructure installation",
        "Infrastructure on-host integrations",
        "Synthetics",
        "Browser monitoring",
        "Mobile monitoring",
        "5. Review the default metrics",
        "6. Set up custom instrumentation",
        "7. Create dashboards to track SLIs"
      ],
      "title": "Establish objectives and baselines: define team SLOs",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "8988bb84fc5add9019fdc3ded2eb4de431ea63db",
      "image": "https://docs.newrelic.com/static/3a9f13f0b98dead811d9f7f56cc2a594/1f083/catalyst-establish-objectives-1_4.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-objectives-baselines-define-team-slos/",
      "published_at": "2021-06-09T18:11:26Z",
      "updated_at": "2021-06-02T16:58:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A DevOps transformation requires a cultural shift so that teams can build new skills and motivations for the type of cross-team work required in a true DevOps practice. The transformation can be difficult when the people involved do not see the benefits of change as a clear objective. Service level objectives (SLOs) provide a powerful mechanism to codify the goals of a DevOps team in a way that can be measured and shared. They also provide clear boundaries on service expectations that help teams achieve greater velocity and freedom in experimenting with new approaches. This tutorial defines SLOs for successful service delivery objectives and utilize New Relic instrumentation to surface the current performance metrics relative to those objectives. Measurable SLOs and visibility into your current progress against those SLOs ensure that you will be able to properly assess future optimization efforts. Service level components An SLO is an agreed upon means of measuring the performance of your service. The SLO defines a target value of a specified quantitative measure, which is called a service level indicator (SLI); for example: Average response time Response time percentile Application availability SLOs clarify a target value for SLIs; for example: Average response time should be less than 200 ms 95% of requests should be completed within 250 ms Availability of the service should be 99.99% Logically group SLOs together to provide an overall boolean indicator of whether or not the service is meeting expectations. For example, a helpful SLO for alerting purposes could be: 95% of requests completed within 250 ms AND availability is 99.99% Copy Service level components Example values SLI (Indicator) HTTP status codes SLO (Objective) < 1% HTTP 500s over 30 days SLA (Agreement) For every additional .1% of HTTP 500s, 5% refund of total contract Resources Value stream mapping can be a useful exercise to work through before setting SLOs. Work with your teams to clarify key components of your service and the appropriate metrics. Use these inputs as starting points for this tutorial. In addition: Learn about SLOs, SLIs, and SLAs from the Google Cloud Platform blog. Learn how New Relic has applied SLOs and SLIs into its reliability practices form this SREcon18 Americas presentation (approximately 21 minutes). 1. Build an inventory of services requiring SLOs Start defining SLOs for your application by first taking an inventory of the services that your application provides to both your internal and external customers. Draft a list of services. Make the scope of services you consider as comprehensive as possible. Engage your team members and other stakeholders to validate the list for completeness. Segment your application stack to understand the potential components that might require SLOs. For example, most applications can be segmented as: Application (backend/microservices) Dependency services (such as the message queue) Database Website Underlying servers This example lists components that would benefit from SLOs: Customer type Component name Owner Language stack Operating system External Service 1 John D. Java RHEL 6 Internal Service 2 Jane A. .NET Win2003 R2 Internal ActiveMQ John D. Java AIX External Website Jane A. Classic ASP Win2000 Internal MS SQL Dave Z. n/a Win2003 R2 Building a definitive list of services that require an SLO can be challenging, because an application often consists of many endpoints with complex interdependencies. Begin your SLO journey with pragmatism. Start by defining a broader, simpler set of SLOs that are driven by what your customers care about most and what your team can control. As your teams better align around SLOs, you can then begin to fine-tune and add more complexity. 2. Research customer expectations for SLOs Once you have an inventory of services, begin to gather the information you need to define the SLOs for those services. Interviews with customers that depend on your services are often valuable for understanding service expectations. For example, to define SLOs for internal teams, New Relic, ask questions such as: If possible, can you broadly categorize the types of requests we can expect from you and your service? To what extent do you or your service depend on timely responses to requests? Are there requests for which response time is not critical? How does your service handle unavailable dependencies or data? What is the maximum amount of unavailable data that your service can handle? At what threshold does your service fail if a request takes too long? What are acceptable rates of errors? What would a SLA look like between our product and yours? Existing usage data can also be a helpful research input. 3. Define SLOs Using the research on customer expectations that you gathered, draft a focused set of SLOs. New Relic recommends setting SLOs against one or more of the following SLIs: Application availability percentage Average response time Response percentile Error rate Apdex value Also, consider instrumenting and tracking the following SLIs: Throughput (peak and trough) Database call count and duration DNS and SSL timing DOM processing and page rendering Mean-time-to-detection (MTTD) For a more comprehensive list of potential areas to measure, see Measuring DevOps. Recommendation: To determine if your application is performing to customer expectations: Consider combining multiple SLIs (for example, availability and response time) into one SLO. Aim to define a consistent set of conditions across all of the services in your list. Consult your team and stakeholders to validate that the SLOs you set are reasonable, consistently attainable (even if you are not currently meeting them), and aligned to customer expectations. After you finish this step, you should have a set of well-defined SLOs and SLIs. 4. Determine what can be instrumented Now you're ready to deploy agents or monitors to establish a performance baseline for the SLIs you created. With proper instrumentation in place, you'll have visibility into the performance indicators that matter for your team and your customers. In addition, you'll also have a clear understanding of how to meet your SLOs. Identify the service components your team will optimize. Verify which application tiers meet New Relic monitoring requirements. To ensure you have robust baselines from which to work, determine the level of instrumentation that is possible (or allowed) within your organization. It's best practice to instrument everything you can, but there may be situations where instrumentation isn't viable. In that case, you should determine what other data is available or can be created. For example, you can gather logs to query them for SLO data and set alerts for them. one.newrelic.com > Logs: Use the New Relic log management UI to leverage your logs. If the application has a web front end in these situations, use New Relic synthetic monitors. Our synthetic monitors offer non-agent monitoring while still providing the ability to establish a baseline. To instrument the example applications and components in this tutorial, use these New Relic features: New Relic products Customer type Component name Tier owner Language stack Server OS New Relic products External Service 1 John D. Java RHEL 6 APM, infrastructure monitoring, synthetic monitors Internal Service 2 Jane A. .Net Win2003 R2 APM, infrastructure monitoring Internal ActiveMQ John D. Java AIX APM External Website Jane A. Classic ASP Win2000 Synthetic monitors Internal MS SQL Dave Z. NA Win2003 R2 Infrastructure monitoring, on-host integrations APM installation After reviewing the compatibility and requirements for New Relic APM, install an APM agent on your application stack. Steps for installing APM agents vary based on language agent type. Follow the install procedures for a specific APM agents. Infrastructure installation After reviewing the requirements for New Relic infrastructure monitoring, follow the install procedures to install the infrastructure agent on instances that host your applications. The infrastructure agent requires the following host permissions: Linux: To install and run the agent, you must have root privileges. Windows: To install and run the agent, you must have Administrator privileges. Infrastructure on-host integrations To gain extended visibility into applications that your code depends on, deploy on-host integrations based on their availability. New Relic supports several commonly used application components, including MySQL, Apache, NGINX, and more. For more information, see our on-host integration docs. Synthetics New Relic synthetic monitoring gives you a suite of automated, scriptable tools to monitor your websites, critical business transactions, and API endpoints. Follow the procedures to create a simple browser check. Be sure to verify that your website URL is accessible from the Synthetics public network locations. Browser monitoring New Relic browser monitoring provides deep insights into how your users are interacting with your application or website. Browser monitoring complements synthetic monitors with data based on actual user experiences, which is useful in discerning how DevOps efforts are ultimately improving the experience for the customer. For more information, see the compatibility and requirements, then install the New Relic browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs new performance data needs. Installation of New Relic mobile monitoring lets DevOps teams instrument iOS and Android applications to gain a fuller understanding of service delivery quality. 5. Review the default metrics After you deploy the agents and monitors, use service maps to review the default metrics that New Relic captures. For example, a typical service map show many of the common SLIs that application teams rely on, including response time, Apdex, throughput, and error rate metrics from APM. It also shows page load time, Ajax response, throughput, and error rate from browser monitoring. rpm.newrelic.com > Service maps: To explore detailed granularity for any area, use the service map's nodes. 6. Set up custom instrumentation To close any remaining gaps in visibility for your SLIs, use custom instrumentation. New Relic provides several avenues for adding custom instrumentation, including: Making API calls to agents from inside your source code Packaging XML-based custom instrumentation modules with deployed applications Adding UI-based instrumentation without a code deploy In addition, you can add custom attributes to each transaction event that match application performance factors to critical business information. Then you can track those attributes in Insights dashboards. For more information, see the custom instrumentation documentation for your application: APM Browser Infrastructure Insights Mobile Synthetics 7. Create dashboards to track SLIs Once you implement the appropriate instrumentation, it's easy to visualize your service level indicators with New Relic dashboards, which provide a single location to query and view all the data that New Relic tools gather. To learn more about how to run queries to produce charts and dashboards, see Introduction to query builder. For more about the data you can query, see New Relic data types. The metrics you capture will become your application's baseline. Share dashboards with your application team and stakeholders to provide visibility into what is happening with your application and to monitor future performance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.74313,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>New</em> <em>Relic</em> products",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": ". For more information, see the compatibility and requirements, then install the <em>New</em> <em>Relic</em> browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs <em>new</em> performance data needs. Installation of <em>New</em> <em>Relic</em> mobile monitoring lets <em>DevOps</em> teams instrument iOS"
      },
      "id": "6044151ee7b9d259ef5799ea"
    },
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T17:37:49Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they’re consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s DevOps transformation. 2. Add automated deployment markers It’s important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM’s deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or “marker”, on charts and graphs at the deployment event’s timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you’re satisfied with the application’s performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.8224,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-06-08T22:24:00Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your application’s performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your application’s architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the application’s environment searchable. Any convention you use should be unique to your organization’s structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your application’s performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our application’s overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue you’re investigating. In this example, we’ve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, it’s obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If you’re not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, it’s responsible for 99.9% of the app server time, which means we’re getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issues—the red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that it’s highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customers—which will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the “norm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, it’s important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.81638,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments": [
    {
      "sections": [
        "Establish objectives and baselines: define team SLOs",
        "Service level components",
        "Resources",
        "1. Build an inventory of services requiring SLOs",
        "2. Research customer expectations for SLOs",
        "3. Define SLOs",
        "4. Determine what can be instrumented",
        "New Relic products",
        "APM installation",
        "Infrastructure installation",
        "Infrastructure on-host integrations",
        "Synthetics",
        "Browser monitoring",
        "Mobile monitoring",
        "5. Review the default metrics",
        "6. Set up custom instrumentation",
        "7. Create dashboards to track SLIs"
      ],
      "title": "Establish objectives and baselines: define team SLOs",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "8988bb84fc5add9019fdc3ded2eb4de431ea63db",
      "image": "https://docs.newrelic.com/static/3a9f13f0b98dead811d9f7f56cc2a594/1f083/catalyst-establish-objectives-1_4.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-objectives-baselines-define-team-slos/",
      "published_at": "2021-06-09T18:11:26Z",
      "updated_at": "2021-06-02T16:58:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A DevOps transformation requires a cultural shift so that teams can build new skills and motivations for the type of cross-team work required in a true DevOps practice. The transformation can be difficult when the people involved do not see the benefits of change as a clear objective. Service level objectives (SLOs) provide a powerful mechanism to codify the goals of a DevOps team in a way that can be measured and shared. They also provide clear boundaries on service expectations that help teams achieve greater velocity and freedom in experimenting with new approaches. This tutorial defines SLOs for successful service delivery objectives and utilize New Relic instrumentation to surface the current performance metrics relative to those objectives. Measurable SLOs and visibility into your current progress against those SLOs ensure that you will be able to properly assess future optimization efforts. Service level components An SLO is an agreed upon means of measuring the performance of your service. The SLO defines a target value of a specified quantitative measure, which is called a service level indicator (SLI); for example: Average response time Response time percentile Application availability SLOs clarify a target value for SLIs; for example: Average response time should be less than 200 ms 95% of requests should be completed within 250 ms Availability of the service should be 99.99% Logically group SLOs together to provide an overall boolean indicator of whether or not the service is meeting expectations. For example, a helpful SLO for alerting purposes could be: 95% of requests completed within 250 ms AND availability is 99.99% Copy Service level components Example values SLI (Indicator) HTTP status codes SLO (Objective) < 1% HTTP 500s over 30 days SLA (Agreement) For every additional .1% of HTTP 500s, 5% refund of total contract Resources Value stream mapping can be a useful exercise to work through before setting SLOs. Work with your teams to clarify key components of your service and the appropriate metrics. Use these inputs as starting points for this tutorial. In addition: Learn about SLOs, SLIs, and SLAs from the Google Cloud Platform blog. Learn how New Relic has applied SLOs and SLIs into its reliability practices form this SREcon18 Americas presentation (approximately 21 minutes). 1. Build an inventory of services requiring SLOs Start defining SLOs for your application by first taking an inventory of the services that your application provides to both your internal and external customers. Draft a list of services. Make the scope of services you consider as comprehensive as possible. Engage your team members and other stakeholders to validate the list for completeness. Segment your application stack to understand the potential components that might require SLOs. For example, most applications can be segmented as: Application (backend/microservices) Dependency services (such as the message queue) Database Website Underlying servers This example lists components that would benefit from SLOs: Customer type Component name Owner Language stack Operating system External Service 1 John D. Java RHEL 6 Internal Service 2 Jane A. .NET Win2003 R2 Internal ActiveMQ John D. Java AIX External Website Jane A. Classic ASP Win2000 Internal MS SQL Dave Z. n/a Win2003 R2 Building a definitive list of services that require an SLO can be challenging, because an application often consists of many endpoints with complex interdependencies. Begin your SLO journey with pragmatism. Start by defining a broader, simpler set of SLOs that are driven by what your customers care about most and what your team can control. As your teams better align around SLOs, you can then begin to fine-tune and add more complexity. 2. Research customer expectations for SLOs Once you have an inventory of services, begin to gather the information you need to define the SLOs for those services. Interviews with customers that depend on your services are often valuable for understanding service expectations. For example, to define SLOs for internal teams, New Relic, ask questions such as: If possible, can you broadly categorize the types of requests we can expect from you and your service? To what extent do you or your service depend on timely responses to requests? Are there requests for which response time is not critical? How does your service handle unavailable dependencies or data? What is the maximum amount of unavailable data that your service can handle? At what threshold does your service fail if a request takes too long? What are acceptable rates of errors? What would a SLA look like between our product and yours? Existing usage data can also be a helpful research input. 3. Define SLOs Using the research on customer expectations that you gathered, draft a focused set of SLOs. New Relic recommends setting SLOs against one or more of the following SLIs: Application availability percentage Average response time Response percentile Error rate Apdex value Also, consider instrumenting and tracking the following SLIs: Throughput (peak and trough) Database call count and duration DNS and SSL timing DOM processing and page rendering Mean-time-to-detection (MTTD) For a more comprehensive list of potential areas to measure, see Measuring DevOps. Recommendation: To determine if your application is performing to customer expectations: Consider combining multiple SLIs (for example, availability and response time) into one SLO. Aim to define a consistent set of conditions across all of the services in your list. Consult your team and stakeholders to validate that the SLOs you set are reasonable, consistently attainable (even if you are not currently meeting them), and aligned to customer expectations. After you finish this step, you should have a set of well-defined SLOs and SLIs. 4. Determine what can be instrumented Now you're ready to deploy agents or monitors to establish a performance baseline for the SLIs you created. With proper instrumentation in place, you'll have visibility into the performance indicators that matter for your team and your customers. In addition, you'll also have a clear understanding of how to meet your SLOs. Identify the service components your team will optimize. Verify which application tiers meet New Relic monitoring requirements. To ensure you have robust baselines from which to work, determine the level of instrumentation that is possible (or allowed) within your organization. It's best practice to instrument everything you can, but there may be situations where instrumentation isn't viable. In that case, you should determine what other data is available or can be created. For example, you can gather logs to query them for SLO data and set alerts for them. one.newrelic.com > Logs: Use the New Relic log management UI to leverage your logs. If the application has a web front end in these situations, use New Relic synthetic monitors. Our synthetic monitors offer non-agent monitoring while still providing the ability to establish a baseline. To instrument the example applications and components in this tutorial, use these New Relic features: New Relic products Customer type Component name Tier owner Language stack Server OS New Relic products External Service 1 John D. Java RHEL 6 APM, infrastructure monitoring, synthetic monitors Internal Service 2 Jane A. .Net Win2003 R2 APM, infrastructure monitoring Internal ActiveMQ John D. Java AIX APM External Website Jane A. Classic ASP Win2000 Synthetic monitors Internal MS SQL Dave Z. NA Win2003 R2 Infrastructure monitoring, on-host integrations APM installation After reviewing the compatibility and requirements for New Relic APM, install an APM agent on your application stack. Steps for installing APM agents vary based on language agent type. Follow the install procedures for a specific APM agents. Infrastructure installation After reviewing the requirements for New Relic infrastructure monitoring, follow the install procedures to install the infrastructure agent on instances that host your applications. The infrastructure agent requires the following host permissions: Linux: To install and run the agent, you must have root privileges. Windows: To install and run the agent, you must have Administrator privileges. Infrastructure on-host integrations To gain extended visibility into applications that your code depends on, deploy on-host integrations based on their availability. New Relic supports several commonly used application components, including MySQL, Apache, NGINX, and more. For more information, see our on-host integration docs. Synthetics New Relic synthetic monitoring gives you a suite of automated, scriptable tools to monitor your websites, critical business transactions, and API endpoints. Follow the procedures to create a simple browser check. Be sure to verify that your website URL is accessible from the Synthetics public network locations. Browser monitoring New Relic browser monitoring provides deep insights into how your users are interacting with your application or website. Browser monitoring complements synthetic monitors with data based on actual user experiences, which is useful in discerning how DevOps efforts are ultimately improving the experience for the customer. For more information, see the compatibility and requirements, then install the New Relic browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs new performance data needs. Installation of New Relic mobile monitoring lets DevOps teams instrument iOS and Android applications to gain a fuller understanding of service delivery quality. 5. Review the default metrics After you deploy the agents and monitors, use service maps to review the default metrics that New Relic captures. For example, a typical service map show many of the common SLIs that application teams rely on, including response time, Apdex, throughput, and error rate metrics from APM. It also shows page load time, Ajax response, throughput, and error rate from browser monitoring. rpm.newrelic.com > Service maps: To explore detailed granularity for any area, use the service map's nodes. 6. Set up custom instrumentation To close any remaining gaps in visibility for your SLIs, use custom instrumentation. New Relic provides several avenues for adding custom instrumentation, including: Making API calls to agents from inside your source code Packaging XML-based custom instrumentation modules with deployed applications Adding UI-based instrumentation without a code deploy In addition, you can add custom attributes to each transaction event that match application performance factors to critical business information. Then you can track those attributes in Insights dashboards. For more information, see the custom instrumentation documentation for your application: APM Browser Infrastructure Insights Mobile Synthetics 7. Create dashboards to track SLIs Once you implement the appropriate instrumentation, it's easy to visualize your service level indicators with New Relic dashboards, which provide a single location to query and view all the data that New Relic tools gather. To learn more about how to run queries to produce charts and dashboards, see Introduction to query builder. For more about the data you can query, see New Relic data types. The metrics you capture will become your application's baseline. Share dashboards with your application team and stakeholders to provide visibility into what is happening with your application and to monitor future performance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.74304,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>New</em> <em>Relic</em> products",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": ". For more information, see the compatibility and requirements, then install the <em>New</em> <em>Relic</em> browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs <em>new</em> performance data needs. Installation of <em>New</em> <em>Relic</em> mobile monitoring lets <em>DevOps</em> teams instrument iOS"
      },
      "id": "6044151ee7b9d259ef5799ea"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-06-08T22:24:00Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your application’s performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your application’s architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the application’s environment searchable. Any convention you use should be unique to your organization’s structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your application’s performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our application’s overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue you’re investigating. In this example, we’ve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, it’s obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If you’re not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, it’s responsible for 99.9% of the app server time, which means we’re getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issues—the red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that it’s highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customers—which will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the “norm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, it’s important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.81635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    },
    {
      "sections": [
        "Resolve dependency risk: identify and analyze potential issues",
        "Prerequisites",
        "1. Analyze dependencies with service maps",
        "2. Identify back-end application dependency risks",
        "Tip",
        "3. Identify front-end dependency risk",
        "4. Identify Microservice Dependencies",
        "5. Create an action plan for risk mitigation"
      ],
      "title": "Resolve dependency risk: identify and analyze potential issues",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "4911ddf0c6fca572b52e22fbe464f21f0c6f338f",
      "image": "https://docs.newrelic.com/static/d1d4cf78d193ae770219cfdb9f6f792f/c1b63/distributed-trace_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues/",
      "published_at": "2021-06-09T16:30:30Z",
      "updated_at": "2021-05-15T22:15:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Successfully scaling DevOps requires a robust understanding of dependencies across application teams and related services. Use New Relics service maps to discover and mitigate risky dependencies from upstream and downstream services. Prerequisites This tutorial assumes you’ve completed the previous DevOps procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. New Relic recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com > Service Maps > App/Service list This initial view shows all applications that are configured in your account. Applications that have violated a warning threshold are shown in yellow, and those with an active alert are shown in red. Healthy applications appear in green. New Relic uses a bold line to map applications to the services (such as databases) they connect to. Familiarize yourself with these maps to see how applications and their services fit together. Take note of which applications have the most dependencies and which rely on the same dependency, such as an API. Click an application to see high level metrics about that app, including throughput, response time, Apdex score, and error rate for the last 30 minutes. Tracking throughput is a good way to determine which of your applications are serving the most traffic. After looking at the architecture as a whole, review the applications that have the most dependencies. Select the App/Services list to see a full list of your applications. one.newrelic.com > Service Maps > App/Service list In this example, we’ve chosen Tower-Chicago from the App/Services list. All of the traffic being sent to Tower-Chicago is coming from Proxy-East. In this case, Tower-Chicago is showing 48.3 requests per minute, or 11.3% of the 426 requests per minute flowing through Proxy-East. one.newrelic.com > Service Maps > App/Service list In most cases, the separate applications and services represented in service maps are created and maintained by separate teams. This exercise of walking through the dependencies of your architecture should involve representatives from each of those teams. Teams should work together to ask questions such as: How critical is this particular dependency? What would happen if it were to go down? What happened last time it went down? Was there a revenue loss? 2. Identify back-end application dependency risks Once you’ve analyzed your applications’ dependencies, you’ll want to examine the quality of dependency execution. For example, is the dependency stable and predictable for each application or transaction you’ve identified? To do this, you’ll first need to gather as much information as you can about the applications from New Relic Insights, which helps you analyze data that is collected about the applications in more detail. Here is an example NRQL query to further analyze back-end service performance: SELECT count(appName)/30 as 'Throughput', apdex(duration), average(duration), stddev(duration), max(duration), count(error_type), uniquecount(host) FROM Transaction FACET appName SINCE 30 MINUTES AGO Copy This query shows you each application’s request per minute (throughput), Apdex score, and an overview of how the application is performing overall (through the standard deviation calculation, in which lower numbers are generally better). It also shows errors for the time period and the number of hosts on which the application is running. insights.newrelic.com > query results Next, gather information on incidents and events related to the services from New Relic Alerts: Click Alerts > Incidents > All Incidents. alerts.newrelic.com > Incidents > All Incidents Click Alerts > Events > All Events. alerts.newrelic.com > Incidents > All Events Tip Using webhooks to send alert events to New Relic Insights, allows you to supplement your dashboards with Alerts data. The process is outlined in this community discussion post. Here is a simplified example of the results of this exercise: Application Number of dependencies RPM Hosts APDEX (avg) Last outage TTR (hrs) Routing Service 10 983 4 .93 2/19/18 .75 Tower Austin 1 58 1 .95 10/11/17 1.5 Proxy-East 11 498 4 .92 1/4/18 .25 Proxy-West 11 495 4 .97 12/3/17 .25 WebPortal 7 396 8 .98 4/1/18 2.5 Supplement this data with the data that your teams know about your service and that you gathered from the dependency exercise in step 1, and use that data to develop hypotheses about the highest risk areas in your services that should be mitigated. 3. Identify front-end dependency risk Once you’ve analyzed back-end dependencies, explore front-end dependencies. This is a critical step because as you walk higher up the stack and closer to the user, you will likely have more dependencies and abstractions. Service maps seamlessly integrate data from New Relic Browser and New Relic Mobile to help you understand the dependencies from front-end user interfaces to back-end services. one.newrelic.com > Service Maps Use the service map view to drill into front-end dependencies, and execute a similar exercise to the one you executed for back-end dependencies. This exercise will again expose data to help you identify risk areas you should address and optimize. We recommend that you conduct the analysis with user interface (UI) teams so that you can also gather a complementary qualitative understanding of what the UI teams consider critical based on their experience. A ranking from the UI teams of the most critical dependency is a useful output of this work. 4. Identify Microservice Dependencies If you are using microservices, you can have dozens, if not hundreds, of services that are calling each other. Use Distributed Tracing to see how all those services connect together and how your requests flow through those different services. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. A distributed trace is composed of multiple \"spans,\" which represent time spent in services or resources of those services. Click on the Distributed tracing menu in New Relic APM left nav. You can see “trace listing” view where you’ll be able to quickly identify slow traces and traces with errors. The scatter plot lets you easily see outliers. Below that are the trace summaries, click on a trace to see details. Dive into distributed traces to see how long each span takes. Click into each span to see historical performance charts and associated attributes that layer in the context you need to understand and troubleshoot issues. one.newrelic.com > APM > (select an app) > Distributed tracing This rounds out your list of dependencies. 5. Create an action plan for risk mitigation Once you’ve analyzed the dependencies across your application from both front-end and back-end services, create an action plan to reduce dependency risks and achieve your service level objectives (SLO). As you prioritize these next steps, we recommend you keep these four principles in mind: Understand your risk tolerance. It’s helpful to have a clear picture of your tolerance for risk, which ideally should be informed by your service level objectives (refer to the Establish Objectives and Baselines tutorial for more information). Set an alert policy to monitor dependencies that you’ve determined have a high relationship to SLO achievement. Minimize dependencies. The simpler you keep your code, the less functions you'll have referring to other modules. Removing unnecessary complexity is an important way to ensure you have a maintainable system that meets your customers’ expectations. Localize dependencies. For the code you write, package together functions that depend on each other whenever possible. Stabilize dependencies. When dependencies are unavoidable, mitigate risks by ensuring these dependencies point to modules that are the least likely to change or are easier to substitute. When your action plan is complete, monitor the results of the efforts. The efficacy of your actions to resolve dependency risks should ultimately be measured by your SLOs",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.61237,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " <em>DevOps</em> procedures. 1. Analyze dependencies with service maps Use service maps for each application and note any dependent systems and transactions. <em>New</em> <em>Relic</em> recommends that you start by viewing the entire architecture using the Discover your environment option. one.newrelic.com &gt; Service Maps"
      },
      "id": "60440f13e7b9d2ec025799f0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/measure-code-pipelines": [
    {
      "sections": [
        "Establish objectives and baselines: define team SLOs",
        "Service level components",
        "Resources",
        "1. Build an inventory of services requiring SLOs",
        "2. Research customer expectations for SLOs",
        "3. Define SLOs",
        "4. Determine what can be instrumented",
        "New Relic products",
        "APM installation",
        "Infrastructure installation",
        "Infrastructure on-host integrations",
        "Synthetics",
        "Browser monitoring",
        "Mobile monitoring",
        "5. Review the default metrics",
        "6. Set up custom instrumentation",
        "7. Create dashboards to track SLIs"
      ],
      "title": "Establish objectives and baselines: define team SLOs",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "8988bb84fc5add9019fdc3ded2eb4de431ea63db",
      "image": "https://docs.newrelic.com/static/3a9f13f0b98dead811d9f7f56cc2a594/1f083/catalyst-establish-objectives-1_4.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-objectives-baselines-define-team-slos/",
      "published_at": "2021-06-09T18:11:26Z",
      "updated_at": "2021-06-02T16:58:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A DevOps transformation requires a cultural shift so that teams can build new skills and motivations for the type of cross-team work required in a true DevOps practice. The transformation can be difficult when the people involved do not see the benefits of change as a clear objective. Service level objectives (SLOs) provide a powerful mechanism to codify the goals of a DevOps team in a way that can be measured and shared. They also provide clear boundaries on service expectations that help teams achieve greater velocity and freedom in experimenting with new approaches. This tutorial defines SLOs for successful service delivery objectives and utilize New Relic instrumentation to surface the current performance metrics relative to those objectives. Measurable SLOs and visibility into your current progress against those SLOs ensure that you will be able to properly assess future optimization efforts. Service level components An SLO is an agreed upon means of measuring the performance of your service. The SLO defines a target value of a specified quantitative measure, which is called a service level indicator (SLI); for example: Average response time Response time percentile Application availability SLOs clarify a target value for SLIs; for example: Average response time should be less than 200 ms 95% of requests should be completed within 250 ms Availability of the service should be 99.99% Logically group SLOs together to provide an overall boolean indicator of whether or not the service is meeting expectations. For example, a helpful SLO for alerting purposes could be: 95% of requests completed within 250 ms AND availability is 99.99% Copy Service level components Example values SLI (Indicator) HTTP status codes SLO (Objective) < 1% HTTP 500s over 30 days SLA (Agreement) For every additional .1% of HTTP 500s, 5% refund of total contract Resources Value stream mapping can be a useful exercise to work through before setting SLOs. Work with your teams to clarify key components of your service and the appropriate metrics. Use these inputs as starting points for this tutorial. In addition: Learn about SLOs, SLIs, and SLAs from the Google Cloud Platform blog. Learn how New Relic has applied SLOs and SLIs into its reliability practices form this SREcon18 Americas presentation (approximately 21 minutes). 1. Build an inventory of services requiring SLOs Start defining SLOs for your application by first taking an inventory of the services that your application provides to both your internal and external customers. Draft a list of services. Make the scope of services you consider as comprehensive as possible. Engage your team members and other stakeholders to validate the list for completeness. Segment your application stack to understand the potential components that might require SLOs. For example, most applications can be segmented as: Application (backend/microservices) Dependency services (such as the message queue) Database Website Underlying servers This example lists components that would benefit from SLOs: Customer type Component name Owner Language stack Operating system External Service 1 John D. Java RHEL 6 Internal Service 2 Jane A. .NET Win2003 R2 Internal ActiveMQ John D. Java AIX External Website Jane A. Classic ASP Win2000 Internal MS SQL Dave Z. n/a Win2003 R2 Building a definitive list of services that require an SLO can be challenging, because an application often consists of many endpoints with complex interdependencies. Begin your SLO journey with pragmatism. Start by defining a broader, simpler set of SLOs that are driven by what your customers care about most and what your team can control. As your teams better align around SLOs, you can then begin to fine-tune and add more complexity. 2. Research customer expectations for SLOs Once you have an inventory of services, begin to gather the information you need to define the SLOs for those services. Interviews with customers that depend on your services are often valuable for understanding service expectations. For example, to define SLOs for internal teams, New Relic, ask questions such as: If possible, can you broadly categorize the types of requests we can expect from you and your service? To what extent do you or your service depend on timely responses to requests? Are there requests for which response time is not critical? How does your service handle unavailable dependencies or data? What is the maximum amount of unavailable data that your service can handle? At what threshold does your service fail if a request takes too long? What are acceptable rates of errors? What would a SLA look like between our product and yours? Existing usage data can also be a helpful research input. 3. Define SLOs Using the research on customer expectations that you gathered, draft a focused set of SLOs. New Relic recommends setting SLOs against one or more of the following SLIs: Application availability percentage Average response time Response percentile Error rate Apdex value Also, consider instrumenting and tracking the following SLIs: Throughput (peak and trough) Database call count and duration DNS and SSL timing DOM processing and page rendering Mean-time-to-detection (MTTD) For a more comprehensive list of potential areas to measure, see Measuring DevOps. Recommendation: To determine if your application is performing to customer expectations: Consider combining multiple SLIs (for example, availability and response time) into one SLO. Aim to define a consistent set of conditions across all of the services in your list. Consult your team and stakeholders to validate that the SLOs you set are reasonable, consistently attainable (even if you are not currently meeting them), and aligned to customer expectations. After you finish this step, you should have a set of well-defined SLOs and SLIs. 4. Determine what can be instrumented Now you're ready to deploy agents or monitors to establish a performance baseline for the SLIs you created. With proper instrumentation in place, you'll have visibility into the performance indicators that matter for your team and your customers. In addition, you'll also have a clear understanding of how to meet your SLOs. Identify the service components your team will optimize. Verify which application tiers meet New Relic monitoring requirements. To ensure you have robust baselines from which to work, determine the level of instrumentation that is possible (or allowed) within your organization. It's best practice to instrument everything you can, but there may be situations where instrumentation isn't viable. In that case, you should determine what other data is available or can be created. For example, you can gather logs to query them for SLO data and set alerts for them. one.newrelic.com > Logs: Use the New Relic log management UI to leverage your logs. If the application has a web front end in these situations, use New Relic synthetic monitors. Our synthetic monitors offer non-agent monitoring while still providing the ability to establish a baseline. To instrument the example applications and components in this tutorial, use these New Relic features: New Relic products Customer type Component name Tier owner Language stack Server OS New Relic products External Service 1 John D. Java RHEL 6 APM, infrastructure monitoring, synthetic monitors Internal Service 2 Jane A. .Net Win2003 R2 APM, infrastructure monitoring Internal ActiveMQ John D. Java AIX APM External Website Jane A. Classic ASP Win2000 Synthetic monitors Internal MS SQL Dave Z. NA Win2003 R2 Infrastructure monitoring, on-host integrations APM installation After reviewing the compatibility and requirements for New Relic APM, install an APM agent on your application stack. Steps for installing APM agents vary based on language agent type. Follow the install procedures for a specific APM agents. Infrastructure installation After reviewing the requirements for New Relic infrastructure monitoring, follow the install procedures to install the infrastructure agent on instances that host your applications. The infrastructure agent requires the following host permissions: Linux: To install and run the agent, you must have root privileges. Windows: To install and run the agent, you must have Administrator privileges. Infrastructure on-host integrations To gain extended visibility into applications that your code depends on, deploy on-host integrations based on their availability. New Relic supports several commonly used application components, including MySQL, Apache, NGINX, and more. For more information, see our on-host integration docs. Synthetics New Relic synthetic monitoring gives you a suite of automated, scriptable tools to monitor your websites, critical business transactions, and API endpoints. Follow the procedures to create a simple browser check. Be sure to verify that your website URL is accessible from the Synthetics public network locations. Browser monitoring New Relic browser monitoring provides deep insights into how your users are interacting with your application or website. Browser monitoring complements synthetic monitors with data based on actual user experiences, which is useful in discerning how DevOps efforts are ultimately improving the experience for the customer. For more information, see the compatibility and requirements, then install the New Relic browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs new performance data needs. Installation of New Relic mobile monitoring lets DevOps teams instrument iOS and Android applications to gain a fuller understanding of service delivery quality. 5. Review the default metrics After you deploy the agents and monitors, use service maps to review the default metrics that New Relic captures. For example, a typical service map show many of the common SLIs that application teams rely on, including response time, Apdex, throughput, and error rate metrics from APM. It also shows page load time, Ajax response, throughput, and error rate from browser monitoring. rpm.newrelic.com > Service maps: To explore detailed granularity for any area, use the service map's nodes. 6. Set up custom instrumentation To close any remaining gaps in visibility for your SLIs, use custom instrumentation. New Relic provides several avenues for adding custom instrumentation, including: Making API calls to agents from inside your source code Packaging XML-based custom instrumentation modules with deployed applications Adding UI-based instrumentation without a code deploy In addition, you can add custom attributes to each transaction event that match application performance factors to critical business information. Then you can track those attributes in Insights dashboards. For more information, see the custom instrumentation documentation for your application: APM Browser Infrastructure Insights Mobile Synthetics 7. Create dashboards to track SLIs Once you implement the appropriate instrumentation, it's easy to visualize your service level indicators with New Relic dashboards, which provide a single location to query and view all the data that New Relic tools gather. To learn more about how to run queries to produce charts and dashboards, see Introduction to query builder. For more about the data you can query, see New Relic data types. The metrics you capture will become your application's baseline. Share dashboards with your application team and stakeholders to provide visibility into what is happening with your application and to monitor future performance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.74304,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>New</em> <em>Relic</em> products",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": ". For more information, see the compatibility and requirements, then install the <em>New</em> <em>Relic</em> browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs <em>new</em> performance data needs. Installation of <em>New</em> <em>Relic</em> mobile monitoring lets <em>DevOps</em> teams instrument iOS"
      },
      "id": "6044151ee7b9d259ef5799ea"
    },
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T17:37:49Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they’re consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s DevOps transformation. 2. Add automated deployment markers It’s important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM’s deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or “marker”, on charts and graphs at the deployment event’s timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you’re satisfied with the application’s performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.82239,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-06-08T22:24:00Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your application’s performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your application’s architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the application’s environment searchable. Any convention you use should be unique to your organization’s structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your application’s performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our application’s overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue you’re investigating. In this example, we’ve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, it’s obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If you’re not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, it’s responsible for 99.9% of the app server time, which means we’re getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issues—the red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that it’s highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customers—which will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the “norm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, it’s important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.81635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/operations-review-assess-optimize-team-progress": [
    {
      "sections": [
        "Establish objectives and baselines: define team SLOs",
        "Service level components",
        "Resources",
        "1. Build an inventory of services requiring SLOs",
        "2. Research customer expectations for SLOs",
        "3. Define SLOs",
        "4. Determine what can be instrumented",
        "New Relic products",
        "APM installation",
        "Infrastructure installation",
        "Infrastructure on-host integrations",
        "Synthetics",
        "Browser monitoring",
        "Mobile monitoring",
        "5. Review the default metrics",
        "6. Set up custom instrumentation",
        "7. Create dashboards to track SLIs"
      ],
      "title": "Establish objectives and baselines: define team SLOs",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "8988bb84fc5add9019fdc3ded2eb4de431ea63db",
      "image": "https://docs.newrelic.com/static/3a9f13f0b98dead811d9f7f56cc2a594/1f083/catalyst-establish-objectives-1_4.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-objectives-baselines-define-team-slos/",
      "published_at": "2021-06-09T18:11:26Z",
      "updated_at": "2021-06-02T16:58:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A DevOps transformation requires a cultural shift so that teams can build new skills and motivations for the type of cross-team work required in a true DevOps practice. The transformation can be difficult when the people involved do not see the benefits of change as a clear objective. Service level objectives (SLOs) provide a powerful mechanism to codify the goals of a DevOps team in a way that can be measured and shared. They also provide clear boundaries on service expectations that help teams achieve greater velocity and freedom in experimenting with new approaches. This tutorial defines SLOs for successful service delivery objectives and utilize New Relic instrumentation to surface the current performance metrics relative to those objectives. Measurable SLOs and visibility into your current progress against those SLOs ensure that you will be able to properly assess future optimization efforts. Service level components An SLO is an agreed upon means of measuring the performance of your service. The SLO defines a target value of a specified quantitative measure, which is called a service level indicator (SLI); for example: Average response time Response time percentile Application availability SLOs clarify a target value for SLIs; for example: Average response time should be less than 200 ms 95% of requests should be completed within 250 ms Availability of the service should be 99.99% Logically group SLOs together to provide an overall boolean indicator of whether or not the service is meeting expectations. For example, a helpful SLO for alerting purposes could be: 95% of requests completed within 250 ms AND availability is 99.99% Copy Service level components Example values SLI (Indicator) HTTP status codes SLO (Objective) < 1% HTTP 500s over 30 days SLA (Agreement) For every additional .1% of HTTP 500s, 5% refund of total contract Resources Value stream mapping can be a useful exercise to work through before setting SLOs. Work with your teams to clarify key components of your service and the appropriate metrics. Use these inputs as starting points for this tutorial. In addition: Learn about SLOs, SLIs, and SLAs from the Google Cloud Platform blog. Learn how New Relic has applied SLOs and SLIs into its reliability practices form this SREcon18 Americas presentation (approximately 21 minutes). 1. Build an inventory of services requiring SLOs Start defining SLOs for your application by first taking an inventory of the services that your application provides to both your internal and external customers. Draft a list of services. Make the scope of services you consider as comprehensive as possible. Engage your team members and other stakeholders to validate the list for completeness. Segment your application stack to understand the potential components that might require SLOs. For example, most applications can be segmented as: Application (backend/microservices) Dependency services (such as the message queue) Database Website Underlying servers This example lists components that would benefit from SLOs: Customer type Component name Owner Language stack Operating system External Service 1 John D. Java RHEL 6 Internal Service 2 Jane A. .NET Win2003 R2 Internal ActiveMQ John D. Java AIX External Website Jane A. Classic ASP Win2000 Internal MS SQL Dave Z. n/a Win2003 R2 Building a definitive list of services that require an SLO can be challenging, because an application often consists of many endpoints with complex interdependencies. Begin your SLO journey with pragmatism. Start by defining a broader, simpler set of SLOs that are driven by what your customers care about most and what your team can control. As your teams better align around SLOs, you can then begin to fine-tune and add more complexity. 2. Research customer expectations for SLOs Once you have an inventory of services, begin to gather the information you need to define the SLOs for those services. Interviews with customers that depend on your services are often valuable for understanding service expectations. For example, to define SLOs for internal teams, New Relic, ask questions such as: If possible, can you broadly categorize the types of requests we can expect from you and your service? To what extent do you or your service depend on timely responses to requests? Are there requests for which response time is not critical? How does your service handle unavailable dependencies or data? What is the maximum amount of unavailable data that your service can handle? At what threshold does your service fail if a request takes too long? What are acceptable rates of errors? What would a SLA look like between our product and yours? Existing usage data can also be a helpful research input. 3. Define SLOs Using the research on customer expectations that you gathered, draft a focused set of SLOs. New Relic recommends setting SLOs against one or more of the following SLIs: Application availability percentage Average response time Response percentile Error rate Apdex value Also, consider instrumenting and tracking the following SLIs: Throughput (peak and trough) Database call count and duration DNS and SSL timing DOM processing and page rendering Mean-time-to-detection (MTTD) For a more comprehensive list of potential areas to measure, see Measuring DevOps. Recommendation: To determine if your application is performing to customer expectations: Consider combining multiple SLIs (for example, availability and response time) into one SLO. Aim to define a consistent set of conditions across all of the services in your list. Consult your team and stakeholders to validate that the SLOs you set are reasonable, consistently attainable (even if you are not currently meeting them), and aligned to customer expectations. After you finish this step, you should have a set of well-defined SLOs and SLIs. 4. Determine what can be instrumented Now you're ready to deploy agents or monitors to establish a performance baseline for the SLIs you created. With proper instrumentation in place, you'll have visibility into the performance indicators that matter for your team and your customers. In addition, you'll also have a clear understanding of how to meet your SLOs. Identify the service components your team will optimize. Verify which application tiers meet New Relic monitoring requirements. To ensure you have robust baselines from which to work, determine the level of instrumentation that is possible (or allowed) within your organization. It's best practice to instrument everything you can, but there may be situations where instrumentation isn't viable. In that case, you should determine what other data is available or can be created. For example, you can gather logs to query them for SLO data and set alerts for them. one.newrelic.com > Logs: Use the New Relic log management UI to leverage your logs. If the application has a web front end in these situations, use New Relic synthetic monitors. Our synthetic monitors offer non-agent monitoring while still providing the ability to establish a baseline. To instrument the example applications and components in this tutorial, use these New Relic features: New Relic products Customer type Component name Tier owner Language stack Server OS New Relic products External Service 1 John D. Java RHEL 6 APM, infrastructure monitoring, synthetic monitors Internal Service 2 Jane A. .Net Win2003 R2 APM, infrastructure monitoring Internal ActiveMQ John D. Java AIX APM External Website Jane A. Classic ASP Win2000 Synthetic monitors Internal MS SQL Dave Z. NA Win2003 R2 Infrastructure monitoring, on-host integrations APM installation After reviewing the compatibility and requirements for New Relic APM, install an APM agent on your application stack. Steps for installing APM agents vary based on language agent type. Follow the install procedures for a specific APM agents. Infrastructure installation After reviewing the requirements for New Relic infrastructure monitoring, follow the install procedures to install the infrastructure agent on instances that host your applications. The infrastructure agent requires the following host permissions: Linux: To install and run the agent, you must have root privileges. Windows: To install and run the agent, you must have Administrator privileges. Infrastructure on-host integrations To gain extended visibility into applications that your code depends on, deploy on-host integrations based on their availability. New Relic supports several commonly used application components, including MySQL, Apache, NGINX, and more. For more information, see our on-host integration docs. Synthetics New Relic synthetic monitoring gives you a suite of automated, scriptable tools to monitor your websites, critical business transactions, and API endpoints. Follow the procedures to create a simple browser check. Be sure to verify that your website URL is accessible from the Synthetics public network locations. Browser monitoring New Relic browser monitoring provides deep insights into how your users are interacting with your application or website. Browser monitoring complements synthetic monitors with data based on actual user experiences, which is useful in discerning how DevOps efforts are ultimately improving the experience for the customer. For more information, see the compatibility and requirements, then install the New Relic browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs new performance data needs. Installation of New Relic mobile monitoring lets DevOps teams instrument iOS and Android applications to gain a fuller understanding of service delivery quality. 5. Review the default metrics After you deploy the agents and monitors, use service maps to review the default metrics that New Relic captures. For example, a typical service map show many of the common SLIs that application teams rely on, including response time, Apdex, throughput, and error rate metrics from APM. It also shows page load time, Ajax response, throughput, and error rate from browser monitoring. rpm.newrelic.com > Service maps: To explore detailed granularity for any area, use the service map's nodes. 6. Set up custom instrumentation To close any remaining gaps in visibility for your SLIs, use custom instrumentation. New Relic provides several avenues for adding custom instrumentation, including: Making API calls to agents from inside your source code Packaging XML-based custom instrumentation modules with deployed applications Adding UI-based instrumentation without a code deploy In addition, you can add custom attributes to each transaction event that match application performance factors to critical business information. Then you can track those attributes in Insights dashboards. For more information, see the custom instrumentation documentation for your application: APM Browser Infrastructure Insights Mobile Synthetics 7. Create dashboards to track SLIs Once you implement the appropriate instrumentation, it's easy to visualize your service level indicators with New Relic dashboards, which provide a single location to query and view all the data that New Relic tools gather. To learn more about how to run queries to produce charts and dashboards, see Introduction to query builder. For more about the data you can query, see New Relic data types. The metrics you capture will become your application's baseline. Share dashboards with your application team and stakeholders to provide visibility into what is happening with your application and to monitor future performance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.74298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>New</em> <em>Relic</em> products",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": ". For more information, see the compatibility and requirements, then install the <em>New</em> <em>Relic</em> browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs <em>new</em> performance data needs. Installation of <em>New</em> <em>Relic</em> mobile monitoring lets <em>DevOps</em> teams instrument iOS"
      },
      "id": "6044151ee7b9d259ef5799ea"
    },
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T17:37:49Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they’re consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s DevOps transformation. 2. Add automated deployment markers It’s important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM’s deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or “marker”, on charts and graphs at the deployment event’s timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you’re satisfied with the application’s performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.82236,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-06-08T22:24:00Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your application’s performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your application’s architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the application’s environment searchable. Any convention you use should be unique to your organization’s structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your application’s performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our application’s overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue you’re investigating. In this example, we’ve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, it’s obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If you’re not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, it’s responsible for 99.9% of the app server time, which means we’re getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issues—the red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that it’s highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customers—which will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the “norm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, it’s important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.81633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/resolve-dependency-risk-identify-analyze-potential-issues": [
    {
      "sections": [
        "Establish objectives and baselines: define team SLOs",
        "Service level components",
        "Resources",
        "1. Build an inventory of services requiring SLOs",
        "2. Research customer expectations for SLOs",
        "3. Define SLOs",
        "4. Determine what can be instrumented",
        "New Relic products",
        "APM installation",
        "Infrastructure installation",
        "Infrastructure on-host integrations",
        "Synthetics",
        "Browser monitoring",
        "Mobile monitoring",
        "5. Review the default metrics",
        "6. Set up custom instrumentation",
        "7. Create dashboards to track SLIs"
      ],
      "title": "Establish objectives and baselines: define team SLOs",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "8988bb84fc5add9019fdc3ded2eb4de431ea63db",
      "image": "https://docs.newrelic.com/static/3a9f13f0b98dead811d9f7f56cc2a594/1f083/catalyst-establish-objectives-1_4.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-objectives-baselines-define-team-slos/",
      "published_at": "2021-06-09T18:11:26Z",
      "updated_at": "2021-06-02T16:58:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A DevOps transformation requires a cultural shift so that teams can build new skills and motivations for the type of cross-team work required in a true DevOps practice. The transformation can be difficult when the people involved do not see the benefits of change as a clear objective. Service level objectives (SLOs) provide a powerful mechanism to codify the goals of a DevOps team in a way that can be measured and shared. They also provide clear boundaries on service expectations that help teams achieve greater velocity and freedom in experimenting with new approaches. This tutorial defines SLOs for successful service delivery objectives and utilize New Relic instrumentation to surface the current performance metrics relative to those objectives. Measurable SLOs and visibility into your current progress against those SLOs ensure that you will be able to properly assess future optimization efforts. Service level components An SLO is an agreed upon means of measuring the performance of your service. The SLO defines a target value of a specified quantitative measure, which is called a service level indicator (SLI); for example: Average response time Response time percentile Application availability SLOs clarify a target value for SLIs; for example: Average response time should be less than 200 ms 95% of requests should be completed within 250 ms Availability of the service should be 99.99% Logically group SLOs together to provide an overall boolean indicator of whether or not the service is meeting expectations. For example, a helpful SLO for alerting purposes could be: 95% of requests completed within 250 ms AND availability is 99.99% Copy Service level components Example values SLI (Indicator) HTTP status codes SLO (Objective) < 1% HTTP 500s over 30 days SLA (Agreement) For every additional .1% of HTTP 500s, 5% refund of total contract Resources Value stream mapping can be a useful exercise to work through before setting SLOs. Work with your teams to clarify key components of your service and the appropriate metrics. Use these inputs as starting points for this tutorial. In addition: Learn about SLOs, SLIs, and SLAs from the Google Cloud Platform blog. Learn how New Relic has applied SLOs and SLIs into its reliability practices form this SREcon18 Americas presentation (approximately 21 minutes). 1. Build an inventory of services requiring SLOs Start defining SLOs for your application by first taking an inventory of the services that your application provides to both your internal and external customers. Draft a list of services. Make the scope of services you consider as comprehensive as possible. Engage your team members and other stakeholders to validate the list for completeness. Segment your application stack to understand the potential components that might require SLOs. For example, most applications can be segmented as: Application (backend/microservices) Dependency services (such as the message queue) Database Website Underlying servers This example lists components that would benefit from SLOs: Customer type Component name Owner Language stack Operating system External Service 1 John D. Java RHEL 6 Internal Service 2 Jane A. .NET Win2003 R2 Internal ActiveMQ John D. Java AIX External Website Jane A. Classic ASP Win2000 Internal MS SQL Dave Z. n/a Win2003 R2 Building a definitive list of services that require an SLO can be challenging, because an application often consists of many endpoints with complex interdependencies. Begin your SLO journey with pragmatism. Start by defining a broader, simpler set of SLOs that are driven by what your customers care about most and what your team can control. As your teams better align around SLOs, you can then begin to fine-tune and add more complexity. 2. Research customer expectations for SLOs Once you have an inventory of services, begin to gather the information you need to define the SLOs for those services. Interviews with customers that depend on your services are often valuable for understanding service expectations. For example, to define SLOs for internal teams, New Relic, ask questions such as: If possible, can you broadly categorize the types of requests we can expect from you and your service? To what extent do you or your service depend on timely responses to requests? Are there requests for which response time is not critical? How does your service handle unavailable dependencies or data? What is the maximum amount of unavailable data that your service can handle? At what threshold does your service fail if a request takes too long? What are acceptable rates of errors? What would a SLA look like between our product and yours? Existing usage data can also be a helpful research input. 3. Define SLOs Using the research on customer expectations that you gathered, draft a focused set of SLOs. New Relic recommends setting SLOs against one or more of the following SLIs: Application availability percentage Average response time Response percentile Error rate Apdex value Also, consider instrumenting and tracking the following SLIs: Throughput (peak and trough) Database call count and duration DNS and SSL timing DOM processing and page rendering Mean-time-to-detection (MTTD) For a more comprehensive list of potential areas to measure, see Measuring DevOps. Recommendation: To determine if your application is performing to customer expectations: Consider combining multiple SLIs (for example, availability and response time) into one SLO. Aim to define a consistent set of conditions across all of the services in your list. Consult your team and stakeholders to validate that the SLOs you set are reasonable, consistently attainable (even if you are not currently meeting them), and aligned to customer expectations. After you finish this step, you should have a set of well-defined SLOs and SLIs. 4. Determine what can be instrumented Now you're ready to deploy agents or monitors to establish a performance baseline for the SLIs you created. With proper instrumentation in place, you'll have visibility into the performance indicators that matter for your team and your customers. In addition, you'll also have a clear understanding of how to meet your SLOs. Identify the service components your team will optimize. Verify which application tiers meet New Relic monitoring requirements. To ensure you have robust baselines from which to work, determine the level of instrumentation that is possible (or allowed) within your organization. It's best practice to instrument everything you can, but there may be situations where instrumentation isn't viable. In that case, you should determine what other data is available or can be created. For example, you can gather logs to query them for SLO data and set alerts for them. one.newrelic.com > Logs: Use the New Relic log management UI to leverage your logs. If the application has a web front end in these situations, use New Relic synthetic monitors. Our synthetic monitors offer non-agent monitoring while still providing the ability to establish a baseline. To instrument the example applications and components in this tutorial, use these New Relic features: New Relic products Customer type Component name Tier owner Language stack Server OS New Relic products External Service 1 John D. Java RHEL 6 APM, infrastructure monitoring, synthetic monitors Internal Service 2 Jane A. .Net Win2003 R2 APM, infrastructure monitoring Internal ActiveMQ John D. Java AIX APM External Website Jane A. Classic ASP Win2000 Synthetic monitors Internal MS SQL Dave Z. NA Win2003 R2 Infrastructure monitoring, on-host integrations APM installation After reviewing the compatibility and requirements for New Relic APM, install an APM agent on your application stack. Steps for installing APM agents vary based on language agent type. Follow the install procedures for a specific APM agents. Infrastructure installation After reviewing the requirements for New Relic infrastructure monitoring, follow the install procedures to install the infrastructure agent on instances that host your applications. The infrastructure agent requires the following host permissions: Linux: To install and run the agent, you must have root privileges. Windows: To install and run the agent, you must have Administrator privileges. Infrastructure on-host integrations To gain extended visibility into applications that your code depends on, deploy on-host integrations based on their availability. New Relic supports several commonly used application components, including MySQL, Apache, NGINX, and more. For more information, see our on-host integration docs. Synthetics New Relic synthetic monitoring gives you a suite of automated, scriptable tools to monitor your websites, critical business transactions, and API endpoints. Follow the procedures to create a simple browser check. Be sure to verify that your website URL is accessible from the Synthetics public network locations. Browser monitoring New Relic browser monitoring provides deep insights into how your users are interacting with your application or website. Browser monitoring complements synthetic monitors with data based on actual user experiences, which is useful in discerning how DevOps efforts are ultimately improving the experience for the customer. For more information, see the compatibility and requirements, then install the New Relic browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs new performance data needs. Installation of New Relic mobile monitoring lets DevOps teams instrument iOS and Android applications to gain a fuller understanding of service delivery quality. 5. Review the default metrics After you deploy the agents and monitors, use service maps to review the default metrics that New Relic captures. For example, a typical service map show many of the common SLIs that application teams rely on, including response time, Apdex, throughput, and error rate metrics from APM. It also shows page load time, Ajax response, throughput, and error rate from browser monitoring. rpm.newrelic.com > Service maps: To explore detailed granularity for any area, use the service map's nodes. 6. Set up custom instrumentation To close any remaining gaps in visibility for your SLIs, use custom instrumentation. New Relic provides several avenues for adding custom instrumentation, including: Making API calls to agents from inside your source code Packaging XML-based custom instrumentation modules with deployed applications Adding UI-based instrumentation without a code deploy In addition, you can add custom attributes to each transaction event that match application performance factors to critical business information. Then you can track those attributes in Insights dashboards. For more information, see the custom instrumentation documentation for your application: APM Browser Infrastructure Insights Mobile Synthetics 7. Create dashboards to track SLIs Once you implement the appropriate instrumentation, it's easy to visualize your service level indicators with New Relic dashboards, which provide a single location to query and view all the data that New Relic tools gather. To learn more about how to run queries to produce charts and dashboards, see Introduction to query builder. For more about the data you can query, see New Relic data types. The metrics you capture will become your application's baseline. Share dashboards with your application team and stakeholders to provide visibility into what is happening with your application and to monitor future performance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.74298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>New</em> <em>Relic</em> products",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": ". For more information, see the compatibility and requirements, then install the <em>New</em> <em>Relic</em> browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs <em>new</em> performance data needs. Installation of <em>New</em> <em>Relic</em> mobile monitoring lets <em>DevOps</em> teams instrument iOS"
      },
      "id": "6044151ee7b9d259ef5799ea"
    },
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T17:37:49Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they’re consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s DevOps transformation. 2. Add automated deployment markers It’s important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM’s deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or “marker”, on charts and graphs at the deployment event’s timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you’re satisfied with the application’s performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.82236,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-06-08T22:24:00Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your application’s performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your application’s architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the application’s environment searchable. Any convention you use should be unique to your organization’s structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your application’s performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our application’s overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue you’re investigating. In this example, we’ve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, it’s obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If you’re not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, it’s responsible for 99.9% of the app server time, which means we’re getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issues—the red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that it’s highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customers—which will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the “norm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, it’s important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.81633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/set-proactive-alerting-understand-respond-performance-issues": [
    {
      "sections": [
        "Establish objectives and baselines: define team SLOs",
        "Service level components",
        "Resources",
        "1. Build an inventory of services requiring SLOs",
        "2. Research customer expectations for SLOs",
        "3. Define SLOs",
        "4. Determine what can be instrumented",
        "New Relic products",
        "APM installation",
        "Infrastructure installation",
        "Infrastructure on-host integrations",
        "Synthetics",
        "Browser monitoring",
        "Mobile monitoring",
        "5. Review the default metrics",
        "6. Set up custom instrumentation",
        "7. Create dashboards to track SLIs"
      ],
      "title": "Establish objectives and baselines: define team SLOs",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "8988bb84fc5add9019fdc3ded2eb4de431ea63db",
      "image": "https://docs.newrelic.com/static/3a9f13f0b98dead811d9f7f56cc2a594/1f083/catalyst-establish-objectives-1_4.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/establish-objectives-baselines-define-team-slos/",
      "published_at": "2021-06-09T18:11:26Z",
      "updated_at": "2021-06-02T16:58:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A DevOps transformation requires a cultural shift so that teams can build new skills and motivations for the type of cross-team work required in a true DevOps practice. The transformation can be difficult when the people involved do not see the benefits of change as a clear objective. Service level objectives (SLOs) provide a powerful mechanism to codify the goals of a DevOps team in a way that can be measured and shared. They also provide clear boundaries on service expectations that help teams achieve greater velocity and freedom in experimenting with new approaches. This tutorial defines SLOs for successful service delivery objectives and utilize New Relic instrumentation to surface the current performance metrics relative to those objectives. Measurable SLOs and visibility into your current progress against those SLOs ensure that you will be able to properly assess future optimization efforts. Service level components An SLO is an agreed upon means of measuring the performance of your service. The SLO defines a target value of a specified quantitative measure, which is called a service level indicator (SLI); for example: Average response time Response time percentile Application availability SLOs clarify a target value for SLIs; for example: Average response time should be less than 200 ms 95% of requests should be completed within 250 ms Availability of the service should be 99.99% Logically group SLOs together to provide an overall boolean indicator of whether or not the service is meeting expectations. For example, a helpful SLO for alerting purposes could be: 95% of requests completed within 250 ms AND availability is 99.99% Copy Service level components Example values SLI (Indicator) HTTP status codes SLO (Objective) < 1% HTTP 500s over 30 days SLA (Agreement) For every additional .1% of HTTP 500s, 5% refund of total contract Resources Value stream mapping can be a useful exercise to work through before setting SLOs. Work with your teams to clarify key components of your service and the appropriate metrics. Use these inputs as starting points for this tutorial. In addition: Learn about SLOs, SLIs, and SLAs from the Google Cloud Platform blog. Learn how New Relic has applied SLOs and SLIs into its reliability practices form this SREcon18 Americas presentation (approximately 21 minutes). 1. Build an inventory of services requiring SLOs Start defining SLOs for your application by first taking an inventory of the services that your application provides to both your internal and external customers. Draft a list of services. Make the scope of services you consider as comprehensive as possible. Engage your team members and other stakeholders to validate the list for completeness. Segment your application stack to understand the potential components that might require SLOs. For example, most applications can be segmented as: Application (backend/microservices) Dependency services (such as the message queue) Database Website Underlying servers This example lists components that would benefit from SLOs: Customer type Component name Owner Language stack Operating system External Service 1 John D. Java RHEL 6 Internal Service 2 Jane A. .NET Win2003 R2 Internal ActiveMQ John D. Java AIX External Website Jane A. Classic ASP Win2000 Internal MS SQL Dave Z. n/a Win2003 R2 Building a definitive list of services that require an SLO can be challenging, because an application often consists of many endpoints with complex interdependencies. Begin your SLO journey with pragmatism. Start by defining a broader, simpler set of SLOs that are driven by what your customers care about most and what your team can control. As your teams better align around SLOs, you can then begin to fine-tune and add more complexity. 2. Research customer expectations for SLOs Once you have an inventory of services, begin to gather the information you need to define the SLOs for those services. Interviews with customers that depend on your services are often valuable for understanding service expectations. For example, to define SLOs for internal teams, New Relic, ask questions such as: If possible, can you broadly categorize the types of requests we can expect from you and your service? To what extent do you or your service depend on timely responses to requests? Are there requests for which response time is not critical? How does your service handle unavailable dependencies or data? What is the maximum amount of unavailable data that your service can handle? At what threshold does your service fail if a request takes too long? What are acceptable rates of errors? What would a SLA look like between our product and yours? Existing usage data can also be a helpful research input. 3. Define SLOs Using the research on customer expectations that you gathered, draft a focused set of SLOs. New Relic recommends setting SLOs against one or more of the following SLIs: Application availability percentage Average response time Response percentile Error rate Apdex value Also, consider instrumenting and tracking the following SLIs: Throughput (peak and trough) Database call count and duration DNS and SSL timing DOM processing and page rendering Mean-time-to-detection (MTTD) For a more comprehensive list of potential areas to measure, see Measuring DevOps. Recommendation: To determine if your application is performing to customer expectations: Consider combining multiple SLIs (for example, availability and response time) into one SLO. Aim to define a consistent set of conditions across all of the services in your list. Consult your team and stakeholders to validate that the SLOs you set are reasonable, consistently attainable (even if you are not currently meeting them), and aligned to customer expectations. After you finish this step, you should have a set of well-defined SLOs and SLIs. 4. Determine what can be instrumented Now you're ready to deploy agents or monitors to establish a performance baseline for the SLIs you created. With proper instrumentation in place, you'll have visibility into the performance indicators that matter for your team and your customers. In addition, you'll also have a clear understanding of how to meet your SLOs. Identify the service components your team will optimize. Verify which application tiers meet New Relic monitoring requirements. To ensure you have robust baselines from which to work, determine the level of instrumentation that is possible (or allowed) within your organization. It's best practice to instrument everything you can, but there may be situations where instrumentation isn't viable. In that case, you should determine what other data is available or can be created. For example, you can gather logs to query them for SLO data and set alerts for them. one.newrelic.com > Logs: Use the New Relic log management UI to leverage your logs. If the application has a web front end in these situations, use New Relic synthetic monitors. Our synthetic monitors offer non-agent monitoring while still providing the ability to establish a baseline. To instrument the example applications and components in this tutorial, use these New Relic features: New Relic products Customer type Component name Tier owner Language stack Server OS New Relic products External Service 1 John D. Java RHEL 6 APM, infrastructure monitoring, synthetic monitors Internal Service 2 Jane A. .Net Win2003 R2 APM, infrastructure monitoring Internal ActiveMQ John D. Java AIX APM External Website Jane A. Classic ASP Win2000 Synthetic monitors Internal MS SQL Dave Z. NA Win2003 R2 Infrastructure monitoring, on-host integrations APM installation After reviewing the compatibility and requirements for New Relic APM, install an APM agent on your application stack. Steps for installing APM agents vary based on language agent type. Follow the install procedures for a specific APM agents. Infrastructure installation After reviewing the requirements for New Relic infrastructure monitoring, follow the install procedures to install the infrastructure agent on instances that host your applications. The infrastructure agent requires the following host permissions: Linux: To install and run the agent, you must have root privileges. Windows: To install and run the agent, you must have Administrator privileges. Infrastructure on-host integrations To gain extended visibility into applications that your code depends on, deploy on-host integrations based on their availability. New Relic supports several commonly used application components, including MySQL, Apache, NGINX, and more. For more information, see our on-host integration docs. Synthetics New Relic synthetic monitoring gives you a suite of automated, scriptable tools to monitor your websites, critical business transactions, and API endpoints. Follow the procedures to create a simple browser check. Be sure to verify that your website URL is accessible from the Synthetics public network locations. Browser monitoring New Relic browser monitoring provides deep insights into how your users are interacting with your application or website. Browser monitoring complements synthetic monitors with data based on actual user experiences, which is useful in discerning how DevOps efforts are ultimately improving the experience for the customer. For more information, see the compatibility and requirements, then install the New Relic browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs new performance data needs. Installation of New Relic mobile monitoring lets DevOps teams instrument iOS and Android applications to gain a fuller understanding of service delivery quality. 5. Review the default metrics After you deploy the agents and monitors, use service maps to review the default metrics that New Relic captures. For example, a typical service map show many of the common SLIs that application teams rely on, including response time, Apdex, throughput, and error rate metrics from APM. It also shows page load time, Ajax response, throughput, and error rate from browser monitoring. rpm.newrelic.com > Service maps: To explore detailed granularity for any area, use the service map's nodes. 6. Set up custom instrumentation To close any remaining gaps in visibility for your SLIs, use custom instrumentation. New Relic provides several avenues for adding custom instrumentation, including: Making API calls to agents from inside your source code Packaging XML-based custom instrumentation modules with deployed applications Adding UI-based instrumentation without a code deploy In addition, you can add custom attributes to each transaction event that match application performance factors to critical business information. Then you can track those attributes in Insights dashboards. For more information, see the custom instrumentation documentation for your application: APM Browser Infrastructure Insights Mobile Synthetics 7. Create dashboards to track SLIs Once you implement the appropriate instrumentation, it's easy to visualize your service level indicators with New Relic dashboards, which provide a single location to query and view all the data that New Relic tools gather. To learn more about how to run queries to produce charts and dashboards, see Introduction to query builder. For more about the data you can query, see New Relic data types. The metrics you capture will become your application's baseline. Share dashboards with your application team and stakeholders to provide visibility into what is happening with your application and to monitor future performance.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 298.74292,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>New</em> <em>Relic</em> products",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": ". For more information, see the compatibility and requirements, then install the <em>New</em> <em>Relic</em> browser agent. Mobile monitoring The growing role of mobile apps in customer experience often spurs <em>new</em> performance data needs. Installation of <em>New</em> <em>Relic</em> mobile monitoring lets <em>DevOps</em> teams instrument iOS"
      },
      "id": "6044151ee7b9d259ef5799ea"
    },
    {
      "sections": [
        "Iterate and measure impact: track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "Tip",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "b2fa8c3b13350f5d7800d6fa44f6fd73155c2bd2",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T17:37:49Z",
      "updated_at": "2021-05-16T01:28:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A properly instrumented system gives teams full visibility into the impact of the changes they make. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation, and reduce the impact to other ongoing changes. Prerequisite Before starting this tutorial, be sure to complete the Establish objectives and baselines tutorial and set the appropriate KPI targets for your applications. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and to prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they’re consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make are correct across them, and eliminate any anomalies before pushing code to production. Tip Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights, and use NRQL to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current_state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s DevOps transformation. 2. Add automated deployment markers It’s important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM’s deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change-log, etc.). APM displays a vertical line, or “marker”, on charts and graphs at the deployment event’s timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application, and additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_depoyment) Jenkins Ansible 3. Test your pipeline with Infrastructure An important part of a successful DevOps transformation is a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com/apm > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names which fits this model quite nicely. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you’re satisfied with the application’s performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.82234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Iterate and <em>measure</em> impact: track metrics before and after deployments",
        "sections": "1. Integrate <em>measurements</em> into your <em>development</em> process",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in an organization’s <em>DevOps</em> transformation"
      },
      "id": "60450efc64441fb48e378eee"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-06-08T22:24:00Z",
      "updated_at": "2021-05-16T01:23:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your application’s performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your application’s architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the application’s environment searchable. Any convention you use should be unique to your organization’s structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your application’s performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in New Relic APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our application’s overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue you’re investigating. In this example, we’ve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, it’s obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If you’re not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, it’s responsible for 99.9% of the app server time, which means we’re getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issues—the red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that it’s highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customers—which will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the “norm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, it’s important to quickly analyze and understand JavaScript errors. In New Relic Browser, select JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.81631,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Use semantic naming throughout <em>New</em> <em>Relic</em>",
        "tags": "<em>Measure</em> <em>DevOps</em> <em>success</em>",
        "body": " quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of <em>DevOps</em> in your organization. 1. Use semantic naming throughout <em>New</em> <em>Relic</em> Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring"
      },
      "id": "60440e5328ccbccc972c60c0"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services": [
    {
      "sections": [
        "Iterate and measure impact: Track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: Track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "64fab5d31ae90da92debca9bc0eb802ebe731c2b",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T18:57:08Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Proper instrumentation gives teams full visibility into the impact of the changes they make in a system. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation and reduce the impact to other work happening in the system. Prerequisite Before starting this tutorial, complete the Establish objectives and baselines. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they're consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make across them are correct, and eliminate any anomalies before pushing code to production. Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights and use NRQL and external integrations to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in a DevOps transformation. 2. Add automated deployment markers It's important to track deployments and the impact code and infrastructure changes have on your end-user experience. Using deployment markers in New Relic APM, you can record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (for example, the user, revision, or change-log). APM displays a vertical line, or “marker,” on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application. Additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is a valuable way to determine the root cause of immediate, long-term, or gradual degradations in your application. New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test your pipeline with Infrastructure An important part of optimizing your cloud native environment is a making a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names, which is a good fit for this model. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you're satisfied with the application's performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.4682,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Integrate measurements into <em>your</em> development process",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test <em>your</em> pipeline with Infrastructure An important part of optimizing <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em> is a making a cultural shift toward smaller, more frequent changes to <em>your</em> code"
      },
      "id": "603ebdad196a67b212a83ded"
    },
    {
      "sections": [
        "Manage your containerized environment",
        "1. Update to latest Infrastructure agent and enable Kubernetes integration",
        "2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health",
        "3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment",
        "4. Monitor applications running in Kubernetes with APM",
        "Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics",
        "6. Bring teams together with dashboards tailored to specific business use cases and KPIs",
        "Learn more"
      ],
      "title": "Manage your containerized environment",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "71ba4468ed7d078021ccd705c78e72cfb5e92b5f",
      "image": "https://docs.newrelic.com/static/f744b0e1c8aac86e63f46a5798df58ae/c1b63/cont_environment01.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment/",
      "published_at": "2021-06-09T18:56:01Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Widespread adoption of containers has changed the way applications are written and deployed. Container orchestration technologies such as Kubernetes are making it easier for teams to schedule, deploy, and manage their containerized applications. But challenges still exist that require teams to rethink their environment and application monitoring strategies: Challenge 1: Containers are ephemeral by nature. Knowing the containers or pod or node (host) where the application is currently running is not necessarily an indication of where it was running 5, 15, or 30 minutes ago when the issue occurred. Containers are deployed in dynamic, constantly evolving environments that require a modern monitoring approach. Challenge 2: Often, organizations are adopting containers as they break down monolithic applications into multiple microservices. This new approach introduces new complexity to the system and the sheer scale and dimensionality of containers is hard to conceptualize in an easy-to-understand format. Challenge 3: Delivering a differentiated end-user experience is a key initiative for all organizations, and containers are being adopted to help organizations release better software, faster. But with this tremendous opportunity also comes risk, because every time a new container is deployed, the cluster is impacted. Organizations need context into how infrastructure changes impact the application stack, and how changes to both the infrastructure and application stack affect the end-user experience. Getting all of this data in real-time in a digestible format is a significant challenge in distributed, containerized environments. The New Relic platform offers customers both ease of use and ease of deployment for containerized Kubernetes environments. With a few clicks you have the data and confidence to move forward intelligently. These six steps illustrate how to use the New Relic platform to manage your containers and how they are scheduled: 1. Update to latest Infrastructure agent and enable Kubernetes integration To get started, you'll need to deploy the latest Infrastructure agent onto a Kubernetes cluster with a DaemonSet. Leveraging DaemonSets is vital in dynamic, containerized environments, because when a new node is deployed or the cluster scales up or down, the DaemonSet ensures the New Relic agent is running on these new nodes. In addition, to build a complete picture of your Kubernetes environment, New Relic aggregates data from many resources, including Kube-state metrics. New Relic's “Kubernetes aware” approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health Once the Kubernetes integration is installed, you can access the New Relic Kubernetes cluster explorer, which offers a differentiated, intuitive way to visualize the health and performance of Kubernetes clusters. It applies advanced capabilities to filter, sort, and search for Kubernetes entities, helping teams understand the relationships and dependencies within an environment. It's a powerful and innovative solution to the challenges associated with running Kubernetes at massive scale. 3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment Above and beyond what the cluster explorer provides, New Relic provides out-of-the-box dashboards that allow customers to analyze performance and operating metrics of their Kubernetes environments. Key metrics include the number of containers, resource consumption, pending pods, out of memory (OOM) kills, and stuck pods. These metrics may be particularly relevant to Kubernetes administrators who require reliable, up-to-date information on resource consumption against pre-set thresholds. Access these dashboards directly from the cluster explorer where you can first visually explore your cluster and then use filters to drive down into specific dashboards that match that filter. 4. Monitor applications running in Kubernetes with APM One advantage of New Relic's Infrastructure agent being application-aware is that the cluster explorer is automatically aware of New Relic agents that are deployed on new applications. To fully exploit these capabilities, we recommend monitoring all existing and future containerized applications running in Kubernetes by installing the APM agent on them. Starting again from the cluster explorer, you can dig into what's happening in your applications from the context of the Kubernetes cluster. This gives you the ability to intuitively correlate your infrastructure and applications and begin analytically troubleshooting across the stack. Cloud-native applications use many interconnected services. The cluster explorer will correlate the application and link to its distributed tracings. In complex systems the ability to trace and identify pathways and latency bottlenecks are not optional. Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics If you are orchestrating an end-user facing application, New Relic allows you to view the end-to-end impact your infrastructure and services have on your customer experience. We tackle end-user management in two ways: With Synthetics, you can track application availability and performance from a wide variety of global locations visualizing if customer experience is impacted due to geography. With Browser and Mobile, we recommend monitoring such KPIs as load time and availability. Marrying end-user data with metrics and dashboards provided by the cluster explorer enables operators, administrators, app developers, and business personnel to align on common initiatives. 6. Bring teams together with dashboards tailored to specific business use cases and KPIs With dashboards, you can build custom visualizations from an end-to-end service perspective to analyze the cluster, pods, application, and end-user experience in one clean visual display. By using New Relic's dashboards, cross-organizational teams can align to share a common language and single source of truth, helping them make better decisions and drive business impact. The top two rows of this sample dashboard visualize various aspects of a Kubernetes environment while the third row illustrates valuable information regarding the applications that are deployed to this cluster. The bottom row displays the end-user viewpoint. Learn more Actively, where we enable availability monitoring for one user in one location with Synthetics Passively, where you can analyze a macro view of all users across all geographies with Browser monitoring and Mobile monitoring. Bring teams together with dashboards tailored to specific business use cases and KPIs Kubernetes Monitoring Guide",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.56757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>your</em> containerized <em>environment</em>",
        "sections": "Manage <em>your</em> containerized <em>environment</em>",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " a complete picture of <em>your</em> Kubernetes <em>environment</em>, <em>New</em> <em>Relic</em> aggregates data from many resources, including Kube-state metrics. <em>New</em> <em>Relic</em>&#x27;s “Kubernetes aware” approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage"
      },
      "id": "603ebf49196a670d96a83d81"
    },
    {
      "sections": [
        "Analyze distributed systems",
        "1. Identify high-priority areas to monitor",
        "2. Instrument to get the visibility you require",
        "3. Create dashboards",
        "4. Dig deeper with distributed tracing",
        "5. Annotate message queues with distributed tracing payload APIs",
        "Example annotated message queue",
        "6. Annotate and tag traces with custom attributes",
        "Tip",
        "7. Leverage Synthetics to get a high-level view of system health",
        "For more help"
      ],
      "title": "Analyze distributed systems",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "af1cf5a80f8254c90509e562fb68a6ded2f7207f",
      "image": "https://docs.newrelic.com/static/838e50badd634f1f188cf821785f6696/2cffa/APm_distributed-tracing-catalyst-TWO.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/analyze-distributed-systems/",
      "published_at": "2021-06-09T18:54:56Z",
      "updated_at": "2021-03-16T11:07:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In a monolithic application, a simple stack trace can contain enough diagnostic data to determine the root cause of a code defect. But cloud computing and microservices have blurred the lines between software and infrastructure; in modern architectures, requests are distributed across many smaller services—often with ephemeral lifespans—hosted in both on-premise and cloud environments. Spotting code defects becomes much more complex. APM's distributed tracing automatically helps teams troubleshoot such distributed systems. Distributed traces are just one component of a well-monitored system. You need a holistic view of your distributed system, especially when tracking the root cause of a defect, as there are volumes of data to evaluate and understand. When managing a microservices environment, it's critical that you have the capability to spot bottlenecks and problem spans quickly so that you don't compromise your mean-time-to-resolution (MTTR) or end-user experience. At New Relic, we understand these challenges inherently. In our journey, we've transitioned from a Ruby monolith to a multi-language distributed environment built on more than 300 microservices, for which we average 50 code deploys a day. Such challenges inform both how we've built and how we monitor New Relic. Use the New Relic platform to translate your data into relevant insights, so you can collaborate around a common framework to build context and quickly optimize and troubleshoot your complex, distributed systems. 1. Identify high-priority areas to monitor Distributed systems are complex. Before engaging with the New Relic platform, we recommend that you identify the most critical areas of your systems to observe, and focus on instrumenting those high-priority areas first. Google's SRE handbook suggests monitoring the \"four golden signals\": traffic, latency, errors, and saturation, as shown in the following dashboard: Dashboards: Visualize key areas to monitor with dashboards. Too often, teams monitor what is either 1) easy to measure or 2) interpretable. Avoid this fallacy. When making choices about what to monitor, involve product managers and other stakeholders from your organization. Your goal is to monitor what matters to your business, not to overload your teams with noise. 2. Instrument to get the visibility you require Once you've identified your key priorities, instrument the appropriate parts of your system with the New Relic platform. Monitor your web apps with APM. See compatibility and requirements for New Relic agents and products to learn precise compatibility details for each supported language and then install the APM agent on your application stack. Steps for installing APM agents vary based on language. Enable distributed tracing for APM, which will affect some existing APM features. If you're accustomed to using APM without distributed tracing, read the transition guide before you enable this feature. Monitor your compute resources with Infrastructure. See compatibility and requirements for New Relic Infrastructure for supported operating systems and environments. You can also instrument other products and services with on-host integrations. Monitor your front-end experience with Mobile and Browser. See compatibility and requirements for Mobile and for Browser. 3. Create dashboards Use dashboards to get an overview of your entire system and baseline performance, so you can better understand how the components work together. Insights provides a single framework for aligning disparate teams around relevant data. Approach this first build as your launching point, giving your teams something to react to as you begin to ascribe context to your system. You should continue to build and iterate your dashboards as you analyze, troubleshoot, and optimize your distributed system. Even after you have a basic understanding of your system, use dashboards to inform the decisions you make going forward. Dashboards provide central repository of truth, allowing all stakeholders to build context about the health of your system. Here is an example of a query that displays the slowest applications. SELECT percentile(duration, 99) as 'Slowest duration' FROM Transaction FACET name Copy Using this query you can focus on the slowest application to dig deeper: After running the query, dashboards displays the slowest durations. 4. Dig deeper with distributed tracing After you have basic instrumentation and contextual dashboards in place, you can begin to dig deeper to troubleshoot or optimize your system. A differentiated feature in New Relic One's Global Distributed Tracing is that you can come in with vague context for what you're investigating and search across all accounts and traces to get down to the actual user interactions that have those attributes somewhere in their trace. You no longer must begin with the application or specific entity to search for traces that include that application. For example, start with an analysis of your complex service calls, using the distributed tracing UI to: View a scatter plot chart showing the frequency, duration, and other facets of your distributed traces Group traces by root entry, service, service entry, or traces with errors View a trace list Filter specific traces to meet certain parameters You'll likely discover that you want to take the analysis one step further by annotating your traces with information that adds context to your troubleshooting, like User ID. You can do this in New Relic using custom attributes. one.newrelic.com > APM > Distributed tracing: use the distributed tracing UI to monitor and analyze modern distributed systems. 5. Annotate message queues with distributed tracing payload APIs To see connections between services in some environments—for example, in a system that relies heavily on queues—you may need to do some manual instrumentation using the distributed tracing payload APIs to ensure you're propagating the payload. This gives agents the necessary context to create spans with the right correlation; you'll see end-to-end traces for all linked services, including those that cross through the queue. Example annotated message queue For example: Start a transaction. Create the distributed tracing payload on the producer service within a New Relic transaction. As part of the message, add the distributed tracing payload. ​​newrelic.setTransactionName(\"Send Message\") // Create SQS service object var sqs = new AWS.SQS({apiVersion: '2012-11-05'}); var transactionHandle = newrelic.getTransaction(); var payload = transactionHandle.createDistributedTracePayload(); var jsonPayload = payload.text(); //add the jsonPayload as a MessageAttribute var params = { DelaySeconds: 10, MessageAttributes: { \"Testing\": { DataType: \"String\", StringValue: \"123\" }, \"TraceContext\": { DataType: \"String\", StringValue: jsonPayload } }, MessageBody: \"Testing 123\", QueueUrl: \"https://sqs.us-west-2.amazonaws.com/408155283954/sqs-testing\" }; Copy With the context of a transaction, receive the payload on the consumer service. sqs.receiveMessage(params, function(err, data) { if (err) { console.log(\"Receive Error\", err); } else if (data && data.Messages) { console.log(\"trace context:\") var traceContext = data.Messages[0].MessageAttributes.TraceContext.StringValue; if (traceContext != \"\") { var transactionHandle = newrelic.getTransaction(); transactionHandle.acceptDistributedTracePayload(traceContext); } Copy 6. Annotate and tag traces with custom attributes We recommend that you use custom attributes to decorate events with additional information for better tracing. For example, by adding key-value pairs, you can attach a user ID to trace a specific user through the call stack and review failing requests to determine if that user is having an unusually poor experience. We recommend adding custom attributes based on your use case; for example, if your instrumenting an order management system, you could add an order number custom attribute to your traces. To add custom attributes, you must first enable them for your agent, and then make an API call to record the attribute. Tip For more agent-specific information on collecting custom attributes, see Collect custom attributes sqs.sendMessage(params, function(err, data) { if (err) { res.send(\"Error: \"+ err); } else { res.send(\"Success! Message ID: \"+ data.MessageId); newrelic.addCustomAttribute(\"Message ID\", data.MessageId) } }); Copy 7. Leverage Synthetics to get a high-level view of system health In complex, distributed systems, you need to track and monitor many signals. Sometimes it may be that no one signal is concerning, yet your whole system is behaving anomalously. To get a complete picture, it's critical to analyze symptomatic data in tandem with system-level data. Synthetics allows you to interact with the entire system as an external user would, giving your teams high-level checks for performance and user experience. These external checks help you understand if the entire system is doing what you want regardless of what specific signals may indicate. For more help For more tips and best practices on distributed tracing and custom attributes, see the following: Distributed Tracing Anomaly Detection: A Faster, Easier Way to Troubleshoot Microservices Environments Introduction to distributed tracing Collect custom attributes",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.5657,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " that you don&#x27;t compromise <em>your</em> mean-time-to-resolution (MTTR) or end-user experience. At <em>New</em> <em>Relic</em>, we understand these challenges inherently. In our journey, we&#x27;ve transitioned from a Ruby monolith to a multi-language distributed <em>environment</em> built on more than 300 microservices, for which we average"
      },
      "id": "603ebd8264441f02694e887f"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/analyze-distributed-systems": [
    {
      "sections": [
        "Adopt cloud services",
        "1. Identify services and technologies",
        "2. Deploy New Relic Infrastructure",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "Tip",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD pipeline integration",
        "8. AWS Lambda Monitoring"
      ],
      "title": "Adopt cloud services",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "4a8e675e4231295287e69402c8c5ff9b05a6103b",
      "image": "https://docs.newrelic.com/static/4159294d05ee078268a7b287af99a72f/c1b63/adopt_cloud.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services/",
      "published_at": "2021-06-09T16:40:24Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've recently completed your cloud migration, have been using cloud-based services for a while, or have always been in the cloud, you may find yourself deploying modern, cutting-edge technologies and services. It's important to develop the ability to adopt new services easily and with confidence; innovation never stops for companies operating in the cloud, and a company's willingness to embrace new technology can give it a major competitive differentiator. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate, for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions. They may be cloud-based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations, you want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services. This allows your team to deploy faster, to adopt new services with confidence, to make better business decisions, and in general to expand its technology horizons. Here are the steps to using the New Relic Platform to monitor your modern technologies and cloud services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies and new services that might impact your organization's application environment. 2. Deploy New Relic Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified in Step One so that you can monitor your cloud services. If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations As you integrate new cloud services, you can use New Relic to monitor and report data about these services; giving you a single, comprehensive overview of your entire architecture. To configure cloud service integrations, link your Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP) service provider account with New Relic. 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of an Insights dashboard with data about vendors, technologies, services, instances, and other important details for DevOps teams. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all changes to a system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all AWS Elastic Load Balancing (ALB) systems for the ALB monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD pipeline integration It's important to track deployments and the impact that code and infrastructure changes have on your end-user experience. New Relic APM deployment markers allow you to record deployments for each application. A deployment marker is an event indicating that a deployment happened. You can pair markers with metadata from your source code management (SCM) system ( including user IDs, revisions, and change logs.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root causes of immediate, long-term, or gradual degradations in your applications. Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment, as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible Puppet 8. AWS Lambda Monitoring New Relic One features an updated APM agent that is highly optimized from a cost and time perspective for ephemeral Lambda functions. Enable New Relic monitoring of AWS Lambda to to assess invocations, error rate, function duration, cold starts, and more. You can also take advantage of New Relic's Infrastructure integration with Lambda for additional reporting capabilities.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.4682,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adopt <em>cloud</em> services",
        "sections": "2. Deploy <em>New</em> <em>Relic</em> Infrastructure",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " the <em>New</em> <em>Relic</em> Platform to monitor <em>your</em> modern technologies and <em>cloud</em> services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What <em>cloud</em>-based applications do I have? What are the underlying <em>cloud</em>-based services, technologies"
      },
      "id": "603ebf09e7b9d2071a2a0806"
    },
    {
      "sections": [
        "Iterate and measure impact: Track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: Track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "64fab5d31ae90da92debca9bc0eb802ebe731c2b",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T18:57:08Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Proper instrumentation gives teams full visibility into the impact of the changes they make in a system. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation and reduce the impact to other work happening in the system. Prerequisite Before starting this tutorial, complete the Establish objectives and baselines. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they're consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make across them are correct, and eliminate any anomalies before pushing code to production. Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights and use NRQL and external integrations to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in a DevOps transformation. 2. Add automated deployment markers It's important to track deployments and the impact code and infrastructure changes have on your end-user experience. Using deployment markers in New Relic APM, you can record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (for example, the user, revision, or change-log). APM displays a vertical line, or “marker,” on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application. Additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is a valuable way to determine the root cause of immediate, long-term, or gradual degradations in your application. New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test your pipeline with Infrastructure An important part of optimizing your cloud native environment is a making a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names, which is a good fit for this model. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you're satisfied with the application's performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.4682,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Integrate measurements into <em>your</em> development process",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test <em>your</em> pipeline with Infrastructure An important part of optimizing <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em> is a making a cultural shift toward smaller, more frequent changes to <em>your</em> code"
      },
      "id": "603ebdad196a67b212a83ded"
    },
    {
      "sections": [
        "Manage your containerized environment",
        "1. Update to latest Infrastructure agent and enable Kubernetes integration",
        "2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health",
        "3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment",
        "4. Monitor applications running in Kubernetes with APM",
        "Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics",
        "6. Bring teams together with dashboards tailored to specific business use cases and KPIs",
        "Learn more"
      ],
      "title": "Manage your containerized environment",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "71ba4468ed7d078021ccd705c78e72cfb5e92b5f",
      "image": "https://docs.newrelic.com/static/f744b0e1c8aac86e63f46a5798df58ae/c1b63/cont_environment01.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment/",
      "published_at": "2021-06-09T18:56:01Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Widespread adoption of containers has changed the way applications are written and deployed. Container orchestration technologies such as Kubernetes are making it easier for teams to schedule, deploy, and manage their containerized applications. But challenges still exist that require teams to rethink their environment and application monitoring strategies: Challenge 1: Containers are ephemeral by nature. Knowing the containers or pod or node (host) where the application is currently running is not necessarily an indication of where it was running 5, 15, or 30 minutes ago when the issue occurred. Containers are deployed in dynamic, constantly evolving environments that require a modern monitoring approach. Challenge 2: Often, organizations are adopting containers as they break down monolithic applications into multiple microservices. This new approach introduces new complexity to the system and the sheer scale and dimensionality of containers is hard to conceptualize in an easy-to-understand format. Challenge 3: Delivering a differentiated end-user experience is a key initiative for all organizations, and containers are being adopted to help organizations release better software, faster. But with this tremendous opportunity also comes risk, because every time a new container is deployed, the cluster is impacted. Organizations need context into how infrastructure changes impact the application stack, and how changes to both the infrastructure and application stack affect the end-user experience. Getting all of this data in real-time in a digestible format is a significant challenge in distributed, containerized environments. The New Relic platform offers customers both ease of use and ease of deployment for containerized Kubernetes environments. With a few clicks you have the data and confidence to move forward intelligently. These six steps illustrate how to use the New Relic platform to manage your containers and how they are scheduled: 1. Update to latest Infrastructure agent and enable Kubernetes integration To get started, you'll need to deploy the latest Infrastructure agent onto a Kubernetes cluster with a DaemonSet. Leveraging DaemonSets is vital in dynamic, containerized environments, because when a new node is deployed or the cluster scales up or down, the DaemonSet ensures the New Relic agent is running on these new nodes. In addition, to build a complete picture of your Kubernetes environment, New Relic aggregates data from many resources, including Kube-state metrics. New Relic's “Kubernetes aware” approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health Once the Kubernetes integration is installed, you can access the New Relic Kubernetes cluster explorer, which offers a differentiated, intuitive way to visualize the health and performance of Kubernetes clusters. It applies advanced capabilities to filter, sort, and search for Kubernetes entities, helping teams understand the relationships and dependencies within an environment. It's a powerful and innovative solution to the challenges associated with running Kubernetes at massive scale. 3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment Above and beyond what the cluster explorer provides, New Relic provides out-of-the-box dashboards that allow customers to analyze performance and operating metrics of their Kubernetes environments. Key metrics include the number of containers, resource consumption, pending pods, out of memory (OOM) kills, and stuck pods. These metrics may be particularly relevant to Kubernetes administrators who require reliable, up-to-date information on resource consumption against pre-set thresholds. Access these dashboards directly from the cluster explorer where you can first visually explore your cluster and then use filters to drive down into specific dashboards that match that filter. 4. Monitor applications running in Kubernetes with APM One advantage of New Relic's Infrastructure agent being application-aware is that the cluster explorer is automatically aware of New Relic agents that are deployed on new applications. To fully exploit these capabilities, we recommend monitoring all existing and future containerized applications running in Kubernetes by installing the APM agent on them. Starting again from the cluster explorer, you can dig into what's happening in your applications from the context of the Kubernetes cluster. This gives you the ability to intuitively correlate your infrastructure and applications and begin analytically troubleshooting across the stack. Cloud-native applications use many interconnected services. The cluster explorer will correlate the application and link to its distributed tracings. In complex systems the ability to trace and identify pathways and latency bottlenecks are not optional. Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics If you are orchestrating an end-user facing application, New Relic allows you to view the end-to-end impact your infrastructure and services have on your customer experience. We tackle end-user management in two ways: With Synthetics, you can track application availability and performance from a wide variety of global locations visualizing if customer experience is impacted due to geography. With Browser and Mobile, we recommend monitoring such KPIs as load time and availability. Marrying end-user data with metrics and dashboards provided by the cluster explorer enables operators, administrators, app developers, and business personnel to align on common initiatives. 6. Bring teams together with dashboards tailored to specific business use cases and KPIs With dashboards, you can build custom visualizations from an end-to-end service perspective to analyze the cluster, pods, application, and end-user experience in one clean visual display. By using New Relic's dashboards, cross-organizational teams can align to share a common language and single source of truth, helping them make better decisions and drive business impact. The top two rows of this sample dashboard visualize various aspects of a Kubernetes environment while the third row illustrates valuable information regarding the applications that are deployed to this cluster. The bottom row displays the end-user viewpoint. Learn more Actively, where we enable availability monitoring for one user in one location with Synthetics Passively, where you can analyze a macro view of all users across all geographies with Browser monitoring and Mobile monitoring. Bring teams together with dashboards tailored to specific business use cases and KPIs Kubernetes Monitoring Guide",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.56757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>your</em> containerized <em>environment</em>",
        "sections": "Manage <em>your</em> containerized <em>environment</em>",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " a complete picture of <em>your</em> Kubernetes <em>environment</em>, <em>New</em> <em>Relic</em> aggregates data from many resources, including Kube-state metrics. <em>New</em> <em>Relic</em>&#x27;s “Kubernetes aware” approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage"
      },
      "id": "603ebf49196a670d96a83d81"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/customer-experience-improvement-track-experience-indicators": [
    {
      "sections": [
        "Adopt cloud services",
        "1. Identify services and technologies",
        "2. Deploy New Relic Infrastructure",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "Tip",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD pipeline integration",
        "8. AWS Lambda Monitoring"
      ],
      "title": "Adopt cloud services",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "4a8e675e4231295287e69402c8c5ff9b05a6103b",
      "image": "https://docs.newrelic.com/static/4159294d05ee078268a7b287af99a72f/c1b63/adopt_cloud.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services/",
      "published_at": "2021-06-09T16:40:24Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've recently completed your cloud migration, have been using cloud-based services for a while, or have always been in the cloud, you may find yourself deploying modern, cutting-edge technologies and services. It's important to develop the ability to adopt new services easily and with confidence; innovation never stops for companies operating in the cloud, and a company's willingness to embrace new technology can give it a major competitive differentiator. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate, for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions. They may be cloud-based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations, you want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services. This allows your team to deploy faster, to adopt new services with confidence, to make better business decisions, and in general to expand its technology horizons. Here are the steps to using the New Relic Platform to monitor your modern technologies and cloud services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies and new services that might impact your organization's application environment. 2. Deploy New Relic Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified in Step One so that you can monitor your cloud services. If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations As you integrate new cloud services, you can use New Relic to monitor and report data about these services; giving you a single, comprehensive overview of your entire architecture. To configure cloud service integrations, link your Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP) service provider account with New Relic. 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of an Insights dashboard with data about vendors, technologies, services, instances, and other important details for DevOps teams. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all changes to a system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all AWS Elastic Load Balancing (ALB) systems for the ALB monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD pipeline integration It's important to track deployments and the impact that code and infrastructure changes have on your end-user experience. New Relic APM deployment markers allow you to record deployments for each application. A deployment marker is an event indicating that a deployment happened. You can pair markers with metadata from your source code management (SCM) system ( including user IDs, revisions, and change logs.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root causes of immediate, long-term, or gradual degradations in your applications. Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment, as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible Puppet 8. AWS Lambda Monitoring New Relic One features an updated APM agent that is highly optimized from a cost and time perspective for ephemeral Lambda functions. Enable New Relic monitoring of AWS Lambda to to assess invocations, error rate, function duration, cold starts, and more. You can also take advantage of New Relic's Infrastructure integration with Lambda for additional reporting capabilities.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.46817,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adopt <em>cloud</em> services",
        "sections": "2. Deploy <em>New</em> <em>Relic</em> Infrastructure",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " the <em>New</em> <em>Relic</em> Platform to monitor <em>your</em> modern technologies and <em>cloud</em> services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What <em>cloud</em>-based applications do I have? What are the underlying <em>cloud</em>-based services, technologies"
      },
      "id": "603ebf09e7b9d2071a2a0806"
    },
    {
      "sections": [
        "Iterate and measure impact: Track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: Track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "64fab5d31ae90da92debca9bc0eb802ebe731c2b",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T18:57:08Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Proper instrumentation gives teams full visibility into the impact of the changes they make in a system. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation and reduce the impact to other work happening in the system. Prerequisite Before starting this tutorial, complete the Establish objectives and baselines. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they're consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make across them are correct, and eliminate any anomalies before pushing code to production. Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights and use NRQL and external integrations to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in a DevOps transformation. 2. Add automated deployment markers It's important to track deployments and the impact code and infrastructure changes have on your end-user experience. Using deployment markers in New Relic APM, you can record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (for example, the user, revision, or change-log). APM displays a vertical line, or “marker,” on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application. Additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is a valuable way to determine the root cause of immediate, long-term, or gradual degradations in your application. New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test your pipeline with Infrastructure An important part of optimizing your cloud native environment is a making a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names, which is a good fit for this model. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you're satisfied with the application's performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.46817,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Integrate measurements into <em>your</em> development process",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test <em>your</em> pipeline with Infrastructure An important part of optimizing <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em> is a making a cultural shift toward smaller, more frequent changes to <em>your</em> code"
      },
      "id": "603ebdad196a67b212a83ded"
    },
    {
      "sections": [
        "Manage your containerized environment",
        "1. Update to latest Infrastructure agent and enable Kubernetes integration",
        "2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health",
        "3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment",
        "4. Monitor applications running in Kubernetes with APM",
        "Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics",
        "6. Bring teams together with dashboards tailored to specific business use cases and KPIs",
        "Learn more"
      ],
      "title": "Manage your containerized environment",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "71ba4468ed7d078021ccd705c78e72cfb5e92b5f",
      "image": "https://docs.newrelic.com/static/f744b0e1c8aac86e63f46a5798df58ae/c1b63/cont_environment01.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment/",
      "published_at": "2021-06-09T18:56:01Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Widespread adoption of containers has changed the way applications are written and deployed. Container orchestration technologies such as Kubernetes are making it easier for teams to schedule, deploy, and manage their containerized applications. But challenges still exist that require teams to rethink their environment and application monitoring strategies: Challenge 1: Containers are ephemeral by nature. Knowing the containers or pod or node (host) where the application is currently running is not necessarily an indication of where it was running 5, 15, or 30 minutes ago when the issue occurred. Containers are deployed in dynamic, constantly evolving environments that require a modern monitoring approach. Challenge 2: Often, organizations are adopting containers as they break down monolithic applications into multiple microservices. This new approach introduces new complexity to the system and the sheer scale and dimensionality of containers is hard to conceptualize in an easy-to-understand format. Challenge 3: Delivering a differentiated end-user experience is a key initiative for all organizations, and containers are being adopted to help organizations release better software, faster. But with this tremendous opportunity also comes risk, because every time a new container is deployed, the cluster is impacted. Organizations need context into how infrastructure changes impact the application stack, and how changes to both the infrastructure and application stack affect the end-user experience. Getting all of this data in real-time in a digestible format is a significant challenge in distributed, containerized environments. The New Relic platform offers customers both ease of use and ease of deployment for containerized Kubernetes environments. With a few clicks you have the data and confidence to move forward intelligently. These six steps illustrate how to use the New Relic platform to manage your containers and how they are scheduled: 1. Update to latest Infrastructure agent and enable Kubernetes integration To get started, you'll need to deploy the latest Infrastructure agent onto a Kubernetes cluster with a DaemonSet. Leveraging DaemonSets is vital in dynamic, containerized environments, because when a new node is deployed or the cluster scales up or down, the DaemonSet ensures the New Relic agent is running on these new nodes. In addition, to build a complete picture of your Kubernetes environment, New Relic aggregates data from many resources, including Kube-state metrics. New Relic's “Kubernetes aware” approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health Once the Kubernetes integration is installed, you can access the New Relic Kubernetes cluster explorer, which offers a differentiated, intuitive way to visualize the health and performance of Kubernetes clusters. It applies advanced capabilities to filter, sort, and search for Kubernetes entities, helping teams understand the relationships and dependencies within an environment. It's a powerful and innovative solution to the challenges associated with running Kubernetes at massive scale. 3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment Above and beyond what the cluster explorer provides, New Relic provides out-of-the-box dashboards that allow customers to analyze performance and operating metrics of their Kubernetes environments. Key metrics include the number of containers, resource consumption, pending pods, out of memory (OOM) kills, and stuck pods. These metrics may be particularly relevant to Kubernetes administrators who require reliable, up-to-date information on resource consumption against pre-set thresholds. Access these dashboards directly from the cluster explorer where you can first visually explore your cluster and then use filters to drive down into specific dashboards that match that filter. 4. Monitor applications running in Kubernetes with APM One advantage of New Relic's Infrastructure agent being application-aware is that the cluster explorer is automatically aware of New Relic agents that are deployed on new applications. To fully exploit these capabilities, we recommend monitoring all existing and future containerized applications running in Kubernetes by installing the APM agent on them. Starting again from the cluster explorer, you can dig into what's happening in your applications from the context of the Kubernetes cluster. This gives you the ability to intuitively correlate your infrastructure and applications and begin analytically troubleshooting across the stack. Cloud-native applications use many interconnected services. The cluster explorer will correlate the application and link to its distributed tracings. In complex systems the ability to trace and identify pathways and latency bottlenecks are not optional. Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics If you are orchestrating an end-user facing application, New Relic allows you to view the end-to-end impact your infrastructure and services have on your customer experience. We tackle end-user management in two ways: With Synthetics, you can track application availability and performance from a wide variety of global locations visualizing if customer experience is impacted due to geography. With Browser and Mobile, we recommend monitoring such KPIs as load time and availability. Marrying end-user data with metrics and dashboards provided by the cluster explorer enables operators, administrators, app developers, and business personnel to align on common initiatives. 6. Bring teams together with dashboards tailored to specific business use cases and KPIs With dashboards, you can build custom visualizations from an end-to-end service perspective to analyze the cluster, pods, application, and end-user experience in one clean visual display. By using New Relic's dashboards, cross-organizational teams can align to share a common language and single source of truth, helping them make better decisions and drive business impact. The top two rows of this sample dashboard visualize various aspects of a Kubernetes environment while the third row illustrates valuable information regarding the applications that are deployed to this cluster. The bottom row displays the end-user viewpoint. Learn more Actively, where we enable availability monitoring for one user in one location with Synthetics Passively, where you can analyze a macro view of all users across all geographies with Browser monitoring and Mobile monitoring. Bring teams together with dashboards tailored to specific business use cases and KPIs Kubernetes Monitoring Guide",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.56757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>your</em> containerized <em>environment</em>",
        "sections": "Manage <em>your</em> containerized <em>environment</em>",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " a complete picture of <em>your</em> Kubernetes <em>environment</em>, <em>New</em> <em>Relic</em> aggregates data from many resources, including Kube-state metrics. <em>New</em> <em>Relic</em>&#x27;s “Kubernetes aware” approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage"
      },
      "id": "603ebf49196a670d96a83d81"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/guide-optimizing-your-cloud-native-environment": [
    {
      "sections": [
        "Adopt cloud services",
        "1. Identify services and technologies",
        "2. Deploy New Relic Infrastructure",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "Tip",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD pipeline integration",
        "8. AWS Lambda Monitoring"
      ],
      "title": "Adopt cloud services",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "4a8e675e4231295287e69402c8c5ff9b05a6103b",
      "image": "https://docs.newrelic.com/static/4159294d05ee078268a7b287af99a72f/c1b63/adopt_cloud.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services/",
      "published_at": "2021-06-09T16:40:24Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've recently completed your cloud migration, have been using cloud-based services for a while, or have always been in the cloud, you may find yourself deploying modern, cutting-edge technologies and services. It's important to develop the ability to adopt new services easily and with confidence; innovation never stops for companies operating in the cloud, and a company's willingness to embrace new technology can give it a major competitive differentiator. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate, for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions. They may be cloud-based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations, you want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services. This allows your team to deploy faster, to adopt new services with confidence, to make better business decisions, and in general to expand its technology horizons. Here are the steps to using the New Relic Platform to monitor your modern technologies and cloud services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies and new services that might impact your organization's application environment. 2. Deploy New Relic Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified in Step One so that you can monitor your cloud services. If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations As you integrate new cloud services, you can use New Relic to monitor and report data about these services; giving you a single, comprehensive overview of your entire architecture. To configure cloud service integrations, link your Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP) service provider account with New Relic. 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of an Insights dashboard with data about vendors, technologies, services, instances, and other important details for DevOps teams. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all changes to a system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all AWS Elastic Load Balancing (ALB) systems for the ALB monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD pipeline integration It's important to track deployments and the impact that code and infrastructure changes have on your end-user experience. New Relic APM deployment markers allow you to record deployments for each application. A deployment marker is an event indicating that a deployment happened. You can pair markers with metadata from your source code management (SCM) system ( including user IDs, revisions, and change logs.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root causes of immediate, long-term, or gradual degradations in your applications. Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment, as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible Puppet 8. AWS Lambda Monitoring New Relic One features an updated APM agent that is highly optimized from a cost and time perspective for ephemeral Lambda functions. Enable New Relic monitoring of AWS Lambda to to assess invocations, error rate, function duration, cold starts, and more. You can also take advantage of New Relic's Infrastructure integration with Lambda for additional reporting capabilities.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.46817,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adopt <em>cloud</em> services",
        "sections": "2. Deploy <em>New</em> <em>Relic</em> Infrastructure",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " the <em>New</em> <em>Relic</em> Platform to monitor <em>your</em> modern technologies and <em>cloud</em> services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What <em>cloud</em>-based applications do I have? What are the underlying <em>cloud</em>-based services, technologies"
      },
      "id": "603ebf09e7b9d2071a2a0806"
    },
    {
      "sections": [
        "Iterate and measure impact: Track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: Track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "64fab5d31ae90da92debca9bc0eb802ebe731c2b",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T18:57:08Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Proper instrumentation gives teams full visibility into the impact of the changes they make in a system. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation and reduce the impact to other work happening in the system. Prerequisite Before starting this tutorial, complete the Establish objectives and baselines. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they're consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make across them are correct, and eliminate any anomalies before pushing code to production. Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights and use NRQL and external integrations to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in a DevOps transformation. 2. Add automated deployment markers It's important to track deployments and the impact code and infrastructure changes have on your end-user experience. Using deployment markers in New Relic APM, you can record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (for example, the user, revision, or change-log). APM displays a vertical line, or “marker,” on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application. Additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is a valuable way to determine the root cause of immediate, long-term, or gradual degradations in your application. New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test your pipeline with Infrastructure An important part of optimizing your cloud native environment is a making a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names, which is a good fit for this model. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you're satisfied with the application's performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.46817,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Integrate measurements into <em>your</em> development process",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test <em>your</em> pipeline with Infrastructure An important part of optimizing <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em> is a making a cultural shift toward smaller, more frequent changes to <em>your</em> code"
      },
      "id": "603ebdad196a67b212a83ded"
    },
    {
      "sections": [
        "Manage your containerized environment",
        "1. Update to latest Infrastructure agent and enable Kubernetes integration",
        "2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health",
        "3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment",
        "4. Monitor applications running in Kubernetes with APM",
        "Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics",
        "6. Bring teams together with dashboards tailored to specific business use cases and KPIs",
        "Learn more"
      ],
      "title": "Manage your containerized environment",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "71ba4468ed7d078021ccd705c78e72cfb5e92b5f",
      "image": "https://docs.newrelic.com/static/f744b0e1c8aac86e63f46a5798df58ae/c1b63/cont_environment01.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment/",
      "published_at": "2021-06-09T18:56:01Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Widespread adoption of containers has changed the way applications are written and deployed. Container orchestration technologies such as Kubernetes are making it easier for teams to schedule, deploy, and manage their containerized applications. But challenges still exist that require teams to rethink their environment and application monitoring strategies: Challenge 1: Containers are ephemeral by nature. Knowing the containers or pod or node (host) where the application is currently running is not necessarily an indication of where it was running 5, 15, or 30 minutes ago when the issue occurred. Containers are deployed in dynamic, constantly evolving environments that require a modern monitoring approach. Challenge 2: Often, organizations are adopting containers as they break down monolithic applications into multiple microservices. This new approach introduces new complexity to the system and the sheer scale and dimensionality of containers is hard to conceptualize in an easy-to-understand format. Challenge 3: Delivering a differentiated end-user experience is a key initiative for all organizations, and containers are being adopted to help organizations release better software, faster. But with this tremendous opportunity also comes risk, because every time a new container is deployed, the cluster is impacted. Organizations need context into how infrastructure changes impact the application stack, and how changes to both the infrastructure and application stack affect the end-user experience. Getting all of this data in real-time in a digestible format is a significant challenge in distributed, containerized environments. The New Relic platform offers customers both ease of use and ease of deployment for containerized Kubernetes environments. With a few clicks you have the data and confidence to move forward intelligently. These six steps illustrate how to use the New Relic platform to manage your containers and how they are scheduled: 1. Update to latest Infrastructure agent and enable Kubernetes integration To get started, you'll need to deploy the latest Infrastructure agent onto a Kubernetes cluster with a DaemonSet. Leveraging DaemonSets is vital in dynamic, containerized environments, because when a new node is deployed or the cluster scales up or down, the DaemonSet ensures the New Relic agent is running on these new nodes. In addition, to build a complete picture of your Kubernetes environment, New Relic aggregates data from many resources, including Kube-state metrics. New Relic's “Kubernetes aware” approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health Once the Kubernetes integration is installed, you can access the New Relic Kubernetes cluster explorer, which offers a differentiated, intuitive way to visualize the health and performance of Kubernetes clusters. It applies advanced capabilities to filter, sort, and search for Kubernetes entities, helping teams understand the relationships and dependencies within an environment. It's a powerful and innovative solution to the challenges associated with running Kubernetes at massive scale. 3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment Above and beyond what the cluster explorer provides, New Relic provides out-of-the-box dashboards that allow customers to analyze performance and operating metrics of their Kubernetes environments. Key metrics include the number of containers, resource consumption, pending pods, out of memory (OOM) kills, and stuck pods. These metrics may be particularly relevant to Kubernetes administrators who require reliable, up-to-date information on resource consumption against pre-set thresholds. Access these dashboards directly from the cluster explorer where you can first visually explore your cluster and then use filters to drive down into specific dashboards that match that filter. 4. Monitor applications running in Kubernetes with APM One advantage of New Relic's Infrastructure agent being application-aware is that the cluster explorer is automatically aware of New Relic agents that are deployed on new applications. To fully exploit these capabilities, we recommend monitoring all existing and future containerized applications running in Kubernetes by installing the APM agent on them. Starting again from the cluster explorer, you can dig into what's happening in your applications from the context of the Kubernetes cluster. This gives you the ability to intuitively correlate your infrastructure and applications and begin analytically troubleshooting across the stack. Cloud-native applications use many interconnected services. The cluster explorer will correlate the application and link to its distributed tracings. In complex systems the ability to trace and identify pathways and latency bottlenecks are not optional. Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics If you are orchestrating an end-user facing application, New Relic allows you to view the end-to-end impact your infrastructure and services have on your customer experience. We tackle end-user management in two ways: With Synthetics, you can track application availability and performance from a wide variety of global locations visualizing if customer experience is impacted due to geography. With Browser and Mobile, we recommend monitoring such KPIs as load time and availability. Marrying end-user data with metrics and dashboards provided by the cluster explorer enables operators, administrators, app developers, and business personnel to align on common initiatives. 6. Bring teams together with dashboards tailored to specific business use cases and KPIs With dashboards, you can build custom visualizations from an end-to-end service perspective to analyze the cluster, pods, application, and end-user experience in one clean visual display. By using New Relic's dashboards, cross-organizational teams can align to share a common language and single source of truth, helping them make better decisions and drive business impact. The top two rows of this sample dashboard visualize various aspects of a Kubernetes environment while the third row illustrates valuable information regarding the applications that are deployed to this cluster. The bottom row displays the end-user viewpoint. Learn more Actively, where we enable availability monitoring for one user in one location with Synthetics Passively, where you can analyze a macro view of all users across all geographies with Browser monitoring and Mobile monitoring. Bring teams together with dashboards tailored to specific business use cases and KPIs Kubernetes Monitoring Guide",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.56757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>your</em> containerized <em>environment</em>",
        "sections": "Manage <em>your</em> containerized <em>environment</em>",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " a complete picture of <em>your</em> Kubernetes <em>environment</em>, <em>New</em> <em>Relic</em> aggregates data from many resources, including Kube-state metrics. <em>New</em> <em>Relic</em>&#x27;s “Kubernetes aware” approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage"
      },
      "id": "603ebf49196a670d96a83d81"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments": [
    {
      "sections": [
        "Adopt cloud services",
        "1. Identify services and technologies",
        "2. Deploy New Relic Infrastructure",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "Tip",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD pipeline integration",
        "8. AWS Lambda Monitoring"
      ],
      "title": "Adopt cloud services",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "4a8e675e4231295287e69402c8c5ff9b05a6103b",
      "image": "https://docs.newrelic.com/static/4159294d05ee078268a7b287af99a72f/c1b63/adopt_cloud.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services/",
      "published_at": "2021-06-09T16:40:24Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've recently completed your cloud migration, have been using cloud-based services for a while, or have always been in the cloud, you may find yourself deploying modern, cutting-edge technologies and services. It's important to develop the ability to adopt new services easily and with confidence; innovation never stops for companies operating in the cloud, and a company's willingness to embrace new technology can give it a major competitive differentiator. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate, for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions. They may be cloud-based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations, you want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services. This allows your team to deploy faster, to adopt new services with confidence, to make better business decisions, and in general to expand its technology horizons. Here are the steps to using the New Relic Platform to monitor your modern technologies and cloud services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies and new services that might impact your organization's application environment. 2. Deploy New Relic Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified in Step One so that you can monitor your cloud services. If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations As you integrate new cloud services, you can use New Relic to monitor and report data about these services; giving you a single, comprehensive overview of your entire architecture. To configure cloud service integrations, link your Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP) service provider account with New Relic. 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of an Insights dashboard with data about vendors, technologies, services, instances, and other important details for DevOps teams. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all changes to a system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all AWS Elastic Load Balancing (ALB) systems for the ALB monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD pipeline integration It's important to track deployments and the impact that code and infrastructure changes have on your end-user experience. New Relic APM deployment markers allow you to record deployments for each application. A deployment marker is an event indicating that a deployment happened. You can pair markers with metadata from your source code management (SCM) system ( including user IDs, revisions, and change logs.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root causes of immediate, long-term, or gradual degradations in your applications. Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment, as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible Puppet 8. AWS Lambda Monitoring New Relic One features an updated APM agent that is highly optimized from a cost and time perspective for ephemeral Lambda functions. Enable New Relic monitoring of AWS Lambda to to assess invocations, error rate, function duration, cold starts, and more. You can also take advantage of New Relic's Infrastructure integration with Lambda for additional reporting capabilities.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.46817,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adopt <em>cloud</em> services",
        "sections": "2. Deploy <em>New</em> <em>Relic</em> Infrastructure",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " the <em>New</em> <em>Relic</em> Platform to monitor <em>your</em> modern technologies and <em>cloud</em> services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What <em>cloud</em>-based applications do I have? What are the underlying <em>cloud</em>-based services, technologies"
      },
      "id": "603ebf09e7b9d2071a2a0806"
    },
    {
      "sections": [
        "Manage your containerized environment",
        "1. Update to latest Infrastructure agent and enable Kubernetes integration",
        "2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health",
        "3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment",
        "4. Monitor applications running in Kubernetes with APM",
        "Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics",
        "6. Bring teams together with dashboards tailored to specific business use cases and KPIs",
        "Learn more"
      ],
      "title": "Manage your containerized environment",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "71ba4468ed7d078021ccd705c78e72cfb5e92b5f",
      "image": "https://docs.newrelic.com/static/f744b0e1c8aac86e63f46a5798df58ae/c1b63/cont_environment01.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment/",
      "published_at": "2021-06-09T18:56:01Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Widespread adoption of containers has changed the way applications are written and deployed. Container orchestration technologies such as Kubernetes are making it easier for teams to schedule, deploy, and manage their containerized applications. But challenges still exist that require teams to rethink their environment and application monitoring strategies: Challenge 1: Containers are ephemeral by nature. Knowing the containers or pod or node (host) where the application is currently running is not necessarily an indication of where it was running 5, 15, or 30 minutes ago when the issue occurred. Containers are deployed in dynamic, constantly evolving environments that require a modern monitoring approach. Challenge 2: Often, organizations are adopting containers as they break down monolithic applications into multiple microservices. This new approach introduces new complexity to the system and the sheer scale and dimensionality of containers is hard to conceptualize in an easy-to-understand format. Challenge 3: Delivering a differentiated end-user experience is a key initiative for all organizations, and containers are being adopted to help organizations release better software, faster. But with this tremendous opportunity also comes risk, because every time a new container is deployed, the cluster is impacted. Organizations need context into how infrastructure changes impact the application stack, and how changes to both the infrastructure and application stack affect the end-user experience. Getting all of this data in real-time in a digestible format is a significant challenge in distributed, containerized environments. The New Relic platform offers customers both ease of use and ease of deployment for containerized Kubernetes environments. With a few clicks you have the data and confidence to move forward intelligently. These six steps illustrate how to use the New Relic platform to manage your containers and how they are scheduled: 1. Update to latest Infrastructure agent and enable Kubernetes integration To get started, you'll need to deploy the latest Infrastructure agent onto a Kubernetes cluster with a DaemonSet. Leveraging DaemonSets is vital in dynamic, containerized environments, because when a new node is deployed or the cluster scales up or down, the DaemonSet ensures the New Relic agent is running on these new nodes. In addition, to build a complete picture of your Kubernetes environment, New Relic aggregates data from many resources, including Kube-state metrics. New Relic's “Kubernetes aware” approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health Once the Kubernetes integration is installed, you can access the New Relic Kubernetes cluster explorer, which offers a differentiated, intuitive way to visualize the health and performance of Kubernetes clusters. It applies advanced capabilities to filter, sort, and search for Kubernetes entities, helping teams understand the relationships and dependencies within an environment. It's a powerful and innovative solution to the challenges associated with running Kubernetes at massive scale. 3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment Above and beyond what the cluster explorer provides, New Relic provides out-of-the-box dashboards that allow customers to analyze performance and operating metrics of their Kubernetes environments. Key metrics include the number of containers, resource consumption, pending pods, out of memory (OOM) kills, and stuck pods. These metrics may be particularly relevant to Kubernetes administrators who require reliable, up-to-date information on resource consumption against pre-set thresholds. Access these dashboards directly from the cluster explorer where you can first visually explore your cluster and then use filters to drive down into specific dashboards that match that filter. 4. Monitor applications running in Kubernetes with APM One advantage of New Relic's Infrastructure agent being application-aware is that the cluster explorer is automatically aware of New Relic agents that are deployed on new applications. To fully exploit these capabilities, we recommend monitoring all existing and future containerized applications running in Kubernetes by installing the APM agent on them. Starting again from the cluster explorer, you can dig into what's happening in your applications from the context of the Kubernetes cluster. This gives you the ability to intuitively correlate your infrastructure and applications and begin analytically troubleshooting across the stack. Cloud-native applications use many interconnected services. The cluster explorer will correlate the application and link to its distributed tracings. In complex systems the ability to trace and identify pathways and latency bottlenecks are not optional. Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics If you are orchestrating an end-user facing application, New Relic allows you to view the end-to-end impact your infrastructure and services have on your customer experience. We tackle end-user management in two ways: With Synthetics, you can track application availability and performance from a wide variety of global locations visualizing if customer experience is impacted due to geography. With Browser and Mobile, we recommend monitoring such KPIs as load time and availability. Marrying end-user data with metrics and dashboards provided by the cluster explorer enables operators, administrators, app developers, and business personnel to align on common initiatives. 6. Bring teams together with dashboards tailored to specific business use cases and KPIs With dashboards, you can build custom visualizations from an end-to-end service perspective to analyze the cluster, pods, application, and end-user experience in one clean visual display. By using New Relic's dashboards, cross-organizational teams can align to share a common language and single source of truth, helping them make better decisions and drive business impact. The top two rows of this sample dashboard visualize various aspects of a Kubernetes environment while the third row illustrates valuable information regarding the applications that are deployed to this cluster. The bottom row displays the end-user viewpoint. Learn more Actively, where we enable availability monitoring for one user in one location with Synthetics Passively, where you can analyze a macro view of all users across all geographies with Browser monitoring and Mobile monitoring. Bring teams together with dashboards tailored to specific business use cases and KPIs Kubernetes Monitoring Guide",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.56757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>your</em> containerized <em>environment</em>",
        "sections": "Manage <em>your</em> containerized <em>environment</em>",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " a complete picture of <em>your</em> Kubernetes <em>environment</em>, <em>New</em> <em>Relic</em> aggregates data from many resources, including Kube-state metrics. <em>New</em> <em>Relic</em>&#x27;s “Kubernetes aware” approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage"
      },
      "id": "603ebf49196a670d96a83d81"
    },
    {
      "sections": [
        "Analyze distributed systems",
        "1. Identify high-priority areas to monitor",
        "2. Instrument to get the visibility you require",
        "3. Create dashboards",
        "4. Dig deeper with distributed tracing",
        "5. Annotate message queues with distributed tracing payload APIs",
        "Example annotated message queue",
        "6. Annotate and tag traces with custom attributes",
        "Tip",
        "7. Leverage Synthetics to get a high-level view of system health",
        "For more help"
      ],
      "title": "Analyze distributed systems",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "af1cf5a80f8254c90509e562fb68a6ded2f7207f",
      "image": "https://docs.newrelic.com/static/838e50badd634f1f188cf821785f6696/2cffa/APm_distributed-tracing-catalyst-TWO.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/analyze-distributed-systems/",
      "published_at": "2021-06-09T18:54:56Z",
      "updated_at": "2021-03-16T11:07:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In a monolithic application, a simple stack trace can contain enough diagnostic data to determine the root cause of a code defect. But cloud computing and microservices have blurred the lines between software and infrastructure; in modern architectures, requests are distributed across many smaller services—often with ephemeral lifespans—hosted in both on-premise and cloud environments. Spotting code defects becomes much more complex. APM's distributed tracing automatically helps teams troubleshoot such distributed systems. Distributed traces are just one component of a well-monitored system. You need a holistic view of your distributed system, especially when tracking the root cause of a defect, as there are volumes of data to evaluate and understand. When managing a microservices environment, it's critical that you have the capability to spot bottlenecks and problem spans quickly so that you don't compromise your mean-time-to-resolution (MTTR) or end-user experience. At New Relic, we understand these challenges inherently. In our journey, we've transitioned from a Ruby monolith to a multi-language distributed environment built on more than 300 microservices, for which we average 50 code deploys a day. Such challenges inform both how we've built and how we monitor New Relic. Use the New Relic platform to translate your data into relevant insights, so you can collaborate around a common framework to build context and quickly optimize and troubleshoot your complex, distributed systems. 1. Identify high-priority areas to monitor Distributed systems are complex. Before engaging with the New Relic platform, we recommend that you identify the most critical areas of your systems to observe, and focus on instrumenting those high-priority areas first. Google's SRE handbook suggests monitoring the \"four golden signals\": traffic, latency, errors, and saturation, as shown in the following dashboard: Dashboards: Visualize key areas to monitor with dashboards. Too often, teams monitor what is either 1) easy to measure or 2) interpretable. Avoid this fallacy. When making choices about what to monitor, involve product managers and other stakeholders from your organization. Your goal is to monitor what matters to your business, not to overload your teams with noise. 2. Instrument to get the visibility you require Once you've identified your key priorities, instrument the appropriate parts of your system with the New Relic platform. Monitor your web apps with APM. See compatibility and requirements for New Relic agents and products to learn precise compatibility details for each supported language and then install the APM agent on your application stack. Steps for installing APM agents vary based on language. Enable distributed tracing for APM, which will affect some existing APM features. If you're accustomed to using APM without distributed tracing, read the transition guide before you enable this feature. Monitor your compute resources with Infrastructure. See compatibility and requirements for New Relic Infrastructure for supported operating systems and environments. You can also instrument other products and services with on-host integrations. Monitor your front-end experience with Mobile and Browser. See compatibility and requirements for Mobile and for Browser. 3. Create dashboards Use dashboards to get an overview of your entire system and baseline performance, so you can better understand how the components work together. Insights provides a single framework for aligning disparate teams around relevant data. Approach this first build as your launching point, giving your teams something to react to as you begin to ascribe context to your system. You should continue to build and iterate your dashboards as you analyze, troubleshoot, and optimize your distributed system. Even after you have a basic understanding of your system, use dashboards to inform the decisions you make going forward. Dashboards provide central repository of truth, allowing all stakeholders to build context about the health of your system. Here is an example of a query that displays the slowest applications. SELECT percentile(duration, 99) as 'Slowest duration' FROM Transaction FACET name Copy Using this query you can focus on the slowest application to dig deeper: After running the query, dashboards displays the slowest durations. 4. Dig deeper with distributed tracing After you have basic instrumentation and contextual dashboards in place, you can begin to dig deeper to troubleshoot or optimize your system. A differentiated feature in New Relic One's Global Distributed Tracing is that you can come in with vague context for what you're investigating and search across all accounts and traces to get down to the actual user interactions that have those attributes somewhere in their trace. You no longer must begin with the application or specific entity to search for traces that include that application. For example, start with an analysis of your complex service calls, using the distributed tracing UI to: View a scatter plot chart showing the frequency, duration, and other facets of your distributed traces Group traces by root entry, service, service entry, or traces with errors View a trace list Filter specific traces to meet certain parameters You'll likely discover that you want to take the analysis one step further by annotating your traces with information that adds context to your troubleshooting, like User ID. You can do this in New Relic using custom attributes. one.newrelic.com > APM > Distributed tracing: use the distributed tracing UI to monitor and analyze modern distributed systems. 5. Annotate message queues with distributed tracing payload APIs To see connections between services in some environments—for example, in a system that relies heavily on queues—you may need to do some manual instrumentation using the distributed tracing payload APIs to ensure you're propagating the payload. This gives agents the necessary context to create spans with the right correlation; you'll see end-to-end traces for all linked services, including those that cross through the queue. Example annotated message queue For example: Start a transaction. Create the distributed tracing payload on the producer service within a New Relic transaction. As part of the message, add the distributed tracing payload. ​​newrelic.setTransactionName(\"Send Message\") // Create SQS service object var sqs = new AWS.SQS({apiVersion: '2012-11-05'}); var transactionHandle = newrelic.getTransaction(); var payload = transactionHandle.createDistributedTracePayload(); var jsonPayload = payload.text(); //add the jsonPayload as a MessageAttribute var params = { DelaySeconds: 10, MessageAttributes: { \"Testing\": { DataType: \"String\", StringValue: \"123\" }, \"TraceContext\": { DataType: \"String\", StringValue: jsonPayload } }, MessageBody: \"Testing 123\", QueueUrl: \"https://sqs.us-west-2.amazonaws.com/408155283954/sqs-testing\" }; Copy With the context of a transaction, receive the payload on the consumer service. sqs.receiveMessage(params, function(err, data) { if (err) { console.log(\"Receive Error\", err); } else if (data && data.Messages) { console.log(\"trace context:\") var traceContext = data.Messages[0].MessageAttributes.TraceContext.StringValue; if (traceContext != \"\") { var transactionHandle = newrelic.getTransaction(); transactionHandle.acceptDistributedTracePayload(traceContext); } Copy 6. Annotate and tag traces with custom attributes We recommend that you use custom attributes to decorate events with additional information for better tracing. For example, by adding key-value pairs, you can attach a user ID to trace a specific user through the call stack and review failing requests to determine if that user is having an unusually poor experience. We recommend adding custom attributes based on your use case; for example, if your instrumenting an order management system, you could add an order number custom attribute to your traces. To add custom attributes, you must first enable them for your agent, and then make an API call to record the attribute. Tip For more agent-specific information on collecting custom attributes, see Collect custom attributes sqs.sendMessage(params, function(err, data) { if (err) { res.send(\"Error: \"+ err); } else { res.send(\"Success! Message ID: \"+ data.MessageId); newrelic.addCustomAttribute(\"Message ID\", data.MessageId) } }); Copy 7. Leverage Synthetics to get a high-level view of system health In complex, distributed systems, you need to track and monitor many signals. Sometimes it may be that no one signal is concerning, yet your whole system is behaving anomalously. To get a complete picture, it's critical to analyze symptomatic data in tandem with system-level data. Synthetics allows you to interact with the entire system as an external user would, giving your teams high-level checks for performance and user experience. These external checks help you understand if the entire system is doing what you want regardless of what specific signals may indicate. For more help For more tips and best practices on distributed tracing and custom attributes, see the following: Distributed Tracing Anomaly Detection: A Faster, Easier Way to Troubleshoot Microservices Environments Introduction to distributed tracing Collect custom attributes",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.5657,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " that you don&#x27;t compromise <em>your</em> mean-time-to-resolution (MTTR) or end-user experience. At <em>New</em> <em>Relic</em>, we understand these challenges inherently. In our journey, we&#x27;ve transitioned from a Ruby monolith to a multi-language distributed <em>environment</em> built on more than 300 microservices, for which we average"
      },
      "id": "603ebd8264441f02694e887f"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment": [
    {
      "sections": [
        "Adopt cloud services",
        "1. Identify services and technologies",
        "2. Deploy New Relic Infrastructure",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "Tip",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD pipeline integration",
        "8. AWS Lambda Monitoring"
      ],
      "title": "Adopt cloud services",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "4a8e675e4231295287e69402c8c5ff9b05a6103b",
      "image": "https://docs.newrelic.com/static/4159294d05ee078268a7b287af99a72f/c1b63/adopt_cloud.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services/",
      "published_at": "2021-06-09T16:40:24Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've recently completed your cloud migration, have been using cloud-based services for a while, or have always been in the cloud, you may find yourself deploying modern, cutting-edge technologies and services. It's important to develop the ability to adopt new services easily and with confidence; innovation never stops for companies operating in the cloud, and a company's willingness to embrace new technology can give it a major competitive differentiator. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate, for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions. They may be cloud-based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations, you want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services. This allows your team to deploy faster, to adopt new services with confidence, to make better business decisions, and in general to expand its technology horizons. Here are the steps to using the New Relic Platform to monitor your modern technologies and cloud services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies and new services that might impact your organization's application environment. 2. Deploy New Relic Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified in Step One so that you can monitor your cloud services. If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations As you integrate new cloud services, you can use New Relic to monitor and report data about these services; giving you a single, comprehensive overview of your entire architecture. To configure cloud service integrations, link your Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP) service provider account with New Relic. 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of an Insights dashboard with data about vendors, technologies, services, instances, and other important details for DevOps teams. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all changes to a system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all AWS Elastic Load Balancing (ALB) systems for the ALB monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD pipeline integration It's important to track deployments and the impact that code and infrastructure changes have on your end-user experience. New Relic APM deployment markers allow you to record deployments for each application. A deployment marker is an event indicating that a deployment happened. You can pair markers with metadata from your source code management (SCM) system ( including user IDs, revisions, and change logs.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root causes of immediate, long-term, or gradual degradations in your applications. Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment, as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible Puppet 8. AWS Lambda Monitoring New Relic One features an updated APM agent that is highly optimized from a cost and time perspective for ephemeral Lambda functions. Enable New Relic monitoring of AWS Lambda to to assess invocations, error rate, function duration, cold starts, and more. You can also take advantage of New Relic's Infrastructure integration with Lambda for additional reporting capabilities.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.46817,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adopt <em>cloud</em> services",
        "sections": "2. Deploy <em>New</em> <em>Relic</em> Infrastructure",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " the <em>New</em> <em>Relic</em> Platform to monitor <em>your</em> modern technologies and <em>cloud</em> services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What <em>cloud</em>-based applications do I have? What are the underlying <em>cloud</em>-based services, technologies"
      },
      "id": "603ebf09e7b9d2071a2a0806"
    },
    {
      "sections": [
        "Iterate and measure impact: Track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: Track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "64fab5d31ae90da92debca9bc0eb802ebe731c2b",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T18:57:08Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Proper instrumentation gives teams full visibility into the impact of the changes they make in a system. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation and reduce the impact to other work happening in the system. Prerequisite Before starting this tutorial, complete the Establish objectives and baselines. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they're consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make across them are correct, and eliminate any anomalies before pushing code to production. Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights and use NRQL and external integrations to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in a DevOps transformation. 2. Add automated deployment markers It's important to track deployments and the impact code and infrastructure changes have on your end-user experience. Using deployment markers in New Relic APM, you can record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (for example, the user, revision, or change-log). APM displays a vertical line, or “marker,” on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application. Additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is a valuable way to determine the root cause of immediate, long-term, or gradual degradations in your application. New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test your pipeline with Infrastructure An important part of optimizing your cloud native environment is a making a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names, which is a good fit for this model. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you're satisfied with the application's performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.46817,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Integrate measurements into <em>your</em> development process",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test <em>your</em> pipeline with Infrastructure An important part of optimizing <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em> is a making a cultural shift toward smaller, more frequent changes to <em>your</em> code"
      },
      "id": "603ebdad196a67b212a83ded"
    },
    {
      "sections": [
        "Analyze distributed systems",
        "1. Identify high-priority areas to monitor",
        "2. Instrument to get the visibility you require",
        "3. Create dashboards",
        "4. Dig deeper with distributed tracing",
        "5. Annotate message queues with distributed tracing payload APIs",
        "Example annotated message queue",
        "6. Annotate and tag traces with custom attributes",
        "Tip",
        "7. Leverage Synthetics to get a high-level view of system health",
        "For more help"
      ],
      "title": "Analyze distributed systems",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "af1cf5a80f8254c90509e562fb68a6ded2f7207f",
      "image": "https://docs.newrelic.com/static/838e50badd634f1f188cf821785f6696/2cffa/APm_distributed-tracing-catalyst-TWO.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/analyze-distributed-systems/",
      "published_at": "2021-06-09T18:54:56Z",
      "updated_at": "2021-03-16T11:07:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In a monolithic application, a simple stack trace can contain enough diagnostic data to determine the root cause of a code defect. But cloud computing and microservices have blurred the lines between software and infrastructure; in modern architectures, requests are distributed across many smaller services—often with ephemeral lifespans—hosted in both on-premise and cloud environments. Spotting code defects becomes much more complex. APM's distributed tracing automatically helps teams troubleshoot such distributed systems. Distributed traces are just one component of a well-monitored system. You need a holistic view of your distributed system, especially when tracking the root cause of a defect, as there are volumes of data to evaluate and understand. When managing a microservices environment, it's critical that you have the capability to spot bottlenecks and problem spans quickly so that you don't compromise your mean-time-to-resolution (MTTR) or end-user experience. At New Relic, we understand these challenges inherently. In our journey, we've transitioned from a Ruby monolith to a multi-language distributed environment built on more than 300 microservices, for which we average 50 code deploys a day. Such challenges inform both how we've built and how we monitor New Relic. Use the New Relic platform to translate your data into relevant insights, so you can collaborate around a common framework to build context and quickly optimize and troubleshoot your complex, distributed systems. 1. Identify high-priority areas to monitor Distributed systems are complex. Before engaging with the New Relic platform, we recommend that you identify the most critical areas of your systems to observe, and focus on instrumenting those high-priority areas first. Google's SRE handbook suggests monitoring the \"four golden signals\": traffic, latency, errors, and saturation, as shown in the following dashboard: Dashboards: Visualize key areas to monitor with dashboards. Too often, teams monitor what is either 1) easy to measure or 2) interpretable. Avoid this fallacy. When making choices about what to monitor, involve product managers and other stakeholders from your organization. Your goal is to monitor what matters to your business, not to overload your teams with noise. 2. Instrument to get the visibility you require Once you've identified your key priorities, instrument the appropriate parts of your system with the New Relic platform. Monitor your web apps with APM. See compatibility and requirements for New Relic agents and products to learn precise compatibility details for each supported language and then install the APM agent on your application stack. Steps for installing APM agents vary based on language. Enable distributed tracing for APM, which will affect some existing APM features. If you're accustomed to using APM without distributed tracing, read the transition guide before you enable this feature. Monitor your compute resources with Infrastructure. See compatibility and requirements for New Relic Infrastructure for supported operating systems and environments. You can also instrument other products and services with on-host integrations. Monitor your front-end experience with Mobile and Browser. See compatibility and requirements for Mobile and for Browser. 3. Create dashboards Use dashboards to get an overview of your entire system and baseline performance, so you can better understand how the components work together. Insights provides a single framework for aligning disparate teams around relevant data. Approach this first build as your launching point, giving your teams something to react to as you begin to ascribe context to your system. You should continue to build and iterate your dashboards as you analyze, troubleshoot, and optimize your distributed system. Even after you have a basic understanding of your system, use dashboards to inform the decisions you make going forward. Dashboards provide central repository of truth, allowing all stakeholders to build context about the health of your system. Here is an example of a query that displays the slowest applications. SELECT percentile(duration, 99) as 'Slowest duration' FROM Transaction FACET name Copy Using this query you can focus on the slowest application to dig deeper: After running the query, dashboards displays the slowest durations. 4. Dig deeper with distributed tracing After you have basic instrumentation and contextual dashboards in place, you can begin to dig deeper to troubleshoot or optimize your system. A differentiated feature in New Relic One's Global Distributed Tracing is that you can come in with vague context for what you're investigating and search across all accounts and traces to get down to the actual user interactions that have those attributes somewhere in their trace. You no longer must begin with the application or specific entity to search for traces that include that application. For example, start with an analysis of your complex service calls, using the distributed tracing UI to: View a scatter plot chart showing the frequency, duration, and other facets of your distributed traces Group traces by root entry, service, service entry, or traces with errors View a trace list Filter specific traces to meet certain parameters You'll likely discover that you want to take the analysis one step further by annotating your traces with information that adds context to your troubleshooting, like User ID. You can do this in New Relic using custom attributes. one.newrelic.com > APM > Distributed tracing: use the distributed tracing UI to monitor and analyze modern distributed systems. 5. Annotate message queues with distributed tracing payload APIs To see connections between services in some environments—for example, in a system that relies heavily on queues—you may need to do some manual instrumentation using the distributed tracing payload APIs to ensure you're propagating the payload. This gives agents the necessary context to create spans with the right correlation; you'll see end-to-end traces for all linked services, including those that cross through the queue. Example annotated message queue For example: Start a transaction. Create the distributed tracing payload on the producer service within a New Relic transaction. As part of the message, add the distributed tracing payload. ​​newrelic.setTransactionName(\"Send Message\") // Create SQS service object var sqs = new AWS.SQS({apiVersion: '2012-11-05'}); var transactionHandle = newrelic.getTransaction(); var payload = transactionHandle.createDistributedTracePayload(); var jsonPayload = payload.text(); //add the jsonPayload as a MessageAttribute var params = { DelaySeconds: 10, MessageAttributes: { \"Testing\": { DataType: \"String\", StringValue: \"123\" }, \"TraceContext\": { DataType: \"String\", StringValue: jsonPayload } }, MessageBody: \"Testing 123\", QueueUrl: \"https://sqs.us-west-2.amazonaws.com/408155283954/sqs-testing\" }; Copy With the context of a transaction, receive the payload on the consumer service. sqs.receiveMessage(params, function(err, data) { if (err) { console.log(\"Receive Error\", err); } else if (data && data.Messages) { console.log(\"trace context:\") var traceContext = data.Messages[0].MessageAttributes.TraceContext.StringValue; if (traceContext != \"\") { var transactionHandle = newrelic.getTransaction(); transactionHandle.acceptDistributedTracePayload(traceContext); } Copy 6. Annotate and tag traces with custom attributes We recommend that you use custom attributes to decorate events with additional information for better tracing. For example, by adding key-value pairs, you can attach a user ID to trace a specific user through the call stack and review failing requests to determine if that user is having an unusually poor experience. We recommend adding custom attributes based on your use case; for example, if your instrumenting an order management system, you could add an order number custom attribute to your traces. To add custom attributes, you must first enable them for your agent, and then make an API call to record the attribute. Tip For more agent-specific information on collecting custom attributes, see Collect custom attributes sqs.sendMessage(params, function(err, data) { if (err) { res.send(\"Error: \"+ err); } else { res.send(\"Success! Message ID: \"+ data.MessageId); newrelic.addCustomAttribute(\"Message ID\", data.MessageId) } }); Copy 7. Leverage Synthetics to get a high-level view of system health In complex, distributed systems, you need to track and monitor many signals. Sometimes it may be that no one signal is concerning, yet your whole system is behaving anomalously. To get a complete picture, it's critical to analyze symptomatic data in tandem with system-level data. Synthetics allows you to interact with the entire system as an external user would, giving your teams high-level checks for performance and user experience. These external checks help you understand if the entire system is doing what you want regardless of what specific signals may indicate. For more help For more tips and best practices on distributed tracing and custom attributes, see the following: Distributed Tracing Anomaly Detection: A Faster, Easier Way to Troubleshoot Microservices Environments Introduction to distributed tracing Collect custom attributes",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.5657,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " that you don&#x27;t compromise <em>your</em> mean-time-to-resolution (MTTR) or end-user experience. At <em>New</em> <em>Relic</em>, we understand these challenges inherently. In our journey, we&#x27;ve transitioned from a Ruby monolith to a multi-language distributed <em>environment</em> built on more than 300 microservices, for which we average"
      },
      "id": "603ebd8264441f02694e887f"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/migrate-microservices": [
    {
      "sections": [
        "Adopt cloud services",
        "1. Identify services and technologies",
        "2. Deploy New Relic Infrastructure",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "Tip",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD pipeline integration",
        "8. AWS Lambda Monitoring"
      ],
      "title": "Adopt cloud services",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "4a8e675e4231295287e69402c8c5ff9b05a6103b",
      "image": "https://docs.newrelic.com/static/4159294d05ee078268a7b287af99a72f/c1b63/adopt_cloud.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services/",
      "published_at": "2021-06-09T16:40:24Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've recently completed your cloud migration, have been using cloud-based services for a while, or have always been in the cloud, you may find yourself deploying modern, cutting-edge technologies and services. It's important to develop the ability to adopt new services easily and with confidence; innovation never stops for companies operating in the cloud, and a company's willingness to embrace new technology can give it a major competitive differentiator. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate, for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions. They may be cloud-based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations, you want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services. This allows your team to deploy faster, to adopt new services with confidence, to make better business decisions, and in general to expand its technology horizons. Here are the steps to using the New Relic Platform to monitor your modern technologies and cloud services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies and new services that might impact your organization's application environment. 2. Deploy New Relic Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified in Step One so that you can monitor your cloud services. If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations As you integrate new cloud services, you can use New Relic to monitor and report data about these services; giving you a single, comprehensive overview of your entire architecture. To configure cloud service integrations, link your Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP) service provider account with New Relic. 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of an Insights dashboard with data about vendors, technologies, services, instances, and other important details for DevOps teams. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all changes to a system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all AWS Elastic Load Balancing (ALB) systems for the ALB monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD pipeline integration It's important to track deployments and the impact that code and infrastructure changes have on your end-user experience. New Relic APM deployment markers allow you to record deployments for each application. A deployment marker is an event indicating that a deployment happened. You can pair markers with metadata from your source code management (SCM) system ( including user IDs, revisions, and change logs.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root causes of immediate, long-term, or gradual degradations in your applications. Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment, as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible Puppet 8. AWS Lambda Monitoring New Relic One features an updated APM agent that is highly optimized from a cost and time perspective for ephemeral Lambda functions. Enable New Relic monitoring of AWS Lambda to to assess invocations, error rate, function duration, cold starts, and more. You can also take advantage of New Relic's Infrastructure integration with Lambda for additional reporting capabilities.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.46814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adopt <em>cloud</em> services",
        "sections": "2. Deploy <em>New</em> <em>Relic</em> Infrastructure",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " the <em>New</em> <em>Relic</em> Platform to monitor <em>your</em> modern technologies and <em>cloud</em> services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What <em>cloud</em>-based applications do I have? What are the underlying <em>cloud</em>-based services, technologies"
      },
      "id": "603ebf09e7b9d2071a2a0806"
    },
    {
      "sections": [
        "Iterate and measure impact: Track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: Track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "64fab5d31ae90da92debca9bc0eb802ebe731c2b",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T18:57:08Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Proper instrumentation gives teams full visibility into the impact of the changes they make in a system. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation and reduce the impact to other work happening in the system. Prerequisite Before starting this tutorial, complete the Establish objectives and baselines. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they're consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make across them are correct, and eliminate any anomalies before pushing code to production. Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights and use NRQL and external integrations to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in a DevOps transformation. 2. Add automated deployment markers It's important to track deployments and the impact code and infrastructure changes have on your end-user experience. Using deployment markers in New Relic APM, you can record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (for example, the user, revision, or change-log). APM displays a vertical line, or “marker,” on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application. Additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is a valuable way to determine the root cause of immediate, long-term, or gradual degradations in your application. New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test your pipeline with Infrastructure An important part of optimizing your cloud native environment is a making a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names, which is a good fit for this model. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you're satisfied with the application's performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.46814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Integrate measurements into <em>your</em> development process",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test <em>your</em> pipeline with Infrastructure An important part of optimizing <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em> is a making a cultural shift toward smaller, more frequent changes to <em>your</em> code"
      },
      "id": "603ebdad196a67b212a83ded"
    },
    {
      "sections": [
        "Manage your containerized environment",
        "1. Update to latest Infrastructure agent and enable Kubernetes integration",
        "2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health",
        "3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment",
        "4. Monitor applications running in Kubernetes with APM",
        "Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics",
        "6. Bring teams together with dashboards tailored to specific business use cases and KPIs",
        "Learn more"
      ],
      "title": "Manage your containerized environment",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "71ba4468ed7d078021ccd705c78e72cfb5e92b5f",
      "image": "https://docs.newrelic.com/static/f744b0e1c8aac86e63f46a5798df58ae/c1b63/cont_environment01.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment/",
      "published_at": "2021-06-09T18:56:01Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Widespread adoption of containers has changed the way applications are written and deployed. Container orchestration technologies such as Kubernetes are making it easier for teams to schedule, deploy, and manage their containerized applications. But challenges still exist that require teams to rethink their environment and application monitoring strategies: Challenge 1: Containers are ephemeral by nature. Knowing the containers or pod or node (host) where the application is currently running is not necessarily an indication of where it was running 5, 15, or 30 minutes ago when the issue occurred. Containers are deployed in dynamic, constantly evolving environments that require a modern monitoring approach. Challenge 2: Often, organizations are adopting containers as they break down monolithic applications into multiple microservices. This new approach introduces new complexity to the system and the sheer scale and dimensionality of containers is hard to conceptualize in an easy-to-understand format. Challenge 3: Delivering a differentiated end-user experience is a key initiative for all organizations, and containers are being adopted to help organizations release better software, faster. But with this tremendous opportunity also comes risk, because every time a new container is deployed, the cluster is impacted. Organizations need context into how infrastructure changes impact the application stack, and how changes to both the infrastructure and application stack affect the end-user experience. Getting all of this data in real-time in a digestible format is a significant challenge in distributed, containerized environments. The New Relic platform offers customers both ease of use and ease of deployment for containerized Kubernetes environments. With a few clicks you have the data and confidence to move forward intelligently. These six steps illustrate how to use the New Relic platform to manage your containers and how they are scheduled: 1. Update to latest Infrastructure agent and enable Kubernetes integration To get started, you'll need to deploy the latest Infrastructure agent onto a Kubernetes cluster with a DaemonSet. Leveraging DaemonSets is vital in dynamic, containerized environments, because when a new node is deployed or the cluster scales up or down, the DaemonSet ensures the New Relic agent is running on these new nodes. In addition, to build a complete picture of your Kubernetes environment, New Relic aggregates data from many resources, including Kube-state metrics. New Relic's “Kubernetes aware” approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health Once the Kubernetes integration is installed, you can access the New Relic Kubernetes cluster explorer, which offers a differentiated, intuitive way to visualize the health and performance of Kubernetes clusters. It applies advanced capabilities to filter, sort, and search for Kubernetes entities, helping teams understand the relationships and dependencies within an environment. It's a powerful and innovative solution to the challenges associated with running Kubernetes at massive scale. 3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment Above and beyond what the cluster explorer provides, New Relic provides out-of-the-box dashboards that allow customers to analyze performance and operating metrics of their Kubernetes environments. Key metrics include the number of containers, resource consumption, pending pods, out of memory (OOM) kills, and stuck pods. These metrics may be particularly relevant to Kubernetes administrators who require reliable, up-to-date information on resource consumption against pre-set thresholds. Access these dashboards directly from the cluster explorer where you can first visually explore your cluster and then use filters to drive down into specific dashboards that match that filter. 4. Monitor applications running in Kubernetes with APM One advantage of New Relic's Infrastructure agent being application-aware is that the cluster explorer is automatically aware of New Relic agents that are deployed on new applications. To fully exploit these capabilities, we recommend monitoring all existing and future containerized applications running in Kubernetes by installing the APM agent on them. Starting again from the cluster explorer, you can dig into what's happening in your applications from the context of the Kubernetes cluster. This gives you the ability to intuitively correlate your infrastructure and applications and begin analytically troubleshooting across the stack. Cloud-native applications use many interconnected services. The cluster explorer will correlate the application and link to its distributed tracings. In complex systems the ability to trace and identify pathways and latency bottlenecks are not optional. Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics If you are orchestrating an end-user facing application, New Relic allows you to view the end-to-end impact your infrastructure and services have on your customer experience. We tackle end-user management in two ways: With Synthetics, you can track application availability and performance from a wide variety of global locations visualizing if customer experience is impacted due to geography. With Browser and Mobile, we recommend monitoring such KPIs as load time and availability. Marrying end-user data with metrics and dashboards provided by the cluster explorer enables operators, administrators, app developers, and business personnel to align on common initiatives. 6. Bring teams together with dashboards tailored to specific business use cases and KPIs With dashboards, you can build custom visualizations from an end-to-end service perspective to analyze the cluster, pods, application, and end-user experience in one clean visual display. By using New Relic's dashboards, cross-organizational teams can align to share a common language and single source of truth, helping them make better decisions and drive business impact. The top two rows of this sample dashboard visualize various aspects of a Kubernetes environment while the third row illustrates valuable information regarding the applications that are deployed to this cluster. The bottom row displays the end-user viewpoint. Learn more Actively, where we enable availability monitoring for one user in one location with Synthetics Passively, where you can analyze a macro view of all users across all geographies with Browser monitoring and Mobile monitoring. Bring teams together with dashboards tailored to specific business use cases and KPIs Kubernetes Monitoring Guide",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.56757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>your</em> containerized <em>environment</em>",
        "sections": "Manage <em>your</em> containerized <em>environment</em>",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " a complete picture of <em>your</em> Kubernetes <em>environment</em>, <em>New</em> <em>Relic</em> aggregates data from many resources, including Kube-state metrics. <em>New</em> <em>Relic</em>&#x27;s “Kubernetes aware” approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage"
      },
      "id": "603ebf49196a670d96a83d81"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/optimize-cloud-architecture-spend-continuously-improve-your-modern-cloud-environment": [
    {
      "sections": [
        "Adopt cloud services",
        "1. Identify services and technologies",
        "2. Deploy New Relic Infrastructure",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "Tip",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD pipeline integration",
        "8. AWS Lambda Monitoring"
      ],
      "title": "Adopt cloud services",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "4a8e675e4231295287e69402c8c5ff9b05a6103b",
      "image": "https://docs.newrelic.com/static/4159294d05ee078268a7b287af99a72f/c1b63/adopt_cloud.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services/",
      "published_at": "2021-06-09T16:40:24Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've recently completed your cloud migration, have been using cloud-based services for a while, or have always been in the cloud, you may find yourself deploying modern, cutting-edge technologies and services. It's important to develop the ability to adopt new services easily and with confidence; innovation never stops for companies operating in the cloud, and a company's willingness to embrace new technology can give it a major competitive differentiator. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate, for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions. They may be cloud-based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations, you want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services. This allows your team to deploy faster, to adopt new services with confidence, to make better business decisions, and in general to expand its technology horizons. Here are the steps to using the New Relic Platform to monitor your modern technologies and cloud services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies and new services that might impact your organization's application environment. 2. Deploy New Relic Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified in Step One so that you can monitor your cloud services. If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations As you integrate new cloud services, you can use New Relic to monitor and report data about these services; giving you a single, comprehensive overview of your entire architecture. To configure cloud service integrations, link your Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP) service provider account with New Relic. 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of an Insights dashboard with data about vendors, technologies, services, instances, and other important details for DevOps teams. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all changes to a system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all AWS Elastic Load Balancing (ALB) systems for the ALB monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD pipeline integration It's important to track deployments and the impact that code and infrastructure changes have on your end-user experience. New Relic APM deployment markers allow you to record deployments for each application. A deployment marker is an event indicating that a deployment happened. You can pair markers with metadata from your source code management (SCM) system ( including user IDs, revisions, and change logs.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root causes of immediate, long-term, or gradual degradations in your applications. Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment, as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible Puppet 8. AWS Lambda Monitoring New Relic One features an updated APM agent that is highly optimized from a cost and time perspective for ephemeral Lambda functions. Enable New Relic monitoring of AWS Lambda to to assess invocations, error rate, function duration, cold starts, and more. You can also take advantage of New Relic's Infrastructure integration with Lambda for additional reporting capabilities.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.46814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adopt <em>cloud</em> services",
        "sections": "2. Deploy <em>New</em> <em>Relic</em> Infrastructure",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " the <em>New</em> <em>Relic</em> Platform to monitor <em>your</em> modern technologies and <em>cloud</em> services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What <em>cloud</em>-based applications do I have? What are the underlying <em>cloud</em>-based services, technologies"
      },
      "id": "603ebf09e7b9d2071a2a0806"
    },
    {
      "sections": [
        "Iterate and measure impact: Track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: Track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "64fab5d31ae90da92debca9bc0eb802ebe731c2b",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T18:57:08Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Proper instrumentation gives teams full visibility into the impact of the changes they make in a system. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation and reduce the impact to other work happening in the system. Prerequisite Before starting this tutorial, complete the Establish objectives and baselines. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they're consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make across them are correct, and eliminate any anomalies before pushing code to production. Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights and use NRQL and external integrations to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in a DevOps transformation. 2. Add automated deployment markers It's important to track deployments and the impact code and infrastructure changes have on your end-user experience. Using deployment markers in New Relic APM, you can record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (for example, the user, revision, or change-log). APM displays a vertical line, or “marker,” on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application. Additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is a valuable way to determine the root cause of immediate, long-term, or gradual degradations in your application. New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test your pipeline with Infrastructure An important part of optimizing your cloud native environment is a making a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names, which is a good fit for this model. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you're satisfied with the application's performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.46814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Integrate measurements into <em>your</em> development process",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test <em>your</em> pipeline with Infrastructure An important part of optimizing <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em> is a making a cultural shift toward smaller, more frequent changes to <em>your</em> code"
      },
      "id": "603ebdad196a67b212a83ded"
    },
    {
      "sections": [
        "Manage your containerized environment",
        "1. Update to latest Infrastructure agent and enable Kubernetes integration",
        "2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health",
        "3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment",
        "4. Monitor applications running in Kubernetes with APM",
        "Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics",
        "6. Bring teams together with dashboards tailored to specific business use cases and KPIs",
        "Learn more"
      ],
      "title": "Manage your containerized environment",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "71ba4468ed7d078021ccd705c78e72cfb5e92b5f",
      "image": "https://docs.newrelic.com/static/f744b0e1c8aac86e63f46a5798df58ae/c1b63/cont_environment01.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment/",
      "published_at": "2021-06-09T18:56:01Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Widespread adoption of containers has changed the way applications are written and deployed. Container orchestration technologies such as Kubernetes are making it easier for teams to schedule, deploy, and manage their containerized applications. But challenges still exist that require teams to rethink their environment and application monitoring strategies: Challenge 1: Containers are ephemeral by nature. Knowing the containers or pod or node (host) where the application is currently running is not necessarily an indication of where it was running 5, 15, or 30 minutes ago when the issue occurred. Containers are deployed in dynamic, constantly evolving environments that require a modern monitoring approach. Challenge 2: Often, organizations are adopting containers as they break down monolithic applications into multiple microservices. This new approach introduces new complexity to the system and the sheer scale and dimensionality of containers is hard to conceptualize in an easy-to-understand format. Challenge 3: Delivering a differentiated end-user experience is a key initiative for all organizations, and containers are being adopted to help organizations release better software, faster. But with this tremendous opportunity also comes risk, because every time a new container is deployed, the cluster is impacted. Organizations need context into how infrastructure changes impact the application stack, and how changes to both the infrastructure and application stack affect the end-user experience. Getting all of this data in real-time in a digestible format is a significant challenge in distributed, containerized environments. The New Relic platform offers customers both ease of use and ease of deployment for containerized Kubernetes environments. With a few clicks you have the data and confidence to move forward intelligently. These six steps illustrate how to use the New Relic platform to manage your containers and how they are scheduled: 1. Update to latest Infrastructure agent and enable Kubernetes integration To get started, you'll need to deploy the latest Infrastructure agent onto a Kubernetes cluster with a DaemonSet. Leveraging DaemonSets is vital in dynamic, containerized environments, because when a new node is deployed or the cluster scales up or down, the DaemonSet ensures the New Relic agent is running on these new nodes. In addition, to build a complete picture of your Kubernetes environment, New Relic aggregates data from many resources, including Kube-state metrics. New Relic's “Kubernetes aware” approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health Once the Kubernetes integration is installed, you can access the New Relic Kubernetes cluster explorer, which offers a differentiated, intuitive way to visualize the health and performance of Kubernetes clusters. It applies advanced capabilities to filter, sort, and search for Kubernetes entities, helping teams understand the relationships and dependencies within an environment. It's a powerful and innovative solution to the challenges associated with running Kubernetes at massive scale. 3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment Above and beyond what the cluster explorer provides, New Relic provides out-of-the-box dashboards that allow customers to analyze performance and operating metrics of their Kubernetes environments. Key metrics include the number of containers, resource consumption, pending pods, out of memory (OOM) kills, and stuck pods. These metrics may be particularly relevant to Kubernetes administrators who require reliable, up-to-date information on resource consumption against pre-set thresholds. Access these dashboards directly from the cluster explorer where you can first visually explore your cluster and then use filters to drive down into specific dashboards that match that filter. 4. Monitor applications running in Kubernetes with APM One advantage of New Relic's Infrastructure agent being application-aware is that the cluster explorer is automatically aware of New Relic agents that are deployed on new applications. To fully exploit these capabilities, we recommend monitoring all existing and future containerized applications running in Kubernetes by installing the APM agent on them. Starting again from the cluster explorer, you can dig into what's happening in your applications from the context of the Kubernetes cluster. This gives you the ability to intuitively correlate your infrastructure and applications and begin analytically troubleshooting across the stack. Cloud-native applications use many interconnected services. The cluster explorer will correlate the application and link to its distributed tracings. In complex systems the ability to trace and identify pathways and latency bottlenecks are not optional. Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics If you are orchestrating an end-user facing application, New Relic allows you to view the end-to-end impact your infrastructure and services have on your customer experience. We tackle end-user management in two ways: With Synthetics, you can track application availability and performance from a wide variety of global locations visualizing if customer experience is impacted due to geography. With Browser and Mobile, we recommend monitoring such KPIs as load time and availability. Marrying end-user data with metrics and dashboards provided by the cluster explorer enables operators, administrators, app developers, and business personnel to align on common initiatives. 6. Bring teams together with dashboards tailored to specific business use cases and KPIs With dashboards, you can build custom visualizations from an end-to-end service perspective to analyze the cluster, pods, application, and end-user experience in one clean visual display. By using New Relic's dashboards, cross-organizational teams can align to share a common language and single source of truth, helping them make better decisions and drive business impact. The top two rows of this sample dashboard visualize various aspects of a Kubernetes environment while the third row illustrates valuable information regarding the applications that are deployed to this cluster. The bottom row displays the end-user viewpoint. Learn more Actively, where we enable availability monitoring for one user in one location with Synthetics Passively, where you can analyze a macro view of all users across all geographies with Browser monitoring and Mobile monitoring. Bring teams together with dashboards tailored to specific business use cases and KPIs Kubernetes Monitoring Guide",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.56757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>your</em> containerized <em>environment</em>",
        "sections": "Manage <em>your</em> containerized <em>environment</em>",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " a complete picture of <em>your</em> Kubernetes <em>environment</em>, <em>New</em> <em>Relic</em> aggregates data from many resources, including Kube-state metrics. <em>New</em> <em>Relic</em>&#x27;s “Kubernetes aware” approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage"
      },
      "id": "603ebf49196a670d96a83d81"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/set-proactive-alerts-align-teams-tools-processes-incident-response": [
    {
      "sections": [
        "Adopt cloud services",
        "1. Identify services and technologies",
        "2. Deploy New Relic Infrastructure",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "Tip",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD pipeline integration",
        "8. AWS Lambda Monitoring"
      ],
      "title": "Adopt cloud services",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "4a8e675e4231295287e69402c8c5ff9b05a6103b",
      "image": "https://docs.newrelic.com/static/4159294d05ee078268a7b287af99a72f/c1b63/adopt_cloud.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/adopt-cloud-services/",
      "published_at": "2021-06-09T16:40:24Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've recently completed your cloud migration, have been using cloud-based services for a while, or have always been in the cloud, you may find yourself deploying modern, cutting-edge technologies and services. It's important to develop the ability to adopt new services easily and with confidence; innovation never stops for companies operating in the cloud, and a company's willingness to embrace new technology can give it a major competitive differentiator. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate, for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions. They may be cloud-based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations, you want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services. This allows your team to deploy faster, to adopt new services with confidence, to make better business decisions, and in general to expand its technology horizons. Here are the steps to using the New Relic Platform to monitor your modern technologies and cloud services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies and new services that might impact your organization's application environment. 2. Deploy New Relic Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified in Step One so that you can monitor your cloud services. If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations As you integrate new cloud services, you can use New Relic to monitor and report data about these services; giving you a single, comprehensive overview of your entire architecture. To configure cloud service integrations, link your Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP) service provider account with New Relic. 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of an Insights dashboard with data about vendors, technologies, services, instances, and other important details for DevOps teams. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all changes to a system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all AWS Elastic Load Balancing (ALB) systems for the ALB monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD pipeline integration It's important to track deployments and the impact that code and infrastructure changes have on your end-user experience. New Relic APM deployment markers allow you to record deployments for each application. A deployment marker is an event indicating that a deployment happened. You can pair markers with metadata from your source code management (SCM) system ( including user IDs, revisions, and change logs.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root causes of immediate, long-term, or gradual degradations in your applications. Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment, as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible Puppet 8. AWS Lambda Monitoring New Relic One features an updated APM agent that is highly optimized from a cost and time perspective for ephemeral Lambda functions. Enable New Relic monitoring of AWS Lambda to to assess invocations, error rate, function duration, cold starts, and more. You can also take advantage of New Relic's Infrastructure integration with Lambda for additional reporting capabilities.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.46812,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adopt <em>cloud</em> services",
        "sections": "2. Deploy <em>New</em> <em>Relic</em> Infrastructure",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " the <em>New</em> <em>Relic</em> Platform to monitor <em>your</em> modern technologies and <em>cloud</em> services: 1. Identify services and technologies Determine the components you need to monitor by answering the following questions: What <em>cloud</em>-based applications do I have? What are the underlying <em>cloud</em>-based services, technologies"
      },
      "id": "603ebf09e7b9d2071a2a0806"
    },
    {
      "sections": [
        "Iterate and measure impact: Track metrics before and after deployments",
        "Prerequisite",
        "1. Integrate measurements into your development process",
        "2. Add automated deployment markers",
        "3. Test your pipeline with Infrastructure"
      ],
      "title": "Iterate and measure impact: Track metrics before and after deployments",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "64fab5d31ae90da92debca9bc0eb802ebe731c2b",
      "image": "https://docs.newrelic.com/static/ad513b871bf0ddd2b1ae654b1bb93a88/d2c2a/APM_Deployments_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/iterate-measure-impact-track-metrics-after-deployments/",
      "published_at": "2021-06-09T18:57:08Z",
      "updated_at": "2021-05-15T21:31:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Proper instrumentation gives teams full visibility into the impact of the changes they make in a system. Capturing tangible, measurable metrics from before and after each change allows teams to optimize changes in isolation and reduce the impact to other work happening in the system. Prerequisite Before starting this tutorial, complete the Establish objectives and baselines. 1. Integrate measurements into your development process With appropriate measurements incorporated into all phases of your development cycle, you can surface errors and performance issues before your customers uncover them. As your application teams plan their work, use your KPI dashboards in daily stand-ups and other planning meetings to analyze necessary debugging work, assess whether recent deployments were successful, and prioritize other work efforts. When development and operations teams use dashboards during planning and discussions, they ensure that they're consistently incorporating feedback about customer experiences and reliability risks into their development efforts. For proper testing, ensure that instrumentation in your pre-production environments is in parity with your production environments. Use dashboards to compare the environments and verify that the code and infrastructure changes you make across them are correct, and eliminate any anomalies before pushing code to production. Beyond using instrumentation to measure software performance, also use it to analyze team efficiency. For example, send Alerts data to Insights and use NRQL and external integrations to calculate mean time to repair (MTTR) by subtracting the difference in event timestamps as the current state of each event changes from OPEN to ACKNOWLEDGED to CLOSED. Or push events into Insights from a source code management (SCM) system like GitHub, and calculate the amount of time it takes a code change to go live by comparing the timestamp of a commit event to that of a deploy event. Plotted over time, this could become a KPI in a DevOps transformation. 2. Add automated deployment markers It's important to track deployments and the impact code and infrastructure changes have on your end-user experience. Using deployment markers in New Relic APM, you can record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (for example, the user, revision, or change-log). APM displays a vertical line, or “marker,” on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. one.newrelic.com > APM > (select an app) > Monitoring > Overview APM also provides a chronological list of deployments of your application. Additional metrics, such as error rate and Apdex from the time of the deployment, are available as well. one.newrelic.com > APM > (select an app) > Events > Deployments Tracking deployments is a valuable way to determine the root cause of immediate, long-term, or gradual degradations in your application. New Relic recommends that you make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test your pipeline with Infrastructure An important part of optimizing your cloud native environment is a making a cultural shift toward smaller, more frequent changes to your code and infrastructure. After you complete the first two steps of this tutorial, begin to test and gather appropriate performance insights about your deployment pipeline to more clearly understand the impact of the changes you make. Code changes should be as small as possible in terms of the number of lines of code and source files you change. Changes should also involve as few team members as possible. This makes it much easier to identify issue owners and determine root causes if errors occur. Similarly, infrastructure changes should also have as small a footprint as possible to minimize the number of applications affected by each change. New Relic Infrastructure helps you see when an infrastructure change has caused a spike in issues, as shown in the following example: one.newrelic.com > Infrastructure > Hosts For cloud infrastructure changes or larger code changes, consider using a blue/green deployment strategy. APM supports multiple app names, which is a good fit for this model. To implement this strategy: Deploy a version of your application to existing infrastructure using a rollup app name that signifies it as the “blue” version (or control version). Deploy a new version of your application to a subset of the infrastructure (or an alternate set of infrastructure) with a rollup name that signifies this as the “green” version (or experimental version). Ensure that traffic is routed appropriately between both versions. Compare established KPI dashboards of both versions against one another. Optimize the new version accordingly to meet your KPI targets. When you're satisfied with the application's performance, deploy the new version across your infrastructure using the original app name, and consider this the new baseline for any future changes you'll make to the application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.46812,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Integrate measurements into <em>your</em> development process",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " integrations or plugins available to help automate this: Chef (see newrelic_deployment) Jenkins Ansible Puppet 3. Test <em>your</em> pipeline with Infrastructure An important part of optimizing <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em> is a making a cultural shift toward smaller, more frequent changes to <em>your</em> code"
      },
      "id": "603ebdad196a67b212a83ded"
    },
    {
      "sections": [
        "Manage your containerized environment",
        "1. Update to latest Infrastructure agent and enable Kubernetes integration",
        "2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health",
        "3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment",
        "4. Monitor applications running in Kubernetes with APM",
        "Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics",
        "6. Bring teams together with dashboards tailored to specific business use cases and KPIs",
        "Learn more"
      ],
      "title": "Manage your containerized environment",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "71ba4468ed7d078021ccd705c78e72cfb5e92b5f",
      "image": "https://docs.newrelic.com/static/f744b0e1c8aac86e63f46a5798df58ae/c1b63/cont_environment01.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/manage-your-containerized-environment/",
      "published_at": "2021-06-09T18:56:01Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Widespread adoption of containers has changed the way applications are written and deployed. Container orchestration technologies such as Kubernetes are making it easier for teams to schedule, deploy, and manage their containerized applications. But challenges still exist that require teams to rethink their environment and application monitoring strategies: Challenge 1: Containers are ephemeral by nature. Knowing the containers or pod or node (host) where the application is currently running is not necessarily an indication of where it was running 5, 15, or 30 minutes ago when the issue occurred. Containers are deployed in dynamic, constantly evolving environments that require a modern monitoring approach. Challenge 2: Often, organizations are adopting containers as they break down monolithic applications into multiple microservices. This new approach introduces new complexity to the system and the sheer scale and dimensionality of containers is hard to conceptualize in an easy-to-understand format. Challenge 3: Delivering a differentiated end-user experience is a key initiative for all organizations, and containers are being adopted to help organizations release better software, faster. But with this tremendous opportunity also comes risk, because every time a new container is deployed, the cluster is impacted. Organizations need context into how infrastructure changes impact the application stack, and how changes to both the infrastructure and application stack affect the end-user experience. Getting all of this data in real-time in a digestible format is a significant challenge in distributed, containerized environments. The New Relic platform offers customers both ease of use and ease of deployment for containerized Kubernetes environments. With a few clicks you have the data and confidence to move forward intelligently. These six steps illustrate how to use the New Relic platform to manage your containers and how they are scheduled: 1. Update to latest Infrastructure agent and enable Kubernetes integration To get started, you'll need to deploy the latest Infrastructure agent onto a Kubernetes cluster with a DaemonSet. Leveraging DaemonSets is vital in dynamic, containerized environments, because when a new node is deployed or the cluster scales up or down, the DaemonSet ensures the New Relic agent is running on these new nodes. In addition, to build a complete picture of your Kubernetes environment, New Relic aggregates data from many resources, including Kube-state metrics. New Relic's “Kubernetes aware” approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage the Kubernetes cluster explorer to further explore cluster performance and health Once the Kubernetes integration is installed, you can access the New Relic Kubernetes cluster explorer, which offers a differentiated, intuitive way to visualize the health and performance of Kubernetes clusters. It applies advanced capabilities to filter, sort, and search for Kubernetes entities, helping teams understand the relationships and dependencies within an environment. It's a powerful and innovative solution to the challenges associated with running Kubernetes at massive scale. 3. Navigate out-of-the-box dashboards to analyze historical metrics of your Kubernetes environment Above and beyond what the cluster explorer provides, New Relic provides out-of-the-box dashboards that allow customers to analyze performance and operating metrics of their Kubernetes environments. Key metrics include the number of containers, resource consumption, pending pods, out of memory (OOM) kills, and stuck pods. These metrics may be particularly relevant to Kubernetes administrators who require reliable, up-to-date information on resource consumption against pre-set thresholds. Access these dashboards directly from the cluster explorer where you can first visually explore your cluster and then use filters to drive down into specific dashboards that match that filter. 4. Monitor applications running in Kubernetes with APM One advantage of New Relic's Infrastructure agent being application-aware is that the cluster explorer is automatically aware of New Relic agents that are deployed on new applications. To fully exploit these capabilities, we recommend monitoring all existing and future containerized applications running in Kubernetes by installing the APM agent on them. Starting again from the cluster explorer, you can dig into what's happening in your applications from the context of the Kubernetes cluster. This gives you the ability to intuitively correlate your infrastructure and applications and begin analytically troubleshooting across the stack. Cloud-native applications use many interconnected services. The cluster explorer will correlate the application and link to its distributed tracings. In complex systems the ability to trace and identify pathways and latency bottlenecks are not optional. Correlate your Kubernetes back-end with end-user experience using Browser and Synthetics If you are orchestrating an end-user facing application, New Relic allows you to view the end-to-end impact your infrastructure and services have on your customer experience. We tackle end-user management in two ways: With Synthetics, you can track application availability and performance from a wide variety of global locations visualizing if customer experience is impacted due to geography. With Browser and Mobile, we recommend monitoring such KPIs as load time and availability. Marrying end-user data with metrics and dashboards provided by the cluster explorer enables operators, administrators, app developers, and business personnel to align on common initiatives. 6. Bring teams together with dashboards tailored to specific business use cases and KPIs With dashboards, you can build custom visualizations from an end-to-end service perspective to analyze the cluster, pods, application, and end-user experience in one clean visual display. By using New Relic's dashboards, cross-organizational teams can align to share a common language and single source of truth, helping them make better decisions and drive business impact. The top two rows of this sample dashboard visualize various aspects of a Kubernetes environment while the third row illustrates valuable information regarding the applications that are deployed to this cluster. The bottom row displays the end-user viewpoint. Learn more Actively, where we enable availability monitoring for one user in one location with Synthetics Passively, where you can analyze a macro view of all users across all geographies with Browser monitoring and Mobile monitoring. Bring teams together with dashboards tailored to specific business use cases and KPIs Kubernetes Monitoring Guide",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.56757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>your</em> containerized <em>environment</em>",
        "sections": "Manage <em>your</em> containerized <em>environment</em>",
        "tags": "<em>Optimize</em> <em>your</em> <em>cloud</em> <em>native</em> <em>environment</em>",
        "body": " a complete picture of <em>your</em> Kubernetes <em>environment</em>, <em>New</em> <em>Relic</em> aggregates data from many resources, including Kube-state metrics. <em>New</em> <em>Relic</em>&#x27;s “Kubernetes aware” approach makes it easy for Kubernetes to do its job as an orchestrator without missing a single node, cluster, or event. 2. Leverage"
      },
      "id": "603ebf49196a670d96a83d81"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/create-application-baselines": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-06-08T22:24:01Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.80194,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-06-09T19:00:10Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where I’m Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps team’s auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence “machine-learn” your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.68301,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-06-09T19:02:32Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your application’s performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relic’s reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.63518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/guide-planning-your-cloud-adoption-strategy": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-06-08T22:24:01Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.80193,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-06-09T19:00:10Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where I’m Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps team’s auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence “machine-learn” your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.683,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-06-09T19:02:32Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your application’s performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relic’s reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.63516,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/identify-application-dependencies-inventory": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-06-08T22:24:01Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.80193,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-06-09T19:00:10Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where I’m Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps team’s auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence “machine-learn” your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.683,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-06-09T19:02:32Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your application’s performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relic’s reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.63516,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/identify-issues-roadblocks": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-06-08T22:24:01Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.80191,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-06-09T19:00:10Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where I’m Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps team’s auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence “machine-learn” your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.68298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-06-09T19:02:32Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your application’s performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relic’s reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.63515,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-customer-experience": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-06-08T22:24:01Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.80191,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-06-09T19:00:10Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where I’m Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps team’s auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence “machine-learn” your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.68298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-06-09T19:02:32Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your application’s performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relic’s reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.63515,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-06-08T22:24:01Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.8019,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-06-09T19:02:32Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your application’s performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relic’s reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.63513,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    },
    {
      "sections": [
        "Prioritize migration order",
        "1. Identify components",
        "2. Instrument applications",
        "3. Instrument hosts",
        "Tip",
        "4. Identify and track issues",
        "5. Create baselines",
        "6. Determine next steps",
        "Use service maps to find connections",
        "Use the New Relic Explorer to analyze health",
        "Use the Inventory page to identify components",
        "Expert tips for organizing your data"
      ],
      "title": "Prioritize migration order",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "f728804bace8dbe4a8176df74986fbf094e1ba62",
      "image": "https://docs.newrelic.com/static/9c3844bf72e803766bcb7b5146bf279b/c1b63/screen-service-maps_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/prioritize-migration-order/",
      "published_at": "2021-06-09T19:02:32Z",
      "updated_at": "2021-03-30T01:17:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you migrate any applications to the cloud, verify that the applications and their underlying server infrastructures are candidates for migration. When you instrument every layer of an application’s architecture, you get end-to-end visibility and are able to identify additional cloud migration risks or dependencies. Such analysis provides a more focused cloud migration priority list. 1. Identify components Create a list all of applications, services, and their underlying server infrastructures in your application portfolio that you want to migrate to the cloud. 2. Instrument applications Before you install any New Relic agents, review the compatibility and requirements for New Relic agents. Then, install the agents in your environment. After installing the agents, review the architecture of all the applications that you instrumented with an agent. Take note of the host for each tier of the application stack (database, application, web server, etc.), as you will install Infrastructure agents on each of those hosts in the next step. 3. Instrument hosts After reviewing the requirements for New Relic Infrastructure, follow the instructions for installing the Infrastructure agent on all hosts in your application stack: Install for Linux Install for Windows Server Install on AWS Elastic Beanstalk Install with a configuration management tool Also, in order to report data to New Relic, Infrastructure agents must have outbound access to certain domains and ports. If your system requires a proxy to connect to these domains, use the proxy setting. To gain extended visibility into applications that your code depends on, deploy on-host integrations. New Relic supports several commonly used application components, such as MySQL, Apache, and NGINX. Tip If you discover any applications, dependencies, or server infrastructure that you did not include in your list of components, instrument them with New Relic by installing the appropriate agents before moving forward. 4. Identify and track issues After installing, New Relic APM and Browser show you error events, error metrics, and detailed error traces for your applications. If an error or unhandled exception happens, the data appears on the Browser JavaScript errors page and the APM Error analytics page. From these pages, you can quickly troubleshoot runtime errors. Then, further analyze errors by grouping them according to attributes, by filtering them, or by searching for keywords in the event data. Each unhandled exception generates a transaction error event in Insights, and the dashboards are updated in real time. Event data is a record of a single event at a particular moment in time and consists of default attributes, like a timestamp, and an event type. You can also add custom attributes to provide more context. Tip Once you start capturing JavaScript errors as events in Insights, set up NRQL alerting so you can stay on top of your error data. 5. Create baselines One of the benefits of using APM while you are planning your cloud migration is that you get a deeper understanding of your application’s baseline. A baseline is a measurement of the current performance and availability of your application, which you then use as a comparison after your migration to validate your business case. 6. Determine next steps Use the following New Relic features to determine the next steps for your application: Use service maps to find connections After you install the APM agent, use service maps to get a full view into your application’s architecture. service maps allow you to identify any external services, web services, databases, or APIs that the application might be connecting to. Once you have an application node on the map, you can add its connections to the map, including New Relic Browser apps, databases, or external services (for example, third-party APIs). Every node you add is automatically connected to the map, so you see the shape of your application’s architecture emerge. one.newrelic.com > APM > (select an application) > Service map: Use service maps to understand the connections between different parts of your architecture. Use the New Relic Explorer to analyze health Use the explorer to see a high level overview of your services, which includes applications. Select the service to view a summary of your instrumented applications. You can then select dependencies to view the underlying infrastructure. To view this information at a glance, use the New Relic Explorer by going to one.newrelic.com > Explorer. From the explorer, you can: Sort applications by labels: Name Response Time Throughput Error Rate Identify owners Identify which users will be affected by a migration Discover application architecture details, such as the number of tiers and data sources Discover any dependencies Extract operational costs of each application or group one.newrelic.com > Explorer: The explorer allows you to see an overview of your services. Use the Inventory page to identify components Infrastructure's inventory page gives you visibility into the software packages installed on your servers. New Relic Infrastructure reports detailed information about a system’s per-host configuration, including system modules, configuration files, metadata, packages, services, user sessions, and more. The inventory page provides a real-time, filterable, searchable view into each host’s configuration. Use this data to identify various components of the applications you want to migrate. one.newrelic.com > Infrastructure > Inventory: Use the filter and search functions to find information for specific items across all your hosts. Analyze these criteria for each of your apps to determine the next steps for your migration: Should you move your app to a new host or platform, or re-factor its code before migrating it? Should you retire the application without moving it to the cloud? By using the information that New Relic provides, you are better equipped to create a prioritized list of applications ready for cloud migration. Expert tips for organizing your data In APM, use labels to group the instrumented applications into meaningful categories like environments, functional areas, technologies, business units. Or, you can separate them for development or operational teams. In Infrastructure, use filter sets to organize hosts into cluster, environment, role, or any Infrastructure attribute based on criteria that you define.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.66818,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Use the <em>New</em> <em>Relic</em> Explorer to analyze health",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " to determine the next steps for your migration: Should you move your app to a <em>new</em> host or platform, or re-factor its code before migrating it? Should you retire the application without moving it to the <em>cloud</em>? By using the information that <em>New</em> <em>Relic</em> provides, you are better equipped to create a prioritized list"
      },
      "id": "604458bd64441f87e0378ebf"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/perform-migration-acceptance-testing": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-06-08T22:24:01Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.8019,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-06-09T19:00:10Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where I’m Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps team’s auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence “machine-learn” your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.68297,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-06-09T19:02:32Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your application’s performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relic’s reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.63513,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/prioritize-migration-order": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-06-08T22:24:01Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.8019,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-06-09T19:00:10Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where I’m Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps team’s auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence “machine-learn” your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.68297,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-06-09T19:02:32Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your application’s performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relic’s reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.63513,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-06-08T22:24:01Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.80188,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-06-09T19:00:10Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where I’m Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps team’s auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence “machine-learn” your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.68295,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Prioritize migration order",
        "1. Identify components",
        "2. Instrument applications",
        "3. Instrument hosts",
        "Tip",
        "4. Identify and track issues",
        "5. Create baselines",
        "6. Determine next steps",
        "Use service maps to find connections",
        "Use the New Relic Explorer to analyze health",
        "Use the Inventory page to identify components",
        "Expert tips for organizing your data"
      ],
      "title": "Prioritize migration order",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "f728804bace8dbe4a8176df74986fbf094e1ba62",
      "image": "https://docs.newrelic.com/static/9c3844bf72e803766bcb7b5146bf279b/c1b63/screen-service-maps_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/prioritize-migration-order/",
      "published_at": "2021-06-09T19:02:32Z",
      "updated_at": "2021-03-30T01:17:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you migrate any applications to the cloud, verify that the applications and their underlying server infrastructures are candidates for migration. When you instrument every layer of an application’s architecture, you get end-to-end visibility and are able to identify additional cloud migration risks or dependencies. Such analysis provides a more focused cloud migration priority list. 1. Identify components Create a list all of applications, services, and their underlying server infrastructures in your application portfolio that you want to migrate to the cloud. 2. Instrument applications Before you install any New Relic agents, review the compatibility and requirements for New Relic agents. Then, install the agents in your environment. After installing the agents, review the architecture of all the applications that you instrumented with an agent. Take note of the host for each tier of the application stack (database, application, web server, etc.), as you will install Infrastructure agents on each of those hosts in the next step. 3. Instrument hosts After reviewing the requirements for New Relic Infrastructure, follow the instructions for installing the Infrastructure agent on all hosts in your application stack: Install for Linux Install for Windows Server Install on AWS Elastic Beanstalk Install with a configuration management tool Also, in order to report data to New Relic, Infrastructure agents must have outbound access to certain domains and ports. If your system requires a proxy to connect to these domains, use the proxy setting. To gain extended visibility into applications that your code depends on, deploy on-host integrations. New Relic supports several commonly used application components, such as MySQL, Apache, and NGINX. Tip If you discover any applications, dependencies, or server infrastructure that you did not include in your list of components, instrument them with New Relic by installing the appropriate agents before moving forward. 4. Identify and track issues After installing, New Relic APM and Browser show you error events, error metrics, and detailed error traces for your applications. If an error or unhandled exception happens, the data appears on the Browser JavaScript errors page and the APM Error analytics page. From these pages, you can quickly troubleshoot runtime errors. Then, further analyze errors by grouping them according to attributes, by filtering them, or by searching for keywords in the event data. Each unhandled exception generates a transaction error event in Insights, and the dashboards are updated in real time. Event data is a record of a single event at a particular moment in time and consists of default attributes, like a timestamp, and an event type. You can also add custom attributes to provide more context. Tip Once you start capturing JavaScript errors as events in Insights, set up NRQL alerting so you can stay on top of your error data. 5. Create baselines One of the benefits of using APM while you are planning your cloud migration is that you get a deeper understanding of your application’s baseline. A baseline is a measurement of the current performance and availability of your application, which you then use as a comparison after your migration to validate your business case. 6. Determine next steps Use the following New Relic features to determine the next steps for your application: Use service maps to find connections After you install the APM agent, use service maps to get a full view into your application’s architecture. service maps allow you to identify any external services, web services, databases, or APIs that the application might be connecting to. Once you have an application node on the map, you can add its connections to the map, including New Relic Browser apps, databases, or external services (for example, third-party APIs). Every node you add is automatically connected to the map, so you see the shape of your application’s architecture emerge. one.newrelic.com > APM > (select an application) > Service map: Use service maps to understand the connections between different parts of your architecture. Use the New Relic Explorer to analyze health Use the explorer to see a high level overview of your services, which includes applications. Select the service to view a summary of your instrumented applications. You can then select dependencies to view the underlying infrastructure. To view this information at a glance, use the New Relic Explorer by going to one.newrelic.com > Explorer. From the explorer, you can: Sort applications by labels: Name Response Time Throughput Error Rate Identify owners Identify which users will be affected by a migration Discover application architecture details, such as the number of tiers and data sources Discover any dependencies Extract operational costs of each application or group one.newrelic.com > Explorer: The explorer allows you to see an overview of your services. Use the Inventory page to identify components Infrastructure's inventory page gives you visibility into the software packages installed on your servers. New Relic Infrastructure reports detailed information about a system’s per-host configuration, including system modules, configuration files, metadata, packages, services, user sessions, and more. The inventory page provides a real-time, filterable, searchable view into each host’s configuration. Use this data to identify various components of the applications you want to migrate. one.newrelic.com > Infrastructure > Inventory: Use the filter and search functions to find information for specific items across all your hosts. Analyze these criteria for each of your apps to determine the next steps for your migration: Should you move your app to a new host or platform, or re-factor its code before migrating it? Should you retire the application without moving it to the cloud? By using the information that New Relic provides, you are better equipped to create a prioritized list of applications ready for cloud migration. Expert tips for organizing your data In APM, use labels to group the instrumented applications into meaningful categories like environments, functional areas, technologies, business units. Or, you can separate them for development or operational teams. In Infrastructure, use filter sets to organize hosts into cluster, environment, role, or any Infrastructure attribute based on criteria that you define.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.66818,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Use the <em>New</em> <em>Relic</em> Explorer to analyze health",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " to determine the next steps for your migration: Should you move your app to a <em>new</em> host or platform, or re-factor its code before migrating it? Should you retire the application without moving it to the <em>cloud</em>? By using the information that <em>New</em> <em>Relic</em> provides, you are better equipped to create a prioritized list"
      },
      "id": "604458bd64441f87e0378ebf"
    }
  ],
  "/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/validate-cloud-improvements": [
    {
      "sections": [
        "Modern and cloud services",
        "1. Identify applications, cloud services, infrastructure, and technologies",
        "2. Deploy Infrastructure",
        "Tip",
        "3. Configure cloud integrations",
        "4. Track data on your dashboards",
        "AWS EC2 monitoring integration dashboard",
        "Azure VMs monitoring integration dashboard",
        "GCP Compute Engine monitoring integration dashboard",
        "Example modern and cloud services dashboard",
        "5. Add alerts for cloud-based metrics",
        "6. Set up additional monitoring",
        "7. CI/CD Pipeline integration"
      ],
      "title": "Modern and cloud services ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "824d892c1faf24fb7eb5bf6e205571446261f699",
      "image": "https://docs.newrelic.com/static/425a652fcbd53bbbea3454793047bd01/8c557/ModernAndCloudServiceDashboardNew.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/cloud-adoption/modern-cloud-services/",
      "published_at": "2021-06-08T22:24:01Z",
      "updated_at": "2021-05-16T01:21:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Whether you've just completed your cloud migration, have been using cloud based services for awhile, or have always been in the cloud, you may find yourself deploying or running technologies and services that are new and modern. These modern technologies could be container solutions such as Docker, Kubernetes, and Amazon AWS ECS or Fargate for example. Or they could be serverless services such as AWS Lambda, Microsoft Azure, or Google Cloud Platform Functions, cloud based databases, or any number of cloud services that abstract the service away from an operations-maintained infrastructure. In these situations you still want to monitor, query, and alert on the performance and usage metrics for both modern technologies and cloud-based services, allowing for faster deployments, the ability to adopt new services, better business decisions, and to expand horizons. This doc demonstrates how to use the New Relic Platform to monitor your modern technologies and cloud services. 1. Identify applications, cloud services, infrastructure, and technologies Determine the components you need to monitor by answering the following the questions: What cloud-based applications do I have? What are the underlying cloud-based services, technologies, and infrastructure supporting those applications? When you have a full understanding of your architecture, you reduce the possibility of missing dependencies during your migration. 2. Deploy Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts you identified so you can start to monitor your cloud services. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. 3. Configure cloud integrations Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. To get started configuring cloud service integrations, link your cloud service provider account with New Relic, depending on whether you use Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). 4. Track data on your dashboards New Relic Infrastructure integrations auto-populate dashboards with metrics from cloud providers like AWS, Azure, and GCP so you can track the data that is critical to your cloud adoption success. Tip If you adopt a hybrid cloud of multiple cloud providers, New Relic can provide a holistic perspective that is agnostic to cloud providers. AWS EC2 monitoring integration dashboard In this default dashboard for the AWS EC2 monitoring integration, New Relic captures metrics for EC2 instances per region, instance state, and instance type. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Amazon Web Services: View AWS EC2 data on the default dashboard for the AWS EC2 monitoring integration. Azure VMs monitoring integration dashboard The default Azure virtual machine integration dashboard shows data for VM sizes, VMs per region, and VMs per resource group. one.newrelic.com > Infrastructure > Integrations > Microsoft Azure: View Azure virtual machine data on the default dashboard for the Azure VMs monitoring integration. GCP Compute Engine monitoring integration dashboard In this default dashboard for the Google Cloud Platform, New Relic captures metrics for instances per zone, instance status, firewall dropped packets, reserved cores, and disk throttled operations. The dashboard also shows inventory for different software packages and configurations that are installed on those instances. one.newrelic.com > Infrastructure > Integrations > Google Cloud Platform: View GCP Compute Engine data on the default dashboard for the GCP Compute Engine monitoring integration. Example modern and cloud services dashboard In this example dashboard, three different cloud vendors, modern technologies, cloud services, infrastructure instance locations, and DevOps widgets are combined for an overall view. one.newrelic.com > Dashboards: Here is an example of a dashboard with data about vendors, technologies, services, instances, and other important details. 5. Add alerts for cloud-based metrics When monitoring cloud-based services, it is essential to keep track of all the changes happening with the system by alerting on them. Integrations with New Relic Infrastructure allow you to create alerts on the metrics that are the most important to you. Here is an example of a baseline alert that will notify you based on the number of requests received on all ALB systems for the AWS Elastic Load Balancing (ALB) monitoring integration: alerts.newrelic.com > Alert policies > (selected policy) > Alert conditions: Create a NRQL baseline alert to monitor the number of requests received your ALB systems. 6. Set up additional monitoring In addition to monitoring cloud services, you can deploy New Relic APM, Browser, Mobile, and Synthetics to gain full-stack visibility into all of the components of your applications: Use New Relic APM to report application-tier performance metrics. Use New Relic Browser to report front-end web metrics. Use New Relic Mobile to report front-end mobile app metrics. Use New Relic Synthetics to monitor websites, critical business transactions, and API endpoints. 7. CI/CD Pipeline integration It's important to track deployments and how the impact of the code and infrastructure changes you make affect customer experience. New Relic APM's deployment markers feature allows you to record deployments for each application. A deployment marker is an event indicating that a deployment happened, and it's paired with metadata available from your SCM system (such metadata typically includes the user, revision, change log, etc.). APM displays a vertical line, or marker, on charts and graphs at the deployment event's timestamp. When you hover over the line, APM displays the associated metadata for that deployment. Tracking deployments is an invaluable way to determine the root cause of immediate, long-term, or gradual degradations in your application. Tip Recommendation: Make POST requests to the New Relic REST API as the final step of a successful CI/CD deployment as described in the API documentation. The following tools have integrations or plugins available to help automate CI/CD deployments: Chef (see newrelic_deployment) Jenkins Ansible",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.80188,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Modern and <em>cloud</em> services ",
        "sections": "Modern and <em>cloud</em> services",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": ", and GCP so you can track the data that is critical to your <em>cloud</em> <em>adoption</em> success. Tip If you <em>adopt</em> a hybrid <em>cloud</em> of multiple <em>cloud</em> providers, <em>New</em> <em>Relic</em> can provide a holistic perspective that is agnostic to <em>cloud</em> providers. AWS EC2 monitoring integration dashboard In this default dashboard"
      },
      "id": "60440f13e7b9d20f275799ca"
    },
    {
      "sections": [
        "Optimize your cloud spend",
        "1. Deploy the New Relic Infrastructure agent",
        "2. Create dashboard charts for cloud performance",
        "3. Configure the Amazon AWS integration",
        "4. Set up billing budgets in AWS",
        "5. Add cloud spend and budget widgets to Insights dashboard",
        "6. Create dashboards for every level of your organization",
        "Dashboards for developers",
        "Dashboards for DevOps",
        "Dashboards for executives",
        "7. Set up alerts",
        "Configure a baseline query using the forecasted amount"
      ],
      "title": "Optimize your cloud spend",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "7a0ac1127aee1ef0668e8aad47af8813f0ed7259",
      "image": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/images/NRQL-Alert.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/optimize-your-cloud-spend/",
      "published_at": "2021-06-09T19:00:10Z",
      "updated_at": "2021-05-15T23:11:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Now that you are using cloud-hosted infrastructure and services, it is important to start looking very early and very closely at your cloud spend: Make sure that your assumptions about your cloud spend are playing out as expected. Quickly catch and correct any unexpected spikes in spending. Start fine-tuning the usage of your cloud-based resources. For example, if you have a set of 20 instances all running at 10% CPU, you can think about using smaller instances or consolidating more work onto those instances. This kind of thinking about your cloud spend helps you optimize and save money quickly. New Relic can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your cloud spend data, just like you can with any data New Relic can help you collect. Using the New Relic applied intelligence platform is a great way to help you learn about your cloud spending or about any of your performance data. 1. Deploy the New Relic Infrastructure agent Review the requirements for the New Relic Infrastructure agent and follow the documentation for instructions on installing the agent. After you install the Infrastructure agent on your hosts, you immediately have access to the broad spectrum of metrics that the agent receives automatically. Then, you can set up the cloud integration to start collecting billing information. 2. Create dashboard charts for cloud performance New Relic Dashboards is the product that you use to write powerful custom queries about your data, and then visualize the results in charts that you collect on a dashboard. You can also feed the results of your dashboard queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. Include charts for various Infrastructure metrics related to performance and usage; for example: CPU Memory Disk Database You may also want to include charts that represent the application using this cloud infrastructure. In this way you can correlate the cloud infrastructure performance with that of the application. As you right-size your cloud infrastructure, you will want to monitor application performance to make sure you are achieving any targets. 3. Configure the Amazon AWS integration New Relic Infrastructure comes with several types of integrations, including Amazon Web Services (AWS), Microsoft Azure, and on-host integrations. This tutorial focuses on the AWS Billing integration. First, configure the integration with your AWS account, and then you can set up the AWS Billing integration. 4. Set up billing budgets in AWS The Amazon AWS Billing integration requires some additional configuration on the AWS side. Specifically, you need to go into your AWS Billing dashboard and set up Budgets. Our documentation and the blog post Show Me (Where I’m Spending) the Money! AWS Billing Comes to New Relic Insights provide walk-throughs of this process. When creating Budgets, be sure to: Fill in an application name. Decide whether you are doing cost or service-based budgeting. Decide if your budget is open-ended or has a definite ending date. 5. Add cloud spend and budget widgets to Insights dashboard New Relic Insights is the product that you use to write powerful custom queries about your data, and then visualize the results in widgets that you collect on a dashboard. You can also feed the results of your Insights queries directly into New Relic Alerts, where you can get notifications on any deviations that you specify. 6. Create dashboards for every level of your organization Whether you are a developer, in DevOps, or an executive, having information about your cloud spend can help you optimize your cloud environment. Here are a few ways dashboards can help at each level of your organization: Dashboards for developers Understanding how much applications cost to run helps developers properly configure applications to use more efficient services. For example, could developers save cloud costs using Amazon AWS Lambda or properly sized instances instead of randomly selecting an instance? Dashboards for DevOps Monitoring application costs allows operators to catch possible overruns due to misconfigured services. For example, is the DevOps team’s auto-scaling configuration not scaling down properly? Are they spending money on instances that are not being used? Dashboards for executives An overall view of both forecasted and actual cloud spends for individual applications on a per region basis, as well as total costs, helps executives make better business decisions. Use New Relic to keep control of your cloud spending costs, and get your teams alerted when you go over your budgets. 7. Set up alerts After you write queries on your data in Insights, you can easily use them to create alert conditions. New Relic gives you the ability to write baseline queries against your data. A baseline query is a query that you write without setting hard limits on the results and instead let New Relic Applied Intelligence “machine-learn” your performance data. New Relic alerts you when you go too far outside of your baseline numbers. Configure a baseline query using the forecasted amount Configuring a baseline query using a forecasted amount is a great starting point for monitoring any cloud budget, as you grow to understand what your cloud spend will be over time. New Relic notifies you if something spikes beyond your forecasted trend. That query looks like this: SELECT latest(`provider.forecastedAmount`) FROM FinanceSample WHERE provider = 'BillingBudget' and `provider.budgetName` = 'NAME_OF_YOUR_CLOUD_BUDGET' Copy When you create a baseline query and alert on it, you decide how restrictively Applied Intelligence should analyze your data using a simple slider and visualization based on your recent performance. The slider either increases or decreases the gray band around your budget threshold (the blue line): alerts.newrelic.com > Alert policies > (select a policy) > Alert conditions: Create alert conditions based on your NRQL queries and Insights data. This example would have resulted in zero violations based on recent data, and that is exactly what you are looking for. However, if that blue line spikes up out of the gray band, New Relic notifies you. For more detailed information about creating, managing, and using alerts, view these New Relic University tutorials: Intro to alerting Alert policies Alerting incident lifecycle Notification channels",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.68295,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Optimize your <em>cloud</em> spend",
        "sections": "1. Deploy the <em>New</em> <em>Relic</em> Infrastructure agent",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": " quickly. <em>New</em> <em>Relic</em> can help you monitor all this. From a data perspective, it is really just another metric that our platform can collect for you. As with any other metric, you can visualize, report, and alert on your <em>cloud</em> spend data, just like you can with any data <em>New</em> <em>Relic</em> can help you collect. Using"
      },
      "id": "60445c4928ccbcd0132c6094"
    },
    {
      "sections": [
        "Refactor your applications",
        "1. Deploy monitoring",
        "Cloud-based integrations",
        "2. Set deployment markers",
        "3. Establish baselines",
        "4. Refactor your applications",
        "5. Create dashboards to track refactoring your applications",
        "6. Create comparison dashboards",
        "For more help"
      ],
      "title": "Refactor your applications",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "fcea859e043f6ff33898803636b9a7a6de04508a",
      "image": "https://docs.newrelic.com/static/fc360bb9af89fe16ea8351e90b16ec09/c1b63/screen-deployments-page.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/refactor-your-applications/",
      "published_at": "2021-06-09T19:02:32Z",
      "updated_at": "2021-05-15T22:19:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "At each step of your cloud adoption process, New Relic plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage cloud costs. New Relic can also help you refactor, or re-architect, your software and services when you migrate them to the cloud. One key aspect of refactoring your software is splitting out your components into different services available from your cloud provider. For example, you might move your database component away from a traditional MySQL database to a cloud-hosted solution, like Amazon Relational Database (RDS) services such as DynamoDB or Aurora. If you move to the Azure cloud, you might adopt Azure SQL or Cosmos DB. When you move to solutions like those, you increase your database redundancy and resiliency. If you evaluate your overall ROI properly, you should start to see the cost/benefit ratio taking effect once you complete your refactoring. 1. Deploy monitoring New Relic is a true multi-tenant SaaS solution, meaning New Relic designed the agents to work at every layer of your application stack. To get started, deploy the agents: APM to collect application-tier performance metrics Browser monitoring to collect front-end web metrics Mobile monitoring to collect front-end mobile app metrics Infrastructure to collect host/server metrics Cloud-based integrations As you refactor your application and integrate new cloud services, you can also use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. Cloud-based integrations available through New Relic include Amazon Web Services (AWS) and Microsoft Azure. This tutorial describes a database migration and focuses on APM and Infrastructure. 2. Set deployment markers With New Relic, you can track deployments by setting deployment markers. Deployment tracking lets you quickly see how deployments affect your application’s performance and gauge its performance before and after you refactor. You can view deployments on the Deployments page in APM: rpm.newrelic.com/apm > (selected app) > Events > Deployments: Here is an example of the Deployments page and details about a selected deployment. 3. Establish baselines When you install the APM agent at the application layer, New Relic immediately starts collecting and displaying metrics. Use these metrics to set your pre-migration application baseline. APM agents collect performance metrics about outbound calls to databases. In the Monitoring section of the APM UI, click Databases to see a view of your database metrics. The following shows a database running on MySQL that will be refactored to use DynamoDB after migrating to AWS: one.newrelic.com > APM > (select an app) > Monitoring > Databases: Use this page to view and sort detailed information about database performance. 4. Refactor your applications To take advantage of the cloud, research what services are available from your cloud provider, and then re-architect and uncouple your applications. 5. Create dashboards to track refactoring your applications Apply your KPIs to your baseline measurements to validate cloud improvements, and, ideally, start seeing the impact of moving to the cloud. New Relic’s reporting for database interactions goes much deeper than high-level performance metrics about calls to the database layer in APM. You get access to metrics about slow queries so you can filter by database vendor and cache type. You can also see host and instance details for databases visually within Service Maps and within the context of transaction traces. Because all of your performance metrics are available in New Relic Insights, it is easy to build dashboards to show the performance of your database calls before, during, and after your refactoring in a single unified view. Here is an example of an Insights dashboard for an application that uses DynamoDB and was migrated to AWS: insights.newrelic.com: Build a dashboard that shows the performance of your database calls. 6. Create comparison dashboards To compare both the pre- and post-refactor baselines, create an Insights dashboard that displays the KPIs you baselined. The following dashboard shows the MySQL request query latency as compared with all of the operations for DynamoDB. You can see that, for this example, the request query latency for DynamoDB is too small to even register on the graph. Performance is clearly optimized with this cloud-based database. insights.newrelic.com: Use Insights dashboards to visualize pre- and post-refactor baselines. With APM agents and the integrations New Relic provides, you can measure the effectiveness of refactoring your applications using a broad spectrum of metrics. For more help Explore the New Relic Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.63512,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Cloud</em>-based integrations",
        "tags": "<em>New</em> <em>Relic</em> <em>solutions</em>",
        "body": "At each step of your <em>cloud</em> <em>adoption</em> process, <em>New</em> <em>Relic</em> plays a critical role in helping you establish baselines, prioritize migration steps, validate improvements, and manage <em>cloud</em> costs. <em>New</em> <em>Relic</em> can also help you refactor, or re-architect, your software and services when you migrate them"
      },
      "id": "60445da6e7b9d2bf265799ee"
    }
  ],
  "/docs/new-relic-titanium": [
    {
      "sections": [
        "iOS SDK API guide",
        "Caution",
        "Install the SDK",
        "Automatically instrumented classes and methods",
        "Instrument your Objective-C code",
        "Important",
        "Create and complete interactions",
        "Rename a default interaction",
        "Set a custom application version",
        "Set a custom build identifier",
        "Create custom metrics",
        "Objective-C: Report custom attributes and events",
        "Objective-C: Track custom network requests",
        "Instrument your Swift code",
        "Create and complete Swift interactions",
        "Rename a default Swift interaction",
        "Set a custom application version with Swift",
        "Set a custom build identifier with Swift",
        "Create custom metrics with Swift",
        "Swift: Report custom attributes and events",
        "Swift: Track custom network requests"
      ],
      "title": "iOS SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "API guides"
      ],
      "external_id": "fe6ba3196a927fb8dee72f8bf777461c95f7505c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-sdk-api-guide/",
      "published_at": "2021-06-08T22:43:37Z",
      "updated_at": "2021-06-03T12:15:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the iOS SDK API for New Relic Mobile to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically. Set a custom identifier value with Objective-C or Swift to associate user sessions with analysis events and attributes (iOS SDK version 5.9.0 or higher). Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. Install the SDK Ensure you have your app instrumented with the latest New Relic Mobile SDK by going to one.newrelic.com > Add more data and following the instructions for iOS. This document contains the iOS SDK instrumentation requirements for: Objective C Swift For details about the available methods for custom attributes and events you can send to to New Relic Insights, see the iOS SDK API reference. You can also configure feature flags for: Objective-C Swift Automatically instrumented classes and methods The following methods (for the listed classes and their sub-classes) are already instrumented by New Relic. You do not need to add custom instrumentation to trace them. Classes Methods automatically instrumented by New Relic UIViewController viewDidLoad: viewWillAppear: viewDidAppear: viewWillDisappear: viewDidDisappear: viewWillLayoutSubviews: viewDidLayoutSubviews: UIImage imageNamed: imageWithContentsOfFile: imageWithData: imageWithData:scale: initWithContentsOfFile: initWithData: initWithData:scale: NSJSONSerialization JSONObjectWithData:options:error: JSONObjectWithStream:options:error: dataWithJSONObject:options:error: writeJSONObject:toStream:options:error: NSManagedObjectContext executeFetchRequest:error: processPendingChanges New Relic Mobile aggregates performance for various methods into summary metrics that appear in New Relic Mobile's Interactions page. Summary categories include: View loading UI layout Database Images JSON Network Instrument your Objective-C code To have your own Objective-C code appear in interaction code breakdowns and timelines, add a _START call to the beginning of your method and a _STOP call to the end of it. Important Always include a _STOP for each _START, and only include one set of these commands in a given method. The trace system will automatically pick up the class and method name, and report performance metrics for your method to New Relic Mobile. - (void)myMethod { NR_TRACE_METHOD_START(0); // … existing code NR_TRACE_METHOD_STOP; } Copy If you are not using ARC, use this version of the _STOP macro to avoid memory leaks: NR_NONARC_TRACE_METHOD_STOP; Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the _START macro; for example: NR_TRACE_METHOD_START(NRTraceTypeDatabase); Copy Create and complete interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction with Objective-C, use these API calls: NSString* uniqueIdentifier = NR_START_NAMED_INTERACTION(@\"name\"); Copy This macro will automatically begin tracking the name interaction trace from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NR_INTERACTION_STOP(uniqueIdentifier); Copy This macro will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names with Objective-C, implement the - (NSString*) customNewRelicInteractionName instance method in your view controller, where the string returned becomes the interaction's name. Set a custom application version The New Relic iOS SDK allows you to set a custom application version string with Objective-C. Instead of using the string defined in CFBundleShortVersionString, call the +[NewRelic setApplicationVersion:] method and pass along the custom application version before calling +[NewRelic startWithApplicationToken:]; [NewRelic setApplicationVersion:(NSString*) appVersion]; Copy Set a custom build identifier As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode with Objective-C, call the +[NewRelic setApplicationBuild:] method, and pass along the custom build identifier. [NewRelic setApplicationBuild:(NSString*) buildNumber]; Copy Create custom metrics Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Objective-C: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Objective-C, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Objective-C: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: [NewRelic noticeNetworkRequestForURL:(NSURL*)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer responseHeaders:(NSDictionary *)headers statusCode:(NSInteger)httpStatusCode bytesSent:(NSUInteger)bytesSent bytesReceived:(NSUInteger)bytesReceived responseData:(NSData *)responseData andParams:(NSDictionary *)params]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: [NewRelic noticeNetworkFailureForURL:(NSURL *)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer andFailureCode:(NSInteger)iOSFailureCode]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h. Instrument your Swift code To have your own Swift code appear in interaction code breakdowns and timelines: Add a startTracingMethod() call to the beginning of your method. Add a endTracingMethodWithTimer() call to the end of it. Always include an endTracingMethodWithTimer() call for each startTracingMethod() reference. Include only one set of these commands in a given method. func myMethod(){ let timer = NRTimer(); NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeNone) // … existing code NewRelic.endTracingMethodWithTimer(timer) } Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the startTracingMethod() macro; for example: NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeDatabase) Copy Create and complete Swift interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction, use these API calls: let uniqueIdentifier = NewRelic.startInteraction(withName: \"My Interaction\") Copy This call will automatically begin tracking an interaction trace named My Interaction from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NewRelic.stopCurrentInteraction(uniqueIdentifier) Copy This method will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default Swift interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names, implement the @objc func customNewRelicInteractionName() -> String method in your view controller, where the string returned becomes the interaction's name. Set a custom application version with Swift The New Relic iOS SDK allows you to set a custom application version string. Instead of using the string defined in CFBundleShortVersionString, call the NewRelic.setApplicationVersion() method, and pass along the custom application version before calling NewRelic.startWithApplicationToken();. NewRelic.setApplicationVersion(String appVersion) Copy Set a custom build identifier with Swift As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode, call the NewRelic.setApplicationBuild() method, and pass along the custom build identifier. NewRelic.setApplicationBuild(buildNumber) Copy Create custom metrics with Swift Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Swift: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Swift, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Swift: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: NewRelic.noticeNetworkRequestForURL(url: NSURL!, httpMethod: String!, withTimer: NRTimer!, responseHeaders:[NSObject : AnyObject]!, statusCode: Int, bytesSent: UInt, bytesReceived: UInt, responseData: NSData!, andParams: [NSObject : AnyObject]!) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records Server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: NewRelic.noticeNetworkFailureForURL(url: NSURL!, httpMethod: NSString!, withTimer: NRTimer!, andFailureCode: Int) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.28227,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> iOS",
        "body": "Use the iOS SDK API for <em>New</em> <em>Relic</em> <em>Mobile</em> to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your <em>mobile</em> app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically"
      },
      "id": "603eb3a2e7b9d264f02a07a8"
    },
    {
      "sections": [
        "iOS agent configuration and feature flags",
        "Tip",
        "Enable or disable feature flags",
        "Crash and error reporting feature flag",
        "NRFeatureFlag_CrashReporting",
        "NRFeatureFlag_HandledExceptionEvents",
        "Distributed tracing",
        "NRFeatureFlag_DistributedTracing",
        "Interactions feature flags",
        "NRFeatureFlag_DefaultInteractions",
        "NRFeatureFlag_InteractionTracing",
        "NRFeatureFlag_SwiftInteractionTracing",
        "Caution",
        "Networking feature flags",
        "NRFeatureFlag_ExperimentalNetworkingInstrumentation",
        "NRFeatureFlag_NSURLSessionInstrumentation",
        "NRFeatureFlag_NetworkRequestEvents",
        "NRFeatureFlag_RequestErrorEvents",
        "NRFeatureFlag_HttpResponseBodyCapture"
      ],
      "title": "iOS agent configuration and feature flags",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "8ced2dac1fbc45a65d6cdca6b27a4db001d6a4db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-agent-configuration-feature-flags/",
      "published_at": "2021-06-08T22:42:39Z",
      "updated_at": "2021-06-03T12:15:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile's iOS agent provides configuration settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[NewRelic startWithApplicationToken:] Swift: NewRelic.start(withApplicationToken:) Tip For an explanation of Mobile custom data types, see Add custom data to New Relic Mobile. Enable or disable feature flags To configure feature flags, use the following method defined in NewRelic.h: iOS language Procedure Objective-C In Objective-C, these features are bitmasked, so you can use a | to enable or disable multiple features at the same time. Enable a feature flag: +[NewRelic enableFeatures:(NRMAFeatureFlags)flags]; Copy Disable a feature flag: +[NewRelic disableFeatures:(NRMAFeatureFlags)flags]; Copy Here is an example where: Interaction tracing and experimental networking instrumentation are enabled. NSURLSession instrumentation and crash reporting are disabled. [NewRelic enableFeatures:NRFeatureFlag_SwiftInteractionTracing | NRFeatureFlag_ExperimentalNetworkingInstrumentation]; [NewRelic disableFeatures:NRFeatureFlag_NSURLSessionInstrumentation | NRFeatureFlag_CrashReporting]; [NewRelic startWithApplicationToken:...]; Copy Swift Enable a feature flag: NewRelic.enableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Disable a feature flag: NewRelic.disableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Example to disable interaction tracing: NewRelic.disableFeatures(NRMAFeatureFlags.NRFeatureFlag_DefaultInteractions) Copy Crash and error reporting feature flag If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_CrashReporting Enable (default) or disable crash reporting, which appears on New Relic Mobile's Crash analysis page. Type Boolean Default true NRFeatureFlag_HandledExceptionEvents Globally enable (default) or disable recording handled exceptions events, which appear on the Handled exception page. Type Boolean Default true Distributed tracing NRFeatureFlag_DistributedTracing Enable or disable the adding of distributed tracing headers to network requests. Refer to How New Relic distributed tracing works for more information on distributed tracing in mobile apps. Type Boolean Default true Interactions feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_DefaultInteractions Enable (default) or disable interaction tracing only for default instrumented classes and methods. Custom interactions will be reported. The traces will appear on the Mobile Interactions page. Type Boolean Default true NRFeatureFlag_InteractionTracing Globally enable (default) or disable interaction traces, which appear on the Mobile Interactions page. Interaction tracing will be disabled after the agent has started. Interactions for any activity or methods executed prior to starting the agent may still appear on the Interactions page. Type Boolean Default true NRFeatureFlag_SwiftInteractionTracing Caution Before enabling this feature, see Enable Swift interaction traces. If proper steps are not taken, enabling this feature may cause instability. Enable or disable (default) interaction tracing for Swift code. The traces appear on the Mobile Interactions page. This feature will always be disabled if NRFeatureFlag_InteractionTracing is disabled. Type Boolean Default false Networking feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_ExperimentalNetworkingInstrumentation Caution Enabling this feature flag call may decrease the stability of applications. Avoid using unless instructed by New Relic. Enable or disable (default) experimental networking instrumentation. This forces all NSURLConnection network requests through the NRMAURProtocol. Type Boolean Default false NRFeatureFlag_NSURLSessionInstrumentation Enable (default) or disable networking instrumentation for NSURLSession. These URL traces are sent to the HTTP Requests page. Type Boolean Default true NRFeatureFlag_NetworkRequestEvents Enable or disable (default) networking instrumentation. This sends the HTTP response data as MobileRequest events. Available for iOS Agent version 5.14.0 and higher Type Boolean Default true - Enabled by default as of 6.0.0 NRFeatureFlag_RequestErrorEvents Enable (default) or disable HTTP request error event generation of instrumented network calls that result in an error or failure. These events are reported as MobileRequestError events. Available for iOS Agent version 5.11.0 and higher Type Boolean Default true NRFeatureFlag_HttpResponseBodyCapture Enable or disable capture of HTTP response bodies for HTTP error traces, and MobileRequestError events. Type Boolean Default true",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.28225,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> iOS",
        "body": "<em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s iOS agent provides configuration settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[<em>NewRelic</em> startWithApplicationToken:] Swift: <em>NewRelic</em>.start(withApplicationToken:) Tip For an explanation of <em>Mobile</em> custom data"
      },
      "id": "60441925196a67324d960f1b"
    },
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-08T22:39:53Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.2706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> Android",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s Android agent provides an SDK API to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    }
  ],
  "/docs/okta-scim-assign-users-automated-provisioning-beta": [
    {
      "sections": [
        "Okta SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Create authentication domain and enable SAML",
        "Step 2. Configure provisioning",
        "Step 3. Assign users and groups",
        "Assignments tab",
        "Push groups tab",
        "Step 4. Additional considerations",
        "Moving users between groups"
      ],
      "title": "Okta SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "7a00399a6ce11aaa2cb52046f994a80f5986c0e4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/okta-scimsso-application-configuration/",
      "published_at": "2021-06-08T17:09:10Z",
      "updated_at": "2021-06-08T17:09:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Okta specific details on how to configure the New Relic Okta SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Step 1. Create authentication domain and enable SAML If you haven't already, create a new authentication domain with SAML SSO enabled and SCIM enabled, and then return here to complete these instructions. Step 2. Configure provisioning Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning tab. From the Integration form, click on Configure API Integration. Check the Enable API integration checkbox. From New Relic's authentication domain UI, get the SCIM bearer token and input it in the New Relic SCIM/SSO app's API token field. Optional: click on Test API Credentials to verify a SCIM connection can be established to New Relic. If a connection can be established, a success message is displayed. If a connection was not established, re-enter the API Token and try the test again. Click Save. Note that the save process does a test of the API credentials. If a connection is not established to New Relic, the save will fail. On the newly displayed To App form, click on Edit. Check the Enable checkbox in the Create Users, Update User Attributes, and Deactivate Users sections. Click Save. Step 3. Assign users and groups After the New Relic SCIM/SSO application provisioning configuration and the New Relic side SSO configuration is finished, you can assign users to the application. Assigning users is done using two different tabs on the the New Relic SCIM/SSO application page. We recommend having your New Relic users selected on the Assignments tab and their associated groups selected on the Push Groups tab. Assignments tab From the New Relic SCIM/SSO application page, click on the Assignments tab. From the Assignments form, click on Assign. From the pop up menu, click on Assign to Groups. From the Assign ... to Groups form, click on Assign for the group you wish to assign to the application. Optional: in the Time zone field, enter the default time zone for members of the group. Members without a time zone configured, will use the group time zone. Time zone affects how date/times are shown in New Relic. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). Click on Save and Go Back. Repeat the steps to add a group until all desired groups have been assigned to the application. Click Done. Push groups tab From the New Relic SCIM/SSO application page, click on the Push Groups tab. From the Push Groups form, click on Push Groups. From the pop up menu, click on Find groups by name. From the Push Groups to... form, in the search field enter the first few characters of the name of the group you want to send to New Relic. Leave the Push group memberships immediately checkbox checked. Click on your group in the pop up search results list. In the Match result & push action section, No Match found should be displayed, meaning that the group does not yet exist at New Relic. Leave the selector set to Create Group and leave the default name for the group. The intent here is to have a group of the same name created at New Relic. If this is the last group you wish to send to New Relic, click on Save. Otherwise, if you have more groups to configure, click on Save & Add Another and repeat the steps to add a group. Step 4. Additional considerations In this section we discuss other important things to know when using the New Relic SCIM/SSO application. This section includes tips to work around potential issues that could cause undesired results when integrating between Okta and New Relic. Moving users between groups When moving a user between groups, you must manually synchronize the old group's membership with New Relic. This is because Okta does not send a SCIM request to remove a user from a group. So, the admin needs to push the old group's membership to New Relic manually to inform New Relic that the user is no longer a member of the old group. Here are the steps to manually synchronize a group's membership: From the New Relic SCIM/SSO application page, click on the Push Groups tab. From the Push Groups form, open the pick list on the desired group's button under the Push Status column. From the displayed pick list on the button, click Push now. This causes an immediate synchronization of the group's membership with New Relic. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 486.8225,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Okta</em> <em>SCIM</em>&#x2F;SSO application configuration",
        "sections": "Step 3. <em>Assign</em> <em>users</em> and groups",
        "tags": "<em>Automated</em> <em>user</em> management",
        "body": "Our <em>automated</em> <em>user</em> management (AUM) allows allows you to import and configure your New Relic <em>users</em> from your identity provider via <em>SCIM</em>. This guide provides <em>Okta</em> specific details on how to configure the New Relic <em>Okta</em> <em>SCIM</em>&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f5cae7b9d2758b579a0c"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/authentication-domains-saml-sso-scim-more/",
      "sections": [
        "Authentication domain settings: SAML SSO, SCIM, and more",
        "Important",
        "Requirements",
        "What is an authentication domain?",
        "Find the authentication domain UI",
        "Source of users: Manual versus SCIM",
        "Tip",
        "Authentication",
        "Set up SAML SSO authentication",
        "Azure app",
        "Okta app",
        "OneLogin app",
        "Other settings: session duration, and upgrade requests"
      ],
      "published_at": "2021-06-08T17:19:16Z",
      "title": "Authentication domain settings: SAML SSO, SCIM, and more",
      "updated_at": "2021-06-08T17:19:16Z",
      "type": "docs",
      "external_id": "8690bc2587ac53c35203d51075e1a2df0de33bc4",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for managing users on the New Relic One user model. For managing users on our original user model, see Original users. Learn about user models. To manage their users, New Relic organizations can configure one or more authentication domains, which control how users are added to a New Relic account, how they’re authenticated, and more. Requirements To check if you have access to these features, you can go to the authentication domain settings UI and see if you can configure settings. Requirements to configure these settings: These features are for managing users on the New Relic One user model. For users on our original user model, see Original account management. Configuring these settings requires Pro or Enterprise edition. To edit these settings, you must be in a group with the Authentication domain manager role. SCIM provisioning, also known as automated user management, requires Enterprise tier. SAML SSO requires Pro or Enterprise edition. SAML support includes: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 What is an authentication domain? An \"authentication domain\" is a grouping of New Relic users governed by the same user management settings, like how they're provisioned (added and updated), how they're authenticated (logged in), session settings, and how user upgrades are managed. When someone creates a New Relic account, the default authentication settings are: Users are manually added to New Relic Users manually log in using their email and password Those default settings would be under one \"authentication domain.\" Another authentication domain might be set up like this: Users are added and managed from an identity provider using SCIM provisioning Users are logged in using SAML single sign-on (SSO) from an identity provider When you add users to New Relic, they’re added to a specific authentication domain. Typically organizations have either one or two authentication domains: one for the manual, default methods and one for the methods associated with an identity provider. Find the authentication domain UI If you meet the requirements, you can add and manage authentication domains. To do this: from the account dropdown, click Organization and access, and then click Authentication domains. For more about the configuration options, keep reading. Source of users: Manual versus SCIM Tip Before configuring SCIM, please read our AUM docs. From the authentication domain UI, you can set one of two options for how users are added to New Relic: Manual: this means that your users are added manually to New Relic. SCIM: enabling SCIM lets you use our automated user management (AUM) to import/manage users from your identity provider. For instructions, see Automated user management. Authentication The authentication method is the method by which New Relic users log in to New Relic. All users in an authentication domain have a single authentication method. Once a user authenticates with New Relic, they have access to any account they've been granted permissions for. There are two authentication options: Username/password: your users log in via standard username and password. SAML SSO: your users log in via SAML single sign-on (SSO) via your identity provider. To learn how to set that up, keep reading. Set up SAML SSO authentication Tip Recommended: first read the requirements. Note that how you enable SAML SSO differs depending on the identity provider you use. You may have to also read your identity provider docs to understand how to integrate with New Relic. If you're using Azure, Okta, or OneLogin, enable the New Relic integration for that service. To do this, see the instructions for your service: Azure app Azure AD provides an application gallery, which includes various integrations for Azure AD, including the ones that New Relic offers. Add the New Relic SCIM/SSO application to your list of applications. Go to the Azure Active Directory admin center, and sign in if necessary. aad.portal.azure.com/ Click on All services in the left hand menu. In the main pane, click on Enterprise applications. Click on +New Application. Find our SCIM/SSO application by entering New Relic in the name search box, and click on the application New Relic by organization (not New Relic by account). Click on Add. Okta app Add the New Relic SCIM/SSO application to your Okta applications. Go to okta.com/ and sign in with an account that has administrator permissions. From the Okta home page, click on Admin. From the Okta admin Dashboard, choose the Applications page. Click Add Application. In the search field on the Okta Add Applications page, enter \"New Relic by organization\" (not \"New Relic by account\") and then click on the application when it shows in the search results. From the New Relic by Organization page, click on Add. From the Add New Relic by Organization page, check the two Application Visibility \"Do not display...\" checkboxes and click on Done. We will make the application visible later after configuration is complete and provisioning has begun. OneLogin app Add the New Relic SCIM/SSO application to your OneLogin applications. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click on Administration. From the OneLogin Administration page, choose the Applications menu. From the OneLogin Applications page, click on Add App. In the search field on the OneLogin Find Applications page, enter \"New Relic by organization\" (not \"New Relic by account\") and then click on the application when it shows in the search results. From the Add New Relic by Organization page, click on Save. If you're using a different service, note that your identity provider must use the SAML 2.0 protocol, and must have the “signed SAML assertions” option enabled. Next, you'll go to New Relic's authentication domain UI. From the account dropdown, click Organization and access, and then click Authentication domains. If you don't already have one, create a new authentication domain to be used for your SAML-authenticating users. Under Authentication, click Configure. Under Method of authenticating users, select SAML SSO. Under Provided by New Relic, we have New Relic-specific information. You'll need to place these in the relevant places in your identity provider app or service. If you're not sure where to place these, you may need to consult your identity provider docs. Under Provided by you, input the Source of SAML metadata. This URL is supplied by your identity provider and should conform to SAML V2.0 metadata standards. If your identity provider doesn't support dynamic configuration, you can do this by using Upload a certificate. This should be a PEM encoded x509 certificate. Under Provided by you, set the SSO target URL supplied by your identity provider. You can find this by going to the Source of SAML metadata and finding the POST binding URL. It looks like: https://newrelic.oktapreview.com/app/newreliclr/1234567890abcdefghij/sso/saml. If your identity provider has a redirect URL for logout, enter it in the Logout redirect URL; otherwise, leave it blank. If you’re using an ID provider app, you’ll need to input the authentication domain ID in the app. That ID is found at the top of New Relic’s authentication domain UI page. Optional. If you're also setting up SCIM provisioning, see Automated user management. When you're done with SAML, or with SCIM + SAML, you'll need to give your users access to specific roles and accounts. It may help you to read about how access grants work. Optional: In New Relic’s authentication domain UI, you can adjust other settings, like browser session length and user upgrade method. You can adjust these settings at any time. Other settings: session duration, and upgrade requests At the bottom of the authentication domain UI, you can control some other settings for the users in that domain, including: Length of time users can remain logged in. Amount of idle time before a users' session expires. User access requests: This controls how basic users become full users. You can either allow basic users to self-upgrade or you can require review by admins (users with the Authentication domain manager role). Allowing users to self-upgrade allows them to quickly respond to issues. If Require review is set, admins receive an email when an upgrade request is made, and can manage requests in the User management UI. For more about basic users and full users, see User type. (Note that upgrade works differently for users on our original user model.)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 397.02924,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Authentication domain settings: SAML SSO, <em>SCIM</em>, and more",
        "sections": "Source of <em>users</em>: Manual versus <em>SCIM</em>",
        "body": " Relic One <em>user</em> model. For <em>users</em> on our original <em>user</em> model, see Original account management. Configuring these settings requires Pro or Enterprise edition. To edit these settings, you must be in a group with the Authentication domain manager role. <em>SCIM</em> <em>provisioning</em>, also known as <em>automated</em> <em>user</em>"
      },
      "id": "6043f69a196a67380e960f4c"
    },
    {
      "sections": [
        "Azure AD SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Create authentication domain and enable SAML",
        "Step 2. Configure connection",
        "Step 3. Configure provisioning rules",
        "Tip",
        "Step 4. Assign users and groups"
      ],
      "title": "Azure AD SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d6e7f7e95daa833451159a3db4e2c4257270b5e9",
      "image": "https://docs.newrelic.com/static/0a9a32fd5041e6e2ea37cc5f032b6910/8c557/Azure_AD_Provisioning_Attribute_Mapping_2_0.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/azure-ad-scimsso-application-configuration/",
      "published_at": "2021-06-09T01:01:07Z",
      "updated_at": "2021-06-09T01:01:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM/SSO application. Requirements Before using this guide, read the requirements and procedure overview. Step 1. Create authentication domain and enable SAML If you haven't already, enable SAML SSO and then return here to complete these instructions. Step 2. Configure connection Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning link in the sidebar. In the main pane, click on Get started. In the Provisioning Mode pick-list, choose Automatic. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. In Azure AD's New Relic SCIM/SSO app, in the Admin credentials section, fill out the Tenant URL and Secret token fields with the values provided in New Relic's authentication domain UI. To verify you can connect to New Relic, click Test Connection. When you see a message indicating verification success, click Save. The New Relic SCIM/SSO application can now connect with New Relic. Continue with the following section to configure the provisioning rules. Step 3. Configure provisioning rules Initially, nothing is configured to be sent to New Relic. You must configure Azure AD to send changes for user creation, updates, and deactivation. Go to the Provisioning page and complete the following: Expand the Mappings section. Click Provision Azure Active Directory Users. Verify the Target Object Actions Create Update and Delete checkboxes are all checked. Verify the Attribute Mappings look correct for your environment. Each of the New Relic attributes shown in the list must receive a value. Tip Ensure that the Azure Active Directory attributes shown in the list on the left are good sources for the information to send to New Relic. In particular, not all environments set the mail attribute. If your environment does not set the mail attribute, userPrincipalName could be a good alternative. Leave the switch for Enabled set to Off until you're done with the user and group configuration in the next section. Once all configuration is ready, return to this page and set the switch to On. Click Save. Here's an example of a filled-in attribute mapping page with the default values. Your values may be configured differently depending on your situation. After saving the provisioning rules, the New Relic SCIM/SSO application is ready to provision any changes made to users assigned to the application. Continue with the following section to assign users and groups to the New Relic SCIM/SSO application. Step 4. Assign users and groups After the New Relic SCIM/SSO application configuration and the New Relic side configuration is finished, you can assign users and groups to the application. From the New Relic SCIM/SSO application page, click on Users and groups in the sidebar. Click +Add user. From the Add Assignment page, click on Users and groups, and select the appropriate users or groups that you'd like to provision. Then click Select and Assign. The selected users and groups appear on the Users and groups page, indicating that they're candidates for provisioning. Repeat the steps to add users and groups until all desired entities have been assigned to the application. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 396.8412,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Azure AD <em>SCIM</em>&#x2F;SSO application configuration",
        "sections": "Step 4. <em>Assign</em> <em>users</em> and groups",
        "tags": "<em>Automated</em> <em>user</em> management",
        "body": "Our <em>automated</em> <em>user</em> management (AUM) allows allows you to import and configure your New Relic <em>users</em> from your identity provider via <em>SCIM</em>. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD <em>SCIM</em>&#x2F;SSO application. Requirements Before using this guide, read"
      },
      "id": "6043f5c964441fcfb0378ef3"
    }
  ],
  "/docs/plugins/index": [
    {
      "sections": [
        "Maintain plugin versions",
        "Important",
        "Limited access to legacy plugins",
        "Plugin agents and dashboards",
        "Agent versioning",
        "Update a SaaS agent",
        "Update an on-premises agent",
        "Update plugin dashboards"
      ],
      "title": "Maintain plugin versions",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "70efb125146afeda3c6e672e6c9b0e769ce4eb37",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/maintain-plugin-versions/",
      "published_at": "2021-06-09T19:03:17Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin agents and dashboards As a plugin publisher, typically you need to have two versions of your plugin running simultaneously: The stable production version that users can acquire from Plugin Central in New Relic A development version that you are actively improving, testing, or otherwise have in a non-production state Plugins contain two versioned parts: The agent collects metrics from the source and transmits those metrics to the Plugin API. The dashboard is a collection of visualizations and configurations that you make in the Plugins user interface. Plugin users view this automatically from their own Plugins dashboards in New Relic. Versioning works differently for these two parts. Agent versioning There are two types of plugin agents, with two different versioning situations: SaaS agents are agents that you, the SaaS application developer, deploy and run on behalf of your SaaS users. On-premises agents are agents that your users install into their systems. Plugin agents Versioning SaaS agents There is only one copy of this agent running anywhere (the one you developed and deployed on behalf of your users), so whatever version you are running will inherently be the latest version. Whatever metrics the latest version is sending to New Relic will be the metrics available to (but not necessarily charted for) your users in their Plugins dashboards. On-premises agents When you publish a new version of your agent, all of your plugin users' dashboards will note that a new agent version is available. They will be directed to your Plugin Central listing, where they can download and install the new version of your agent. Recommendation: Provide a streamlined agent update procedure in your own documentation. Update a SaaS agent This procedure assumes: You are starting with a plugin published to the Plugin Central (the production version). Your plugin has a SaaS agent running inside your app, and you want to make improvements to the SaaS agent portion of your plugin. As part of your normal development process you have a second dev version of your agent running, which is not published in Plugin Central. Your plugin's dev version uses a different GUID (for example, com.company.service.plugin.dev). Both your dev and your production plugins have the same plugin dashboards. To update your plugin's SaaS agent: Make changes to your dev agent. Do not change the version number or GUID of your dev agent in the agent config file. When you are ready to make your latest dev agent the production agent for your customers, follow your standard procedures to deploy your dev code to production. If applicable, make any necessary changes to your plugin's dashboards. Your users will receive no notification, and they do not need to take any action. You didn't change the version number, so your agent changes are transparent to your users. Update an on-premises agent This procedure assumes you are starting with a plugin published in Plugin Central, and you want to make improvements to the on-premises agent portion of your plugin. Make a copy of your agent code. Change the version number in the agent config file. To ensure that New Relic knows two different versions of your agent exist now, run the agent so that it reports metrics to the Plugin API. Continue working on your agent and making improvements, but do not change the version number again. When you are ready to make this new agent version the latest version for your plugin users, save it to the location where you distribute your agent code (for example, GitHub). From the New Relic UI, select your published plugin, select Edit, and then select Save. Select Publish, and then select the new agent version you are publishing. At this point, all of your plugin users will see a notice in the Plugins UI that a new version is available. They will be directed to your listing in Plugin Central, which points to your download location. From there your users can acquire your new agent version. Update plugin dashboards If you add metrics to your agent, be sure to add them to charts on your dashboard, and then save your dashboard and re-publish. All your users will see the new dashboard, and the new metrics will either be populated immediately (if you are running a SaaS agent on their behalf) or as soon as they update their agent (if you are offering an on-premises agent). If you need to migrate dashboards between GUIDs, get help at support.newrelic.com. Otherwise, to update your dashboard, follow this workflow. These steps assume you are starting with a plugin already published in Plugin Central, and you want to make improvements to the dashboard portion of your plugin. Go to one.newrelic.com > More > Plugins, and select your plugin's name. From your plugin's summary page, select Edit > Dashboards, then add, edit, or delete dashboards. When you are ready to publish: From your plugin's summary page, select Publish. At this point, all of your plugin users will see your new dashboard version the next time they select your plugin's dashboard in the New Relic UI.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 51.817116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Maintain <em>plugin</em> versions",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em>",
        "body": " to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy <em>plugins</em> As of December 2, 2020, <em>plugin</em> access has been limited to accounts that have accessed a legacy <em>plugin</em> in the past 30 days. The legacy <em>plugin</em> experience will reach end of life (EoL"
      },
      "id": "603e956fe7b9d28f062a07b5"
    },
    {
      "sections": [
        "Checklist for developing plugins",
        "Important",
        "Limited access to legacy plugins",
        "Plan your plugin",
        "Create your plugin",
        "Publish your plugin",
        "Documentation",
        "\"About us\" URL",
        "Branding image URL",
        "Developer terms of service",
        "Publication",
        "Versions",
        "Plugin support",
        "Support for your plugin users",
        "Escalated plugin support"
      ],
      "title": "Checklist for developing plugins",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "c60d87c25a2c835d2b7e44340bddb678117ddd07",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/checklist-developing-plugins/",
      "published_at": "2021-06-09T19:03:17Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plan your plugin When planning your plugin for Plugin Central: Sketch the types of metrics you want to collect and how you want to present them on dashboards. Include any necessary mathematical calculations. Sketch the types of summary metrics you want to collect and how you want to present them on the plugin's summary page. Include any necessary mathematical calculations. Optional: Define alert conditions for your metrics. Optional: If you want to receive alert notifications for your plugin, verify the email address to be used and confirm any other notification options as necessary. Decide whether to develop the plugin with one of the plugin SDKs or to use the Plugin API. Create your plugin When creating your plugin for Plugin Central: Select a unique, meaningful GUID name. Write the plugin agent. Test your plugin, including summary metrics, customized dashboards, alert conditions, and your process to disable or uninstall your plugin. Consider writing Chef and Puppet installation scripts to make plugin installation easier. Publish your plugin The following items are required for plugins published through New Relic's Plugin Central. If you do not plan to make your plugin publicly accessible to users, some of these items are not applicable. Documentation When documenting your plugin, include requirements and procedures to install, configure, use, troubleshoot, uninstall, and contact your support resources. Documentation requirements Guidelines Title Descriptive title; for example, \"Wikipedia plugin for New Relic.\" Table of contents List of main topics with anchors to each section. Description Explanation of how the plugin can be used in New Relic to monitor and improve the associated software's performance. What systems does it monitor (for example, memcache, versions X-Y, on the local host, sets and gets)? What problem does it solve? Plugin requirements Requirements or dependencies; for example: Internet access via SSL (HTTPS) Supported operating systems Minimum environment requirements (Java, Ruby, glibc, etc.) Supported monitored systems Any known limitations Metrics source documentation Plugin users may not be familiar with all the metrics displayed, their source, what the metrics mean, etc. If you have documentation that provides these details, be sure to include links to that information. For example: Description of data expected from source, frequency, mechanism, etc.; for example, \"Data is read from a file socket and exported from the source once per second.\") Description of data itself; for example, a well-formatted JSON such as {X: {y: z}} Description of data being sent; for example, average response time in milliseconds, of a set or get, taken over a minute, recorded from the specified data Installation Step-by-step procedures to obtain and install the plugin. Do not require su or sudo permission in order to install your agent or support software unless absolutely required. These requirements must be limited in scope and well documented. Configuration Instructions to configure the plugin, expected format, and how to set them. Include how to find the user's New Relic license key. Troubleshooting Include instructions as applicable; for example: How to resolve common problems: Unable to connect to New Relic, unable to connect to the monitored server, incorrect license key How to enable logging or verbose logging How to restart the plugin How to test connectivity to New Relic How to handle errors; for example, failure to read, aggregate, or send data Disabling and uninstalling Questions to consider: Are there other dependencies before disabling or uninstalling the plugin? For example, are there any special procedures your plugin users need to know in order to have their operating system stop the process from running, so that they can remove components (instances) from their installed plugin? Can you temporarily disable and then re-enable the plugin (for example, for troubleshooting or updating it), or must you completely uninstall and reinstall? Can the uninstall procedure be done from a command line? Support resources Make a plan for supporting your plugin and identifying a support URL for users. In your plugin's support information, describe how users can contact you for support in whatever way works best for you: documentation website, phone, email, forum, Twitter, ticketing system, etc. \"About us\" URL Identify the About Us URL for your plugin. Branding image URL Identify a URL to a branding image for when you publish your plugin. Follow these formatting guidelines: Set the image size to 64 x 64px. Save as a .png or .gif file. Use transparency for the background unless it is a square icon. Design the image to display well on both white and black backgrounds. Developer terms of service Review the Developer Terms of Service for New Relic Plugins. A link to this document appears on your plugin's Publish page in the UI. Publication Plugin Central is the repository of plugins available in New Relic. If you want to distribute your plugin through Plugin Central, make sure your documentation and support plans are in place, then select your plugin's Publish option in the New Relic UI. The Publish page in the UI prompts you to verify all requirements. As soon as your plugin is published, all of its dashboards and summary metrics are available for your plugin users. The Distribution method identifies how users can obtain your plugin from Plugin Central. File download: Most developers typically select this option for plugin setup and installation. Webpage link: SaaS providers typically select this option for plugin configuration and identify their website's landing page URL. Platform Installer (NPI): If you use the New Relic Platform Installer (NPI) command line utility to package your plugin, select this option. You can also publish a plugin without listing it in Plugin Central; for example, if you want to beta test it first, or if you only want specific users to be able to use it. When publishing an unlisted plugin, make sure the checkbox option in the UI for List this plugin in Plugin Central is not selected. You will need to communicate directly with your users when your unlisted plugin is added, updated, or removed. Versions You can update and re-publish your plugin as often as you want. Every time you publish changes to your plugin and list them in Plugin Central, the changes are immediately visible in Plugin Central. In addition, your published plugin changes typically appear in New Relic's website within five minutes. Recommendation: To avoid development and testing impacts on your users, maintain dev and production versions when updating your plugin. Plugin support Plugin publishers are responsible for providing first-line support if users have problems using their plugin. This includes verifying correct data acquisition and transmission. If problems continue with getting the expected data into New Relic's user interface after you complete your troubleshooting procedures, then you (not your users) can escalate the problem to New Relic. We will work with you to resolve the problem, and then you can communicate the solution to your users. Support for your plugin users Follow these guidelines for supporting your plugin's users by confirming data collection and transmission. Check that the plugin configuration is correct, including: Necessary credentials for the target system IP addresses or DNS names for the target system Any settings that might affect data acquisition Review transmission logs for errors, including: Authentication errors Connection errors Error responses from the target system Review transaction logs for useful data. How much data is being collected? Does the data make sense? Verify if the plugin is converting acquired data into useful metrics. Do the metrics make sense? Would the metrics make a good chart? Are the metrics being aggregated into valid JSON? Is the JSON size within limits? Confirm transmission of the plugin data. If you are using an SDK for New Relic Plugins and the Plugin API, does your data transmission conform to New Relic's rate limits? Are the 50X codes sporadic or continuous? Do your transaction logs indicate any data transmission problems? Escalated plugin support If you have verified good data acquisition and transmission, but there still is trouble getting the expected data in New Relic's user interface, escalate the support request to New Relic on behalf of your users. Do not have your users contact us. Include as much of the following information as possible: Plugin support requests Notes User affected by the problem Information such as: Permalink to the plugin page where you see the problem, so that we can view the endpoint. Recommendation: Ask the user if you can add your user ID to the New Relic account so that you can obtain a permalink yourself. User's New Relic account ID. If you do not have the user's permalink or account ID, include the user's email address they used to sign up for their New Relic account. (This may be a different email than the one they used to contact you.) User's name and New Relic account name. Detailed description of the problem For example: The user can see data, but it's not the data they are expecting. The user can see no data at all. The user configured and started the plugin correctly, but it does not appear in the user interface for New Relic Plugins. Any other specific details about the problem. Other evidence This includes: Explain the troubleshooting you have done so far and what you expected to happen in contrast to the actual results. Provide any available permalinks, screenshots, and log files. Summarize your understanding of the problem. We will work with you to characterize and resolve the problem. Keep the user updated with progress. After we provide you with a resolution, ask the user to verify the results.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 51.817116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Checklist for developing <em>plugins</em>",
        "sections": "Checklist for developing <em>plugins</em>",
        "tags": "<em>Plugins</em>",
        "body": " to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy <em>plugins</em> As of December 2, 2020, <em>plugin</em> access has been limited to accounts that have accessed a legacy <em>plugin</em> in the past 30 days. The legacy <em>plugin</em> experience will reach end of life (EoL"
      },
      "id": "603ec26f64441fe6484e885f"
    },
    {
      "sections": [
        "Use a Plugin Central plugin",
        "Important",
        "Limited access to legacy plugins",
        "View plugin dashboard details",
        "Plugin summary",
        "Plugin dashboards",
        "Plugin alerts",
        "Delete a plugin",
        "Remove plugin components (instances)",
        "Delete the plugin"
      ],
      "title": "Use a Plugin Central plugin",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "feae68c2e9d870f7c02fff5ffb69f2c262a0cd6c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/use-plugin-central-plugin/",
      "published_at": "2021-06-09T19:12:15Z",
      "updated_at": "2021-03-16T11:03:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. View plugin dashboard details Each plugin in Plugin Central includes procedures for how to install, use, troubleshoot, and uninstall it. Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. After you install a plugin, it starts to receive data, usually within five minutes. The plugin automatically appears with a short name and icon on your Plugins menu in New Relic One. You do not need to select it from Plugin Central. The amount and types of information on the plugin's summary page and dashboards depend on the specific plugin. For example, a plugin may have one or more components (instances) and one or more dashboards. To view summary and dashboard details about the plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, review the list of components or instances, summary metrics, and list of Recent Events. To view dashboard details about any component or instance, select its name. Plugin summary Depending on the plugin, the summary includes: One or more components or instances (what the plugin agent is monitoring, typically a host/port pair) Zero to five summary metrics for the past three minutes (values such as average, total, minimum, maximum, standard deviation, rate, or count) with optional alerts Recent events list, including deployments, notifications, and alerts Other information about alert violations, events, and activity If your plugin has 100 or more components or instances, you can search for a specific component instance. Here is a summary of additional standard features. If you want to... Do this... View version information for a component's or instance's agent Mouse over the component's name. Change the sort order On the title row of the plugin's summary page, select the up or down arrow for a component (instance) or a summary metric's label. Show or hide items on the events and activity list Select an event icon, or select All. View details about an event On the events and activity list, select the link. View page details for a component or instance Select the name or a summary metric for the component (instance). Plugin dashboards Depending on the plugin, it may have one or more dashboards, and each dashboard may present data as a chart or a table. You can use any of New Relic's standard dashboard features to drill down into detailed information. The customized dashboards that show plugin data are part of the plugin. Users cannot add or remove these dashboards. This must be done by the author or publisher as part of a plugin update. Plugin alerts If the plugin publisher set Critical (red) or Caution (yellow) alert conditions for your plugin's components or instances, you can view details direct in the user interface. For example, you can: Select and view alert details. Change the existing thresholds. Set your alert notification options; for example, to receive email notifications for Critical events. Delete a plugin Each plugin in Plugin Central includes procedures for how to uninstall it. When you select the plugin's Download or Continue button, the plugin should include a README file or refer to other documentation resources. Remove plugin components (instances) At a minimum, your plugin must stop reporting data before you start uninstalling it. Make sure the health status for your plugin's components (instances) are gray. Depending on the plugin, there may be other dependencies before disabling or uninstalling it. For example, plugins from SaaS providers may have different requirements. Be sure to review the instructions that the plugin's publisher provides. Then, to remove individual components from your plugin, click the settings icon for each component (instance). Delete the plugin After you remove each component (instance) for the plugin, the plugin icon will automatically disappear from your Plugins menu in the New Relic UI. You do not need to do anything else to delete the plugin. If you are the plugin's publisher and need to delete the plugin from Plugin Central, go to support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 51.816475,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use a <em>Plugin</em> Central <em>plugin</em>",
        "sections": "Use a <em>Plugin</em> Central <em>plugin</em>",
        "tags": "<em>Plugins</em>",
        "body": " to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy <em>plugins</em> As of December 2, 2020, <em>plugin</em> access has been limited to accounts that have accessed a legacy <em>plugin</em> in the past 30 days. The legacy <em>plugin</em> experience will reach end of life (EoL"
      },
      "id": "603ebf0928ccbcf8d0eba762"
    }
  ],
  "/docs/plugins/plugin-developer-resources/develop-plugins/checklist-developing-plugins": [
    {
      "sections": [
        "Maintain plugin versions",
        "Important",
        "Limited access to legacy plugins",
        "Plugin agents and dashboards",
        "Agent versioning",
        "Update a SaaS agent",
        "Update an on-premises agent",
        "Update plugin dashboards"
      ],
      "title": "Maintain plugin versions",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "70efb125146afeda3c6e672e6c9b0e769ce4eb37",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/maintain-plugin-versions/",
      "published_at": "2021-06-09T19:03:17Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin agents and dashboards As a plugin publisher, typically you need to have two versions of your plugin running simultaneously: The stable production version that users can acquire from Plugin Central in New Relic A development version that you are actively improving, testing, or otherwise have in a non-production state Plugins contain two versioned parts: The agent collects metrics from the source and transmits those metrics to the Plugin API. The dashboard is a collection of visualizations and configurations that you make in the Plugins user interface. Plugin users view this automatically from their own Plugins dashboards in New Relic. Versioning works differently for these two parts. Agent versioning There are two types of plugin agents, with two different versioning situations: SaaS agents are agents that you, the SaaS application developer, deploy and run on behalf of your SaaS users. On-premises agents are agents that your users install into their systems. Plugin agents Versioning SaaS agents There is only one copy of this agent running anywhere (the one you developed and deployed on behalf of your users), so whatever version you are running will inherently be the latest version. Whatever metrics the latest version is sending to New Relic will be the metrics available to (but not necessarily charted for) your users in their Plugins dashboards. On-premises agents When you publish a new version of your agent, all of your plugin users' dashboards will note that a new agent version is available. They will be directed to your Plugin Central listing, where they can download and install the new version of your agent. Recommendation: Provide a streamlined agent update procedure in your own documentation. Update a SaaS agent This procedure assumes: You are starting with a plugin published to the Plugin Central (the production version). Your plugin has a SaaS agent running inside your app, and you want to make improvements to the SaaS agent portion of your plugin. As part of your normal development process you have a second dev version of your agent running, which is not published in Plugin Central. Your plugin's dev version uses a different GUID (for example, com.company.service.plugin.dev). Both your dev and your production plugins have the same plugin dashboards. To update your plugin's SaaS agent: Make changes to your dev agent. Do not change the version number or GUID of your dev agent in the agent config file. When you are ready to make your latest dev agent the production agent for your customers, follow your standard procedures to deploy your dev code to production. If applicable, make any necessary changes to your plugin's dashboards. Your users will receive no notification, and they do not need to take any action. You didn't change the version number, so your agent changes are transparent to your users. Update an on-premises agent This procedure assumes you are starting with a plugin published in Plugin Central, and you want to make improvements to the on-premises agent portion of your plugin. Make a copy of your agent code. Change the version number in the agent config file. To ensure that New Relic knows two different versions of your agent exist now, run the agent so that it reports metrics to the Plugin API. Continue working on your agent and making improvements, but do not change the version number again. When you are ready to make this new agent version the latest version for your plugin users, save it to the location where you distribute your agent code (for example, GitHub). From the New Relic UI, select your published plugin, select Edit, and then select Save. Select Publish, and then select the new agent version you are publishing. At this point, all of your plugin users will see a notice in the Plugins UI that a new version is available. They will be directed to your listing in Plugin Central, which points to your download location. From there your users can acquire your new agent version. Update plugin dashboards If you add metrics to your agent, be sure to add them to charts on your dashboard, and then save your dashboard and re-publish. All your users will see the new dashboard, and the new metrics will either be populated immediately (if you are running a SaaS agent on their behalf) or as soon as they update their agent (if you are offering an on-premises agent). If you need to migrate dashboards between GUIDs, get help at support.newrelic.com. Otherwise, to update your dashboard, follow this workflow. These steps assume you are starting with a plugin already published in Plugin Central, and you want to make improvements to the dashboard portion of your plugin. Go to one.newrelic.com > More > Plugins, and select your plugin's name. From your plugin's summary page, select Edit > Dashboards, then add, edit, or delete dashboards. When you are ready to publish: From your plugin's summary page, select Publish. At this point, all of your plugin users will see your new dashboard version the next time they select your plugin's dashboard in the New Relic UI.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 218.92917,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Maintain <em>plugin</em> versions",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e956fe7b9d28f062a07b5"
    },
    {
      "sections": [
        "Use the New Relic Platform Installer (NPI) utility",
        "Important",
        "Limited access to legacy plugins",
        "NPI compatibility requirements",
        "Distribution",
        "NPI command line utility",
        "Updates",
        "Privately-published plugins"
      ],
      "title": "Use the New Relic Platform Installer (NPI) utility",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "a8a5c308f1e4f69ea801fd595bc7b679ae5eaac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/use-new-relic-platform-installer-npi-utility/",
      "published_at": "2021-06-09T19:04:31Z",
      "updated_at": "2021-03-16T11:00:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. NPI compatibility requirements The New Relic Platform Installer (NPI) is a command line utility for plugins in Plugin Central. It allows users to easily download, configure, and manage a plugin by installing it with a single command. The NPI is available for plugins written with Java or .NET plugin SDKs. If you are a plugin developer, follow these steps to meet the NPI requirements for a consistent installation experience, and publish your plugin in Plugin Central as NPI Compatible. In order to make your plugin NPI-compatible, make sure it meets each of these requirements: NPI compatibility Requirements Writing your plugin Java: See the Java SDK README file in GitHub for plugins. .NET: See the .NET SDK README file in GitHub for plugins. Packaging Use the tar.gz or zip compression protocol to package your plugin. Executable Name the executable file plugin.jar (for Java) or plugin.exe (for .NET), and store it in the root of your plugin folder. Code Do not use any relative references in your code. Configuration files Create a ./config directory containing a plugin.template.json file and a newrelic.template.json file. Make sure that plugin configuration is read from the plugin.json file in the ./config directory. For more information, refer to the README in GitHub. Distribution Once your plugin is NPI-compatible from a code perspective, place it somewhere that is accessible for consumers to download. For example, add the compressed distributable to a dist folder in your GitHub repository. When your plugin is ready for distribution, follow standard procedures to publish it in Plugin Central. Be sure to select the Platform Installer (NPI) distribution option. NPI command line utility When users select an NPI Compatible plugin from Plugin Central, they also have the option to download the NPI tool. The tool allows users to easily download, configure, and manage a plugin. They can also use a series of commands to manage their plugins or pass the --help flag for more information about available options. Updates After you create and publish an NPI-compatible plugin, follow standard procedures to update it as needed. Then, when you publish the updated plugin, the NPI tool automatically will pick up your most current version for users who have installed your NPI-compatible plugin. Privately-published plugins In general, the NPI tool will try to pull download (manifest) information from New Relic's Plugins service. You can also provide a file named manifest.json in the config directory of your NPI installation to provide this information. Use this file format: [ { \"guid\": \"arbitrary_identifier\", \"download_url\": \"https://plugin.download.url.com\", \"publisher\": \"New Relic Inc.\", \"version\": \"1.0.1\", \"installer_compatible\": true, \"implementation\": \"Java\" }, { \"guid\": \"arbitrary_identifier2\", \"download_url\": \"https://plugin2.download.url.com\", \"publisher\": \"New Relic Inc.\", \"version\": \"2.0.0\", \"installer_compatible\": true, \"implementation\": \".NET\" } ] Copy After you set this up, you can run all the same commands with your private plugin's GUID. To install or fetch a plugin, you must pass the --untrusted flag to allow downloading plugins from a local file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 218.926,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " command. The NPI is available for <em>plugins</em> written with Java or .NET <em>plugin</em> SDKs. If you are a <em>plugin</em> <em>developer</em>, follow these steps to meet the NPI requirements for a consistent installation experience, and publish your <em>plugin</em> in <em>Plugin</em> Central as NPI Compatible. In order to make your <em>plugin</em> NPI-compatible"
      },
      "id": "603eae7c28ccbc8e3ceba799"
    },
    {
      "sections": [
        "Plugin summary metrics and dashboards",
        "Important",
        "Limited access to legacy plugins",
        "Plugin summary metrics",
        "Add summary metrics",
        "Optional: Add alert summary metrics",
        "Time periods for metrics",
        "Plugin dashboards",
        "View the default dashboard",
        "Add dashboards",
        "Avoid metric grouping problems",
        "Change or delete dashboards",
        "Plugin settings",
        "Initial settings",
        "Additional updates"
      ],
      "title": "Plugin summary metrics and dashboards",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "a0163b9f1efd59d8c50c60a3b8b5b5419f336824",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/plugin-summary-metrics-dashboards/",
      "published_at": "2021-06-09T19:04:32Z",
      "updated_at": "2021-03-16T11:00:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin summary metrics Each component or instance for your plugin in Plugin Central can have summary metrics, such as average, total, minimum, maximum, standard deviation, rate, or count. The summary metrics appear on your plugin's Summary page in the Plugins user interface. The summary metric dashboards are also useful as a debugging tool to review all of the metrics sent by your plugin agent to New Relic. To view dashboard details about any component or instance, select any summary metric value for it. You can also change various plugin settings in the UI. When you first create a summary metric for your plugin, this triggers a change to New Relic's collectors. This may cause your running components (instances) to stop showing summary metrics for a short period of time. For example, if you add a new summary metric to your plugin, any components (instances) you are monitoring that use that plugin may have all summary metrics temporarily cleared. This will also close any outstanding related events and alerts. Depending on the components and other factors, you may need to wait fifteen minutes or more before summary metrics appear again. Add summary metrics To add a summary metric: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select Edit. From the Summary metrics section of the plugin's editing page, select Add. If your plugin contains only one summary metric, you can identify the metric in the chart's title and then hide the legend (colored bars that label the metrics) that normally appears below the chart. Also, if you define negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Optional: Add alert summary metrics Plugin publishers and users can define alert conditions from the plugin's Summary page by selecting the component's or instance's settings icon. The alerts will be activated when the summary metric's specified values fall above the thresholds. The Recent events list for the plugin's components (instances) appears on the plugin's Summary page. To view additional details about an alert, select its name. Sometimes there may be a delay between the time that a summary metric event is triggered and the time that New Relic creates the corresponding incident and sends the alert notification. There are several timing mechanisms at work, such as collector caching, summary metric event timing, delayed job queues, email delivery, etc. Depending on the situation, this delay could be up to ten or fifteen minutes before the alert notification is sent. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metrics. This is why you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show various time periods. You can also deliver data at one-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, New Relic aggregates when there is too much data, but it does not extrapolate if there is not enough data. In order for data to appear on a 30-minute chart, make sure at least one data point is within the range, or no data will appear. Recommendation: Use a 60-second polling interval. Default dashboards show 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Plugin dashboards You can create dashboards to visualize the data generated by your plugins in New Relic. You must be a plugin author or publisher to add, edit, and delete dashboards. Plugin users cannot customize the plugin dashboards they acquire from Plugin Central. View the default dashboard New plugins automatically include a default dashboard. Once your plugin agent starts sending data to New Relic's Plugin API, you can view the default dashboard in New Relic's UI and change it as needed. To view the default dashboard for your plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select a component (instance). Add dashboards In addition to the default dashboard, you can create as many additional dashboards for your plugin as you want. After you publish your plugin, all of these dashboards and summary metrics are available to plugin users. The customized dashboards that display plugin data are part of the plugin. Plugin users cannot add their own dashboards. This needs to be done by the author or publisher as part of a plugin fork or update. To create additional dashboards: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, select Edit. From the Dashboards section of the plugin's editing page, select Add. Specify a title for your dashboard, select a page layout, then select Create. From the new dashboard page, type a label for the new chart or table, and then select Add chart or table. Edit the chart, including the case-sensitive metrics (for example, a metric name you see in the agent output, such as Component/SIN[Value]) and value (for example, Total value). To use additional options (for example, number format), select Advanced options. Optional: Use a wildcard (*) to show multiple metrics on a chart. For example, to include the metric component/foo/bar and the metric component/foo/xyz, use the metric name component/foo/*.f Select Save and Preview to preview the chart or table. Or, select Save and finish when you are satisfied with the appearance of the chart or table. Review the new chart that appears on the customized dashboard, and continue adding, editing, or rearranging charts and tables on your dashboard as needed. When finished, select I'm done editing. Avoid metric grouping problems Wildcards provide flexibility for how your metric names appear. When creating a chart, consider whether you want the metric names to appear with identical namespace segments, or include a wildcard to strip the namespace segments. For example: Component/Database/Metric1 Component/Database/Metric2 Component/Database/Metric3 Copy OR Metric1 Metric2 Metric3 Copy To prevent problems with metric grouping issues, avoid defining values that result in excessively large numbers. For example, if a plugin's chart value is 1 widget and New Relic collects 3 million widgets, change the value to 1 million widgets so that the chart can show millions of widgets more efficiently. Also, avoid creating high-precision values containing many digits after a decimal point. Change or delete dashboards To update or remove any plugin dashboard, including the default: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, select Edit. Keep a stable production version of your plugin that users can acquire from Plugin Central, and create a development version that you are actively improving, testing, browsing the presentation of metrics on your custom dashboard, or otherwise have in a non-production state. Plugin settings You can change several plugin settings before you publish the plugin. You can also make changes at any time to published plugins. Initial settings Before you publish your plugin, you can: Select a generic plugin icon for the Plugins UI. This is not the same as the URL for your customized branding image you may choose as part of the publishing process. Change your plugin's label for the Plugins UI. By default, this is the first 11 characters of the plugin's Title field. Change your plugin's title. The default title is your plugin's GUID. Add, change, or delete your plugin's summary metrics and their alert conditions. Add, change, or delete your plugin's dashboards. Exception: You can edit but you cannnot delete your plugin's default dashboard. To add, change, or delete plugin settings: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select Edit. When finished, be sure to save your changes. Additional updates After you publish your plugin, you can continue making changes. Recommendation: To avoid development and testing impacts on your users, maintain development and production versions. To make additional updates to your plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From your plugin's Summary page, select Edit, Publish, or your component's (instance's) settings icon as applicable. Update the settings as needed, and then save your changes. When you are ready to release this version: Go to one.newrelic.com > More > Plugins, select your plugin, and then select Publish. Here is a summary of where to view or make changes to your plugin. Type of change Edit Publish Settings Agent: Change the plugin's version (n/a in UI). Alert conditions, customized for components (instances) Alert conditions, defaults for summary metrics Branding image (URL) that appears in Plugin Central Components (instances): Remove from your plugin Dashboards: Add, edit, delete Description Developer Terms of Service Icon that appears in the Plugins UI Name for plugin (label) in the Plugins UI Name for plugin (title) in Plugin Central NPI Compatible designation Publisher's name Summary metrics: Add, edit, delete URL for installation and setup instructions URL for your support site URL for your website (\"About us\")",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 218.926,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> summary metrics and dashboards",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " Branding image (URL) that appears in <em>Plugin</em> Central Components (instances): Remove from your <em>plugin</em> Dashboards: Add, edit, delete Description <em>Developer</em> Terms of Service Icon that appears in the <em>Plugins</em> UI Name for <em>plugin</em> (label) in the <em>Plugins</em> UI Name for <em>plugin</em> (title) in <em>Plugin</em> Central NPI"
      },
      "id": "603ea2bc196a6740f7a83de2"
    }
  ],
  "/docs/plugins/plugin-developer-resources/develop-plugins/create-plugin": [
    {
      "sections": [
        "Maintain plugin versions",
        "Important",
        "Limited access to legacy plugins",
        "Plugin agents and dashboards",
        "Agent versioning",
        "Update a SaaS agent",
        "Update an on-premises agent",
        "Update plugin dashboards"
      ],
      "title": "Maintain plugin versions",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "70efb125146afeda3c6e672e6c9b0e769ce4eb37",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/maintain-plugin-versions/",
      "published_at": "2021-06-09T19:03:17Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin agents and dashboards As a plugin publisher, typically you need to have two versions of your plugin running simultaneously: The stable production version that users can acquire from Plugin Central in New Relic A development version that you are actively improving, testing, or otherwise have in a non-production state Plugins contain two versioned parts: The agent collects metrics from the source and transmits those metrics to the Plugin API. The dashboard is a collection of visualizations and configurations that you make in the Plugins user interface. Plugin users view this automatically from their own Plugins dashboards in New Relic. Versioning works differently for these two parts. Agent versioning There are two types of plugin agents, with two different versioning situations: SaaS agents are agents that you, the SaaS application developer, deploy and run on behalf of your SaaS users. On-premises agents are agents that your users install into their systems. Plugin agents Versioning SaaS agents There is only one copy of this agent running anywhere (the one you developed and deployed on behalf of your users), so whatever version you are running will inherently be the latest version. Whatever metrics the latest version is sending to New Relic will be the metrics available to (but not necessarily charted for) your users in their Plugins dashboards. On-premises agents When you publish a new version of your agent, all of your plugin users' dashboards will note that a new agent version is available. They will be directed to your Plugin Central listing, where they can download and install the new version of your agent. Recommendation: Provide a streamlined agent update procedure in your own documentation. Update a SaaS agent This procedure assumes: You are starting with a plugin published to the Plugin Central (the production version). Your plugin has a SaaS agent running inside your app, and you want to make improvements to the SaaS agent portion of your plugin. As part of your normal development process you have a second dev version of your agent running, which is not published in Plugin Central. Your plugin's dev version uses a different GUID (for example, com.company.service.plugin.dev). Both your dev and your production plugins have the same plugin dashboards. To update your plugin's SaaS agent: Make changes to your dev agent. Do not change the version number or GUID of your dev agent in the agent config file. When you are ready to make your latest dev agent the production agent for your customers, follow your standard procedures to deploy your dev code to production. If applicable, make any necessary changes to your plugin's dashboards. Your users will receive no notification, and they do not need to take any action. You didn't change the version number, so your agent changes are transparent to your users. Update an on-premises agent This procedure assumes you are starting with a plugin published in Plugin Central, and you want to make improvements to the on-premises agent portion of your plugin. Make a copy of your agent code. Change the version number in the agent config file. To ensure that New Relic knows two different versions of your agent exist now, run the agent so that it reports metrics to the Plugin API. Continue working on your agent and making improvements, but do not change the version number again. When you are ready to make this new agent version the latest version for your plugin users, save it to the location where you distribute your agent code (for example, GitHub). From the New Relic UI, select your published plugin, select Edit, and then select Save. Select Publish, and then select the new agent version you are publishing. At this point, all of your plugin users will see a notice in the Plugins UI that a new version is available. They will be directed to your listing in Plugin Central, which points to your download location. From there your users can acquire your new agent version. Update plugin dashboards If you add metrics to your agent, be sure to add them to charts on your dashboard, and then save your dashboard and re-publish. All your users will see the new dashboard, and the new metrics will either be populated immediately (if you are running a SaaS agent on their behalf) or as soon as they update their agent (if you are offering an on-premises agent). If you need to migrate dashboards between GUIDs, get help at support.newrelic.com. Otherwise, to update your dashboard, follow this workflow. These steps assume you are starting with a plugin already published in Plugin Central, and you want to make improvements to the dashboard portion of your plugin. Go to one.newrelic.com > More > Plugins, and select your plugin's name. From your plugin's summary page, select Edit > Dashboards, then add, edit, or delete dashboards. When you are ready to publish: From your plugin's summary page, select Publish. At this point, all of your plugin users will see your new dashboard version the next time they select your plugin's dashboard in the New Relic UI.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 218.92917,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Maintain <em>plugin</em> versions",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e956fe7b9d28f062a07b5"
    },
    {
      "sections": [
        "Checklist for developing plugins",
        "Important",
        "Limited access to legacy plugins",
        "Plan your plugin",
        "Create your plugin",
        "Publish your plugin",
        "Documentation",
        "\"About us\" URL",
        "Branding image URL",
        "Developer terms of service",
        "Publication",
        "Versions",
        "Plugin support",
        "Support for your plugin users",
        "Escalated plugin support"
      ],
      "title": "Checklist for developing plugins",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "c60d87c25a2c835d2b7e44340bddb678117ddd07",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/checklist-developing-plugins/",
      "published_at": "2021-06-09T19:03:17Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plan your plugin When planning your plugin for Plugin Central: Sketch the types of metrics you want to collect and how you want to present them on dashboards. Include any necessary mathematical calculations. Sketch the types of summary metrics you want to collect and how you want to present them on the plugin's summary page. Include any necessary mathematical calculations. Optional: Define alert conditions for your metrics. Optional: If you want to receive alert notifications for your plugin, verify the email address to be used and confirm any other notification options as necessary. Decide whether to develop the plugin with one of the plugin SDKs or to use the Plugin API. Create your plugin When creating your plugin for Plugin Central: Select a unique, meaningful GUID name. Write the plugin agent. Test your plugin, including summary metrics, customized dashboards, alert conditions, and your process to disable or uninstall your plugin. Consider writing Chef and Puppet installation scripts to make plugin installation easier. Publish your plugin The following items are required for plugins published through New Relic's Plugin Central. If you do not plan to make your plugin publicly accessible to users, some of these items are not applicable. Documentation When documenting your plugin, include requirements and procedures to install, configure, use, troubleshoot, uninstall, and contact your support resources. Documentation requirements Guidelines Title Descriptive title; for example, \"Wikipedia plugin for New Relic.\" Table of contents List of main topics with anchors to each section. Description Explanation of how the plugin can be used in New Relic to monitor and improve the associated software's performance. What systems does it monitor (for example, memcache, versions X-Y, on the local host, sets and gets)? What problem does it solve? Plugin requirements Requirements or dependencies; for example: Internet access via SSL (HTTPS) Supported operating systems Minimum environment requirements (Java, Ruby, glibc, etc.) Supported monitored systems Any known limitations Metrics source documentation Plugin users may not be familiar with all the metrics displayed, their source, what the metrics mean, etc. If you have documentation that provides these details, be sure to include links to that information. For example: Description of data expected from source, frequency, mechanism, etc.; for example, \"Data is read from a file socket and exported from the source once per second.\") Description of data itself; for example, a well-formatted JSON such as {X: {y: z}} Description of data being sent; for example, average response time in milliseconds, of a set or get, taken over a minute, recorded from the specified data Installation Step-by-step procedures to obtain and install the plugin. Do not require su or sudo permission in order to install your agent or support software unless absolutely required. These requirements must be limited in scope and well documented. Configuration Instructions to configure the plugin, expected format, and how to set them. Include how to find the user's New Relic license key. Troubleshooting Include instructions as applicable; for example: How to resolve common problems: Unable to connect to New Relic, unable to connect to the monitored server, incorrect license key How to enable logging or verbose logging How to restart the plugin How to test connectivity to New Relic How to handle errors; for example, failure to read, aggregate, or send data Disabling and uninstalling Questions to consider: Are there other dependencies before disabling or uninstalling the plugin? For example, are there any special procedures your plugin users need to know in order to have their operating system stop the process from running, so that they can remove components (instances) from their installed plugin? Can you temporarily disable and then re-enable the plugin (for example, for troubleshooting or updating it), or must you completely uninstall and reinstall? Can the uninstall procedure be done from a command line? Support resources Make a plan for supporting your plugin and identifying a support URL for users. In your plugin's support information, describe how users can contact you for support in whatever way works best for you: documentation website, phone, email, forum, Twitter, ticketing system, etc. \"About us\" URL Identify the About Us URL for your plugin. Branding image URL Identify a URL to a branding image for when you publish your plugin. Follow these formatting guidelines: Set the image size to 64 x 64px. Save as a .png or .gif file. Use transparency for the background unless it is a square icon. Design the image to display well on both white and black backgrounds. Developer terms of service Review the Developer Terms of Service for New Relic Plugins. A link to this document appears on your plugin's Publish page in the UI. Publication Plugin Central is the repository of plugins available in New Relic. If you want to distribute your plugin through Plugin Central, make sure your documentation and support plans are in place, then select your plugin's Publish option in the New Relic UI. The Publish page in the UI prompts you to verify all requirements. As soon as your plugin is published, all of its dashboards and summary metrics are available for your plugin users. The Distribution method identifies how users can obtain your plugin from Plugin Central. File download: Most developers typically select this option for plugin setup and installation. Webpage link: SaaS providers typically select this option for plugin configuration and identify their website's landing page URL. Platform Installer (NPI): If you use the New Relic Platform Installer (NPI) command line utility to package your plugin, select this option. You can also publish a plugin without listing it in Plugin Central; for example, if you want to beta test it first, or if you only want specific users to be able to use it. When publishing an unlisted plugin, make sure the checkbox option in the UI for List this plugin in Plugin Central is not selected. You will need to communicate directly with your users when your unlisted plugin is added, updated, or removed. Versions You can update and re-publish your plugin as often as you want. Every time you publish changes to your plugin and list them in Plugin Central, the changes are immediately visible in Plugin Central. In addition, your published plugin changes typically appear in New Relic's website within five minutes. Recommendation: To avoid development and testing impacts on your users, maintain dev and production versions when updating your plugin. Plugin support Plugin publishers are responsible for providing first-line support if users have problems using their plugin. This includes verifying correct data acquisition and transmission. If problems continue with getting the expected data into New Relic's user interface after you complete your troubleshooting procedures, then you (not your users) can escalate the problem to New Relic. We will work with you to resolve the problem, and then you can communicate the solution to your users. Support for your plugin users Follow these guidelines for supporting your plugin's users by confirming data collection and transmission. Check that the plugin configuration is correct, including: Necessary credentials for the target system IP addresses or DNS names for the target system Any settings that might affect data acquisition Review transmission logs for errors, including: Authentication errors Connection errors Error responses from the target system Review transaction logs for useful data. How much data is being collected? Does the data make sense? Verify if the plugin is converting acquired data into useful metrics. Do the metrics make sense? Would the metrics make a good chart? Are the metrics being aggregated into valid JSON? Is the JSON size within limits? Confirm transmission of the plugin data. If you are using an SDK for New Relic Plugins and the Plugin API, does your data transmission conform to New Relic's rate limits? Are the 50X codes sporadic or continuous? Do your transaction logs indicate any data transmission problems? Escalated plugin support If you have verified good data acquisition and transmission, but there still is trouble getting the expected data in New Relic's user interface, escalate the support request to New Relic on behalf of your users. Do not have your users contact us. Include as much of the following information as possible: Plugin support requests Notes User affected by the problem Information such as: Permalink to the plugin page where you see the problem, so that we can view the endpoint. Recommendation: Ask the user if you can add your user ID to the New Relic account so that you can obtain a permalink yourself. User's New Relic account ID. If you do not have the user's permalink or account ID, include the user's email address they used to sign up for their New Relic account. (This may be a different email than the one they used to contact you.) User's name and New Relic account name. Detailed description of the problem For example: The user can see data, but it's not the data they are expecting. The user can see no data at all. The user configured and started the plugin correctly, but it does not appear in the user interface for New Relic Plugins. Any other specific details about the problem. Other evidence This includes: Explain the troubleshooting you have done so far and what you expected to happen in contrast to the actual results. Provide any available permalinks, screenshots, and log files. Summarize your understanding of the problem. We will work with you to characterize and resolve the problem. Keep the user updated with progress. After we provide you with a resolution, ask the user to verify the results.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 218.92917,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Checklist for <em>developing</em> <em>plugins</em>",
        "sections": "Checklist for <em>developing</em> <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " white and black backgrounds. <em>Developer</em> terms of service Review the <em>Developer</em> Terms of Service for New Relic <em>Plugins</em>. A link to this document appears on your <em>plugin</em>&#x27;s Publish page in the UI. Publication <em>Plugin</em> Central is the repository of <em>plugins</em> available in New Relic. If you want to distribute your"
      },
      "id": "603ec26f64441fe6484e885f"
    },
    {
      "sections": [
        "Use the New Relic Platform Installer (NPI) utility",
        "Important",
        "Limited access to legacy plugins",
        "NPI compatibility requirements",
        "Distribution",
        "NPI command line utility",
        "Updates",
        "Privately-published plugins"
      ],
      "title": "Use the New Relic Platform Installer (NPI) utility",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "a8a5c308f1e4f69ea801fd595bc7b679ae5eaac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/use-new-relic-platform-installer-npi-utility/",
      "published_at": "2021-06-09T19:04:31Z",
      "updated_at": "2021-03-16T11:00:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. NPI compatibility requirements The New Relic Platform Installer (NPI) is a command line utility for plugins in Plugin Central. It allows users to easily download, configure, and manage a plugin by installing it with a single command. The NPI is available for plugins written with Java or .NET plugin SDKs. If you are a plugin developer, follow these steps to meet the NPI requirements for a consistent installation experience, and publish your plugin in Plugin Central as NPI Compatible. In order to make your plugin NPI-compatible, make sure it meets each of these requirements: NPI compatibility Requirements Writing your plugin Java: See the Java SDK README file in GitHub for plugins. .NET: See the .NET SDK README file in GitHub for plugins. Packaging Use the tar.gz or zip compression protocol to package your plugin. Executable Name the executable file plugin.jar (for Java) or plugin.exe (for .NET), and store it in the root of your plugin folder. Code Do not use any relative references in your code. Configuration files Create a ./config directory containing a plugin.template.json file and a newrelic.template.json file. Make sure that plugin configuration is read from the plugin.json file in the ./config directory. For more information, refer to the README in GitHub. Distribution Once your plugin is NPI-compatible from a code perspective, place it somewhere that is accessible for consumers to download. For example, add the compressed distributable to a dist folder in your GitHub repository. When your plugin is ready for distribution, follow standard procedures to publish it in Plugin Central. Be sure to select the Platform Installer (NPI) distribution option. NPI command line utility When users select an NPI Compatible plugin from Plugin Central, they also have the option to download the NPI tool. The tool allows users to easily download, configure, and manage a plugin. They can also use a series of commands to manage their plugins or pass the --help flag for more information about available options. Updates After you create and publish an NPI-compatible plugin, follow standard procedures to update it as needed. Then, when you publish the updated plugin, the NPI tool automatically will pick up your most current version for users who have installed your NPI-compatible plugin. Privately-published plugins In general, the NPI tool will try to pull download (manifest) information from New Relic's Plugins service. You can also provide a file named manifest.json in the config directory of your NPI installation to provide this information. Use this file format: [ { \"guid\": \"arbitrary_identifier\", \"download_url\": \"https://plugin.download.url.com\", \"publisher\": \"New Relic Inc.\", \"version\": \"1.0.1\", \"installer_compatible\": true, \"implementation\": \"Java\" }, { \"guid\": \"arbitrary_identifier2\", \"download_url\": \"https://plugin2.download.url.com\", \"publisher\": \"New Relic Inc.\", \"version\": \"2.0.0\", \"installer_compatible\": true, \"implementation\": \".NET\" } ] Copy After you set this up, you can run all the same commands with your private plugin's GUID. To install or fetch a plugin, you must pass the --untrusted flag to allow downloading plugins from a local file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 218.926,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " command. The NPI is available for <em>plugins</em> written with Java or .NET <em>plugin</em> SDKs. If you are a <em>plugin</em> <em>developer</em>, follow these steps to meet the NPI requirements for a consistent installation experience, and publish your <em>plugin</em> in <em>Plugin</em> Central as NPI Compatible. In order to make your <em>plugin</em> NPI-compatible"
      },
      "id": "603eae7c28ccbc8e3ceba799"
    }
  ],
  "/docs/plugins/plugin-developer-resources/develop-plugins/maintain-plugin-versions": [
    {
      "sections": [
        "Checklist for developing plugins",
        "Important",
        "Limited access to legacy plugins",
        "Plan your plugin",
        "Create your plugin",
        "Publish your plugin",
        "Documentation",
        "\"About us\" URL",
        "Branding image URL",
        "Developer terms of service",
        "Publication",
        "Versions",
        "Plugin support",
        "Support for your plugin users",
        "Escalated plugin support"
      ],
      "title": "Checklist for developing plugins",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "c60d87c25a2c835d2b7e44340bddb678117ddd07",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/checklist-developing-plugins/",
      "published_at": "2021-06-09T19:03:17Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plan your plugin When planning your plugin for Plugin Central: Sketch the types of metrics you want to collect and how you want to present them on dashboards. Include any necessary mathematical calculations. Sketch the types of summary metrics you want to collect and how you want to present them on the plugin's summary page. Include any necessary mathematical calculations. Optional: Define alert conditions for your metrics. Optional: If you want to receive alert notifications for your plugin, verify the email address to be used and confirm any other notification options as necessary. Decide whether to develop the plugin with one of the plugin SDKs or to use the Plugin API. Create your plugin When creating your plugin for Plugin Central: Select a unique, meaningful GUID name. Write the plugin agent. Test your plugin, including summary metrics, customized dashboards, alert conditions, and your process to disable or uninstall your plugin. Consider writing Chef and Puppet installation scripts to make plugin installation easier. Publish your plugin The following items are required for plugins published through New Relic's Plugin Central. If you do not plan to make your plugin publicly accessible to users, some of these items are not applicable. Documentation When documenting your plugin, include requirements and procedures to install, configure, use, troubleshoot, uninstall, and contact your support resources. Documentation requirements Guidelines Title Descriptive title; for example, \"Wikipedia plugin for New Relic.\" Table of contents List of main topics with anchors to each section. Description Explanation of how the plugin can be used in New Relic to monitor and improve the associated software's performance. What systems does it monitor (for example, memcache, versions X-Y, on the local host, sets and gets)? What problem does it solve? Plugin requirements Requirements or dependencies; for example: Internet access via SSL (HTTPS) Supported operating systems Minimum environment requirements (Java, Ruby, glibc, etc.) Supported monitored systems Any known limitations Metrics source documentation Plugin users may not be familiar with all the metrics displayed, their source, what the metrics mean, etc. If you have documentation that provides these details, be sure to include links to that information. For example: Description of data expected from source, frequency, mechanism, etc.; for example, \"Data is read from a file socket and exported from the source once per second.\") Description of data itself; for example, a well-formatted JSON such as {X: {y: z}} Description of data being sent; for example, average response time in milliseconds, of a set or get, taken over a minute, recorded from the specified data Installation Step-by-step procedures to obtain and install the plugin. Do not require su or sudo permission in order to install your agent or support software unless absolutely required. These requirements must be limited in scope and well documented. Configuration Instructions to configure the plugin, expected format, and how to set them. Include how to find the user's New Relic license key. Troubleshooting Include instructions as applicable; for example: How to resolve common problems: Unable to connect to New Relic, unable to connect to the monitored server, incorrect license key How to enable logging or verbose logging How to restart the plugin How to test connectivity to New Relic How to handle errors; for example, failure to read, aggregate, or send data Disabling and uninstalling Questions to consider: Are there other dependencies before disabling or uninstalling the plugin? For example, are there any special procedures your plugin users need to know in order to have their operating system stop the process from running, so that they can remove components (instances) from their installed plugin? Can you temporarily disable and then re-enable the plugin (for example, for troubleshooting or updating it), or must you completely uninstall and reinstall? Can the uninstall procedure be done from a command line? Support resources Make a plan for supporting your plugin and identifying a support URL for users. In your plugin's support information, describe how users can contact you for support in whatever way works best for you: documentation website, phone, email, forum, Twitter, ticketing system, etc. \"About us\" URL Identify the About Us URL for your plugin. Branding image URL Identify a URL to a branding image for when you publish your plugin. Follow these formatting guidelines: Set the image size to 64 x 64px. Save as a .png or .gif file. Use transparency for the background unless it is a square icon. Design the image to display well on both white and black backgrounds. Developer terms of service Review the Developer Terms of Service for New Relic Plugins. A link to this document appears on your plugin's Publish page in the UI. Publication Plugin Central is the repository of plugins available in New Relic. If you want to distribute your plugin through Plugin Central, make sure your documentation and support plans are in place, then select your plugin's Publish option in the New Relic UI. The Publish page in the UI prompts you to verify all requirements. As soon as your plugin is published, all of its dashboards and summary metrics are available for your plugin users. The Distribution method identifies how users can obtain your plugin from Plugin Central. File download: Most developers typically select this option for plugin setup and installation. Webpage link: SaaS providers typically select this option for plugin configuration and identify their website's landing page URL. Platform Installer (NPI): If you use the New Relic Platform Installer (NPI) command line utility to package your plugin, select this option. You can also publish a plugin without listing it in Plugin Central; for example, if you want to beta test it first, or if you only want specific users to be able to use it. When publishing an unlisted plugin, make sure the checkbox option in the UI for List this plugin in Plugin Central is not selected. You will need to communicate directly with your users when your unlisted plugin is added, updated, or removed. Versions You can update and re-publish your plugin as often as you want. Every time you publish changes to your plugin and list them in Plugin Central, the changes are immediately visible in Plugin Central. In addition, your published plugin changes typically appear in New Relic's website within five minutes. Recommendation: To avoid development and testing impacts on your users, maintain dev and production versions when updating your plugin. Plugin support Plugin publishers are responsible for providing first-line support if users have problems using their plugin. This includes verifying correct data acquisition and transmission. If problems continue with getting the expected data into New Relic's user interface after you complete your troubleshooting procedures, then you (not your users) can escalate the problem to New Relic. We will work with you to resolve the problem, and then you can communicate the solution to your users. Support for your plugin users Follow these guidelines for supporting your plugin's users by confirming data collection and transmission. Check that the plugin configuration is correct, including: Necessary credentials for the target system IP addresses or DNS names for the target system Any settings that might affect data acquisition Review transmission logs for errors, including: Authentication errors Connection errors Error responses from the target system Review transaction logs for useful data. How much data is being collected? Does the data make sense? Verify if the plugin is converting acquired data into useful metrics. Do the metrics make sense? Would the metrics make a good chart? Are the metrics being aggregated into valid JSON? Is the JSON size within limits? Confirm transmission of the plugin data. If you are using an SDK for New Relic Plugins and the Plugin API, does your data transmission conform to New Relic's rate limits? Are the 50X codes sporadic or continuous? Do your transaction logs indicate any data transmission problems? Escalated plugin support If you have verified good data acquisition and transmission, but there still is trouble getting the expected data in New Relic's user interface, escalate the support request to New Relic on behalf of your users. Do not have your users contact us. Include as much of the following information as possible: Plugin support requests Notes User affected by the problem Information such as: Permalink to the plugin page where you see the problem, so that we can view the endpoint. Recommendation: Ask the user if you can add your user ID to the New Relic account so that you can obtain a permalink yourself. User's New Relic account ID. If you do not have the user's permalink or account ID, include the user's email address they used to sign up for their New Relic account. (This may be a different email than the one they used to contact you.) User's name and New Relic account name. Detailed description of the problem For example: The user can see data, but it's not the data they are expecting. The user can see no data at all. The user configured and started the plugin correctly, but it does not appear in the user interface for New Relic Plugins. Any other specific details about the problem. Other evidence This includes: Explain the troubleshooting you have done so far and what you expected to happen in contrast to the actual results. Provide any available permalinks, screenshots, and log files. Summarize your understanding of the problem. We will work with you to characterize and resolve the problem. Keep the user updated with progress. After we provide you with a resolution, ask the user to verify the results.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 218.92917,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Checklist for <em>developing</em> <em>plugins</em>",
        "sections": "Checklist for <em>developing</em> <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " white and black backgrounds. <em>Developer</em> terms of service Review the <em>Developer</em> Terms of Service for New Relic <em>Plugins</em>. A link to this document appears on your <em>plugin</em>&#x27;s Publish page in the UI. Publication <em>Plugin</em> Central is the repository of <em>plugins</em> available in New Relic. If you want to distribute your"
      },
      "id": "603ec26f64441fe6484e885f"
    },
    {
      "sections": [
        "Use the New Relic Platform Installer (NPI) utility",
        "Important",
        "Limited access to legacy plugins",
        "NPI compatibility requirements",
        "Distribution",
        "NPI command line utility",
        "Updates",
        "Privately-published plugins"
      ],
      "title": "Use the New Relic Platform Installer (NPI) utility",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "a8a5c308f1e4f69ea801fd595bc7b679ae5eaac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/use-new-relic-platform-installer-npi-utility/",
      "published_at": "2021-06-09T19:04:31Z",
      "updated_at": "2021-03-16T11:00:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. NPI compatibility requirements The New Relic Platform Installer (NPI) is a command line utility for plugins in Plugin Central. It allows users to easily download, configure, and manage a plugin by installing it with a single command. The NPI is available for plugins written with Java or .NET plugin SDKs. If you are a plugin developer, follow these steps to meet the NPI requirements for a consistent installation experience, and publish your plugin in Plugin Central as NPI Compatible. In order to make your plugin NPI-compatible, make sure it meets each of these requirements: NPI compatibility Requirements Writing your plugin Java: See the Java SDK README file in GitHub for plugins. .NET: See the .NET SDK README file in GitHub for plugins. Packaging Use the tar.gz or zip compression protocol to package your plugin. Executable Name the executable file plugin.jar (for Java) or plugin.exe (for .NET), and store it in the root of your plugin folder. Code Do not use any relative references in your code. Configuration files Create a ./config directory containing a plugin.template.json file and a newrelic.template.json file. Make sure that plugin configuration is read from the plugin.json file in the ./config directory. For more information, refer to the README in GitHub. Distribution Once your plugin is NPI-compatible from a code perspective, place it somewhere that is accessible for consumers to download. For example, add the compressed distributable to a dist folder in your GitHub repository. When your plugin is ready for distribution, follow standard procedures to publish it in Plugin Central. Be sure to select the Platform Installer (NPI) distribution option. NPI command line utility When users select an NPI Compatible plugin from Plugin Central, they also have the option to download the NPI tool. The tool allows users to easily download, configure, and manage a plugin. They can also use a series of commands to manage their plugins or pass the --help flag for more information about available options. Updates After you create and publish an NPI-compatible plugin, follow standard procedures to update it as needed. Then, when you publish the updated plugin, the NPI tool automatically will pick up your most current version for users who have installed your NPI-compatible plugin. Privately-published plugins In general, the NPI tool will try to pull download (manifest) information from New Relic's Plugins service. You can also provide a file named manifest.json in the config directory of your NPI installation to provide this information. Use this file format: [ { \"guid\": \"arbitrary_identifier\", \"download_url\": \"https://plugin.download.url.com\", \"publisher\": \"New Relic Inc.\", \"version\": \"1.0.1\", \"installer_compatible\": true, \"implementation\": \"Java\" }, { \"guid\": \"arbitrary_identifier2\", \"download_url\": \"https://plugin2.download.url.com\", \"publisher\": \"New Relic Inc.\", \"version\": \"2.0.0\", \"installer_compatible\": true, \"implementation\": \".NET\" } ] Copy After you set this up, you can run all the same commands with your private plugin's GUID. To install or fetch a plugin, you must pass the --untrusted flag to allow downloading plugins from a local file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 218.926,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " command. The NPI is available for <em>plugins</em> written with Java or .NET <em>plugin</em> SDKs. If you are a <em>plugin</em> <em>developer</em>, follow these steps to meet the NPI requirements for a consistent installation experience, and publish your <em>plugin</em> in <em>Plugin</em> Central as NPI Compatible. In order to make your <em>plugin</em> NPI-compatible"
      },
      "id": "603eae7c28ccbc8e3ceba799"
    },
    {
      "sections": [
        "Plugin summary metrics and dashboards",
        "Important",
        "Limited access to legacy plugins",
        "Plugin summary metrics",
        "Add summary metrics",
        "Optional: Add alert summary metrics",
        "Time periods for metrics",
        "Plugin dashboards",
        "View the default dashboard",
        "Add dashboards",
        "Avoid metric grouping problems",
        "Change or delete dashboards",
        "Plugin settings",
        "Initial settings",
        "Additional updates"
      ],
      "title": "Plugin summary metrics and dashboards",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "a0163b9f1efd59d8c50c60a3b8b5b5419f336824",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/plugin-summary-metrics-dashboards/",
      "published_at": "2021-06-09T19:04:32Z",
      "updated_at": "2021-03-16T11:00:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin summary metrics Each component or instance for your plugin in Plugin Central can have summary metrics, such as average, total, minimum, maximum, standard deviation, rate, or count. The summary metrics appear on your plugin's Summary page in the Plugins user interface. The summary metric dashboards are also useful as a debugging tool to review all of the metrics sent by your plugin agent to New Relic. To view dashboard details about any component or instance, select any summary metric value for it. You can also change various plugin settings in the UI. When you first create a summary metric for your plugin, this triggers a change to New Relic's collectors. This may cause your running components (instances) to stop showing summary metrics for a short period of time. For example, if you add a new summary metric to your plugin, any components (instances) you are monitoring that use that plugin may have all summary metrics temporarily cleared. This will also close any outstanding related events and alerts. Depending on the components and other factors, you may need to wait fifteen minutes or more before summary metrics appear again. Add summary metrics To add a summary metric: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select Edit. From the Summary metrics section of the plugin's editing page, select Add. If your plugin contains only one summary metric, you can identify the metric in the chart's title and then hide the legend (colored bars that label the metrics) that normally appears below the chart. Also, if you define negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Optional: Add alert summary metrics Plugin publishers and users can define alert conditions from the plugin's Summary page by selecting the component's or instance's settings icon. The alerts will be activated when the summary metric's specified values fall above the thresholds. The Recent events list for the plugin's components (instances) appears on the plugin's Summary page. To view additional details about an alert, select its name. Sometimes there may be a delay between the time that a summary metric event is triggered and the time that New Relic creates the corresponding incident and sends the alert notification. There are several timing mechanisms at work, such as collector caching, summary metric event timing, delayed job queues, email delivery, etc. Depending on the situation, this delay could be up to ten or fifteen minutes before the alert notification is sent. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metrics. This is why you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show various time periods. You can also deliver data at one-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, New Relic aggregates when there is too much data, but it does not extrapolate if there is not enough data. In order for data to appear on a 30-minute chart, make sure at least one data point is within the range, or no data will appear. Recommendation: Use a 60-second polling interval. Default dashboards show 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Plugin dashboards You can create dashboards to visualize the data generated by your plugins in New Relic. You must be a plugin author or publisher to add, edit, and delete dashboards. Plugin users cannot customize the plugin dashboards they acquire from Plugin Central. View the default dashboard New plugins automatically include a default dashboard. Once your plugin agent starts sending data to New Relic's Plugin API, you can view the default dashboard in New Relic's UI and change it as needed. To view the default dashboard for your plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select a component (instance). Add dashboards In addition to the default dashboard, you can create as many additional dashboards for your plugin as you want. After you publish your plugin, all of these dashboards and summary metrics are available to plugin users. The customized dashboards that display plugin data are part of the plugin. Plugin users cannot add their own dashboards. This needs to be done by the author or publisher as part of a plugin fork or update. To create additional dashboards: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, select Edit. From the Dashboards section of the plugin's editing page, select Add. Specify a title for your dashboard, select a page layout, then select Create. From the new dashboard page, type a label for the new chart or table, and then select Add chart or table. Edit the chart, including the case-sensitive metrics (for example, a metric name you see in the agent output, such as Component/SIN[Value]) and value (for example, Total value). To use additional options (for example, number format), select Advanced options. Optional: Use a wildcard (*) to show multiple metrics on a chart. For example, to include the metric component/foo/bar and the metric component/foo/xyz, use the metric name component/foo/*.f Select Save and Preview to preview the chart or table. Or, select Save and finish when you are satisfied with the appearance of the chart or table. Review the new chart that appears on the customized dashboard, and continue adding, editing, or rearranging charts and tables on your dashboard as needed. When finished, select I'm done editing. Avoid metric grouping problems Wildcards provide flexibility for how your metric names appear. When creating a chart, consider whether you want the metric names to appear with identical namespace segments, or include a wildcard to strip the namespace segments. For example: Component/Database/Metric1 Component/Database/Metric2 Component/Database/Metric3 Copy OR Metric1 Metric2 Metric3 Copy To prevent problems with metric grouping issues, avoid defining values that result in excessively large numbers. For example, if a plugin's chart value is 1 widget and New Relic collects 3 million widgets, change the value to 1 million widgets so that the chart can show millions of widgets more efficiently. Also, avoid creating high-precision values containing many digits after a decimal point. Change or delete dashboards To update or remove any plugin dashboard, including the default: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, select Edit. Keep a stable production version of your plugin that users can acquire from Plugin Central, and create a development version that you are actively improving, testing, browsing the presentation of metrics on your custom dashboard, or otherwise have in a non-production state. Plugin settings You can change several plugin settings before you publish the plugin. You can also make changes at any time to published plugins. Initial settings Before you publish your plugin, you can: Select a generic plugin icon for the Plugins UI. This is not the same as the URL for your customized branding image you may choose as part of the publishing process. Change your plugin's label for the Plugins UI. By default, this is the first 11 characters of the plugin's Title field. Change your plugin's title. The default title is your plugin's GUID. Add, change, or delete your plugin's summary metrics and their alert conditions. Add, change, or delete your plugin's dashboards. Exception: You can edit but you cannnot delete your plugin's default dashboard. To add, change, or delete plugin settings: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select Edit. When finished, be sure to save your changes. Additional updates After you publish your plugin, you can continue making changes. Recommendation: To avoid development and testing impacts on your users, maintain development and production versions. To make additional updates to your plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From your plugin's Summary page, select Edit, Publish, or your component's (instance's) settings icon as applicable. Update the settings as needed, and then save your changes. When you are ready to release this version: Go to one.newrelic.com > More > Plugins, select your plugin, and then select Publish. Here is a summary of where to view or make changes to your plugin. Type of change Edit Publish Settings Agent: Change the plugin's version (n/a in UI). Alert conditions, customized for components (instances) Alert conditions, defaults for summary metrics Branding image (URL) that appears in Plugin Central Components (instances): Remove from your plugin Dashboards: Add, edit, delete Description Developer Terms of Service Icon that appears in the Plugins UI Name for plugin (label) in the Plugins UI Name for plugin (title) in Plugin Central NPI Compatible designation Publisher's name Summary metrics: Add, edit, delete URL for installation and setup instructions URL for your support site URL for your website (\"About us\")",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 218.926,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> summary metrics and dashboards",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " Branding image (URL) that appears in <em>Plugin</em> Central Components (instances): Remove from your <em>plugin</em> Dashboards: Add, edit, delete Description <em>Developer</em> Terms of Service Icon that appears in the <em>Plugins</em> UI Name for <em>plugin</em> (label) in the <em>Plugins</em> UI Name for <em>plugin</em> (title) in <em>Plugin</em> Central NPI"
      },
      "id": "603ea2bc196a6740f7a83de2"
    }
  ],
  "/docs/plugins/plugin-developer-resources/develop-plugins/plugin-summary-metrics-dashboards": [
    {
      "sections": [
        "Maintain plugin versions",
        "Important",
        "Limited access to legacy plugins",
        "Plugin agents and dashboards",
        "Agent versioning",
        "Update a SaaS agent",
        "Update an on-premises agent",
        "Update plugin dashboards"
      ],
      "title": "Maintain plugin versions",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "70efb125146afeda3c6e672e6c9b0e769ce4eb37",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/maintain-plugin-versions/",
      "published_at": "2021-06-09T19:03:17Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin agents and dashboards As a plugin publisher, typically you need to have two versions of your plugin running simultaneously: The stable production version that users can acquire from Plugin Central in New Relic A development version that you are actively improving, testing, or otherwise have in a non-production state Plugins contain two versioned parts: The agent collects metrics from the source and transmits those metrics to the Plugin API. The dashboard is a collection of visualizations and configurations that you make in the Plugins user interface. Plugin users view this automatically from their own Plugins dashboards in New Relic. Versioning works differently for these two parts. Agent versioning There are two types of plugin agents, with two different versioning situations: SaaS agents are agents that you, the SaaS application developer, deploy and run on behalf of your SaaS users. On-premises agents are agents that your users install into their systems. Plugin agents Versioning SaaS agents There is only one copy of this agent running anywhere (the one you developed and deployed on behalf of your users), so whatever version you are running will inherently be the latest version. Whatever metrics the latest version is sending to New Relic will be the metrics available to (but not necessarily charted for) your users in their Plugins dashboards. On-premises agents When you publish a new version of your agent, all of your plugin users' dashboards will note that a new agent version is available. They will be directed to your Plugin Central listing, where they can download and install the new version of your agent. Recommendation: Provide a streamlined agent update procedure in your own documentation. Update a SaaS agent This procedure assumes: You are starting with a plugin published to the Plugin Central (the production version). Your plugin has a SaaS agent running inside your app, and you want to make improvements to the SaaS agent portion of your plugin. As part of your normal development process you have a second dev version of your agent running, which is not published in Plugin Central. Your plugin's dev version uses a different GUID (for example, com.company.service.plugin.dev). Both your dev and your production plugins have the same plugin dashboards. To update your plugin's SaaS agent: Make changes to your dev agent. Do not change the version number or GUID of your dev agent in the agent config file. When you are ready to make your latest dev agent the production agent for your customers, follow your standard procedures to deploy your dev code to production. If applicable, make any necessary changes to your plugin's dashboards. Your users will receive no notification, and they do not need to take any action. You didn't change the version number, so your agent changes are transparent to your users. Update an on-premises agent This procedure assumes you are starting with a plugin published in Plugin Central, and you want to make improvements to the on-premises agent portion of your plugin. Make a copy of your agent code. Change the version number in the agent config file. To ensure that New Relic knows two different versions of your agent exist now, run the agent so that it reports metrics to the Plugin API. Continue working on your agent and making improvements, but do not change the version number again. When you are ready to make this new agent version the latest version for your plugin users, save it to the location where you distribute your agent code (for example, GitHub). From the New Relic UI, select your published plugin, select Edit, and then select Save. Select Publish, and then select the new agent version you are publishing. At this point, all of your plugin users will see a notice in the Plugins UI that a new version is available. They will be directed to your listing in Plugin Central, which points to your download location. From there your users can acquire your new agent version. Update plugin dashboards If you add metrics to your agent, be sure to add them to charts on your dashboard, and then save your dashboard and re-publish. All your users will see the new dashboard, and the new metrics will either be populated immediately (if you are running a SaaS agent on their behalf) or as soon as they update their agent (if you are offering an on-premises agent). If you need to migrate dashboards between GUIDs, get help at support.newrelic.com. Otherwise, to update your dashboard, follow this workflow. These steps assume you are starting with a plugin already published in Plugin Central, and you want to make improvements to the dashboard portion of your plugin. Go to one.newrelic.com > More > Plugins, and select your plugin's name. From your plugin's summary page, select Edit > Dashboards, then add, edit, or delete dashboards. When you are ready to publish: From your plugin's summary page, select Publish. At this point, all of your plugin users will see your new dashboard version the next time they select your plugin's dashboard in the New Relic UI.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 218.92917,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Maintain <em>plugin</em> versions",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e956fe7b9d28f062a07b5"
    },
    {
      "sections": [
        "Checklist for developing plugins",
        "Important",
        "Limited access to legacy plugins",
        "Plan your plugin",
        "Create your plugin",
        "Publish your plugin",
        "Documentation",
        "\"About us\" URL",
        "Branding image URL",
        "Developer terms of service",
        "Publication",
        "Versions",
        "Plugin support",
        "Support for your plugin users",
        "Escalated plugin support"
      ],
      "title": "Checklist for developing plugins",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "c60d87c25a2c835d2b7e44340bddb678117ddd07",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/checklist-developing-plugins/",
      "published_at": "2021-06-09T19:03:17Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plan your plugin When planning your plugin for Plugin Central: Sketch the types of metrics you want to collect and how you want to present them on dashboards. Include any necessary mathematical calculations. Sketch the types of summary metrics you want to collect and how you want to present them on the plugin's summary page. Include any necessary mathematical calculations. Optional: Define alert conditions for your metrics. Optional: If you want to receive alert notifications for your plugin, verify the email address to be used and confirm any other notification options as necessary. Decide whether to develop the plugin with one of the plugin SDKs or to use the Plugin API. Create your plugin When creating your plugin for Plugin Central: Select a unique, meaningful GUID name. Write the plugin agent. Test your plugin, including summary metrics, customized dashboards, alert conditions, and your process to disable or uninstall your plugin. Consider writing Chef and Puppet installation scripts to make plugin installation easier. Publish your plugin The following items are required for plugins published through New Relic's Plugin Central. If you do not plan to make your plugin publicly accessible to users, some of these items are not applicable. Documentation When documenting your plugin, include requirements and procedures to install, configure, use, troubleshoot, uninstall, and contact your support resources. Documentation requirements Guidelines Title Descriptive title; for example, \"Wikipedia plugin for New Relic.\" Table of contents List of main topics with anchors to each section. Description Explanation of how the plugin can be used in New Relic to monitor and improve the associated software's performance. What systems does it monitor (for example, memcache, versions X-Y, on the local host, sets and gets)? What problem does it solve? Plugin requirements Requirements or dependencies; for example: Internet access via SSL (HTTPS) Supported operating systems Minimum environment requirements (Java, Ruby, glibc, etc.) Supported monitored systems Any known limitations Metrics source documentation Plugin users may not be familiar with all the metrics displayed, their source, what the metrics mean, etc. If you have documentation that provides these details, be sure to include links to that information. For example: Description of data expected from source, frequency, mechanism, etc.; for example, \"Data is read from a file socket and exported from the source once per second.\") Description of data itself; for example, a well-formatted JSON such as {X: {y: z}} Description of data being sent; for example, average response time in milliseconds, of a set or get, taken over a minute, recorded from the specified data Installation Step-by-step procedures to obtain and install the plugin. Do not require su or sudo permission in order to install your agent or support software unless absolutely required. These requirements must be limited in scope and well documented. Configuration Instructions to configure the plugin, expected format, and how to set them. Include how to find the user's New Relic license key. Troubleshooting Include instructions as applicable; for example: How to resolve common problems: Unable to connect to New Relic, unable to connect to the monitored server, incorrect license key How to enable logging or verbose logging How to restart the plugin How to test connectivity to New Relic How to handle errors; for example, failure to read, aggregate, or send data Disabling and uninstalling Questions to consider: Are there other dependencies before disabling or uninstalling the plugin? For example, are there any special procedures your plugin users need to know in order to have their operating system stop the process from running, so that they can remove components (instances) from their installed plugin? Can you temporarily disable and then re-enable the plugin (for example, for troubleshooting or updating it), or must you completely uninstall and reinstall? Can the uninstall procedure be done from a command line? Support resources Make a plan for supporting your plugin and identifying a support URL for users. In your plugin's support information, describe how users can contact you for support in whatever way works best for you: documentation website, phone, email, forum, Twitter, ticketing system, etc. \"About us\" URL Identify the About Us URL for your plugin. Branding image URL Identify a URL to a branding image for when you publish your plugin. Follow these formatting guidelines: Set the image size to 64 x 64px. Save as a .png or .gif file. Use transparency for the background unless it is a square icon. Design the image to display well on both white and black backgrounds. Developer terms of service Review the Developer Terms of Service for New Relic Plugins. A link to this document appears on your plugin's Publish page in the UI. Publication Plugin Central is the repository of plugins available in New Relic. If you want to distribute your plugin through Plugin Central, make sure your documentation and support plans are in place, then select your plugin's Publish option in the New Relic UI. The Publish page in the UI prompts you to verify all requirements. As soon as your plugin is published, all of its dashboards and summary metrics are available for your plugin users. The Distribution method identifies how users can obtain your plugin from Plugin Central. File download: Most developers typically select this option for plugin setup and installation. Webpage link: SaaS providers typically select this option for plugin configuration and identify their website's landing page URL. Platform Installer (NPI): If you use the New Relic Platform Installer (NPI) command line utility to package your plugin, select this option. You can also publish a plugin without listing it in Plugin Central; for example, if you want to beta test it first, or if you only want specific users to be able to use it. When publishing an unlisted plugin, make sure the checkbox option in the UI for List this plugin in Plugin Central is not selected. You will need to communicate directly with your users when your unlisted plugin is added, updated, or removed. Versions You can update and re-publish your plugin as often as you want. Every time you publish changes to your plugin and list them in Plugin Central, the changes are immediately visible in Plugin Central. In addition, your published plugin changes typically appear in New Relic's website within five minutes. Recommendation: To avoid development and testing impacts on your users, maintain dev and production versions when updating your plugin. Plugin support Plugin publishers are responsible for providing first-line support if users have problems using their plugin. This includes verifying correct data acquisition and transmission. If problems continue with getting the expected data into New Relic's user interface after you complete your troubleshooting procedures, then you (not your users) can escalate the problem to New Relic. We will work with you to resolve the problem, and then you can communicate the solution to your users. Support for your plugin users Follow these guidelines for supporting your plugin's users by confirming data collection and transmission. Check that the plugin configuration is correct, including: Necessary credentials for the target system IP addresses or DNS names for the target system Any settings that might affect data acquisition Review transmission logs for errors, including: Authentication errors Connection errors Error responses from the target system Review transaction logs for useful data. How much data is being collected? Does the data make sense? Verify if the plugin is converting acquired data into useful metrics. Do the metrics make sense? Would the metrics make a good chart? Are the metrics being aggregated into valid JSON? Is the JSON size within limits? Confirm transmission of the plugin data. If you are using an SDK for New Relic Plugins and the Plugin API, does your data transmission conform to New Relic's rate limits? Are the 50X codes sporadic or continuous? Do your transaction logs indicate any data transmission problems? Escalated plugin support If you have verified good data acquisition and transmission, but there still is trouble getting the expected data in New Relic's user interface, escalate the support request to New Relic on behalf of your users. Do not have your users contact us. Include as much of the following information as possible: Plugin support requests Notes User affected by the problem Information such as: Permalink to the plugin page where you see the problem, so that we can view the endpoint. Recommendation: Ask the user if you can add your user ID to the New Relic account so that you can obtain a permalink yourself. User's New Relic account ID. If you do not have the user's permalink or account ID, include the user's email address they used to sign up for their New Relic account. (This may be a different email than the one they used to contact you.) User's name and New Relic account name. Detailed description of the problem For example: The user can see data, but it's not the data they are expecting. The user can see no data at all. The user configured and started the plugin correctly, but it does not appear in the user interface for New Relic Plugins. Any other specific details about the problem. Other evidence This includes: Explain the troubleshooting you have done so far and what you expected to happen in contrast to the actual results. Provide any available permalinks, screenshots, and log files. Summarize your understanding of the problem. We will work with you to characterize and resolve the problem. Keep the user updated with progress. After we provide you with a resolution, ask the user to verify the results.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 218.92917,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Checklist for <em>developing</em> <em>plugins</em>",
        "sections": "Checklist for <em>developing</em> <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " white and black backgrounds. <em>Developer</em> terms of service Review the <em>Developer</em> Terms of Service for New Relic <em>Plugins</em>. A link to this document appears on your <em>plugin</em>&#x27;s Publish page in the UI. Publication <em>Plugin</em> Central is the repository of <em>plugins</em> available in New Relic. If you want to distribute your"
      },
      "id": "603ec26f64441fe6484e885f"
    },
    {
      "sections": [
        "Use the New Relic Platform Installer (NPI) utility",
        "Important",
        "Limited access to legacy plugins",
        "NPI compatibility requirements",
        "Distribution",
        "NPI command line utility",
        "Updates",
        "Privately-published plugins"
      ],
      "title": "Use the New Relic Platform Installer (NPI) utility",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "a8a5c308f1e4f69ea801fd595bc7b679ae5eaac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/use-new-relic-platform-installer-npi-utility/",
      "published_at": "2021-06-09T19:04:31Z",
      "updated_at": "2021-03-16T11:00:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. NPI compatibility requirements The New Relic Platform Installer (NPI) is a command line utility for plugins in Plugin Central. It allows users to easily download, configure, and manage a plugin by installing it with a single command. The NPI is available for plugins written with Java or .NET plugin SDKs. If you are a plugin developer, follow these steps to meet the NPI requirements for a consistent installation experience, and publish your plugin in Plugin Central as NPI Compatible. In order to make your plugin NPI-compatible, make sure it meets each of these requirements: NPI compatibility Requirements Writing your plugin Java: See the Java SDK README file in GitHub for plugins. .NET: See the .NET SDK README file in GitHub for plugins. Packaging Use the tar.gz or zip compression protocol to package your plugin. Executable Name the executable file plugin.jar (for Java) or plugin.exe (for .NET), and store it in the root of your plugin folder. Code Do not use any relative references in your code. Configuration files Create a ./config directory containing a plugin.template.json file and a newrelic.template.json file. Make sure that plugin configuration is read from the plugin.json file in the ./config directory. For more information, refer to the README in GitHub. Distribution Once your plugin is NPI-compatible from a code perspective, place it somewhere that is accessible for consumers to download. For example, add the compressed distributable to a dist folder in your GitHub repository. When your plugin is ready for distribution, follow standard procedures to publish it in Plugin Central. Be sure to select the Platform Installer (NPI) distribution option. NPI command line utility When users select an NPI Compatible plugin from Plugin Central, they also have the option to download the NPI tool. The tool allows users to easily download, configure, and manage a plugin. They can also use a series of commands to manage their plugins or pass the --help flag for more information about available options. Updates After you create and publish an NPI-compatible plugin, follow standard procedures to update it as needed. Then, when you publish the updated plugin, the NPI tool automatically will pick up your most current version for users who have installed your NPI-compatible plugin. Privately-published plugins In general, the NPI tool will try to pull download (manifest) information from New Relic's Plugins service. You can also provide a file named manifest.json in the config directory of your NPI installation to provide this information. Use this file format: [ { \"guid\": \"arbitrary_identifier\", \"download_url\": \"https://plugin.download.url.com\", \"publisher\": \"New Relic Inc.\", \"version\": \"1.0.1\", \"installer_compatible\": true, \"implementation\": \"Java\" }, { \"guid\": \"arbitrary_identifier2\", \"download_url\": \"https://plugin2.download.url.com\", \"publisher\": \"New Relic Inc.\", \"version\": \"2.0.0\", \"installer_compatible\": true, \"implementation\": \".NET\" } ] Copy After you set this up, you can run all the same commands with your private plugin's GUID. To install or fetch a plugin, you must pass the --untrusted flag to allow downloading plugins from a local file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 218.926,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " command. The NPI is available for <em>plugins</em> written with Java or .NET <em>plugin</em> SDKs. If you are a <em>plugin</em> <em>developer</em>, follow these steps to meet the NPI requirements for a consistent installation experience, and publish your <em>plugin</em> in <em>Plugin</em> Central as NPI Compatible. In order to make your <em>plugin</em> NPI-compatible"
      },
      "id": "603eae7c28ccbc8e3ceba799"
    }
  ],
  "/docs/plugins/plugin-developer-resources/develop-plugins/use-new-relic-platform-installer-npi-utility": [
    {
      "sections": [
        "Maintain plugin versions",
        "Important",
        "Limited access to legacy plugins",
        "Plugin agents and dashboards",
        "Agent versioning",
        "Update a SaaS agent",
        "Update an on-premises agent",
        "Update plugin dashboards"
      ],
      "title": "Maintain plugin versions",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "70efb125146afeda3c6e672e6c9b0e769ce4eb37",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/maintain-plugin-versions/",
      "published_at": "2021-06-09T19:03:17Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin agents and dashboards As a plugin publisher, typically you need to have two versions of your plugin running simultaneously: The stable production version that users can acquire from Plugin Central in New Relic A development version that you are actively improving, testing, or otherwise have in a non-production state Plugins contain two versioned parts: The agent collects metrics from the source and transmits those metrics to the Plugin API. The dashboard is a collection of visualizations and configurations that you make in the Plugins user interface. Plugin users view this automatically from their own Plugins dashboards in New Relic. Versioning works differently for these two parts. Agent versioning There are two types of plugin agents, with two different versioning situations: SaaS agents are agents that you, the SaaS application developer, deploy and run on behalf of your SaaS users. On-premises agents are agents that your users install into their systems. Plugin agents Versioning SaaS agents There is only one copy of this agent running anywhere (the one you developed and deployed on behalf of your users), so whatever version you are running will inherently be the latest version. Whatever metrics the latest version is sending to New Relic will be the metrics available to (but not necessarily charted for) your users in their Plugins dashboards. On-premises agents When you publish a new version of your agent, all of your plugin users' dashboards will note that a new agent version is available. They will be directed to your Plugin Central listing, where they can download and install the new version of your agent. Recommendation: Provide a streamlined agent update procedure in your own documentation. Update a SaaS agent This procedure assumes: You are starting with a plugin published to the Plugin Central (the production version). Your plugin has a SaaS agent running inside your app, and you want to make improvements to the SaaS agent portion of your plugin. As part of your normal development process you have a second dev version of your agent running, which is not published in Plugin Central. Your plugin's dev version uses a different GUID (for example, com.company.service.plugin.dev). Both your dev and your production plugins have the same plugin dashboards. To update your plugin's SaaS agent: Make changes to your dev agent. Do not change the version number or GUID of your dev agent in the agent config file. When you are ready to make your latest dev agent the production agent for your customers, follow your standard procedures to deploy your dev code to production. If applicable, make any necessary changes to your plugin's dashboards. Your users will receive no notification, and they do not need to take any action. You didn't change the version number, so your agent changes are transparent to your users. Update an on-premises agent This procedure assumes you are starting with a plugin published in Plugin Central, and you want to make improvements to the on-premises agent portion of your plugin. Make a copy of your agent code. Change the version number in the agent config file. To ensure that New Relic knows two different versions of your agent exist now, run the agent so that it reports metrics to the Plugin API. Continue working on your agent and making improvements, but do not change the version number again. When you are ready to make this new agent version the latest version for your plugin users, save it to the location where you distribute your agent code (for example, GitHub). From the New Relic UI, select your published plugin, select Edit, and then select Save. Select Publish, and then select the new agent version you are publishing. At this point, all of your plugin users will see a notice in the Plugins UI that a new version is available. They will be directed to your listing in Plugin Central, which points to your download location. From there your users can acquire your new agent version. Update plugin dashboards If you add metrics to your agent, be sure to add them to charts on your dashboard, and then save your dashboard and re-publish. All your users will see the new dashboard, and the new metrics will either be populated immediately (if you are running a SaaS agent on their behalf) or as soon as they update their agent (if you are offering an on-premises agent). If you need to migrate dashboards between GUIDs, get help at support.newrelic.com. Otherwise, to update your dashboard, follow this workflow. These steps assume you are starting with a plugin already published in Plugin Central, and you want to make improvements to the dashboard portion of your plugin. Go to one.newrelic.com > More > Plugins, and select your plugin's name. From your plugin's summary page, select Edit > Dashboards, then add, edit, or delete dashboards. When you are ready to publish: From your plugin's summary page, select Publish. At this point, all of your plugin users will see your new dashboard version the next time they select your plugin's dashboard in the New Relic UI.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 218.92917,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Maintain <em>plugin</em> versions",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e956fe7b9d28f062a07b5"
    },
    {
      "sections": [
        "Checklist for developing plugins",
        "Important",
        "Limited access to legacy plugins",
        "Plan your plugin",
        "Create your plugin",
        "Publish your plugin",
        "Documentation",
        "\"About us\" URL",
        "Branding image URL",
        "Developer terms of service",
        "Publication",
        "Versions",
        "Plugin support",
        "Support for your plugin users",
        "Escalated plugin support"
      ],
      "title": "Checklist for developing plugins",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "c60d87c25a2c835d2b7e44340bddb678117ddd07",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/checklist-developing-plugins/",
      "published_at": "2021-06-09T19:03:17Z",
      "updated_at": "2021-03-16T11:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plan your plugin When planning your plugin for Plugin Central: Sketch the types of metrics you want to collect and how you want to present them on dashboards. Include any necessary mathematical calculations. Sketch the types of summary metrics you want to collect and how you want to present them on the plugin's summary page. Include any necessary mathematical calculations. Optional: Define alert conditions for your metrics. Optional: If you want to receive alert notifications for your plugin, verify the email address to be used and confirm any other notification options as necessary. Decide whether to develop the plugin with one of the plugin SDKs or to use the Plugin API. Create your plugin When creating your plugin for Plugin Central: Select a unique, meaningful GUID name. Write the plugin agent. Test your plugin, including summary metrics, customized dashboards, alert conditions, and your process to disable or uninstall your plugin. Consider writing Chef and Puppet installation scripts to make plugin installation easier. Publish your plugin The following items are required for plugins published through New Relic's Plugin Central. If you do not plan to make your plugin publicly accessible to users, some of these items are not applicable. Documentation When documenting your plugin, include requirements and procedures to install, configure, use, troubleshoot, uninstall, and contact your support resources. Documentation requirements Guidelines Title Descriptive title; for example, \"Wikipedia plugin for New Relic.\" Table of contents List of main topics with anchors to each section. Description Explanation of how the plugin can be used in New Relic to monitor and improve the associated software's performance. What systems does it monitor (for example, memcache, versions X-Y, on the local host, sets and gets)? What problem does it solve? Plugin requirements Requirements or dependencies; for example: Internet access via SSL (HTTPS) Supported operating systems Minimum environment requirements (Java, Ruby, glibc, etc.) Supported monitored systems Any known limitations Metrics source documentation Plugin users may not be familiar with all the metrics displayed, their source, what the metrics mean, etc. If you have documentation that provides these details, be sure to include links to that information. For example: Description of data expected from source, frequency, mechanism, etc.; for example, \"Data is read from a file socket and exported from the source once per second.\") Description of data itself; for example, a well-formatted JSON such as {X: {y: z}} Description of data being sent; for example, average response time in milliseconds, of a set or get, taken over a minute, recorded from the specified data Installation Step-by-step procedures to obtain and install the plugin. Do not require su or sudo permission in order to install your agent or support software unless absolutely required. These requirements must be limited in scope and well documented. Configuration Instructions to configure the plugin, expected format, and how to set them. Include how to find the user's New Relic license key. Troubleshooting Include instructions as applicable; for example: How to resolve common problems: Unable to connect to New Relic, unable to connect to the monitored server, incorrect license key How to enable logging or verbose logging How to restart the plugin How to test connectivity to New Relic How to handle errors; for example, failure to read, aggregate, or send data Disabling and uninstalling Questions to consider: Are there other dependencies before disabling or uninstalling the plugin? For example, are there any special procedures your plugin users need to know in order to have their operating system stop the process from running, so that they can remove components (instances) from their installed plugin? Can you temporarily disable and then re-enable the plugin (for example, for troubleshooting or updating it), or must you completely uninstall and reinstall? Can the uninstall procedure be done from a command line? Support resources Make a plan for supporting your plugin and identifying a support URL for users. In your plugin's support information, describe how users can contact you for support in whatever way works best for you: documentation website, phone, email, forum, Twitter, ticketing system, etc. \"About us\" URL Identify the About Us URL for your plugin. Branding image URL Identify a URL to a branding image for when you publish your plugin. Follow these formatting guidelines: Set the image size to 64 x 64px. Save as a .png or .gif file. Use transparency for the background unless it is a square icon. Design the image to display well on both white and black backgrounds. Developer terms of service Review the Developer Terms of Service for New Relic Plugins. A link to this document appears on your plugin's Publish page in the UI. Publication Plugin Central is the repository of plugins available in New Relic. If you want to distribute your plugin through Plugin Central, make sure your documentation and support plans are in place, then select your plugin's Publish option in the New Relic UI. The Publish page in the UI prompts you to verify all requirements. As soon as your plugin is published, all of its dashboards and summary metrics are available for your plugin users. The Distribution method identifies how users can obtain your plugin from Plugin Central. File download: Most developers typically select this option for plugin setup and installation. Webpage link: SaaS providers typically select this option for plugin configuration and identify their website's landing page URL. Platform Installer (NPI): If you use the New Relic Platform Installer (NPI) command line utility to package your plugin, select this option. You can also publish a plugin without listing it in Plugin Central; for example, if you want to beta test it first, or if you only want specific users to be able to use it. When publishing an unlisted plugin, make sure the checkbox option in the UI for List this plugin in Plugin Central is not selected. You will need to communicate directly with your users when your unlisted plugin is added, updated, or removed. Versions You can update and re-publish your plugin as often as you want. Every time you publish changes to your plugin and list them in Plugin Central, the changes are immediately visible in Plugin Central. In addition, your published plugin changes typically appear in New Relic's website within five minutes. Recommendation: To avoid development and testing impacts on your users, maintain dev and production versions when updating your plugin. Plugin support Plugin publishers are responsible for providing first-line support if users have problems using their plugin. This includes verifying correct data acquisition and transmission. If problems continue with getting the expected data into New Relic's user interface after you complete your troubleshooting procedures, then you (not your users) can escalate the problem to New Relic. We will work with you to resolve the problem, and then you can communicate the solution to your users. Support for your plugin users Follow these guidelines for supporting your plugin's users by confirming data collection and transmission. Check that the plugin configuration is correct, including: Necessary credentials for the target system IP addresses or DNS names for the target system Any settings that might affect data acquisition Review transmission logs for errors, including: Authentication errors Connection errors Error responses from the target system Review transaction logs for useful data. How much data is being collected? Does the data make sense? Verify if the plugin is converting acquired data into useful metrics. Do the metrics make sense? Would the metrics make a good chart? Are the metrics being aggregated into valid JSON? Is the JSON size within limits? Confirm transmission of the plugin data. If you are using an SDK for New Relic Plugins and the Plugin API, does your data transmission conform to New Relic's rate limits? Are the 50X codes sporadic or continuous? Do your transaction logs indicate any data transmission problems? Escalated plugin support If you have verified good data acquisition and transmission, but there still is trouble getting the expected data in New Relic's user interface, escalate the support request to New Relic on behalf of your users. Do not have your users contact us. Include as much of the following information as possible: Plugin support requests Notes User affected by the problem Information such as: Permalink to the plugin page where you see the problem, so that we can view the endpoint. Recommendation: Ask the user if you can add your user ID to the New Relic account so that you can obtain a permalink yourself. User's New Relic account ID. If you do not have the user's permalink or account ID, include the user's email address they used to sign up for their New Relic account. (This may be a different email than the one they used to contact you.) User's name and New Relic account name. Detailed description of the problem For example: The user can see data, but it's not the data they are expecting. The user can see no data at all. The user configured and started the plugin correctly, but it does not appear in the user interface for New Relic Plugins. Any other specific details about the problem. Other evidence This includes: Explain the troubleshooting you have done so far and what you expected to happen in contrast to the actual results. Provide any available permalinks, screenshots, and log files. Summarize your understanding of the problem. We will work with you to characterize and resolve the problem. Keep the user updated with progress. After we provide you with a resolution, ask the user to verify the results.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 218.92917,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Checklist for <em>developing</em> <em>plugins</em>",
        "sections": "Checklist for <em>developing</em> <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " white and black backgrounds. <em>Developer</em> terms of service Review the <em>Developer</em> Terms of Service for New Relic <em>Plugins</em>. A link to this document appears on your <em>plugin</em>&#x27;s Publish page in the UI. Publication <em>Plugin</em> Central is the repository of <em>plugins</em> available in New Relic. If you want to distribute your"
      },
      "id": "603ec26f64441fe6484e885f"
    },
    {
      "sections": [
        "Plugin summary metrics and dashboards",
        "Important",
        "Limited access to legacy plugins",
        "Plugin summary metrics",
        "Add summary metrics",
        "Optional: Add alert summary metrics",
        "Time periods for metrics",
        "Plugin dashboards",
        "View the default dashboard",
        "Add dashboards",
        "Avoid metric grouping problems",
        "Change or delete dashboards",
        "Plugin settings",
        "Initial settings",
        "Additional updates"
      ],
      "title": "Plugin summary metrics and dashboards",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Develop plugins"
      ],
      "external_id": "a0163b9f1efd59d8c50c60a3b8b5b5419f336824",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/develop-plugins/plugin-summary-metrics-dashboards/",
      "published_at": "2021-06-09T19:04:32Z",
      "updated_at": "2021-03-16T11:00:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin summary metrics Each component or instance for your plugin in Plugin Central can have summary metrics, such as average, total, minimum, maximum, standard deviation, rate, or count. The summary metrics appear on your plugin's Summary page in the Plugins user interface. The summary metric dashboards are also useful as a debugging tool to review all of the metrics sent by your plugin agent to New Relic. To view dashboard details about any component or instance, select any summary metric value for it. You can also change various plugin settings in the UI. When you first create a summary metric for your plugin, this triggers a change to New Relic's collectors. This may cause your running components (instances) to stop showing summary metrics for a short period of time. For example, if you add a new summary metric to your plugin, any components (instances) you are monitoring that use that plugin may have all summary metrics temporarily cleared. This will also close any outstanding related events and alerts. Depending on the components and other factors, you may need to wait fifteen minutes or more before summary metrics appear again. Add summary metrics To add a summary metric: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select Edit. From the Summary metrics section of the plugin's editing page, select Add. If your plugin contains only one summary metric, you can identify the metric in the chart's title and then hide the legend (colored bars that label the metrics) that normally appears below the chart. Also, if you define negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Optional: Add alert summary metrics Plugin publishers and users can define alert conditions from the plugin's Summary page by selecting the component's or instance's settings icon. The alerts will be activated when the summary metric's specified values fall above the thresholds. The Recent events list for the plugin's components (instances) appears on the plugin's Summary page. To view additional details about an alert, select its name. Sometimes there may be a delay between the time that a summary metric event is triggered and the time that New Relic creates the corresponding incident and sends the alert notification. There are several timing mechanisms at work, such as collector caching, summary metric event timing, delayed job queues, email delivery, etc. Depending on the situation, this delay could be up to ten or fifteen minutes before the alert notification is sent. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metrics. This is why you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show various time periods. You can also deliver data at one-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, New Relic aggregates when there is too much data, but it does not extrapolate if there is not enough data. In order for data to appear on a 30-minute chart, make sure at least one data point is within the range, or no data will appear. Recommendation: Use a 60-second polling interval. Default dashboards show 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Plugin dashboards You can create dashboards to visualize the data generated by your plugins in New Relic. You must be a plugin author or publisher to add, edit, and delete dashboards. Plugin users cannot customize the plugin dashboards they acquire from Plugin Central. View the default dashboard New plugins automatically include a default dashboard. Once your plugin agent starts sending data to New Relic's Plugin API, you can view the default dashboard in New Relic's UI and change it as needed. To view the default dashboard for your plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select a component (instance). Add dashboards In addition to the default dashboard, you can create as many additional dashboards for your plugin as you want. After you publish your plugin, all of these dashboards and summary metrics are available to plugin users. The customized dashboards that display plugin data are part of the plugin. Plugin users cannot add their own dashboards. This needs to be done by the author or publisher as part of a plugin fork or update. To create additional dashboards: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, select Edit. From the Dashboards section of the plugin's editing page, select Add. Specify a title for your dashboard, select a page layout, then select Create. From the new dashboard page, type a label for the new chart or table, and then select Add chart or table. Edit the chart, including the case-sensitive metrics (for example, a metric name you see in the agent output, such as Component/SIN[Value]) and value (for example, Total value). To use additional options (for example, number format), select Advanced options. Optional: Use a wildcard (*) to show multiple metrics on a chart. For example, to include the metric component/foo/bar and the metric component/foo/xyz, use the metric name component/foo/*.f Select Save and Preview to preview the chart or table. Or, select Save and finish when you are satisfied with the appearance of the chart or table. Review the new chart that appears on the customized dashboard, and continue adding, editing, or rearranging charts and tables on your dashboard as needed. When finished, select I'm done editing. Avoid metric grouping problems Wildcards provide flexibility for how your metric names appear. When creating a chart, consider whether you want the metric names to appear with identical namespace segments, or include a wildcard to strip the namespace segments. For example: Component/Database/Metric1 Component/Database/Metric2 Component/Database/Metric3 Copy OR Metric1 Metric2 Metric3 Copy To prevent problems with metric grouping issues, avoid defining values that result in excessively large numbers. For example, if a plugin's chart value is 1 widget and New Relic collects 3 million widgets, change the value to 1 million widgets so that the chart can show millions of widgets more efficiently. Also, avoid creating high-precision values containing many digits after a decimal point. Change or delete dashboards To update or remove any plugin dashboard, including the default: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, select Edit. Keep a stable production version of your plugin that users can acquire from Plugin Central, and create a development version that you are actively improving, testing, browsing the presentation of metrics on your custom dashboard, or otherwise have in a non-production state. Plugin settings You can change several plugin settings before you publish the plugin. You can also make changes at any time to published plugins. Initial settings Before you publish your plugin, you can: Select a generic plugin icon for the Plugins UI. This is not the same as the URL for your customized branding image you may choose as part of the publishing process. Change your plugin's label for the Plugins UI. By default, this is the first 11 characters of the plugin's Title field. Change your plugin's title. The default title is your plugin's GUID. Add, change, or delete your plugin's summary metrics and their alert conditions. Add, change, or delete your plugin's dashboards. Exception: You can edit but you cannnot delete your plugin's default dashboard. To add, change, or delete plugin settings: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's Summary page, select Edit. When finished, be sure to save your changes. Additional updates After you publish your plugin, you can continue making changes. Recommendation: To avoid development and testing impacts on your users, maintain development and production versions. To make additional updates to your plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From your plugin's Summary page, select Edit, Publish, or your component's (instance's) settings icon as applicable. Update the settings as needed, and then save your changes. When you are ready to release this version: Go to one.newrelic.com > More > Plugins, select your plugin, and then select Publish. Here is a summary of where to view or make changes to your plugin. Type of change Edit Publish Settings Agent: Change the plugin's version (n/a in UI). Alert conditions, customized for components (instances) Alert conditions, defaults for summary metrics Branding image (URL) that appears in Plugin Central Components (instances): Remove from your plugin Dashboards: Add, edit, delete Description Developer Terms of Service Icon that appears in the Plugins UI Name for plugin (label) in the Plugins UI Name for plugin (title) in Plugin Central NPI Compatible designation Publisher's name Summary metrics: Add, edit, delete URL for installation and setup instructions URL for your support site URL for your website (\"About us\")",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 218.926,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> summary metrics and dashboards",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": " Branding image (URL) that appears in <em>Plugin</em> Central Components (instances): Remove from your <em>plugin</em> Dashboards: Add, edit, delete Description <em>Developer</em> Terms of Service Icon that appears in the <em>Plugins</em> UI Name for <em>plugin</em> (label) in the <em>Plugins</em> UI Name for <em>plugin</em> (title) in <em>Plugin</em> Central NPI"
      },
      "id": "603ea2bc196a6740f7a83de2"
    }
  ],
  "/docs/plugins/plugin-developer-resources/developer-reference/get-plugin-data-rest-api": [
    {
      "sections": [
        "Metric data for the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "URI",
        "GUID",
        "Time periods for metrics",
        "Metric data details",
        "Timeslice metric values",
        "Calculations",
        "Examples",
        "Metrics",
        "cURL example",
        "Metric references",
        "Metric naming guidelines",
        "Metric segments",
        "Caution",
        "Metric attributes",
        "Metric values",
        "Units"
      ],
      "title": "Metric data for the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "2e9d0553b7277c73fe8a2147519d9943fca440fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/metric-data-plugin-api/",
      "published_at": "2021-06-09T19:05:38Z",
      "updated_at": "2021-03-16T11:20:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. URI Metric timeslice data is sent with the Plugin API as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The Plugin API does not support New Relic's REST API, and vice versa. However, you can use the REST API (v2) to extract plugin data. For a list with links to procedures and examples, see Plugin examples (v2). GUID The plugin needs a Globally Unique Identifier (GUID), which is a character string limited to no less than 4 and no more than 255 characters. The GUID for a published plugin must be unique for each plugin. When creating a plugin, you are responsible for managing your own GUIDs to avoid naming conflicts. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metric(s). Thus, you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show any time period you want; for example, 30 minutes, 30 days, etc. You can also deliver data at 1-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, data will aggregate when there is too much, but data will not be extrapolated if there is not enough data. In order for data to appear on a 30 minute chart, make sure at least one data point is within the range, or no data will appear. Use a 60-second polling interval, because the default dashboard shows 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Metric data details The JSON data is a hash with two required keys at the top level: components: An array of components, each consisting of a hash of attributes for the individual component, including the metric data. agent: A hash describing the agent that is reporting metrics data to New Relic Plugins on behalf of the component(s). Of these values, only host and version are required. When graphing metrics, be aware that null = zero. Metric data POST Description Component data One of two required keys at the top level. This is an array of hashes describing the components that report metrics in this request. Each hash contains the following values: name A name ( < =32 characters) that uniquely identifies the monitored entity and appears as the display name for this agent. Note: Metric names are case sensitive. guid A \"reverse domain name\" styled identifier; for example, com.newrelic.mysql. This is a unique identity defined in the plugin's user interface, which ties the agent data to the corresponding plugin user interface in New Relic. duration The duration in seconds over which the metric data was collected. The end time is implied as the time the data is received by the API. metrics Timeslice data for each metric being reported. The hash keys are metric names, and the values are the timeslice data value for the named metric. Agent data One of two required keys at the top level. A hash specifying information about the agent that is reporting data on behalf of the components. host (required) The hostname of the agent monitoring the specified components. This is the hostname where the monitoring agent is running, not the hostname of the component being monitored. pid (optional) The process identifier of the agent monitoring the specified components. This is the process identifier of the monitoring agent itself, not a process identifier that may be associated with the monitored components. version (required) The version of the agent monitoring the specified components, using the format A.B.C where A, B, and C are integers. The version number must conform to the rules specified in standard Semantic Versioning scheme v2.0.0. Timeslice metric values Metrics are sent inside the component hash with the key metrics and a hash as a value. The hash keys are metric names, and the values are the timeslice data values for the named metric. The timeslice hash value uses one of three formats: Timeslice hash value Description A single scalar value with a floating point number or integer This is the simplest format, and this number is required. The reported value is used as the total, minimum, and maximum data value. The count value is assumed to be 1. The Plugin API does not support reporting of arbitrary string metrics, only scalar values that are aggregated. Array of five required values in specific order An array of five required integers or floating point numbers that represent, in order: Total value over the time period Count of the number of events this value represents over the time period; the average is calculated by dividing total by count Minimum value over the time period Maximum value over the time period Sum of squares for the samples over the time period Hash with five required key/value pairs in any order A hash with value names as the keys, and integers or floating point values as the values. All five key/value pairs are required. The keys of the hash are the type of timeslice data, and the value is the data value. These has key/value pairs can be in any order: total: Total value over the time period count: Count of the number of events this value represents over the time period; the average is calculated by dividing total by count min: Minimum value over the time period max: Maximum value over the time period sum_of_squares: Sum of squares for the samples over the time period Calculations Limited mathematical calculations are available with the key/value pairs, such as computing total, count, minimum, maximum, averages, and standard deviations. However, to do more extensive calculations, you need to do the math in the agent, and then send the results as a new metric. For example, send Metric1, Metric2, and Metric3 (which equals Metric1 divided by Metric2). If you submit negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Examples Here are some examples. Metrics \"metrics\" : { \"Component/Database/Primary[Queries/Second]\" : { \"total\" : 25, \"count\" : 2, \"min\" : 10, \"max\" : 15, \"sum_of_squares\" : 325 }, \"Component/Database/Secondary[Queries/Second]\" : [25, 2, 10, 15, 325], \"Component/Database/Backup[Queries/Second]\" : 10 } Copy cURL example curl -vi https://platform-api.newrelic.com/platform/v1/metrics \\ -H \"X-License-Key: YOUR_LICENSE_KEY_HERE\" \\ -H \"Content-Type: application/json\" \\ -H \"Accept: application/json\" \\ -X POST -d '{ \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] }' Copy Metric references Refer to these references as you develop your own plugins. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order for the metric to be rendered usefully in the user interface, the metric name must contain a prefix, category name, label, and optional units indicator. Here are some recommended guidelines for the text in metric names to make them more readable in the user interface. Metric naming guidelines Guidelines UI display Use case and whitespace characters appropriate for display in the user interface, because segments are rendered as-is in the UI. Category and label segments Metric names are case sensitive. Capitalize the first word in the category and label segments. Keep category and label segments as short as possible. Length There is a limit of 255 characters for metric names. Characters to avoid using Avoid using the following characters in names. These characters have special meaning and should not be used except where specifically required for their purpose. / ] [ | * Also avoid multi-byte characters. Units Use abbreviated names for units when possible. Metric segments Each of these segments is divided by the forward slash / character. Each segment is interpreted for a specific purpose in the UI and roughly follows this pattern: prefix/category/label[units] Copy For example, the metric representing the latency of cache hits reported by a plugin collecting data for a cache appliance might look like this: Component/Cache/Hits[sec|hit] Copy Metric segment order Notes Prefix: Component/ or Custom/ The first segment of a custom metric is Component/ (if it comes from a plugin agent) or Custom/ (if it is a custom metric collected by a New Relic agent. For example, Custom/MyMetric). Caution If you use the Plugin API only, and if the metrics do not start with Component/, they may not be available or may not appear correctly in charts and dashboards. Category name The second part of a custom metric is a category name, used to group metrics into different categories. For example, the metrics reported by a database plugin may fall into categories such as schema, tables, or connections. Label The third part of the metric name is used for labeling the data when it appears in tables and charts. If it contains multiple segments, each slash separating the segments of the label will be rendered as part of the label. Units The fourth segment of the metric consists of a units specification. Metric attributes Most metrics are defined statically and represent some global state; for example, cache size. Other metrics are dynamic and include some contextual attribute like the name of a host or a file. These metrics need to be structured so you can easily show them as a group in a table stacked in a chart. To add attribute names to a metric, put them in trailing segments separated by a forward slash / character. For example: Component/Disk/Bytes In/dev001 Component/Network/External services/ae592c3.aws.com Copy You can specify more than one attribute as long as they occupy the same position for a given metric category and label: Component/Tables/Row count/DB001/BLOG_POSTS[rows] Copy Caution Avoid overloading the metric space by putting in segment values that have a large range of values. While something like a customer's region in an attribute is a reasonable thing to track in the metric, the customer name would not be if you have more than a few hundred customers. If your agent starts sending an excessive amount of metrics, your metrics may be automatically collapsed into groups with wildcards: Component/Users/*[visits] Copy Metric values You can report a metric value in one of two ways: Single value: This typically is the value being reported for that time slice. If you use an SDK, you report the single value to the SDK. It handles tracking the rest of these values. Set of aggregate value: This includes the min, max, and sum of squares values for the value being reported. If you use the Plugin API, the preferred method is to report all of the values. When aggregating a series of timeslice data into a single timeslice data entry for a given period, all fields are summed except for the min and max value. If you are using an SDK plugins, this is done automatically. If you are using the Plugin API to develop plugins, you need to code for this. A metric value contains several fields, but it is represented primarily by the count and value. The count is a 32-bit integer field, and the value is a 32-bit float. Metric values can represent more than one data point or sample as an aggregation of measures. Typically the count is the number of samples, and the value is the total value of all samples. Here are the fields in a metric value: Metric value Description count The number of things being measured. If data is collected at the time the event occurs, like with some kind of injection, then the count in the timeslice data will be 1. Required if it is not 1 (0 generally represents an absent value). value Required: The total value measured across all things being counted. When averages are calculated later, we divide the value by the count. In some cases, the value field is irrelevant. min, max The minimum and maximum values when the count is greater than 1. When the count is 1, these are the same as the value. Optional depending on whether they are available or relevant for a given metric. sum of squares This is the sum of squares of each value and is useful when the values follow a standard distribution. You can only capture this value when you are collecting data each time the event happens. You store the value of the event in the value field and the square of the value in the sum of squares. This is used to calculate a standard deviation later on. The sum of squares is optional. It is used to calculate a standard deviation for a selection of data. If standard deviation for the value is not meaningful, such as when the values are not part of a normal distribution, then the sum of squares is omitted. Units When a metric value is collected by periodically sampling an interface, the count units are implicitly samples, and the value units are whatever is being sampled. For data it might be bytes. For throughput it might be something like kilobytes/second. For utilization (like CPU) it might be percent. When the count units are samples, they can be omitted in the metric name. Units of time, bytes, and bits may get special treatment, allowing additional conversion in the user interface between magnitudes. For example, if you specify a metric with units of kilobytes, then in the UI you may be presented the option of displaying a chart of Mb. Metrics units describe what the value field and count represent. Units are specified inside brackets and consist of units for the value, followed by a pipe (|) and then the units for the count. For example: Component/metric_id[value_unit|count_unit] Copy Exception: The pipe and count units (|[count_unit]) are not required after the value unit for samples. Rate metrics are commonly defined as sample per interval. This is defined as units/interval in the metric, with a forward slash to separate units from interval. For example: Component/metric_id[value_unit/interval] Copy In rare cases there will only be a unit value for count. The value will be interpreted as unitless. Value units are omitted, and the vertical bar appears in front of the count units. For example: Component/metric_id[|count_unit] Copy Units for plugin metrics Notes Naming conventions You can have mixed-case unit names. They.can consist strictly of alphabetical characters as well as the _, %, or / symbols. Case is preserved. Punctuation markers, dashes, spaces and any other symbols are not allowed. Recommendation: Use uncapitalized words, spelled out in full. For example, use second not sec. Rate metrics When a metric value represents a rate, such as bytes/second, then the value is assumed to be a sample for the given interval. The units specifier looks like [ bytes/second] since the count units are implicitly samples. For example: Component/metric_id[bytes/second] Copy The count units are samples (default) and the value units are bytes/second. The forward slash separates the units from the interval. Count with units A common case for declaring units is when measuring response times. If the custom metric represents the average latency of a call to a cache, then the units for the metric value are seconds per call. For example: Component/metric_id[seconds|call] Copy Count units are calls and value units are seconds. The default count metric is not being used, so you need to specify it. The bar separates the value units from the count units. Units in charts The units specified in a metric have several implications for the way the values are interpreted by generic charts and tables: Units display in labels and tooltips in charts to indicate what the values represent. Units imply a set of different values available from a single metric value. When creating a chart in a dashboard, the dashboard author selects one of the available value methods for that metric to plot in the chart.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.6587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Metric data for the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "&quot; : 2, &quot;max&quot; : 10, &quot;total&quot;: 12, &quot;count&quot; : 2, &quot;sum_of_squares&quot; : 104 } } } ] }&#x27; Copy Metric references <em>Refer</em> to these references as you <em>develop</em> your own <em>plugins</em>. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order"
      },
      "id": "603e80db64441f0def4e8863"
    },
    {
      "sections": [
        "Plugin data",
        "Important",
        "Limited access to legacy plugins",
        "Use integers and floats",
        "Define the time period (duration)",
        "Follow unit conversion guidelines",
        "Select value methods for display in the UI"
      ],
      "title": "Plugin data",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "e5fd09ba8dd9c63a140479fbc2032254d1cf8c4f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plugin-data/",
      "published_at": "2021-06-09T19:08:48Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Use integers and floats All plugin metrics must be an integer or float, and they must be reported along with a duration. You can also report the type of metric so it can be converted from one unit type into another. You can display the metrics you collect in a variety of value methods, including throughput, averages, min/max, and rate. The metrics appear in charts and tables you create for your plugin's user interface. Plugins in Plugin Central are designed to report on frequency metrics using non-negative integers or floating-point numbers: Non-negative integers: Supported. Floating-point numbers: Supported. Negative values: Not supported, except for summary metrics on the plugin's Summary page. Otherwise, the UI shows negative values as zero. String values: Not supported; the UI shows strings as zero. However, parts of your metric name (the key) can be displayed in the UI. Define the time period (duration) All metrics must include a duration period that starts no more than a few hours in the past. The end time is set automatically to the time New Relic Plugins receives the metrics. You cannot report a duration that starts or ends in the future, or a duration that ends in the past. For best results, use one of the plugin SDKs to create your plugin. Otherwise, some POST attempts may fail because the actual recorded duration could vary in increments of the plugin's scheduled reporting frequency. Follow unit conversion guidelines Plugins automatically converts some units (such as rate units) to more natural forms. For example, [bytes/second] is converted to Bps. Follow these guidelines for unit conversions: Long format: Always specify the long format (for example, [bytes/second]) in the metric name. The long or short version will be used as appropriate. (Unit designations are not case sensitive.) Consistency: Use modifiers consistently in the metric name. If you use a different modifier with the same metric name, it will be treated as a different metric. Optional: Standard modifiers: Provide standard modifiers to the first metric in a value unit. For example, rather than specifying [bytes/second], you can specify [kiloBytes/second]. Plugins accepts these standard modifiers: Modifier Multiplier Modifier Multiplier Kilo 1000 - -- - -- Mega 1000^2 - -- - -- Giga 1000^3 Gibi 1024^3 Tera 1000^4 Tebi 1024^4 Peta 1000^5 Pebi 1024^5 Select value methods for display in the UI When you define a metric value for reporting, Plugins also captures a count, min, max, and sum of squares. Depending on whether you report single or aggregate values, you may report these numbers directly, or Plugins may calculate them automatically. You can then choose a value method for rendering these metrics in your plugin UI. In general, to configure value methods in the user interface: Select the metric you want to use. Review the list of value methods to select how to present the data in a column or plotted in a chart. Available value methods depend on the format of the units part of the metric name: Value method Count | Value Value Rate Count: The total of the count field over the entire timeslice data interval. When aggregating timeslice data, the count is summed. Total value: The total value over the entire time slice data interval. When aggregating timeslice data, the value field is summed Time rates only Average value: The total value divided by the total count, calculated only when units for both count and value are available. Throughput: The total count divided by the time interval of the time slice. By default New Relic Plugins measures the throughput in minutes according to the count units, such as calls per minute or bytes per minute. When the count units are specified in time (seconds), then the throughput appears as a percentage. Min/Max: The statistical values for minimum and maximum values when recorded in the metric value along with Count and Value. Standard deviation: The standard deviation of the entire set of measures recorded over the time interval. This is available only if the sum of squares field was populated in the metric value. The sum of squares and mean are used to calculate the standard deviation. In practice, this is meaningful only for populations that resemble a normal distribution. Rate: The rate is the total value divided by the time interval. When units of the value are in time, then the rate value is a percentage value. Units that are themselves rates will not have an explicit rate value method. The rate is simply the average value. Percentage: If you want the metric to appear as a percentage in the user interface, then you must define it as a percentage in the JSON.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.656,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> data",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e91e3196a67c11ea83d9d"
    },
    {
      "sections": [
        "Plan plugin metrics",
        "Important",
        "Limited access to legacy plugins",
        "Collect plugin metrics",
        "Present plugin metrics"
      ],
      "title": "Plan plugin metrics",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "08974b731c810af2b6b037e8b761834c6e1ce7a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plan-plugin-metrics/",
      "published_at": "2021-06-09T19:06:54Z",
      "updated_at": "2021-03-16T11:01:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Collect plugin metrics If you are running one of our APM agents to receive information about your applications, you can also receive arbitrary custom metrics. Using custom dashboards with your plugins, you can visualize custom metrics in a variety of useful ways. You can write plugins agents that can be run anywhere to collect metrics from any available system and report them to New Relic for dashboard display. Plugins also allow for summary metrics and one or more dashboards to visualize metrics that can be shared with every user of the plugin. This allows you to create a consistent user interface for the metrics you collect. The data that plugins report is in the form of a key/value pair. Values are numerical, either integers or floating point non-negative numbers. Negative numbers can be included in your summary metrics and tables; however, visualization in charts is limited to numbers greater than or equal to zero. Keys are strings which include the concept of name spaces and units. While values cannot be strings, parts of your metric name (the key) can be displayed in plugin dashboards. Your plugin agent can run anywhere with internet access to Plugins. You can write an agent using the agent SDKs. You can also write your agent to connect via HTTP POST using the API for Plugins in any language with HTTP support. Using the Plugin API might be the most appropriate solution when one agent is reporting metrics for more than one New Relic account. This is common for service providers to report specialized metrics for each of their customers using Plugins. This can be done with a small number of agents monitoring a large number of users. Present plugin metrics When creating a plugin agent, good metric name planning is critical to your success. Poorly chosen metrics names can make it difficult or impossible to display the information you intend. Plan ahead for how you want to visualize your information and to record metrics in a way that will facilitate this. You may even want to record the same metrics with more than one name in order to visualize different aspects of your data. Plugin dashboards do not have the ability to do mathematical calculations, so make sure your plugin agent handles any necessary calculations (sum, average, total, count, etc.) before recording metrics. Once you have collected metrics with your plugin agent, you will need to create dashboards to visualize the information in your metrics. All plugins will have a default dashboard. You can add as many dashboards as necessary to visualize your metric data (maximum 15). In addition to dashboards, you can choose up to five metrics to represent the summary of each instance. Summary metrics convey the health status of each instance and are used to trigger Caution events and Critical alerts for your plugins. The summary metrics appear on your plugin's Summary page.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.65587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Plan <em>plugin</em> metrics",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603eb01228ccbc6fa6eba790"
    }
  ],
  "/docs/plugins/plugin-developer-resources/developer-reference/licenses-plugin-developers": [
    {
      "sections": [
        "Metric data for the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "URI",
        "GUID",
        "Time periods for metrics",
        "Metric data details",
        "Timeslice metric values",
        "Calculations",
        "Examples",
        "Metrics",
        "cURL example",
        "Metric references",
        "Metric naming guidelines",
        "Metric segments",
        "Caution",
        "Metric attributes",
        "Metric values",
        "Units"
      ],
      "title": "Metric data for the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "2e9d0553b7277c73fe8a2147519d9943fca440fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/metric-data-plugin-api/",
      "published_at": "2021-06-09T19:05:38Z",
      "updated_at": "2021-03-16T11:20:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. URI Metric timeslice data is sent with the Plugin API as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The Plugin API does not support New Relic's REST API, and vice versa. However, you can use the REST API (v2) to extract plugin data. For a list with links to procedures and examples, see Plugin examples (v2). GUID The plugin needs a Globally Unique Identifier (GUID), which is a character string limited to no less than 4 and no more than 255 characters. The GUID for a published plugin must be unique for each plugin. When creating a plugin, you are responsible for managing your own GUIDs to avoid naming conflicts. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metric(s). Thus, you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show any time period you want; for example, 30 minutes, 30 days, etc. You can also deliver data at 1-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, data will aggregate when there is too much, but data will not be extrapolated if there is not enough data. In order for data to appear on a 30 minute chart, make sure at least one data point is within the range, or no data will appear. Use a 60-second polling interval, because the default dashboard shows 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Metric data details The JSON data is a hash with two required keys at the top level: components: An array of components, each consisting of a hash of attributes for the individual component, including the metric data. agent: A hash describing the agent that is reporting metrics data to New Relic Plugins on behalf of the component(s). Of these values, only host and version are required. When graphing metrics, be aware that null = zero. Metric data POST Description Component data One of two required keys at the top level. This is an array of hashes describing the components that report metrics in this request. Each hash contains the following values: name A name ( < =32 characters) that uniquely identifies the monitored entity and appears as the display name for this agent. Note: Metric names are case sensitive. guid A \"reverse domain name\" styled identifier; for example, com.newrelic.mysql. This is a unique identity defined in the plugin's user interface, which ties the agent data to the corresponding plugin user interface in New Relic. duration The duration in seconds over which the metric data was collected. The end time is implied as the time the data is received by the API. metrics Timeslice data for each metric being reported. The hash keys are metric names, and the values are the timeslice data value for the named metric. Agent data One of two required keys at the top level. A hash specifying information about the agent that is reporting data on behalf of the components. host (required) The hostname of the agent monitoring the specified components. This is the hostname where the monitoring agent is running, not the hostname of the component being monitored. pid (optional) The process identifier of the agent monitoring the specified components. This is the process identifier of the monitoring agent itself, not a process identifier that may be associated with the monitored components. version (required) The version of the agent monitoring the specified components, using the format A.B.C where A, B, and C are integers. The version number must conform to the rules specified in standard Semantic Versioning scheme v2.0.0. Timeslice metric values Metrics are sent inside the component hash with the key metrics and a hash as a value. The hash keys are metric names, and the values are the timeslice data values for the named metric. The timeslice hash value uses one of three formats: Timeslice hash value Description A single scalar value with a floating point number or integer This is the simplest format, and this number is required. The reported value is used as the total, minimum, and maximum data value. The count value is assumed to be 1. The Plugin API does not support reporting of arbitrary string metrics, only scalar values that are aggregated. Array of five required values in specific order An array of five required integers or floating point numbers that represent, in order: Total value over the time period Count of the number of events this value represents over the time period; the average is calculated by dividing total by count Minimum value over the time period Maximum value over the time period Sum of squares for the samples over the time period Hash with five required key/value pairs in any order A hash with value names as the keys, and integers or floating point values as the values. All five key/value pairs are required. The keys of the hash are the type of timeslice data, and the value is the data value. These has key/value pairs can be in any order: total: Total value over the time period count: Count of the number of events this value represents over the time period; the average is calculated by dividing total by count min: Minimum value over the time period max: Maximum value over the time period sum_of_squares: Sum of squares for the samples over the time period Calculations Limited mathematical calculations are available with the key/value pairs, such as computing total, count, minimum, maximum, averages, and standard deviations. However, to do more extensive calculations, you need to do the math in the agent, and then send the results as a new metric. For example, send Metric1, Metric2, and Metric3 (which equals Metric1 divided by Metric2). If you submit negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Examples Here are some examples. Metrics \"metrics\" : { \"Component/Database/Primary[Queries/Second]\" : { \"total\" : 25, \"count\" : 2, \"min\" : 10, \"max\" : 15, \"sum_of_squares\" : 325 }, \"Component/Database/Secondary[Queries/Second]\" : [25, 2, 10, 15, 325], \"Component/Database/Backup[Queries/Second]\" : 10 } Copy cURL example curl -vi https://platform-api.newrelic.com/platform/v1/metrics \\ -H \"X-License-Key: YOUR_LICENSE_KEY_HERE\" \\ -H \"Content-Type: application/json\" \\ -H \"Accept: application/json\" \\ -X POST -d '{ \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] }' Copy Metric references Refer to these references as you develop your own plugins. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order for the metric to be rendered usefully in the user interface, the metric name must contain a prefix, category name, label, and optional units indicator. Here are some recommended guidelines for the text in metric names to make them more readable in the user interface. Metric naming guidelines Guidelines UI display Use case and whitespace characters appropriate for display in the user interface, because segments are rendered as-is in the UI. Category and label segments Metric names are case sensitive. Capitalize the first word in the category and label segments. Keep category and label segments as short as possible. Length There is a limit of 255 characters for metric names. Characters to avoid using Avoid using the following characters in names. These characters have special meaning and should not be used except where specifically required for their purpose. / ] [ | * Also avoid multi-byte characters. Units Use abbreviated names for units when possible. Metric segments Each of these segments is divided by the forward slash / character. Each segment is interpreted for a specific purpose in the UI and roughly follows this pattern: prefix/category/label[units] Copy For example, the metric representing the latency of cache hits reported by a plugin collecting data for a cache appliance might look like this: Component/Cache/Hits[sec|hit] Copy Metric segment order Notes Prefix: Component/ or Custom/ The first segment of a custom metric is Component/ (if it comes from a plugin agent) or Custom/ (if it is a custom metric collected by a New Relic agent. For example, Custom/MyMetric). Caution If you use the Plugin API only, and if the metrics do not start with Component/, they may not be available or may not appear correctly in charts and dashboards. Category name The second part of a custom metric is a category name, used to group metrics into different categories. For example, the metrics reported by a database plugin may fall into categories such as schema, tables, or connections. Label The third part of the metric name is used for labeling the data when it appears in tables and charts. If it contains multiple segments, each slash separating the segments of the label will be rendered as part of the label. Units The fourth segment of the metric consists of a units specification. Metric attributes Most metrics are defined statically and represent some global state; for example, cache size. Other metrics are dynamic and include some contextual attribute like the name of a host or a file. These metrics need to be structured so you can easily show them as a group in a table stacked in a chart. To add attribute names to a metric, put them in trailing segments separated by a forward slash / character. For example: Component/Disk/Bytes In/dev001 Component/Network/External services/ae592c3.aws.com Copy You can specify more than one attribute as long as they occupy the same position for a given metric category and label: Component/Tables/Row count/DB001/BLOG_POSTS[rows] Copy Caution Avoid overloading the metric space by putting in segment values that have a large range of values. While something like a customer's region in an attribute is a reasonable thing to track in the metric, the customer name would not be if you have more than a few hundred customers. If your agent starts sending an excessive amount of metrics, your metrics may be automatically collapsed into groups with wildcards: Component/Users/*[visits] Copy Metric values You can report a metric value in one of two ways: Single value: This typically is the value being reported for that time slice. If you use an SDK, you report the single value to the SDK. It handles tracking the rest of these values. Set of aggregate value: This includes the min, max, and sum of squares values for the value being reported. If you use the Plugin API, the preferred method is to report all of the values. When aggregating a series of timeslice data into a single timeslice data entry for a given period, all fields are summed except for the min and max value. If you are using an SDK plugins, this is done automatically. If you are using the Plugin API to develop plugins, you need to code for this. A metric value contains several fields, but it is represented primarily by the count and value. The count is a 32-bit integer field, and the value is a 32-bit float. Metric values can represent more than one data point or sample as an aggregation of measures. Typically the count is the number of samples, and the value is the total value of all samples. Here are the fields in a metric value: Metric value Description count The number of things being measured. If data is collected at the time the event occurs, like with some kind of injection, then the count in the timeslice data will be 1. Required if it is not 1 (0 generally represents an absent value). value Required: The total value measured across all things being counted. When averages are calculated later, we divide the value by the count. In some cases, the value field is irrelevant. min, max The minimum and maximum values when the count is greater than 1. When the count is 1, these are the same as the value. Optional depending on whether they are available or relevant for a given metric. sum of squares This is the sum of squares of each value and is useful when the values follow a standard distribution. You can only capture this value when you are collecting data each time the event happens. You store the value of the event in the value field and the square of the value in the sum of squares. This is used to calculate a standard deviation later on. The sum of squares is optional. It is used to calculate a standard deviation for a selection of data. If standard deviation for the value is not meaningful, such as when the values are not part of a normal distribution, then the sum of squares is omitted. Units When a metric value is collected by periodically sampling an interface, the count units are implicitly samples, and the value units are whatever is being sampled. For data it might be bytes. For throughput it might be something like kilobytes/second. For utilization (like CPU) it might be percent. When the count units are samples, they can be omitted in the metric name. Units of time, bytes, and bits may get special treatment, allowing additional conversion in the user interface between magnitudes. For example, if you specify a metric with units of kilobytes, then in the UI you may be presented the option of displaying a chart of Mb. Metrics units describe what the value field and count represent. Units are specified inside brackets and consist of units for the value, followed by a pipe (|) and then the units for the count. For example: Component/metric_id[value_unit|count_unit] Copy Exception: The pipe and count units (|[count_unit]) are not required after the value unit for samples. Rate metrics are commonly defined as sample per interval. This is defined as units/interval in the metric, with a forward slash to separate units from interval. For example: Component/metric_id[value_unit/interval] Copy In rare cases there will only be a unit value for count. The value will be interpreted as unitless. Value units are omitted, and the vertical bar appears in front of the count units. For example: Component/metric_id[|count_unit] Copy Units for plugin metrics Notes Naming conventions You can have mixed-case unit names. They.can consist strictly of alphabetical characters as well as the _, %, or / symbols. Case is preserved. Punctuation markers, dashes, spaces and any other symbols are not allowed. Recommendation: Use uncapitalized words, spelled out in full. For example, use second not sec. Rate metrics When a metric value represents a rate, such as bytes/second, then the value is assumed to be a sample for the given interval. The units specifier looks like [ bytes/second] since the count units are implicitly samples. For example: Component/metric_id[bytes/second] Copy The count units are samples (default) and the value units are bytes/second. The forward slash separates the units from the interval. Count with units A common case for declaring units is when measuring response times. If the custom metric represents the average latency of a call to a cache, then the units for the metric value are seconds per call. For example: Component/metric_id[seconds|call] Copy Count units are calls and value units are seconds. The default count metric is not being used, so you need to specify it. The bar separates the value units from the count units. Units in charts The units specified in a metric have several implications for the way the values are interpreted by generic charts and tables: Units display in labels and tooltips in charts to indicate what the values represent. Units imply a set of different values available from a single metric value. When creating a chart in a dashboard, the dashboard author selects one of the available value methods for that metric to plot in the chart.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.6587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Metric data for the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "&quot; : 2, &quot;max&quot; : 10, &quot;total&quot;: 12, &quot;count&quot; : 2, &quot;sum_of_squares&quot; : 104 } } } ] }&#x27; Copy Metric references <em>Refer</em> to these references as you <em>develop</em> your own <em>plugins</em>. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order"
      },
      "id": "603e80db64441f0def4e8863"
    },
    {
      "sections": [
        "Plugin data",
        "Important",
        "Limited access to legacy plugins",
        "Use integers and floats",
        "Define the time period (duration)",
        "Follow unit conversion guidelines",
        "Select value methods for display in the UI"
      ],
      "title": "Plugin data",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "e5fd09ba8dd9c63a140479fbc2032254d1cf8c4f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plugin-data/",
      "published_at": "2021-06-09T19:08:48Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Use integers and floats All plugin metrics must be an integer or float, and they must be reported along with a duration. You can also report the type of metric so it can be converted from one unit type into another. You can display the metrics you collect in a variety of value methods, including throughput, averages, min/max, and rate. The metrics appear in charts and tables you create for your plugin's user interface. Plugins in Plugin Central are designed to report on frequency metrics using non-negative integers or floating-point numbers: Non-negative integers: Supported. Floating-point numbers: Supported. Negative values: Not supported, except for summary metrics on the plugin's Summary page. Otherwise, the UI shows negative values as zero. String values: Not supported; the UI shows strings as zero. However, parts of your metric name (the key) can be displayed in the UI. Define the time period (duration) All metrics must include a duration period that starts no more than a few hours in the past. The end time is set automatically to the time New Relic Plugins receives the metrics. You cannot report a duration that starts or ends in the future, or a duration that ends in the past. For best results, use one of the plugin SDKs to create your plugin. Otherwise, some POST attempts may fail because the actual recorded duration could vary in increments of the plugin's scheduled reporting frequency. Follow unit conversion guidelines Plugins automatically converts some units (such as rate units) to more natural forms. For example, [bytes/second] is converted to Bps. Follow these guidelines for unit conversions: Long format: Always specify the long format (for example, [bytes/second]) in the metric name. The long or short version will be used as appropriate. (Unit designations are not case sensitive.) Consistency: Use modifiers consistently in the metric name. If you use a different modifier with the same metric name, it will be treated as a different metric. Optional: Standard modifiers: Provide standard modifiers to the first metric in a value unit. For example, rather than specifying [bytes/second], you can specify [kiloBytes/second]. Plugins accepts these standard modifiers: Modifier Multiplier Modifier Multiplier Kilo 1000 - -- - -- Mega 1000^2 - -- - -- Giga 1000^3 Gibi 1024^3 Tera 1000^4 Tebi 1024^4 Peta 1000^5 Pebi 1024^5 Select value methods for display in the UI When you define a metric value for reporting, Plugins also captures a count, min, max, and sum of squares. Depending on whether you report single or aggregate values, you may report these numbers directly, or Plugins may calculate them automatically. You can then choose a value method for rendering these metrics in your plugin UI. In general, to configure value methods in the user interface: Select the metric you want to use. Review the list of value methods to select how to present the data in a column or plotted in a chart. Available value methods depend on the format of the units part of the metric name: Value method Count | Value Value Rate Count: The total of the count field over the entire timeslice data interval. When aggregating timeslice data, the count is summed. Total value: The total value over the entire time slice data interval. When aggregating timeslice data, the value field is summed Time rates only Average value: The total value divided by the total count, calculated only when units for both count and value are available. Throughput: The total count divided by the time interval of the time slice. By default New Relic Plugins measures the throughput in minutes according to the count units, such as calls per minute or bytes per minute. When the count units are specified in time (seconds), then the throughput appears as a percentage. Min/Max: The statistical values for minimum and maximum values when recorded in the metric value along with Count and Value. Standard deviation: The standard deviation of the entire set of measures recorded over the time interval. This is available only if the sum of squares field was populated in the metric value. The sum of squares and mean are used to calculate the standard deviation. In practice, this is meaningful only for populations that resemble a normal distribution. Rate: The rate is the total value divided by the time interval. When units of the value are in time, then the rate value is a percentage value. Units that are themselves rates will not have an explicit rate value method. The rate is simply the average value. Percentage: If you want the metric to appear as a percentage in the user interface, then you must define it as a percentage in the JSON.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.656,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> data",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e91e3196a67c11ea83d9d"
    },
    {
      "sections": [
        "Plan plugin metrics",
        "Important",
        "Limited access to legacy plugins",
        "Collect plugin metrics",
        "Present plugin metrics"
      ],
      "title": "Plan plugin metrics",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "08974b731c810af2b6b037e8b761834c6e1ce7a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plan-plugin-metrics/",
      "published_at": "2021-06-09T19:06:54Z",
      "updated_at": "2021-03-16T11:01:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Collect plugin metrics If you are running one of our APM agents to receive information about your applications, you can also receive arbitrary custom metrics. Using custom dashboards with your plugins, you can visualize custom metrics in a variety of useful ways. You can write plugins agents that can be run anywhere to collect metrics from any available system and report them to New Relic for dashboard display. Plugins also allow for summary metrics and one or more dashboards to visualize metrics that can be shared with every user of the plugin. This allows you to create a consistent user interface for the metrics you collect. The data that plugins report is in the form of a key/value pair. Values are numerical, either integers or floating point non-negative numbers. Negative numbers can be included in your summary metrics and tables; however, visualization in charts is limited to numbers greater than or equal to zero. Keys are strings which include the concept of name spaces and units. While values cannot be strings, parts of your metric name (the key) can be displayed in plugin dashboards. Your plugin agent can run anywhere with internet access to Plugins. You can write an agent using the agent SDKs. You can also write your agent to connect via HTTP POST using the API for Plugins in any language with HTTP support. Using the Plugin API might be the most appropriate solution when one agent is reporting metrics for more than one New Relic account. This is common for service providers to report specialized metrics for each of their customers using Plugins. This can be done with a small number of agents monitoring a large number of users. Present plugin metrics When creating a plugin agent, good metric name planning is critical to your success. Poorly chosen metrics names can make it difficult or impossible to display the information you intend. Plan ahead for how you want to visualize your information and to record metrics in a way that will facilitate this. You may even want to record the same metrics with more than one name in order to visualize different aspects of your data. Plugin dashboards do not have the ability to do mathematical calculations, so make sure your plugin agent handles any necessary calculations (sum, average, total, count, etc.) before recording metrics. Once you have collected metrics with your plugin agent, you will need to create dashboards to visualize the information in your metrics. All plugins will have a default dashboard. You can add as many dashboards as necessary to visualize your metric data (maximum 15). In addition to dashboards, you can choose up to five metrics to represent the summary of each instance. Summary metrics convey the health status of each instance and are used to trigger Caution events and Critical alerts for your plugins. The summary metrics appear on your plugin's Summary page.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.65587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Plan <em>plugin</em> metrics",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603eb01228ccbc6fa6eba790"
    }
  ],
  "/docs/plugins/plugin-developer-resources/developer-reference/metric-data-plugin-api": [
    {
      "sections": [
        "Plugin data",
        "Important",
        "Limited access to legacy plugins",
        "Use integers and floats",
        "Define the time period (duration)",
        "Follow unit conversion guidelines",
        "Select value methods for display in the UI"
      ],
      "title": "Plugin data",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "e5fd09ba8dd9c63a140479fbc2032254d1cf8c4f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plugin-data/",
      "published_at": "2021-06-09T19:08:48Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Use integers and floats All plugin metrics must be an integer or float, and they must be reported along with a duration. You can also report the type of metric so it can be converted from one unit type into another. You can display the metrics you collect in a variety of value methods, including throughput, averages, min/max, and rate. The metrics appear in charts and tables you create for your plugin's user interface. Plugins in Plugin Central are designed to report on frequency metrics using non-negative integers or floating-point numbers: Non-negative integers: Supported. Floating-point numbers: Supported. Negative values: Not supported, except for summary metrics on the plugin's Summary page. Otherwise, the UI shows negative values as zero. String values: Not supported; the UI shows strings as zero. However, parts of your metric name (the key) can be displayed in the UI. Define the time period (duration) All metrics must include a duration period that starts no more than a few hours in the past. The end time is set automatically to the time New Relic Plugins receives the metrics. You cannot report a duration that starts or ends in the future, or a duration that ends in the past. For best results, use one of the plugin SDKs to create your plugin. Otherwise, some POST attempts may fail because the actual recorded duration could vary in increments of the plugin's scheduled reporting frequency. Follow unit conversion guidelines Plugins automatically converts some units (such as rate units) to more natural forms. For example, [bytes/second] is converted to Bps. Follow these guidelines for unit conversions: Long format: Always specify the long format (for example, [bytes/second]) in the metric name. The long or short version will be used as appropriate. (Unit designations are not case sensitive.) Consistency: Use modifiers consistently in the metric name. If you use a different modifier with the same metric name, it will be treated as a different metric. Optional: Standard modifiers: Provide standard modifiers to the first metric in a value unit. For example, rather than specifying [bytes/second], you can specify [kiloBytes/second]. Plugins accepts these standard modifiers: Modifier Multiplier Modifier Multiplier Kilo 1000 - -- - -- Mega 1000^2 - -- - -- Giga 1000^3 Gibi 1024^3 Tera 1000^4 Tebi 1024^4 Peta 1000^5 Pebi 1024^5 Select value methods for display in the UI When you define a metric value for reporting, Plugins also captures a count, min, max, and sum of squares. Depending on whether you report single or aggregate values, you may report these numbers directly, or Plugins may calculate them automatically. You can then choose a value method for rendering these metrics in your plugin UI. In general, to configure value methods in the user interface: Select the metric you want to use. Review the list of value methods to select how to present the data in a column or plotted in a chart. Available value methods depend on the format of the units part of the metric name: Value method Count | Value Value Rate Count: The total of the count field over the entire timeslice data interval. When aggregating timeslice data, the count is summed. Total value: The total value over the entire time slice data interval. When aggregating timeslice data, the value field is summed Time rates only Average value: The total value divided by the total count, calculated only when units for both count and value are available. Throughput: The total count divided by the time interval of the time slice. By default New Relic Plugins measures the throughput in minutes according to the count units, such as calls per minute or bytes per minute. When the count units are specified in time (seconds), then the throughput appears as a percentage. Min/Max: The statistical values for minimum and maximum values when recorded in the metric value along with Count and Value. Standard deviation: The standard deviation of the entire set of measures recorded over the time interval. This is available only if the sum of squares field was populated in the metric value. The sum of squares and mean are used to calculate the standard deviation. In practice, this is meaningful only for populations that resemble a normal distribution. Rate: The rate is the total value divided by the time interval. When units of the value are in time, then the rate value is a percentage value. Units that are themselves rates will not have an explicit rate value method. The rate is simply the average value. Percentage: If you want the metric to appear as a percentage in the user interface, then you must define it as a percentage in the JSON.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.656,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> data",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e91e3196a67c11ea83d9d"
    },
    {
      "sections": [
        "Plan plugin metrics",
        "Important",
        "Limited access to legacy plugins",
        "Collect plugin metrics",
        "Present plugin metrics"
      ],
      "title": "Plan plugin metrics",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "08974b731c810af2b6b037e8b761834c6e1ce7a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plan-plugin-metrics/",
      "published_at": "2021-06-09T19:06:54Z",
      "updated_at": "2021-03-16T11:01:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Collect plugin metrics If you are running one of our APM agents to receive information about your applications, you can also receive arbitrary custom metrics. Using custom dashboards with your plugins, you can visualize custom metrics in a variety of useful ways. You can write plugins agents that can be run anywhere to collect metrics from any available system and report them to New Relic for dashboard display. Plugins also allow for summary metrics and one or more dashboards to visualize metrics that can be shared with every user of the plugin. This allows you to create a consistent user interface for the metrics you collect. The data that plugins report is in the form of a key/value pair. Values are numerical, either integers or floating point non-negative numbers. Negative numbers can be included in your summary metrics and tables; however, visualization in charts is limited to numbers greater than or equal to zero. Keys are strings which include the concept of name spaces and units. While values cannot be strings, parts of your metric name (the key) can be displayed in plugin dashboards. Your plugin agent can run anywhere with internet access to Plugins. You can write an agent using the agent SDKs. You can also write your agent to connect via HTTP POST using the API for Plugins in any language with HTTP support. Using the Plugin API might be the most appropriate solution when one agent is reporting metrics for more than one New Relic account. This is common for service providers to report specialized metrics for each of their customers using Plugins. This can be done with a small number of agents monitoring a large number of users. Present plugin metrics When creating a plugin agent, good metric name planning is critical to your success. Poorly chosen metrics names can make it difficult or impossible to display the information you intend. Plan ahead for how you want to visualize your information and to record metrics in a way that will facilitate this. You may even want to record the same metrics with more than one name in order to visualize different aspects of your data. Plugin dashboards do not have the ability to do mathematical calculations, so make sure your plugin agent handles any necessary calculations (sum, average, total, count, etc.) before recording metrics. Once you have collected metrics with your plugin agent, you will need to create dashboards to visualize the information in your metrics. All plugins will have a default dashboard. You can add as many dashboards as necessary to visualize your metric data (maximum 15). In addition to dashboards, you can choose up to five metrics to represent the summary of each instance. Summary metrics convey the health status of each instance and are used to trigger Caution events and Critical alerts for your plugins. The summary metrics appear on your plugin's Summary page.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.65587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Plan <em>plugin</em> metrics",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603eb01228ccbc6fa6eba790"
    },
    {
      "sections": [
        "Use the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "Before you begin",
        "Metric data POST",
        "Data aggregation",
        "Compression",
        "Examples",
        "Example JSON",
        "Pseudo-code template",
        "API responses and error codes",
        "Debugging logs",
        "Error codes"
      ],
      "title": "Use the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "f30a9a37241be1a13263e2bc8892f411d6fa618b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/use-plugin-api/",
      "published_at": "2021-06-09T19:08:48Z",
      "updated_at": "2021-03-13T03:44:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Before you begin Using a development language other than Ruby, .NET, or Java for a plugin agent means you do not have an SDK to work with, but you do have some benefits. This is a guide for plugin developers to get started with writing an agent in any language that can work directly with the Plugin API for Plugin Central. You can use any language you want, as long as it supports sending JSON through HTTP POST. This allows for better integration with your systems. For the same reason, it is the best option for SaaS-based plugin agents. However, if you are not using the Plugins SDK for Java. .NET, or Ruby, you have some additional setup and planning to do in developing a plugin agent. This includes: Error tracking on POST calls A method for tracking and aggregating data when a POST fails Your own support plans if a New Relic SDK for your language or development tools is not available Any publicly available plugins in the Plugin Central should come bundled with their source code if the executable code is not plain text. This allows you to both try out plugins and to review the code. Recommendation: Before authoring a plugin, install some existing plugins using the Java SDK, .NET SDK, or Ruby SDK to see how they are written. Metric data POST Metric data is sent as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The MIME-type for the POST is application/json. The Plugins feature is designed to receive a continuous stream of metrics at a certain maximum speed, and to present this information on useful charts. The recommended frequency for sending data to Plugins is to send 60 seconds worth of data once a minute. Agents sending data more frequently than twice a minute on average may be subject to enforced limits on the number of metrics being saved. The following are recommended soft limits. Requests smaller than this will work; requests larger than this are subject to rejection or automatic data aggregation. As a hard cap, the total size of the POST payload should be no larger than 1MB (10^6 bytes). If the metric is \"expensive\" to calculate and does not change quickly, consider writing your plugin agent so that it skips some polling cycles to retrieve data and then sends the last value. This produces better results for your plugin users' dashboards. Type Limit Description Components 500 Number of distinct components currently tracked. Please note this is a per POST limit only. More than 500 components are able to report to an account simultaneously. Metrics per component 10,000 Total number of unique metrics per component. Take precautions to ensure metric names are not generated too dynamically. Even if the number of metrics being sent in each individual post is small, over time they may add up to a large number of unique metrics. When the number of metrics for a given component exceeds this limit, the server may start aggregating metrics together by globbing segments of the metric name with an asterisk (*). Metrics per post 20,000 Number of metrics sent per post. A post may send data for multiple components in a single request as long as the total number of metrics in the request does not exceed this limit. Frequency of post 2 per minute Frequency of update. Agents are expected to send data no more frequently than 1 per minute. Data aggregation The SDKs manage data aggregation in the event of a failed POST. If you are not using an SDK, you need to manage this yourself. Include all five metric values in a POST: min, max, total, count, and sum or squares. (Exception: This may not be necessary for monotonic metrics where short term variation is not an issue.) Recompute these values for the accumulating metric data as required by what is being measured, incrementing the duration accordingly, until a successful POST is sent. Compression Data can be sent in the following encoding formats: identity deflate gzip If data is sent compressed, make sure the Content-Encoding header specifies the type of encoding. Examples Here are some examples for developing plugins. Example JSON This is an example of the JSON that would be used to POST data to Plugins. The JSON data is a hash with two required keys at the top level: agent: A hash describing the agent that is reporting metrics data to Plugins. A POST can contain information for only one agent. Host and version are required. components: An array of components, each consisting of a hash of attributes for the individual component. Multiple components can be sent with a single. Each component has its own name, GUID, duration, and metrics. { \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] } Copy Pseudo-code template This is a pseudo-code example that works with the Plugin API. It can be used as a template for developing plugin agents. Initialization: // globals string platform_api_uri = \"https://platform-api.newrelic.com/platform/v1/metrics\" int poll_cycle = 60 // time in seconds string version = \"1.0.0\" // major_version.minor_version.patch_level string agent_host = get_host_name_where_this_process_is_running() string agent_pid = get_process_id_of_this_process() time last_poll_time // initialize if necessary initialize once create agent_hash with: agent_host agent_pid version for each newrelic_account do // just handling one account? then \"for each\" is unnecessary complexity for each monitored_component do create component_hash with: string guid = \"com.your_company.component_name_in_snake_case\" string name =\"Human Readable Component Name\" int duration = 0 // this will get updated each poll_cycle hash metrics_hash // this will be updated by populate_component_metrics_hash() end end end Copy Loop: every poll_cycle seconds do for each newrelic_account do // just handling one account? then \"for each\" is unnecessary complexity clear hash_to_send add agent_hash to hash_to_send for each component do populate_component_metrics_hash() this component.metrics_hash(\"duration\") = time.now() - last_poll_time in seconds add component.metrics_hash to hash_to_send end json_to_send = serialize_to_json(hash_to_send) connection = open http_connection(platform_api_uri) add header(\"X-License-Key\",this newrelic_account.license_key) to connection add header(\"Content-Type\",\"application/json\") to connection add header(\"Accept\",\"application/json\") to connection set http_verb to \"POST\" for connection response = send(json_to_send) to connection case response.code when response_code = 200 clear component.metrics_hash last_poll_time = time.now() when response_code = 400 // your request was malformed // consider reporting a \"supportability\" metric which counts the number of 400 responses you get // for example \"Component/Supportability/http_error_codes/400\" // you can use this on a \"Supportability\" Dashboard that helps diagnose your agent when response_code = 403 // forbidden probably due to a bad license key // log error and shutdown the agent when response_code = 404 // invalid URL // you should never get this error for https://platform-api.newrelic.com/platform/v1/metrics when response_code = 405 // invalid method // HTTP verb should be \"POST\" when response_code = 413 // POST body too large // try splitting at component boundaries // split along metric name spaces // fail gracefully - consider reporting a supportability metric (see 400) when response_code = 500 // error on New Relic's collector // could be due to malformed data or system trouble // fail gracefully - consider reporting a supportability metric (see 400) when response_code = 503 or 504 // New Relic collector busy //- this happens by design from time-to-time // keep collecting metrics // do NOT reset last_poll_time // log error if the problem persists for several minutes end case end end Copy Metric population: function populate_component_metrics_hash() // collect metrics from monitored component at any interval // if this is the first time collecting metrics, set last_poll_time to // time.now - metric duration, the time duration for which these metrics // were collected // // if you collect 2 or more metrics from the monitored component before data // is reported to Plugins either because your metric collection interval is // faster than poll_cycle or because your agent was unable to report metrics to // Plugins (for example a 503 http response), aggregate your data by storing: // total_value, max, min, count, sum_of_squares for each metric // // if the interval is longer than poll_cycle, retain the metrics and // report them each poll_cycle until they are updated end Copy API responses and error codes Depending on whether you are using the Plugin API or an agent SDK for plugins, the HTTP responses and logging techniques may be different. For example, responses for the Plugin API are uncompressed JSON. Successful posts return this JSON: {\"status\":\"ok\"} Copy The API does not support Accept-Encoding. Debugging logs To debug information, use either of these options: public static Logger getLogger(); Copy OR public static void Logger setLogger(Logger logger) { LOGGER = logger; } Copy Error codes If an error occurs, an appropriate status code is returned. The JSON returned is the hash key error with a detailed description of the error that occurred. For example: {\"error\":\"Failed to create agent with parameters=[...]\"} {\"error\":\"Missing metric data\"} {\"error\":\"Unable to parse body: Unexpected token RIGHT BRACE(}) at position 228.\"} Copy Code Name Description 400 Bad request The request or headers are in the wrong format, or the URL is incorrect, or the GUID does not meet the validation requirements. 403 Unauthorized Authentication error (no license key header, or invalid license key). 404 Not found Invalid URL. 405 Method not allowed Returned if the method is an invalid or unexpected type (GET/POST/PUT/etc.). 413 Request entity too large Too many metrics were sent in one request, or too many components (instances) were specified in one request, or other single-request limits were reached. 500 Internal server error Unexpected server error. 502 Bad gateway All 50X errors mean there is a transient problem in the server completing requests, and no data has been retained. Clients are expected to resend the data after waiting one minute. The data should be aggregated appropriately, combining multiple timeslice data values for the same metric into a single aggregate timeslice data value. 503 Service unavailable See 502 description. 504 Gateway timeout See 502 description.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.96164,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "604436cf28ccbcf2332c60a8"
    }
  ],
  "/docs/plugins/plugin-developer-resources/developer-reference/parts-plugin": [
    {
      "sections": [
        "Metric data for the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "URI",
        "GUID",
        "Time periods for metrics",
        "Metric data details",
        "Timeslice metric values",
        "Calculations",
        "Examples",
        "Metrics",
        "cURL example",
        "Metric references",
        "Metric naming guidelines",
        "Metric segments",
        "Caution",
        "Metric attributes",
        "Metric values",
        "Units"
      ],
      "title": "Metric data for the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "2e9d0553b7277c73fe8a2147519d9943fca440fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/metric-data-plugin-api/",
      "published_at": "2021-06-09T19:05:38Z",
      "updated_at": "2021-03-16T11:20:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. URI Metric timeslice data is sent with the Plugin API as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The Plugin API does not support New Relic's REST API, and vice versa. However, you can use the REST API (v2) to extract plugin data. For a list with links to procedures and examples, see Plugin examples (v2). GUID The plugin needs a Globally Unique Identifier (GUID), which is a character string limited to no less than 4 and no more than 255 characters. The GUID for a published plugin must be unique for each plugin. When creating a plugin, you are responsible for managing your own GUIDs to avoid naming conflicts. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metric(s). Thus, you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show any time period you want; for example, 30 minutes, 30 days, etc. You can also deliver data at 1-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, data will aggregate when there is too much, but data will not be extrapolated if there is not enough data. In order for data to appear on a 30 minute chart, make sure at least one data point is within the range, or no data will appear. Use a 60-second polling interval, because the default dashboard shows 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Metric data details The JSON data is a hash with two required keys at the top level: components: An array of components, each consisting of a hash of attributes for the individual component, including the metric data. agent: A hash describing the agent that is reporting metrics data to New Relic Plugins on behalf of the component(s). Of these values, only host and version are required. When graphing metrics, be aware that null = zero. Metric data POST Description Component data One of two required keys at the top level. This is an array of hashes describing the components that report metrics in this request. Each hash contains the following values: name A name ( < =32 characters) that uniquely identifies the monitored entity and appears as the display name for this agent. Note: Metric names are case sensitive. guid A \"reverse domain name\" styled identifier; for example, com.newrelic.mysql. This is a unique identity defined in the plugin's user interface, which ties the agent data to the corresponding plugin user interface in New Relic. duration The duration in seconds over which the metric data was collected. The end time is implied as the time the data is received by the API. metrics Timeslice data for each metric being reported. The hash keys are metric names, and the values are the timeslice data value for the named metric. Agent data One of two required keys at the top level. A hash specifying information about the agent that is reporting data on behalf of the components. host (required) The hostname of the agent monitoring the specified components. This is the hostname where the monitoring agent is running, not the hostname of the component being monitored. pid (optional) The process identifier of the agent monitoring the specified components. This is the process identifier of the monitoring agent itself, not a process identifier that may be associated with the monitored components. version (required) The version of the agent monitoring the specified components, using the format A.B.C where A, B, and C are integers. The version number must conform to the rules specified in standard Semantic Versioning scheme v2.0.0. Timeslice metric values Metrics are sent inside the component hash with the key metrics and a hash as a value. The hash keys are metric names, and the values are the timeslice data values for the named metric. The timeslice hash value uses one of three formats: Timeslice hash value Description A single scalar value with a floating point number or integer This is the simplest format, and this number is required. The reported value is used as the total, minimum, and maximum data value. The count value is assumed to be 1. The Plugin API does not support reporting of arbitrary string metrics, only scalar values that are aggregated. Array of five required values in specific order An array of five required integers or floating point numbers that represent, in order: Total value over the time period Count of the number of events this value represents over the time period; the average is calculated by dividing total by count Minimum value over the time period Maximum value over the time period Sum of squares for the samples over the time period Hash with five required key/value pairs in any order A hash with value names as the keys, and integers or floating point values as the values. All five key/value pairs are required. The keys of the hash are the type of timeslice data, and the value is the data value. These has key/value pairs can be in any order: total: Total value over the time period count: Count of the number of events this value represents over the time period; the average is calculated by dividing total by count min: Minimum value over the time period max: Maximum value over the time period sum_of_squares: Sum of squares for the samples over the time period Calculations Limited mathematical calculations are available with the key/value pairs, such as computing total, count, minimum, maximum, averages, and standard deviations. However, to do more extensive calculations, you need to do the math in the agent, and then send the results as a new metric. For example, send Metric1, Metric2, and Metric3 (which equals Metric1 divided by Metric2). If you submit negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Examples Here are some examples. Metrics \"metrics\" : { \"Component/Database/Primary[Queries/Second]\" : { \"total\" : 25, \"count\" : 2, \"min\" : 10, \"max\" : 15, \"sum_of_squares\" : 325 }, \"Component/Database/Secondary[Queries/Second]\" : [25, 2, 10, 15, 325], \"Component/Database/Backup[Queries/Second]\" : 10 } Copy cURL example curl -vi https://platform-api.newrelic.com/platform/v1/metrics \\ -H \"X-License-Key: YOUR_LICENSE_KEY_HERE\" \\ -H \"Content-Type: application/json\" \\ -H \"Accept: application/json\" \\ -X POST -d '{ \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] }' Copy Metric references Refer to these references as you develop your own plugins. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order for the metric to be rendered usefully in the user interface, the metric name must contain a prefix, category name, label, and optional units indicator. Here are some recommended guidelines for the text in metric names to make them more readable in the user interface. Metric naming guidelines Guidelines UI display Use case and whitespace characters appropriate for display in the user interface, because segments are rendered as-is in the UI. Category and label segments Metric names are case sensitive. Capitalize the first word in the category and label segments. Keep category and label segments as short as possible. Length There is a limit of 255 characters for metric names. Characters to avoid using Avoid using the following characters in names. These characters have special meaning and should not be used except where specifically required for their purpose. / ] [ | * Also avoid multi-byte characters. Units Use abbreviated names for units when possible. Metric segments Each of these segments is divided by the forward slash / character. Each segment is interpreted for a specific purpose in the UI and roughly follows this pattern: prefix/category/label[units] Copy For example, the metric representing the latency of cache hits reported by a plugin collecting data for a cache appliance might look like this: Component/Cache/Hits[sec|hit] Copy Metric segment order Notes Prefix: Component/ or Custom/ The first segment of a custom metric is Component/ (if it comes from a plugin agent) or Custom/ (if it is a custom metric collected by a New Relic agent. For example, Custom/MyMetric). Caution If you use the Plugin API only, and if the metrics do not start with Component/, they may not be available or may not appear correctly in charts and dashboards. Category name The second part of a custom metric is a category name, used to group metrics into different categories. For example, the metrics reported by a database plugin may fall into categories such as schema, tables, or connections. Label The third part of the metric name is used for labeling the data when it appears in tables and charts. If it contains multiple segments, each slash separating the segments of the label will be rendered as part of the label. Units The fourth segment of the metric consists of a units specification. Metric attributes Most metrics are defined statically and represent some global state; for example, cache size. Other metrics are dynamic and include some contextual attribute like the name of a host or a file. These metrics need to be structured so you can easily show them as a group in a table stacked in a chart. To add attribute names to a metric, put them in trailing segments separated by a forward slash / character. For example: Component/Disk/Bytes In/dev001 Component/Network/External services/ae592c3.aws.com Copy You can specify more than one attribute as long as they occupy the same position for a given metric category and label: Component/Tables/Row count/DB001/BLOG_POSTS[rows] Copy Caution Avoid overloading the metric space by putting in segment values that have a large range of values. While something like a customer's region in an attribute is a reasonable thing to track in the metric, the customer name would not be if you have more than a few hundred customers. If your agent starts sending an excessive amount of metrics, your metrics may be automatically collapsed into groups with wildcards: Component/Users/*[visits] Copy Metric values You can report a metric value in one of two ways: Single value: This typically is the value being reported for that time slice. If you use an SDK, you report the single value to the SDK. It handles tracking the rest of these values. Set of aggregate value: This includes the min, max, and sum of squares values for the value being reported. If you use the Plugin API, the preferred method is to report all of the values. When aggregating a series of timeslice data into a single timeslice data entry for a given period, all fields are summed except for the min and max value. If you are using an SDK plugins, this is done automatically. If you are using the Plugin API to develop plugins, you need to code for this. A metric value contains several fields, but it is represented primarily by the count and value. The count is a 32-bit integer field, and the value is a 32-bit float. Metric values can represent more than one data point or sample as an aggregation of measures. Typically the count is the number of samples, and the value is the total value of all samples. Here are the fields in a metric value: Metric value Description count The number of things being measured. If data is collected at the time the event occurs, like with some kind of injection, then the count in the timeslice data will be 1. Required if it is not 1 (0 generally represents an absent value). value Required: The total value measured across all things being counted. When averages are calculated later, we divide the value by the count. In some cases, the value field is irrelevant. min, max The minimum and maximum values when the count is greater than 1. When the count is 1, these are the same as the value. Optional depending on whether they are available or relevant for a given metric. sum of squares This is the sum of squares of each value and is useful when the values follow a standard distribution. You can only capture this value when you are collecting data each time the event happens. You store the value of the event in the value field and the square of the value in the sum of squares. This is used to calculate a standard deviation later on. The sum of squares is optional. It is used to calculate a standard deviation for a selection of data. If standard deviation for the value is not meaningful, such as when the values are not part of a normal distribution, then the sum of squares is omitted. Units When a metric value is collected by periodically sampling an interface, the count units are implicitly samples, and the value units are whatever is being sampled. For data it might be bytes. For throughput it might be something like kilobytes/second. For utilization (like CPU) it might be percent. When the count units are samples, they can be omitted in the metric name. Units of time, bytes, and bits may get special treatment, allowing additional conversion in the user interface between magnitudes. For example, if you specify a metric with units of kilobytes, then in the UI you may be presented the option of displaying a chart of Mb. Metrics units describe what the value field and count represent. Units are specified inside brackets and consist of units for the value, followed by a pipe (|) and then the units for the count. For example: Component/metric_id[value_unit|count_unit] Copy Exception: The pipe and count units (|[count_unit]) are not required after the value unit for samples. Rate metrics are commonly defined as sample per interval. This is defined as units/interval in the metric, with a forward slash to separate units from interval. For example: Component/metric_id[value_unit/interval] Copy In rare cases there will only be a unit value for count. The value will be interpreted as unitless. Value units are omitted, and the vertical bar appears in front of the count units. For example: Component/metric_id[|count_unit] Copy Units for plugin metrics Notes Naming conventions You can have mixed-case unit names. They.can consist strictly of alphabetical characters as well as the _, %, or / symbols. Case is preserved. Punctuation markers, dashes, spaces and any other symbols are not allowed. Recommendation: Use uncapitalized words, spelled out in full. For example, use second not sec. Rate metrics When a metric value represents a rate, such as bytes/second, then the value is assumed to be a sample for the given interval. The units specifier looks like [ bytes/second] since the count units are implicitly samples. For example: Component/metric_id[bytes/second] Copy The count units are samples (default) and the value units are bytes/second. The forward slash separates the units from the interval. Count with units A common case for declaring units is when measuring response times. If the custom metric represents the average latency of a call to a cache, then the units for the metric value are seconds per call. For example: Component/metric_id[seconds|call] Copy Count units are calls and value units are seconds. The default count metric is not being used, so you need to specify it. The bar separates the value units from the count units. Units in charts The units specified in a metric have several implications for the way the values are interpreted by generic charts and tables: Units display in labels and tooltips in charts to indicate what the values represent. Units imply a set of different values available from a single metric value. When creating a chart in a dashboard, the dashboard author selects one of the available value methods for that metric to plot in the chart.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.6587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Metric data for the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "&quot; : 2, &quot;max&quot; : 10, &quot;total&quot;: 12, &quot;count&quot; : 2, &quot;sum_of_squares&quot; : 104 } } } ] }&#x27; Copy Metric references <em>Refer</em> to these references as you <em>develop</em> your own <em>plugins</em>. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order"
      },
      "id": "603e80db64441f0def4e8863"
    },
    {
      "sections": [
        "Plugin data",
        "Important",
        "Limited access to legacy plugins",
        "Use integers and floats",
        "Define the time period (duration)",
        "Follow unit conversion guidelines",
        "Select value methods for display in the UI"
      ],
      "title": "Plugin data",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "e5fd09ba8dd9c63a140479fbc2032254d1cf8c4f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plugin-data/",
      "published_at": "2021-06-09T19:08:48Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Use integers and floats All plugin metrics must be an integer or float, and they must be reported along with a duration. You can also report the type of metric so it can be converted from one unit type into another. You can display the metrics you collect in a variety of value methods, including throughput, averages, min/max, and rate. The metrics appear in charts and tables you create for your plugin's user interface. Plugins in Plugin Central are designed to report on frequency metrics using non-negative integers or floating-point numbers: Non-negative integers: Supported. Floating-point numbers: Supported. Negative values: Not supported, except for summary metrics on the plugin's Summary page. Otherwise, the UI shows negative values as zero. String values: Not supported; the UI shows strings as zero. However, parts of your metric name (the key) can be displayed in the UI. Define the time period (duration) All metrics must include a duration period that starts no more than a few hours in the past. The end time is set automatically to the time New Relic Plugins receives the metrics. You cannot report a duration that starts or ends in the future, or a duration that ends in the past. For best results, use one of the plugin SDKs to create your plugin. Otherwise, some POST attempts may fail because the actual recorded duration could vary in increments of the plugin's scheduled reporting frequency. Follow unit conversion guidelines Plugins automatically converts some units (such as rate units) to more natural forms. For example, [bytes/second] is converted to Bps. Follow these guidelines for unit conversions: Long format: Always specify the long format (for example, [bytes/second]) in the metric name. The long or short version will be used as appropriate. (Unit designations are not case sensitive.) Consistency: Use modifiers consistently in the metric name. If you use a different modifier with the same metric name, it will be treated as a different metric. Optional: Standard modifiers: Provide standard modifiers to the first metric in a value unit. For example, rather than specifying [bytes/second], you can specify [kiloBytes/second]. Plugins accepts these standard modifiers: Modifier Multiplier Modifier Multiplier Kilo 1000 - -- - -- Mega 1000^2 - -- - -- Giga 1000^3 Gibi 1024^3 Tera 1000^4 Tebi 1024^4 Peta 1000^5 Pebi 1024^5 Select value methods for display in the UI When you define a metric value for reporting, Plugins also captures a count, min, max, and sum of squares. Depending on whether you report single or aggregate values, you may report these numbers directly, or Plugins may calculate them automatically. You can then choose a value method for rendering these metrics in your plugin UI. In general, to configure value methods in the user interface: Select the metric you want to use. Review the list of value methods to select how to present the data in a column or plotted in a chart. Available value methods depend on the format of the units part of the metric name: Value method Count | Value Value Rate Count: The total of the count field over the entire timeslice data interval. When aggregating timeslice data, the count is summed. Total value: The total value over the entire time slice data interval. When aggregating timeslice data, the value field is summed Time rates only Average value: The total value divided by the total count, calculated only when units for both count and value are available. Throughput: The total count divided by the time interval of the time slice. By default New Relic Plugins measures the throughput in minutes according to the count units, such as calls per minute or bytes per minute. When the count units are specified in time (seconds), then the throughput appears as a percentage. Min/Max: The statistical values for minimum and maximum values when recorded in the metric value along with Count and Value. Standard deviation: The standard deviation of the entire set of measures recorded over the time interval. This is available only if the sum of squares field was populated in the metric value. The sum of squares and mean are used to calculate the standard deviation. In practice, this is meaningful only for populations that resemble a normal distribution. Rate: The rate is the total value divided by the time interval. When units of the value are in time, then the rate value is a percentage value. Units that are themselves rates will not have an explicit rate value method. The rate is simply the average value. Percentage: If you want the metric to appear as a percentage in the user interface, then you must define it as a percentage in the JSON.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.65599,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> data",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e91e3196a67c11ea83d9d"
    },
    {
      "sections": [
        "Plan plugin metrics",
        "Important",
        "Limited access to legacy plugins",
        "Collect plugin metrics",
        "Present plugin metrics"
      ],
      "title": "Plan plugin metrics",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "08974b731c810af2b6b037e8b761834c6e1ce7a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plan-plugin-metrics/",
      "published_at": "2021-06-09T19:06:54Z",
      "updated_at": "2021-03-16T11:01:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Collect plugin metrics If you are running one of our APM agents to receive information about your applications, you can also receive arbitrary custom metrics. Using custom dashboards with your plugins, you can visualize custom metrics in a variety of useful ways. You can write plugins agents that can be run anywhere to collect metrics from any available system and report them to New Relic for dashboard display. Plugins also allow for summary metrics and one or more dashboards to visualize metrics that can be shared with every user of the plugin. This allows you to create a consistent user interface for the metrics you collect. The data that plugins report is in the form of a key/value pair. Values are numerical, either integers or floating point non-negative numbers. Negative numbers can be included in your summary metrics and tables; however, visualization in charts is limited to numbers greater than or equal to zero. Keys are strings which include the concept of name spaces and units. While values cannot be strings, parts of your metric name (the key) can be displayed in plugin dashboards. Your plugin agent can run anywhere with internet access to Plugins. You can write an agent using the agent SDKs. You can also write your agent to connect via HTTP POST using the API for Plugins in any language with HTTP support. Using the Plugin API might be the most appropriate solution when one agent is reporting metrics for more than one New Relic account. This is common for service providers to report specialized metrics for each of their customers using Plugins. This can be done with a small number of agents monitoring a large number of users. Present plugin metrics When creating a plugin agent, good metric name planning is critical to your success. Poorly chosen metrics names can make it difficult or impossible to display the information you intend. Plan ahead for how you want to visualize your information and to record metrics in a way that will facilitate this. You may even want to record the same metrics with more than one name in order to visualize different aspects of your data. Plugin dashboards do not have the ability to do mathematical calculations, so make sure your plugin agent handles any necessary calculations (sum, average, total, count, etc.) before recording metrics. Once you have collected metrics with your plugin agent, you will need to create dashboards to visualize the information in your metrics. All plugins will have a default dashboard. You can add as many dashboards as necessary to visualize your metric data (maximum 15). In addition to dashboards, you can choose up to five metrics to represent the summary of each instance. Summary metrics convey the health status of each instance and are used to trigger Caution events and Critical alerts for your plugins. The summary metrics appear on your plugin's Summary page.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.65587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Plan <em>plugin</em> metrics",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603eb01228ccbc6fa6eba790"
    }
  ],
  "/docs/plugins/plugin-developer-resources/developer-reference/plan-plugin-metrics": [
    {
      "sections": [
        "Metric data for the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "URI",
        "GUID",
        "Time periods for metrics",
        "Metric data details",
        "Timeslice metric values",
        "Calculations",
        "Examples",
        "Metrics",
        "cURL example",
        "Metric references",
        "Metric naming guidelines",
        "Metric segments",
        "Caution",
        "Metric attributes",
        "Metric values",
        "Units"
      ],
      "title": "Metric data for the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "2e9d0553b7277c73fe8a2147519d9943fca440fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/metric-data-plugin-api/",
      "published_at": "2021-06-09T19:05:38Z",
      "updated_at": "2021-03-16T11:20:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. URI Metric timeslice data is sent with the Plugin API as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The Plugin API does not support New Relic's REST API, and vice versa. However, you can use the REST API (v2) to extract plugin data. For a list with links to procedures and examples, see Plugin examples (v2). GUID The plugin needs a Globally Unique Identifier (GUID), which is a character string limited to no less than 4 and no more than 255 characters. The GUID for a published plugin must be unique for each plugin. When creating a plugin, you are responsible for managing your own GUIDs to avoid naming conflicts. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metric(s). Thus, you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show any time period you want; for example, 30 minutes, 30 days, etc. You can also deliver data at 1-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, data will aggregate when there is too much, but data will not be extrapolated if there is not enough data. In order for data to appear on a 30 minute chart, make sure at least one data point is within the range, or no data will appear. Use a 60-second polling interval, because the default dashboard shows 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Metric data details The JSON data is a hash with two required keys at the top level: components: An array of components, each consisting of a hash of attributes for the individual component, including the metric data. agent: A hash describing the agent that is reporting metrics data to New Relic Plugins on behalf of the component(s). Of these values, only host and version are required. When graphing metrics, be aware that null = zero. Metric data POST Description Component data One of two required keys at the top level. This is an array of hashes describing the components that report metrics in this request. Each hash contains the following values: name A name ( < =32 characters) that uniquely identifies the monitored entity and appears as the display name for this agent. Note: Metric names are case sensitive. guid A \"reverse domain name\" styled identifier; for example, com.newrelic.mysql. This is a unique identity defined in the plugin's user interface, which ties the agent data to the corresponding plugin user interface in New Relic. duration The duration in seconds over which the metric data was collected. The end time is implied as the time the data is received by the API. metrics Timeslice data for each metric being reported. The hash keys are metric names, and the values are the timeslice data value for the named metric. Agent data One of two required keys at the top level. A hash specifying information about the agent that is reporting data on behalf of the components. host (required) The hostname of the agent monitoring the specified components. This is the hostname where the monitoring agent is running, not the hostname of the component being monitored. pid (optional) The process identifier of the agent monitoring the specified components. This is the process identifier of the monitoring agent itself, not a process identifier that may be associated with the monitored components. version (required) The version of the agent monitoring the specified components, using the format A.B.C where A, B, and C are integers. The version number must conform to the rules specified in standard Semantic Versioning scheme v2.0.0. Timeslice metric values Metrics are sent inside the component hash with the key metrics and a hash as a value. The hash keys are metric names, and the values are the timeslice data values for the named metric. The timeslice hash value uses one of three formats: Timeslice hash value Description A single scalar value with a floating point number or integer This is the simplest format, and this number is required. The reported value is used as the total, minimum, and maximum data value. The count value is assumed to be 1. The Plugin API does not support reporting of arbitrary string metrics, only scalar values that are aggregated. Array of five required values in specific order An array of five required integers or floating point numbers that represent, in order: Total value over the time period Count of the number of events this value represents over the time period; the average is calculated by dividing total by count Minimum value over the time period Maximum value over the time period Sum of squares for the samples over the time period Hash with five required key/value pairs in any order A hash with value names as the keys, and integers or floating point values as the values. All five key/value pairs are required. The keys of the hash are the type of timeslice data, and the value is the data value. These has key/value pairs can be in any order: total: Total value over the time period count: Count of the number of events this value represents over the time period; the average is calculated by dividing total by count min: Minimum value over the time period max: Maximum value over the time period sum_of_squares: Sum of squares for the samples over the time period Calculations Limited mathematical calculations are available with the key/value pairs, such as computing total, count, minimum, maximum, averages, and standard deviations. However, to do more extensive calculations, you need to do the math in the agent, and then send the results as a new metric. For example, send Metric1, Metric2, and Metric3 (which equals Metric1 divided by Metric2). If you submit negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Examples Here are some examples. Metrics \"metrics\" : { \"Component/Database/Primary[Queries/Second]\" : { \"total\" : 25, \"count\" : 2, \"min\" : 10, \"max\" : 15, \"sum_of_squares\" : 325 }, \"Component/Database/Secondary[Queries/Second]\" : [25, 2, 10, 15, 325], \"Component/Database/Backup[Queries/Second]\" : 10 } Copy cURL example curl -vi https://platform-api.newrelic.com/platform/v1/metrics \\ -H \"X-License-Key: YOUR_LICENSE_KEY_HERE\" \\ -H \"Content-Type: application/json\" \\ -H \"Accept: application/json\" \\ -X POST -d '{ \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] }' Copy Metric references Refer to these references as you develop your own plugins. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order for the metric to be rendered usefully in the user interface, the metric name must contain a prefix, category name, label, and optional units indicator. Here are some recommended guidelines for the text in metric names to make them more readable in the user interface. Metric naming guidelines Guidelines UI display Use case and whitespace characters appropriate for display in the user interface, because segments are rendered as-is in the UI. Category and label segments Metric names are case sensitive. Capitalize the first word in the category and label segments. Keep category and label segments as short as possible. Length There is a limit of 255 characters for metric names. Characters to avoid using Avoid using the following characters in names. These characters have special meaning and should not be used except where specifically required for their purpose. / ] [ | * Also avoid multi-byte characters. Units Use abbreviated names for units when possible. Metric segments Each of these segments is divided by the forward slash / character. Each segment is interpreted for a specific purpose in the UI and roughly follows this pattern: prefix/category/label[units] Copy For example, the metric representing the latency of cache hits reported by a plugin collecting data for a cache appliance might look like this: Component/Cache/Hits[sec|hit] Copy Metric segment order Notes Prefix: Component/ or Custom/ The first segment of a custom metric is Component/ (if it comes from a plugin agent) or Custom/ (if it is a custom metric collected by a New Relic agent. For example, Custom/MyMetric). Caution If you use the Plugin API only, and if the metrics do not start with Component/, they may not be available or may not appear correctly in charts and dashboards. Category name The second part of a custom metric is a category name, used to group metrics into different categories. For example, the metrics reported by a database plugin may fall into categories such as schema, tables, or connections. Label The third part of the metric name is used for labeling the data when it appears in tables and charts. If it contains multiple segments, each slash separating the segments of the label will be rendered as part of the label. Units The fourth segment of the metric consists of a units specification. Metric attributes Most metrics are defined statically and represent some global state; for example, cache size. Other metrics are dynamic and include some contextual attribute like the name of a host or a file. These metrics need to be structured so you can easily show them as a group in a table stacked in a chart. To add attribute names to a metric, put them in trailing segments separated by a forward slash / character. For example: Component/Disk/Bytes In/dev001 Component/Network/External services/ae592c3.aws.com Copy You can specify more than one attribute as long as they occupy the same position for a given metric category and label: Component/Tables/Row count/DB001/BLOG_POSTS[rows] Copy Caution Avoid overloading the metric space by putting in segment values that have a large range of values. While something like a customer's region in an attribute is a reasonable thing to track in the metric, the customer name would not be if you have more than a few hundred customers. If your agent starts sending an excessive amount of metrics, your metrics may be automatically collapsed into groups with wildcards: Component/Users/*[visits] Copy Metric values You can report a metric value in one of two ways: Single value: This typically is the value being reported for that time slice. If you use an SDK, you report the single value to the SDK. It handles tracking the rest of these values. Set of aggregate value: This includes the min, max, and sum of squares values for the value being reported. If you use the Plugin API, the preferred method is to report all of the values. When aggregating a series of timeslice data into a single timeslice data entry for a given period, all fields are summed except for the min and max value. If you are using an SDK plugins, this is done automatically. If you are using the Plugin API to develop plugins, you need to code for this. A metric value contains several fields, but it is represented primarily by the count and value. The count is a 32-bit integer field, and the value is a 32-bit float. Metric values can represent more than one data point or sample as an aggregation of measures. Typically the count is the number of samples, and the value is the total value of all samples. Here are the fields in a metric value: Metric value Description count The number of things being measured. If data is collected at the time the event occurs, like with some kind of injection, then the count in the timeslice data will be 1. Required if it is not 1 (0 generally represents an absent value). value Required: The total value measured across all things being counted. When averages are calculated later, we divide the value by the count. In some cases, the value field is irrelevant. min, max The minimum and maximum values when the count is greater than 1. When the count is 1, these are the same as the value. Optional depending on whether they are available or relevant for a given metric. sum of squares This is the sum of squares of each value and is useful when the values follow a standard distribution. You can only capture this value when you are collecting data each time the event happens. You store the value of the event in the value field and the square of the value in the sum of squares. This is used to calculate a standard deviation later on. The sum of squares is optional. It is used to calculate a standard deviation for a selection of data. If standard deviation for the value is not meaningful, such as when the values are not part of a normal distribution, then the sum of squares is omitted. Units When a metric value is collected by periodically sampling an interface, the count units are implicitly samples, and the value units are whatever is being sampled. For data it might be bytes. For throughput it might be something like kilobytes/second. For utilization (like CPU) it might be percent. When the count units are samples, they can be omitted in the metric name. Units of time, bytes, and bits may get special treatment, allowing additional conversion in the user interface between magnitudes. For example, if you specify a metric with units of kilobytes, then in the UI you may be presented the option of displaying a chart of Mb. Metrics units describe what the value field and count represent. Units are specified inside brackets and consist of units for the value, followed by a pipe (|) and then the units for the count. For example: Component/metric_id[value_unit|count_unit] Copy Exception: The pipe and count units (|[count_unit]) are not required after the value unit for samples. Rate metrics are commonly defined as sample per interval. This is defined as units/interval in the metric, with a forward slash to separate units from interval. For example: Component/metric_id[value_unit/interval] Copy In rare cases there will only be a unit value for count. The value will be interpreted as unitless. Value units are omitted, and the vertical bar appears in front of the count units. For example: Component/metric_id[|count_unit] Copy Units for plugin metrics Notes Naming conventions You can have mixed-case unit names. They.can consist strictly of alphabetical characters as well as the _, %, or / symbols. Case is preserved. Punctuation markers, dashes, spaces and any other symbols are not allowed. Recommendation: Use uncapitalized words, spelled out in full. For example, use second not sec. Rate metrics When a metric value represents a rate, such as bytes/second, then the value is assumed to be a sample for the given interval. The units specifier looks like [ bytes/second] since the count units are implicitly samples. For example: Component/metric_id[bytes/second] Copy The count units are samples (default) and the value units are bytes/second. The forward slash separates the units from the interval. Count with units A common case for declaring units is when measuring response times. If the custom metric represents the average latency of a call to a cache, then the units for the metric value are seconds per call. For example: Component/metric_id[seconds|call] Copy Count units are calls and value units are seconds. The default count metric is not being used, so you need to specify it. The bar separates the value units from the count units. Units in charts The units specified in a metric have several implications for the way the values are interpreted by generic charts and tables: Units display in labels and tooltips in charts to indicate what the values represent. Units imply a set of different values available from a single metric value. When creating a chart in a dashboard, the dashboard author selects one of the available value methods for that metric to plot in the chart.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.6587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Metric data for the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "&quot; : 2, &quot;max&quot; : 10, &quot;total&quot;: 12, &quot;count&quot; : 2, &quot;sum_of_squares&quot; : 104 } } } ] }&#x27; Copy Metric references <em>Refer</em> to these references as you <em>develop</em> your own <em>plugins</em>. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order"
      },
      "id": "603e80db64441f0def4e8863"
    },
    {
      "sections": [
        "Plugin data",
        "Important",
        "Limited access to legacy plugins",
        "Use integers and floats",
        "Define the time period (duration)",
        "Follow unit conversion guidelines",
        "Select value methods for display in the UI"
      ],
      "title": "Plugin data",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "e5fd09ba8dd9c63a140479fbc2032254d1cf8c4f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plugin-data/",
      "published_at": "2021-06-09T19:08:48Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Use integers and floats All plugin metrics must be an integer or float, and they must be reported along with a duration. You can also report the type of metric so it can be converted from one unit type into another. You can display the metrics you collect in a variety of value methods, including throughput, averages, min/max, and rate. The metrics appear in charts and tables you create for your plugin's user interface. Plugins in Plugin Central are designed to report on frequency metrics using non-negative integers or floating-point numbers: Non-negative integers: Supported. Floating-point numbers: Supported. Negative values: Not supported, except for summary metrics on the plugin's Summary page. Otherwise, the UI shows negative values as zero. String values: Not supported; the UI shows strings as zero. However, parts of your metric name (the key) can be displayed in the UI. Define the time period (duration) All metrics must include a duration period that starts no more than a few hours in the past. The end time is set automatically to the time New Relic Plugins receives the metrics. You cannot report a duration that starts or ends in the future, or a duration that ends in the past. For best results, use one of the plugin SDKs to create your plugin. Otherwise, some POST attempts may fail because the actual recorded duration could vary in increments of the plugin's scheduled reporting frequency. Follow unit conversion guidelines Plugins automatically converts some units (such as rate units) to more natural forms. For example, [bytes/second] is converted to Bps. Follow these guidelines for unit conversions: Long format: Always specify the long format (for example, [bytes/second]) in the metric name. The long or short version will be used as appropriate. (Unit designations are not case sensitive.) Consistency: Use modifiers consistently in the metric name. If you use a different modifier with the same metric name, it will be treated as a different metric. Optional: Standard modifiers: Provide standard modifiers to the first metric in a value unit. For example, rather than specifying [bytes/second], you can specify [kiloBytes/second]. Plugins accepts these standard modifiers: Modifier Multiplier Modifier Multiplier Kilo 1000 - -- - -- Mega 1000^2 - -- - -- Giga 1000^3 Gibi 1024^3 Tera 1000^4 Tebi 1024^4 Peta 1000^5 Pebi 1024^5 Select value methods for display in the UI When you define a metric value for reporting, Plugins also captures a count, min, max, and sum of squares. Depending on whether you report single or aggregate values, you may report these numbers directly, or Plugins may calculate them automatically. You can then choose a value method for rendering these metrics in your plugin UI. In general, to configure value methods in the user interface: Select the metric you want to use. Review the list of value methods to select how to present the data in a column or plotted in a chart. Available value methods depend on the format of the units part of the metric name: Value method Count | Value Value Rate Count: The total of the count field over the entire timeslice data interval. When aggregating timeslice data, the count is summed. Total value: The total value over the entire time slice data interval. When aggregating timeslice data, the value field is summed Time rates only Average value: The total value divided by the total count, calculated only when units for both count and value are available. Throughput: The total count divided by the time interval of the time slice. By default New Relic Plugins measures the throughput in minutes according to the count units, such as calls per minute or bytes per minute. When the count units are specified in time (seconds), then the throughput appears as a percentage. Min/Max: The statistical values for minimum and maximum values when recorded in the metric value along with Count and Value. Standard deviation: The standard deviation of the entire set of measures recorded over the time interval. This is available only if the sum of squares field was populated in the metric value. The sum of squares and mean are used to calculate the standard deviation. In practice, this is meaningful only for populations that resemble a normal distribution. Rate: The rate is the total value divided by the time interval. When units of the value are in time, then the rate value is a percentage value. Units that are themselves rates will not have an explicit rate value method. The rate is simply the average value. Percentage: If you want the metric to appear as a percentage in the user interface, then you must define it as a percentage in the JSON.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.65599,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> data",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e91e3196a67c11ea83d9d"
    },
    {
      "sections": [
        "Use the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "Before you begin",
        "Metric data POST",
        "Data aggregation",
        "Compression",
        "Examples",
        "Example JSON",
        "Pseudo-code template",
        "API responses and error codes",
        "Debugging logs",
        "Error codes"
      ],
      "title": "Use the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "f30a9a37241be1a13263e2bc8892f411d6fa618b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/use-plugin-api/",
      "published_at": "2021-06-09T19:08:48Z",
      "updated_at": "2021-03-13T03:44:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Before you begin Using a development language other than Ruby, .NET, or Java for a plugin agent means you do not have an SDK to work with, but you do have some benefits. This is a guide for plugin developers to get started with writing an agent in any language that can work directly with the Plugin API for Plugin Central. You can use any language you want, as long as it supports sending JSON through HTTP POST. This allows for better integration with your systems. For the same reason, it is the best option for SaaS-based plugin agents. However, if you are not using the Plugins SDK for Java. .NET, or Ruby, you have some additional setup and planning to do in developing a plugin agent. This includes: Error tracking on POST calls A method for tracking and aggregating data when a POST fails Your own support plans if a New Relic SDK for your language or development tools is not available Any publicly available plugins in the Plugin Central should come bundled with their source code if the executable code is not plain text. This allows you to both try out plugins and to review the code. Recommendation: Before authoring a plugin, install some existing plugins using the Java SDK, .NET SDK, or Ruby SDK to see how they are written. Metric data POST Metric data is sent as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The MIME-type for the POST is application/json. The Plugins feature is designed to receive a continuous stream of metrics at a certain maximum speed, and to present this information on useful charts. The recommended frequency for sending data to Plugins is to send 60 seconds worth of data once a minute. Agents sending data more frequently than twice a minute on average may be subject to enforced limits on the number of metrics being saved. The following are recommended soft limits. Requests smaller than this will work; requests larger than this are subject to rejection or automatic data aggregation. As a hard cap, the total size of the POST payload should be no larger than 1MB (10^6 bytes). If the metric is \"expensive\" to calculate and does not change quickly, consider writing your plugin agent so that it skips some polling cycles to retrieve data and then sends the last value. This produces better results for your plugin users' dashboards. Type Limit Description Components 500 Number of distinct components currently tracked. Please note this is a per POST limit only. More than 500 components are able to report to an account simultaneously. Metrics per component 10,000 Total number of unique metrics per component. Take precautions to ensure metric names are not generated too dynamically. Even if the number of metrics being sent in each individual post is small, over time they may add up to a large number of unique metrics. When the number of metrics for a given component exceeds this limit, the server may start aggregating metrics together by globbing segments of the metric name with an asterisk (*). Metrics per post 20,000 Number of metrics sent per post. A post may send data for multiple components in a single request as long as the total number of metrics in the request does not exceed this limit. Frequency of post 2 per minute Frequency of update. Agents are expected to send data no more frequently than 1 per minute. Data aggregation The SDKs manage data aggregation in the event of a failed POST. If you are not using an SDK, you need to manage this yourself. Include all five metric values in a POST: min, max, total, count, and sum or squares. (Exception: This may not be necessary for monotonic metrics where short term variation is not an issue.) Recompute these values for the accumulating metric data as required by what is being measured, incrementing the duration accordingly, until a successful POST is sent. Compression Data can be sent in the following encoding formats: identity deflate gzip If data is sent compressed, make sure the Content-Encoding header specifies the type of encoding. Examples Here are some examples for developing plugins. Example JSON This is an example of the JSON that would be used to POST data to Plugins. The JSON data is a hash with two required keys at the top level: agent: A hash describing the agent that is reporting metrics data to Plugins. A POST can contain information for only one agent. Host and version are required. components: An array of components, each consisting of a hash of attributes for the individual component. Multiple components can be sent with a single. Each component has its own name, GUID, duration, and metrics. { \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] } Copy Pseudo-code template This is a pseudo-code example that works with the Plugin API. It can be used as a template for developing plugin agents. Initialization: // globals string platform_api_uri = \"https://platform-api.newrelic.com/platform/v1/metrics\" int poll_cycle = 60 // time in seconds string version = \"1.0.0\" // major_version.minor_version.patch_level string agent_host = get_host_name_where_this_process_is_running() string agent_pid = get_process_id_of_this_process() time last_poll_time // initialize if necessary initialize once create agent_hash with: agent_host agent_pid version for each newrelic_account do // just handling one account? then \"for each\" is unnecessary complexity for each monitored_component do create component_hash with: string guid = \"com.your_company.component_name_in_snake_case\" string name =\"Human Readable Component Name\" int duration = 0 // this will get updated each poll_cycle hash metrics_hash // this will be updated by populate_component_metrics_hash() end end end Copy Loop: every poll_cycle seconds do for each newrelic_account do // just handling one account? then \"for each\" is unnecessary complexity clear hash_to_send add agent_hash to hash_to_send for each component do populate_component_metrics_hash() this component.metrics_hash(\"duration\") = time.now() - last_poll_time in seconds add component.metrics_hash to hash_to_send end json_to_send = serialize_to_json(hash_to_send) connection = open http_connection(platform_api_uri) add header(\"X-License-Key\",this newrelic_account.license_key) to connection add header(\"Content-Type\",\"application/json\") to connection add header(\"Accept\",\"application/json\") to connection set http_verb to \"POST\" for connection response = send(json_to_send) to connection case response.code when response_code = 200 clear component.metrics_hash last_poll_time = time.now() when response_code = 400 // your request was malformed // consider reporting a \"supportability\" metric which counts the number of 400 responses you get // for example \"Component/Supportability/http_error_codes/400\" // you can use this on a \"Supportability\" Dashboard that helps diagnose your agent when response_code = 403 // forbidden probably due to a bad license key // log error and shutdown the agent when response_code = 404 // invalid URL // you should never get this error for https://platform-api.newrelic.com/platform/v1/metrics when response_code = 405 // invalid method // HTTP verb should be \"POST\" when response_code = 413 // POST body too large // try splitting at component boundaries // split along metric name spaces // fail gracefully - consider reporting a supportability metric (see 400) when response_code = 500 // error on New Relic's collector // could be due to malformed data or system trouble // fail gracefully - consider reporting a supportability metric (see 400) when response_code = 503 or 504 // New Relic collector busy //- this happens by design from time-to-time // keep collecting metrics // do NOT reset last_poll_time // log error if the problem persists for several minutes end case end end Copy Metric population: function populate_component_metrics_hash() // collect metrics from monitored component at any interval // if this is the first time collecting metrics, set last_poll_time to // time.now - metric duration, the time duration for which these metrics // were collected // // if you collect 2 or more metrics from the monitored component before data // is reported to Plugins either because your metric collection interval is // faster than poll_cycle or because your agent was unable to report metrics to // Plugins (for example a 503 http response), aggregate your data by storing: // total_value, max, min, count, sum_of_squares for each metric // // if the interval is longer than poll_cycle, retain the metrics and // report them each poll_cycle until they are updated end Copy API responses and error codes Depending on whether you are using the Plugin API or an agent SDK for plugins, the HTTP responses and logging techniques may be different. For example, responses for the Plugin API are uncompressed JSON. Successful posts return this JSON: {\"status\":\"ok\"} Copy The API does not support Accept-Encoding. Debugging logs To debug information, use either of these options: public static Logger getLogger(); Copy OR public static void Logger setLogger(Logger logger) { LOGGER = logger; } Copy Error codes If an error occurs, an appropriate status code is returned. The JSON returned is the hash key error with a detailed description of the error that occurred. For example: {\"error\":\"Failed to create agent with parameters=[...]\"} {\"error\":\"Missing metric data\"} {\"error\":\"Unable to parse body: Unexpected token RIGHT BRACE(}) at position 228.\"} Copy Code Name Description 400 Bad request The request or headers are in the wrong format, or the URL is incorrect, or the GUID does not meet the validation requirements. 403 Unauthorized Authentication error (no license key header, or invalid license key). 404 Not found Invalid URL. 405 Method not allowed Returned if the method is an invalid or unexpected type (GET/POST/PUT/etc.). 413 Request entity too large Too many metrics were sent in one request, or too many components (instances) were specified in one request, or other single-request limits were reached. 500 Internal server error Unexpected server error. 502 Bad gateway All 50X errors mean there is a transient problem in the server completing requests, and no data has been retained. Clients are expected to resend the data after waiting one minute. The data should be aggregated appropriately, combining multiple timeslice data values for the same metric into a single aggregate timeslice data value. 503 Service unavailable See 502 description. 504 Gateway timeout See 502 description.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.96164,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "604436cf28ccbcf2332c60a8"
    }
  ],
  "/docs/plugins/plugin-developer-resources/developer-reference/plugin-data": [
    {
      "sections": [
        "Metric data for the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "URI",
        "GUID",
        "Time periods for metrics",
        "Metric data details",
        "Timeslice metric values",
        "Calculations",
        "Examples",
        "Metrics",
        "cURL example",
        "Metric references",
        "Metric naming guidelines",
        "Metric segments",
        "Caution",
        "Metric attributes",
        "Metric values",
        "Units"
      ],
      "title": "Metric data for the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "2e9d0553b7277c73fe8a2147519d9943fca440fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/metric-data-plugin-api/",
      "published_at": "2021-06-09T19:05:38Z",
      "updated_at": "2021-03-16T11:20:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. URI Metric timeslice data is sent with the Plugin API as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The Plugin API does not support New Relic's REST API, and vice versa. However, you can use the REST API (v2) to extract plugin data. For a list with links to procedures and examples, see Plugin examples (v2). GUID The plugin needs a Globally Unique Identifier (GUID), which is a character string limited to no less than 4 and no more than 255 characters. The GUID for a published plugin must be unique for each plugin. When creating a plugin, you are responsible for managing your own GUIDs to avoid naming conflicts. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metric(s). Thus, you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show any time period you want; for example, 30 minutes, 30 days, etc. You can also deliver data at 1-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, data will aggregate when there is too much, but data will not be extrapolated if there is not enough data. In order for data to appear on a 30 minute chart, make sure at least one data point is within the range, or no data will appear. Use a 60-second polling interval, because the default dashboard shows 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Metric data details The JSON data is a hash with two required keys at the top level: components: An array of components, each consisting of a hash of attributes for the individual component, including the metric data. agent: A hash describing the agent that is reporting metrics data to New Relic Plugins on behalf of the component(s). Of these values, only host and version are required. When graphing metrics, be aware that null = zero. Metric data POST Description Component data One of two required keys at the top level. This is an array of hashes describing the components that report metrics in this request. Each hash contains the following values: name A name ( < =32 characters) that uniquely identifies the monitored entity and appears as the display name for this agent. Note: Metric names are case sensitive. guid A \"reverse domain name\" styled identifier; for example, com.newrelic.mysql. This is a unique identity defined in the plugin's user interface, which ties the agent data to the corresponding plugin user interface in New Relic. duration The duration in seconds over which the metric data was collected. The end time is implied as the time the data is received by the API. metrics Timeslice data for each metric being reported. The hash keys are metric names, and the values are the timeslice data value for the named metric. Agent data One of two required keys at the top level. A hash specifying information about the agent that is reporting data on behalf of the components. host (required) The hostname of the agent monitoring the specified components. This is the hostname where the monitoring agent is running, not the hostname of the component being monitored. pid (optional) The process identifier of the agent monitoring the specified components. This is the process identifier of the monitoring agent itself, not a process identifier that may be associated with the monitored components. version (required) The version of the agent monitoring the specified components, using the format A.B.C where A, B, and C are integers. The version number must conform to the rules specified in standard Semantic Versioning scheme v2.0.0. Timeslice metric values Metrics are sent inside the component hash with the key metrics and a hash as a value. The hash keys are metric names, and the values are the timeslice data values for the named metric. The timeslice hash value uses one of three formats: Timeslice hash value Description A single scalar value with a floating point number or integer This is the simplest format, and this number is required. The reported value is used as the total, minimum, and maximum data value. The count value is assumed to be 1. The Plugin API does not support reporting of arbitrary string metrics, only scalar values that are aggregated. Array of five required values in specific order An array of five required integers or floating point numbers that represent, in order: Total value over the time period Count of the number of events this value represents over the time period; the average is calculated by dividing total by count Minimum value over the time period Maximum value over the time period Sum of squares for the samples over the time period Hash with five required key/value pairs in any order A hash with value names as the keys, and integers or floating point values as the values. All five key/value pairs are required. The keys of the hash are the type of timeslice data, and the value is the data value. These has key/value pairs can be in any order: total: Total value over the time period count: Count of the number of events this value represents over the time period; the average is calculated by dividing total by count min: Minimum value over the time period max: Maximum value over the time period sum_of_squares: Sum of squares for the samples over the time period Calculations Limited mathematical calculations are available with the key/value pairs, such as computing total, count, minimum, maximum, averages, and standard deviations. However, to do more extensive calculations, you need to do the math in the agent, and then send the results as a new metric. For example, send Metric1, Metric2, and Metric3 (which equals Metric1 divided by Metric2). If you submit negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Examples Here are some examples. Metrics \"metrics\" : { \"Component/Database/Primary[Queries/Second]\" : { \"total\" : 25, \"count\" : 2, \"min\" : 10, \"max\" : 15, \"sum_of_squares\" : 325 }, \"Component/Database/Secondary[Queries/Second]\" : [25, 2, 10, 15, 325], \"Component/Database/Backup[Queries/Second]\" : 10 } Copy cURL example curl -vi https://platform-api.newrelic.com/platform/v1/metrics \\ -H \"X-License-Key: YOUR_LICENSE_KEY_HERE\" \\ -H \"Content-Type: application/json\" \\ -H \"Accept: application/json\" \\ -X POST -d '{ \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] }' Copy Metric references Refer to these references as you develop your own plugins. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order for the metric to be rendered usefully in the user interface, the metric name must contain a prefix, category name, label, and optional units indicator. Here are some recommended guidelines for the text in metric names to make them more readable in the user interface. Metric naming guidelines Guidelines UI display Use case and whitespace characters appropriate for display in the user interface, because segments are rendered as-is in the UI. Category and label segments Metric names are case sensitive. Capitalize the first word in the category and label segments. Keep category and label segments as short as possible. Length There is a limit of 255 characters for metric names. Characters to avoid using Avoid using the following characters in names. These characters have special meaning and should not be used except where specifically required for their purpose. / ] [ | * Also avoid multi-byte characters. Units Use abbreviated names for units when possible. Metric segments Each of these segments is divided by the forward slash / character. Each segment is interpreted for a specific purpose in the UI and roughly follows this pattern: prefix/category/label[units] Copy For example, the metric representing the latency of cache hits reported by a plugin collecting data for a cache appliance might look like this: Component/Cache/Hits[sec|hit] Copy Metric segment order Notes Prefix: Component/ or Custom/ The first segment of a custom metric is Component/ (if it comes from a plugin agent) or Custom/ (if it is a custom metric collected by a New Relic agent. For example, Custom/MyMetric). Caution If you use the Plugin API only, and if the metrics do not start with Component/, they may not be available or may not appear correctly in charts and dashboards. Category name The second part of a custom metric is a category name, used to group metrics into different categories. For example, the metrics reported by a database plugin may fall into categories such as schema, tables, or connections. Label The third part of the metric name is used for labeling the data when it appears in tables and charts. If it contains multiple segments, each slash separating the segments of the label will be rendered as part of the label. Units The fourth segment of the metric consists of a units specification. Metric attributes Most metrics are defined statically and represent some global state; for example, cache size. Other metrics are dynamic and include some contextual attribute like the name of a host or a file. These metrics need to be structured so you can easily show them as a group in a table stacked in a chart. To add attribute names to a metric, put them in trailing segments separated by a forward slash / character. For example: Component/Disk/Bytes In/dev001 Component/Network/External services/ae592c3.aws.com Copy You can specify more than one attribute as long as they occupy the same position for a given metric category and label: Component/Tables/Row count/DB001/BLOG_POSTS[rows] Copy Caution Avoid overloading the metric space by putting in segment values that have a large range of values. While something like a customer's region in an attribute is a reasonable thing to track in the metric, the customer name would not be if you have more than a few hundred customers. If your agent starts sending an excessive amount of metrics, your metrics may be automatically collapsed into groups with wildcards: Component/Users/*[visits] Copy Metric values You can report a metric value in one of two ways: Single value: This typically is the value being reported for that time slice. If you use an SDK, you report the single value to the SDK. It handles tracking the rest of these values. Set of aggregate value: This includes the min, max, and sum of squares values for the value being reported. If you use the Plugin API, the preferred method is to report all of the values. When aggregating a series of timeslice data into a single timeslice data entry for a given period, all fields are summed except for the min and max value. If you are using an SDK plugins, this is done automatically. If you are using the Plugin API to develop plugins, you need to code for this. A metric value contains several fields, but it is represented primarily by the count and value. The count is a 32-bit integer field, and the value is a 32-bit float. Metric values can represent more than one data point or sample as an aggregation of measures. Typically the count is the number of samples, and the value is the total value of all samples. Here are the fields in a metric value: Metric value Description count The number of things being measured. If data is collected at the time the event occurs, like with some kind of injection, then the count in the timeslice data will be 1. Required if it is not 1 (0 generally represents an absent value). value Required: The total value measured across all things being counted. When averages are calculated later, we divide the value by the count. In some cases, the value field is irrelevant. min, max The minimum and maximum values when the count is greater than 1. When the count is 1, these are the same as the value. Optional depending on whether they are available or relevant for a given metric. sum of squares This is the sum of squares of each value and is useful when the values follow a standard distribution. You can only capture this value when you are collecting data each time the event happens. You store the value of the event in the value field and the square of the value in the sum of squares. This is used to calculate a standard deviation later on. The sum of squares is optional. It is used to calculate a standard deviation for a selection of data. If standard deviation for the value is not meaningful, such as when the values are not part of a normal distribution, then the sum of squares is omitted. Units When a metric value is collected by periodically sampling an interface, the count units are implicitly samples, and the value units are whatever is being sampled. For data it might be bytes. For throughput it might be something like kilobytes/second. For utilization (like CPU) it might be percent. When the count units are samples, they can be omitted in the metric name. Units of time, bytes, and bits may get special treatment, allowing additional conversion in the user interface between magnitudes. For example, if you specify a metric with units of kilobytes, then in the UI you may be presented the option of displaying a chart of Mb. Metrics units describe what the value field and count represent. Units are specified inside brackets and consist of units for the value, followed by a pipe (|) and then the units for the count. For example: Component/metric_id[value_unit|count_unit] Copy Exception: The pipe and count units (|[count_unit]) are not required after the value unit for samples. Rate metrics are commonly defined as sample per interval. This is defined as units/interval in the metric, with a forward slash to separate units from interval. For example: Component/metric_id[value_unit/interval] Copy In rare cases there will only be a unit value for count. The value will be interpreted as unitless. Value units are omitted, and the vertical bar appears in front of the count units. For example: Component/metric_id[|count_unit] Copy Units for plugin metrics Notes Naming conventions You can have mixed-case unit names. They.can consist strictly of alphabetical characters as well as the _, %, or / symbols. Case is preserved. Punctuation markers, dashes, spaces and any other symbols are not allowed. Recommendation: Use uncapitalized words, spelled out in full. For example, use second not sec. Rate metrics When a metric value represents a rate, such as bytes/second, then the value is assumed to be a sample for the given interval. The units specifier looks like [ bytes/second] since the count units are implicitly samples. For example: Component/metric_id[bytes/second] Copy The count units are samples (default) and the value units are bytes/second. The forward slash separates the units from the interval. Count with units A common case for declaring units is when measuring response times. If the custom metric represents the average latency of a call to a cache, then the units for the metric value are seconds per call. For example: Component/metric_id[seconds|call] Copy Count units are calls and value units are seconds. The default count metric is not being used, so you need to specify it. The bar separates the value units from the count units. Units in charts The units specified in a metric have several implications for the way the values are interpreted by generic charts and tables: Units display in labels and tooltips in charts to indicate what the values represent. Units imply a set of different values available from a single metric value. When creating a chart in a dashboard, the dashboard author selects one of the available value methods for that metric to plot in the chart.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.6587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Metric data for the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "&quot; : 2, &quot;max&quot; : 10, &quot;total&quot;: 12, &quot;count&quot; : 2, &quot;sum_of_squares&quot; : 104 } } } ] }&#x27; Copy Metric references <em>Refer</em> to these references as you <em>develop</em> your own <em>plugins</em>. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order"
      },
      "id": "603e80db64441f0def4e8863"
    },
    {
      "sections": [
        "Plan plugin metrics",
        "Important",
        "Limited access to legacy plugins",
        "Collect plugin metrics",
        "Present plugin metrics"
      ],
      "title": "Plan plugin metrics",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "08974b731c810af2b6b037e8b761834c6e1ce7a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plan-plugin-metrics/",
      "published_at": "2021-06-09T19:06:54Z",
      "updated_at": "2021-03-16T11:01:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Collect plugin metrics If you are running one of our APM agents to receive information about your applications, you can also receive arbitrary custom metrics. Using custom dashboards with your plugins, you can visualize custom metrics in a variety of useful ways. You can write plugins agents that can be run anywhere to collect metrics from any available system and report them to New Relic for dashboard display. Plugins also allow for summary metrics and one or more dashboards to visualize metrics that can be shared with every user of the plugin. This allows you to create a consistent user interface for the metrics you collect. The data that plugins report is in the form of a key/value pair. Values are numerical, either integers or floating point non-negative numbers. Negative numbers can be included in your summary metrics and tables; however, visualization in charts is limited to numbers greater than or equal to zero. Keys are strings which include the concept of name spaces and units. While values cannot be strings, parts of your metric name (the key) can be displayed in plugin dashboards. Your plugin agent can run anywhere with internet access to Plugins. You can write an agent using the agent SDKs. You can also write your agent to connect via HTTP POST using the API for Plugins in any language with HTTP support. Using the Plugin API might be the most appropriate solution when one agent is reporting metrics for more than one New Relic account. This is common for service providers to report specialized metrics for each of their customers using Plugins. This can be done with a small number of agents monitoring a large number of users. Present plugin metrics When creating a plugin agent, good metric name planning is critical to your success. Poorly chosen metrics names can make it difficult or impossible to display the information you intend. Plan ahead for how you want to visualize your information and to record metrics in a way that will facilitate this. You may even want to record the same metrics with more than one name in order to visualize different aspects of your data. Plugin dashboards do not have the ability to do mathematical calculations, so make sure your plugin agent handles any necessary calculations (sum, average, total, count, etc.) before recording metrics. Once you have collected metrics with your plugin agent, you will need to create dashboards to visualize the information in your metrics. All plugins will have a default dashboard. You can add as many dashboards as necessary to visualize your metric data (maximum 15). In addition to dashboards, you can choose up to five metrics to represent the summary of each instance. Summary metrics convey the health status of each instance and are used to trigger Caution events and Critical alerts for your plugins. The summary metrics appear on your plugin's Summary page.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.65587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Plan <em>plugin</em> metrics",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603eb01228ccbc6fa6eba790"
    },
    {
      "sections": [
        "Use the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "Before you begin",
        "Metric data POST",
        "Data aggregation",
        "Compression",
        "Examples",
        "Example JSON",
        "Pseudo-code template",
        "API responses and error codes",
        "Debugging logs",
        "Error codes"
      ],
      "title": "Use the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "f30a9a37241be1a13263e2bc8892f411d6fa618b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/use-plugin-api/",
      "published_at": "2021-06-09T19:08:48Z",
      "updated_at": "2021-03-13T03:44:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Before you begin Using a development language other than Ruby, .NET, or Java for a plugin agent means you do not have an SDK to work with, but you do have some benefits. This is a guide for plugin developers to get started with writing an agent in any language that can work directly with the Plugin API for Plugin Central. You can use any language you want, as long as it supports sending JSON through HTTP POST. This allows for better integration with your systems. For the same reason, it is the best option for SaaS-based plugin agents. However, if you are not using the Plugins SDK for Java. .NET, or Ruby, you have some additional setup and planning to do in developing a plugin agent. This includes: Error tracking on POST calls A method for tracking and aggregating data when a POST fails Your own support plans if a New Relic SDK for your language or development tools is not available Any publicly available plugins in the Plugin Central should come bundled with their source code if the executable code is not plain text. This allows you to both try out plugins and to review the code. Recommendation: Before authoring a plugin, install some existing plugins using the Java SDK, .NET SDK, or Ruby SDK to see how they are written. Metric data POST Metric data is sent as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The MIME-type for the POST is application/json. The Plugins feature is designed to receive a continuous stream of metrics at a certain maximum speed, and to present this information on useful charts. The recommended frequency for sending data to Plugins is to send 60 seconds worth of data once a minute. Agents sending data more frequently than twice a minute on average may be subject to enforced limits on the number of metrics being saved. The following are recommended soft limits. Requests smaller than this will work; requests larger than this are subject to rejection or automatic data aggregation. As a hard cap, the total size of the POST payload should be no larger than 1MB (10^6 bytes). If the metric is \"expensive\" to calculate and does not change quickly, consider writing your plugin agent so that it skips some polling cycles to retrieve data and then sends the last value. This produces better results for your plugin users' dashboards. Type Limit Description Components 500 Number of distinct components currently tracked. Please note this is a per POST limit only. More than 500 components are able to report to an account simultaneously. Metrics per component 10,000 Total number of unique metrics per component. Take precautions to ensure metric names are not generated too dynamically. Even if the number of metrics being sent in each individual post is small, over time they may add up to a large number of unique metrics. When the number of metrics for a given component exceeds this limit, the server may start aggregating metrics together by globbing segments of the metric name with an asterisk (*). Metrics per post 20,000 Number of metrics sent per post. A post may send data for multiple components in a single request as long as the total number of metrics in the request does not exceed this limit. Frequency of post 2 per minute Frequency of update. Agents are expected to send data no more frequently than 1 per minute. Data aggregation The SDKs manage data aggregation in the event of a failed POST. If you are not using an SDK, you need to manage this yourself. Include all five metric values in a POST: min, max, total, count, and sum or squares. (Exception: This may not be necessary for monotonic metrics where short term variation is not an issue.) Recompute these values for the accumulating metric data as required by what is being measured, incrementing the duration accordingly, until a successful POST is sent. Compression Data can be sent in the following encoding formats: identity deflate gzip If data is sent compressed, make sure the Content-Encoding header specifies the type of encoding. Examples Here are some examples for developing plugins. Example JSON This is an example of the JSON that would be used to POST data to Plugins. The JSON data is a hash with two required keys at the top level: agent: A hash describing the agent that is reporting metrics data to Plugins. A POST can contain information for only one agent. Host and version are required. components: An array of components, each consisting of a hash of attributes for the individual component. Multiple components can be sent with a single. Each component has its own name, GUID, duration, and metrics. { \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] } Copy Pseudo-code template This is a pseudo-code example that works with the Plugin API. It can be used as a template for developing plugin agents. Initialization: // globals string platform_api_uri = \"https://platform-api.newrelic.com/platform/v1/metrics\" int poll_cycle = 60 // time in seconds string version = \"1.0.0\" // major_version.minor_version.patch_level string agent_host = get_host_name_where_this_process_is_running() string agent_pid = get_process_id_of_this_process() time last_poll_time // initialize if necessary initialize once create agent_hash with: agent_host agent_pid version for each newrelic_account do // just handling one account? then \"for each\" is unnecessary complexity for each monitored_component do create component_hash with: string guid = \"com.your_company.component_name_in_snake_case\" string name =\"Human Readable Component Name\" int duration = 0 // this will get updated each poll_cycle hash metrics_hash // this will be updated by populate_component_metrics_hash() end end end Copy Loop: every poll_cycle seconds do for each newrelic_account do // just handling one account? then \"for each\" is unnecessary complexity clear hash_to_send add agent_hash to hash_to_send for each component do populate_component_metrics_hash() this component.metrics_hash(\"duration\") = time.now() - last_poll_time in seconds add component.metrics_hash to hash_to_send end json_to_send = serialize_to_json(hash_to_send) connection = open http_connection(platform_api_uri) add header(\"X-License-Key\",this newrelic_account.license_key) to connection add header(\"Content-Type\",\"application/json\") to connection add header(\"Accept\",\"application/json\") to connection set http_verb to \"POST\" for connection response = send(json_to_send) to connection case response.code when response_code = 200 clear component.metrics_hash last_poll_time = time.now() when response_code = 400 // your request was malformed // consider reporting a \"supportability\" metric which counts the number of 400 responses you get // for example \"Component/Supportability/http_error_codes/400\" // you can use this on a \"Supportability\" Dashboard that helps diagnose your agent when response_code = 403 // forbidden probably due to a bad license key // log error and shutdown the agent when response_code = 404 // invalid URL // you should never get this error for https://platform-api.newrelic.com/platform/v1/metrics when response_code = 405 // invalid method // HTTP verb should be \"POST\" when response_code = 413 // POST body too large // try splitting at component boundaries // split along metric name spaces // fail gracefully - consider reporting a supportability metric (see 400) when response_code = 500 // error on New Relic's collector // could be due to malformed data or system trouble // fail gracefully - consider reporting a supportability metric (see 400) when response_code = 503 or 504 // New Relic collector busy //- this happens by design from time-to-time // keep collecting metrics // do NOT reset last_poll_time // log error if the problem persists for several minutes end case end end Copy Metric population: function populate_component_metrics_hash() // collect metrics from monitored component at any interval // if this is the first time collecting metrics, set last_poll_time to // time.now - metric duration, the time duration for which these metrics // were collected // // if you collect 2 or more metrics from the monitored component before data // is reported to Plugins either because your metric collection interval is // faster than poll_cycle or because your agent was unable to report metrics to // Plugins (for example a 503 http response), aggregate your data by storing: // total_value, max, min, count, sum_of_squares for each metric // // if the interval is longer than poll_cycle, retain the metrics and // report them each poll_cycle until they are updated end Copy API responses and error codes Depending on whether you are using the Plugin API or an agent SDK for plugins, the HTTP responses and logging techniques may be different. For example, responses for the Plugin API are uncompressed JSON. Successful posts return this JSON: {\"status\":\"ok\"} Copy The API does not support Accept-Encoding. Debugging logs To debug information, use either of these options: public static Logger getLogger(); Copy OR public static void Logger setLogger(Logger logger) { LOGGER = logger; } Copy Error codes If an error occurs, an appropriate status code is returned. The JSON returned is the hash key error with a detailed description of the error that occurred. For example: {\"error\":\"Failed to create agent with parameters=[...]\"} {\"error\":\"Missing metric data\"} {\"error\":\"Unable to parse body: Unexpected token RIGHT BRACE(}) at position 228.\"} Copy Code Name Description 400 Bad request The request or headers are in the wrong format, or the URL is incorrect, or the GUID does not meet the validation requirements. 403 Unauthorized Authentication error (no license key header, or invalid license key). 404 Not found Invalid URL. 405 Method not allowed Returned if the method is an invalid or unexpected type (GET/POST/PUT/etc.). 413 Request entity too large Too many metrics were sent in one request, or too many components (instances) were specified in one request, or other single-request limits were reached. 500 Internal server error Unexpected server error. 502 Bad gateway All 50X errors mean there is a transient problem in the server completing requests, and no data has been retained. Clients are expected to resend the data after waiting one minute. The data should be aggregated appropriately, combining multiple timeslice data values for the same metric into a single aggregate timeslice data value. 503 Service unavailable See 502 description. 504 Gateway timeout See 502 description.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.96164,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "604436cf28ccbcf2332c60a8"
    }
  ],
  "/docs/plugins/plugin-developer-resources/developer-reference/use-plugin-api": [
    {
      "sections": [
        "Metric data for the Plugin API",
        "Important",
        "Limited access to legacy plugins",
        "URI",
        "GUID",
        "Time periods for metrics",
        "Metric data details",
        "Timeslice metric values",
        "Calculations",
        "Examples",
        "Metrics",
        "cURL example",
        "Metric references",
        "Metric naming guidelines",
        "Metric segments",
        "Caution",
        "Metric attributes",
        "Metric values",
        "Units"
      ],
      "title": "Metric data for the Plugin API",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "2e9d0553b7277c73fe8a2147519d9943fca440fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/metric-data-plugin-api/",
      "published_at": "2021-06-09T19:05:38Z",
      "updated_at": "2021-03-16T11:20:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. URI Metric timeslice data is sent with the Plugin API as an HTTP POST of JSON data using this URI: https://platform-api.newrelic.com/platform/v1/metrics Copy The Plugin API does not support New Relic's REST API, and vice versa. However, you can use the REST API (v2) to extract plugin data. For a list with links to procedures and examples, see Plugin examples (v2). GUID The plugin needs a Globally Unique Identifier (GUID), which is a character string limited to no less than 4 and no more than 255 characters. The GUID for a published plugin must be unique for each plugin. When creating a plugin, you are responsible for managing your own GUIDs to avoid naming conflicts. Time periods for metrics Metrics that appear in dashboards are reported with a duration. The end time is implied by the time New Relic receives the metric(s). Thus, you cannot define metric values that both start and end in the future, or start and end in the past. The Plugin API is designed for live metrics only, not historical metric collection. Metrics may only be reported for a period starting in the past (no more than a few hours) and ending upon reporting. The charts on your plugin's dashboards can show any time period you want; for example, 30 minutes, 30 days, etc. You can also deliver data at 1-hour intervals. New Relic does not extrapolate data values between the data points delivered. For example, data will aggregate when there is too much, but data will not be extrapolated if there is not enough data. In order for data to appear on a 30 minute chart, make sure at least one data point is within the range, or no data will appear. Use a 60-second polling interval, because the default dashboard shows 30 minutes of data, which gives 30 data points for the chart. Or, if you want to show 3 days of data, use a 1-hour polling interval, which provides 24 * 3=72 data points for your chart. Metric data details The JSON data is a hash with two required keys at the top level: components: An array of components, each consisting of a hash of attributes for the individual component, including the metric data. agent: A hash describing the agent that is reporting metrics data to New Relic Plugins on behalf of the component(s). Of these values, only host and version are required. When graphing metrics, be aware that null = zero. Metric data POST Description Component data One of two required keys at the top level. This is an array of hashes describing the components that report metrics in this request. Each hash contains the following values: name A name ( < =32 characters) that uniquely identifies the monitored entity and appears as the display name for this agent. Note: Metric names are case sensitive. guid A \"reverse domain name\" styled identifier; for example, com.newrelic.mysql. This is a unique identity defined in the plugin's user interface, which ties the agent data to the corresponding plugin user interface in New Relic. duration The duration in seconds over which the metric data was collected. The end time is implied as the time the data is received by the API. metrics Timeslice data for each metric being reported. The hash keys are metric names, and the values are the timeslice data value for the named metric. Agent data One of two required keys at the top level. A hash specifying information about the agent that is reporting data on behalf of the components. host (required) The hostname of the agent monitoring the specified components. This is the hostname where the monitoring agent is running, not the hostname of the component being monitored. pid (optional) The process identifier of the agent monitoring the specified components. This is the process identifier of the monitoring agent itself, not a process identifier that may be associated with the monitored components. version (required) The version of the agent monitoring the specified components, using the format A.B.C where A, B, and C are integers. The version number must conform to the rules specified in standard Semantic Versioning scheme v2.0.0. Timeslice metric values Metrics are sent inside the component hash with the key metrics and a hash as a value. The hash keys are metric names, and the values are the timeslice data values for the named metric. The timeslice hash value uses one of three formats: Timeslice hash value Description A single scalar value with a floating point number or integer This is the simplest format, and this number is required. The reported value is used as the total, minimum, and maximum data value. The count value is assumed to be 1. The Plugin API does not support reporting of arbitrary string metrics, only scalar values that are aggregated. Array of five required values in specific order An array of five required integers or floating point numbers that represent, in order: Total value over the time period Count of the number of events this value represents over the time period; the average is calculated by dividing total by count Minimum value over the time period Maximum value over the time period Sum of squares for the samples over the time period Hash with five required key/value pairs in any order A hash with value names as the keys, and integers or floating point values as the values. All five key/value pairs are required. The keys of the hash are the type of timeslice data, and the value is the data value. These has key/value pairs can be in any order: total: Total value over the time period count: Count of the number of events this value represents over the time period; the average is calculated by dividing total by count min: Minimum value over the time period max: Maximum value over the time period sum_of_squares: Sum of squares for the samples over the time period Calculations Limited mathematical calculations are available with the key/value pairs, such as computing total, count, minimum, maximum, averages, and standard deviations. However, to do more extensive calculations, you need to do the math in the agent, and then send the results as a new metric. For example, send Metric1, Metric2, and Metric3 (which equals Metric1 divided by Metric2). If you submit negative metric values, the charts on your plugin's dashboards will not show them. However, the summary metrics for your plugin will show negative values. Examples Here are some examples. Metrics \"metrics\" : { \"Component/Database/Primary[Queries/Second]\" : { \"total\" : 25, \"count\" : 2, \"min\" : 10, \"max\" : 15, \"sum_of_squares\" : 325 }, \"Component/Database/Secondary[Queries/Second]\" : [25, 2, 10, 15, 325], \"Component/Database/Backup[Queries/Second]\" : 10 } Copy cURL example curl -vi https://platform-api.newrelic.com/platform/v1/metrics \\ -H \"X-License-Key: YOUR_LICENSE_KEY_HERE\" \\ -H \"Content-Type: application/json\" \\ -H \"Accept: application/json\" \\ -X POST -d '{ \"agent\": { \"host\" : \"db.internal.your_company.com\", \"pid\" : 1234, \"version\" : \"1.0.0\" }, \"components\": [ { \"name\": \"Primary MySQL Database\", \"guid\": \"com.your_company_name.plugin_name\", \"duration\" : 60, \"metrics\" : { \"Component/ProductionDatabase[Queries/Second]\": 100, \"Component/AnalyticsDatabase[Queries/Second]\": { \"min\" : 2, \"max\" : 10, \"total\": 12, \"count\" : 2, \"sum_of_squares\" : 104 } } } ] }' Copy Metric references Refer to these references as you develop your own plugins. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order for the metric to be rendered usefully in the user interface, the metric name must contain a prefix, category name, label, and optional units indicator. Here are some recommended guidelines for the text in metric names to make them more readable in the user interface. Metric naming guidelines Guidelines UI display Use case and whitespace characters appropriate for display in the user interface, because segments are rendered as-is in the UI. Category and label segments Metric names are case sensitive. Capitalize the first word in the category and label segments. Keep category and label segments as short as possible. Length There is a limit of 255 characters for metric names. Characters to avoid using Avoid using the following characters in names. These characters have special meaning and should not be used except where specifically required for their purpose. / ] [ | * Also avoid multi-byte characters. Units Use abbreviated names for units when possible. Metric segments Each of these segments is divided by the forward slash / character. Each segment is interpreted for a specific purpose in the UI and roughly follows this pattern: prefix/category/label[units] Copy For example, the metric representing the latency of cache hits reported by a plugin collecting data for a cache appliance might look like this: Component/Cache/Hits[sec|hit] Copy Metric segment order Notes Prefix: Component/ or Custom/ The first segment of a custom metric is Component/ (if it comes from a plugin agent) or Custom/ (if it is a custom metric collected by a New Relic agent. For example, Custom/MyMetric). Caution If you use the Plugin API only, and if the metrics do not start with Component/, they may not be available or may not appear correctly in charts and dashboards. Category name The second part of a custom metric is a category name, used to group metrics into different categories. For example, the metrics reported by a database plugin may fall into categories such as schema, tables, or connections. Label The third part of the metric name is used for labeling the data when it appears in tables and charts. If it contains multiple segments, each slash separating the segments of the label will be rendered as part of the label. Units The fourth segment of the metric consists of a units specification. Metric attributes Most metrics are defined statically and represent some global state; for example, cache size. Other metrics are dynamic and include some contextual attribute like the name of a host or a file. These metrics need to be structured so you can easily show them as a group in a table stacked in a chart. To add attribute names to a metric, put them in trailing segments separated by a forward slash / character. For example: Component/Disk/Bytes In/dev001 Component/Network/External services/ae592c3.aws.com Copy You can specify more than one attribute as long as they occupy the same position for a given metric category and label: Component/Tables/Row count/DB001/BLOG_POSTS[rows] Copy Caution Avoid overloading the metric space by putting in segment values that have a large range of values. While something like a customer's region in an attribute is a reasonable thing to track in the metric, the customer name would not be if you have more than a few hundred customers. If your agent starts sending an excessive amount of metrics, your metrics may be automatically collapsed into groups with wildcards: Component/Users/*[visits] Copy Metric values You can report a metric value in one of two ways: Single value: This typically is the value being reported for that time slice. If you use an SDK, you report the single value to the SDK. It handles tracking the rest of these values. Set of aggregate value: This includes the min, max, and sum of squares values for the value being reported. If you use the Plugin API, the preferred method is to report all of the values. When aggregating a series of timeslice data into a single timeslice data entry for a given period, all fields are summed except for the min and max value. If you are using an SDK plugins, this is done automatically. If you are using the Plugin API to develop plugins, you need to code for this. A metric value contains several fields, but it is represented primarily by the count and value. The count is a 32-bit integer field, and the value is a 32-bit float. Metric values can represent more than one data point or sample as an aggregation of measures. Typically the count is the number of samples, and the value is the total value of all samples. Here are the fields in a metric value: Metric value Description count The number of things being measured. If data is collected at the time the event occurs, like with some kind of injection, then the count in the timeslice data will be 1. Required if it is not 1 (0 generally represents an absent value). value Required: The total value measured across all things being counted. When averages are calculated later, we divide the value by the count. In some cases, the value field is irrelevant. min, max The minimum and maximum values when the count is greater than 1. When the count is 1, these are the same as the value. Optional depending on whether they are available or relevant for a given metric. sum of squares This is the sum of squares of each value and is useful when the values follow a standard distribution. You can only capture this value when you are collecting data each time the event happens. You store the value of the event in the value field and the square of the value in the sum of squares. This is used to calculate a standard deviation later on. The sum of squares is optional. It is used to calculate a standard deviation for a selection of data. If standard deviation for the value is not meaningful, such as when the values are not part of a normal distribution, then the sum of squares is omitted. Units When a metric value is collected by periodically sampling an interface, the count units are implicitly samples, and the value units are whatever is being sampled. For data it might be bytes. For throughput it might be something like kilobytes/second. For utilization (like CPU) it might be percent. When the count units are samples, they can be omitted in the metric name. Units of time, bytes, and bits may get special treatment, allowing additional conversion in the user interface between magnitudes. For example, if you specify a metric with units of kilobytes, then in the UI you may be presented the option of displaying a chart of Mb. Metrics units describe what the value field and count represent. Units are specified inside brackets and consist of units for the value, followed by a pipe (|) and then the units for the count. For example: Component/metric_id[value_unit|count_unit] Copy Exception: The pipe and count units (|[count_unit]) are not required after the value unit for samples. Rate metrics are commonly defined as sample per interval. This is defined as units/interval in the metric, with a forward slash to separate units from interval. For example: Component/metric_id[value_unit/interval] Copy In rare cases there will only be a unit value for count. The value will be interpreted as unitless. Value units are omitted, and the vertical bar appears in front of the count units. For example: Component/metric_id[|count_unit] Copy Units for plugin metrics Notes Naming conventions You can have mixed-case unit names. They.can consist strictly of alphabetical characters as well as the _, %, or / symbols. Case is preserved. Punctuation markers, dashes, spaces and any other symbols are not allowed. Recommendation: Use uncapitalized words, spelled out in full. For example, use second not sec. Rate metrics When a metric value represents a rate, such as bytes/second, then the value is assumed to be a sample for the given interval. The units specifier looks like [ bytes/second] since the count units are implicitly samples. For example: Component/metric_id[bytes/second] Copy The count units are samples (default) and the value units are bytes/second. The forward slash separates the units from the interval. Count with units A common case for declaring units is when measuring response times. If the custom metric represents the average latency of a call to a cache, then the units for the metric value are seconds per call. For example: Component/metric_id[seconds|call] Copy Count units are calls and value units are seconds. The default count metric is not being used, so you need to specify it. The bar separates the value units from the count units. Units in charts The units specified in a metric have several implications for the way the values are interpreted by generic charts and tables: Units display in labels and tooltips in charts to indicate what the values represent. Units imply a set of different values available from a single metric value. When creating a chart in a dashboard, the dashboard author selects one of the available value methods for that metric to plot in the chart.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.6587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Metric data for the <em>Plugin</em> API",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "&quot; : 2, &quot;max&quot; : 10, &quot;total&quot;: 12, &quot;count&quot; : 2, &quot;sum_of_squares&quot; : 104 } } } ] }&#x27; Copy Metric references <em>Refer</em> to these references as you <em>develop</em> your own <em>plugins</em>. Metric naming guidelines Metric timeslice data uses a unique case-sensitive identifier, referred to as the metric name. In order"
      },
      "id": "603e80db64441f0def4e8863"
    },
    {
      "sections": [
        "Plugin data",
        "Important",
        "Limited access to legacy plugins",
        "Use integers and floats",
        "Define the time period (duration)",
        "Follow unit conversion guidelines",
        "Select value methods for display in the UI"
      ],
      "title": "Plugin data",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "e5fd09ba8dd9c63a140479fbc2032254d1cf8c4f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plugin-data/",
      "published_at": "2021-06-09T19:08:48Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Use integers and floats All plugin metrics must be an integer or float, and they must be reported along with a duration. You can also report the type of metric so it can be converted from one unit type into another. You can display the metrics you collect in a variety of value methods, including throughput, averages, min/max, and rate. The metrics appear in charts and tables you create for your plugin's user interface. Plugins in Plugin Central are designed to report on frequency metrics using non-negative integers or floating-point numbers: Non-negative integers: Supported. Floating-point numbers: Supported. Negative values: Not supported, except for summary metrics on the plugin's Summary page. Otherwise, the UI shows negative values as zero. String values: Not supported; the UI shows strings as zero. However, parts of your metric name (the key) can be displayed in the UI. Define the time period (duration) All metrics must include a duration period that starts no more than a few hours in the past. The end time is set automatically to the time New Relic Plugins receives the metrics. You cannot report a duration that starts or ends in the future, or a duration that ends in the past. For best results, use one of the plugin SDKs to create your plugin. Otherwise, some POST attempts may fail because the actual recorded duration could vary in increments of the plugin's scheduled reporting frequency. Follow unit conversion guidelines Plugins automatically converts some units (such as rate units) to more natural forms. For example, [bytes/second] is converted to Bps. Follow these guidelines for unit conversions: Long format: Always specify the long format (for example, [bytes/second]) in the metric name. The long or short version will be used as appropriate. (Unit designations are not case sensitive.) Consistency: Use modifiers consistently in the metric name. If you use a different modifier with the same metric name, it will be treated as a different metric. Optional: Standard modifiers: Provide standard modifiers to the first metric in a value unit. For example, rather than specifying [bytes/second], you can specify [kiloBytes/second]. Plugins accepts these standard modifiers: Modifier Multiplier Modifier Multiplier Kilo 1000 - -- - -- Mega 1000^2 - -- - -- Giga 1000^3 Gibi 1024^3 Tera 1000^4 Tebi 1024^4 Peta 1000^5 Pebi 1024^5 Select value methods for display in the UI When you define a metric value for reporting, Plugins also captures a count, min, max, and sum of squares. Depending on whether you report single or aggregate values, you may report these numbers directly, or Plugins may calculate them automatically. You can then choose a value method for rendering these metrics in your plugin UI. In general, to configure value methods in the user interface: Select the metric you want to use. Review the list of value methods to select how to present the data in a column or plotted in a chart. Available value methods depend on the format of the units part of the metric name: Value method Count | Value Value Rate Count: The total of the count field over the entire timeslice data interval. When aggregating timeslice data, the count is summed. Total value: The total value over the entire time slice data interval. When aggregating timeslice data, the value field is summed Time rates only Average value: The total value divided by the total count, calculated only when units for both count and value are available. Throughput: The total count divided by the time interval of the time slice. By default New Relic Plugins measures the throughput in minutes according to the count units, such as calls per minute or bytes per minute. When the count units are specified in time (seconds), then the throughput appears as a percentage. Min/Max: The statistical values for minimum and maximum values when recorded in the metric value along with Count and Value. Standard deviation: The standard deviation of the entire set of measures recorded over the time interval. This is available only if the sum of squares field was populated in the metric value. The sum of squares and mean are used to calculate the standard deviation. In practice, this is meaningful only for populations that resemble a normal distribution. Rate: The rate is the total value divided by the time interval. When units of the value are in time, then the rate value is a percentage value. Units that are themselves rates will not have an explicit rate value method. The rate is simply the average value. Percentage: If you want the metric to appear as a percentage in the user interface, then you must define it as a percentage in the JSON.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.65599,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> data",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603e91e3196a67c11ea83d9d"
    },
    {
      "sections": [
        "Plan plugin metrics",
        "Important",
        "Limited access to legacy plugins",
        "Collect plugin metrics",
        "Present plugin metrics"
      ],
      "title": "Plan plugin metrics",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugin developer resources",
        "Developer reference"
      ],
      "external_id": "08974b731c810af2b6b037e8b761834c6e1ce7a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugin-developer-resources/developer-reference/plan-plugin-metrics/",
      "published_at": "2021-06-09T19:06:54Z",
      "updated_at": "2021-03-16T11:01:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Collect plugin metrics If you are running one of our APM agents to receive information about your applications, you can also receive arbitrary custom metrics. Using custom dashboards with your plugins, you can visualize custom metrics in a variety of useful ways. You can write plugins agents that can be run anywhere to collect metrics from any available system and report them to New Relic for dashboard display. Plugins also allow for summary metrics and one or more dashboards to visualize metrics that can be shared with every user of the plugin. This allows you to create a consistent user interface for the metrics you collect. The data that plugins report is in the form of a key/value pair. Values are numerical, either integers or floating point non-negative numbers. Negative numbers can be included in your summary metrics and tables; however, visualization in charts is limited to numbers greater than or equal to zero. Keys are strings which include the concept of name spaces and units. While values cannot be strings, parts of your metric name (the key) can be displayed in plugin dashboards. Your plugin agent can run anywhere with internet access to Plugins. You can write an agent using the agent SDKs. You can also write your agent to connect via HTTP POST using the API for Plugins in any language with HTTP support. Using the Plugin API might be the most appropriate solution when one agent is reporting metrics for more than one New Relic account. This is common for service providers to report specialized metrics for each of their customers using Plugins. This can be done with a small number of agents monitoring a large number of users. Present plugin metrics When creating a plugin agent, good metric name planning is critical to your success. Poorly chosen metrics names can make it difficult or impossible to display the information you intend. Plan ahead for how you want to visualize your information and to record metrics in a way that will facilitate this. You may even want to record the same metrics with more than one name in order to visualize different aspects of your data. Plugin dashboards do not have the ability to do mathematical calculations, so make sure your plugin agent handles any necessary calculations (sum, average, total, count, etc.) before recording metrics. Once you have collected metrics with your plugin agent, you will need to create dashboards to visualize the information in your metrics. All plugins will have a default dashboard. You can add as many dashboards as necessary to visualize your metric data (maximum 15). In addition to dashboards, you can choose up to five metrics to represent the summary of each instance. Summary metrics convey the health status of each instance and are used to trigger Caution events and Critical alerts for your plugins. The summary metrics appear on your plugin's Summary page.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.65587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Plan <em>plugin</em> metrics",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugin</em> <em>developer</em> <em>resources</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. <em>developer</em>.newrelic.com: Use <em>developer</em> tools"
      },
      "id": "603eb01228ccbc6fa6eba790"
    }
  ],
  "/docs/plugins/plugins-new-relic/custom-dashboards-custom-views/custom-dashboards-v2-legacy": [
    {
      "sections": [
        "Custom views (deprecated)",
        "Important",
        "Custom views in Liquid",
        "Account drops",
        "Methods",
        "Application drops",
        "Application metric drops",
        "Examples",
        "Value methods",
        "Filters",
        "Arithmetic filters",
        "Tags",
        "Chart tags",
        "Referencing metrics",
        "Blocks"
      ],
      "title": "Custom views (deprecated)",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Custom dashboards and custom views"
      ],
      "external_id": "f463c45abafd9dfd5c6ff8f62d834d6125cc4ba1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/custom-dashboards-custom-views/custom-views-deprecated/",
      "published_at": "2021-06-09T19:09:55Z",
      "updated_at": "2021-03-13T02:57:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In 2012, custom dashboards (v1) replaced the deprecated custom views feature. Then, in February 2014, custom dashboards (v2) replaced our original custom dashboards feature (v1). Custom dashboards (v2) are part of a legacy feature and are being retained only for use with our legacy plugins tool. In addition, plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Important For an even better experience than plugins, custom dashboards, and custom views, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Custom views in Liquid New Relic custom views allow users to visualize custom metric data in charts and HTML tables. Custom Views are written using a custom version of Liquid, a templating language created for Shopify. Custom view code looks like normal HTML interspersed with small blocks of code. The Liquid Wiki has additional information about how to write templates. Every Liquid custom view has access to four context variables, account, application, metrics, and applications. The account variable is an Account drop for the current account, and the application variable points to the current application selection. The metrics variable allows access to metrics for the current application and the applications variable can be used to access the applications belonging to the current account. Drops are secure wrappers around New Relic objects and methods accessible from Liquid templates. Drops expose a limited number of method calls available on each object in a Liquid template, as specified below. Account drops Methods id: The integer id of the account name: The name of the account applications: A collection proxy for the account applications. Applications can be looked up using this syntax: app = account.applications['The app name'] Copy The return value of the lookup is an Application drop. Application drops An application drop represents an application. Methods id: The integer id of the application name: The name of the application health_status: Returns a 1, 2 or 3 which indicates the overall health of the application. The traffic_light filter can be used to render a traffic light from the health_status integer value. metrics: An ApplicationMetrics drop which can be used to look up metrics. Application metric drops An application metrics drop is a collection proxy that can be used to find metrics. {{ application.metrics['metric name'] }} Copy You can also access the metrics for the current account selection with just the metrics variable. {{ metrics['metric name'] }} Copy You can use the application metrics drop to look up a specific metric like in the above sample. You can also use it to retrieve multiple metrics using a regular expression match: {% assign metrics = application.metrics.find_by_regexp['account'] %} Copy The return value of a single metric lookup is an application metric drop. The return value of a find_by_regexp invocation is an array of application metric drops. You can use the metric selector to browse all available metrics and insert metric names or regexp values into your custom view for use in chart tags or filters. If you have added custom metrics via custom metrics, you will see them in the metric selector. An ApplicationMetric drop represents a single application metric and can be used to fetch metric values. Metric value functions like call_count, time_percentage_by_host, and average_value_by_host can be directly invoked on this drop. Metric value functions are also used as a parameter for chart tags to specify the value to display in the chart. The return value of a value function invocation is a MetricValue. Methods id: The integer id of the metric name: The name of the metric Examples {{ application.metrics['Memory/Physical'].average_value_by_host.value }} Copy {{ metrics['CPU/User Time'].time_percentage_by_host.value }} Copy Value methods Some of the value methods return the same data for a given metric, but with different units. Units, if any, are listed in parentheses after the value method. total_value (ms): The total value of the metric for each period within the time window. Use the value_suffix attribute to set the suffix average_value, average_response_time (ms): The average value of the metric for each period within the time window. count, call_count: The number of data points for the metric value (e.g. # of method invocations) requests_per_minute (rpm), calls_per_minute (cpm), errors_per_minute (epm): The number of requests per minute min_value, min_call_time (ms): The smallest metric value collected during the period. max_value, max_call_time (ms): The largest metric value collected during the period. time_percentage (%): Useful for DB and CPU percentage utilization, added across all applicable hosts. time_percentage_by_host (%): Time percentage averaged across the # of hosts. average_value_by_host: The raw value averaged across the # of hosts. score: The value of a scoring method, currently used with Apdex metrics. Filters Filters are methods in Liquid. They always take their first parameter as the output of the left side of the filter (before the '|'). For more information about using filters, see the Liquid Wiki on Filters. Examples traffic_light(input, caution_threshold = 1, danger_threshold = 2) This filter renders a traffic light image by comparing the input value against upper and lower thresholds. If the danger threshold is exceeded, the light will be red. If the caution threshold is exceeded, the light will be yellow. Otherwise it will be green. {{ application.health_status | traffic_light }} {{ application.metrics['Memory/Physical'].average_value_by_host.value | traffic_light:800,1300 }} link_to_application(input, application) This filter generates a link to an application. The input value is the link text. {{ 'current application' | link_to_application:application }} link_to_custom_view(input, custom view name or id) This filter generates a link to a custom view. The input value is the link text. {{ 'For more detail see this custom view' | link_to_custom_view:'My Custom View' }} round(input, places = 0) This filter rounds a value. {{ 109.45 | round:1 }} percentage(input) This filter turns a value to a percentage by multiplying it by 100 and rounding to two places. {{ 0.87 | percentage }} Arithmetic filters These filters are core features of Liquid: # addition plus(input, operand) # subtraction minus(input, operand) # multiplication times(input, operand) # division divided_by(input, operand) Copy sort_table(table_id, column, order = 'asc') This filter sorts a table identified by DOM id \"tableid\", with a default sort on the column numbered \"column\" in the order specified. The order is an optional parameter. Once invoked, the table can be re-sorted dynamically by clicking on the table headers. Here is an example: { % assign metrics = application.metrics.find_by_regexp [ '._Controller/.'] %} <table id=\"metrics_table\"> <thead> <tr> <th></th> <th>Resp. time (300,1000)</th> <th></th> <th>RPM(10,50)</th> <th>Action</th> </tr> </thead> <tbody> {% for metric in metrics %} <tr> <td>{{metric.average_response_time.value | traffic_light:300, 1000}}</td> <td>{{metric.average_response_time.value}}</td> <td>{{metric.requests_per_minute.value | traffic_light:10, 50}}</td> <td>{{metric.requests_per_minute.value}}</td> <td>{{metric.name}}</td> </tr> {% endfor %} </tbody> </table> {{ 'metrics_table' | sort_table:2, 'desc' }} Copy The last line calls the table sort, sorting on the second column in descending order. For more information, see Liquid Filters. Tags Tags in Liquid are used to create logic and other custom behavior in your custom views. For more information about built-in tags, see The Liquid Wiki page on Tags. The New Relic custom tags listed below are used to display charts and alter the time window. Chart tags New Relic custom views support chart rendering using a set of custom tags. Common chart attributes include: title: The chart title subtitle: The subtitle value: A metric value function label: A function on the metric name that returns the label for each metric's timeseries. Possible values are ui_name (default), long_ui_name, last_segment (returns the last '/'-separated segment of the metric name), or segment_N (returns the Nth segment of the metric name). application: Either an application id or a name. This can be used to override the selected application. since: Changes the time window used for the metric data query. See the since block. hide_legend: Hides the graph legend when set to true limit: Limits the number of metrics matched by a regular expression metric match link_to: A url that will become the drilldown link for the chart link_to_custom_view: A custom view name or id. The chart will hyperlink to the given custom view. caution_threshold: A number value representing a caution threshold. A yellow horizontal line will be drawn on the graph at this value. danger_threshold: A number value representing a danger threshold. A red horizontal line will be drawn on the graph at this value. value_suffix: A suffix to be appended to all metric values simple_tooltip: when true, the tooltip is just the value and suffix Referencing metrics Metric data can be referenced in two ways: either by using the name of a specific metric, or by providing a regular expression that matches multiple metrics. Use either the metric or the regexp attribute (but not both) in each chart tag to set the metric source. metric: A string that matches a single metric. The value should be in single quotes and it should not be escaped. regexp: A regular expression that matches metrics. This expression should be wrapped in quotes and it should not be escaped. The following values are provided for informational purposes, for customers who created custom views using these values prior to June 2012. You can access your old custom views and create new custom dashboards from the New Relic Custom dashboards menu. line_chart {% line_chart value:time_percentage metric:'CPU/User Time' title:'CPU' %} pie_chart {% pie_chart regexp:'ActiveRecord/(save|find|destroy)' title:'Active Record' value:time_percentage %} horizontal_bar_chart {% horizontal_bar_chart value:call_count title:'Active Record' regexp:'ActiveRecord/(save|find|destroy)' %} compare_with_last_week_chart {% compare_with_last_week_chart metric:'ActiveRecord/all' title:'Week to Week Comparison' value:time_percentage %} compare_with_yesterday_chart {% compare_with_yesterday_chart metric:'ActiveRecord/all' title:'ActiveRecord' value:time_percentage %} Similar to the compare_with_last_week_chart but uses a 24 hour time period for comparison rather than 7 day. compare_with_yesterday_and_last_week_chart {% compare_with_yesterday_and_last_week_chart metric:'ActiveRecord/all' title:'ActiveRecord' value:time_percentage %} A combination of compare_with_yesterday_chart and compare_with_last_week_chart. daily_summary_chart {% daily_summary_chart metric:'Controller' title:'Daily Summary Chart' value:call_count %} weekly_summary_chart {% weekly_summary_chart metric:'Controller' title:'Weekly Summary Chart' value:call_count %} Blocks Blocks in Liquid are tags that are used to create logic in your custom view. There are many blocks built into Liquid, as well as the custom New Relic 'since' block. since New Relic's since block tag is used to specify a time window for a set of queries. This tag must be followed by a matching endsince tag. All metric data value and chart data queries occurring within a since tag will be scoped to the given time range. Charts will override this time window if the since attribute is specified, but this tag is useful for scoping an entire custom view to a particular time window. It is also the only way to change the time window scope of a metric value query. Examples {% since midnight %} {{ application.metrics['Memory/Physical'].average_value_by_host.value }} {% endsince %} {% since 3.hours.ago %} {% line_chart value:time_percentage metric:'CPU/User Time' title:'CPU Last 3 hours' %} {% endsince %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 247.55356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>views</em> (deprecated)",
        "sections": "<em>Custom</em> <em>views</em> (deprecated)",
        "tags": "<em>Custom</em> <em>dashboards</em> <em>and</em> <em>custom</em> <em>views</em>",
        "body": ". In addition, <em>plugins</em> in <em>Plugin</em> Central are not supported with accounts that host data in the EU region data center. Important For an even better experience than <em>plugins</em>, <em>custom</em> <em>dashboards</em>, and <em>custom</em> <em>views</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use"
      },
      "id": "60445cdb196a678ea2960f21"
    },
    {
      "sections": [
        "Use a Plugin Central plugin",
        "Important",
        "Limited access to legacy plugins",
        "View plugin dashboard details",
        "Plugin summary",
        "Plugin dashboards",
        "Plugin alerts",
        "Delete a plugin",
        "Remove plugin components (instances)",
        "Delete the plugin"
      ],
      "title": "Use a Plugin Central plugin",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "feae68c2e9d870f7c02fff5ffb69f2c262a0cd6c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/use-plugin-central-plugin/",
      "published_at": "2021-06-09T19:12:15Z",
      "updated_at": "2021-03-16T11:03:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. View plugin dashboard details Each plugin in Plugin Central includes procedures for how to install, use, troubleshoot, and uninstall it. Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. After you install a plugin, it starts to receive data, usually within five minutes. The plugin automatically appears with a short name and icon on your Plugins menu in New Relic One. You do not need to select it from Plugin Central. The amount and types of information on the plugin's summary page and dashboards depend on the specific plugin. For example, a plugin may have one or more components (instances) and one or more dashboards. To view summary and dashboard details about the plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, review the list of components or instances, summary metrics, and list of Recent Events. To view dashboard details about any component or instance, select its name. Plugin summary Depending on the plugin, the summary includes: One or more components or instances (what the plugin agent is monitoring, typically a host/port pair) Zero to five summary metrics for the past three minutes (values such as average, total, minimum, maximum, standard deviation, rate, or count) with optional alerts Recent events list, including deployments, notifications, and alerts Other information about alert violations, events, and activity If your plugin has 100 or more components or instances, you can search for a specific component instance. Here is a summary of additional standard features. If you want to... Do this... View version information for a component's or instance's agent Mouse over the component's name. Change the sort order On the title row of the plugin's summary page, select the up or down arrow for a component (instance) or a summary metric's label. Show or hide items on the events and activity list Select an event icon, or select All. View details about an event On the events and activity list, select the link. View page details for a component or instance Select the name or a summary metric for the component (instance). Plugin dashboards Depending on the plugin, it may have one or more dashboards, and each dashboard may present data as a chart or a table. You can use any of New Relic's standard dashboard features to drill down into detailed information. The customized dashboards that show plugin data are part of the plugin. Users cannot add or remove these dashboards. This must be done by the author or publisher as part of a plugin update. Plugin alerts If the plugin publisher set Critical (red) or Caution (yellow) alert conditions for your plugin's components or instances, you can view details direct in the user interface. For example, you can: Select and view alert details. Change the existing thresholds. Set your alert notification options; for example, to receive email notifications for Critical events. Delete a plugin Each plugin in Plugin Central includes procedures for how to uninstall it. When you select the plugin's Download or Continue button, the plugin should include a README file or refer to other documentation resources. Remove plugin components (instances) At a minimum, your plugin must stop reporting data before you start uninstalling it. Make sure the health status for your plugin's components (instances) are gray. Depending on the plugin, there may be other dependencies before disabling or uninstalling it. For example, plugins from SaaS providers may have different requirements. Be sure to review the instructions that the plugin's publisher provides. Then, to remove individual components from your plugin, click the settings icon for each component (instance). Delete the plugin After you remove each component (instance) for the plugin, the plugin icon will automatically disappear from your Plugins menu in the New Relic UI. You do not need to do anything else to delete the plugin. If you are the plugin's publisher and need to delete the plugin from Plugin Central, go to support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.464554,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use a <em>Plugin</em> Central <em>plugin</em>",
        "sections": "<em>View</em> <em>plugin</em> <em>dashboard</em> details",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": "&#x27;s summary page and <em>dashboards</em> depend on the specific <em>plugin</em>. For example, a <em>plugin</em> may have one or more components (instances) and one or more <em>dashboards</em>. To <em>view</em> summary and <em>dashboard</em> details about the <em>plugin</em>: Go to one.newrelic.com &gt; More &gt; <em>Plugins</em>, and select your <em>plugin</em>. From the <em>plugin</em>&#x27;s summary page"
      },
      "id": "603ebf0928ccbcf8d0eba762"
    },
    {
      "sections": [
        "Install from Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Requirements",
        "Access rights",
        "License key",
        "Typical plugin installation procedures",
        "Install an NPI-compatible plugin",
        "Install the plugin",
        "Manage plugins with the NPI tool",
        "Troubleshoot NPI-compatible plugins",
        "Duplicate plugins",
        "Error message ./npi: line 1: bin/node: No such file or directory",
        "Error message -bash: ./npi: No such file or directory",
        "Insufficient privileges to run background processes",
        "Install with Chef or Puppet",
        "Chef cookbooks",
        "Puppet modules"
      ],
      "title": "Install from Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "a19bd4cb7582a8653cd83b18e431b23cb4270876",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/install-plugin-central/",
      "published_at": "2021-06-09T19:12:15Z",
      "updated_at": "2021-03-13T01:16:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Requirements Each plugin in Plugin Central includes its own procedures for how to install, use, troubleshoot, and uninstall it. In order to use a plugin, first verify that your environment meets the plugin's documented requirements. Then follow the plugin's procedures to install the plugin agent on one or more hosts in your monitored environment, or to configure a SaaS plugin as directed by your SaaS provider. As a standard security measure for data collection, your application server must support SHA-2 (256-bit). We do not support SHA-1. Also, plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Access rights When using an agent from Plugin Central, deploy the agent giving the fewest possible permissions in order for the plugin agent to function successfully. Unless the plugin publisher gives specific instructions, you should run the plugin agent as a non-privileged user; do not use su or sudo privileges. This applies to both installing and using the agent. If the plugin agent needs credentials for the component (instance) that it is monitoring, create a custom set of credentials just for the monitoring agent to use. These should be separate from any other production credentials. The custom credentials should grant the fewest possible permissions while still allowing the agent to gather the data it needs. For example, for most plugin agents, you should only need to grant read-only access to your components or instances so the plugin agent cannot modify your system in any way. Also, with many agents, you should only need to grant access to read performance and administration data, not necessarily end customer or other sensitive data. For more information, see Plugin security. License key As part of any plugin installation process, you need your New Relic license key. When you are logged into the Plugins UI, the plugin's installation page in Plugin Central also shows your license key so you can easily copy it to your clipboard. If plugins have been published by SaaS providers, they must have access to the New Relic license key for each individual account. They can capture this information when provisioning new customers via the New Relic Partner API, or they can provide a mechanism for customers to share their existing New Relic license key. Typical plugin installation procedures Installation requirements depend on the type of plugin. For example, a Java plugin agent has different requirements than a Ruby plugin agent. Before you use a plugin, review the documentation that the plugin's publisher provides about the agent's installation requirements. To install any plugin from Plugin Central: Go to one.newrelic.com > More > Plugins. From the Plugin Central directory, select the plugin's title or its Get started button. From the plugin's details page, select the Download or Continue button. Follow the plugin's specific instructions to get your plugin installed and running. After you start running a plugin, it collects and sends data to New Relic, usually within five minutes. The plugin name will automatically appear in the Plugins UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible plugin The New Relic Platform Installer (NPI) is a command line utility that helps you easily download, configure, and manage a plugin by installing it with a single command. After you install the NPI tool, you can use it to install any plugins that are compatible with it. Install the plugin Plugins that are compatible with the New Relic Platform Installer include an NPI compatible label. If you have not already installed the NPI tool: Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, click the link that says * Requires New Relic Platform Installer (NPI) - Get it here. From the dropdown that opens, select your operating system. Copy the command that appears, then run it in your terminal to install the NPI tool. Unix-based systems: If you need to set a default user, in your terminal, run: ./npi set user <USER NAME> Copy Once you have installed the NPI tool, you can install any NPI compatible plugin. Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, follow the procedures to copy the specific plugin's installation command. In your terminal, change to the directory ~/newrelic-npi, then paste and run the install command. Manage plugins with the NPI tool To view information that helps you manage NPI-compatible plugins: For usage and commands, help and version flags, and setup examples, run the command --help from the directory ~/newrelic-npi. For a list of plugins that are NPI-compatible, run the command ./npi available. If you need to include proxy settings in your configuration (for both the NPI tool and the plugin's newrelic.json file), use these commands: ./npi config set proxy_host <HOST> ./npi config set proxy_port <PORT> ./npi config set proxy_username <USER NAME> ./npi config set proxy_password <PASSWORD> Copy To view the full path for a plugin, run a where command. This is useful for viewing log files or locating a plugin on your filesystem so you can manually configure it. Troubleshoot NPI-compatible plugins In addition to the troubleshooting procedures provided by the plugin publisher, follow these troubleshooting guidelines when installing NPI-compatible plugins. Duplicate plugins Problem: If you install a plugin and then install the same plugin again through the NPI tool, you will have two versions of the plugin installed. Solution: Delete the older version of the plugin, and then install the NPI-compatible version using the NPI tool. Procedures to delete plugins typically appear in the README file or in other documentation that the plugin publisher provides. Error message ./npi: line 1: bin/node: No such file or directory Problem: The architecture script that you selected when you installed the NPI tool does not match your operating system (for example, x86 instead of x64). Solution: Install the NPI tool using the correct script for your operating system. Error message -bash: ./npi: No such file or directory Problem: You cannot run NPI commands. Solution: You can only access the NPI tool from the location where it was installed. To solve this problem, navigate to the directory ~/newrelic-npi, and run the command again. Insufficient privileges to run background processes Problem: If you try to set a plugin to run as a background process, you might see a message that you have insufficient privileges. Solution: The plugin creates an /etc/init.d script on Linux and a Windows service on Windows, both of which require escalated privileges to run. To solve this problem: Linux: Run the command with sudo in front of it. Windows: Run the command as an administrator. Install with Chef or Puppet In addition to standard installation procedures, you can install plugins with Chef and Puppet configuration management tools. These tools automate plugin installation and make it easier to manage plugins with the rest of your server software. Chef cookbooks Plugins in Plugin Central may come bundled with a Chef script, or you can write your own. If a Chef script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Chef, add the Chef cookbook for New Relic Plugins: Procedures: See Chef's cookbook documentation. New Relic Plugins cookbook: See Chef's community site for newrelic_plugins. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Chef. Then, to install a plugin using Chef: Configure Chef with the plugin details. Run Chef to install the plugin. Chef cookbooks and recipes define roles for specific server configurations. For example, a web server can have the role web_server which includes all of the software and configuration needed for a web server. Here is an example of creating a Chef role for a server running the Wikipedia Java example plugin: name \"newrelic_wikipedia_example_java_plugin\" description \"Server running the New Relic Plugins Wikipedia Example Java Plugin\" run_list( \"recipe[newrelic_plugins::wikipedia_example_java]\" ) default_attributes( \"newrelic\" => { \"license_key\" => \"NEW_RELIC_LICENSE_KEY\", \"wikipedia_example_java\" => { \"install_path\" => \"/path/to/plugin\", \"user\" => \"newrelic\" } } ) Copy Puppet modules Plugins in Plugin Central may come bundled with a Puppet script, or you can write your own. If a Puppet script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Puppet, add New Relic's Puppet module for plugins: Procedures: See Puppet's module documentation. New Relic plugin modules: See the Puppet Forge community site. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Puppet. Then, to install a plugin using Puppet: Configure Puppet with the plugin details. Run Puppet to install the plugin. Puppet modules contain manifest files that are a collection of classes for configuring a server. For example, a web server can be assigned several classes for the necessary software for a web server. Here is an example of using a Puppet class for a server running the Wikipedia Java example plugin: class { 'newrelic_plugins::wikipedia_example_java': license_key => 'NEW_RELIC_LICENSE_KEY', install_path => '/path/to/plugin', user => 'newrelic' } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.09947,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install from <em>Plugin</em> Central",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " to get your <em>plugin</em> installed and running. After you start running a <em>plugin</em>, it collects and sends data to <em>New</em> <em>Relic</em>, usually within five minutes. The <em>plugin</em> name will automatically appear in the <em>Plugins</em> UI, where you can select and <em>view</em> its summary metrics and <em>dashboards</em>. Install an NPI-compatible"
      },
      "id": "60445cdd196a6788d9960f28"
    }
  ],
  "/docs/plugins/plugins-new-relic/custom-dashboards-custom-views/custom-views-deprecated": [
    {
      "sections": [
        "Custom dashboards v2 (legacy)",
        "Important",
        "Limited access to legacy plugins"
      ],
      "title": "Custom dashboards v2 (legacy)",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Custom dashboards and custom views"
      ],
      "external_id": "f122ddf1c7bcc4c1efb449838eafa63d79d5753c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/custom-dashboards-custom-views/custom-dashboards-v2-legacy/",
      "published_at": "2021-06-09T19:09:54Z",
      "updated_at": "2021-03-13T01:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In February 2014, custom dashboards (v2) replaced our original custom dashboards feature (v1). Custom dashboards (v2) are part of a legacy feature and are being retained only for use with our legacy plugins tool. In addition, plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 247.9973,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>dashboards</em> v2 (legacy)",
        "sections": "<em>Custom</em> <em>dashboards</em> v2 (legacy)",
        "tags": "<em>Custom</em> <em>dashboards</em> <em>and</em> <em>custom</em> <em>views</em>",
        "body": "In February 2014, <em>custom</em> <em>dashboards</em> (v2) replaced our original <em>custom</em> <em>dashboards</em> feature (v1). <em>Custom</em> <em>dashboards</em> (v2) are part of a legacy feature and are being retained only for use with our legacy <em>plugins</em> tool. In addition, <em>plugins</em> in <em>Plugin</em> Central are not supported with accounts that host data"
      },
      "id": "60445cde28ccbc04a2311239"
    },
    {
      "sections": [
        "Use a Plugin Central plugin",
        "Important",
        "Limited access to legacy plugins",
        "View plugin dashboard details",
        "Plugin summary",
        "Plugin dashboards",
        "Plugin alerts",
        "Delete a plugin",
        "Remove plugin components (instances)",
        "Delete the plugin"
      ],
      "title": "Use a Plugin Central plugin",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "feae68c2e9d870f7c02fff5ffb69f2c262a0cd6c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/use-plugin-central-plugin/",
      "published_at": "2021-06-09T19:12:15Z",
      "updated_at": "2021-03-16T11:03:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. View plugin dashboard details Each plugin in Plugin Central includes procedures for how to install, use, troubleshoot, and uninstall it. Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. After you install a plugin, it starts to receive data, usually within five minutes. The plugin automatically appears with a short name and icon on your Plugins menu in New Relic One. You do not need to select it from Plugin Central. The amount and types of information on the plugin's summary page and dashboards depend on the specific plugin. For example, a plugin may have one or more components (instances) and one or more dashboards. To view summary and dashboard details about the plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, review the list of components or instances, summary metrics, and list of Recent Events. To view dashboard details about any component or instance, select its name. Plugin summary Depending on the plugin, the summary includes: One or more components or instances (what the plugin agent is monitoring, typically a host/port pair) Zero to five summary metrics for the past three minutes (values such as average, total, minimum, maximum, standard deviation, rate, or count) with optional alerts Recent events list, including deployments, notifications, and alerts Other information about alert violations, events, and activity If your plugin has 100 or more components or instances, you can search for a specific component instance. Here is a summary of additional standard features. If you want to... Do this... View version information for a component's or instance's agent Mouse over the component's name. Change the sort order On the title row of the plugin's summary page, select the up or down arrow for a component (instance) or a summary metric's label. Show or hide items on the events and activity list Select an event icon, or select All. View details about an event On the events and activity list, select the link. View page details for a component or instance Select the name or a summary metric for the component (instance). Plugin dashboards Depending on the plugin, it may have one or more dashboards, and each dashboard may present data as a chart or a table. You can use any of New Relic's standard dashboard features to drill down into detailed information. The customized dashboards that show plugin data are part of the plugin. Users cannot add or remove these dashboards. This must be done by the author or publisher as part of a plugin update. Plugin alerts If the plugin publisher set Critical (red) or Caution (yellow) alert conditions for your plugin's components or instances, you can view details direct in the user interface. For example, you can: Select and view alert details. Change the existing thresholds. Set your alert notification options; for example, to receive email notifications for Critical events. Delete a plugin Each plugin in Plugin Central includes procedures for how to uninstall it. When you select the plugin's Download or Continue button, the plugin should include a README file or refer to other documentation resources. Remove plugin components (instances) At a minimum, your plugin must stop reporting data before you start uninstalling it. Make sure the health status for your plugin's components (instances) are gray. Depending on the plugin, there may be other dependencies before disabling or uninstalling it. For example, plugins from SaaS providers may have different requirements. Be sure to review the instructions that the plugin's publisher provides. Then, to remove individual components from your plugin, click the settings icon for each component (instance). Delete the plugin After you remove each component (instance) for the plugin, the plugin icon will automatically disappear from your Plugins menu in the New Relic UI. You do not need to do anything else to delete the plugin. If you are the plugin's publisher and need to delete the plugin from Plugin Central, go to support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.464554,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use a <em>Plugin</em> Central <em>plugin</em>",
        "sections": "<em>View</em> <em>plugin</em> <em>dashboard</em> details",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": "&#x27;s summary page and <em>dashboards</em> depend on the specific <em>plugin</em>. For example, a <em>plugin</em> may have one or more components (instances) and one or more <em>dashboards</em>. To <em>view</em> summary and <em>dashboard</em> details about the <em>plugin</em>: Go to one.newrelic.com &gt; More &gt; <em>Plugins</em>, and select your <em>plugin</em>. From the <em>plugin</em>&#x27;s summary page"
      },
      "id": "603ebf0928ccbcf8d0eba762"
    },
    {
      "sections": [
        "Install from Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Requirements",
        "Access rights",
        "License key",
        "Typical plugin installation procedures",
        "Install an NPI-compatible plugin",
        "Install the plugin",
        "Manage plugins with the NPI tool",
        "Troubleshoot NPI-compatible plugins",
        "Duplicate plugins",
        "Error message ./npi: line 1: bin/node: No such file or directory",
        "Error message -bash: ./npi: No such file or directory",
        "Insufficient privileges to run background processes",
        "Install with Chef or Puppet",
        "Chef cookbooks",
        "Puppet modules"
      ],
      "title": "Install from Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "a19bd4cb7582a8653cd83b18e431b23cb4270876",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/install-plugin-central/",
      "published_at": "2021-06-09T19:12:15Z",
      "updated_at": "2021-03-13T01:16:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Requirements Each plugin in Plugin Central includes its own procedures for how to install, use, troubleshoot, and uninstall it. In order to use a plugin, first verify that your environment meets the plugin's documented requirements. Then follow the plugin's procedures to install the plugin agent on one or more hosts in your monitored environment, or to configure a SaaS plugin as directed by your SaaS provider. As a standard security measure for data collection, your application server must support SHA-2 (256-bit). We do not support SHA-1. Also, plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Access rights When using an agent from Plugin Central, deploy the agent giving the fewest possible permissions in order for the plugin agent to function successfully. Unless the plugin publisher gives specific instructions, you should run the plugin agent as a non-privileged user; do not use su or sudo privileges. This applies to both installing and using the agent. If the plugin agent needs credentials for the component (instance) that it is monitoring, create a custom set of credentials just for the monitoring agent to use. These should be separate from any other production credentials. The custom credentials should grant the fewest possible permissions while still allowing the agent to gather the data it needs. For example, for most plugin agents, you should only need to grant read-only access to your components or instances so the plugin agent cannot modify your system in any way. Also, with many agents, you should only need to grant access to read performance and administration data, not necessarily end customer or other sensitive data. For more information, see Plugin security. License key As part of any plugin installation process, you need your New Relic license key. When you are logged into the Plugins UI, the plugin's installation page in Plugin Central also shows your license key so you can easily copy it to your clipboard. If plugins have been published by SaaS providers, they must have access to the New Relic license key for each individual account. They can capture this information when provisioning new customers via the New Relic Partner API, or they can provide a mechanism for customers to share their existing New Relic license key. Typical plugin installation procedures Installation requirements depend on the type of plugin. For example, a Java plugin agent has different requirements than a Ruby plugin agent. Before you use a plugin, review the documentation that the plugin's publisher provides about the agent's installation requirements. To install any plugin from Plugin Central: Go to one.newrelic.com > More > Plugins. From the Plugin Central directory, select the plugin's title or its Get started button. From the plugin's details page, select the Download or Continue button. Follow the plugin's specific instructions to get your plugin installed and running. After you start running a plugin, it collects and sends data to New Relic, usually within five minutes. The plugin name will automatically appear in the Plugins UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible plugin The New Relic Platform Installer (NPI) is a command line utility that helps you easily download, configure, and manage a plugin by installing it with a single command. After you install the NPI tool, you can use it to install any plugins that are compatible with it. Install the plugin Plugins that are compatible with the New Relic Platform Installer include an NPI compatible label. If you have not already installed the NPI tool: Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, click the link that says * Requires New Relic Platform Installer (NPI) - Get it here. From the dropdown that opens, select your operating system. Copy the command that appears, then run it in your terminal to install the NPI tool. Unix-based systems: If you need to set a default user, in your terminal, run: ./npi set user <USER NAME> Copy Once you have installed the NPI tool, you can install any NPI compatible plugin. Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, follow the procedures to copy the specific plugin's installation command. In your terminal, change to the directory ~/newrelic-npi, then paste and run the install command. Manage plugins with the NPI tool To view information that helps you manage NPI-compatible plugins: For usage and commands, help and version flags, and setup examples, run the command --help from the directory ~/newrelic-npi. For a list of plugins that are NPI-compatible, run the command ./npi available. If you need to include proxy settings in your configuration (for both the NPI tool and the plugin's newrelic.json file), use these commands: ./npi config set proxy_host <HOST> ./npi config set proxy_port <PORT> ./npi config set proxy_username <USER NAME> ./npi config set proxy_password <PASSWORD> Copy To view the full path for a plugin, run a where command. This is useful for viewing log files or locating a plugin on your filesystem so you can manually configure it. Troubleshoot NPI-compatible plugins In addition to the troubleshooting procedures provided by the plugin publisher, follow these troubleshooting guidelines when installing NPI-compatible plugins. Duplicate plugins Problem: If you install a plugin and then install the same plugin again through the NPI tool, you will have two versions of the plugin installed. Solution: Delete the older version of the plugin, and then install the NPI-compatible version using the NPI tool. Procedures to delete plugins typically appear in the README file or in other documentation that the plugin publisher provides. Error message ./npi: line 1: bin/node: No such file or directory Problem: The architecture script that you selected when you installed the NPI tool does not match your operating system (for example, x86 instead of x64). Solution: Install the NPI tool using the correct script for your operating system. Error message -bash: ./npi: No such file or directory Problem: You cannot run NPI commands. Solution: You can only access the NPI tool from the location where it was installed. To solve this problem, navigate to the directory ~/newrelic-npi, and run the command again. Insufficient privileges to run background processes Problem: If you try to set a plugin to run as a background process, you might see a message that you have insufficient privileges. Solution: The plugin creates an /etc/init.d script on Linux and a Windows service on Windows, both of which require escalated privileges to run. To solve this problem: Linux: Run the command with sudo in front of it. Windows: Run the command as an administrator. Install with Chef or Puppet In addition to standard installation procedures, you can install plugins with Chef and Puppet configuration management tools. These tools automate plugin installation and make it easier to manage plugins with the rest of your server software. Chef cookbooks Plugins in Plugin Central may come bundled with a Chef script, or you can write your own. If a Chef script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Chef, add the Chef cookbook for New Relic Plugins: Procedures: See Chef's cookbook documentation. New Relic Plugins cookbook: See Chef's community site for newrelic_plugins. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Chef. Then, to install a plugin using Chef: Configure Chef with the plugin details. Run Chef to install the plugin. Chef cookbooks and recipes define roles for specific server configurations. For example, a web server can have the role web_server which includes all of the software and configuration needed for a web server. Here is an example of creating a Chef role for a server running the Wikipedia Java example plugin: name \"newrelic_wikipedia_example_java_plugin\" description \"Server running the New Relic Plugins Wikipedia Example Java Plugin\" run_list( \"recipe[newrelic_plugins::wikipedia_example_java]\" ) default_attributes( \"newrelic\" => { \"license_key\" => \"NEW_RELIC_LICENSE_KEY\", \"wikipedia_example_java\" => { \"install_path\" => \"/path/to/plugin\", \"user\" => \"newrelic\" } } ) Copy Puppet modules Plugins in Plugin Central may come bundled with a Puppet script, or you can write your own. If a Puppet script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Puppet, add New Relic's Puppet module for plugins: Procedures: See Puppet's module documentation. New Relic plugin modules: See the Puppet Forge community site. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Puppet. Then, to install a plugin using Puppet: Configure Puppet with the plugin details. Run Puppet to install the plugin. Puppet modules contain manifest files that are a collection of classes for configuring a server. For example, a web server can be assigned several classes for the necessary software for a web server. Here is an example of using a Puppet class for a server running the Wikipedia Java example plugin: class { 'newrelic_plugins::wikipedia_example_java': license_key => 'NEW_RELIC_LICENSE_KEY', install_path => '/path/to/plugin', user => 'newrelic' } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.09947,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install from <em>Plugin</em> Central",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " to get your <em>plugin</em> installed and running. After you start running a <em>plugin</em>, it collects and sends data to <em>New</em> <em>Relic</em>, usually within five minutes. The <em>plugin</em> name will automatically appear in the <em>Plugins</em> UI, where you can select and <em>view</em> its summary metrics and <em>dashboards</em>. Install an NPI-compatible"
      },
      "id": "60445cdd196a6788d9960f28"
    }
  ],
  "/docs/plugins/plugins-new-relic/get-started/get-plugin-help": [
    {
      "sections": [
        "Plugin security",
        "Important",
        "Limited access to legacy plugins",
        "Open community",
        "Third-party content",
        "Source code",
        "Access to license keys",
        "Access rights",
        "Plugin storage"
      ],
      "title": "Plugin security",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "8476f9a0e63a7f58388b4a6e7fb8b089843033e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/plugin-security/",
      "published_at": "2021-06-09T19:11:04Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Open community New Relic's Plugins tool been designed to be open and extensible, so that any New Relic user, developer, technology vendor, or partner may publish publicly accessible plugins within Plugin Central. Anyone who has a New Relic account can install and use these plugins through their New Relic user interface. Exception: Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Having an open community where users both create and consume plugins can raise questions surrounding security. This document intends to address any security considerations for using these plugins. For more information about New Relic's security measures, see our security and data privacy documentation, or visit the New Relic security website. Third-party content For some plugins, New Relic, Inc. is the publisher, and will be clearly identified as the publisher. However, as an open resource, many plugins are created by our partners and third-party developers. Every plugin in the Plugin Central directory clearly identifies whether it was published by a New Relic developer or by a third party. We require plugin publishers to provide an About link to their website, documentation about what the plugin is for and how to use it, and a link to obtain support when using the plugin. We also require plugin publishers to review and accept the Developer Terms of Service Agreement before they can make their plugin publicly accessible. You can review all information provided by the publisher before installing any plugin. Only those plugins that identify New Relic, Inc. as the publisher fall under New Relic's posted privacy policy. For more information, see the New Relic security website. For other plugins, refer to the publisher's security and compliance statements. Source code If you have any concerns about plugins developed with the SDKs for plugins, you can review the source code and verify that the plugin agents behave as expected. The plugin agent's code is light, and it can be reviewed in minutes. Access to license keys Always keep your New Relic license key private. Typically access to your license key is needed only to record metric data or deployments for your applications, hosts, or plugins that are monitored by New Relic, not to introduce new data or code. No other access is allowed. Access rights When developing a plugin agent, authors and publishers need to consider the environment in which they will be run. You should do everything possible to reduce the level of permissions your plugin users need to grant to the agent in order for it to run correctly. In particular: Unless it is absolutely necessary, do not require su or sudo permissions in order to install your agent or support software on your users' computers. In this situation, the requirements should be limited in scope and well-documented. For additional information about access rights for plugin users, see the documentation about installing a plugin. When running your agent on the users' computers, do not require su or sudo permissions. The components (instances) your plugin agent is monitoring should only need to grant read-only permissions in order for your agent to perform its actions. As much as possible, the components (instances) your plugin agent is monitoring should be able to reduce the levels of information and access needed. When documenting your plugin, describe what level of permissions your plugin agent requires from the components (instances) it is monitoring and why this is necessary. Following these steps will make it easier for your plugin users to install your agent and increase their confidence that your agent cannot harm their components or instances being monitored. This will also reduce the likelihood of user problems if your agent has any serious bugs or other defects. Plugin storage Plugins only need access to their monitored systems and New Relic simply to report metrics. You may want to consider running plugin agents in sequestered systems with limited network access that allow no more than the minimum required network access. Also, data retention for plugins follows New Relic's standard policies. If you have any concerns about deploying any plugin from Plugin Central, follow your organization's guidelines. If for any reason you do not trust the source of an existing plugin, try creating your own version.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.12419,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> security",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": ") as of June 16, 2021. For more information, see our Explorers Hub post. Open community <em>New</em> <em>Relic</em>&#x27;s <em>Plugins</em> tool been designed to be open and extensible, so that any <em>New</em> <em>Relic</em> user, developer, technology vendor, or partner may publish publicly accessible <em>plugins</em> within <em>Plugin</em> Central. Anyone who has"
      },
      "id": "603ebeb9e7b9d25a642a07d4"
    },
    {
      "sections": [
        "Introduction to Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Developers and SaaS providers",
        "Plugin Central directory",
        "View plugins in Plugin Central",
        "Get started with plugins",
        "Ratings",
        "Reviews",
        "Plugin feedback policy"
      ],
      "title": "Introduction to Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "aa864c660f02e96be1c9cec897300ed96e5e33cb",
      "image": "https://docs.newrelic.com/static/916b76819340fbeb3becda03908ca2d2/c1b63/plugins-landing-page-prototype071720.png",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/introduction-plugin-central/",
      "published_at": "2021-06-09T19:11:06Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Developers and SaaS providers Plugin Central is where partners, third-party vendors, and users could publish plugin agents that collect selected data. This is also where you could install and view the plugin data on your Plugins dashboards as a set of summary metrics, charts, and tables. In most cases, the plugin's agent runs on the users' app server. SaaS or PaaS providers can also create plugin agents that run on their system and report metrics for customers who use New Relic to monitor their applications. For more information, see the specific plugin agent SDK documentation. Plugin Central directory Important Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. The plugin agent collects, sends, and stores the metric data. Plugin Central provides a searchable directory for plugins that developers publish and make publicly available to users. From Plugin Central, you can select and download whatever plugins you want to use. After you install or configure a plugin, you can view the plugin's dashboard data securely from the plugins user interface in New Relic One. View plugins in Plugin Central To view information about available (published) plugins: Go to one.newrelic.com > More > Plugins. By default, available plugins appear in alphabetical order. From the Plugin Central directory in New Relic One, select any published plugin to view a description and install it. Depending on the selected plugin, installation and configuration instructions will vary. Refer to your plugin's documentation for specific details. After you install or configure a plugin, it automatically appears on your Plugins menu in New Relic One, where you can select and view it directly. You may need to wait a few minutes for data to appear. Get started with plugins Here are some tips for making the most of Plugin Central. Ratings Plugins listed in New Relic's Plugin Central include a 5-star rating system, ranging from 1 (lowest) to 5 (highest). This helps you make more informed choices when choosing among similar plugins. This also provides a way for you to share what you think of a plugin. You can rate as many plugins as you want. If you have not voted for a plugin, its current star rating (gold or gray) does not include an outline. You can have only one vote for a specific plugin, and you cannot delete your vote. However, you can change your rating level anytime. After you select the star level (1 to 5) to cast your vote, the stars change to gold with an outline at the rating level you selected. Reviews Plugin Central includes a simple review system to share what you think of a plugin and to provide tips for others about installation and usage. Existing reviews appear when you select an individual plugin's title or Get started link. You can write as many reviews for as many plugins as you want, following the feedback policy. You can also edit or delete your own reviews. When you write a review for a plugin, if you have not already rated the plugin, you must provide a rating. Subsequent reviews will use the rating you provided. You can change your rating at any time. Plugin administrators also reserve the right to delete reviews if necessary. For more information, see Plugin feedback policy. Plugin feedback policy Here are some types of reviews we welcome: Your experience using the plugin Suggestions for improvement Your thoughts or opinions about the plugin, even if you disagree with us or point out mistakes Constructive criticism Your review must not contain personal attacks, name calling, libel, defamation, hate speech, etc. And under no circumstances should you post anything that could be taken as threatening, harassing, bullying, obscene, pornographic, sexist, or racist. We reserve the right to moderate reviews to make sure the tone is civil and fair. We will delete a review or rating in these situations: Spam, such as off-topic or nonsense reviews Inappropriate reviews including profanity and links to offensive content Attacks, including personal attacks against the plugin author or other reviewers, as well as attacks against New Relic or other companies. This does not mean you can't disagree with us or with each other, just be polite about it. False reviews that contain misleading statements or claims Other; for example, reviews or ratings that appear to be gaming the system",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.12419,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Plugin</em> Central",
        "sections": "<em>Get</em> <em>started</em> with <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": ". You may need to wait a few minutes for data to appear. <em>Get</em> <em>started</em> with <em>plugins</em> Here are some tips for making the most of <em>Plugin</em> Central. Ratings <em>Plugins</em> listed in <em>New</em> <em>Relic</em>&#x27;s <em>Plugin</em> Central include a 5-star rating system, ranging from 1 (lowest) to 5 (highest). This helps you make more informed"
      },
      "id": "603e81b428ccbc63bdeba79e"
    },
    {
      "sections": [
        "Install from Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Requirements",
        "Access rights",
        "License key",
        "Typical plugin installation procedures",
        "Install an NPI-compatible plugin",
        "Install the plugin",
        "Manage plugins with the NPI tool",
        "Troubleshoot NPI-compatible plugins",
        "Duplicate plugins",
        "Error message ./npi: line 1: bin/node: No such file or directory",
        "Error message -bash: ./npi: No such file or directory",
        "Insufficient privileges to run background processes",
        "Install with Chef or Puppet",
        "Chef cookbooks",
        "Puppet modules"
      ],
      "title": "Install from Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "a19bd4cb7582a8653cd83b18e431b23cb4270876",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/install-plugin-central/",
      "published_at": "2021-06-09T19:12:15Z",
      "updated_at": "2021-03-13T01:16:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Requirements Each plugin in Plugin Central includes its own procedures for how to install, use, troubleshoot, and uninstall it. In order to use a plugin, first verify that your environment meets the plugin's documented requirements. Then follow the plugin's procedures to install the plugin agent on one or more hosts in your monitored environment, or to configure a SaaS plugin as directed by your SaaS provider. As a standard security measure for data collection, your application server must support SHA-2 (256-bit). We do not support SHA-1. Also, plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Access rights When using an agent from Plugin Central, deploy the agent giving the fewest possible permissions in order for the plugin agent to function successfully. Unless the plugin publisher gives specific instructions, you should run the plugin agent as a non-privileged user; do not use su or sudo privileges. This applies to both installing and using the agent. If the plugin agent needs credentials for the component (instance) that it is monitoring, create a custom set of credentials just for the monitoring agent to use. These should be separate from any other production credentials. The custom credentials should grant the fewest possible permissions while still allowing the agent to gather the data it needs. For example, for most plugin agents, you should only need to grant read-only access to your components or instances so the plugin agent cannot modify your system in any way. Also, with many agents, you should only need to grant access to read performance and administration data, not necessarily end customer or other sensitive data. For more information, see Plugin security. License key As part of any plugin installation process, you need your New Relic license key. When you are logged into the Plugins UI, the plugin's installation page in Plugin Central also shows your license key so you can easily copy it to your clipboard. If plugins have been published by SaaS providers, they must have access to the New Relic license key for each individual account. They can capture this information when provisioning new customers via the New Relic Partner API, or they can provide a mechanism for customers to share their existing New Relic license key. Typical plugin installation procedures Installation requirements depend on the type of plugin. For example, a Java plugin agent has different requirements than a Ruby plugin agent. Before you use a plugin, review the documentation that the plugin's publisher provides about the agent's installation requirements. To install any plugin from Plugin Central: Go to one.newrelic.com > More > Plugins. From the Plugin Central directory, select the plugin's title or its Get started button. From the plugin's details page, select the Download or Continue button. Follow the plugin's specific instructions to get your plugin installed and running. After you start running a plugin, it collects and sends data to New Relic, usually within five minutes. The plugin name will automatically appear in the Plugins UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible plugin The New Relic Platform Installer (NPI) is a command line utility that helps you easily download, configure, and manage a plugin by installing it with a single command. After you install the NPI tool, you can use it to install any plugins that are compatible with it. Install the plugin Plugins that are compatible with the New Relic Platform Installer include an NPI compatible label. If you have not already installed the NPI tool: Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, click the link that says * Requires New Relic Platform Installer (NPI) - Get it here. From the dropdown that opens, select your operating system. Copy the command that appears, then run it in your terminal to install the NPI tool. Unix-based systems: If you need to set a default user, in your terminal, run: ./npi set user <USER NAME> Copy Once you have installed the NPI tool, you can install any NPI compatible plugin. Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, follow the procedures to copy the specific plugin's installation command. In your terminal, change to the directory ~/newrelic-npi, then paste and run the install command. Manage plugins with the NPI tool To view information that helps you manage NPI-compatible plugins: For usage and commands, help and version flags, and setup examples, run the command --help from the directory ~/newrelic-npi. For a list of plugins that are NPI-compatible, run the command ./npi available. If you need to include proxy settings in your configuration (for both the NPI tool and the plugin's newrelic.json file), use these commands: ./npi config set proxy_host <HOST> ./npi config set proxy_port <PORT> ./npi config set proxy_username <USER NAME> ./npi config set proxy_password <PASSWORD> Copy To view the full path for a plugin, run a where command. This is useful for viewing log files or locating a plugin on your filesystem so you can manually configure it. Troubleshoot NPI-compatible plugins In addition to the troubleshooting procedures provided by the plugin publisher, follow these troubleshooting guidelines when installing NPI-compatible plugins. Duplicate plugins Problem: If you install a plugin and then install the same plugin again through the NPI tool, you will have two versions of the plugin installed. Solution: Delete the older version of the plugin, and then install the NPI-compatible version using the NPI tool. Procedures to delete plugins typically appear in the README file or in other documentation that the plugin publisher provides. Error message ./npi: line 1: bin/node: No such file or directory Problem: The architecture script that you selected when you installed the NPI tool does not match your operating system (for example, x86 instead of x64). Solution: Install the NPI tool using the correct script for your operating system. Error message -bash: ./npi: No such file or directory Problem: You cannot run NPI commands. Solution: You can only access the NPI tool from the location where it was installed. To solve this problem, navigate to the directory ~/newrelic-npi, and run the command again. Insufficient privileges to run background processes Problem: If you try to set a plugin to run as a background process, you might see a message that you have insufficient privileges. Solution: The plugin creates an /etc/init.d script on Linux and a Windows service on Windows, both of which require escalated privileges to run. To solve this problem: Linux: Run the command with sudo in front of it. Windows: Run the command as an administrator. Install with Chef or Puppet In addition to standard installation procedures, you can install plugins with Chef and Puppet configuration management tools. These tools automate plugin installation and make it easier to manage plugins with the rest of your server software. Chef cookbooks Plugins in Plugin Central may come bundled with a Chef script, or you can write your own. If a Chef script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Chef, add the Chef cookbook for New Relic Plugins: Procedures: See Chef's cookbook documentation. New Relic Plugins cookbook: See Chef's community site for newrelic_plugins. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Chef. Then, to install a plugin using Chef: Configure Chef with the plugin details. Run Chef to install the plugin. Chef cookbooks and recipes define roles for specific server configurations. For example, a web server can have the role web_server which includes all of the software and configuration needed for a web server. Here is an example of creating a Chef role for a server running the Wikipedia Java example plugin: name \"newrelic_wikipedia_example_java_plugin\" description \"Server running the New Relic Plugins Wikipedia Example Java Plugin\" run_list( \"recipe[newrelic_plugins::wikipedia_example_java]\" ) default_attributes( \"newrelic\" => { \"license_key\" => \"NEW_RELIC_LICENSE_KEY\", \"wikipedia_example_java\" => { \"install_path\" => \"/path/to/plugin\", \"user\" => \"newrelic\" } } ) Copy Puppet modules Plugins in Plugin Central may come bundled with a Puppet script, or you can write your own. If a Puppet script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Puppet, add New Relic's Puppet module for plugins: Procedures: See Puppet's module documentation. New Relic plugin modules: See the Puppet Forge community site. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Puppet. Then, to install a plugin using Puppet: Configure Puppet with the plugin details. Run Puppet to install the plugin. Puppet modules contain manifest files that are a collection of classes for configuring a server. For example, a web server can be assigned several classes for the necessary software for a web server. Here is an example of using a Puppet class for a server running the Wikipedia Java example plugin: class { 'newrelic_plugins::wikipedia_example_java': license_key => 'NEW_RELIC_LICENSE_KEY', install_path => '/path/to/plugin', user => 'newrelic' } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.34908,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install from <em>Plugin</em> Central",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " to <em>get</em> your <em>plugin</em> installed and running. After you <em>start</em> running a <em>plugin</em>, it collects and sends data to <em>New</em> <em>Relic</em>, usually within five minutes. The <em>plugin</em> name will automatically appear in the <em>Plugins</em> UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible"
      },
      "id": "60445cdd196a6788d9960f28"
    }
  ],
  "/docs/plugins/plugins-new-relic/get-started/introduction-plugin-central": [
    {
      "sections": [
        "Plugin security",
        "Important",
        "Limited access to legacy plugins",
        "Open community",
        "Third-party content",
        "Source code",
        "Access to license keys",
        "Access rights",
        "Plugin storage"
      ],
      "title": "Plugin security",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "8476f9a0e63a7f58388b4a6e7fb8b089843033e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/plugin-security/",
      "published_at": "2021-06-09T19:11:04Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Open community New Relic's Plugins tool been designed to be open and extensible, so that any New Relic user, developer, technology vendor, or partner may publish publicly accessible plugins within Plugin Central. Anyone who has a New Relic account can install and use these plugins through their New Relic user interface. Exception: Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Having an open community where users both create and consume plugins can raise questions surrounding security. This document intends to address any security considerations for using these plugins. For more information about New Relic's security measures, see our security and data privacy documentation, or visit the New Relic security website. Third-party content For some plugins, New Relic, Inc. is the publisher, and will be clearly identified as the publisher. However, as an open resource, many plugins are created by our partners and third-party developers. Every plugin in the Plugin Central directory clearly identifies whether it was published by a New Relic developer or by a third party. We require plugin publishers to provide an About link to their website, documentation about what the plugin is for and how to use it, and a link to obtain support when using the plugin. We also require plugin publishers to review and accept the Developer Terms of Service Agreement before they can make their plugin publicly accessible. You can review all information provided by the publisher before installing any plugin. Only those plugins that identify New Relic, Inc. as the publisher fall under New Relic's posted privacy policy. For more information, see the New Relic security website. For other plugins, refer to the publisher's security and compliance statements. Source code If you have any concerns about plugins developed with the SDKs for plugins, you can review the source code and verify that the plugin agents behave as expected. The plugin agent's code is light, and it can be reviewed in minutes. Access to license keys Always keep your New Relic license key private. Typically access to your license key is needed only to record metric data or deployments for your applications, hosts, or plugins that are monitored by New Relic, not to introduce new data or code. No other access is allowed. Access rights When developing a plugin agent, authors and publishers need to consider the environment in which they will be run. You should do everything possible to reduce the level of permissions your plugin users need to grant to the agent in order for it to run correctly. In particular: Unless it is absolutely necessary, do not require su or sudo permissions in order to install your agent or support software on your users' computers. In this situation, the requirements should be limited in scope and well-documented. For additional information about access rights for plugin users, see the documentation about installing a plugin. When running your agent on the users' computers, do not require su or sudo permissions. The components (instances) your plugin agent is monitoring should only need to grant read-only permissions in order for your agent to perform its actions. As much as possible, the components (instances) your plugin agent is monitoring should be able to reduce the levels of information and access needed. When documenting your plugin, describe what level of permissions your plugin agent requires from the components (instances) it is monitoring and why this is necessary. Following these steps will make it easier for your plugin users to install your agent and increase their confidence that your agent cannot harm their components or instances being monitored. This will also reduce the likelihood of user problems if your agent has any serious bugs or other defects. Plugin storage Plugins only need access to their monitored systems and New Relic simply to report metrics. You may want to consider running plugin agents in sequestered systems with limited network access that allow no more than the minimum required network access. Also, data retention for plugins follows New Relic's standard policies. If you have any concerns about deploying any plugin from Plugin Central, follow your organization's guidelines. If for any reason you do not trust the source of an existing plugin, try creating your own version.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.12419,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> security",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": ") as of June 16, 2021. For more information, see our Explorers Hub post. Open community <em>New</em> <em>Relic</em>&#x27;s <em>Plugins</em> tool been designed to be open and extensible, so that any <em>New</em> <em>Relic</em> user, developer, technology vendor, or partner may publish publicly accessible <em>plugins</em> within <em>Plugin</em> Central. Anyone who has"
      },
      "id": "603ebeb9e7b9d25a642a07d4"
    },
    {
      "sections": [
        "Get plugin help",
        "Important",
        "Limited access to legacy plugins",
        "Plugin help resources"
      ],
      "title": "Get plugin help",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "34d38b612d908d489b251716e2856b31644e03f5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/get-plugin-help/",
      "published_at": "2021-06-09T19:09:55Z",
      "updated_at": "2021-03-13T03:10:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin help resources Each plugin in New Relic's Plugin Central typically includes troubleshooting information. When you select the plugin's Download or Continue button, the plugin should include a README file or refer to other documentation. If you experience problems that the plugin's documentation does not address, contact the plugin publisher's support resources identified in the plugin's Get support link. Be prepared to provide information such as: Are you able to connect to the plugins UI or able to connect to the monitored server? Do you have a New Relic license key or a message about an invalid license key? If you received a specific error, what was its error number or message? Can you provide a screenshot of the plugin's webpage where you are experiencing problems? Can you provide a log file? Can you provide your configuration file? Can you restart the plugin? Plugins in Plugin Central are not supported with accounts that host data in the EU region data center.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.65358,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Get</em> <em>plugin</em> help",
        "sections": "<em>Get</em> <em>plugin</em> help",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with <em>New</em> <em>Relic</em>, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools"
      },
      "id": "60445cdde7b9d2a2ef579a13"
    },
    {
      "sections": [
        "Install from Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Requirements",
        "Access rights",
        "License key",
        "Typical plugin installation procedures",
        "Install an NPI-compatible plugin",
        "Install the plugin",
        "Manage plugins with the NPI tool",
        "Troubleshoot NPI-compatible plugins",
        "Duplicate plugins",
        "Error message ./npi: line 1: bin/node: No such file or directory",
        "Error message -bash: ./npi: No such file or directory",
        "Insufficient privileges to run background processes",
        "Install with Chef or Puppet",
        "Chef cookbooks",
        "Puppet modules"
      ],
      "title": "Install from Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "a19bd4cb7582a8653cd83b18e431b23cb4270876",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/install-plugin-central/",
      "published_at": "2021-06-09T19:12:15Z",
      "updated_at": "2021-03-13T01:16:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Requirements Each plugin in Plugin Central includes its own procedures for how to install, use, troubleshoot, and uninstall it. In order to use a plugin, first verify that your environment meets the plugin's documented requirements. Then follow the plugin's procedures to install the plugin agent on one or more hosts in your monitored environment, or to configure a SaaS plugin as directed by your SaaS provider. As a standard security measure for data collection, your application server must support SHA-2 (256-bit). We do not support SHA-1. Also, plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Access rights When using an agent from Plugin Central, deploy the agent giving the fewest possible permissions in order for the plugin agent to function successfully. Unless the plugin publisher gives specific instructions, you should run the plugin agent as a non-privileged user; do not use su or sudo privileges. This applies to both installing and using the agent. If the plugin agent needs credentials for the component (instance) that it is monitoring, create a custom set of credentials just for the monitoring agent to use. These should be separate from any other production credentials. The custom credentials should grant the fewest possible permissions while still allowing the agent to gather the data it needs. For example, for most plugin agents, you should only need to grant read-only access to your components or instances so the plugin agent cannot modify your system in any way. Also, with many agents, you should only need to grant access to read performance and administration data, not necessarily end customer or other sensitive data. For more information, see Plugin security. License key As part of any plugin installation process, you need your New Relic license key. When you are logged into the Plugins UI, the plugin's installation page in Plugin Central also shows your license key so you can easily copy it to your clipboard. If plugins have been published by SaaS providers, they must have access to the New Relic license key for each individual account. They can capture this information when provisioning new customers via the New Relic Partner API, or they can provide a mechanism for customers to share their existing New Relic license key. Typical plugin installation procedures Installation requirements depend on the type of plugin. For example, a Java plugin agent has different requirements than a Ruby plugin agent. Before you use a plugin, review the documentation that the plugin's publisher provides about the agent's installation requirements. To install any plugin from Plugin Central: Go to one.newrelic.com > More > Plugins. From the Plugin Central directory, select the plugin's title or its Get started button. From the plugin's details page, select the Download or Continue button. Follow the plugin's specific instructions to get your plugin installed and running. After you start running a plugin, it collects and sends data to New Relic, usually within five minutes. The plugin name will automatically appear in the Plugins UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible plugin The New Relic Platform Installer (NPI) is a command line utility that helps you easily download, configure, and manage a plugin by installing it with a single command. After you install the NPI tool, you can use it to install any plugins that are compatible with it. Install the plugin Plugins that are compatible with the New Relic Platform Installer include an NPI compatible label. If you have not already installed the NPI tool: Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, click the link that says * Requires New Relic Platform Installer (NPI) - Get it here. From the dropdown that opens, select your operating system. Copy the command that appears, then run it in your terminal to install the NPI tool. Unix-based systems: If you need to set a default user, in your terminal, run: ./npi set user <USER NAME> Copy Once you have installed the NPI tool, you can install any NPI compatible plugin. Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, follow the procedures to copy the specific plugin's installation command. In your terminal, change to the directory ~/newrelic-npi, then paste and run the install command. Manage plugins with the NPI tool To view information that helps you manage NPI-compatible plugins: For usage and commands, help and version flags, and setup examples, run the command --help from the directory ~/newrelic-npi. For a list of plugins that are NPI-compatible, run the command ./npi available. If you need to include proxy settings in your configuration (for both the NPI tool and the plugin's newrelic.json file), use these commands: ./npi config set proxy_host <HOST> ./npi config set proxy_port <PORT> ./npi config set proxy_username <USER NAME> ./npi config set proxy_password <PASSWORD> Copy To view the full path for a plugin, run a where command. This is useful for viewing log files or locating a plugin on your filesystem so you can manually configure it. Troubleshoot NPI-compatible plugins In addition to the troubleshooting procedures provided by the plugin publisher, follow these troubleshooting guidelines when installing NPI-compatible plugins. Duplicate plugins Problem: If you install a plugin and then install the same plugin again through the NPI tool, you will have two versions of the plugin installed. Solution: Delete the older version of the plugin, and then install the NPI-compatible version using the NPI tool. Procedures to delete plugins typically appear in the README file or in other documentation that the plugin publisher provides. Error message ./npi: line 1: bin/node: No such file or directory Problem: The architecture script that you selected when you installed the NPI tool does not match your operating system (for example, x86 instead of x64). Solution: Install the NPI tool using the correct script for your operating system. Error message -bash: ./npi: No such file or directory Problem: You cannot run NPI commands. Solution: You can only access the NPI tool from the location where it was installed. To solve this problem, navigate to the directory ~/newrelic-npi, and run the command again. Insufficient privileges to run background processes Problem: If you try to set a plugin to run as a background process, you might see a message that you have insufficient privileges. Solution: The plugin creates an /etc/init.d script on Linux and a Windows service on Windows, both of which require escalated privileges to run. To solve this problem: Linux: Run the command with sudo in front of it. Windows: Run the command as an administrator. Install with Chef or Puppet In addition to standard installation procedures, you can install plugins with Chef and Puppet configuration management tools. These tools automate plugin installation and make it easier to manage plugins with the rest of your server software. Chef cookbooks Plugins in Plugin Central may come bundled with a Chef script, or you can write your own. If a Chef script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Chef, add the Chef cookbook for New Relic Plugins: Procedures: See Chef's cookbook documentation. New Relic Plugins cookbook: See Chef's community site for newrelic_plugins. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Chef. Then, to install a plugin using Chef: Configure Chef with the plugin details. Run Chef to install the plugin. Chef cookbooks and recipes define roles for specific server configurations. For example, a web server can have the role web_server which includes all of the software and configuration needed for a web server. Here is an example of creating a Chef role for a server running the Wikipedia Java example plugin: name \"newrelic_wikipedia_example_java_plugin\" description \"Server running the New Relic Plugins Wikipedia Example Java Plugin\" run_list( \"recipe[newrelic_plugins::wikipedia_example_java]\" ) default_attributes( \"newrelic\" => { \"license_key\" => \"NEW_RELIC_LICENSE_KEY\", \"wikipedia_example_java\" => { \"install_path\" => \"/path/to/plugin\", \"user\" => \"newrelic\" } } ) Copy Puppet modules Plugins in Plugin Central may come bundled with a Puppet script, or you can write your own. If a Puppet script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Puppet, add New Relic's Puppet module for plugins: Procedures: See Puppet's module documentation. New Relic plugin modules: See the Puppet Forge community site. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Puppet. Then, to install a plugin using Puppet: Configure Puppet with the plugin details. Run Puppet to install the plugin. Puppet modules contain manifest files that are a collection of classes for configuring a server. For example, a web server can be assigned several classes for the necessary software for a web server. Here is an example of using a Puppet class for a server running the Wikipedia Java example plugin: class { 'newrelic_plugins::wikipedia_example_java': license_key => 'NEW_RELIC_LICENSE_KEY', install_path => '/path/to/plugin', user => 'newrelic' } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.34908,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install from <em>Plugin</em> Central",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " to <em>get</em> your <em>plugin</em> installed and running. After you <em>start</em> running a <em>plugin</em>, it collects and sends data to <em>New</em> <em>Relic</em>, usually within five minutes. The <em>plugin</em> name will automatically appear in the <em>Plugins</em> UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible"
      },
      "id": "60445cdd196a6788d9960f28"
    }
  ],
  "/docs/plugins/plugins-new-relic/get-started/plugin-security": [
    {
      "sections": [
        "Introduction to Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Developers and SaaS providers",
        "Plugin Central directory",
        "View plugins in Plugin Central",
        "Get started with plugins",
        "Ratings",
        "Reviews",
        "Plugin feedback policy"
      ],
      "title": "Introduction to Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "aa864c660f02e96be1c9cec897300ed96e5e33cb",
      "image": "https://docs.newrelic.com/static/916b76819340fbeb3becda03908ca2d2/c1b63/plugins-landing-page-prototype071720.png",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/introduction-plugin-central/",
      "published_at": "2021-06-09T19:11:06Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Developers and SaaS providers Plugin Central is where partners, third-party vendors, and users could publish plugin agents that collect selected data. This is also where you could install and view the plugin data on your Plugins dashboards as a set of summary metrics, charts, and tables. In most cases, the plugin's agent runs on the users' app server. SaaS or PaaS providers can also create plugin agents that run on their system and report metrics for customers who use New Relic to monitor their applications. For more information, see the specific plugin agent SDK documentation. Plugin Central directory Important Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. The plugin agent collects, sends, and stores the metric data. Plugin Central provides a searchable directory for plugins that developers publish and make publicly available to users. From Plugin Central, you can select and download whatever plugins you want to use. After you install or configure a plugin, you can view the plugin's dashboard data securely from the plugins user interface in New Relic One. View plugins in Plugin Central To view information about available (published) plugins: Go to one.newrelic.com > More > Plugins. By default, available plugins appear in alphabetical order. From the Plugin Central directory in New Relic One, select any published plugin to view a description and install it. Depending on the selected plugin, installation and configuration instructions will vary. Refer to your plugin's documentation for specific details. After you install or configure a plugin, it automatically appears on your Plugins menu in New Relic One, where you can select and view it directly. You may need to wait a few minutes for data to appear. Get started with plugins Here are some tips for making the most of Plugin Central. Ratings Plugins listed in New Relic's Plugin Central include a 5-star rating system, ranging from 1 (lowest) to 5 (highest). This helps you make more informed choices when choosing among similar plugins. This also provides a way for you to share what you think of a plugin. You can rate as many plugins as you want. If you have not voted for a plugin, its current star rating (gold or gray) does not include an outline. You can have only one vote for a specific plugin, and you cannot delete your vote. However, you can change your rating level anytime. After you select the star level (1 to 5) to cast your vote, the stars change to gold with an outline at the rating level you selected. Reviews Plugin Central includes a simple review system to share what you think of a plugin and to provide tips for others about installation and usage. Existing reviews appear when you select an individual plugin's title or Get started link. You can write as many reviews for as many plugins as you want, following the feedback policy. You can also edit or delete your own reviews. When you write a review for a plugin, if you have not already rated the plugin, you must provide a rating. Subsequent reviews will use the rating you provided. You can change your rating at any time. Plugin administrators also reserve the right to delete reviews if necessary. For more information, see Plugin feedback policy. Plugin feedback policy Here are some types of reviews we welcome: Your experience using the plugin Suggestions for improvement Your thoughts or opinions about the plugin, even if you disagree with us or point out mistakes Constructive criticism Your review must not contain personal attacks, name calling, libel, defamation, hate speech, etc. And under no circumstances should you post anything that could be taken as threatening, harassing, bullying, obscene, pornographic, sexist, or racist. We reserve the right to moderate reviews to make sure the tone is civil and fair. We will delete a review or rating in these situations: Spam, such as off-topic or nonsense reviews Inappropriate reviews including profanity and links to offensive content Attacks, including personal attacks against the plugin author or other reviewers, as well as attacks against New Relic or other companies. This does not mean you can't disagree with us or with each other, just be polite about it. False reviews that contain misleading statements or claims Other; for example, reviews or ratings that appear to be gaming the system",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.12419,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Plugin</em> Central",
        "sections": "<em>Get</em> <em>started</em> with <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": ". You may need to wait a few minutes for data to appear. <em>Get</em> <em>started</em> with <em>plugins</em> Here are some tips for making the most of <em>Plugin</em> Central. Ratings <em>Plugins</em> listed in <em>New</em> <em>Relic</em>&#x27;s <em>Plugin</em> Central include a 5-star rating system, ranging from 1 (lowest) to 5 (highest). This helps you make more informed"
      },
      "id": "603e81b428ccbc63bdeba79e"
    },
    {
      "sections": [
        "Get plugin help",
        "Important",
        "Limited access to legacy plugins",
        "Plugin help resources"
      ],
      "title": "Get plugin help",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "34d38b612d908d489b251716e2856b31644e03f5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/get-plugin-help/",
      "published_at": "2021-06-09T19:09:55Z",
      "updated_at": "2021-03-13T03:10:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Plugin help resources Each plugin in New Relic's Plugin Central typically includes troubleshooting information. When you select the plugin's Download or Continue button, the plugin should include a README file or refer to other documentation. If you experience problems that the plugin's documentation does not address, contact the plugin publisher's support resources identified in the plugin's Get support link. Be prepared to provide information such as: Are you able to connect to the plugins UI or able to connect to the monitored server? Do you have a New Relic license key or a message about an invalid license key? If you received a specific error, what was its error number or message? Can you provide a screenshot of the plugin's webpage where you are experiencing problems? Can you provide a log file? Can you provide your configuration file? Can you restart the plugin? Plugins in Plugin Central are not supported with accounts that host data in the EU region data center.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.65358,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Get</em> <em>plugin</em> help",
        "sections": "<em>Get</em> <em>plugin</em> help",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": "Important For an even better experience than <em>plugins</em>, go to: newrelic.com&#x2F;integrations: Integrate the on-host and cloud systems you already use with <em>New</em> <em>Relic</em>, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools"
      },
      "id": "60445cdde7b9d2a2ef579a13"
    },
    {
      "sections": [
        "Install from Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Requirements",
        "Access rights",
        "License key",
        "Typical plugin installation procedures",
        "Install an NPI-compatible plugin",
        "Install the plugin",
        "Manage plugins with the NPI tool",
        "Troubleshoot NPI-compatible plugins",
        "Duplicate plugins",
        "Error message ./npi: line 1: bin/node: No such file or directory",
        "Error message -bash: ./npi: No such file or directory",
        "Insufficient privileges to run background processes",
        "Install with Chef or Puppet",
        "Chef cookbooks",
        "Puppet modules"
      ],
      "title": "Install from Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "a19bd4cb7582a8653cd83b18e431b23cb4270876",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/install-plugin-central/",
      "published_at": "2021-06-09T19:12:15Z",
      "updated_at": "2021-03-13T01:16:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Requirements Each plugin in Plugin Central includes its own procedures for how to install, use, troubleshoot, and uninstall it. In order to use a plugin, first verify that your environment meets the plugin's documented requirements. Then follow the plugin's procedures to install the plugin agent on one or more hosts in your monitored environment, or to configure a SaaS plugin as directed by your SaaS provider. As a standard security measure for data collection, your application server must support SHA-2 (256-bit). We do not support SHA-1. Also, plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Access rights When using an agent from Plugin Central, deploy the agent giving the fewest possible permissions in order for the plugin agent to function successfully. Unless the plugin publisher gives specific instructions, you should run the plugin agent as a non-privileged user; do not use su or sudo privileges. This applies to both installing and using the agent. If the plugin agent needs credentials for the component (instance) that it is monitoring, create a custom set of credentials just for the monitoring agent to use. These should be separate from any other production credentials. The custom credentials should grant the fewest possible permissions while still allowing the agent to gather the data it needs. For example, for most plugin agents, you should only need to grant read-only access to your components or instances so the plugin agent cannot modify your system in any way. Also, with many agents, you should only need to grant access to read performance and administration data, not necessarily end customer or other sensitive data. For more information, see Plugin security. License key As part of any plugin installation process, you need your New Relic license key. When you are logged into the Plugins UI, the plugin's installation page in Plugin Central also shows your license key so you can easily copy it to your clipboard. If plugins have been published by SaaS providers, they must have access to the New Relic license key for each individual account. They can capture this information when provisioning new customers via the New Relic Partner API, or they can provide a mechanism for customers to share their existing New Relic license key. Typical plugin installation procedures Installation requirements depend on the type of plugin. For example, a Java plugin agent has different requirements than a Ruby plugin agent. Before you use a plugin, review the documentation that the plugin's publisher provides about the agent's installation requirements. To install any plugin from Plugin Central: Go to one.newrelic.com > More > Plugins. From the Plugin Central directory, select the plugin's title or its Get started button. From the plugin's details page, select the Download or Continue button. Follow the plugin's specific instructions to get your plugin installed and running. After you start running a plugin, it collects and sends data to New Relic, usually within five minutes. The plugin name will automatically appear in the Plugins UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible plugin The New Relic Platform Installer (NPI) is a command line utility that helps you easily download, configure, and manage a plugin by installing it with a single command. After you install the NPI tool, you can use it to install any plugins that are compatible with it. Install the plugin Plugins that are compatible with the New Relic Platform Installer include an NPI compatible label. If you have not already installed the NPI tool: Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, click the link that says * Requires New Relic Platform Installer (NPI) - Get it here. From the dropdown that opens, select your operating system. Copy the command that appears, then run it in your terminal to install the NPI tool. Unix-based systems: If you need to set a default user, in your terminal, run: ./npi set user <USER NAME> Copy Once you have installed the NPI tool, you can install any NPI compatible plugin. Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, follow the procedures to copy the specific plugin's installation command. In your terminal, change to the directory ~/newrelic-npi, then paste and run the install command. Manage plugins with the NPI tool To view information that helps you manage NPI-compatible plugins: For usage and commands, help and version flags, and setup examples, run the command --help from the directory ~/newrelic-npi. For a list of plugins that are NPI-compatible, run the command ./npi available. If you need to include proxy settings in your configuration (for both the NPI tool and the plugin's newrelic.json file), use these commands: ./npi config set proxy_host <HOST> ./npi config set proxy_port <PORT> ./npi config set proxy_username <USER NAME> ./npi config set proxy_password <PASSWORD> Copy To view the full path for a plugin, run a where command. This is useful for viewing log files or locating a plugin on your filesystem so you can manually configure it. Troubleshoot NPI-compatible plugins In addition to the troubleshooting procedures provided by the plugin publisher, follow these troubleshooting guidelines when installing NPI-compatible plugins. Duplicate plugins Problem: If you install a plugin and then install the same plugin again through the NPI tool, you will have two versions of the plugin installed. Solution: Delete the older version of the plugin, and then install the NPI-compatible version using the NPI tool. Procedures to delete plugins typically appear in the README file or in other documentation that the plugin publisher provides. Error message ./npi: line 1: bin/node: No such file or directory Problem: The architecture script that you selected when you installed the NPI tool does not match your operating system (for example, x86 instead of x64). Solution: Install the NPI tool using the correct script for your operating system. Error message -bash: ./npi: No such file or directory Problem: You cannot run NPI commands. Solution: You can only access the NPI tool from the location where it was installed. To solve this problem, navigate to the directory ~/newrelic-npi, and run the command again. Insufficient privileges to run background processes Problem: If you try to set a plugin to run as a background process, you might see a message that you have insufficient privileges. Solution: The plugin creates an /etc/init.d script on Linux and a Windows service on Windows, both of which require escalated privileges to run. To solve this problem: Linux: Run the command with sudo in front of it. Windows: Run the command as an administrator. Install with Chef or Puppet In addition to standard installation procedures, you can install plugins with Chef and Puppet configuration management tools. These tools automate plugin installation and make it easier to manage plugins with the rest of your server software. Chef cookbooks Plugins in Plugin Central may come bundled with a Chef script, or you can write your own. If a Chef script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Chef, add the Chef cookbook for New Relic Plugins: Procedures: See Chef's cookbook documentation. New Relic Plugins cookbook: See Chef's community site for newrelic_plugins. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Chef. Then, to install a plugin using Chef: Configure Chef with the plugin details. Run Chef to install the plugin. Chef cookbooks and recipes define roles for specific server configurations. For example, a web server can have the role web_server which includes all of the software and configuration needed for a web server. Here is an example of creating a Chef role for a server running the Wikipedia Java example plugin: name \"newrelic_wikipedia_example_java_plugin\" description \"Server running the New Relic Plugins Wikipedia Example Java Plugin\" run_list( \"recipe[newrelic_plugins::wikipedia_example_java]\" ) default_attributes( \"newrelic\" => { \"license_key\" => \"NEW_RELIC_LICENSE_KEY\", \"wikipedia_example_java\" => { \"install_path\" => \"/path/to/plugin\", \"user\" => \"newrelic\" } } ) Copy Puppet modules Plugins in Plugin Central may come bundled with a Puppet script, or you can write your own. If a Puppet script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Puppet, add New Relic's Puppet module for plugins: Procedures: See Puppet's module documentation. New Relic plugin modules: See the Puppet Forge community site. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Puppet. Then, to install a plugin using Puppet: Configure Puppet with the plugin details. Run Puppet to install the plugin. Puppet modules contain manifest files that are a collection of classes for configuring a server. For example, a web server can be assigned several classes for the necessary software for a web server. Here is an example of using a Puppet class for a server running the Wikipedia Java example plugin: class { 'newrelic_plugins::wikipedia_example_java': license_key => 'NEW_RELIC_LICENSE_KEY', install_path => '/path/to/plugin', user => 'newrelic' } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.349075,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install from <em>Plugin</em> Central",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " to <em>get</em> your <em>plugin</em> installed and running. After you <em>start</em> running a <em>plugin</em>, it collects and sends data to <em>New</em> <em>Relic</em>, usually within five minutes. The <em>plugin</em> name will automatically appear in the <em>Plugins</em> UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible"
      },
      "id": "60445cdd196a6788d9960f28"
    }
  ],
  "/docs/plugins/plugins-new-relic/install-plugins/install-plugin-central": [
    {
      "sections": [
        "Use a Plugin Central plugin",
        "Important",
        "Limited access to legacy plugins",
        "View plugin dashboard details",
        "Plugin summary",
        "Plugin dashboards",
        "Plugin alerts",
        "Delete a plugin",
        "Remove plugin components (instances)",
        "Delete the plugin"
      ],
      "title": "Use a Plugin Central plugin",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "feae68c2e9d870f7c02fff5ffb69f2c262a0cd6c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/use-plugin-central-plugin/",
      "published_at": "2021-06-09T19:12:15Z",
      "updated_at": "2021-03-16T11:03:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. View plugin dashboard details Each plugin in Plugin Central includes procedures for how to install, use, troubleshoot, and uninstall it. Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. After you install a plugin, it starts to receive data, usually within five minutes. The plugin automatically appears with a short name and icon on your Plugins menu in New Relic One. You do not need to select it from Plugin Central. The amount and types of information on the plugin's summary page and dashboards depend on the specific plugin. For example, a plugin may have one or more components (instances) and one or more dashboards. To view summary and dashboard details about the plugin: Go to one.newrelic.com > More > Plugins, and select your plugin. From the plugin's summary page, review the list of components or instances, summary metrics, and list of Recent Events. To view dashboard details about any component or instance, select its name. Plugin summary Depending on the plugin, the summary includes: One or more components or instances (what the plugin agent is monitoring, typically a host/port pair) Zero to five summary metrics for the past three minutes (values such as average, total, minimum, maximum, standard deviation, rate, or count) with optional alerts Recent events list, including deployments, notifications, and alerts Other information about alert violations, events, and activity If your plugin has 100 or more components or instances, you can search for a specific component instance. Here is a summary of additional standard features. If you want to... Do this... View version information for a component's or instance's agent Mouse over the component's name. Change the sort order On the title row of the plugin's summary page, select the up or down arrow for a component (instance) or a summary metric's label. Show or hide items on the events and activity list Select an event icon, or select All. View details about an event On the events and activity list, select the link. View page details for a component or instance Select the name or a summary metric for the component (instance). Plugin dashboards Depending on the plugin, it may have one or more dashboards, and each dashboard may present data as a chart or a table. You can use any of New Relic's standard dashboard features to drill down into detailed information. The customized dashboards that show plugin data are part of the plugin. Users cannot add or remove these dashboards. This must be done by the author or publisher as part of a plugin update. Plugin alerts If the plugin publisher set Critical (red) or Caution (yellow) alert conditions for your plugin's components or instances, you can view details direct in the user interface. For example, you can: Select and view alert details. Change the existing thresholds. Set your alert notification options; for example, to receive email notifications for Critical events. Delete a plugin Each plugin in Plugin Central includes procedures for how to uninstall it. When you select the plugin's Download or Continue button, the plugin should include a README file or refer to other documentation resources. Remove plugin components (instances) At a minimum, your plugin must stop reporting data before you start uninstalling it. Make sure the health status for your plugin's components (instances) are gray. Depending on the plugin, there may be other dependencies before disabling or uninstalling it. For example, plugins from SaaS providers may have different requirements. Be sure to review the instructions that the plugin's publisher provides. Then, to remove individual components from your plugin, click the settings icon for each component (instance). Delete the plugin After you remove each component (instance) for the plugin, the plugin icon will automatically disappear from your Plugins menu in the New Relic UI. You do not need to do anything else to delete the plugin. If you are the plugin's publisher and need to delete the plugin from Plugin Central, go to support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.23059,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use a <em>Plugin</em> Central <em>plugin</em>",
        "sections": "Use a <em>Plugin</em> Central <em>plugin</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " center. After you <em>install</em> a <em>plugin</em>, it starts to receive data, usually within five minutes. The <em>plugin</em> automatically appears with a short name and icon on your <em>Plugins</em> menu in <em>New</em> <em>Relic</em> One. You do not need to select it from <em>Plugin</em> Central. The amount and types of information on the <em>plugin</em>"
      },
      "id": "603ebf0928ccbcf8d0eba762"
    },
    {
      "sections": [
        "Plugin security",
        "Important",
        "Limited access to legacy plugins",
        "Open community",
        "Third-party content",
        "Source code",
        "Access to license keys",
        "Access rights",
        "Plugin storage"
      ],
      "title": "Plugin security",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "8476f9a0e63a7f58388b4a6e7fb8b089843033e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/plugin-security/",
      "published_at": "2021-06-09T19:11:04Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Open community New Relic's Plugins tool been designed to be open and extensible, so that any New Relic user, developer, technology vendor, or partner may publish publicly accessible plugins within Plugin Central. Anyone who has a New Relic account can install and use these plugins through their New Relic user interface. Exception: Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Having an open community where users both create and consume plugins can raise questions surrounding security. This document intends to address any security considerations for using these plugins. For more information about New Relic's security measures, see our security and data privacy documentation, or visit the New Relic security website. Third-party content For some plugins, New Relic, Inc. is the publisher, and will be clearly identified as the publisher. However, as an open resource, many plugins are created by our partners and third-party developers. Every plugin in the Plugin Central directory clearly identifies whether it was published by a New Relic developer or by a third party. We require plugin publishers to provide an About link to their website, documentation about what the plugin is for and how to use it, and a link to obtain support when using the plugin. We also require plugin publishers to review and accept the Developer Terms of Service Agreement before they can make their plugin publicly accessible. You can review all information provided by the publisher before installing any plugin. Only those plugins that identify New Relic, Inc. as the publisher fall under New Relic's posted privacy policy. For more information, see the New Relic security website. For other plugins, refer to the publisher's security and compliance statements. Source code If you have any concerns about plugins developed with the SDKs for plugins, you can review the source code and verify that the plugin agents behave as expected. The plugin agent's code is light, and it can be reviewed in minutes. Access to license keys Always keep your New Relic license key private. Typically access to your license key is needed only to record metric data or deployments for your applications, hosts, or plugins that are monitored by New Relic, not to introduce new data or code. No other access is allowed. Access rights When developing a plugin agent, authors and publishers need to consider the environment in which they will be run. You should do everything possible to reduce the level of permissions your plugin users need to grant to the agent in order for it to run correctly. In particular: Unless it is absolutely necessary, do not require su or sudo permissions in order to install your agent or support software on your users' computers. In this situation, the requirements should be limited in scope and well-documented. For additional information about access rights for plugin users, see the documentation about installing a plugin. When running your agent on the users' computers, do not require su or sudo permissions. The components (instances) your plugin agent is monitoring should only need to grant read-only permissions in order for your agent to perform its actions. As much as possible, the components (instances) your plugin agent is monitoring should be able to reduce the levels of information and access needed. When documenting your plugin, describe what level of permissions your plugin agent requires from the components (instances) it is monitoring and why this is necessary. Following these steps will make it easier for your plugin users to install your agent and increase their confidence that your agent cannot harm their components or instances being monitored. This will also reduce the likelihood of user problems if your agent has any serious bugs or other defects. Plugin storage Plugins only need access to their monitored systems and New Relic simply to report metrics. You may want to consider running plugin agents in sequestered systems with limited network access that allow no more than the minimum required network access. Also, data retention for plugins follows New Relic's standard policies. If you have any concerns about deploying any plugin from Plugin Central, follow your organization's guidelines. If for any reason you do not trust the source of an existing plugin, try creating your own version.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.92886,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> security",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " a <em>New</em> <em>Relic</em> account can <em>install</em> and use these <em>plugins</em> through their <em>New</em> <em>Relic</em> user interface. Exception: <em>Plugins</em> in <em>Plugin</em> Central are not supported with accounts that host data in the EU region data center. Having an open community where users both create and consume <em>plugins</em> can raise questions"
      },
      "id": "603ebeb9e7b9d25a642a07d4"
    },
    {
      "sections": [
        "Introduction to Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Developers and SaaS providers",
        "Plugin Central directory",
        "View plugins in Plugin Central",
        "Get started with plugins",
        "Ratings",
        "Reviews",
        "Plugin feedback policy"
      ],
      "title": "Introduction to Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "aa864c660f02e96be1c9cec897300ed96e5e33cb",
      "image": "https://docs.newrelic.com/static/916b76819340fbeb3becda03908ca2d2/c1b63/plugins-landing-page-prototype071720.png",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/introduction-plugin-central/",
      "published_at": "2021-06-09T19:11:06Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Developers and SaaS providers Plugin Central is where partners, third-party vendors, and users could publish plugin agents that collect selected data. This is also where you could install and view the plugin data on your Plugins dashboards as a set of summary metrics, charts, and tables. In most cases, the plugin's agent runs on the users' app server. SaaS or PaaS providers can also create plugin agents that run on their system and report metrics for customers who use New Relic to monitor their applications. For more information, see the specific plugin agent SDK documentation. Plugin Central directory Important Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. The plugin agent collects, sends, and stores the metric data. Plugin Central provides a searchable directory for plugins that developers publish and make publicly available to users. From Plugin Central, you can select and download whatever plugins you want to use. After you install or configure a plugin, you can view the plugin's dashboard data securely from the plugins user interface in New Relic One. View plugins in Plugin Central To view information about available (published) plugins: Go to one.newrelic.com > More > Plugins. By default, available plugins appear in alphabetical order. From the Plugin Central directory in New Relic One, select any published plugin to view a description and install it. Depending on the selected plugin, installation and configuration instructions will vary. Refer to your plugin's documentation for specific details. After you install or configure a plugin, it automatically appears on your Plugins menu in New Relic One, where you can select and view it directly. You may need to wait a few minutes for data to appear. Get started with plugins Here are some tips for making the most of Plugin Central. Ratings Plugins listed in New Relic's Plugin Central include a 5-star rating system, ranging from 1 (lowest) to 5 (highest). This helps you make more informed choices when choosing among similar plugins. This also provides a way for you to share what you think of a plugin. You can rate as many plugins as you want. If you have not voted for a plugin, its current star rating (gold or gray) does not include an outline. You can have only one vote for a specific plugin, and you cannot delete your vote. However, you can change your rating level anytime. After you select the star level (1 to 5) to cast your vote, the stars change to gold with an outline at the rating level you selected. Reviews Plugin Central includes a simple review system to share what you think of a plugin and to provide tips for others about installation and usage. Existing reviews appear when you select an individual plugin's title or Get started link. You can write as many reviews for as many plugins as you want, following the feedback policy. You can also edit or delete your own reviews. When you write a review for a plugin, if you have not already rated the plugin, you must provide a rating. Subsequent reviews will use the rating you provided. You can change your rating at any time. Plugin administrators also reserve the right to delete reviews if necessary. For more information, see Plugin feedback policy. Plugin feedback policy Here are some types of reviews we welcome: Your experience using the plugin Suggestions for improvement Your thoughts or opinions about the plugin, even if you disagree with us or point out mistakes Constructive criticism Your review must not contain personal attacks, name calling, libel, defamation, hate speech, etc. And under no circumstances should you post anything that could be taken as threatening, harassing, bullying, obscene, pornographic, sexist, or racist. We reserve the right to moderate reviews to make sure the tone is civil and fair. We will delete a review or rating in these situations: Spam, such as off-topic or nonsense reviews Inappropriate reviews including profanity and links to offensive content Attacks, including personal attacks against the plugin author or other reviewers, as well as attacks against New Relic or other companies. This does not mean you can't disagree with us or with each other, just be polite about it. False reviews that contain misleading statements or claims Other; for example, reviews or ratings that appear to be gaming the system",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.92886,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Plugin</em> Central",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " for <em>plugins</em> that developers publish and make publicly available to users. From <em>Plugin</em> Central, you can select and download whatever <em>plugins</em> you want to use. After you <em>install</em> or configure a <em>plugin</em>, you can view the <em>plugin</em>&#x27;s dashboard data securely from the <em>plugins</em> user interface in <em>New</em> <em>Relic</em> One"
      },
      "id": "603e81b428ccbc63bdeba79e"
    }
  ],
  "/docs/plugins/plugins-new-relic/install-plugins/use-plugin-central-plugin": [
    {
      "sections": [
        "Install from Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Requirements",
        "Access rights",
        "License key",
        "Typical plugin installation procedures",
        "Install an NPI-compatible plugin",
        "Install the plugin",
        "Manage plugins with the NPI tool",
        "Troubleshoot NPI-compatible plugins",
        "Duplicate plugins",
        "Error message ./npi: line 1: bin/node: No such file or directory",
        "Error message -bash: ./npi: No such file or directory",
        "Insufficient privileges to run background processes",
        "Install with Chef or Puppet",
        "Chef cookbooks",
        "Puppet modules"
      ],
      "title": "Install from Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Install plugins"
      ],
      "external_id": "a19bd4cb7582a8653cd83b18e431b23cb4270876",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/install-plugins/install-plugin-central/",
      "published_at": "2021-06-09T19:12:15Z",
      "updated_at": "2021-03-13T01:16:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Requirements Each plugin in Plugin Central includes its own procedures for how to install, use, troubleshoot, and uninstall it. In order to use a plugin, first verify that your environment meets the plugin's documented requirements. Then follow the plugin's procedures to install the plugin agent on one or more hosts in your monitored environment, or to configure a SaaS plugin as directed by your SaaS provider. As a standard security measure for data collection, your application server must support SHA-2 (256-bit). We do not support SHA-1. Also, plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Access rights When using an agent from Plugin Central, deploy the agent giving the fewest possible permissions in order for the plugin agent to function successfully. Unless the plugin publisher gives specific instructions, you should run the plugin agent as a non-privileged user; do not use su or sudo privileges. This applies to both installing and using the agent. If the plugin agent needs credentials for the component (instance) that it is monitoring, create a custom set of credentials just for the monitoring agent to use. These should be separate from any other production credentials. The custom credentials should grant the fewest possible permissions while still allowing the agent to gather the data it needs. For example, for most plugin agents, you should only need to grant read-only access to your components or instances so the plugin agent cannot modify your system in any way. Also, with many agents, you should only need to grant access to read performance and administration data, not necessarily end customer or other sensitive data. For more information, see Plugin security. License key As part of any plugin installation process, you need your New Relic license key. When you are logged into the Plugins UI, the plugin's installation page in Plugin Central also shows your license key so you can easily copy it to your clipboard. If plugins have been published by SaaS providers, they must have access to the New Relic license key for each individual account. They can capture this information when provisioning new customers via the New Relic Partner API, or they can provide a mechanism for customers to share their existing New Relic license key. Typical plugin installation procedures Installation requirements depend on the type of plugin. For example, a Java plugin agent has different requirements than a Ruby plugin agent. Before you use a plugin, review the documentation that the plugin's publisher provides about the agent's installation requirements. To install any plugin from Plugin Central: Go to one.newrelic.com > More > Plugins. From the Plugin Central directory, select the plugin's title or its Get started button. From the plugin's details page, select the Download or Continue button. Follow the plugin's specific instructions to get your plugin installed and running. After you start running a plugin, it collects and sends data to New Relic, usually within five minutes. The plugin name will automatically appear in the Plugins UI, where you can select and view its summary metrics and dashboards. Install an NPI-compatible plugin The New Relic Platform Installer (NPI) is a command line utility that helps you easily download, configure, and manage a plugin by installing it with a single command. After you install the NPI tool, you can use it to install any plugins that are compatible with it. Install the plugin Plugins that are compatible with the New Relic Platform Installer include an NPI compatible label. If you have not already installed the NPI tool: Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, click the link that says * Requires New Relic Platform Installer (NPI) - Get it here. From the dropdown that opens, select your operating system. Copy the command that appears, then run it in your terminal to install the NPI tool. Unix-based systems: If you need to set a default user, in your terminal, run: ./npi set user <USER NAME> Copy Once you have installed the NPI tool, you can install any NPI compatible plugin. Go to one.newrelic.com > More > Plugins, then select any plugin listed as NPI compatible. From the selected plugin's Installation page in the UI, follow the procedures to copy the specific plugin's installation command. In your terminal, change to the directory ~/newrelic-npi, then paste and run the install command. Manage plugins with the NPI tool To view information that helps you manage NPI-compatible plugins: For usage and commands, help and version flags, and setup examples, run the command --help from the directory ~/newrelic-npi. For a list of plugins that are NPI-compatible, run the command ./npi available. If you need to include proxy settings in your configuration (for both the NPI tool and the plugin's newrelic.json file), use these commands: ./npi config set proxy_host <HOST> ./npi config set proxy_port <PORT> ./npi config set proxy_username <USER NAME> ./npi config set proxy_password <PASSWORD> Copy To view the full path for a plugin, run a where command. This is useful for viewing log files or locating a plugin on your filesystem so you can manually configure it. Troubleshoot NPI-compatible plugins In addition to the troubleshooting procedures provided by the plugin publisher, follow these troubleshooting guidelines when installing NPI-compatible plugins. Duplicate plugins Problem: If you install a plugin and then install the same plugin again through the NPI tool, you will have two versions of the plugin installed. Solution: Delete the older version of the plugin, and then install the NPI-compatible version using the NPI tool. Procedures to delete plugins typically appear in the README file or in other documentation that the plugin publisher provides. Error message ./npi: line 1: bin/node: No such file or directory Problem: The architecture script that you selected when you installed the NPI tool does not match your operating system (for example, x86 instead of x64). Solution: Install the NPI tool using the correct script for your operating system. Error message -bash: ./npi: No such file or directory Problem: You cannot run NPI commands. Solution: You can only access the NPI tool from the location where it was installed. To solve this problem, navigate to the directory ~/newrelic-npi, and run the command again. Insufficient privileges to run background processes Problem: If you try to set a plugin to run as a background process, you might see a message that you have insufficient privileges. Solution: The plugin creates an /etc/init.d script on Linux and a Windows service on Windows, both of which require escalated privileges to run. To solve this problem: Linux: Run the command with sudo in front of it. Windows: Run the command as an administrator. Install with Chef or Puppet In addition to standard installation procedures, you can install plugins with Chef and Puppet configuration management tools. These tools automate plugin installation and make it easier to manage plugins with the rest of your server software. Chef cookbooks Plugins in Plugin Central may come bundled with a Chef script, or you can write your own. If a Chef script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Chef, add the Chef cookbook for New Relic Plugins: Procedures: See Chef's cookbook documentation. New Relic Plugins cookbook: See Chef's community site for newrelic_plugins. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Chef. Then, to install a plugin using Chef: Configure Chef with the plugin details. Run Chef to install the plugin. Chef cookbooks and recipes define roles for specific server configurations. For example, a web server can have the role web_server which includes all of the software and configuration needed for a web server. Here is an example of creating a Chef role for a server running the Wikipedia Java example plugin: name \"newrelic_wikipedia_example_java_plugin\" description \"Server running the New Relic Plugins Wikipedia Example Java Plugin\" run_list( \"recipe[newrelic_plugins::wikipedia_example_java]\" ) default_attributes( \"newrelic\" => { \"license_key\" => \"NEW_RELIC_LICENSE_KEY\", \"wikipedia_example_java\" => { \"install_path\" => \"/path/to/plugin\", \"user\" => \"newrelic\" } } ) Copy Puppet modules Plugins in Plugin Central may come bundled with a Puppet script, or you can write your own. If a Puppet script is provided, this does not mean you are required to use it to install the plugin. Before installing a plugin using Puppet, add New Relic's Puppet module for plugins: Procedures: See Puppet's module documentation. New Relic plugin modules: See the Puppet Forge community site. Requirements and dependencies: See New Relic's GitHub repo for installing plugins with Puppet. Then, to install a plugin using Puppet: Configure Puppet with the plugin details. Run Puppet to install the plugin. Puppet modules contain manifest files that are a collection of classes for configuring a server. For example, a web server can be assigned several classes for the necessary software for a web server. Here is an example of using a Puppet class for a server running the Wikipedia Java example plugin: class { 'newrelic_plugins::wikipedia_example_java': license_key => 'NEW_RELIC_LICENSE_KEY', install_path => '/path/to/plugin', user => 'newrelic' } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.67938,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> from <em>Plugin</em> Central",
        "sections": "<em>Install</em> from <em>Plugin</em> Central",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " to get your <em>plugin</em> installed and running. After you start running a <em>plugin</em>, it collects and sends data to <em>New</em> <em>Relic</em>, usually within five minutes. The <em>plugin</em> name will automatically appear in the <em>Plugins</em> UI, where you can select and view its summary metrics and dashboards. <em>Install</em> an NPI-compatible"
      },
      "id": "60445cdd196a6788d9960f28"
    },
    {
      "sections": [
        "Plugin security",
        "Important",
        "Limited access to legacy plugins",
        "Open community",
        "Third-party content",
        "Source code",
        "Access to license keys",
        "Access rights",
        "Plugin storage"
      ],
      "title": "Plugin security",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "8476f9a0e63a7f58388b4a6e7fb8b089843033e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/plugin-security/",
      "published_at": "2021-06-09T19:11:04Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Open community New Relic's Plugins tool been designed to be open and extensible, so that any New Relic user, developer, technology vendor, or partner may publish publicly accessible plugins within Plugin Central. Anyone who has a New Relic account can install and use these plugins through their New Relic user interface. Exception: Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. Having an open community where users both create and consume plugins can raise questions surrounding security. This document intends to address any security considerations for using these plugins. For more information about New Relic's security measures, see our security and data privacy documentation, or visit the New Relic security website. Third-party content For some plugins, New Relic, Inc. is the publisher, and will be clearly identified as the publisher. However, as an open resource, many plugins are created by our partners and third-party developers. Every plugin in the Plugin Central directory clearly identifies whether it was published by a New Relic developer or by a third party. We require plugin publishers to provide an About link to their website, documentation about what the plugin is for and how to use it, and a link to obtain support when using the plugin. We also require plugin publishers to review and accept the Developer Terms of Service Agreement before they can make their plugin publicly accessible. You can review all information provided by the publisher before installing any plugin. Only those plugins that identify New Relic, Inc. as the publisher fall under New Relic's posted privacy policy. For more information, see the New Relic security website. For other plugins, refer to the publisher's security and compliance statements. Source code If you have any concerns about plugins developed with the SDKs for plugins, you can review the source code and verify that the plugin agents behave as expected. The plugin agent's code is light, and it can be reviewed in minutes. Access to license keys Always keep your New Relic license key private. Typically access to your license key is needed only to record metric data or deployments for your applications, hosts, or plugins that are monitored by New Relic, not to introduce new data or code. No other access is allowed. Access rights When developing a plugin agent, authors and publishers need to consider the environment in which they will be run. You should do everything possible to reduce the level of permissions your plugin users need to grant to the agent in order for it to run correctly. In particular: Unless it is absolutely necessary, do not require su or sudo permissions in order to install your agent or support software on your users' computers. In this situation, the requirements should be limited in scope and well-documented. For additional information about access rights for plugin users, see the documentation about installing a plugin. When running your agent on the users' computers, do not require su or sudo permissions. The components (instances) your plugin agent is monitoring should only need to grant read-only permissions in order for your agent to perform its actions. As much as possible, the components (instances) your plugin agent is monitoring should be able to reduce the levels of information and access needed. When documenting your plugin, describe what level of permissions your plugin agent requires from the components (instances) it is monitoring and why this is necessary. Following these steps will make it easier for your plugin users to install your agent and increase their confidence that your agent cannot harm their components or instances being monitored. This will also reduce the likelihood of user problems if your agent has any serious bugs or other defects. Plugin storage Plugins only need access to their monitored systems and New Relic simply to report metrics. You may want to consider running plugin agents in sequestered systems with limited network access that allow no more than the minimum required network access. Also, data retention for plugins follows New Relic's standard policies. If you have any concerns about deploying any plugin from Plugin Central, follow your organization's guidelines. If for any reason you do not trust the source of an existing plugin, try creating your own version.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.92886,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Plugin</em> security",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " a <em>New</em> <em>Relic</em> account can <em>install</em> and use these <em>plugins</em> through their <em>New</em> <em>Relic</em> user interface. Exception: <em>Plugins</em> in <em>Plugin</em> Central are not supported with accounts that host data in the EU region data center. Having an open community where users both create and consume <em>plugins</em> can raise questions"
      },
      "id": "603ebeb9e7b9d25a642a07d4"
    },
    {
      "sections": [
        "Introduction to Plugin Central",
        "Important",
        "Limited access to legacy plugins",
        "Developers and SaaS providers",
        "Plugin Central directory",
        "View plugins in Plugin Central",
        "Get started with plugins",
        "Ratings",
        "Reviews",
        "Plugin feedback policy"
      ],
      "title": "Introduction to Plugin Central",
      "type": "docs",
      "tags": [
        "Plugins",
        "Plugins New Relic",
        "Get started"
      ],
      "external_id": "aa864c660f02e96be1c9cec897300ed96e5e33cb",
      "image": "https://docs.newrelic.com/static/916b76819340fbeb3becda03908ca2d2/c1b63/plugins-landing-page-prototype071720.png",
      "url": "https://docs.newrelic.com/docs/plugins/plugins-new-relic/get-started/introduction-plugin-central/",
      "published_at": "2021-06-09T19:11:06Z",
      "updated_at": "2021-03-16T11:02:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important For an even better experience than plugins, go to: newrelic.com/integrations: Integrate the on-host and cloud systems you already use with New Relic, so you can filter and analyze data, create dashboards, and set alerts within a single platform. developer.newrelic.com: Use developer tools to collect data from any source, automate workflows, build apps, and use our APIs. Limited access to legacy plugins As of December 2, 2020, plugin access has been limited to accounts that have accessed a legacy plugin in the past 30 days. The legacy plugin experience will reach end of life (EoL) as of June 16, 2021. For more information, see our Explorers Hub post. Developers and SaaS providers Plugin Central is where partners, third-party vendors, and users could publish plugin agents that collect selected data. This is also where you could install and view the plugin data on your Plugins dashboards as a set of summary metrics, charts, and tables. In most cases, the plugin's agent runs on the users' app server. SaaS or PaaS providers can also create plugin agents that run on their system and report metrics for customers who use New Relic to monitor their applications. For more information, see the specific plugin agent SDK documentation. Plugin Central directory Important Plugins in Plugin Central are not supported with accounts that host data in the EU region data center. The plugin agent collects, sends, and stores the metric data. Plugin Central provides a searchable directory for plugins that developers publish and make publicly available to users. From Plugin Central, you can select and download whatever plugins you want to use. After you install or configure a plugin, you can view the plugin's dashboard data securely from the plugins user interface in New Relic One. View plugins in Plugin Central To view information about available (published) plugins: Go to one.newrelic.com > More > Plugins. By default, available plugins appear in alphabetical order. From the Plugin Central directory in New Relic One, select any published plugin to view a description and install it. Depending on the selected plugin, installation and configuration instructions will vary. Refer to your plugin's documentation for specific details. After you install or configure a plugin, it automatically appears on your Plugins menu in New Relic One, where you can select and view it directly. You may need to wait a few minutes for data to appear. Get started with plugins Here are some tips for making the most of Plugin Central. Ratings Plugins listed in New Relic's Plugin Central include a 5-star rating system, ranging from 1 (lowest) to 5 (highest). This helps you make more informed choices when choosing among similar plugins. This also provides a way for you to share what you think of a plugin. You can rate as many plugins as you want. If you have not voted for a plugin, its current star rating (gold or gray) does not include an outline. You can have only one vote for a specific plugin, and you cannot delete your vote. However, you can change your rating level anytime. After you select the star level (1 to 5) to cast your vote, the stars change to gold with an outline at the rating level you selected. Reviews Plugin Central includes a simple review system to share what you think of a plugin and to provide tips for others about installation and usage. Existing reviews appear when you select an individual plugin's title or Get started link. You can write as many reviews for as many plugins as you want, following the feedback policy. You can also edit or delete your own reviews. When you write a review for a plugin, if you have not already rated the plugin, you must provide a rating. Subsequent reviews will use the rating you provided. You can change your rating at any time. Plugin administrators also reserve the right to delete reviews if necessary. For more information, see Plugin feedback policy. Plugin feedback policy Here are some types of reviews we welcome: Your experience using the plugin Suggestions for improvement Your thoughts or opinions about the plugin, even if you disagree with us or point out mistakes Constructive criticism Your review must not contain personal attacks, name calling, libel, defamation, hate speech, etc. And under no circumstances should you post anything that could be taken as threatening, harassing, bullying, obscene, pornographic, sexist, or racist. We reserve the right to moderate reviews to make sure the tone is civil and fair. We will delete a review or rating in these situations: Spam, such as off-topic or nonsense reviews Inappropriate reviews including profanity and links to offensive content Attacks, including personal attacks against the plugin author or other reviewers, as well as attacks against New Relic or other companies. This does not mean you can't disagree with us or with each other, just be polite about it. False reviews that contain misleading statements or claims Other; for example, reviews or ratings that appear to be gaming the system",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.92886,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Plugin</em> Central",
        "sections": "Limited access to legacy <em>plugins</em>",
        "tags": "<em>Plugins</em> <em>New</em> <em>Relic</em>",
        "body": " for <em>plugins</em> that developers publish and make publicly available to users. From <em>Plugin</em> Central, you can select and download whatever <em>plugins</em> you want to use. After you <em>install</em> or configure a <em>plugin</em>, you can view the <em>plugin</em>&#x27;s dashboard data securely from the <em>plugins</em> user interface in <em>New</em> <em>Relic</em> One"
      },
      "id": "603e81b428ccbc63bdeba79e"
    }
  ],
  "/docs/prometheus-remote-write-integration": [
    {
      "sections": [
        "Prometheus High Availability (HA)",
        "Tip",
        "External labels",
        "Prometheus Operator",
        "Standalone Prometheus"
      ],
      "title": "Prometheus High Availability (HA)",
      "type": "docs",
      "tags": [
        "Integrations",
        "Prometheus integrations",
        "Install and configure remote write"
      ],
      "external_id": "3c0fddd6e878f30f8ba4c132f537b88cd47f2eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/prometheus-integrations/install-configure/prometheus-high-availability-ha/",
      "published_at": "2021-06-08T23:15:54Z",
      "updated_at": "2021-03-13T02:41:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using our Prometheus remote write integration in a high-availability (HA) configuration, you need to make sure your Prometheus servers aren't sending multiple copies of the same metrics to New Relic. This document describes how you can configure your remote write integration so that New Relic does not keep duplicated metrics. Tip For information on standard Prometheus remote write integration without using a high-availability configuration, see Set up your Prometheus remote write integration. External labels New Relic requires two external labels to deduplicate data from replicas in a high-availability configuration: Label name Description Example value prometheus A label whose value identifies the name of a high-availability cluster or group of Prometheus servers. monitoring-cluster prometheus_replica A label whose value identifies the unique replica sending this data. replica-1 The remaining sections explain how labels work with Prometheus Operator and standalone Prometheus. Prometheus Operator These external labels are added by default if you use Prometheus Operator version 0.19.0 (or higher). This applies whether you use Prometheus Operator directly or via the helm chart. The operator sets the value of the prometheus label (the one identifying a cluster) as <prometheus deployment namespace>/<prometheus deployment name>. For example, if your namespace for the Prometheus deployment is monitoring and the name of the deployment is prometheus-cluster1, the value is monitoring/prometheus-cluster1. The operator sets the value of the prometheus_replica label as the name of the pod for each replica. This follows the format replica-<replica number>, where the number is the ordinal of that replica (for example, the first replica is named replica-1). Tip If you still see duplicate copies of replica data, make sure you do not have replicaExternalLabelName or prometheusExternalLabelName in your Prometheus spec or chart configuration because these overrides change the label name. Standalone Prometheus When deploying a Prometheus server directly, you need to add the external labels to the configuration file. Here are two different example configurations for replicas within the same high-availability cluster: Replica 1 (prometheus.yml) global: external_labels: prometheus: monitoring-cluster prometheus_replica: replica-1 Copy Replica 2 (prometheus.yml) global: external_labels: prometheus: monitoring-cluster prometheus_replica: replica-2 Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 1943.1891,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Prometheus</em> High Availability (HA)",
        "sections": "<em>Prometheus</em> High Availability (HA)",
        "tags": "<em>Prometheus</em> <em>integrations</em>",
        "body": "If you are using our <em>Prometheus</em> <em>remote</em> <em>write</em> <em>integration</em> in a high-availability (HA) configuration, you need to make sure your <em>Prometheus</em> servers aren&#x27;t sending multiple copies of the same metrics to New Relic. This document describes how you can configure your <em>remote</em> <em>write</em> <em>integration</em> so that New"
      },
      "id": "6044e621196a67b846960f6b"
    },
    {
      "sections": [
        "Send Prometheus metric data to New Relic",
        "Prometheus OpenMetrics or remote write integration?",
        "Prometheus remote write integration",
        "Scale your data and get moving quickly",
        "How it works",
        "Remote write compatibility and requirements",
        "Prometheus OpenMetrics integrations",
        "Reduce overhead and scale your data",
        "Kubernetes",
        "Docker",
        "OpenMetrics integrations compatibility and requirements",
        "Important",
        "What's next"
      ],
      "title": "Send Prometheus metric data to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Prometheus integrations",
        "Get started"
      ],
      "external_id": "c43eafc49c9c82cbf8642897c868c9602cecc6b9",
      "image": "https://docs.newrelic.com/static/3b6e65cd4f0d292124399b59a6195a0a/8c557/Prometheus-remote-write-dashboard.png",
      "url": "https://docs.newrelic.com/docs/integrations/prometheus-integrations/get-started/send-prometheus-metric-data-new-relic/",
      "published_at": "2021-06-08T23:14:46Z",
      "updated_at": "2021-03-16T06:16:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This page provides an overview of New Relic's Prometheus integration options and how they work. The information here will help you choose from among our options based on which one best fits your unique business needs. Prometheus OpenMetrics or remote write integration? We currently offer two integration options: Prometheus remote write integration and Prometheus OpenMetrics integration for Kubernetes or Docker. We recommend getting started with the remote write integration if you already have a Prometheus server install base. If you find it hard to manage your Prometheus cluster, or if you are getting started with integrating Prometheus Metrics, you should use OpenMetrics. Prometheus remote write integration Prometheus OpenMetrics for Kubernetes or Docker Benefits Use this if you currently have Prometheus servers and want an easy way to access your combined metrics from New Relic. It only takes one line of yaml in your Prometheus configuration. You'll be able to access your metrics through both New Relic and Prometheus. You don't need to make any additional adjustments for data to remain available in Prometheus. Federation: Allows you to combine data from multiple servers into a single source. Prometheus High Availability support: We de-duplicate data from HA-pairs on ingest. Use this if you’re looking for an alternative or replacement to a Prometheus server that stores all your metrics directly in New Relic. You won’t have to manage any Prometheus servers yourself. You don't need local storage. Keep in mind You will still need to manage your Prometheus servers, although you should be able to reduce your storage retention, and there’ll be fewer query loads to the server. Slightly more complex setup. No support for High Availability replicas. The Kubernetes operator is not available for enhanced operations automation. Recommendations Evaluate your observability needs to manage your data volumes better: The scrape interval is the biggest factor influencing data volumes: select it based on your observability needs. For example, changing from 15s (default value) to 30s can reduce data volumes by 50%. Set your filters and configure data to target (see metrics or targets). Balance remote write(s) between one or more new relic accounts or sub-accounts to manage rate limits. Regardless of the option you chose, with our Prometheus integrations: You can use Grafana or other query tools via New Relic's Prometheus' API. You benefit from more nuanced security and user management options as part of New Relic One. The New Relic Telemetry Data Platform can be the centralized long-term data store for all your Prometheus metrics, allowing you to observe all your data in one place. You can execute queries to scale, supported by New Relic. Prometheus remote write integration The Prometheus remote write integration allows you to forward telemetry data from your existing Prometheus servers to New Relic. Once integrated, you can leverage the full range of options for setup and management, from raw data to queries, dashboards, and more. Scale your data and get moving quickly With the Prometheus remote write integration, you can: Store and visualize crucial metrics on a single platform Combine and group data across your entire software stack Get a fully connected view of the relationship between data about your software stack and the behaviors and outcomes you’re monitoring Connect your Grafana dashboards (optional). Prometheus remote write dashboard How it works Signup for New Relic is fast and free — we won't even ask for a credit card number. Once logged in, you can get data flowing with a few simple steps: Generate your remote_write URL. Add the new remote_write URL to the configuration file for your Prometheus server. Restart your Prometheus server. Check for your data. Query and explore! Read the setup docs Add Prometheus data Remote write compatibility and requirements New Relic supports the Prometheus remote write integration for Prometheus versions 2.15.0 or newer. Prometheus OpenMetrics integrations New Relic’s Prometheus OpenMetrics integrations for Docker and Kubernetes allow you to scrape Prometheus endpoints and send the data to New Relic, so you can store and visualize crucial metrics on one platform. With these integrations, you can: Automatically identify a static list of endpoints. Collect metrics that are important to your business. Query and visualize this data in the New Relic UI. Connect your Grafana dashboards (optional). Kubernetes OpenMetrics dashboard Reduce overhead and scale your data Collect, analyze, and visualize your metrics data from any source, alongside your telemetry data, so you can correlate issues all in one place. Out-of-the-box integrations for open-source tools like Prometheus make it easy to get started, and eliminate the cost and complexity of hosting, operating, and managing additional monitoring systems. Prometheus OpenMetrics integrations gather all your data in one place, and New Relic stores the metrics from Prometheus. This integration helps remove the overhead of managing storage and availability of the Prometheus server. To learn more about how to scale your data without the hassles of managing Prometheus and a separate dashboard tool, see New Relic's Prometheus OpenMetrics integration blog post. Kubernetes In a Kubernetes environment, New Relic automatically discovers the endpoints in the same way that the Prometheus Kubernetes collector does it. The integration looks for the prometheus.io/scrape annotation or label. You can also identify additional static endpoints in the configuration. Docker The Prometheus OpenMetrics integration gathers all your data in one place, and New Relic stores the metrics from Prometheus. This integration helps remove the overhead of managing storage and availability of the Prometheus server. OpenMetrics integrations compatibility and requirements For Kubernetes and Docker OpenMetrics integrations, you should be aware of the following compatibility and requirements information. Kubernetes New Relic has contributed the Prometheus integration to the open source community under an Apache 2.0 license. This integration supports Prometheus protocol version 2 and Kubernetes versions 1.9 or higher. The integration was tested using Kubernetes 1.9, 1.11, and 1.13 on kops, GKE, and minikube. Limits apply to the metrics you send. For more details, see the metrics API documentation. Important Recommendation: Always run the scraper with one replica. Adding more replicas will result in duplicated data. Docker New Relic has contributed the Prometheus integration to the open source community under an Apache 2.0 license. This integration supports Prometheus protocol version 2. The integration was tested using Docker 1.9, 1.11, and 1.13 on kops, GKE, and minikube. Limits apply to the metrics you send. For details, see the metrics API documentation. What's next Ready to get moving? Here are some suggested next steps: Read the how-to for completing the remote write integration. Learn about Grafana support options. Explore the range of other options available as part of the Telemetry Data Platform.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 1939.502,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Send <em>Prometheus</em> metric data to New Relic",
        "sections": "<em>Prometheus</em> OpenMetrics or <em>remote</em> <em>write</em> <em>integration</em>?",
        "tags": "<em>Prometheus</em> <em>integrations</em>",
        "body": "This page provides an overview of New Relic&#x27;s <em>Prometheus</em> <em>integration</em> options and how they work. The information here will help you choose from among our options based on which one best fits your unique business needs. <em>Prometheus</em> OpenMetrics or <em>remote</em> <em>write</em> <em>integration</em>? We currently offer two"
      },
      "id": "603ea41964441f0d824e8874"
    },
    {
      "image": "https://docs.newrelic.com/static/d2a9c929c7541b67b6fe4c87844fc01b/ae694/prometheus_grafana_dashboard.png",
      "url": "https://docs.newrelic.com/whats-new/2020/08/create-grafana-dashboards-prometheus-data-stored-new-relic/",
      "sections": [
        "Create Grafana dashboards with Prometheus data stored in New Relic",
        "Step 1: Get data flowing into New Relic with the Prometheus remote write integration",
        "Step 2: Configure your Grafana dashboards to use Prometheus data stored in New Relic"
      ],
      "published_at": "2021-06-09T08:00:10Z",
      "title": "Create Grafana dashboards with Prometheus data stored in New Relic",
      "updated_at": "2021-03-11T00:16:19Z",
      "type": "docs",
      "external_id": "da09ab47a2ac806ad3ed1fa67e3a02dd54394383",
      "document_type": "nr1_announcement",
      "popularity": 1,
      "body": "We’ve teamed up with Grafana Labs so you can use our Telemetry Data Platform as a data source for Prometheus metrics and see them in your existing dashboards, seamlessly tapping into the reliability, scale, and security provided by New Relic. Follow the steps below or use this more detailed walkthrough to send Prometheus data to New Relic, so that Grafana can populate your existing Prometheus-specific dashboards with that data. This process requires Prometheus version 2.15.0 or higher and Grafana version 6.7.0 or higher. You’ll also need to sign up for New Relic. Here's an example of how these Grafana dashboards with Prometheus data look in our new dark mode. Step 1: Get data flowing into New Relic with the Prometheus remote write integration Go to Instrument Everything – US or Instrument Everything – EU, then click the Prometheus tile. You can also go to the Prometheus remote write setup page to get your remote_write URL. For more information on how to set up the Prometheus remote write integration, check out our docs. Step 2: Configure your Grafana dashboards to use Prometheus data stored in New Relic For more information on how to configure New Relic as a Prometheus data source for Grafana, check out our docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 1934.9972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create Grafana dashboards with <em>Prometheus</em> data stored in New Relic",
        "sections": "Step 1: Get data flowing into New Relic with the <em>Prometheus</em> <em>remote</em> <em>write</em> <em>integration</em>",
        "body": " these Grafana dashboards with <em>Prometheus</em> data look in our new dark mode. Step 1: Get data flowing into New Relic with the <em>Prometheus</em> <em>remote</em> <em>write</em> <em>integration</em> Go to Instrument Everything – US or Instrument Everything – EU, then click the <em>Prometheus</em> tile. You can also go to the <em>Prometheus</em> <em>remote</em> <em>write</em>"
      },
      "id": "60445821e7b9d23b585799e4"
    }
  ],
  "/docs/python-agent-api-different-call-forms": [
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-06-09T03:24:23Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.84506,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-06-09T05:41:49Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.45624,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This <em>call</em> returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "OneLogin SCIM/SSO application configuration",
        "Requirements",
        "Create authentication domain and enable SAML and SCIM",
        "Configure SCIM/SSO application",
        "Step 1. Fill in the configuration form",
        "Step 2. Fill in the rules form",
        "A rule that only uses actions",
        "Step 3. Fill in the Parameters form",
        "Step 4. Fill in the provisioning form",
        "Tip",
        "Step 5. Save your changes",
        "Assign users"
      ],
      "title": "OneLogin SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d298162c055490c99117f564c3ea9c2ea5dfd8d1",
      "image": "https://docs.newrelic.com/static/8f585557ea58f70d94a746e6439bf1ad/c1b63/onelogin_rules_conditions_actions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/onelogin-scimsso-application-configuration/",
      "published_at": "2021-06-09T00:45:54Z",
      "updated_at": "2021-06-09T00:45:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Create authentication domain and enable SAML and SCIM If you haven't already, create a new authentication domain with SAML SSO enabled and SCIM enabled. You will use values from this UI in later steps. Configure SCIM/SSO application Configuration for the New Relic SCIM/SSO application is split across several forms. This section describes the different forms that need to be configured. From the New Relic by organization application page, fill in the following forms: Step 1. Fill in the configuration form In the left pane, select Configuration and complete the following: Take the authentication domain ID and SCIM bearer token values from New Relic's authentication domain UI and input them into the appropriate app fields. Leave the API Connection disabled until all the configuration described in the following sections is completed. After completing all the configuration, enable the connection. Step 2. Fill in the rules form Configure the user groups to send to New Relic using rules. OneLogin provides this documentation which describes how to use rules to provision groups for users. Decide what type of groups to send along with your users to New Relic. If your organization is using Active Directory or LDAP, you might choose to use security groups to define your users capabilities at New Relic. Another reasonable group choice is OneLogin role. On the New Relic side, your user's groups define their capabilities. The groups that are sent with users will be mapped to New Relic capability groups. Note that at the moment, there is no way to delete a group from the OneLogin side. This is a known limitation from OneLogin. Removing or changing rules does not delete groups already sent to New Relic. If you wish to no longer use a group, removing all the users from the group will prevent it from being used at New Relic. A rule that only uses actions Here's an example rule configuration does not use any conditions. The conditions are left empty to avoid applying any filtering logic to the users. All users will be sent in this example. If you want to send only a subset of users, you need to specify conditions to select the subset. The actions describe where to retrieve the value for the group name and how to parse the value. In this example, we retrieve the group name from the OneLogin role field. The OneLogin role field only has a single value, but sometimes the source for the group name contains other fields besides group name. In other words, some sources give you a list of fields and values and only one of those fields has the value you want to use. In this case, you can insert a regular expression in with value that matches field to find and extract the value for the group name. This example uses the entire value of the For each field for the group name. Step 3. Fill in the Parameters form In the left pane, select Parameters and complete the following: Click Groups field. Check Include in User Provisioning. Click Save. Step 4. Fill in the provisioning form In the left pane, select Provisioning and complete the following: Check Enable provisioning. Under Require admin approval before this action is performed, uncheck these options: Create user Delete user Update user Tip If you do not uncheck these options, SCIM provisioning requests will not be sent until an administrator approves them. Set When users are deleted in OneLogin, or the user's app access is removed, perform the below action to Delete. Set When user accounts are suspended in OneLogin, perform the following action to Suspend. Step 5. Save your changes After you complete the above forms, click Save. Then, return to the Configuration form and enable the API connection. Assign users After New Relic SCIM/SSO application configuration is finished and New Relic side configuration is finished, you can begin to assign users to the application. Assign the New Relic SCIM/SSO application to a user. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click Administration. From the OneLogin Administration page, choose the Users menu Users item. From the OneLogin Users page, click the user you want to assign the application to. From the user's page, click Applications. From the user's application page, click the plus sign and select the \"New Relic by Organization\" application. From the Edit New Relic by Organization login for user page, enter the user's time zone in IANA Time Zone database format (also known as the Olson time zone database format) and click Save. If you're using Roles to define your New Relic capability groups, from the user's application page, click the proper role(s) for the user and then click Save User. OneLogin provisions users in near real time so almost the moment you save the user in OneLogin, the user should be ready to use at New Relic. When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.6697,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Step 1. Fill in the configuration <em>form</em>",
        "body": " is split across several <em>forms</em>. This section describes the <em>different</em> <em>forms</em> that need to be configured. From the New Relic by organization application page, fill in the following <em>forms</em>: Step 1. Fill in the configuration <em>form</em> In the left pane, select Configuration and complete the following: Take"
      },
      "id": "6043f34228ccbccafb2c606a"
    }
  ]
}